['// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/oracle/IExchangeRateOracle.sol\n', '\n', '\n', '/**\n', ' * @title IExchangeRateOracle\n', ' * @notice provides interface for fetching exchange rate values onchain, underlying implementations could use different oracles.\n', '*/\n', 'interface IExchangeRateOracle {\n', '\n', '    /**\n', "     * @notice return the value and the value's timestamp given a request ID\n", '     * @dev use granularity instead of defaulting to 18 for future oracle integrations\n', '     * @param requestId     a number that specifies the exchange rate pair\n', '     * @return false if could not get value, true with valid value, granularity, and timestamp if could get value\n', '     */\n', '    function getCurrentValue(uint256 requestId) external view returns (bool, uint256, uint256, uint256);\n', '}\n', '\n', '// File: contracts/acquisition/ITokenPool.sol\n', '\n', '\n', '/**\n', ' * @title ITokenPool\n', ' * @notice provides interface for token pool where ERC20 tokens can be deposited and withdraw\n', '*/\n', 'interface ITokenPool {\n', '\n', '    /**\n', '    * @notice deposit token into the pool from the source\n', '    * @param amount     amount of token to deposit\n', '    * @return true if success\n', '    */\n', '    function depositAssetToken(uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @notice withdraw token from the pool back to the source\n', '    * @param amount     amount of token to withdraw\n', '    * @return true if success\n', '    */\n', '    function withdrawAssetToken(uint256 amount) external returns (bool);\n', '}\n', '\n', '// File: contracts/acquisition/FixedPriceCADSingleSourceTokenPool.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FixedPriceCADSingleSourceTokenPool\n', ' * @notice Convert USD into a wToken in CAD. wToken is transfered from a single-source pool to the sender of USD, while USD is transferred to the source.\n', '*/\n', 'contract FixedPriceCADSingleSourceTokenPool is ITokenPool {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    event TokenDeposited(uint256 amount);\n', '    event TokenWithdrawn(uint256 amount);\n', '\n', '    event TokenTransaction(address indexed from, address to, uint256 tokenAmount, uint256 usdAmount);\n', '\n', '    // source where the wTokens come from\n', '    address public _poolSource;\n', '\n', '    // address of the wToken\n', '    IERC20 public _wToken;\n', '\n', '    // address of the USD to CAD oracle\n', '    IExchangeRateOracle public _oracle;\n', '\n', '    // wTokens, if fix-priced in CAD, will not require more than 2 decimals\n', '    uint256 public _fixedPriceCADCent;\n', '\n', '    // Dai contract\n', '    IERC20 public _daiContract;\n', '\n', '    // USDC contract\n', '    IERC20 public _usdcContract;\n', '\n', '    // USDT contract\n', '    IERC20 public _usdtContract;\n', '\n', '\n', '    constructor(\n', '        address poolSource,\n', '        address tokenAddress,\n', '        address oracleAddress,\n', '        uint256 fixedPriceCADCent,\n', '\n', '        address daiContractddress,\n', '        address usdcContractAddress,\n', '        address usdtContractAddress\n', '    ) public {\n', '        _poolSource = poolSource;\n', '        _wToken = IERC20(tokenAddress);\n', '        _oracle = IExchangeRateOracle(oracleAddress);\n', '        _fixedPriceCADCent = fixedPriceCADCent;\n', '\n', '        _daiContract = IERC20(daiContractddress);\n', '        _usdcContract = IERC20(usdcContractAddress);\n', '        _usdtContract = IERC20(usdtContractAddress);\n', '    }\n', '\n', '    /**\n', '    * @notice deposit token into the pool from the source\n', '    * @param amount     amount of token to deposit\n', '    * @return true if success\n', '    */\n', '    function depositAssetToken(uint256 amount) external virtual override returns (bool) {\n', '        require(msg.sender == _poolSource, "Only designated source can deposit token");\n', '        require(amount > 0, "Amount must be greater than 0");\n', '\n', '        _wToken.transferFrom(_poolSource, address(this), amount);\n', '\n', '        emit TokenDeposited(amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice withdraw token from the pool back to the source\n', '    * @param amount     amount of token to withdraw\n', '    * @return true if success\n', '    */\n', '    function withdrawAssetToken(uint256 amount) external virtual override returns (bool) {\n', '        require(msg.sender == _poolSource, "Only designated source can withdraw token");\n', '        require(amount > 0, "Amount must be greater than 0");\n', '\n', '        _wToken.transfer(_poolSource, amount);\n', '\n', '        emit TokenWithdrawn(amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice generic function for handling USD deposits and transfer of wTokens as a result\n', '    * @param usdAmount      amount of USD to deposit\n', '    * @param to             address to receive the resulting wTokens\n', '    * @param usdType        1 for Dai, 2 for USDC, 3 for USDT\n', '    * @return true if success\n', '    */\n', '    function depositTo(uint256 usdAmount, address to, uint32 usdType) internal returns (bool) {\n', '        require(usdAmount > 0, "USD amount must be greater than 0");\n', '        require(to != address(0), "Recipient cannot be zero address");\n', '\n', '        uint256 usdAmountInWad = usdAmount;\n', '        if (usdType > 1) {\n', '            // USDC and USDT both have 6 decimals, need to change to 18\n', '            usdAmountInWad = usdAmount.mul(1e12);\n', '        }\n', '\n', '\n', '        // check if there is enough wToken supply to make the conversion\n', '        uint256 tokenAmount = usdToToken(usdAmountInWad);\n', '\n', '        // through not strictly needed, useful to have a clear message for this error case\n', '        require(_wToken.balanceOf(address(this)) >= tokenAmount, "Insufficient token supply in the pool");\n', '\n', '        // transfer corresponding USD tokens to source of wTokens\n', '        if (usdType == 1) {\n', '            _daiContract.safeTransferFrom(msg.sender, _poolSource, usdAmount);\n', '        } else if (usdType == 2) {\n', '            _usdcContract.safeTransferFrom(msg.sender, _poolSource, usdAmount);\n', '        } else if (usdType == 3) {\n', '            _usdtContract.safeTransferFrom(msg.sender, _poolSource, usdAmount);\n', '        } else {\n', '            revert("Unsupported USD type");\n', '        }\n', '\n', '        // transfer wToken to recipient\n', '        _wToken.transfer(to, tokenAmount);\n', '\n', '        emit TokenTransaction(msg.sender, to, tokenAmount, usdAmountInWad);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice deposit Dai and get back wTokens\n', '    * @param usdAmount      amount of Dai to deposit\n', '    * @return true if success\n', '    */\n', '    function depositDai(uint256 usdAmount) external returns (bool) {\n', '        return depositTo(usdAmount, msg.sender, 1);\n', '    }\n', '\n', '    /**\n', '    * @notice deposit USDC and get back wTokens\n', '    * @param usdAmount      amount of USDC to deposit\n', '    * @return true if success\n', '    */\n', '    function depositUSDC(uint256 usdAmount) external returns (bool) {\n', '        return depositTo(usdAmount, msg.sender, 2);\n', '    }\n', '\n', '    /**\n', '    * @notice deposit USDT and get back wTokens\n', '    * @param usdAmount      amount of USDT to deposit\n', '    * @return true if success\n', '    */\n', '    function depositUSDT(uint256 usdAmount) external returns (bool) {\n', '        return depositTo(usdAmount, msg.sender, 3);\n', '    }\n', '\n', '    /**\n', '    * @notice given an USD amount, calculate resulting wToken amount\n', '    * @param usdAmount      amount of USD for conversion\n', '    * @return amount of resulting wTokens\n', '    */\n', '    function usdToToken(uint256 usdAmount) public view returns (uint256) {\n', '        (bool success, uint256 USDToCADRate, uint256 granularity,) = _oracle.getCurrentValue(1);\n', '        require(success, "Failed to fetch USD/CAD exchange rate");\n', '        require(granularity <= 36, "USD rate granularity too high");\n', '\n', '        // use mul before div\n', '        return usdAmount.mul(USDToCADRate).mul(100).div(10 ** granularity).div(_fixedPriceCADCent);\n', '    }\n', '\n', '    /**\n', '    * @notice view how many tokens are currently available\n', '    * @return amount of tokens available in the pool\n', '    */\n', '    function tokensAvailable() public view returns (uint256) {\n', '        return _wToken.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '    * @notice view max amount of USD deposit that can be accepted\n', '    * @return max amount of USD deposit (18 decimal places)\n', '    */\n', '    function availableTokenInUSD() external view returns (uint256) {\n', '        (bool success, uint256 USDToCADRate, uint256 granularity,) = _oracle.getCurrentValue(1);\n', '        require(success, "Failed to fetch USD/CAD exchange rate");\n', '        require(granularity <= 36, "USD rate granularity too high");\n', '\n', '        uint256 tokenAmount = tokensAvailable();\n', '\n', '        return tokenAmount.mul(_fixedPriceCADCent).mul(10 ** granularity).div(100).div(USDToCADRate);\n', '    }\n', '}']