['// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IWSProxy {\n', '    function initialize(address _implementation, address _admin, bytes calldata _data) external;\n', '    function upgradeTo(address _proxy) external;\n', '    function upgradeToAndCall(address _proxy, bytes calldata data) external payable;\n', '    function changeAdmin(address newAdmin) external;\n', '    function admin() external returns (address);\n', '    function implementation() external returns (address);\n', '}\n', '\n', 'interface IWSController {\n', '    function getLogicForPair() external view returns(address);\n', '    function getCurrentAdmin() external view returns(address);\n', '    function updatePairLogic(address _logic) external;\n', '    function updateCurrentAdmin(address _newAdmin) external;\n', '    function updateProxyPair(address _proxy) external;\n', '    function setAdminForProxy(address _proxy) external;\n', '}\n', '\n', 'interface IWSImplementation {\n', '\tfunction getImplementationType() external pure returns(uint256);\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract WSController is Ownable, IWSController {\n', '    address public pairLogic;\n', '    address public currentAdmin;\n', '\n', '    /*\n', '    * @dev Type variable:\n', '    * 2 - Pair\n', '    */\n', '    uint256 constant public PAIR_TYPE = 2;\n', '\n', '    event NewPairLogic(address indexed logic);\n', '    event NewAdmin(address indexed adminAddress);\n', '    event UpdateProxy(address indexed proxyAddress, address newLogic);\n', '    event ChangeAdmin(address indexed proxyAddress, address newAdmin);\n', '\n', '    constructor(address _pairLogic) public {\n', '        require(_pairLogic != address(0), "WSController: Wrong pair logic address");\n', '        currentAdmin = address(this);\n', '        pairLogic = _pairLogic;\n', '    }\n', '\n', '\n', '    function updatePairLogic(address _logic) external override onlyOwner {\n', '        pairLogic = _logic;\n', '        emit NewPairLogic(_logic);\n', '    }\n', '\n', '    function updateCurrentAdmin(address _newAdmin) external override onlyOwner {\n', '        currentAdmin = _newAdmin;\n', '        emit NewAdmin(_newAdmin);\n', '    }\n', '\n', '    function updateProxyPair(address _proxy) external override {\n', '        require(IWSImplementation(IWSProxy(_proxy).implementation()).getImplementationType() == PAIR_TYPE, "WSController: Wrong pair proxy for update.");\n', '        IWSProxy(_proxy).upgradeTo(pairLogic);\n', '        emit UpdateProxy(_proxy, pairLogic);\n', '    }\n', '\n', '    function setAdminForProxy(address _proxy) external override {\n', '        IWSProxy(_proxy).changeAdmin(currentAdmin);\n', '        emit ChangeAdmin(_proxy, currentAdmin);\n', '    }\n', '\n', '    function getLogicForPair() external view override returns(address) {\n', '        return pairLogic;\n', '    }\n', '\n', '    function getCurrentAdmin() external view override returns(address){\n', '        return currentAdmin;\n', '    }\n', '\n', '}']