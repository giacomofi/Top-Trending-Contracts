['// SPDX-License-Identifier: Apache-2.0\n', '// Copyright 2017 Loopring Technology Limited.\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/// @title Utility Functions for uint\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'library MathUint\n', '{\n', '    function mul(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint c)\n', '    {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "MUL_OVERFLOW");\n', '    }\n', '\n', '    function sub(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(b <= a, "SUB_UNDERFLOW");\n', '        return a - b;\n', '    }\n', '\n', '    function add(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint c)\n', '    {\n', '        c = a + b;\n', '        require(c >= a, "ADD_OVERFLOW");\n', '    }\n', '}\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '/// @title Wallet\n', '/// @dev Base contract for smart wallets.\n', '///      Sub-contracts must NOT use non-default constructor to initialize\n', '///      wallet states, instead, `init` shall be used. This is to enable\n', '///      proxies to be deployed in front of the real wallet contract for\n', '///      saving gas.\n', '///\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', '///\n', "/// The design of this contract is inspired by Argent's contract codebase:\n", '/// https://github.com/argentlabs/argent-contracts\n', 'interface Wallet\n', '{\n', '    function version() external pure returns (string memory);\n', '\n', '    function owner() external view returns (address);\n', '\n', '    /// @dev Set a new owner.\n', '    function setOwner(address newOwner) external;\n', '\n', '    /// @dev Adds a new module. The `init` method of the module\n', '    ///      will be called with `address(this)` as the parameter.\n', '    ///      This method must throw if the module has already been added.\n', "    /// @param _module The module's address.\n", '    function addModule(address _module) external;\n', '\n', '    /// @dev Removes an existing module. This method must throw if the module\n', "    ///      has NOT been added or the module is the wallet's only module.\n", "    /// @param _module The module's address.\n", '    function removeModule(address _module) external;\n', '\n', '    /// @dev Checks if a module has been added to this wallet.\n', '    /// @param _module The module to check.\n', '    /// @return True if the module exists; False otherwise.\n', '    function hasModule(address _module) external view returns (bool);\n', '\n', '    /// @dev Binds a method from the given module to this\n', "    ///      wallet so the method can be invoked using this wallet's default\n", '    ///      function.\n', '    ///      Note that this method must throw when the given module has\n', '    ///      not been added to this wallet.\n', "    /// @param _method The method's 4-byte selector.\n", "    /// @param _module The module's address. Use address(0) to unbind the method.\n", '    function bindMethod(bytes4 _method, address _module) external;\n', '\n', '    /// @dev Returns the module the given method has been bound to.\n', "    /// @param _method The method's 4-byte selector.\n", '    /// @return _module The address of the bound module. If no binding exists,\n', '    ///                 returns address(0) instead.\n', '    function boundMethodModule(bytes4 _method) external view returns (address _module);\n', '\n', '    /// @dev Performs generic transactions. Any module that has been added to this\n', '    ///      wallet can use this method to transact on any third-party contract with\n', '    ///      msg.sender as this wallet itself.\n', '    ///\n', "    ///      This method will emit `Transacted` event if it doesn't throw.\n", '    ///\n', '    ///      Note: this method must ONLY allow invocations from a module that has\n', '    ///      been added to this wallet. The wallet owner shall NOT be permitted\n', '    ///      to call this method directly.\n', '    ///\n', '    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\n', '    /// @param to The desitination address.\n', '    /// @param value The amount of Ether to transfer.\n', '    /// @param data The data to send over using `to.call{value: value}(data)`\n', "    /// @return returnData The transaction's return value.\n", '    function transact(\n', '        uint8    mode,\n', '        address  to,\n', '        uint     value,\n', '        bytes    calldata data\n', '        )\n', '        external\n', '        returns (bytes memory returnData);\n', '}\n', '\n', '\n', '\n', '/// @title DataStore\n', '/// @dev Modules share states by accessing the same storage instance.\n', '///      Using ModuleStorage will achieve better module decoupling.\n', '///\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', '///\n', "/// The design of this contract is inspired by Argent's contract codebase:\n", '/// https://github.com/argentlabs/argent-contracts\n', 'abstract contract DataStore\n', '{\n', '    modifier onlyWalletModule(address wallet)\n', '    {\n', '        require(Wallet(wallet).hasModule(msg.sender), "UNAUTHORIZED");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title NonceStore\n', '/// @dev This store maintains all nonces for metaTx\n', 'contract NonceStore is DataStore\n', '{\n', '    mapping(address => uint) public nonces;\n', '\n', '    constructor() DataStore() {}\n', '\n', '    function lastNonce(address wallet)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return nonces[wallet];\n', '    }\n', '\n', '    function isNonceValid(address wallet, uint nonce)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return nonce > nonces[wallet] && (nonce >> 128) <= block.number;\n', '    }\n', '\n', '    function verifyAndUpdate(address wallet, uint nonce)\n', '        public\n', '        onlyWalletModule(wallet)\n', '    {\n', '        require(isNonceValid(wallet, nonce), "INVALID_NONCE");\n', '        nonces[wallet] = nonce;\n', '    }\n', '}']