['pragma solidity ^0.6.5;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    \n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract StakingToken is ERC20  {\n', '    using SafeMath for uint256;\n', '   \n', '    address public owner;   \n', '    \n', '    /* @auditor all displayed variable in frontend will be converted to ether(div(1e18)\n', '        apart from stakeholdersIndex\n', '    */\n', '    uint public totalStakingPool = 0;\n', '    uint internal todayStakingPool = 0;\n', '    uint public stakeholdersCount = 0;\n', '    uint public rewardToShare = 0;\n', '    uint internal todayStakeholdersCountUp = 0;\n', '    uint internal todayStakeholdersCountDown = 0;\n', '    uint public percentGrowth = 0;\n', '    uint public stakeholdersIndex = 0;\n', '    uint public totalStakes = 0;\n', '    uint private setTime1 = 0;\n', '    uint private setTime2 = 0;\n', '    \n', '    struct Referrals {\n', '         uint referralcount;\n', '         address[] referredAddresses;    \n', '    }\n', '    \n', '    struct ReferralBonus {\n', '         uint uplineProfit;\n', '    }\n', '    \n', '    struct Stakeholder {\n', '         bool staker;\n', '         uint id;\n', '    }\n', '    \n', '    mapping (address => Stakeholder) public stakeholders;\n', '    \n', '    mapping (uint => address) public stakeholdersReverseMapping;\n', '    \n', '    mapping(address => uint256) private stakes;\n', '    \n', '    mapping(address => address) public addressThatReferred;\n', '    \n', '    mapping(address => bool) private exist;\n', '    \n', '    mapping(address => uint256) private rewards;\n', '    \n', '    mapping(address => uint256) private time;\n', '    \n', '    mapping(address => Referrals) private referral;\n', '    \n', '    mapping(address => ReferralBonus) public bonus;\n', '    \n', '    mapping (address => address) public admins;\n', '     \n', '     /* ***************\n', '    * DEFINE FUNCTIONS\n', '    *************** */\n', '    \n', '    /**\n', '     * auditor token will be converted to wei(mul(1e18)) in frontend and\n', '     * returned to ether(div(1e18)) when stakeholder checks balance, this way all decimals will be gotten\n', '     */\n', '    \n', '    /*pass token supply to owner of contract\n', '     set name and symbol of token\n', '     contract has to have funds in totalStakeingPool to enable calculation\n', '     */\n', '    constructor(uint256 _supply) public ERC20("Shill", "PoSH") {\n', '        owner = 0xD32E3F1B8553765bB71686fDA048b0d8014915f6;\n', '        uint supply = _supply.mul(1e18);\n', '        _mint(owner, supply); \n', '        \n', '        //to ensure funds are in pool, to be determined by owner and stakeholdersCount is above 0 \n', '        createStake(1000000000000000000000,0x0000000000000000000000000000000000000000);\n', '        totalStakingPool = 50000000000000000000000000;\n', '        admins[owner] = owner;\n', '        admins[0x3B780730D4cF544B7080dEf91Ce2bC084D0Bd33F] = 0x3B780730D4cF544B7080dEf91Ce2bC084D0Bd33F;\n', '        admins[0xabcd812CD592B827522606251e0634564Dd822c1] = 0xabcd812CD592B827522606251e0634564Dd822c1;\n', '        admins[0x77d39a0b0a687af5971Fd07A3117384F47663a0A] = 0x77d39a0b0a687af5971Fd07A3117384F47663a0A;\n', '        addTodayCount();\n', '        addPool();\n', '        \n', '    }\n', '    \n', '    modifier onlyAdmin() {\n', "         require(msg.sender == admins[msg.sender], 'Only admins is allowed to call this function');\n", '         _;\n', '    }\n', '    \n', '    // 1. Referral functions\n', '    \n', '    /* referree bonus will be added to his reward automatically*/\n', '    function addUplineProfit(address stakeholderAddress, uint amount) private  {\n', '        bonus[stakeholderAddress].uplineProfit =  bonus[stakeholderAddress].uplineProfit.add(amount);\n', '    } \n', '    \n', '    /* return referree bonus to zero*/\n', '    function revertUplineProfit(address stakeholderAddress) private  {\n', '        bonus[stakeholderAddress].uplineProfit =  0;\n', '    } \n', '     \n', '     /*returns referralcount for a stakeholder*/\n', '    function stakeholderReferralCount(address stakeholderAddress) external view returns(uint) {\n', '        return referral[stakeholderAddress].referralcount;\n', '     }\n', '    \n', '    /*check if _refereeAddress belongs to a stakeholder and \n', '    add a count, add referral to stakeholder referred list, and whitelist referral\n', '    assign the address that referred a stakeholder to that stakeholder to enable send bonus to referee\n', '    */\n', '    function addReferee(address _refereeAddress) private {\n', "        require(msg.sender != _refereeAddress, 'cannot add your address as your referral');\n", "        require(exist[msg.sender] == false, 'already submitted your referee' );\n", "        require(stakeholders[_refereeAddress].staker == true, 'address does not belong to a stakeholders');\n", '        referral[_refereeAddress].referralcount =  referral[_refereeAddress].referralcount.add(1);   \n', '        referral[_refereeAddress].referredAddresses.push(msg.sender);\n', '        addressThatReferred[msg.sender] = _refereeAddress;\n', '        exist[msg.sender] = true;\n', '    }\n', '    \n', '    /*returns stakeholders Referred List\n', '    */\n', '     function stakeholdersReferredList(address stakeholderAddress) view external returns(address[] memory){\n', '       return (referral[stakeholderAddress].referredAddresses);\n', '    }\n', '    \n', '    // 2. Stake FUNCTIONS\n', '    \n', '    /*add stakes if staker is new add staker to stakeholders\n', '    calculateStakingCost\n', '    add staking cost to pool\n', '    burn stake\n', '    */\n', '    \n', '    /* @auditor stakes will be converted to wei in frontend*/\n', '    function createStake(uint256 _stake, address referree) public {\n', '        _createStake(_stake, referree);\n', '    }\n', '    \n', '    function _createStake(uint256 _stake, address referree)\n', '        private\n', '    {\n', "        require(_stake >= 20, 'minimum stake is 20 tokens');\n", '        if(stakes[msg.sender] == 0){\n', '            addStakeholder(msg.sender);\n', '        }\n', '        uint availableTostake = calculateStakingCost(_stake);\n', '        uint stakeToPool = _stake.sub(availableTostake);\n', '        todayStakingPool = todayStakingPool.add(stakeToPool);\n', '        stakes[msg.sender] = stakes[msg.sender].add(availableTostake);\n', '        totalStakes = totalStakes.add(availableTostake);\n', '        _burn(msg.sender, _stake);\n', '        //in js if no referree, 0x0000000000000000000000000000000000000000 will be used\n', '        if(referree == 0x0000000000000000000000000000000000000000){}\n', '        else{\n', '        addReferee(referree);\n', '        }   \n', '    }\n', '    \n', '     /*remove stakes if staker has no more funds remove staker from stakeholders\n', '    calculateunStakingCost\n', '    add unstaking cost to pool\n', '    mint stake\n', '    */\n', '    \n', '    /* @auditor stakes will be converted to wei in frontend*/\n', '    function removeStake(uint256 _stake) external {\n', '        _removeStake(_stake);\n', '    }\n', '    \n', '    function _removeStake(uint _stake) private {\n', "        require(stakes[msg.sender] > 0, 'stakes must be above 0');\n", '        stakes[msg.sender] = stakes[msg.sender].sub(_stake);\n', '         if(stakes[msg.sender] == 0){\n', '             removeStakeholder(msg.sender);\n', '         }\n', '        uint stakeToReceive = calculateUnstakingCost(_stake);\n', '        uint stakeToPool = _stake.sub(stakeToReceive);\n', '        todayStakingPool = todayStakingPool.add(stakeToPool);\n', '        totalStakes = totalStakes.sub(_stake);\n', '        _mint(msg.sender, stakeToReceive);\n', '    }\n', '    \n', '    /* @auditor stakes will be converted to ether in frontend*/\n', '    function stakeOf(address _stakeholder) external view returns(uint256) {\n', '        return stakes[_stakeholder];\n', '    }\n', '    \n', '    function addStakeholder(address _stakeholder) private {\n', '       if(stakeholders[_stakeholder].staker == false) {\n', '       stakeholders[_stakeholder].staker = true;    \n', '       stakeholders[_stakeholder].id = stakeholdersIndex;\n', '       stakeholdersReverseMapping[stakeholdersIndex] = _stakeholder;\n', '       stakeholdersIndex = stakeholdersIndex.add(1);\n', '       todayStakeholdersCountUp = todayStakeholdersCountUp.add(1);\n', '      }\n', '    }\n', '   \n', '    function removeStakeholder(address _stakeholder) private  {\n', '        if (stakeholders[_stakeholder].staker = true) {\n', '            // get id of the stakeholders to be deleted\n', '            uint swappableId = stakeholders[_stakeholder].id;\n', '            \n', '            // swap the stakeholders info and update admins mapping\n', '            // get the last stakeholdersReverseMapping address for swapping\n', '            address swappableAddress = stakeholdersReverseMapping[stakeholdersIndex -1];\n', '            \n', '            // swap the stakeholdersReverseMapping and then reduce stakeholder index\n', '            stakeholdersReverseMapping[swappableId] = stakeholdersReverseMapping[stakeholdersIndex - 1];\n', '            \n', '            // also remap the stakeholder id\n', '            stakeholders[swappableAddress].id = swappableId;\n', '            \n', '            // delete and reduce admin index \n', '            delete(stakeholders[_stakeholder]);\n', '            delete(stakeholdersReverseMapping[stakeholdersIndex - 1]);\n', '            stakeholdersIndex = stakeholdersIndex.sub(1);\n', '            todayStakeholdersCountDown = todayStakeholdersCountDown.add(1);\n', '        }\n', '    }\n', '    \n', '    // 4. Updating FUNCTIONS\n', '    \n', '    /*add todayStakingPool to totalStakeingPool\n', '    only called once in 24hrs\n', '    reset todayStakingPool to zero\n', '    */\n', '     function addPool() onlyAdmin private {\n', "        require(now > setTime1, 'wait 24hrs from last call');\n", '        setTime1 = now + 1 days;\n', '        totalStakingPool = totalStakingPool.add(todayStakingPool);\n', '        todayStakingPool = 0;\n', '     }\n', '    \n', '    /*\n', '     addTodayCount if stakeholders leave or joins\n', '     only called once in 24hrs \n', '    */\n', '    function addTodayCount() private onlyAdmin returns(uint count) {\n', "        require(now > setTime2, 'wait 24hrs from last call');\n", '        setTime2 = now + 1 days;\n', '        stakeholdersCount = stakeholdersCount.add(todayStakeholdersCountUp);\n', '        todayStakeholdersCountUp = 0;\n', '        stakeholdersCount = stakeholdersCount.sub(todayStakeholdersCountDown);\n', '        todayStakeholdersCountDown = 0;\n', '        count =stakeholdersCount;\n', '    }\n', '    \n', '    /*\n', '     check stakeholdersCountBeforeUpdate before addTodayCount,\n', '     get currentStakeholdersCount, get newStakers by minusing both\n', '     if above 1 you check for the percentGrowth; (newStakers*100)/stakeholdersCountBeforeUpdate\n', '     if 0 or below set rewardToShare and percentGrowth to 0\n', '     checkCommunityGrowthPercent will be called every 24hrs\n', '    */\n', '    function checkCommunityGrowthPercent() external onlyAdmin  {\n', '       uint stakeholdersCountBeforeUpdate = stakeholdersCount;\n', '       uint currentStakeholdersCount = addTodayCount();\n', '       int newStakers = int(currentStakeholdersCount - stakeholdersCountBeforeUpdate);\n', '       if(newStakers <= 0){\n', '           rewardToShare = 0;\n', '           percentGrowth = 0;\n', '       }\n', '       else{\n', '           uint intToUnit = uint(newStakers);\n', '           uint newStaker = intToUnit.mul(100);\n', '           \n', '           //convert percentGrowth to wei to get actual values\n', '           percentGrowth = newStaker.mul(1e18).div(stakeholdersCountBeforeUpdate);\n', '           if(percentGrowth >= 10*10**18){\n', '               \n', '               //gets 10% of percentGrowth\n', '               uint percentOfPoolToShare = percentGrowth.div(10);\n', '               \n', '               /*converts percentGrowth back to ether and also get percentOfPoolToShare of totalStakingPool of yesterday \n', '                ie if percentGrowth is 40% percentOfPoolToShare is 4% will share 4% of yesterday pool\n', '               */\n', '               uint getPoolToShare = totalStakingPool.mul(percentOfPoolToShare).div(1e20);\n', '               totalStakingPool = totalStakingPool.sub(getPoolToShare);\n', '               rewardToShare = getPoolToShare;\n', '           }\n', '           else{\n', '               rewardToShare = 0;\n', '               percentGrowth = 0;\n', '           }\n', '       }\n', '       addPool();\n', '    }\n', '    \n', '     // 4. Reward FUNCTIONS\n', '    \n', '     function calculateReward(address _stakeholder) internal view returns(uint256) {\n', '        return ((stakes[_stakeholder].mul(rewardToShare)).div(totalStakes));\n', '    }\n', '    \n', '    /*\n', '        after stakeholders check for new percentGrowth and rewardToShare \n', '        they get their reward which can only be called once from a stakeholder a day\n', '        all stakeholders gets 95% of their reward if a stakeholder has a referree \n', '        5% is sent to his referree, if no referree 5% wil be sent back to the totalStakingPool\n', '    */\n', '    function getRewards() external {\n', "        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\n", "        require(rewardToShare > 0, 'no reward to share at this time');\n", "        require(now > time[msg.sender], 'can only call this function once per day');\n", '        time[msg.sender] = now + 1 days;\n', '        uint256 reward = calculateReward(msg.sender);\n', '        if(exist[msg.sender]){\n', '            uint removeFromReward = reward.mul(5).div(100);\n', '            uint userRewardAfterUpLineBonus = reward.sub(removeFromReward);\n', '            address addr = addressThatReferred[msg.sender];\n', '            addUplineProfit(addr, removeFromReward);\n', '            rewards[msg.sender] = rewards[msg.sender].add(userRewardAfterUpLineBonus);\n', '        }\n', '        else{\n', '            uint removeFromReward1 = reward.mul(5).div(100);\n', '            totalStakingPool = totalStakingPool.add(removeFromReward1);\n', '            uint userReward = reward.sub(removeFromReward1);\n', '            rewards[msg.sender] = rewards[msg.sender].add(userReward);\n', '        }\n', '    }\n', '    \n', '    /*\n', '        after stakeholder checks the bonus mapping if he has bonus he add them to his reward\n', '    */\n', '    function getReferralBouns() external {\n', "        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\n", "        require(bonus[msg.sender].uplineProfit > 0, 'you do not have any bonus');\n", '        uint bonusToGet = bonus[msg.sender].uplineProfit;\n', '        rewards[msg.sender] = rewards[msg.sender].add(bonusToGet);\n', '        revertUplineProfit(msg.sender);\n', '    }\n', '    \n', '    /* return will converted to ether in frontend*/\n', '    function rewardOf(address _stakeholder) external view returns(uint256){\n', '        return rewards[_stakeholder];\n', '    }\n', '    \n', '    // 5. Tranfer FUNCTIONS\n', '    \n', '    /* token will be converted to wei in frontend*/\n', '    function transfer(address _to, uint256 _tokens) public override  returns (bool) {\n', '       if(msg.sender == admins[msg.sender]){\n', '              _transfer(msg.sender, _to, _tokens);  \n', '          }\n', '        else{\n', '            uint toSend = transferFee(msg.sender, _tokens);\n', '            _transfer(msg.sender, _to, toSend);\n', '           }\n', '        return true;\n', '    }\n', '    \n', '    function bulkTransfer(address[] calldata _receivers, uint256[] calldata _tokens) external returns (bool) {\n', '        require(_receivers.length == _tokens.length);\n', '        uint toSend;\n', '        for (uint256 i = 0; i < _receivers.length; i++) {\n', '            if(msg.sender == admins[msg.sender]){\n', '              _transfer(msg.sender, _receivers[i], _tokens[i].mul(1e18));  \n', '            }\n', '            else{\n', '             toSend = transferFee(msg.sender, _tokens[i]);\n', '            _transfer(msg.sender, _receivers[i], toSend);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 _tokens) public override returns (bool)  {\n', '        if(sender == admins[msg.sender]){\n', '              _transfer(sender, recipient, _tokens);  \n', '        }\n', '        else{\n', '           uint  toSend = transferFee(sender, _tokens);\n', '           _transfer(sender, recipient, toSend);\n', '        }\n', '        _approve(sender, _msgSender(),allowance(sender,msg.sender).sub(_tokens, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    // 6. Calculation FUNCTIONS\n', '    \n', '    /*skaing cost 5% */\n', '    function calculateStakingCost(uint256 _stake) private pure returns(uint) {\n', '        uint stakingCost =  (_stake).mul(5);\n', '        uint percent = stakingCost.div(100);\n', '        uint availableForstake = _stake.sub(percent);\n', '        return availableForstake;\n', '    }\n', '    \n', '    /*unskaing cost 25% */\n', '    function calculateUnstakingCost(uint _stake) private pure returns(uint ) {\n', '        uint unstakingCost =  (_stake).mul(25);\n', '        uint percent = unstakingCost.div(100);\n', '        uint stakeReceived = _stake.sub(percent);\n', '        return stakeReceived;\n', '    }\n', '    \n', '    /*\n', '       remove 10% of _token \n', '       burn 1%\n', '       send 9% to pool\n', '       return actual amount receivers gets\n', '    */\n', '    /* @auditor given token is in wei calculation will work*/\n', '    function transferFee(address sender, uint _token) private returns(uint _transferred){\n', '        uint transferFees =  _token.div(10);\n', '        uint burn = transferFees.div(10);\n', '        uint addToPool = transferFees.sub(burn);\n', '        todayStakingPool = todayStakingPool.add(addToPool);\n', '        _transferred = _token - transferFees;\n', '        _burn(sender, transferFees);\n', '    }\n', '    \n', '    // 7. Withdraw function\n', '    function withdrawReward() public {\n', "        require(rewards[msg.sender] > 0, 'reward balance must be above 0');\n", "        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\n", "        require(percentGrowth >= 10*10**18,'withdraw disabled');\n", '        uint256 reward = rewards[msg.sender];\n', '        rewards[msg.sender] = 0;\n', '        _mint(msg.sender, reward);\n', '    }\n', '}']