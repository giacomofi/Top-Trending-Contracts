['pragma solidity ^0.6.0;\n', '\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-27\n', ' */\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-27\n', ' */\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function mint(address account, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'contract BankManagerAddress is Ownable {\n', '    address BankAddress;\n', '\n', '    modifier onlyBankAddress() {\n', '        require(\n', '            _msgSender() == BankAddress,\n', '            "Caller is not reward distribution"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setBankAddress(address _bankAddress) external onlyOwner {\n', '        BankAddress = _bankAddress;\n', '    }\n', '}\n', '\n', 'contract Bank is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public HoldToken;\n', '    IERC20 public InterestToken;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _bankBudget;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    constructor(address _holdToken, address _interestToken) public {\n', '        HoldToken = IERC20(_holdToken);\n', '        InterestToken = IERC20(_interestToken);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function bankBudget() public view returns (uint256) {\n', '        return _bankBudget;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function backBank(uint256 amount) public virtual {\n', '        _bankBudget = _bankBudget.sub(amount);\n', '        InterestToken.safeTransfer(_msgSender(), amount);\n', '    }\n', '\n', '    function disbursement(uint256 amount) public virtual {\n', '        _bankBudget = _bankBudget.add(amount);\n', '        InterestToken.safeTransferFrom(_msgSender(), address(this), amount);\n', '    }\n', '\n', '    function getInterest(uint256 amount) public virtual {\n', '        _bankBudget = _bankBudget.sub(amount);\n', '        InterestToken.safeTransfer(_msgSender(), amount);\n', '    }\n', '\n', '    function saving(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\n', '        HoldToken.safeTransferFrom(_msgSender(), address(this), amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\n', '        HoldToken.safeTransfer(_msgSender(), amount);\n', '    }\n', '}\n', '\n', 'contract YFOSBankYFOS is\n', '    Bank(\n', '        0xCd254568EBF88f088E40f456db9E17731243cb25, // HoldToken: user save to bank\n', '        0xCd254568EBF88f088E40f456db9E17731243cb25 // InterestToken: bank pay to user\n', '    ),\n', '    BankManagerAddress\n', '{\n', '    uint256 public DURATION = 604800 seconds;\n', '    uint256 public INTEREST_RATE = 50;\n', '    uint256 public MAX_PACKAGE_SAVING = 5;\n', '\n', '    uint256 public nonce = 0;\n', '    uint256 public startTime = 0;\n', '    bool public isBankOpened = true;\n', '\n', '    uint256 public restWishInterest = 0;\n', '\n', '    event BankDisbursement(uint256 reward);\n', '    event OpenBank(uint256 time);\n', '    event CloseBanking(uint256 time);\n', '    event Saving(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event InterestPaid(address indexed user, uint256 amount);\n', '    event UpdateVualtConfig(uint256 duration, uint256 interest_rate);\n', '    event ChangeMaxSaving(uint256 amount);\n', '\n', '    struct SavingInfo {\n', '        uint256 savingTime;\n', '        uint256 amount;\n', '        uint256 duration;\n', '        uint256 interest_rate;\n', '        bool status;\n', '        uint256 updateTime;\n', '    }\n', '\n', '    mapping(address => SavingInfo[]) private usersPackages;\n', '    mapping(address => uint256) public userNonce;\n', '\n', '    modifier requireBankOpened() {\n', '        require(isBankOpened, "Bank is closed.");\n', '        _;\n', '    }\n', '\n', '    function isEndOfPeriod(uint256 savingTime, uint256 duration)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return block.timestamp > savingTime.add(duration);\n', '    }\n', '\n', '    constructor() public {\n', '        BankAddress = _msgSender();\n', '    }\n', '\n', '    function close() public onlyBankAddress {\n', '        require(isBankOpened, "Bank is closed.");\n', '        isBankOpened = false;\n', '        emit CloseBanking(block.timestamp);\n', '    }\n', '\n', '    function open() public onlyBankAddress {\n', '        require(!isBankOpened, "Bank is opened.");\n', '        isBankOpened = true;\n', '        startTime = block.timestamp;\n', '        emit OpenBank(block.timestamp);\n', '    }\n', '\n', '    function updateVaultConfig(uint256 _duration, uint256 _rate) public {\n', '        require(_rate <= 100, "Invalid rate. 0% <= rate <= 100%");\n', '        require(_duration > 0, "Invalid duration.");\n', '        DURATION = _duration;\n', '        INTEREST_RATE = _rate;\n', '        emit UpdateVualtConfig(_duration, _rate);\n', '    }\n', '\n', '    function backBank(uint256 amount) public override onlyBankAddress {\n', '        require(amount > 0, "Cannot back 0");\n', '        super.backBank(amount);\n', '        emit BankDisbursement(amount);\n', '    }\n', '\n', '    function disbursement(uint256 amount) public override onlyBankAddress {\n', '        require(amount > 0, "Cannot disbursement 0");\n', '        super.disbursement(amount);\n', '        emit BankDisbursement(amount);\n', '    }\n', '\n', '    function saving(uint256 amount) public override requireBankOpened {\n', '        require(amount > 0, "Cannot saving 0");\n', '        require(\n', '            amount.mul(INTEREST_RATE).div(10000) <=\n', '                bankBudget().sub(restWishInterest),\n', '            "Not enough interest to pay."\n', '        );\n', '\n', '        (, , , uint256 pending) = userInformation(_msgSender());\n', '\n', '        require(pending < MAX_PACKAGE_SAVING, "Reach max package saving.");\n', '        super.saving(amount);\n', '        restWishInterest = restWishInterest.add(\n', '            amount.mul(INTEREST_RATE).div(10000)\n', '        );\n', '        usersPackages[_msgSender()].push(\n', '            SavingInfo({\n', '                savingTime: block.timestamp,\n', '                updateTime: block.timestamp,\n', '                amount: amount,\n', '                duration: DURATION,\n', '                interest_rate: INTEREST_RATE,\n', '                status: true\n', '            })\n', '        );\n', '        nonce++;\n', '        userNonce[_msgSender()]++;\n', '        emit Saving(_msgSender(), amount);\n', '    }\n', '\n', '    function getSavingPackage(address sender, uint256 pIndex)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 savingTime,\n', '            uint256 amount,\n', '            uint256 duration,\n', '            uint256 interest_rate,\n', '            bool status\n', '        )\n', '    {\n', '        SavingInfo storage savingInfo = usersPackages[sender][pIndex];\n', '        savingTime = savingInfo.savingTime;\n', '        amount = savingInfo.amount;\n', '        duration = savingInfo.duration;\n', '        interest_rate = savingInfo.interest_rate;\n', '        status = savingInfo.status;\n', '    }\n', '\n', '    function userInformation(address sender)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 available,\n', '            uint256 wish,\n', '            uint256 done,\n', '            uint256 pending\n', '        )\n', '    {\n', '        if (userNonce[sender] == 0) {\n', '            return (0, 0, 0, 0);\n', '        }\n', '        for (uint8 index = 0; index < userNonce[sender]; index++) {\n', '            (\n', '                uint256 savingTime,\n', '                uint256 amount,\n', '                uint256 duration,\n', '                uint256 interest_rate,\n', '                bool status\n', '            ) = getSavingPackage(sender, index);\n', '            if (status) {\n', '                if (isEndOfPeriod(savingTime, duration)) {\n', '                    available = available.add(\n', '                        amount.mul(interest_rate).div(10000)\n', '                    );\n', '                }\n', '                wish = wish.add(amount.mul(interest_rate).div(10000));\n', '                pending++;\n', '            } else {\n', '                done++;\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdraw(uint256 pIndex) public override {\n', '        require(pIndex < userNonce[_msgSender()], "Package is not available.");\n', '\n', '        (\n', '            uint256 savingTime,\n', '            uint256 amount,\n', '            uint256 duration,\n', '            uint256 interest_rate,\n', '            bool status\n', '        ) = getSavingPackage(_msgSender(), pIndex);\n', '\n', '        require(status, "Package is end.");\n', '\n', '        usersPackages[_msgSender()][pIndex].status = false;\n', '        usersPackages[_msgSender()][pIndex].updateTime = block.timestamp;\n', '        if (isEndOfPeriod(savingTime, duration)) {\n', '            super.getInterest(amount.mul(interest_rate).div(10000));\n', '        }\n', '\n', '        restWishInterest = restWishInterest.sub(\n', '            amount.mul(interest_rate).div(10000)\n', '        );\n', '\n', '        super.withdraw(amount);\n', '        emit Withdrawn(_msgSender(), amount);\n', '    }\n', '\n', '    function withdrawAll() public {\n', '        for (\n', '            uint8 index = 0;\n', '            index < usersPackages[_msgSender()].length;\n', '            index++\n', '        ) {\n', '            if (usersPackages[_msgSender()][index].status) {\n', '                withdraw(index);\n', '            }\n', '        }\n', '    }\n', '\n', '    function savingInfo(address sender, uint256 pIndex)\n', '        public\n', '        view\n', '        returns (uint256 interest, uint256 countdownTime)\n', '    {\n', '        if (userNonce[sender] <= 0 || pIndex >= userNonce[sender]) {\n', '            return (0, 0);\n', '        }\n', '        (\n', '            uint256 savingTime,\n', '            uint256 amount,\n', '            uint256 duration,\n', '            uint256 interest_rate,\n', '            bool status\n', '        ) = getSavingPackage(sender, pIndex);\n', '        if (status) {\n', '            interest = amount.mul(interest_rate).div(10000);\n', '            if (!isEndOfPeriod(savingTime, duration)) {\n', '                countdownTime = savingTime.add(duration).sub(block.timestamp);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getInterest(uint256) public override {\n', '        (uint256 available, , , ) = userInformation(_msgSender());\n', '        require(available > 0, "No Interest.");\n', '        require(available < bankBudget(), "Contact bank manager for detail.");\n', '        for (\n', '            uint8 index = 0;\n', '            index < usersPackages[_msgSender()].length;\n', '            index++\n', '        ) {\n', '            (\n', '                uint256 savingTime,\n', '                uint256 amount,\n', '                uint256 duration,\n', '                uint256 interest_rate,\n', '                bool status\n', '            ) = getSavingPackage(_msgSender(), index);\n', '            if (status && isEndOfPeriod(savingTime, duration)) {\n', '                usersPackages[_msgSender()][index].status = false;\n', '                super.withdraw(amount);\n', '                usersPackages[_msgSender()][index].updateTime = block.timestamp;\n', '\n', '                restWishInterest = restWishInterest.sub(\n', '                    amount.mul(interest_rate).div(10000)\n', '                );\n', '            }\n', '        }\n', '\n', '        super.getInterest(available);\n', '        emit InterestPaid(_msgSender(), available);\n', '    }\n', '}']