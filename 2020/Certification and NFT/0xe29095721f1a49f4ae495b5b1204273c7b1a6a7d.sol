['// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Zapper\n', '///@notice This contract moves liquidity between UniswapV2 and Balancer pools.\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external pure returns (address);\n', '\n', '    function token1() external pure returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint32 _blockTimestampLast\n', '        );\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external;\n', '}\n', '\n', 'interface IUniswapV2ZapIn {\n', '    function ZapIn(\n', '        address _toWhomToIssue,\n', '        address _FromTokenContractAddress,\n', '        address _ToUnipoolToken0,\n', '        address _ToUnipoolToken1,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens\n', '    ) external payable returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2ZapOut {\n', '    function ZapOut(\n', '        address _ToTokenContractAddress,\n', '        address _FromUniPoolAddress,\n', '        uint256 _IncomingLP,\n', '        uint256 _minTokensRec\n', '    ) external payable returns (uint256);\n', '}\n', '\n', 'interface IBalancerZapIn {\n', '    function EasyZapIn(\n', '        address _FromTokenContractAddress,\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens\n', '    ) external payable returns (uint256 tokensBought);\n', '}\n', '\n', 'interface IBalancerZapOut {\n', '    function EasyZapOut(\n', '        address _ToTokenContractAddress,\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT,\n', '        uint256 _minTokensRec\n', '    ) external payable returns (uint256);\n', '}\n', '\n', 'interface IBPool {\n', '    function isBound(address t) external view returns (bool);\n', '}\n', '\n', 'contract Balancer_UniswapV2_Pipe_V1_3 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    bool public stopped = false;\n', '\n', '    IUniswapV2Factory\n', '        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '\n', '    IBalancerZapOut public balancerZapOut;\n', '    IUniswapV2ZapIn public uniswapV2ZapIn;\n', '    IBalancerZapIn public balancerZapIn;\n', '    IUniswapV2ZapOut public uniswapV2ZapOut;\n', '\n', '    constructor(\n', '        address _balancerZapIn,\n', '        address _balancerZapOut,\n', '        address _uniswapV2ZapIn,\n', '        address _uniswapV2ZapOut\n', '    ) public {\n', '        balancerZapIn = IBalancerZapIn(_balancerZapIn);\n', '        balancerZapOut = IBalancerZapOut(_balancerZapOut);\n', '        uniswapV2ZapIn = IUniswapV2ZapIn(_uniswapV2ZapIn);\n', '        uniswapV2ZapOut = IUniswapV2ZapOut(_uniswapV2ZapOut);\n', '    }\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function PipeBalancerUniV2(\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT,\n', '        address _toUniswapPoolAddress,\n', '        address _toWhomToIssue,\n', '        uint256 _minUniV2Tokens\n', '    ) public nonReentrant stopInEmergency returns (uint256) {\n', '        // Get BPT\n', '        IERC20(_FromBalancerPoolAddress).transferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _IncomingBPT\n', '        );\n', '        // Approve BalUnZap\n', '        IERC20(_FromBalancerPoolAddress).approve(\n', '            address(balancerZapOut),\n', '            _IncomingBPT\n', '        );\n', '\n', '        // Get pair addresses from UniV2Pair\n', '        address token0 = IUniswapV2Pair(_toUniswapPoolAddress).token0();\n', '        address token1 = IUniswapV2Pair(_toUniswapPoolAddress).token1();\n', '\n', '        address zapOutToToken = address(0);\n', '        if (IBPool(_FromBalancerPoolAddress).isBound(token0)) {\n', '            zapOutToToken = token0;\n', '        } else if (IBPool(_FromBalancerPoolAddress).isBound(token1)) {\n', '            zapOutToToken = token1;\n', '        }\n', '\n', '        // ZapOut from Balancer\n', '        uint256 zappedOutAmt = balancerZapOut.EasyZapOut(\n', '            zapOutToToken,\n', '            _FromBalancerPoolAddress,\n', '            _IncomingBPT,\n', '            0\n', '        );\n', '\n', '        uint256 LPTBought;\n', '        if (zapOutToToken == address(0)) {\n', '            // use ETH to ZapIn to UNIV2\n', '            LPTBought = uniswapV2ZapIn.ZapIn.value(zappedOutAmt)(\n', '                _toWhomToIssue,\n', '                address(0),\n', '                token0,\n', '                token1,\n', '                0,\n', '                _minUniV2Tokens\n', '            );\n', '        } else {\n', '            IERC20(zapOutToToken).approve(\n', '                address(uniswapV2ZapIn),\n', '                IERC20(zapOutToToken).balanceOf(address(this))\n', '            );\n', '            LPTBought = uniswapV2ZapIn.ZapIn.value(0)(\n', '                _toWhomToIssue,\n', '                zapOutToToken,\n', '                token0,\n', '                token1,\n', '                zappedOutAmt,\n', '                _minUniV2Tokens\n', '            );\n', '        }\n', '\n', '        return LPTBought;\n', '    }\n', '\n', '    function PipeUniV2Balancer(\n', '        address _FromUniswapPoolAddress,\n', '        uint256 _IncomingLPT,\n', '        address _ToBalancerPoolAddress,\n', '        address _toWhomToIssue,\n', '        uint256 _minBPTokens\n', '    ) public nonReentrant stopInEmergency returns (uint256) {\n', '        // Get LPT\n', '        IERC20(_FromUniswapPoolAddress).transferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _IncomingLPT\n', '        );\n', '\n', '        // Approve UniUnZap\n', '        IERC20(_FromUniswapPoolAddress).approve(\n', '            address(uniswapV2ZapOut),\n', '            _IncomingLPT\n', '        );\n', '\n', '        // Get pair addresses from UniV2Pair\n', '        address token0 = IUniswapV2Pair(_FromUniswapPoolAddress).token0();\n', '        address token1 = IUniswapV2Pair(_FromUniswapPoolAddress).token1();\n', '\n', '        address zapOutToToken = address(0);\n', '        if (IBPool(_ToBalancerPoolAddress).isBound(token0)) {\n', '            zapOutToToken = token0;\n', '        } else if (IBPool(_ToBalancerPoolAddress).isBound(token1)) {\n', '            zapOutToToken = token1;\n', '        }\n', '\n', '        // ZapOut from Uni\n', '        uint256 tokensRec = uniswapV2ZapOut.ZapOut(\n', '            zapOutToToken,\n', '            _FromUniswapPoolAddress,\n', '            _IncomingLPT,\n', '            0\n', '        );\n', '\n', '        // ZapIn to Balancer\n', '        uint256 BPTBought;\n', '        if (zapOutToToken == address(0)) {\n', '            // use ETH to ZapIn to Balancer\n', '            BPTBought = balancerZapIn.EasyZapIn.value(tokensRec)(\n', '                address(0),\n', '                _ToBalancerPoolAddress,\n', '                0,\n', '                _minBPTokens\n', '            );\n', '        } else {\n', '            IERC20(zapOutToToken).approve(address(balancerZapIn), tokensRec);\n', '            BPTBought = balancerZapIn.EasyZapIn.value(0)(\n', '                zapOutToToken,\n', '                _ToBalancerPoolAddress,\n', '                tokensRec,\n', '                _minBPTokens\n', '            );\n', '        }\n', '\n', '        IERC20(_ToBalancerPoolAddress).transfer(_toWhomToIssue, BPTBought);\n', '\n', '        return BPTBought;\n', '    }\n', '\n', '    // Zap Contract Setters\n', '    function setbalancerZapIn(address _balancerZapIn) public onlyOwner {\n', '        balancerZapIn = IBalancerZapIn(_balancerZapIn);\n', '    }\n', '\n', '    function setBalancerZapOut(address _balancerZapOut) public onlyOwner {\n', '        balancerZapOut = IBalancerZapOut(_balancerZapOut);\n', '    }\n', '\n', '    function setUniswapV2ZapIn(address _uniswapV2ZapIn) public onlyOwner {\n', '        uniswapV2ZapIn = IUniswapV2ZapIn(_uniswapV2ZapIn);\n', '    }\n', '\n', '    function setUniswapV2ZapOut(address _uniswapV2ZapOut) public onlyOwner {\n', '        uniswapV2ZapOut = IUniswapV2ZapOut(_uniswapV2ZapOut);\n', '    }\n', '\n', '    // fallback to receive ETH\n', '    function() external payable {}\n', '\n', '    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\n', '        uint256 qty = _TokenAddress.balanceOf(address(this));\n', '        _TokenAddress.transfer(owner(), qty);\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() public onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    // - to withdraw any ETH balance sitting in the contract\n', '    function withdraw() public onlyOwner {\n', '        uint256 contractBalance = address(this).balance;\n', '        address payable _to = owner().toPayable();\n', '        _to.transfer(contractBalance);\n', '    }\n', '}']