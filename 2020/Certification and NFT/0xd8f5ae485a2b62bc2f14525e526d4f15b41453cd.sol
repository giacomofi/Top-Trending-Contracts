['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.6;\n', '\n', 'contract SmartDigitalCoin {\n', '\n', '    string public constant name = "Smart Digital Coin";\n', '    string public constant symbol = "SDC";\n', '    uint8 public constant decimals = 18;  \n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    mapping(address => uint256) balances;\n', '    \n', '    uint256 totalSupply_;\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '   constructor(uint256 total) public {  \n', '\ttotalSupply_ = total;\n', '\tbalances[msg.sender] = totalSupply_;\n', '    }  \n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\treturn totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath { \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '}']