['pragma solidity ^0.6.0;\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        //(bool success, ) = recipient.call.value(amount)("");\n', '        (bool success, ) = recipient.call{value:amount}(""); // todo : for 0.6.0. need to check\n', '\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', 'library TransferHelper {\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', 'interface Erc20 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '}\n', 'interface u_Inter{\n', '    \n', '    function WETH() external pure returns (address); // get wETH address\n', '\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    \n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint[] memory amounts);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface o_Inter{\n', '    function invest(uint256 _amount, uint256 _mode) external returns (uint256); // check return type and value\n', '    function redeem(uint256 _shares) external returns (uint256); // check return type and value\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\tfunction AaveAPR() external view returns (uint256);\n', '\tfunction FulcrumAPR() external view returns (uint256);\n', '\tfunction CompoundAPR() external view returns (uint256);\n', '}\n', '\n', 'interface p_inter{\n', '    function mint(address _to, uint256 _amount) external ;\n', '}\n', '\n', '\n', 'contract EasyDefi is ReentrancyGuard, Ownable{\n', '\tusing SafeERC20 for IERC20;\n', '\tusing Address for address;\n', '\tusing SafeMath for uint256;\n', '\t\n', '\tuint256 public pool;\n', '\t\n', '\taddress public oDAI;\n', '\taddress public oUSDC;\n', '\taddress public oUSDT;\n', '\t\n', '\taddress public DAI;\n', '\taddress public USDT;\n', '\taddress public USDC;\n', '\taddress public pTOKEN;\n', '\t\n', '\taddress public uRoutv2;\n', '\taddress public uWETH;\n', '\t\n', '\taddress public dev_addr;\n', '\t\n', '\tuint256 public timestamp;\n', '\tuint256 public timelag  = uint256(100);\n', '\tstruct TokenInfo {\n', '        uint256 oDAI;\n', '        uint256 oUSDT;\n', '        uint256 oUSDC;\n', '\t}\n', '    mapping (address => TokenInfo) public investorInfo;\n', '    \n', '    event StringFailure(string stringFailure);\n', '    event BytesFailure(bytes bytesFailure);\n', '    event UniswapEvent(address _targetToken, uint256 num, uint256 balance);\n', '    event oTokenEvent(address _oToken, uint256 _mode, uint256 in_num, uint256 out_num); // _mode = 1 : invest, _mode = 2 redeem\n', '    \n', '\tconstructor () public  {\n', '\t    dev_addr = msg.sender;\n', '\t\tuRoutv2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\t\t\n', '\t\toDAI = address(0xe8BB5dd6F06e22A46b2c20E94f150B2294170717);\n', '        DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '\t\toUSDC = address(0xAd7d1abF950b545392136AB11A2b0d6975cb7989);\n', '\t\tUSDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '\t\t\n', '\t\toUSDT = address(0x5Fd762Be9843bb2e5f8eEd0F5F4A6f45ca4De8ef);\n', '\t\tUSDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '\t\t\n', '\t\tapproveToken();\n', '\t}\n', '\t\n', '\tfunction set_oDAIAddr(address _token) public onlyOwner{\n', '        oDAI = _token;\n', '    }\n', '    function set_oUSDTAddr(address _token) public onlyOwner{\n', '        oUSDT = _token;\n', '    }\n', '\tfunction set_oUSDCAddr(address _token) public onlyOwner{\n', '        oUSDC = _token;\n', '    }\n', '\tfunction set_DAIAddr(address _token) public onlyOwner{\n', '        DAI = _token;\n', '    }\n', '    function set_USDTAddr(address _token) public onlyOwner{\n', '        USDT = _token;\n', '    }\n', '\tfunction set_USDCAddr(address _token) public onlyOwner{\n', '        USDC = _token;\n', '    }\n', '\tfunction set_pTOKENAddr(address _token) public onlyOwner{\n', '        pTOKEN = _token;\n', '    }\n', '\tfunction set_DEVAddr(address _token) public onlyOwner{\n', '        dev_addr = _token;\n', '    }\n', '\tfunction set_UniswapAddr(address _token) public onlyOwner{\n', '        uRoutv2 = _token;\n', '    }\n', '\tfunction approveToken() public onlyOwner{\n', '\t\tIERC20(u_Inter(uRoutv2).WETH()).safeApprove(address(this), uint(-1));\n', '        IERC20(u_Inter(uRoutv2).WETH()).safeApprove(uRoutv2, uint(-1));\n', '\t\t\n', '\t    IERC20(DAI).safeApprove(uRoutv2, uint(-1));\n', '\t    IERC20(DAI).safeApprove(address(this), uint(-1));\n', '\t    IERC20(DAI).safeApprove(oDAI, uint(-1));\n', '\t\t\n', '\t\tIERC20(USDT).safeApprove(uRoutv2, uint(-1));\n', '\t    IERC20(USDT).safeApprove(address(this), uint(-1));\n', '\t    IERC20(USDT).safeApprove(oUSDT, uint(-1));\n', '\t\t\n', '\t\tIERC20(USDC).safeApprove(uRoutv2, uint(-1));\n', '\t    IERC20(USDC).safeApprove(address(this), uint(-1));\n', '\t    IERC20(USDC).safeApprove(oUSDC, uint(-1));\n', '\t}\n', '\t\n', '\tfunction getDAIBalance(address _usr) public view returns (uint256){\n', '\t    return investorInfo[_usr].oDAI;\n', '\t}\n', '\tfunction getUSDTBalance(address _usr) public view returns (uint256){\n', '\t    return investorInfo[_usr].oUSDT;\n', '\t}\n', '\tfunction getUSDCBalance(address _usr) public view returns (uint256){\n', '\t    return investorInfo[_usr].oUSDT;\n', '\t}\n', '\tfunction DAI_APR() public view returns (uint256, uint256, uint256){\n', '\t    uint256 iDAI \t= o_Inter(oDAI).FulcrumAPR();\n', '\t\tuint256 aDAI \t= o_Inter(oDAI).AaveAPR();\n', '\t\tuint256 cDAI \t= o_Inter(oDAI).CompoundAPR();\n', '\n', '\t\treturn (iDAI, aDAI, cDAI);\n', '\t}\n', '\tfunction USDT_APR() public view returns (uint256, uint256, uint256){\n', '\t\tuint256 iUSDT \t= o_Inter(oUSDT).FulcrumAPR();\n', '\t\tuint256 aUSDT \t= o_Inter(oUSDT).AaveAPR();\n', '\t\tuint256 cUSDT \t= o_Inter(oUSDT).CompoundAPR();\n', '\n', '\t\treturn (iUSDT, aUSDT, cUSDT);\n', '\t}\n', '\tfunction USDC_APR() public view returns (uint256, uint256, uint256){\n', '\t\tuint256 iUSDC \t= o_Inter(oUSDC).FulcrumAPR();\n', '\t\tuint256 aUSDC \t= o_Inter(oUSDC).AaveAPR();\n', '\t\tuint256 cUSDC \t= o_Inter(oUSDC).CompoundAPR();\n', '\t\t\n', '\t\treturn (iUSDC, aUSDC, cUSDC);\n', '\t}\n', '\t\n', '\tfunction get_stable(uint256 _ethamount,address _token) internal returns (uint256){\n', '\t    address[] memory path = new address[](2);\n', "        path[0] = u_Inter(uRoutv2).WETH(); // it's fixed for now, but just in case\n", '        path[1] = _token;\n', '\t    emit UniswapEvent(_token,365, 365);\n', '\t\t\n', '        try u_Inter(uRoutv2).swapExactETHForTokens{value:_ethamount}(uint256(0),path,address(this),now.add(timelag)) returns (uint[] memory output){ // todo supposedly for 0.6.0 need to check\n', '\t        emit UniswapEvent(_token, output[0], output[1]);\n', '            return output[1]; // todo: should return exchanged amount. need to check\n', '        }\n', '\t    catch Error(string memory _err) {\n', '            emit StringFailure(_err);\n', '        } catch (bytes memory _err) {\n', '            emit BytesFailure(_err);\n', '        }\n', '\t}\n', '\t\n', '\tfunction get_eth(uint256 _stableamount, address _token) internal returns (uint256){\n', '\t    address[] memory path = new address[](2);\n', '\t    path[0] = _token;\n', "        path[1] = u_Inter(uRoutv2).WETH(); // it's fixed for now, but just in case\n", '        emit UniswapEvent(_token,_stableamount, 382);\n', '        try u_Inter(uRoutv2).swapExactTokensForETH(_stableamount,uint256(0),path,address(this),now.add(timelag)) returns (uint[] memory output){\n', '\t        emit UniswapEvent(_token, output[0], output[1]);\n', '            return output[1]; \n', '        }\n', '\t    catch Error(string memory _err) {\n', '            emit StringFailure(_err);\n', '        } catch (bytes memory _err) {\n', '            emit BytesFailure(_err);\n', '        }\n', '\t}\n', '    function getPathForTokenToETH(address crypto) private view returns (address[] memory) {\n', '        address[] memory path = new address[](2);\n', '        path[0] = crypto;\n', '        path[1] = u_Inter(uRoutv2).WETH();\n', '        \n', '        return path;\n', '    }\n', '    function getEstimatedTokenForETH(uint daiQty , address crypto) internal view returns (uint[] memory) {\n', '        return u_Inter(uRoutv2).getAmountsOut(daiQty, getPathForTokenToETH(crypto));\n', '    }\n', '\n', '    function withdraw(uint256 percentage) public payable returns (uint256){\n', '        require(percentage<=100 && percentage>0,"wrong perc");\n', '        uint256 hundred     = uint256(100);\n', '        uint256 dai_amt     = investorInfo[msg.sender].oDAI;\n', '        uint256 usdt_amt    = investorInfo[msg.sender].oUSDT;\n', '        uint256 usdc_amt    = investorInfo[msg.sender].oUSDC;\n', '        uint256 w_eth_amt   = 0;\n', '\t\temit UniswapEvent(DAI,430, IERC20(DAI).balanceOf(address(this)));\n', '        if (dai_amt > 0){\n', '            uint256 withdraw_dai    = dai_amt.mul(percentage).div(hundred);\n', '            uint256 out_dai         = o_Inter(oDAI).redeem(withdraw_dai);\n', '            investorInfo[msg.sender].oDAI      = dai_amt.sub(out_dai);\n', '            emit oTokenEvent(oDAI, 1, withdraw_dai, out_dai);\n', '\t\t    emit UniswapEvent(DAI,436, IERC20(DAI).balanceOf(address(this)));\n', '\n', '            \n', '            w_eth_amt = w_eth_amt.add(get_eth(out_dai, DAI));\n', '        }\n', '        \n', '        if (usdt_amt>0){\n', '            uint256 withdraw_usdt               = usdt_amt.mul(percentage).div(hundred);\n', '            uint256 out_usdt                    = o_Inter(oUSDT).redeem(withdraw_usdt);\n', '            investorInfo[msg.sender].oUSDT      = usdt_amt.sub(out_usdt);\n', '            emit oTokenEvent(oUSDT, 1, withdraw_usdt, out_usdt);\n', '            \n', '            w_eth_amt = w_eth_amt.add(get_eth(out_usdt, USDT));\n', '        }\n', '        \n', '        if (usdc_amt>0){\n', '            uint256 withdraw_usdc               = usdt_amt.mul(percentage).div(hundred);\n', '            uint256 out_usdc                    = o_Inter(oUSDC).redeem(withdraw_usdc);\n', '            investorInfo[msg.sender].oUSDT      = usdc_amt.sub(out_usdc);\n', '            emit oTokenEvent(oUSDC, 1, withdraw_usdc, out_usdc);\n', '            \n', '            w_eth_amt = w_eth_amt.add(get_eth(out_usdc, USDC));\n', '        }\n', '        \n', '        emit UniswapEvent(address(this), w_eth_amt, 7070);\n', '        \n', '        msg.sender.transfer(w_eth_amt);\n', '        return w_eth_amt;\n', '    }\n', '    \n', '\tfunction invest_1(uint256 _token, uint256 _mode, address investor) payable public returns (uint256) {\n', '\t    require (msg.value>0 && (_token==1 || _token ==2 || _token==3),"invest err");\n', '\t    uint256 _wei = msg.value;\n', '\t\tif(_token == 1){ \t\t\n', '\t        emit UniswapEvent(DAI,478, 478);\n', '\t\t\tuint256 num_stable = get_stable(_wei, DAI);\n', '\t\t\temit UniswapEvent(DAI, num_stable, IERC20(DAI).balanceOf(address(this)));\n', '\n', '            uint256 num_oDAI = o_Inter(oDAI).invest(num_stable, _mode);\n', '            emit oTokenEvent(oDAI, 1, num_stable, num_oDAI);\n', '            \n', '            investorInfo[investor].oDAI = investorInfo[investor].oDAI.add(num_oDAI);\n', '            return num_oDAI;\n', '\t\t}\n', '\t\telse if(_token == 2){\t\n', '\t\t    \n', '\t\t    uint256 num_stable = get_stable(_wei, USDT);\n', '\t\t\temit UniswapEvent(USDT, num_stable, IERC20(USDT).balanceOf(address(this)));\n', '\n', '            uint256 num_oUSDT = o_Inter(oUSDT).invest(num_stable, _mode);\n', '            emit oTokenEvent(oUSDT, 1, num_stable, num_oUSDT);\n', '            \n', '            investorInfo[investor].oUSDT = investorInfo[investor].oUSDT.add(num_oUSDT);\n', '            return num_oUSDT;\n', '            \n', '\t\t}\n', '\t\telse if(_token == 3){\t\n', '\t\t    uint256 num_stable = get_stable(_wei, USDC);\n', '\t\t\temit UniswapEvent(USDC, num_stable, IERC20(USDC).balanceOf(address(this)));\n', '\n', '            uint256 num_oUSDC = o_Inter(oUSDC).invest(num_stable, _mode);\n', '            emit oTokenEvent(oUSDC, 1, num_stable, num_oUSDC);\n', '            \n', '            investorInfo[investor].oUSDC = investorInfo[investor].oUSDC.add(num_oUSDC);\n', '            return num_oUSDC;\n', '\t\t}\n', '\t}\n', '\tfunction invest_1(uint256 _token, uint256 _mode) payable public returns (uint256) {\n', '\t    invest_1(_token, _mode, msg.sender);\n', '\t}\n', '\t\n', '\tfunction kill() public onlyOwner{\n', '        selfdestruct(msg.sender);\n', '    }\n', '\tfunction emergencyTokenWithdrawal(address _token, uint256 _amount) onlyOwner public {\n', '        IERC20(_token).safeTransfer(msg.sender, _amount);\n', '    }\n', '    function emergencyETHWithdrawal(uint256 _amount) onlyOwner public{\n', '        msg.sender.transfer(_amount);\n', '    }\n', '    receive() payable external {}\n', '\t\n', '}']