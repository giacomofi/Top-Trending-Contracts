['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev A token holder contract that will allow a beneficiary to extract the\n', ' * tokens after a given release time.\n', ' *\n', ' * Useful for simple vesting schedules like "advisors get all of their tokens\n', ' * after 1 year".\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for IERC20;\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 private _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 private _releaseTime;\n', '\n', '    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(releaseTime > block.timestamp, "TokenTimelock: release time is before current time");\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _releaseTime = releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the time when the tokens are released.\n', '     */\n', '    function releaseTime() public view returns (uint256) {\n', '        return _releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public virtual {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");\n', '\n', '        uint256 amount = _token.balanceOf(address(this));\n', '        require(amount > 0, "TokenTimelock: no tokens to release");\n', '\n', '        _token.safeTransfer(_beneficiary, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev A token holder contract that will allow a beneficiary to extract the\n', ' * tokens by portions based on a metric (TVL)\n', ' *\n', ' * This is ported from openzeppelin-ethereum-package\n', ' *\n', ' * Currently the holder contract is Ownable (while the owner is current beneficiary)\n', ' * still, this allows to check the method calls in blockchain to verify fair play.\n', ' * In the future it will be possible to use automated calculation, e.g. using\n', ' * https://github.com/ConcourseOpen/DeFi-Pulse-Adapters TVL calculation, then\n', ' * ownership would be transferred to the managing contract.\n', ' */\n', 'contract HolderTVLLock is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 private constant RELEASE_PERCENT = 2;\n', '    uint256 private constant RELEASE_INTERVAL = 1 weeks;\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 private _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // timestamp when token release was made last time\n', '    uint256 private _lastReleaseTime;\n', '\n', '    // timestamp of first possible release time\n', '    uint256 private _firstReleaseTime;\n', '\n', '    // TVL metric for last release time\n', '    uint256 private _lastReleaseTVL;\n', '\n', '    // amount that already was released\n', '    uint256 private _released;\n', '\n', '    event TVLReleasePerformed(uint256 newTVL);\n', '\n', '    constructor (IERC20 token, address beneficiary, uint256 firstReleaseTime) public {\n', '        //as contract is deployed by Holyheld token, transfer ownership to dev\n', '        transferOwnership(beneficiary);\n', '\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(firstReleaseTime > block.timestamp, "release time before current time");\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _firstReleaseTime = firstReleaseTime;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the time when the tokens were released last time.\n', '     */\n', '    function lastReleaseTime() public view returns (uint256) {\n', '        return _lastReleaseTime;\n', '    }\n', '\n', '    /**\n', '     * @return the TVL marked when the tokens were released last time.\n', '     */\n', '    function lastReleaseTVL() public view returns (uint256) {\n', '        return _lastReleaseTVL;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     * only owner can call this method as it will write new TVL metric value\n', '     * into the holder contract\n', '     */\n', '    function release(uint256 _newTVL) public onlyOwner {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp >= _firstReleaseTime, "current time before release time");\n', '        require(block.timestamp > _lastReleaseTime + RELEASE_INTERVAL, "release interval is not passed");\n', '        require(_newTVL > _lastReleaseTVL, "only release if TVL is higher");\n', '\n', '        // calculate amount that is possible to release\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        uint256 totalBalance = balance.add(_released);\n', '\n', '        uint256 amount = totalBalance.mul(RELEASE_PERCENT).div(100);\n', '        require(balance > amount, "available balance depleted");\n', '\n', '        _token.safeTransfer(_beneficiary, amount);\n', '\t    _lastReleaseTime = block.timestamp;\n', '\t    _lastReleaseTVL = _newTVL;\n', '\t    _released = _released.add(amount);\n', '\n', '        emit TVLReleasePerformed(_newTVL);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract HolderVesting is Ownable {\n', '    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n', '    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n', '    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n', '    // cliff period of a year and a duration of four years, are safe to use.\n', '    // solhint-disable not-rely-on-time\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 private constant RELEASE_INTERVAL = 1 weeks;\n', '\n', '    event TokensReleased(address token, uint256 amount);\n', '    event TokenVestingRevoked(address token);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 private _token;\n', '\n', '    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n', '    uint256 private _start;\n', '    uint256 private _duration;\n', '\n', '    // timestamp when token release was made last time\n', '    uint256 private _lastReleaseTime;\n', '\n', '    bool private _revocable;\n', '\n', '    uint256 private _released;\n', '    bool private _revoked;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param start the time (as Unix time) at which point vesting starts\n', '     * @param duration duration in seconds of the period in which the tokens will vest\n', '     * @param revocable whether the vesting is revocable or not\n', '     */\n', '    constructor(IERC20 token, address beneficiary, uint256 start, uint256 duration, bool revocable) public {\n', '\n', '        require(beneficiary != address(0), "beneficiary is zero address");\n', '        require(duration > 0, "duration is 0");\n', '        // solhint-disable-next-line max-line-length\n', '        require(start.add(duration) > block.timestamp, "final time before current time");\n', '\n', '        _token = token;\n', '        \n', '        _beneficiary = beneficiary;\n', '        //as contract is deployed by Holyheld token, transfer ownership to dev\n', '        transferOwnership(beneficiary);\n', '\n', '        _revocable = revocable;\n', '        _duration = duration;\n', '        _start = start;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the start time of the token vesting.\n', '     */\n', '    function start() public view returns (uint256) {\n', '        return _start;\n', '    }\n', '\n', '    /**\n', '     * @return the duration of the token vesting.\n', '     */\n', '    function duration() public view returns (uint256) {\n', '        return _duration;\n', '    }\n', '\n', '    /**\n', '     * @return true if the vesting is revocable.\n', '     */\n', '    function revocable() public view returns (bool) {\n', '        return _revocable;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of the token released.\n', '     */\n', '    function released() public view returns (uint256) {\n', '        return _released;\n', '    }\n', '\n', '    /**\n', '     * @return true if the token is revoked.\n', '     */\n', '    function revoked() public view returns (bool) {\n', '        return _revoked;\n', '    }\n', '\n', '    /**\n', '     * @return the time when the tokens were released last time.\n', '     */\n', '    function lastReleaseTime() public view returns (uint256) {\n', '        return _lastReleaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = _releasableAmount();\n', '\n', '        require(unreleased > 0, "no tokens are due");\n', '        require(block.timestamp > _lastReleaseTime + RELEASE_INTERVAL, "release interval is not passed");\n', '\n', '        _released = _released.add(unreleased);\n', '\n', '        _token.safeTransfer(_beneficiary, unreleased);\n', '        _lastReleaseTime = block.timestamp;\n', '\n', '        emit TokensReleased(address(_token), unreleased);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     */\n', '    function revoke() public onlyOwner {\n', '        require(_revocable, "cannot revoke");\n', '        require(!_revoked, "vesting already revoked");\n', '\n', '        uint256 balance = _token.balanceOf(address(this));\n', '\n', '        uint256 unreleased = _releasableAmount();\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        _revoked = true;\n', '\n', '        _token.safeTransfer(owner(), refund);\n', '\n', '        emit TokenVestingRevoked(address(_token));\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     */\n', '    function _releasableAmount() private view returns (uint256) {\n', '        return _vestedAmount().sub(_released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function _vestedAmount() private view returns (uint256) {\n', '        uint256 currentBalance = _token.balanceOf(address(this));\n', '        uint256 totalBalance = currentBalance.add(_released);\n', '\n', '        if (block.timestamp < _start) {\n', '            return 0;\n', '        } else if (block.timestamp >= _start.add(_duration) || _revoked) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Interface to represent a contract in pools that requires additional\n', '// deposit and withdraw of LP tokens. One of the examples at the time of writing\n', '// is Yearn vault, which takes yCRV which is already LP token and returns yyCRV \n', 'interface Stakeable {\n', '    function deposit(uint) external;\n', '    function withdraw(uint) external;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @dev // HolyToken is a ERC20 token for Holyheld.\n', ' *\n', ' * total amount is fixed at 100M HOLY tokens.\n', ' * HOLY token does not have mint functions.\n', ' * It will allocate upon creation the initial transfers\n', ' * of tokens. It is not ownable or having any other\n', ' * means of distribution other than transfers in its constructor. \n', ' */\n', '// HolyToken. Ownable, fixed-amount (non-mintable) with governance to be added\n', 'contract HolyToken is ERC20("HolyToken", "HOLY") {\n', '\n', '    // main developers (founders) multi-sig wallet\n', '    // 1 mln tokens\n', '    address public founder;\n', '\n', '    // Treasury\n', '    // accumulates LP yield\n', '    address public treasury;\n', '\n', '    // weekly vested supply, reclaimable by 2% in a week by founder (WeeklyVested contract)\n', '    // 9 mln\n', '    address public timeVestedSupply;\n', '\n', '    // TVL-growth vested supply, reclaimable by 2% in a week if TVL is a new ATH (TVLVested contract)\n', '    // 10 mln\n', '    address public growthVestedSupply;\n', '\n', '    // main supply, locked for 4 months (TimeVested contract)\n', '    // 56 mln\n', '    address public mainSupply;\n', '    \n', '    // Pool supply (ruled by HolyKnight contract)\n', '    // 24 mln\n', '    address public poolSupply;\n', '\n', '    uint public constant AMOUNT_INITLIQUIDITY = 1000000 * 1e18;\n', '    uint public constant AMOUNT_OPERATIONS = 9000000 * 1e18;\n', '    uint public constant AMOUNT_TEAM = 10000000 * 1e18;\n', '    uint public constant DISTRIBUTION_SUPPLY = 24000000 * 1e18;\n', '    uint public constant DISTRIBUTION_RESERVE_PERCENT = 10;\n', '    uint public constant MAIN_SUPPLY = 56000000 * 1e18;\n', '\n', '    uint public constant MAIN_SUPPLY_VESTING_PERIOD = 127 days;\n', '    uint public constant VESTING_START = 1601510400; //1 Oct 2020\n', '    uint public constant VESTING_START_GROWTH = 1604188800; //1 Nov 2020\n', '\n', '    // parameters for HolyKnight construction\n', '    uint public constant START_LP_BLOCK = 10925630;\n', '    // used for tokens per block calculation to distribute in about 4 months\n', '    uint public constant END_LP_BLOCK = 11669960;\n', '\n', '    // Constructor code is only run when the contract\n', '    // is created\n', '    constructor(address _founder, address _treasuryaddr) public {\n', '        founder = _founder;\t  //address that deployed contract becomes initial founder\n', '        treasury = _treasuryaddr; //treasury address is created beforehand\n', '\n', '        // Timelock contract will hold main supply for 4 months till Jan 2021\n', '\t    mainSupply = address(new HolderTimelock(this, founder, block.timestamp + MAIN_SUPPLY_VESTING_PERIOD));\n', '\n', '        // TVL metric based vesting\n', '\t    growthVestedSupply = address(new HolderTVLLock(this, founder, VESTING_START_GROWTH));\n', '\n', '        // Standard continuous vesting contract\n', '\t    timeVestedSupply = address(new HolderVesting(this, founder, VESTING_START, 365 days, false));\n', '\n', '        // HOLY token distribution though liquidity mining\n', '\t    poolSupply = address(new HolyKnight(this, founder, treasury, DISTRIBUTION_SUPPLY, DISTRIBUTION_RESERVE_PERCENT, START_LP_BLOCK, END_LP_BLOCK));\n', '\n', '        //allocate tokens to addresses upon creation, no further minting possible\n', '\t    _mint(founder, AMOUNT_INITLIQUIDITY);\n', '\t    _mint(timeVestedSupply, AMOUNT_OPERATIONS);\n', '\t    _mint(growthVestedSupply, AMOUNT_TEAM);\n', '\t    _mint(poolSupply, DISTRIBUTION_SUPPLY);\n', '\t    _mint(mainSupply, MAIN_SUPPLY); \n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev // HolyKnight is using LP to distribute Holyheld token\n', ' *\n', ' * it does not mint any HOLY tokens, they must be present on the\n', " * contract's token balance. Balance is not intended to be refillable.\n", ' *\n', " * Note that it's ownable and the owner wields tremendous power. The ownership\n", ' * will be transferred to a governance smart contract once HOLY is sufficiently\n', ' * distributed and the community can show to govern itself.\n', ' *\n', " * Have fun reading it. Hopefully it's bug-free. God bless.\n", ' */\n', 'contract HolyKnight is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of HOLYs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accHolyPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accHolyPerShare` (and `lastRewardCalcBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '        // Thus every change in pool or allocation will result in recalculation of values\n', '        // (otherwise distribution remains constant btwn blocks and will be properly calculated)\n', '        uint256 stakedLPAmount;\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;              // Address of LP token contract\n', '        uint256 allocPoint;          // How many allocation points assigned to this pool. HOLYs to distribute per block\n', '        uint256 lastRewardCalcBlock; // Last block number for which HOLYs distribution is already calculated for the pool\n', '        uint256 accHolyPerShare;     // Accumulated HOLYs per share, times 1e12. See below\n', '        bool    stakeable;         // we should call deposit method on the LP tokens provided (used for e.g. vault staking)\n', '        address stakeableContract;     // location where to deposit LP tokens if pool is stakeable\n', '        IERC20  stakedHoldableToken;\n', '    }\n', '\n', '    // The Holyheld token\n', '    HolyToken public holytoken;\n', '    // Dev address.\n', '    address public devaddr;\n', '    // Treasury address\n', '    address public treasuryaddr;\n', '\n', '    // The block number when HOLY mining starts.\n', '    uint256 public startBlock;\n', '    // The block number when HOLY mining targeted to end (if full allocation).\n', '    uint256 public targetEndBlock;\n', '\n', '    // Total amount of tokens to distribute\n', '    uint256 public totalSupply;\n', '    // Reserved percent of HOLY tokens for current distribution (when pool allocation is not full)\n', '    uint256 public reservedPercent;\n', '    // HOLY tokens created per block, calculatable through updateHolyPerBlock().\n', '    uint256 public holyPerBlock;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    \n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n', '    // Info of total amount of staked LP tokens by all users\n', '    mapping (address => uint256) public totalStaked;\n', '\n', '\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Treasury(address indexed token, address treasury, uint256 amount);\n', '\n', '    constructor(\n', '        HolyToken _token,\n', '        address _devaddr,\n', '        address _treasuryaddr,\n', '        uint256 _totalsupply,\n', '        uint256 _reservedPercent,\n', '        uint256 _startBlock,\n', '        uint256 _targetEndBlock\n', '    ) public {\n', '        holytoken = _token;\n', '\n', '        devaddr = _devaddr;\n', '        treasuryaddr = _treasuryaddr;\n', '\n', '        //as knight is deployed by Holyheld token, transfer ownership to dev\n', '        transferOwnership(_devaddr);\n', '\n', '        totalSupply = _totalsupply;\n', '        reservedPercent = _reservedPercent;\n', '\n', '        startBlock = _startBlock;\n', '        targetEndBlock = _targetEndBlock;\n', '\n', '        //calculate initial token number per block\n', '        updateHolyPerBlock();\n', '    }\n', '\n', '    // Reserve some percentage of HOLY token distribution\n', '    // (e.g. initially, 10% of tokens are reserved for future pools to be added)\n', '    function setReserve(uint256 _reservedPercent) public onlyOwner {\n', '        reservedPercent = _reservedPercent;\n', '        updateHolyPerBlock();\n', '    }\n', '\n', '    function updateHolyPerBlock() internal {\n', '        //safemath substraction cannot overflow\n', '        holyPerBlock = totalSupply.sub(totalSupply.mul(reservedPercent).div(100)).div(targetEndBlock.sub(startBlock));\n', '        massUpdatePools();\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, bool _stakeable, address _stakeableContract, IERC20 _stakedHoldableToken, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardCalcBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            lastRewardCalcBlock: lastRewardCalcBlock,\n', '            accHolyPerShare: 0,\n', '            stakeable: _stakeable,\n', '            stakeableContract: _stakeableContract,\n', '            stakedHoldableToken: IERC20(_stakedHoldableToken)\n', '        }));\n', '\n', '        if(_stakeable)\n', '        {\n', '            _lpToken.approve(_stakeableContract, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n', '        }\n', '    }\n', '\n', "    // Update the given pool's HOLY allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // View function to see pending HOLYs on frontend.\n', '    function pendingHoly(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accHolyPerShare = pool.accHolyPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardCalcBlock && lpSupply != 0) {\n', '            uint256 multiplier = block.number.sub(pool.lastRewardCalcBlock);\n', '            uint256 tokenReward = multiplier.mul(holyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '            accHolyPerShare = accHolyPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accHolyPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardCalcBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardCalcBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = block.number.sub(pool.lastRewardCalcBlock);\n', '        uint256 tokenReward = multiplier.mul(holyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '        //no minting is required, the contract already has token balance allocated\n', '        pool.accHolyPerShare = pool.accHolyPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n', '        pool.lastRewardCalcBlock = block.number;\n', '    }\n', '\n', '    // Deposit LP tokens to HolyKnight for HOLY allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accHolyPerShare).div(1e12).sub(user.rewardDebt);\n', '            safeTokenTransfer(msg.sender, pending); //pay the earned tokens when user deposits\n', '        }\n', '        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accHolyPerShare).div(1e12);\n', '\n', '        if (pool.stakeable) {\n', '            uint256 prevbalance = pool.stakedHoldableToken.balanceOf(address(this));\n', '            Stakeable(pool.stakeableContract).deposit(_amount);\n', '            uint256 balancetoadd = pool.stakedHoldableToken.balanceOf(address(this)).sub(prevbalance);\n', '            user.stakedLPAmount = user.stakedLPAmount.add(balancetoadd);\n', '            //protect received tokens from moving to treasury\n', '            totalStaked[address(pool.stakedHoldableToken)] = totalStaked[address(pool.stakedHoldableToken)].add(balancetoadd);\n', '        }\n', '        else {\n', '            totalStaked[address(pool.lpToken)] = totalStaked[address(pool.lpToken)].add(_amount);\n', '        }\n', '\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from HolyKnight.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '\n', '        uint256 pending = user.amount.mul(pool.accHolyPerShare).div(1e12).sub(user.rewardDebt);\n', '        safeTokenTransfer(msg.sender, pending);\n', '        \n', '        if (pool.stakeable) {\n', '            //reclaim back original LP tokens and withdraw all of them, regardless of amount\n', '            Stakeable(pool.stakeableContract).withdraw(user.stakedLPAmount);\n', '            totalStaked[address(pool.stakedHoldableToken)] = totalStaked[address(pool.stakedHoldableToken)].sub(user.stakedLPAmount);\n', '            user.stakedLPAmount = 0;\n', '            uint256 balance = pool.lpToken.balanceOf(address(this));\n', '            if (user.amount < balance) {\n', '                pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '            } else {\n', '                pool.lpToken.safeTransfer(address(msg.sender), balance);\n', '            }\n', '            user.amount = 0;\n', '            user.rewardDebt = 0;\n', '        } else {\n', '            require(user.amount >= _amount, "withdraw: not good");\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '            totalStaked[address(pool.lpToken)] = totalStaked[address(pool.lpToken)].sub(_amount);\n', '            user.amount = user.amount.sub(_amount);\n', '            user.rewardDebt = user.amount.mul(pool.accHolyPerShare).div(1e12);\n', '        }\n', '        \n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '\n', '        if (pool.stakeable) {\n', '            //reclaim back original LP tokens and withdraw all of them, regardless of amount\n', '            Stakeable(pool.stakeableContract).withdraw(user.stakedLPAmount);\n', '            totalStaked[address(pool.stakedHoldableToken)] = totalStaked[address(pool.stakedHoldableToken)].sub(user.stakedLPAmount);\n', '            user.stakedLPAmount = 0;\n', '            uint256 balance = pool.lpToken.balanceOf(address(this));\n', '            if (user.amount < balance) {\n', '                pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '            } else {\n', '                pool.lpToken.safeTransfer(address(msg.sender), balance);\n', '            }\n', '        } else {\n', '            pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '            totalStaked[address(pool.lpToken)] = totalStaked[address(pool.lpToken)].sub(user.amount);\n', '        }\n', '\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '    }\n', '\n', '    // Safe holyheld token transfer function, just in case if rounding error causes pool to not have enough HOLYs.\n', '    function safeTokenTransfer(address _to, uint256 _amount) internal {\n', '        uint256 balance = holytoken.balanceOf(address(this));\n', '        if (_amount > balance) {\n', '            holytoken.transfer(_to, balance);\n', '        } else {\n', '            holytoken.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    function dev(address _devaddr) public {\n', '        require(msg.sender == devaddr, "forbidden");\n', '        devaddr = _devaddr;\n', '    }\n', '\n', '    // Update treasury address by the previous treasury.\n', '    function treasury(address _treasuryaddr) public {\n', '        require(msg.sender == treasuryaddr, "forbidden");\n', '        treasuryaddr = _treasuryaddr;\n', '    }\n', '\n', '    // Send yield on an LP token to the treasury\n', '    function putToTreasury(address token) public onlyOwner {\n', '        uint256 availablebalance = IERC20(token).balanceOf(address(this)) - totalStaked[token];\n', '        require(availablebalance > 0, "not enough tokens");\n', '        putToTreasuryAmount(token, availablebalance);\n', '    }\n', '\n', '    // Send yield amount realized from holding LP tokens to the treasury\n', '    function putToTreasuryAmount(address token, uint256 _amount) public onlyOwner {\n', '        uint256 userbalances = totalStaked[token];\n', '        uint256 lptokenbalance = IERC20(token).balanceOf(address(this));\n', '        require(token != address(holytoken), "cannot transfer holy tokens");\n', '        require(_amount <= lptokenbalance - userbalances, "not enough tokens");\n', '        IERC20(token).safeTransfer(treasuryaddr, _amount);\n', '        emit Treasury(token, treasuryaddr, _amount);\n', '    }\n', '}\n', '\n', 'contract HolderTimelock is TokenTimelock {\n', '  constructor(\n', '    IERC20 _token, \n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '    TokenTimelock(_token, _beneficiary, _releaseTime)\n', '  //solhint-disable-next-line\n', '  {}\n', '}']