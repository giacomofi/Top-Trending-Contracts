['pragma solidity 0.6.8;\n', '\n', 'contract BetterMatrixForsage {\n', '\n', '    struct User {\n', '        uint id;\n', '        address referrer;\n', '        uint partnersCount;\n', '        bool[] activeX3Levels;\n', '        bool[] activeX6Levels;\n', '        uint balanceX3;\n', '        uint balanceX6;\n', '        uint missedProfits;\n', '        mapping(uint8 => X3) x3Matrix;\n', '        mapping(uint8 => X6) x6Matrix;\n', '    }\n', '\n', '    struct X3 {\n', '        address currentReferrer;\n', '        address[] referrals;\n', '        bool blocked;\n', '        uint reinvestCount;\n', '    }\n', '\n', '    struct X6 {\n', '        address currentReferrer;\n', '        address[] firstLevelReferrals;\n', '        address[] secondLevelReferrals;\n', '        bool blocked;\n', '        uint reinvestCount;\n', '        address closedPart;\n', '    }\n', '\n', '    uint8 public constant LAST_LEVEL = 18;\n', '\n', '    mapping(address => User) public users;\n', '    mapping(uint => address) public idToAddress;\n', '    mapping(address => uint) public userIds;\n', '\n', '    uint public lastUserId = 2;\n', '    address public owner;\n', '    address public lastReferrer;\n', '    uint public distributed;\n', '    uint public lastBid = 0.025 ether;\n', '\n', '    mapping(uint8 => uint) public levelPrice;\n', '\n', '    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\n', '    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\n', '    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\n', '    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\n', '    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\n', '    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\n', '    event Bid(address indexed user, uint bidAmount, uint balance);\n', '\n', '    constructor(address ownerAddress) public {\n', '        levelPrice[1] = 0.025 ether;\n', '        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\n', '            levelPrice[i] = levelPrice[i-1] * 2;\n', '        }\n', '\n', '        owner = ownerAddress;\n', '\n', '        User memory user = User({\n', '            id: 1,\n', '            referrer: address(0),\n', '            partnersCount: uint(0),\n', '            balanceX3 : uint(0),\n', '            balanceX6 : uint(0),\n', '            missedProfits : uint(0),\n', '            activeX3Levels : new bool[](LAST_LEVEL+1),\n', '            activeX6Levels : new bool[](LAST_LEVEL+1)\n', '        });\n', '\n', '        users[ownerAddress] = user;\n', '        idToAddress[1] = ownerAddress;\n', '\n', '        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\n', '            users[ownerAddress].activeX3Levels[i] = true;\n', '            users[ownerAddress].activeX6Levels[i] = true;\n', '        }\n', '\n', '        userIds[ownerAddress] = 1;\n', '        lastReferrer = ownerAddress;\n', '    }\n', '\n', '    receive() external payable {\n', '        address(uint160(owner)).transfer(address(this).balance);\n', '    }\n', '\n', '    fallback() external payable {\n', '        registration(msg.sender, lastReferrer);\n', '    }\n', '\n', '    function registrationExt() external payable {\n', '        registration(msg.sender, lastReferrer);\n', '    }\n', '\n', '    function bidForLastRefferer() external payable {\n', '        require(isUserExists(msg.sender), "user not exists. Register first.");\n', '        require(msg.value >= lastBid, "invalid price");\n', '        address(uint160(owner)).transfer(address(this).balance);\n', '        lastBid = msg.value;\n', '        lastReferrer = msg.sender;\n', '        emit Bid( msg.sender , msg.value , distributed );\n', '    }\n', '\n', '    function buyNewLevel(uint8 matrix, uint8 level) external payable {\n', '        require(isUserExists(msg.sender), "user not exists. Register first.");\n', '        require(matrix == 1 || matrix == 2, "invalid matrix");\n', '        require(msg.value == levelPrice[level], "invalid price");\n', '        require(level > 1 && level <= LAST_LEVEL, "invalid level");\n', '\n', '        if (matrix == 1) {\n', '            require(!users[msg.sender].activeX3Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x3Matrix[level-1].blocked) {\n', '                users[msg.sender].x3Matrix[level-1].blocked = false;\n', '            }\n', '            lastReferrer = msg.sender;\n', '            emit Bid( msg.sender , lastBid , distributed );\n', '            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\n', '            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\n', '            users[msg.sender].activeX3Levels[level] = true;\n', '            updateX3Referrer(msg.sender, freeX3Referrer, level);\n', '\n', '            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\n', '\n', '        } else {\n', '            require(!users[msg.sender].activeX6Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x6Matrix[level-1].blocked) {\n', '                users[msg.sender].x6Matrix[level-1].blocked = false;\n', '            }\n', '            lastReferrer = msg.sender;\n', '            emit Bid( msg.sender , lastBid , distributed );\n', '            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\n', '            users[msg.sender].activeX6Levels[level] = true;\n', '            updateX6Referrer(msg.sender, freeX6Referrer, level);\n', '\n', '            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\n', '        }\n', '    }\n', '\n', '    function registration(address userAddress, address referrerAddress) private {\n', '        require(msg.value == 0.05 ether, "registration cost 0.05");\n', '        require(!isUserExists(userAddress), "user exists");\n', '\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(userAddress)\n', '        }\n', '        require(size == 0, "cannot be a contract");\n', '        \n', '        User memory user = User({\n', '            id: lastUserId,\n', '            referrer: referrerAddress,\n', '            partnersCount: 0,\n', '            balanceX3 : uint(0),\n', '            balanceX6 : uint(0),\n', '            missedProfits : uint(0),\n', '            activeX3Levels : new bool[](LAST_LEVEL+1),\n', '            activeX6Levels : new bool[](LAST_LEVEL+1)\n', '        });\n', '\n', '        users[userAddress] = user;\n', '        idToAddress[lastUserId] = userAddress;\n', '\n', '        users[userAddress].activeX3Levels[1] = true;\n', '        users[userAddress].activeX6Levels[1] = true;\n', '\n', '        userIds[userAddress] = lastUserId;\n', '        lastReferrer = idToAddress[(uint(keccak256(abi.encodePacked(blockhash(block.number-1))))%lastUserId)+1];\n', '        lastBid = 0.025 ether;\n', '        lastUserId++;\n', '\n', '        users[referrerAddress].partnersCount++;\n', '\n', '        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\n', '        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\n', '        updateX3Referrer(userAddress, freeX3Referrer, 1);\n', '\n', '        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\n', '\n', '        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\n', '    }\n', '\n', '    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\n', '            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\n', '            return sendETHDividends(referrerAddress, userAddress, 1, level);\n', '        }\n', '\n', '        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\n', '        //close matrix\n', '        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\n', '        if (level != LAST_LEVEL && !users[referrerAddress].activeX3Levels[level+1]) {\n', '            users[referrerAddress].x3Matrix[level].blocked = true;\n', '        }\n', '\n', '        //create new one by recursion\n', '        if (referrerAddress != owner) {\n', '            //check referrer active level\n', '            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\n', '            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\n', '                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\n', '            }\n', '\n', '            users[referrerAddress].x3Matrix[level].reinvestCount++;\n', '            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\n', '            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\n', '        } else {\n', '            sendETHDividends(owner, userAddress, 1, level);\n', '            users[owner].x3Matrix[level].reinvestCount++;\n', '            emit Reinvest(owner, address(0), userAddress, 1, level);\n', '        }\n', '    }\n', '\n', '    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        require(users[referrerAddress].activeX6Levels[level], "Referrer level is inactive");\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\n', '            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\n', '\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\n', '\n', '            if (referrerAddress == owner) {\n', '                return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '            }\n', '\n', '            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;\n', '            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '\n', '            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\n', '\n', '            if ((len == 2) &&\n', '                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\n', '                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }  else if ((len == 1 || len == 2) &&\n', '                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 3);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 4);\n', '                }\n', '            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }\n', '\n', '            return updateX6ReferrerSecondLevel(userAddress, ref, level);\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\n', '            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\n', '                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart)) {\n', '\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart) {\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else {\n', '                updateX6(userAddress, referrerAddress, level, false);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            }\n', '        }\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        }\n', '\n', '        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <=\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '        } else {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '        }\n', '\n', '        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '    }\n', '\n', '    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\n', '        if (!x2) {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\n', '        } else {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\n', '        }\n', '    }\n', '\n', '    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\n', '        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\n', '            return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '        }\n', '\n', '        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\n', '\n', '        if (x6.length == 2) {\n', '            if (x6[0] == referrerAddress ||\n', '                x6[1] == referrerAddress) {\n', '                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '            }\n', '        }\n', '        else if (x6.length == 1) {\n', '            if (x6[0] == referrerAddress) {\n', '                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '            }\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].closedPart = address(0);\n', '\n', '        if (level != LAST_LEVEL && !users[referrerAddress].activeX6Levels[level+1]) {\n', '            users[referrerAddress].x6Matrix[level].blocked = true;\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].reinvestCount++;\n', '\n', '        if (referrerAddress != owner) {\n', '            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\n', '\n', '            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\n', '            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\n', '        } else {\n', '            emit Reinvest(owner, address(0), userAddress, 2, level);\n', '            sendETHDividends(owner, userAddress, 2, level);\n', '        }\n', '    }\n', '\n', '    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        address actualAddress = userAddress;\n', '        while (true) {\n', '            if (users[users[actualAddress].referrer].activeX3Levels[level]) {\n', '                return users[actualAddress].referrer;\n', '            }\n', '\n', '            actualAddress = users[actualAddress].referrer;\n', '        }\n', '    }\n', '\n', '    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        address actualAddress = userAddress;\n', '        while (true) {\n', '            if (users[users[actualAddress].referrer].activeX6Levels[level]) {\n', '                return users[actualAddress].referrer;\n', '            }\n', '\n', '            actualAddress = users[actualAddress].referrer;\n', '        }\n', '    }\n', '    \n', '    function usersActiveX3Levels(address userAddress) public view returns(bool[] memory) {\n', '        return users[userAddress].activeX3Levels;\n', '    }\n', '\n', '    function usersActiveX6Levels(address userAddress) public view returns(bool[] memory) {\n', '        return users[userAddress].activeX6Levels;\n', '    }\n', '\n', '    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool, uint) {\n', '        return (users[userAddress].x3Matrix[level].currentReferrer,\n', '                users[userAddress].x3Matrix[level].referrals,\n', '                users[userAddress].x3Matrix[level].blocked,\n', '                users[userAddress].x3Matrix[level].reinvestCount);\n', '    }\n', '\n', '    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, uint, address) {\n', '        return (users[userAddress].x6Matrix[level].currentReferrer,\n', '                users[userAddress].x6Matrix[level].firstLevelReferrals,\n', '                users[userAddress].x6Matrix[level].secondLevelReferrals,\n', '                users[userAddress].x6Matrix[level].blocked,\n', '                users[userAddress].x6Matrix[level].reinvestCount,\n', '                users[userAddress].x6Matrix[level].closedPart);\n', '    }\n', '\n', '    function isUserExists(address user) public view returns (bool) {\n', '        return (users[user].id != 0);\n', '    }\n', '\n', '    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\n', '        address receiver = userAddress;\n', '        bool isExtraDividends;\n', '        if (matrix == 1) {\n', '            while (true) {\n', '                if (users[receiver].x3Matrix[level].blocked) {\n', '                    users[receiver].missedProfits += levelPrice[level];\n', '                    emit MissedEthReceive(receiver, _from, 1, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x3Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        } else {\n', '            while (true) {\n', '                if (users[receiver].x6Matrix[level].blocked) {\n', '                    users[receiver].missedProfits += levelPrice[level];\n', '                    emit MissedEthReceive(receiver, _from, 2, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x6Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function updateBalances(address receiver, uint8 matrix, uint quantity) private {\n', '        if (matrix == 1) {\n', '            users[receiver].balanceX3 += quantity;\n', '        }\n', '        else {\n', '            users[receiver].balanceX6 += quantity;\n', '        }\n', '        distributed += quantity;\n', '    }\n', '\n', '    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\n', '        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\n', '\n', '        if (!address(uint160(receiver)).send(levelPrice[level])) {\n', '            updateBalances(receiver, matrix, address(this).balance);\n', '            return address(uint160(receiver)).transfer(address(this).balance);\n', '        }\n', '        \n', '        updateBalances(receiver, matrix, levelPrice[level]);\n', '\n', '        if (isExtraDividends) {\n', '            emit SentExtraEthDividends(_from, receiver, matrix, level);\n', '        }\n', '    }\n', '\n', '}']