['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', 'pragma solidity >=0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/// @title Multicall2 - Aggregate results from multiple read-only function calls. Allow failures\n', '/// @author Michael Elliot <[email\xa0protected]>\n', '/// @author Joshua Levine <[email\xa0protected]>\n', '/// @author Nick Johnson <[email\xa0protected]>\n', '/// @author Bryan Stitt <[email\xa0protected]>\n', '\n', 'contract Multicall2 {\n', '    struct Call {\n', '        address target;\n', '        bytes callData;\n', '    }\n', '    struct Result {\n', '        bool success;\n', '        bytes returnData;\n', '    }\n', '\n', '    // Multiple calls in one! (Replaced by block_and_aggregate and try_block_and_aggregate)\n', '    // Reverts if any call fails.\n', '    function aggregate(Call[] memory calls)\n', '        public\n', '        returns (uint256 blockNumber, bytes[] memory returnData)\n', '    {\n', '        blockNumber = block.number;\n', '        returnData = new bytes[](calls.length);\n', '        for(uint256 i = 0; i < calls.length; i++) {\n', '            // we use low level calls to intionally allow calling arbitrary functions.\n', '            // solium-disable-next-line security/no-low-level-calls\n', '            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n', '            require(success, "Multicall2 aggregate: call failed");\n', '            returnData[i] = ret;\n', '        }\n', '    }\n', '\n', '    // Multiple calls in one!\n', '    // Reverts if any call fails.\n', '    // Use when you are querying the latest block and need all the calls to succeed.\n', '    // Check the hash to protect yourself from re-orgs!\n', '    function block_and_aggregate(Call[] memory calls)\n', '        public\n', '        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData)\n', '    {\n', '        (blockNumber, blockHash, returnData) = try_block_and_aggregate(true, calls);\n', '    }\n', '\n', '    // Multiple calls in one!\n', '    // If `require_success == true`, this revert if a call fails.\n', '    // If `require_success == false`, failures are allowed. Check the success bool before using the returnData.\n', '    // Use when you are querying the latest block.\n', '    // Returns the block and hash so you can protect yourself from re-orgs.\n', '    function try_block_and_aggregate(bool require_success, Call[] memory calls)\n', '        public\n', '        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData)\n', '    {\n', '        blockNumber = block.number;\n', '        blockHash = blockhash(blockNumber);\n', '        returnData = try_aggregate(require_success, calls);\n', '    }\n', '\n', '    // Multiple calls in one!\n', '    // If `require_success == true`, this revert if a call fails.\n', '    // If `require_success == false`, failures are allowed. Check the success bool before using the returnData.\n', '    // Use when you are querying a specific block number and hash.\n', '    function try_aggregate(bool require_success, Call[] memory calls)\n', '        public\n', '        returns (Result[] memory returnData)\n', '    {\n', '        returnData = new Result[](calls.length);\n', '\n', '        for(uint256 i = 0; i < calls.length; i++) {\n', '            // we use low level calls to intionally allow calling arbitrary functions.\n', '            // solium-disable-next-line security/no-low-level-calls\n', '            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n', '\n', '            if (require_success) {\n', '                // TODO: give a more useful message about specifically which call failed\n', '                require(success, "Multicall2 aggregate: call failed");\n', '            }\n', '\n', '            returnData[i] = Result(success, ret);\n', '        }\n', '    }\n', '\n', '\n', '    // Helper functions\n', '    function getBlockHash() public view returns (bytes32 blockHash) {\n', '        blockHash = blockhash(block.number);\n', '    }\n', '    function getBlockNumber() public view returns (uint256 blockNumber) {\n', '        blockNumber = block.number;\n', '    }\n', '    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n', '        coinbase = block.coinbase;\n', '    }\n', '    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n', '        difficulty = block.difficulty;\n', '    }\n', '    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n', '        gaslimit = block.gaslimit;\n', '    }\n', '    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n', '        // solium-disable-next-line security/no-block-members\n', '        timestamp = block.timestamp;\n', '    }\n', '    function getEthBalance(address addr) public view returns (uint256 balance) {\n', '        balance = addr.balance;\n', '    }\n', '    function getLastBlockHash() public view returns (bytes32 blockHash) {\n', '        blockHash = blockhash(block.number - 1);\n', '    }\n', '}']