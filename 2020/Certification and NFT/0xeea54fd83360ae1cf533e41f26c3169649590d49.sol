['pragma solidity 0.5.16;\n', '\n', 'contract FDCDapp {\n', '\n', '  string private version = "v0.25";\n', '\n', '  uint256 private DappReward = 100000;\n', '\n', '  address private FDCContract=0x311C6769461e1d2173481F8d789AF00B39DF6d75;\n', '\n', '  function dappCollectFreedomDividend(address Address) public returns (bool) {\n', '\n', "    (bool successBalance, bytes memory dataBalance) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), address(this)));\n", '    require(successBalance, "Freedom Dividend Collection balanceOf failed.");\n', '    uint256 rewardLeft = abi.decode(dataBalance, (uint256));\n', '\n', '    if (rewardLeft >= DappReward) {\n', "      (bool successTransfer, bytes memory dataTransfer) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), Address, DappReward));\n", '      require(successTransfer, "Freedom Dividend Collection reward failed.");\n', '    }\n', '\n', "    (bool successFreedomDividend, bytes memory dataFreedomDividend) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('collectFreedomDividendWithAddress(address)'))), Address));\n", '    require(successFreedomDividend, "Freedom Dividend Collection failed.");\n', '\n', '    return true;\n', '  }\n', '\n', '  function getVersion() public view returns (string memory) {\n', '    return version;\n', '  }\n', '\n', '}']