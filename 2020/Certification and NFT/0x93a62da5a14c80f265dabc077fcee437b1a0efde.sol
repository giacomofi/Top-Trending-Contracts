['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface OneSplitAudit {\n', '    function swap(\n', '        address fromToken,\n', '        address destToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] calldata distribution,\n', '        uint256 flags\n', '    )\n', '        external\n', '        payable\n', '        returns(uint256 returnAmount);\n', '    \n', '    function getExpectedReturn(\n', '        address fromToken,\n', '        address destToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 flags // See constants in IOneSplit.sol\n', '    )\n', '        external\n', '        view\n', '        returns(\n', '            uint256 returnAmount,\n', '            uint256[] memory distribution\n', '        );\n', '}\n', '\n', 'interface Governance {\n', '    function notifyRewardAmount(uint) external;\n', '}\n', '\n', 'contract TreasuryVault {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address public governance;\n', '    address public onesplit;\n', '    address public rewards = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\n', '    address public ygov = address(0xBa37B002AbaFDd8E89a1995dA52740bbC013D992);\n', '    \n', '    mapping(address => bool) authorized;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n', '    }\n', '    \n', '    function setOnesplit(address _onesplit) external {\n', '        require(msg.sender == governance, "!governance");\n', '        onesplit = _onesplit;\n', '    }\n', '    \n', '    function setRewards(address _rewards) external {\n', '        require(msg.sender == governance, "!governance");\n', '        rewards = _rewards;\n', '    }\n', '    \n', '    function setYGov(address _ygov) external {\n', '        require(msg.sender == governance, "!governance");\n', '        ygov = _ygov;\n', '    }\n', '    \n', '    function setAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = true;\n', '    }\n', '    \n', '    function revokeAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = false;\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function toGovernance(address _token, uint _amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        IERC20(_token).safeTransfer(governance, _amount);\n', '    }\n', '    \n', '    function toVoters() external {\n', '        uint _balance = IERC20(rewards).balanceOf(address(this));\n', '        IERC20(rewards).safeApprove(ygov, 0);\n', '        IERC20(rewards).safeApprove(ygov, _balance);\n', '        Governance(ygov).notifyRewardAmount(_balance);\n', '    }\n', '    \n', '    function getExpectedReturn(address _from, address _to, uint parts) external view returns (uint expected) {\n', '        uint _balance = IERC20(_from).balanceOf(address(this));\n', '        (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_from, _to, _balance, parts, 0);\n', '    }\n', '    \n', '    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\n', '    function convert(address _from, uint parts) external {\n', '        require(authorized[msg.sender]==true,"!authorized");\n', '        uint _amount = IERC20(_from).balanceOf(address(this));\n', '        uint[] memory _distribution;\n', '        uint _expected;\n', '        IERC20(_from).safeApprove(onesplit, 0);\n', '        IERC20(_from).safeApprove(onesplit, _amount);\n', '        (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_from, rewards, _amount, parts, 0);\n', '        OneSplitAudit(onesplit).swap(_from, rewards, _amount, _expected, _distribution, 0);\n', '    }\n', '}']