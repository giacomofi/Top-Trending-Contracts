['// SPDX-License-Identifier: MIT\n', '\n', '/* \n', '\n', '    _    __  __ ____  _     ____       _     _       _       \n', '   / \\  |  \\/  |  _ \\| |   / ___| ___ | | __| |     (_) ___  \n', '  / _ \\ | |\\/| | |_) | |  | |  _ / _ \\| |/ _` |     | |/ _ \\ \n', ' / ___ \\| |  | |  __/| |__| |_| | (_) | | (_| |  _  | | (_) |\n', '/_/   \\_\\_|  |_|_|   |_____\\____|\\___/|_|\\__,_| (_) |_|\\___/ \n', '                                \n', '\n', '    Ample Gold $AMPLG is a goldpegged defi protocol that is based on Ampleforths elastic tokensupply model. \n', '    AMPLG is designed to maintain its base price target of 0.01g of Gold with a progammed inflation adjustment (rebase).\n', '    \n', '    Forked from Ampleforth: https://github.com/ampleforth/uFragments (Credits to Ampleforth team for implementation of rebasing on the ethereum network)\n', '    \n', '    GPL 3.0 license\n', '    \n', '    AMPLG_GoldOracle.sol - AMPLG $AMPLG Oracle\n', '  \n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IGoldOracle {\n', '    function getGoldPrice() external view returns (uint256, bool);\n', '    function getMarketPrice() external view returns (uint256, bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract AMPLGGoldOracle is IGoldOracle, Ownable {\n', '  \n', '    uint256 goldPrice;\n', '    uint256 marketPrice;\n', '\n', '    function setGoldPrice(uint256 _goldprice) external onlyOwner {\n', '        goldPrice = _goldprice;\n', '    }\n', '\n', '    function setMarketPrice(uint256 _marketprice) external onlyOwner {\n', '        marketPrice = _marketprice;\n', '    }\n', '    \n', '    function getGoldPrice() external override view returns (uint256, bool) {\n', '        return (goldPrice, true);\n', '    }\n', '\n', '    function getMarketPrice() external override view returns (uint256, bool) {\n', '        return (marketPrice, true);\n', '    }\n', '}']