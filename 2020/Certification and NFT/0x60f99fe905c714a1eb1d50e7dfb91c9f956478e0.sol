['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/spec_interfaces/IProtocolWallet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @title Protocol Wallet interface\n', 'interface IProtocolWallet {\n', '    event FundsAddedToPool(uint256 added, uint256 total);\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the address of the underlying staked token\n', '    /// @return balance is the wallet balance\n', '    function getBalance() external view returns (uint256 balance);\n', '\n', '    /// Transfers the given amount of orbs tokens form the sender to this contract and updates the pool\n', '    /// @dev assumes the caller approved the amount prior to calling\n', '    /// @param amount is the amount to add to the wallet\n', '    function topUp(uint256 amount) external;\n', '\n', "    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\n", '    /// @dev may only be called by the wallet client\n', '    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\n', "    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\n", '    /// @param amount is the amount to withdraw\n', '    function withdraw(uint256 amount) external; /* onlyClient */\n', '\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event ClientSet(address client);\n', '    event MaxAnnualRateSet(uint256 maxAnnualRate);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '    event OutstandingTokensReset(uint256 startTime);\n', '\n', '    /// Sets a new annual withdraw rate for the pool\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev the rate for a duration is duration x annualRate / 1 year \n', '    /// @param _annualRate is the maximum annual rate that can be withdrawn\n', '    function setMaxAnnualRate(uint256 _annualRate) external; /* onlyMigrationOwner */\n', '\n', '    /// Returns the annual withdraw rate of the pool\n', '    /// @return annualRate is the maximum annual rate that can be withdrawn\n', '    function getMaxAnnualRate() external view returns (uint256);\n', '\n', '    /// Resets the outstanding tokens to new start time\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev the next duration will be calculated starting from the given time\n', '    /// @param startTime is the time to set as the last withdrawal time\n', '    function resetOutstandingTokens(uint256 startTime) external; /* onlyMigrationOwner */\n', '\n', '    /// Emergency withdraw the wallet funds\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev used in emergencies, when a migration to a new wallet is needed\n', '    /// @param erc20 is the erc20 address of the token to withdraw\n', '    function emergencyWithdraw(address erc20) external; /* onlyMigrationOwner */\n', '\n', '    /// Sets the address of the client that can withdraw funds\n', '    /// @dev governance function called only by the functional owner\n', '    /// @param _client is the address of the new client\n', '    function setClient(address _client) external; /* onlyFunctionalOwner */\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableMigrationOwnership.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableMigrationOwnership is Context{\n', '    address private _migrationOwner;\n', '    address private _pendingMigrationOwner;\n', '\n', '    event MigrationOwnershipTransferred(address indexed previousMigrationOwner, address indexed newMigrationOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial migrationMigrationOwner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _migrationOwner = msgSender;\n', '        emit MigrationOwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current migrationOwner.\n', '     */\n', '    function migrationOwner() public view returns (address) {\n', '        return _migrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the migrationOwner.\n', '     */\n', '    modifier onlyMigrationOwner() {\n', '        require(isMigrationOwner(), "WithClaimableMigrationOwnership: caller is not the migrationOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current migrationOwner.\n', '     */\n', '    function isMigrationOwner() public view returns (bool) {\n', '        return _msgSender() == _migrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without migrationOwner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current migrationOwner.\n', '     *\n', '     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner,\n', '     * thereby removing any functionality that is only available to the migrationOwner.\n', '     */\n', '    function renounceMigrationOwnership() public onlyMigrationOwner {\n', '        emit MigrationOwnershipTransferred(_migrationOwner, address(0));\n', '        _migrationOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers migrationOwnership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferMigrationOwnership(address newMigrationOwner) internal {\n', '        require(newMigrationOwner != address(0), "MigrationOwner: new migrationOwner is the zero address");\n', '        emit MigrationOwnershipTransferred(_migrationOwner, newMigrationOwner);\n', '        _migrationOwner = newMigrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingMigrationOwner() {\n', '        require(msg.sender == _pendingMigrationOwner, "Caller is not the pending migrationOwner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current migrationOwner to set the pendingOwner address.\n', '     * @param newMigrationOwner The address to transfer migrationOwnership to.\n', '     */\n', '    function transferMigrationOwnership(address newMigrationOwner) public onlyMigrationOwner {\n', '        _pendingMigrationOwner = newMigrationOwner;\n', '    }\n', '    /**\n', '     * @dev Allows the _pendingMigrationOwner address to finalize the transfer.\n', '     */\n', '    function claimMigrationOwnership() external onlyPendingMigrationOwner {\n', '        _transferMigrationOwnership(_pendingMigrationOwner);\n', '        _pendingMigrationOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current _pendingMigrationOwner\n', '    */\n', '    function pendingMigrationOwner() public view returns (address) {\n', '       return _pendingMigrationOwner;  \n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableFunctionalOwnership.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableFunctionalOwnership is Context{\n', '    address private _functionalOwner;\n', '    address private _pendingFunctionalOwner;\n', '\n', '    event FunctionalOwnershipTransferred(address indexed previousFunctionalOwner, address indexed newFunctionalOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial functionalFunctionalOwner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _functionalOwner = msgSender;\n', '        emit FunctionalOwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current functionalOwner.\n', '     */\n', '    function functionalOwner() public view returns (address) {\n', '        return _functionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the functionalOwner.\n', '     */\n', '    modifier onlyFunctionalOwner() {\n', '        require(isFunctionalOwner(), "WithClaimableFunctionalOwnership: caller is not the functionalOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current functionalOwner.\n', '     */\n', '    function isFunctionalOwner() public view returns (bool) {\n', '        return _msgSender() == _functionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without functionalOwner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current functionalOwner.\n', '     *\n', '     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner,\n', '     * thereby removing any functionality that is only available to the functionalOwner.\n', '     */\n', '    function renounceFunctionalOwnership() public onlyFunctionalOwner {\n', '        emit FunctionalOwnershipTransferred(_functionalOwner, address(0));\n', '        _functionalOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers functionalOwnership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferFunctionalOwnership(address newFunctionalOwner) internal {\n', '        require(newFunctionalOwner != address(0), "FunctionalOwner: new functionalOwner is the zero address");\n', '        emit FunctionalOwnershipTransferred(_functionalOwner, newFunctionalOwner);\n', '        _functionalOwner = newFunctionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingFunctionalOwner() {\n', '        require(msg.sender == _pendingFunctionalOwner, "Caller is not the pending functionalOwner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current functionalOwner to set the pendingOwner address.\n', '     * @param newFunctionalOwner The address to transfer functionalOwnership to.\n', '     */\n', '    function transferFunctionalOwnership(address newFunctionalOwner) public onlyFunctionalOwner {\n', '        _pendingFunctionalOwner = newFunctionalOwner;\n', '    }\n', '    /**\n', '     * @dev Allows the _pendingFunctionalOwner address to finalize the transfer.\n', '     */\n', '    function claimFunctionalOwnership() external onlyPendingFunctionalOwner {\n', '        _transferFunctionalOwnership(_pendingFunctionalOwner);\n', '        _pendingFunctionalOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current _pendingFunctionalOwner\n', '    */\n', '    function pendingFunctionalOwner() public view returns (address) {\n', '       return _pendingFunctionalOwner;  \n', '    }\n', '}\n', '\n', '// File: contracts/ProtocolWallet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Protocol Wallet contract\n', '/// @dev the protocol wallet utilizes two claimable owners: migrationOwner and functionalOwner\n', 'contract ProtocolWallet is IProtocolWallet, WithClaimableMigrationOwnership, WithClaimableFunctionalOwnership {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public token;\n', '    address public client;\n', '    uint256 public lastWithdrawal;\n', '    uint256 maxAnnualRate;\n', '\n', '    /// Constructor\n', '    /// @param _token is the wallet token\n', '    /// @param _client is the initial wallet client address\n', '    /// @param _maxAnnualRate is the maximum annual rate that can be withdrawn\n', '    constructor(IERC20 _token, address _client, uint256 _maxAnnualRate) public {\n', '        token = _token;\n', '        client = _client;\n', '        lastWithdrawal = block.timestamp;\n', '\n', '        setMaxAnnualRate(_maxAnnualRate);\n', '    }\n', '\n', '    modifier onlyClient() {\n', '        require(msg.sender == client, "caller is not the wallet client");\n', '\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the address of the underlying staked token\n', '    /// @return balance is the wallet balance\n', '    function getBalance() public override view returns (uint256 balance) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /// Transfers the given amount of orbs tokens form the sender to this contract and updates the pool\n', '    /// @dev assumes the caller approved the amount prior to calling\n', '    /// @param amount is the amount to add to the wallet\n', '    function topUp(uint256 amount) external override {\n', '        emit FundsAddedToPool(amount, getBalance().add(amount));\n', '        require(token.transferFrom(msg.sender, address(this), amount), "ProtocolWallet::topUp - insufficient allowance");\n', '    }\n', '\n', "    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\n", '    /// @dev may only be called by the wallet client\n', '    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\n', "    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\n", '    /// @param amount is the amount to withdraw\n', '    function withdraw(uint256 amount) external override onlyClient {\n', '        uint256 _lastWithdrawal = lastWithdrawal;\n', '        require(_lastWithdrawal <= block.timestamp, "withdrawal is not yet active");\n', '\n', '        uint duration = block.timestamp.sub(_lastWithdrawal);\n', '        require(amount.mul(365 * 24 * 60 * 60) <= maxAnnualRate.mul(duration), "ProtocolWallet::withdraw - requested amount is larger than allowed by rate");\n', '\n', '        lastWithdrawal = block.timestamp;\n', '        if (amount > 0) {\n', '            require(token.transfer(msg.sender, amount), "ProtocolWallet::withdraw - transfer failed");\n', '        }\n', '    }\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    /// Sets a new annual withdraw rate for the pool\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev the rate for a duration is duration x annualRate / 1 year\n', '    /// @param _annualRate is the maximum annual rate that can be withdrawn\n', '    function setMaxAnnualRate(uint256 _annualRate) public override onlyMigrationOwner {\n', '        maxAnnualRate = _annualRate;\n', '        emit MaxAnnualRateSet(_annualRate);\n', '    }\n', '\n', '    /// Returns the annual withdraw rate of the pool\n', '    /// @return annualRate is the maximum annual rate that can be withdrawn\n', '    function getMaxAnnualRate() external override view returns (uint256) {\n', '        return maxAnnualRate;\n', '    }\n', '\n', '    /// Resets the outstanding tokens to new start time\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev the next duration will be calculated starting from the given time\n', '    /// @param startTime is the time to set as the last withdrawal time\n', '    function resetOutstandingTokens(uint256 startTime) external override onlyMigrationOwner {\n', '        lastWithdrawal = startTime;\n', '        emit OutstandingTokensReset(startTime);\n', '    }\n', '\n', '    /// Emergency withdraw the wallet funds\n', '    /// @dev governance function called only by the migration owner\n', '    /// @dev used in emergencies, when a migration to a new wallet is needed\n', '    /// @param erc20 is the erc20 address of the token to withdraw\n', '    function emergencyWithdraw(address erc20) external override onlyMigrationOwner {\n', '        IERC20 _token = IERC20(erc20);\n', '        emit EmergencyWithdrawal(msg.sender, address(_token));\n', '        require(_token.transfer(msg.sender, _token.balanceOf(address(this))), "FeesWallet::emergencyWithdraw - transfer failed");\n', '    }\n', '\n', '    /// Sets the address of the client that can withdraw funds\n', '    /// @dev governance function called only by the functional owner\n', '    /// @param _client is the address of the new client\n', '    function setClient(address _client) external override onlyFunctionalOwner {\n', '        client = _client;\n', '        emit ClientSet(_client);\n', '    }\n', '}']