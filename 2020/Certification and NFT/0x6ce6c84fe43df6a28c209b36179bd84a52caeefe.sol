['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/protocol/constants/CommonConstants.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract CommonConstants {\n', '\n', '    uint public constant EXCHANGE_RATE_BASE_RATE = 1e18;\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/InterestRateInterface.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface InterestRateInterface {\n', '\n', '    /**\n', '      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\n', '      *\n', '      * @param dmmTokenId The DMMA whose interest should be retrieved\n', '      * @param totalSupply The total supply fot he DMM token\n', "      * @param activeSupply The supply that's currently being lent by users\n", '      * @return The interest rate in APY, which is a number with 18 decimals\n', '      */\n', '    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Blacklistable.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Allows accounts to be blacklisted by the owner of the contract.\n', ' *\n', " *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\n", ' */\n', 'contract Blacklistable is Ownable {\n', '\n', '    string public constant BLACKLISTED = "BLACKLISTED";\n', '\n', '    mapping(address => bool) internal blacklisted;\n', '\n', '    event Blacklisted(address indexed account);\n', '    event UnBlacklisted(address indexed account);\n', '    event BlacklisterChanged(address indexed newBlacklister);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the creator of this contract\n', '    */\n', '    modifier onlyBlacklister() {\n', '        require(msg.sender == owner(), "MUST_BE_BLACKLISTER");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if `account` is blacklisted\n', '     *\n', '     * @param account The address to check\n', '    */\n', '    modifier notBlacklisted(address account) {\n', '        require(blacklisted[account] == false, BLACKLISTED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\n', '    */\n', '    function checkNotBlacklisted(address account) public view {\n', '        require(!blacklisted[account], BLACKLISTED);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if `account` is blacklisted\n', '     *\n', '     * @param account The address to check\n', '    */\n', '    function isBlacklisted(address account) public view returns (bool) {\n', '        return blacklisted[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds `account` to blacklist\n', '     *\n', '     * @param account The address to blacklist\n', '    */\n', '    function blacklist(address account) public onlyBlacklister {\n', '        blacklisted[account] = true;\n', '        emit Blacklisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes account from blacklist\n', '     *\n', '     * @param account The address to remove from the blacklist\n', '    */\n', '    function unBlacklist(address account) public onlyBlacklister {\n', '        blacklisted[account] = false;\n', '        emit UnBlacklisted(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IDmmController.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'interface IDmmController {\n', '\n', '    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\n', '    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\n', '\n', '    event AdminDeposit(address indexed sender, uint amount);\n', '    event AdminWithdraw(address indexed receiver, uint amount);\n', '\n', '    function blacklistable() external view returns (Blacklistable);\n', '\n', '    /**\n', '     * @dev Creates a new mToken using the provided data.\n', '     *\n', '     * @param underlyingToken   The token that should be wrapped to create a new DMMA\n', '     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\n', '     * @param name              The name of this token, IE `DMM: DAI`\n', '     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\n', '     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\n', '     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\n', '     * @param totalSupply       The initial total supply for this market.\n', '     */\n', '    function addMarket(\n', '        address underlyingToken,\n', '        string calldata symbol,\n', '        string calldata name,\n', '        uint8 decimals,\n', '        uint minMintAmount,\n', '        uint minRedeemAmount,\n', '        uint totalSupply\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Creates a new mToken using the already-existing token.\n', '     *\n', '     * @param dmmToken          The token that should be added to this controller.\n', '     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\n', '     */\n', '    function addMarketFromExistingDmmToken(\n', '        address dmmToken,\n', '        address underlyingToken\n', '    ) external;\n', '\n', '    /**\n', '     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\n', '     */\n', '    function transferOwnershipToNewController(\n', '        address newController\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Enables the corresponding DMMA to allow minting new tokens.\n', '     *\n', '     * @param dmmTokenId  The DMMA that should be enabled.\n', '     */\n', '    function enableMarket(uint dmmTokenId) external;\n', '\n', '    /**\n', '     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\n', '     *      users are only able to redeem tokens.\n', '     *\n', '     * @param dmmTokenId  The DMMA that should be disabled.\n', '     */\n', '    function disableMarket(uint dmmTokenId) external;\n', '\n', '    /**\n', '     * @dev Sets the new address that will serve as the guardian for this controller.\n', '     *\n', '     * @param newGuardian   The new address that will serve as the guardian for this controller.\n', '     */\n', '    function setGuardian(address newGuardian) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\n', '     *\n', '     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\n', '     */\n', '    function setDmmTokenFactory(address newDmmTokenFactory) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\n', '     *\n', '     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\n', '     */\n', '    function setDmmEtherFactory(address newDmmEtherFactory) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `InterestRate` interface.\n', '     *\n', '     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\n', '     */\n', '    function setInterestRateInterface(address newInterestRateInterface) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\n', '     *\n', '     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\n', '     */\n', '    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\n', '     *\n', '     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\n', '     */\n', '    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\n', '\n', '    /**\n', '     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\n', '     *\n', '     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\n', '     */\n', '    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\n', '\n', '    /**\n', '     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\n', '     *      allocated to real-world assets that will be used to pay interest into the DMMA.\n', '     *\n', '     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\n', '     *                                  order to add to the total supply of DMM.\n', '     */\n', '    function setMinCollateralization(uint newMinCollateralization) external;\n', '\n', '    /**\n', '     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\n', '     *      allocated to real-world assets that will be used to pay interest into the DMMA.\n', '     *\n', '     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\n', '     *                          are kept in each DMMA.\n', '     */\n', '    function setMinReserveRatio(uint newMinReserveRatio) external;\n', '\n', '    /**\n', '     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\n', "     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\n", '     *      requirements for minimum collateral.\n', '     */\n', '    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\n', '\n', '    /**\n', '     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\n', '     */\n', '    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\n', '\n', '    /**\n', '     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\n', '     *      allocated to real-world assets that will be used to pay interest into the DMMA.\n', '     *\n', '     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\n', '     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\n', '     */\n', '    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\n', '\n', '    /**\n', '     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\n', '     *      interest payments and add more liquidity to the specific market.\n', '     *\n', '     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\n', '     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\n', '     */\n', '    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\n', '\n', '    /**\n', '     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\n', '     */\n', '    function getDmmTokenIds() external view returns (uint[] memory);\n', '\n', '    /**\n', "     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\n", '     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\n', '     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\n', '     *\n', '     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\n', '     *          `1010000000000000000` is 101% or 1.01.\n', '     */\n', '    function getTotalCollateralization() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\n', '     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\n', '     *      (plus the principal), using the current usage of each DMMA.\n', '     *\n', '     * @return  The active collateralization of the system, as a number with 18 decimals. For example\n', '     *          `1010000000000000000` is 101% or 1.01.\n', '     */\n', '    function getActiveCollateralization() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\n', '     *\n', '     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\n', '     *          0.065.\n', '     */\n', '    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\n', '     *\n', '     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\n', '     *          0.065.\n', '     */\n', '    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\n', '     *\n', '     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\n', '     *          0.065.\n', '     */\n', '    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the exchange rate from the underlying to the DMM token, such that\n', '     *      `DMM: Token = underlying / exchangeRate`\n', '     *\n', '     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\n', '     */\n', '    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the exchange rate from the underlying to the DMM token, such that\n', '     *      `DMM: Token = underlying / exchangeRate`\n', '     *\n', '     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\n', '     */\n', '    function getExchangeRate(address dmmToken) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\n', '     */\n', '    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\n', '\n', '    /**\n', '     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\n', '     */\n', '    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\n', '\n', '    /**\n', '     * @return True if the market is enabled for this DMMA or false if it is not enabled.\n', '     */\n', '    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\n', '\n', '    /**\n', '     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\n', '     */\n', '    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\n', '\n', '    /**\n', '     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\n', '     */\n', '    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\n', '     *      contract address for that token ID.\n', '     */\n', '    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IDmmToken.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * Basically an interface except, contains the implementation of the type-hashes for offline signature generation.\n', ' *\n', ' * This contract contains the signatures and documentation for all publicly-implemented functions in the DMM token.\n', ' */\n', 'interface IDmmToken {\n', '\n', '    /*****************\n', '     * Events\n', '     */\n', '\n', '    event Mint(address indexed minter, address indexed recipient, uint amount);\n', '    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\n', '    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\n', '\n', '    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\n', '    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\n', '\n', '    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\n', '\n', '    /*****************\n', '     * Functions\n', '     */\n', '\n', '    /**\n', '     * @dev The controller that deployed this parent\n', '     */\n', '    function controller() external view returns (IDmmController);\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @return  The min amount that can be minted in a single transaction. This amount corresponds with the number of\n', '     *          decimals that this token has.\n', '     */\n', '    function minMintAmount() external view returns (uint);\n', '\n', '    /**\n', '     * @return  The min amount that can be redeemed from DMM to underlying in a single transaction. This amount\n', '     *          corresponds with the number of decimals that this token has.\n', '     */\n', '    function minRedeemAmount() external view returns (uint);\n', '\n', '    /**\n', '      * @dev The amount of DMM that is in circulation (outside of this contract)\n', '      */\n', '    function activeSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Attempts to add `amount` to the total supply by issuing the tokens to this contract. This call fires a\n', '     *      Transfer event from the 0x0 address to this contract.\n', '     */\n', '    function increaseTotalSupply(uint amount) external;\n', '\n', '    /**\n', '     * @dev Attempts to remove `amount` from the total supply by destroying those tokens that are held in this\n', '     *      contract. This call reverts with TOO_MUCH_ACTIVE_SUPPLY if `amount` is not held in this contract.\n', '     */\n', '    function decreaseTotalSupply(uint amount) external;\n', '\n', '    /**\n', "     * @dev An admin function that lets the ecosystem's organizers deposit the underlying token around which this DMMA\n", '     *      wraps to this contract. This is used to replenish liquidity and after interest payouts are made from the\n', '     *      real-world assets.\n', '     */\n', '    function depositUnderlying(uint underlyingAmount) external returns (bool);\n', '\n', '    /**\n', "     * @dev An admin function that lets the ecosystem's organizers withdraw the underlying token around which this DMMA\n", '     *      wraps from this contract. This is used to withdraw deposited tokens, to be allocated to real-world assets\n', '     *      that produce income streams and can cover interest payments.\n', '     */\n', '    function withdrawUnderlying(uint underlyingAmount) external returns (bool);\n', '\n', '    /**\n', '      * @dev The timestamp at which the exchange rate was last updated.\n', '      */\n', '    function exchangeRateLastUpdatedTimestamp() external view returns (uint);\n', '\n', '    /**\n', '      * @dev The timestamp at which the exchange rate was last updated.\n', '      */\n', '    function exchangeRateLastUpdatedBlockNumber() external view returns (uint);\n', '\n', '    /**\n', '     * @dev The exchange rate from underlying to DMM. Invert this number to go from DMM to underlying. This number\n', '     *      has 18 decimals.\n', '     */\n', '    function getCurrentExchangeRate() external view returns (uint);\n', '\n', '    /**\n', '     * @dev The current nonce of the provided `owner`. This `owner` should be the signer for any gasless transactions.\n', '     */\n', '    function nonceOf(address owner) external view returns (uint);\n', '\n', '    /**\n', '     * @dev Transfers the token around which this DMMA wraps from msg.sender to the DMMA contract. Then, sends the\n', '     *      corresponding amount of DMM to the msg.sender. Note, this call reverts with INSUFFICIENT_DMM_LIQUIDITY if\n', '     *      there is not enough DMM available to be minted.\n', '     *\n', '     * @param amount The amount of underlying to send to this DMMA for conversion to DMM.\n', '     * @return The amount of DMM minted.\n', '     */\n', '    function mint(uint amount) external returns (uint);\n', '\n', '    /**\n', '     * @dev Transfers the token around which this DMMA wraps from sender to the DMMA contract. Then, sends the\n', '     *      corresponding amount of DMM to recipient. Note, an allowance must be set for sender for the underlying\n', '     *      token that is at least of size `amount` / `exchangeRate`. This call reverts with INSUFFICIENT_DMM_LIQUIDITY\n', '     *      if there is not enough DMM available to be minted. See #MINT_TYPE_HASH. This function gives the `owner` the\n', '     *      illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction and\n', '     *      potentially collect a fee for doing so.\n', '     *\n', '     * @param owner         The user that signed the off-chain message.\n', '     * @param recipient     The address that will receive the newly-minted DMM tokens.\n', '     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\n', "     *                      owner's current nonce.\n", '     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\n', '     *                      means there is no expiration.\n', '     * @param amount        The amount of underlying that should be minted by `owner` and sent to `recipient`.\n', '     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\n', "     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`.\n", '     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\n', '     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\n', '     * @param v             The ECDSA V parameter.\n', '     * @param r             The ECDSA R parameter.\n', '     * @param s             The ECDSA S parameter.\n', '     * @return  The amount of DMM minted, minus the fees paid. To get the total amount minted, add the `feeAmount` to\n', '     *          the returned amount from this function call.\n', '     */\n', '    function mintFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint);\n', '\n', '    /**\n', '     * @dev Transfers DMM from msg.sender to this DMMA contract. Then, sends the corresponding amount of token around\n', '     *      which this DMMA wraps to the msg.sender. Note, this call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY if\n', '     *      there is not enough DMM available to be redeemed.\n', '     *\n', '     * @param amount    The amount of DMM to be transferred from msg.sender to this DMMA.\n', '     * @return          The amount of underlying redeemed.\n', '     */\n', '    function redeem(uint amount) external returns (uint);\n', '\n', '    /**\n', '     * @dev Transfers DMM from `owner` to the DMMA contract. Then, sends the corresponding amount of token around which\n', '     *      this DMMA wraps to `recipient`. Note, an allowance must be set for sender for the underlying\n', '     *      token that is at least of size `amount`. This call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY\n', '     *      if there is not enough underlying available to be redeemed. See #REDEEM_TYPE_HASH. This function gives the\n', '     *      `owner` the illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction\n', '     *      and potentially collect a fee for doing so.\n', '     *\n', '     * @param owner         The user that signed the off-chain message.\n', '     * @param recipient     The address that will receive the newly-redeemed DMM tokens.\n', '     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\n', "     *                      owner's current nonce.\n", '     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\n', '     *                      means there is no expiration.\n', '     * @param amount        The amount of DMM that should be redeemed for `owner` and sent to `recipient`.\n', '     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\n', "     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`\n", '     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\n', '     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\n', '     * @param v             The ECDSA V parameter.\n', '     * @param r             The ECDSA R parameter.\n', '     * @param s             The ECDSA S parameter.\n', '     * @return  The amount of underlying redeemed.\n', '     */\n', '    function redeemFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint);\n', '\n', '    /**\n', '     * @dev Sets an allowance for owner with spender using an offline-generated signature. This function allows a\n', '     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\n', '     *      #PERMIT_TYPEHASH.\n', '     *\n', '     * @param owner         The user that signed the off-chain message.\n', '     * @param spender       The contract/wallet that can spend DMM tokens on behalf of owner.\n', '     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\n', "     *                      owner's current nonce.\n", '     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\n', '     *                      means there is no expiration.\n', '     * @param allowed       True if the spender can spend funds on behalf of owner or false to revoke this privilege.\n', '     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\n', "     *                      owner. Can be 0, which means the user won't be charged a fee.\n", '     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\n', '     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\n', '     * @param v             The ECDSA V parameter.\n', '     * @param r             The ECDSA R parameter.\n', '     * @param s             The ECDSA S parameter.\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint nonce,\n', '        uint expiry,\n', '        bool allowed,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Transfers DMM from the `owner` to `recipient` using an offline-generated signature. This function allows a\n', '     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\n', '     *      #TRANSFER_TYPEHASH. This function gives the `owner` the illusion of committing a gasless transaction,\n', '     *      allowing a relayer to broadcast the transaction and potentially collect a fee for doing so.\n', '     *\n', '     * @param owner         The user that signed the off-chain message and originator of the transfer.\n', '     * @param recipient     The address that will receive the transferred DMM tokens.\n', '     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\n', "     *                      owner's current nonce.\n", '     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\n', '     *                      means there is no expiration.\n', '     * @param amount        The amount of DMM that should be transferred from `owner` and sent to `recipient`.\n', '     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\n', "     *                      owner. Can be 0, which means the user won't be charged a fee.\n", '     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\n', '     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\n', '     * @param v             The ECDSA V parameter.\n', '     * @param r             The ECDSA R parameter.\n', '     * @param s             The ECDSA S parameter.\n', '     * @return              True if the transfer was successful or false if it failed.\n', '     */\n', '    function transferFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '}\n', '\n', '// File: contracts/protocol/libs/DmmTokenLibrary.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'library DmmTokenLibrary {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    /*****************\n', '     * Structs\n', '     */\n', '\n', '    struct Storage {\n', '        uint exchangeRate;\n', '        uint exchangeRateLastUpdatedTimestamp;\n', '        uint exchangeRateLastUpdatedBlockNumber;\n', '        mapping(address => uint) nonces;\n', '    }\n', '\n', '    /*****************\n', '     * Events\n', '     */\n', '\n', '    event Mint(address indexed minter, address indexed recipient, uint amount);\n', '    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\n', '    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\n', '\n', '    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\n', '\n', '    /*****************\n', '     * Public Constants\n', '     */\n', '\n', '    uint public constant INTEREST_RATE_BASE = 1e18;\n', '    uint public constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\n', '\n', '    /**********************\n', '     * Public Functions\n', '     */\n', '\n', '    function amountToUnderlying(uint amount, uint exchangeRate, uint exchangeRateBaseRate) internal pure returns (uint) {\n', '        return (amount.mul(exchangeRate)).div(exchangeRateBaseRate);\n', '    }\n', '\n', '    function underlyingToAmount(uint underlyingAmount, uint exchangeRate, uint exchangeRateBaseRate) internal pure returns (uint) {\n', '        return (underlyingAmount.mul(exchangeRateBaseRate)).div(exchangeRate);\n', '    }\n', '\n', '    function accrueInterest(uint exchangeRate, uint interestRate, uint _seconds) internal pure returns (uint) {\n', '        uint interestAccrued = INTEREST_RATE_BASE.add(((interestRate.mul(_seconds)).div(SECONDS_IN_YEAR)));\n', '        return (exchangeRate.mul(interestAccrued)).div(INTEREST_RATE_BASE);\n', '    }\n', '\n', '    /***************************\n', '     * Internal User Functions\n', '     */\n', '\n', '    function getCurrentExchangeRate(Storage storage _storage, uint interestRate) internal view returns (uint) {\n', '        if (_storage.exchangeRateLastUpdatedTimestamp >= block.timestamp) {\n', '            // The exchange rate has not changed yet\n', '            return _storage.exchangeRate;\n', '        } else {\n', '            uint diffInSeconds = block.timestamp.sub(_storage.exchangeRateLastUpdatedTimestamp, "INVALID_BLOCK_TIMESTAMP");\n', '            return accrueInterest(_storage.exchangeRate, interestRate, diffInSeconds);\n', '        }\n', '    }\n', '\n', '    function updateExchangeRateIfNecessaryAndGet(IDmmToken token, Storage storage _storage) internal returns (uint) {\n', '        uint previousExchangeRate = _storage.exchangeRate;\n', '        uint dmmTokenInterestRate = token.controller().getInterestRateByDmmTokenAddress(address(token));\n', '        uint currentExchangeRate = getCurrentExchangeRate(_storage, dmmTokenInterestRate);\n', '        if (currentExchangeRate != previousExchangeRate) {\n', '            _storage.exchangeRateLastUpdatedTimestamp = block.timestamp;\n', '            _storage.exchangeRateLastUpdatedBlockNumber = block.number;\n', '            _storage.exchangeRate = currentExchangeRate;\n', '            return currentExchangeRate;\n', '        } else {\n', '            return currentExchangeRate;\n', '        }\n', '    }\n', '\n', '    function validateOffChainMint(\n', '        Storage storage _storage,\n', '        bytes32 domainSeparator,\n', '        bytes32 typeHash,\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal {\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\n', '            )\n', '        );\n', '\n', '        require(owner != address(0), "CANNOT_MINT_FROM_ZERO_ADDRESS");\n', '        require(recipient != address(0), "CANNOT_MINT_TO_ZERO_ADDRESS");\n', '        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\n', '    }\n', '\n', '    function validateOffChainRedeem(\n', '        Storage storage _storage,\n', '        bytes32 domainSeparator,\n', '        bytes32 typeHash,\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal {\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\n', '            )\n', '        );\n', '\n', '        require(owner != address(0), "CANNOT_REDEEM_FROM_ZERO_ADDRESS");\n', '        require(recipient != address(0), "CANNOT_REDEEM_TO_ZERO_ADDRESS");\n', '        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\n', '    }\n', '\n', '    function validateOffChainPermit(\n', '        Storage storage _storage,\n', '        bytes32 domainSeparator,\n', '        bytes32 typeHash,\n', '        address owner,\n', '        address spender,\n', '        uint nonce,\n', '        uint expiry,\n', '        bool allowed,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal {\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(abi.encode(typeHash, owner, spender, nonce, expiry, allowed, feeAmount, feeRecipient))\n', '            )\n', '        );\n', '\n', '        require(owner != address(0), "CANNOT_APPROVE_FROM_ZERO_ADDRESS");\n', '        require(spender != address(0), "CANNOT_APPROVE_TO_ZERO_ADDRESS");\n', '        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\n', '    }\n', '\n', '    function validateOffChainTransfer(\n', '        Storage storage _storage,\n', '        bytes32 domainSeparator,\n', '        bytes32 typeHash,\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal {\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\n', '            )\n', '        );\n', '\n', '        require(owner != address(0x0), "CANNOT_TRANSFER_FROM_ZERO_ADDRESS");\n', '        require(recipient != address(0x0), "CANNOT_TRANSFER_TO_ZERO_ADDRESS");\n', '        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\n', '    }\n', '\n', '    /***************************\n', '     * Internal Admin Functions\n', '     */\n', '\n', '    function _depositUnderlying(IDmmToken token, address sender, uint underlyingAmount) internal returns (bool) {\n', '        IERC20 underlyingToken = IERC20(token.controller().getUnderlyingTokenForDmm(address(token)));\n', '        underlyingToken.safeTransferFrom(sender, address(token), underlyingAmount);\n', '        return true;\n', '    }\n', '\n', '    function _withdrawUnderlying(IDmmToken token, address sender, uint underlyingAmount) internal returns (bool) {\n', '        IERC20 underlyingToken = IERC20(token.controller().getUnderlyingTokenForDmm(address(token)));\n', '        underlyingToken.safeTransfer(sender, underlyingAmount);\n', '        return true;\n', '    }\n', '\n', '    /***************************\n', '     * Private Functions\n', '     */\n', '\n', '    /**\n', '     * @dev throws if the validation fails\n', '     */\n', '    function validateOffChainRequest(\n', '        Storage storage _storage,\n', '        bytes32 digest,\n', '        address owner,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) private {\n', '        uint expectedNonce = _storage.nonces[owner];\n', '\n', '        require(owner == ecrecover(digest, v, r, s), "INVALID_SIGNATURE");\n', '        require(expiry == 0 || now <= expiry, "REQUEST_EXPIRED");\n', '        require(nonce == expectedNonce, "INVALID_NONCE");\n', '        if (feeAmount > 0) {\n', '            require(feeRecipient != address(0x0), "INVALID_FEE_ADDRESS");\n', '        }\n', '\n', '        emit OffChainRequestValidated(\n', '            owner,\n', '            feeRecipient,\n', '            expectedNonce,\n', '            expiry,\n', '            feeAmount\n', '        );\n', '        _storage.nonces[owner] += 1;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard {\n', '    // counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IOwnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IOwnable {\n', '\n', '    function owner() external view returns (address);\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IPausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IPausable {\n', '\n', '    function paused() external view returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/utils/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20, ReentrancyGuard, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    constructor() public {}\n', '\n', '    /********************\n', '     * Modifiers\n', '     */\n', '\n', '    modifier whenNotPaused() {\n', '        require(!IPausable(pausable()).paused(), "ECOSYSTEM_PAUSED");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if `account` is blacklisted\n', '     *\n', '     * @param account The address to check\n', '    */\n', '    modifier notBlacklisted(address account) {\n', '        require(Blacklistable(blacklistable()).isBlacklisted(account) == false, "BLACKLISTED");\n', '        _;\n', '    }\n', '\n', '    /********************\n', '     * Public Functions\n', '     */\n', '\n', '    function pausable() public view returns (address);\n', '\n', '    function blacklistable() public view returns (Blacklistable);\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '    nonReentrant\n', '    public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(\n', '        address spender,\n', '        uint256 amount\n', '    )\n', '    public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '    nonReentrant\n', '    public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "TRANSFER_EXCEEDS_ALLOWANCE"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '    notBlacklisted(_msgSender())\n', '    notBlacklisted(spender)\n', '    public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '    notBlacklisted(_msgSender())\n', '    notBlacklisted(spender)\n', '    public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ALLOWANCE_BELOW_ZERO"));\n', '        return true;\n', '    }\n', '\n', '    /**************************\n', '     * Internal Functions\n', '     */\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "CANNOT_TRANSFER_FROM_ZERO_ADDRESS");\n', '        require(recipient != address(0), "CANNOT_TRANSFER_TO_ZERO_ADDRESS");\n', '\n', '        blacklistable().checkNotBlacklisted(_msgSender());\n', '        blacklistable().checkNotBlacklisted(sender);\n', '        blacklistable().checkNotBlacklisted(recipient);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "TRANSFER_EXCEEDS_BALANCE");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "CANNOT_APPROVE_FROM_ZERO_ADDRESS");\n', '        require(spender != address(0), "CANNOT_APPROVE_TO_ZERO_ADDRESS");\n', '\n', '        blacklistable().checkNotBlacklisted(_msgSender());\n', '        blacklistable().checkNotBlacklisted(owner);\n', '        blacklistable().checkNotBlacklisted(spender);\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     */\n', '    function mintToThisContract(uint256 amount) internal {\n', '        address account = address(this);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Destroys `amount` tokens from `account`, reducing the\n', '    * total supply.\n', '    *\n', '    * Emits a {Transfer} event with `to` set to the zero address.\n', '    *\n', '    * Requirements\n', '    *\n', '    * - `address(this)` must have at least `amount` tokens.\n', '    */\n', '    function burnFromThisContract(uint256 amount) internal {\n', '        address account = address(this);\n', '        _balances[account] = _balances[account].sub(amount, "BURN_EXCEEDS_BALANCE");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/protocol/impl/DmmToken.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DmmToken is ERC20, IDmmToken, CommonConstants {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '    using DmmTokenLibrary for *;\n', '\n', '    /***************************\n', '     * Public Constant Fields\n', '     */\n', '\n', '    // bytes32 public constant PERMIT_TYPE_HASH = keccak256("Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed,uint256 feeAmount,address feeRecipient)");\n', '    bytes32 public constant PERMIT_TYPE_HASH = 0x22fa96956322098f6fd394e06f1b7e0f6930565923f9ad3d20802e9a2eb58fb1;\n', '\n', '    // bytes32 public constant TRANSFER_TYPE_HASH = keccak256("Transfer(address owner,address recipient,uint256 nonce,uint256 expiry,uint amount,uint256 feeAmount,address feeRecipient)");\n', '    bytes32 public constant TRANSFER_TYPE_HASH = 0x25166116e36b48414096856a22ea40032193e38f65136c76738e306be6abd587;\n', '\n', '    // bytes32 public constant MINT_TYPE_HASH = keccak256("Mint(address owner,address recipient,uint256 nonce,uint256 expiry,uint256 amount,uint256 feeAmount,address feeRecipient)");\n', '    bytes32 public constant MINT_TYPE_HASH = 0x82e81310e0eab12a427992778464769ef831d801011489bc90ed3ef82f2cb3d1;\n', '\n', '    // bytes32 public constant REDEEM_TYPE_HASH = keccak256("Redeem(address owner,address recipient,uint256 nonce,uint256 expiry,uint256 amount,uint256 feeAmount,address feeRecipient)");\n', '    bytes32 public constant REDEEM_TYPE_HASH = 0x24e7162538bf7f86bd3180c9ee9f60f06db3bd66eb344ea3b00f69b84af5ddcf;\n', '\n', '    /*****************\n', '     * Public Fields\n', '     */\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public minMintAmount;\n', '    uint public minRedeemAmount;\n', '\n', '    IDmmController public controller;\n', '    bytes32 public domainSeparator;\n', '\n', '    /*****************\n', '     * Private Fields\n', '     */\n', '\n', '    DmmTokenLibrary.Storage private _storage;\n', '\n', '    constructor(\n', '        string memory _symbol,\n', '        string memory _name,\n', '        uint8 _decimals,\n', '        uint _minMintAmount,\n', '        uint _minRedeemAmount,\n', '        uint _totalSupply,\n', '        address _controller\n', '    ) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        minMintAmount = _minMintAmount;\n', '        minRedeemAmount = _minRedeemAmount;\n', '        controller = IDmmController(_controller);\n', '\n', '        uint256 chainId;\n', '        assembly {chainId := chainid()}\n', '\n', '        domainSeparator = keccak256(abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256(bytes(name)),\n', '                keccak256(bytes(/* version */ "1")),\n', '                chainId,\n', '                address(this)\n', '            ));\n', '\n', '        _storage = DmmTokenLibrary.Storage({\n', '            exchangeRate : EXCHANGE_RATE_BASE_RATE,\n', '            exchangeRateLastUpdatedTimestamp : block.timestamp,\n', '            exchangeRateLastUpdatedBlockNumber : block.number\n', '            });\n', '\n', '        mintToThisContract(_totalSupply);\n', '    }\n', '\n', '    /********************\n', '     * Modifiers\n', '     */\n', '\n', '    modifier isNotDisabled {\n', '        require(controller.isMarketEnabledByDmmTokenAddress(address(this)), "MARKET_DISABLED");\n', '        _;\n', '    }\n', '\n', '    /********************\n', '     * Public Functions\n', '     */\n', '\n', '    function() payable external {\n', '        revert("NO_DEFAULT_FUNCTION");\n', '    }\n', '\n', '    function pausable() public view returns (address) {\n', '        return address(controller);\n', '    }\n', '\n', '    function blacklistable() public view returns (Blacklistable) {\n', '        return controller.blacklistable();\n', '    }\n', '\n', '    function activeSupply() public view returns (uint) {\n', '        return totalSupply().sub(balanceOf(address(this)));\n', '    }\n', '\n', '    function increaseTotalSupply(uint amount) public onlyOwner whenNotPaused {\n', '        uint oldTotalSupply = _totalSupply;\n', '        mintToThisContract(amount);\n', '        emit TotalSupplyIncreased(oldTotalSupply, _totalSupply);\n', '    }\n', '\n', '    function decreaseTotalSupply(uint amount) public onlyOwner whenNotPaused {\n', "        // If there's underflow, throw the specified error\n", '        require(balanceOf(address(this)) >= amount, "TOO_MUCH_ACTIVE_SUPPLY");\n', '        uint oldTotalSupply = _totalSupply;\n', '        burnFromThisContract(amount);\n', '        emit TotalSupplyDecreased(oldTotalSupply, _totalSupply);\n', '    }\n', '\n', '    function depositUnderlying(uint underlyingAmount) onlyOwner whenNotPaused public returns (bool) {\n', '        return this._depositUnderlying(_msgSender(), underlyingAmount);\n', '    }\n', '\n', '    function withdrawUnderlying(uint underlyingAmount) onlyOwner whenNotPaused public returns (bool) {\n', '        return this._withdrawUnderlying(_msgSender(), underlyingAmount);\n', '    }\n', '\n', '    function getCurrentExchangeRate() public view returns (uint) {\n', '        return _storage.getCurrentExchangeRate(controller.getInterestRateByDmmTokenAddress(address(this)));\n', '    }\n', '\n', '    function exchangeRateLastUpdatedTimestamp() public view returns (uint) {\n', '        return _storage.exchangeRateLastUpdatedTimestamp;\n', '    }\n', '\n', '    function exchangeRateLastUpdatedBlockNumber() public view returns (uint) {\n', '        return _storage.exchangeRateLastUpdatedBlockNumber;\n', '    }\n', '\n', '    function nonceOf(address owner) public view returns (uint) {\n', '        return _storage.nonces[owner];\n', '    }\n', '\n', '    function mint(\n', '        uint underlyingAmount\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    isNotDisabled\n', '    public returns (uint) {\n', '        return _mint(_msgSender(), _msgSender(), underlyingAmount);\n', '    }\n', '\n', '    function transferUnderlyingIn(address owner, uint underlyingAmount) internal {\n', '        address underlyingToken = controller.getUnderlyingTokenForDmm(address(this));\n', '        IERC20(underlyingToken).safeTransferFrom(owner, address(this), underlyingAmount);\n', '    }\n', '\n', '    function transferUnderlyingOut(address recipient, uint underlyingAmount) internal {\n', '        address underlyingToken = controller.getUnderlyingTokenForDmm(address(this));\n', '        IERC20(underlyingToken).safeTransfer(recipient, underlyingAmount);\n', '    }\n', '\n', '    function mintFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint underlyingAmount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    isNotDisabled\n', '    public returns (uint) {\n', '        return _mintFromGaslessRequest(\n', '            owner,\n', '            recipient,\n', '            nonce,\n', '            expiry,\n', '            underlyingAmount,\n', '            feeAmount,\n', '            feeRecipient,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '    }\n', '\n', '    function redeem(\n', '        uint amount\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public returns (uint) {\n', '        return _redeem(_msgSender(), _msgSender(), amount, /* shouldUseAllowance */ false);\n', '    }\n', '\n', '    function redeemFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public returns (uint) {\n', '        return _redeemFromGaslessRequest(\n', '            owner,\n', '            recipient,\n', '            nonce,\n', '            expiry,\n', '            amount,\n', '            feeAmount,\n', '            feeRecipient,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '    }\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint nonce,\n', '        uint expiry,\n', '        bool allowed,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public {\n', '        checkGaslessBlacklist(feeRecipient);\n', '\n', '        _storage.validateOffChainPermit(domainSeparator, PERMIT_TYPE_HASH, owner, spender, nonce, expiry, allowed, feeAmount, feeRecipient, v, r, s);\n', '\n', '        uint wad = allowed ? uint(- 1) : 0;\n', '        _approve(owner, spender, wad);\n', '\n', '        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\n', '    }\n', '\n', '    function transferFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public {\n', '        checkGaslessBlacklist(feeRecipient);\n', '\n', '        _storage.validateOffChainTransfer(domainSeparator, TRANSFER_TYPE_HASH, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient, v, r, s);\n', '\n', '        uint amountLessFee = amount.sub(feeAmount, "FEE_TOO_LARGE");\n', '        _transfer(owner, recipient, amountLessFee);\n', '        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\n', '    }\n', '\n', '    /************************************\n', '     * Private & Internal Functions\n', '     */\n', '\n', '    function _mint(address owner, address recipient, uint underlyingAmount) internal returns (uint) {\n', '        // No need to check if recipient or msgSender are blacklisted because `_transfer` checks it.\n', '        blacklistable().checkNotBlacklisted(owner);\n', '\n', '        uint currentExchangeRate = this.updateExchangeRateIfNecessaryAndGet(_storage);\n', '        uint amount = underlyingAmount.underlyingToAmount(currentExchangeRate, EXCHANGE_RATE_BASE_RATE);\n', '\n', '        require(balanceOf(address(this)) >= amount, "INSUFFICIENT_DMM_LIQUIDITY");\n', '\n', '        // Transfer underlying to this contract\n', '        transferUnderlyingIn(owner, underlyingAmount);\n', '\n', '        // Transfer DMM to the recipient\n', '        _transfer(address(this), recipient, amount);\n', '\n', '        emit Mint(owner, recipient, amount);\n', '\n', '        require(amount >= minMintAmount, "INSUFFICIENT_MINT_AMOUNT");\n', '\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Note, right now all invocations of this function set `shouldUseAllowance` to `false`. Reason being, all\n', '     *      calls are either done via explicit off-chain signatures (and therefore the owner and recipient are explicit;\n', '     *      anyone can call the function), OR the msgSender is both the owner and recipient, in which case no allowance\n', "     *      should be needed to redeem funds if the user is the spender of the same user's funds.\n", '     */\n', '    function _redeem(address owner, address recipient, uint amount, bool shouldUseAllowance) internal returns (uint) {\n', '        // No need to check owner or msgSender for blacklist because `_transfer` covers them.\n', '        blacklistable().checkNotBlacklisted(recipient);\n', '\n', '        uint currentExchangeRate = this.updateExchangeRateIfNecessaryAndGet(_storage);\n', '        uint underlyingAmount = amount.amountToUnderlying(currentExchangeRate, EXCHANGE_RATE_BASE_RATE);\n', '\n', '        IERC20 underlyingToken = IERC20(this.controller().getUnderlyingTokenForDmm(address(this)));\n', '        require(underlyingToken.balanceOf(address(this)) >= underlyingAmount, "INSUFFICIENT_UNDERLYING_LIQUIDITY");\n', '\n', '        if (shouldUseAllowance) {\n', '            uint newAllowance = allowance(owner, _msgSender()).sub(amount, "INSUFFICIENT_ALLOWANCE");\n', '            _approve(owner, _msgSender(), newAllowance);\n', '        }\n', '        _transfer(owner, address(this), amount);\n', '\n', '        // Transfer underlying to the recipient from this contract\n', '        transferUnderlyingOut(recipient, underlyingAmount);\n', '\n', '        emit Redeem(owner, recipient, amount);\n', '\n', '        require(amount >= minRedeemAmount, "INSUFFICIENT_REDEEM_AMOUNT");\n', '\n', '        return underlyingAmount;\n', '    }\n', '\n', '    function _mintFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint underlyingAmount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal returns (uint) {\n', '        checkGaslessBlacklist(feeRecipient);\n', '\n', '        // To avoid stack too deep issues, splitting the call into 2 parts is essential.\n', '        _storage.validateOffChainMint(domainSeparator, MINT_TYPE_HASH, owner, recipient, nonce, expiry, underlyingAmount, feeAmount, feeRecipient, v, r, s);\n', '\n', '        // Initially, we mint to this contract so we can send handle the fees.\n', "        // We don't delegate the call for transferring the underlying in, because gasless requests are designed to\n", "        // allow any relayer to broadcast the user's cryptographically-secure message.\n", '        uint amount = _mint(owner, address(this), underlyingAmount);\n', '        require(amount >= feeAmount, "FEE_TOO_LARGE");\n', '\n', '        uint amountLessFee = amount.sub(feeAmount);\n', '        require(amountLessFee >= minMintAmount, "INSUFFICIENT_MINT_AMOUNT");\n', '\n', '        _transfer(address(this), recipient, amountLessFee);\n', '\n', '        doFeeTransferForDmmIfNecessary(address(this), feeRecipient, feeAmount);\n', '\n', '        return amountLessFee;\n', '    }\n', '\n', '    function _redeemFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal returns (uint) {\n', '        checkGaslessBlacklist(feeRecipient);\n', '\n', '        // To avoid stack too deep issues, splitting the call into 2 parts is essential.\n', '        _storage.validateOffChainRedeem(domainSeparator, REDEEM_TYPE_HASH, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient, v, r, s);\n', '\n', '        uint amountLessFee = amount.sub(feeAmount, "FEE_TOO_LARGE");\n', '        require(amountLessFee >= minRedeemAmount, "INSUFFICIENT_REDEEM_AMOUNT");\n', '\n', '        uint underlyingAmount = _redeem(owner, recipient, amountLessFee, /* shouldUseAllowance */ false);\n', '        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\n', '\n', '        return underlyingAmount;\n', '    }\n', '\n', '    function checkGaslessBlacklist(address feeRecipient) private view {\n', '        if (feeRecipient != address(0x0)) {\n', '            blacklistable().checkNotBlacklisted(feeRecipient);\n', '        }\n', '    }\n', '\n', '    function doFeeTransferForDmmIfNecessary(address owner, address feeRecipient, uint feeAmount) private {\n', '        if (feeAmount > 0) {\n', '            require(balanceOf(owner) >= feeAmount, "INSUFFICIENT_BALANCE_FOR_FEE");\n', '            _transfer(owner, feeRecipient, feeAmount);\n', '            emit FeeTransfer(owner, feeRecipient, feeAmount);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IWETH.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IWETH {\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint wad) external;\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IDmmEther.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IDmmEther {\n', '\n', '    /**\n', '     * @return The address for WETH being used by this contract.\n', '     */\n', '    function wethToken() external view returns (address);\n', '\n', '    /**\n', '     * Sends ETH from msg.sender to this contract to mint mETH.\n', '     */\n', '    function mintViaEther() external payable returns (uint);\n', '\n', '    /**\n', '     * Redeems the corresponding amount of mETH (from msg.sender) for WETH instead of ETH and sends it to `msg.sender`\n', '     */\n', '    function redeemToWETH(uint amount) external returns (uint);\n', '\n', '}\n', '\n', '// File: contracts/protocol/libs/SafeEther.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeEther {\n', '\n', '    function sendEther(address recipient, uint amount) internal {\n', '        sendEther(recipient, amount, "CANNOT_TRANSFER_ETHER");\n', '    }\n', '\n', '    function sendEther(address recipient, uint amount, string memory errorMessage) internal {\n', '        (bool success,) = address(uint160(recipient)).call.value(amount)("");\n', '        require(success, errorMessage);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/protocol/impl/DmmEther.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev A wrapper around Ether and WETH for minting DMM.\n', ' */\n', 'contract DmmEther is DmmToken, IDmmEther {\n', '\n', '    using SafeEther for address;\n', '\n', '    address public weth;\n', '\n', '    bool private _shouldTransferIn = true;\n', '    bool private _shouldRedeemToETH = true;\n', '\n', '    constructor(\n', '        address _weth,\n', '        string memory _symbol,\n', '        string memory _name,\n', '        uint8 _decimals,\n', '        uint _minMintAmount,\n', '        uint _minRedeemAmount,\n', '        uint _totalSupply,\n', '        address _controller\n', '    ) public DmmToken(\n', '        _symbol,\n', '        _name,\n', '        _decimals,\n', '        _minMintAmount,\n', '        _minRedeemAmount,\n', '        _totalSupply,\n', '        _controller\n', '    ) {\n', '        weth = _weth;\n', '    }\n', '\n', '    function() payable external {\n', "        // If ETH is sent by the WETH contract, do nothing - this means we're unwrapping\n", '        if (_msgSender() != weth) {\n', '            mintViaEther();\n', '        }\n', '    }\n', '\n', '    function wethToken() public view returns (address) {\n', '        return weth;\n', '    }\n', '\n', '    function mintViaEther()\n', '    whenNotPaused\n', '    nonReentrant\n', '    isNotDisabled\n', '    public payable returns (uint) {\n', '        require(msg.value > 0, "INSUFFICIENT_VALUE");\n', '        IWETH(weth).deposit.value(msg.value)();\n', '        _shouldTransferIn = false;\n', '\n', '        return _mint(_msgSender(), _msgSender(), msg.value);\n', '    }\n', '\n', '    function mint(\n', '        uint underlyingAmount\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    isNotDisabled\n', '    public returns (uint) {\n', '        _shouldTransferIn = true;\n', '        return _mint(_msgSender(), _msgSender(), underlyingAmount);\n', '    }\n', '\n', '\n', '    function mintFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint underlyingAmount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    isNotDisabled\n', '    public returns (uint) {\n', '        _shouldTransferIn = true;\n', '        return _mintFromGaslessRequest(\n', '            owner,\n', '            recipient,\n', '            nonce,\n', '            expiry,\n', '            underlyingAmount,\n', '            feeAmount,\n', '            feeRecipient,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '    }\n', '\n', '    function redeemToWETH(\n', '        uint amount\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public returns (uint) {\n', '        _shouldRedeemToETH = false;\n', '        return _redeem(_msgSender(), _msgSender(), amount, /* shouldUseAllowance */ false);\n', '    }\n', '\n', '    function redeem(\n', '        uint amount\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public returns (uint) {\n', '        _shouldRedeemToETH = true;\n', '        return _redeem(_msgSender(), _msgSender(), amount, /* shouldUseAllowance */ false);\n', '    }\n', '\n', '    function redeemFromGaslessRequest(\n', '        address owner,\n', '        address recipient,\n', '        uint nonce,\n', '        uint expiry,\n', '        uint amount,\n', '        uint feeAmount,\n', '        address feeRecipient,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '    whenNotPaused\n', '    nonReentrant\n', '    public returns (uint) {\n', '        _shouldRedeemToETH = true;\n', '        return _redeemFromGaslessRequest(\n', '            owner,\n', '            recipient,\n', '            nonce,\n', '            expiry,\n', '            amount,\n', '            feeAmount,\n', '            feeRecipient,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '    }\n', '\n', '    function transferUnderlyingIn(address sender, uint underlyingAmount) internal {\n', '        if (!_shouldTransferIn) {\n', '            // Do nothing. The ETH was already transferred into this contract\n', '        } else {\n', '            super.transferUnderlyingIn(sender, underlyingAmount);\n', '        }\n', '    }\n', '\n', '    function transferUnderlyingOut(address recipient, uint underlyingAmount) internal {\n', '        address underlyingToken = controller.getUnderlyingTokenForDmm(address(this));\n', '        if (_shouldRedeemToETH) {\n', '            IWETH(underlyingToken).withdraw(underlyingAmount);\n', '            recipient.sendEther(underlyingAmount, "COULD_NOT_TRANSFER_ETH_OUT");\n', '        } else {\n', '            IERC20(underlyingToken).safeTransfer(recipient, underlyingAmount);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IDmmTokenFactory.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IDmmTokenFactory {\n', '\n', '    function deployToken(\n', '        string calldata symbol,\n', '        string calldata name,\n', '        uint8 decimals,\n', '        uint minMintAmount,\n', '        uint minRedeemAmount,\n', '        uint totalSupply,\n', '        address controller\n', '    ) external returns (IDmmToken);\n', '\n', '}\n', '\n', '// File: contracts/protocol/impl/DmmTokenFactory.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract DmmTokenFactory is Context, IDmmTokenFactory, Ownable {\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function deployToken(\n', '        string memory symbol,\n', '        string memory name,\n', '        uint8 decimals,\n', '        uint minMintAmount,\n', '        uint minRedeemAmount,\n', '        uint totalSupply,\n', '        address controller\n', '    ) public onlyOwner returns (IDmmToken) {\n', '        DmmToken token = new DmmToken(\n', '            symbol,\n', '            name,\n', '            decimals,\n', '            minMintAmount,\n', '            minRedeemAmount,\n', '            totalSupply,\n', '            controller\n', '        );\n', '        token.transferOwnership(_msgSender());\n', '        return token;\n', '    }\n', '\n', '}']