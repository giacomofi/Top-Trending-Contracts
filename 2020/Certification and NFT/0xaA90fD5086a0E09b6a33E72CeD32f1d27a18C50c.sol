['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only AND MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Miner.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract Miner is ERC20, Ownable {\n', '    uint8 private constant DECIMALS = 18;\n', '\n', '    address private _minter;\n', '\n', '    constructor() public ERC20("Miner", "MINER") Ownable() {\n', '        // explicitly require a minter to be created.\n', '        _minter = address(0);\n', '        _setupDecimals(DECIMALS);\n', '    }\n', '\n', '    /**\n', '     * Sets the minter address.\n', '     * @param minter address The minter address.\n', '     */\n', '    function setMinter(address minter) public onlyOwner {\n', '        require(minter != address(0), "Miner/zero-address");\n', '        _minter = minter;\n', '    }\n', '\n', '    /**\n', '     * Gets the minter address.\n', '     * @return address The minter address.\n', '     */\n', '    function getMinter() public view returns (address) {\n', '        return _minter;\n', '    }\n', '\n', '    function mint(uint256 amount) public onlyMinter {\n', '        _mint(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', '     * Checks that the minter is assigned and is the calling user.\n', '     * If msg.sender does not match the minter, the test blows the gas limit\n', "     * out. Not sure why it doesn't revert on the require.\n", '     */\n', '    modifier onlyMinter {\n', '        require(getMinter() == _msgSender(), "Miner/invalid-minter");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Treasury.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'enum ProposalType { Mint, Access, Withdrawal }\n', '\n', 'enum AccessAction { None, Grant, Revoke }\n', '\n', 'struct Proposal {\n', '    address proposer;\n', '    uint256 expires;\n', '    uint256 signatures;\n', '    bool open;\n', '    ProposalType proposalType;\n', '}\n', '\n', 'struct Veto {\n', '    address proposer;\n', '    uint256 endorsements;\n', '    bool enforced;\n', '    uint256 proposal;\n', '}\n', '\n', 'struct MintProposal {\n', '    uint256 amount;\n', '}\n', '\n', 'struct WithdrawalProposal {\n', '    address recipient;\n', '    uint256 amount;\n', '}\n', '\n', 'struct AccessProposal {\n', '    address signatory;\n', '    AccessAction action;\n', '}\n', '\n', 'struct Signatory {\n', '    AccessAction action;\n', '}\n', '\n', 'contract Treasury is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for Miner;\n', '\n', '    Miner private _token;\n', '\n', '    uint8 public constant MINIMUM_SIGNATORIES = 3;\n', '\n', '    mapping(address => Signatory) public signatories;\n', '    address[] public signatoriesIndex;\n', '    uint256 public grantedCount;\n', '\n', '    Proposal[] public proposals;\n', '    // signatures[proposalIndex][signatoryAddress] = signed (true)\n', '    mapping(uint256 => mapping(address => bool)) public signed;\n', '    mapping(uint256 => address[]) public signatures;\n', '\n', '    Veto[] public vetoes;\n', '    mapping(uint256 => bool) public vetoedProposals;\n', '    mapping(uint256 => mapping(address => bool)) public vetoed;\n', '    mapping(uint256 => address[]) public vetoers;\n', '\n', '    mapping(uint256 => AccessProposal) public accessProposals;\n', '    mapping(uint256 => MintProposal) public mintProposals;\n', '    mapping(uint256 => WithdrawalProposal) public withdrawalProposals;\n', '\n', '    constructor(Miner token) public {\n', '        _token = token;\n', '        _grantSignatory(_msgSender());\n', '    }\n', '\n', '    function inSigningPeriod() public view returns (bool) {\n', '        if (proposals.length == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 i = proposals.length.sub(1);\n', '        return _inSigningPeriod(i);\n', '    }\n', '\n', '    function _inSigningPeriod(uint256 i) private view returns (bool) {\n', '        return proposals[i].expires > now;\n', '    }\n', '\n', '    /**\n', '     * Proposes a minting event.\n', '     * @param amount uint256 The proposed amount to mint.\n', '     */\n', '    function proposeMint(uint256 amount)\n', '        external\n', '        onlySignatory()\n', '        noPendingProposals()\n', '        minimumSignatories()\n', '    {\n', '        require(amount > 0, "Treasury/zero-amount");\n', '\n', '        mintProposals[proposals.length] = MintProposal(amount);\n', '\n', '        _propose(ProposalType.Mint);\n', '    }\n', '\n', '    /**\n', '     * Proposes the granting of signatory based on their public address.\n', '     * @param signatory address The address of the signatory to grant access\n', '     * to.\n', '     */\n', '    function proposeGrant(address signatory)\n', '        external\n', '        onlySignatory()\n', '        noPendingProposals()\n', '    {\n', '        require(signatory != address(0), "Treasury/invalid-address");\n', '        require(\n', '            signatories[signatory].action != AccessAction.Grant,\n', '            "Treasury/access-granted"\n', '        );\n', '\n', '        uint256 index = getProposalsCount();\n', '\n', '        accessProposals[index] = AccessProposal(signatory, AccessAction.Grant);\n', '\n', '        _propose(ProposalType.Access);\n', '    }\n', '\n', '    /**\n', '     * Proposes the revoking of a signatory based on their public address.\n', '     * @param signatory address The address of the signatory to revoke access\n', '     * from.\n', '     */\n', '    function proposeRevoke(address signatory)\n', '        external\n', '        onlySignatory()\n', '        noPendingProposals()\n', '    {\n', '        require(\n', '            grantedCount > MINIMUM_SIGNATORIES,\n', '            "Treasury/minimum-signatories"\n', '        );\n', '        require(signatory != address(0), "Treasury/invalid-address");\n', '        require(\n', '            signatories[signatory].action == AccessAction.Grant,\n', '            "Treasury/no-signatory-or-revoked"\n', '        );\n', '\n', '        uint256 index = getProposalsCount();\n', '\n', '        accessProposals[index] = AccessProposal(signatory, AccessAction.Revoke);\n', '\n', '        _propose(ProposalType.Access);\n', '    }\n', '\n', '    /**\n', "     * Proposes the withdrawal of Miner to a recipient's wallet address.\n", '     * @param recipient address The address of the recipient.\n', "     * @param amount uint256 The amount of Miner to withdraw to the recipient's\n", '     * wallet.\n', '     */\n', '    function proposeWithdrawal(address recipient, uint256 amount)\n', '        external\n', '        onlySignatory()\n', '        noPendingProposals()\n', '        minimumSignatories()\n', '    {\n', '        require(amount > 0, "Treasury/zero-amount");\n', '\n', '        withdrawalProposals[proposals.length] = WithdrawalProposal(\n', '            recipient,\n', '            amount\n', '        );\n', '\n', '        _propose(ProposalType.Withdrawal);\n', '    }\n', '\n', '    /**\n', '     * Veto an existing, pending proposal.\n', '     */\n', '    function vetoProposal()\n', '        external\n', '        onlySignatory()\n', '        minimumSignatories()\n', '        latestProposalPending()\n', '    {\n', '        uint256 totalProposals = getProposalsCount();\n', '\n', '        uint256 index = totalProposals.sub(1);\n', '\n', '        require(!vetoedProposals[index], "Treasury/veto-pending");\n', '\n', '        Veto memory veto = Veto(msg.sender, 0, false, index);\n', '\n', '        vetoedProposals[index] = true;\n', '        vetoes.push(veto);\n', '\n', '        endorseVeto();\n', '    }\n', '\n', '    /**\n', '     * Endorse a veto.\n', '     */\n', '    function endorseVeto()\n', '        public\n', '        latestProposalPending()\n', '        onlySignatory()\n', '    {\n', '        uint256 totalVetoes = getVetoCount();\n', '\n', '        require(totalVetoes > 0, "Treasury/no-vetoes");\n', '\n', '        uint256 index = totalVetoes.sub(1);\n', '\n', '        require(\n', '            vetoed[index][msg.sender] != true,\n', '            "Treasury/signatory-already-vetoed"\n', '        );\n', '\n', '        Proposal storage vetoedProposal = proposals[vetoes[index].proposal];\n', '\n', '        vetoed[index][msg.sender] = true;\n', '        vetoers[index].push(msg.sender);\n', '\n', '        vetoes[index].endorsements = vetoes[index].endorsements.add(1);\n', '\n', '        if (vetoes[index].endorsements >= getRequiredSignatoryCount()) {\n', '            proposals[vetoes[index].proposal].open = false;\n', '            vetoes[index].enforced = true;\n', '\n', '            _revokeSignatory(vetoedProposal.proposer);\n', '\n', '            emit Vetoed(index, vetoes[index].proposal);\n', '        }\n', '    }\n', '\n', '    function _propose(ProposalType proposalType) private returns (uint256) {\n', '        Proposal memory proposal = Proposal(\n', '            msg.sender,\n', '            now + 48 hours,\n', '            0,\n', '            true,\n', '            proposalType\n', '        );\n', '\n', '        proposals.push(proposal);\n', '\n', '        sign();\n', '    }\n', '\n', '    /**\n', '     * Gets the total number of signatories.\n', '     *\n', '     * The getSignatoryCount gets the total number of signatories, whether\n', '     * their access is granted or revoked. To retrieve the number of granted\n', '     * signatories, use grantedCount.\n', '     * @return uint256 The total number of signatories.\n', '     */\n', '    function getSignatoryCount() public view returns (uint256) {\n', '        return signatoriesIndex.length;\n', '    }\n', '\n', '    /**\n', '     * Gets the number of proposals.\n', '     * @return uint256 The number of proposals.\n', '     */\n', '    function getProposalsCount() public view returns (uint256) {\n', '        return proposals.length;\n', '    }\n', '\n', '    /**\n', '     * Gets the number of vetoes.\n', '     * @return uint256 The number of vetoes.\n', '     */\n', '    function getVetoCount() public view returns (uint256) {\n', '        return vetoes.length;\n', '    }\n', '\n', '    /**\n', '     * Gets the signatures for a proposal.\n', '     * @param proposal uint256 the proposal id.\n', '     * @return address[] A list if signatures for the proposal.\n', '     */\n', '    function getSignatures(uint256 proposal)\n', '        external\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return signatures[proposal];\n', '    }\n', '\n', '    /**\n', '     * Gets the signatures for a veto.\n', '     * @param veto uint256 the veto id.\n', '     * @return address[] A list if signatures for the veto.\n', '     */\n', '    function getVetoEndorsements(uint256 veto)\n', '        external\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return vetoers[veto];\n', '    }\n', '\n', '    /**\n', '     * Signs a proposal. If the required number of signatories is reached,\n', '     * execute the appropriate proposal action.\n', '     */\n', '    function sign() public onlySignatory() latestProposalPending() {\n', '        require(proposals.length > 0, "Treasury/no-proposals");\n', '        uint256 index = getProposalsCount().sub(1);\n', '\n', '        require(\n', '            signed[index][msg.sender] != true,\n', '            "Treasury/signatory-already-signed"\n', '        );\n', '\n', '        signatures[index].push(msg.sender);\n', '        signed[index][msg.sender] = true;\n', '        proposals[index].signatures = proposals[index].signatures.add(1);\n', '\n', '        if (proposals[index].signatures >= getRequiredSignatoryCount()) {\n', '            proposals[index].open = false;\n', '\n', '            if (proposals[index].proposalType == ProposalType.Mint) {\n', '                _printerGoesBrr(mintProposals[index].amount);\n', '            } else if (\n', '                proposals[index].proposalType == ProposalType.Withdrawal\n', '            ) {\n', '                _withdraw(\n', '                    withdrawalProposals[index].recipient,\n', '                    withdrawalProposals[index].amount\n', '                );\n', '            } else {\n', '                _updateSignatoryAccess();\n', '            }\n', '        }\n', '\n', '        emit Signed(index);\n', '    }\n', '\n', '    function getRequiredSignatoryCount() public view returns (uint256) {\n', '        return grantedCount.div(2).add(1);\n', '    }\n', '\n', '    function _updateSignatoryAccess() private {\n', '        uint256 index = getProposalsCount().sub(1);\n', '        // is this a new signatory?\n', '        address signatory = accessProposals[index].signatory;\n', '\n', '        if (accessProposals[index].action == AccessAction.Grant) {\n', '            _grantSignatory(signatory);\n', '\n', '            emit AccessGranted(signatory);\n', '        } else {\n', '            _revokeSignatory(signatory);\n', '\n', '            emit AccessRevoked(signatory);\n', '        }\n', '    }\n', '\n', '    function _grantSignatory(address signatory) private {\n', '        // if a new signatory, add to list.\n', '        if (signatories[signatory].action != AccessAction.Revoke) {\n', '            signatoriesIndex.push(signatory);\n', '        }\n', '\n', '        signatories[signatory] = Signatory(AccessAction.Grant);\n', '        grantedCount = grantedCount.add(1);\n', '    }\n', '\n', '    function _revokeSignatory(address signatory) private {\n', '        signatories[signatory] = Signatory(AccessAction.Revoke);\n', '        grantedCount = grantedCount.sub(1);\n', '    }\n', '\n', '    function _printerGoesBrr(uint256 amount) private {\n', '        _token.mint(amount);\n', '\n', '        Minted(amount);\n', '    }\n', '\n', '    function _withdraw(address recipient, uint256 amount) private {\n', '        _token.transfer(recipient, amount);\n', '\n', '        emit Withdrawn(recipient, amount);\n', '    }\n', '\n', '    modifier onlySignatory() {\n', '        require(\n', '            signatories[msg.sender].action == AccessAction.Grant,\n', '            "Treasury/invalid-signatory"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier latestProposalPending() {\n', '        uint256 totalProposals = getProposalsCount();\n', '\n', '        if (totalProposals > 0) {\n', '            uint256 index = totalProposals.sub(1);\n', '\n', '            require(\n', '                proposals[index].open && inSigningPeriod(),\n', '                "Treasury/proposal-expired"\n', '            );\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier noPendingProposals() {\n', '        uint256 totalProposals = getProposalsCount();\n', '\n', '        if (totalProposals > 0) {\n', '            uint256 index = totalProposals.sub(1);\n', '\n', '            require(\n', '                !proposals[index].open || !inSigningPeriod(),\n', '                "Treasury/proposal-pending"\n', '            );\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier minimumSignatories() {\n', '        require(\n', '            grantedCount >= MINIMUM_SIGNATORIES,\n', '            "Treasury/minimum-signatories"\n', '        );\n', '        _;\n', '    }\n', '\n', '    event Signed(uint256 index);\n', '\n', '    event AccessGranted(address signatory);\n', '    event AccessRevoked(address signatory);\n', '\n', '    event Minted(uint256 amount);\n', '\n', '    event Withdrawn(address recipient, uint256 amount);\n', '\n', '    event Vetoed(uint256 veto, uint256 proposal);\n', '}']