['// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/access/Roles.sol\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistAdminRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    constructor () internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistedRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n', ' * it), and not Whitelisteds themselves.\n', ' */\n', 'contract WhitelistedRole is Context, WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(_msgSender()), "WhitelistedRole: caller does not have the Whitelisted role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(_msgSender());\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/oracle/ICADConversionOracle.sol\n', '\n', '\n', '/**\n', ' * @title ICADRateOracle\n', ' * @notice provides interface for converting USD stable coins to CAD\n', '*/\n', 'interface ICADConversionOracle {\n', '\n', '    /**\n', '     * @notice convert USD amount to CAD amount\n', '     * @param amount     amount of USD in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdToCad(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert Dai amount to CAD amount\n', '     * @param amount     amount of dai in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function daiToCad(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert USDC amount to CAD amount\n', '     * @param amount     amount of USDC in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdcToCad(uint256 amount) external view returns (uint256);\n', '\n', '\n', '    /**\n', '     * @notice convert USDT amount to CAD amount\n', '     * @param amount     amount of USDT in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdtToCad(uint256 amount) external view returns (uint256);\n', '\n', '\n', '    /**\n', '     * @notice convert CAD amount to USD amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USD in 18 decimal places\n', '     */\n', '    function cadToUsd(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to Dai amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of Dai in 18 decimal places\n', '     */\n', '    function cadToDai(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDC amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDC in 6 decimal places\n', '     */\n', '    function cadToUsdc(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDT amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDT in 6 decimal places\n', '     */\n', '    function cadToUsdt(uint256 amount) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/oracle/ManagedCADChainlinkRateOracle.sol\n', '\n', '\n', '\n', '/**\n', ' * @title ManagedCADChainlinkRateOracle\n', ' * @notice Provides a USD/CAD rate source managed by admin, and Chainlink powered DAI/USDC/USDT conversion rates.\n', ' *  USDC is treated as always 1 USD, and used as anchor to calculate Dai and USDT rates\n', '*/\n', 'contract ManagedCADChainlinkRateOracle is ICADConversionOracle, WhitelistedRole {\n', '    using SafeMath for uint256;\n', '\n', '    event ManagedRateUpdated(uint256 value, uint256 timestamp);\n', '\n', '    // exchange rate stored as an integer\n', '    uint256 public _USDToCADRate;\n', '\n', '    // specifies how many decimal places have been converted into integer\n', '    uint256 public _granularity;\n', '\n', '    // specifies the time the exchange was last updated\n', '    uint256 public _timestamp;\n', '\n', '    // Chainlink price feed for Dai/Eth pair\n', '    AggregatorV3Interface public daiEthPriceFeed;\n', '\n', '    // Chainlink price feed for USDC/Eth pair\n', '    AggregatorV3Interface public usdcEthPriceFeed;\n', '\n', '    // Chainlink price feed for USDT/Eth pair\n', '    AggregatorV3Interface public usdtEthPriceFeed;\n', '\n', '\n', '    constructor(\n', '        uint256 value,\n', '        uint256 granularity,\n', '\n', '        address daiEthAggregatorAddress,\n', '        address usdcEthAggregatorAddress,\n', '        address usdtEthAggregatorAddress\n', '    ) public {\n', '        _USDToCADRate = value;\n', '        _granularity = granularity;\n', '        _timestamp = block.timestamp;\n', '\n', '        daiEthPriceFeed = AggregatorV3Interface(daiEthAggregatorAddress);\n', '        usdcEthPriceFeed = AggregatorV3Interface(usdcEthAggregatorAddress);\n', '        usdtEthPriceFeed = AggregatorV3Interface(usdtEthAggregatorAddress);\n', '\n', '        _addWhitelisted(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice admin can update the exchange rate\n', '     * @param value         the new exchange rate\n', '     * @param granularity   number of decimal places the exchange value is accurate to\n', '     * @return  true if success\n', '     */\n', '    function updateManagedRate(uint256 value, uint256 granularity) external onlyWhitelisted returns (bool) {\n', '        require(value > 0, "Exchange rate cannot be zero");\n', '        require(granularity > 0, "Granularity cannot be zero");\n', '\n', '        _USDToCADRate = value;\n', '        _granularity = granularity;\n', '        _timestamp = block.timestamp;\n', '\n', '        emit ManagedRateUpdated(value, granularity);\n', '        return true;\n', '    }\n', '\n', '     /**\n', '     * @notice return the current managed values\n', '     * @return latest USD to CAD exchange rate, granularity, and timestamp\n', '     */\n', '    function getManagedRate() external view returns (uint256, uint256, uint256) {\n', '        return (_USDToCADRate, _granularity, _timestamp);\n', '    }\n', '\n', '    /**\n', '     * @notice convert USD amount to CAD amount\n', '     * @param amount     amount of USD in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdToCad(uint256 amount) public view virtual override returns (uint256) {\n', '        return amount.mul(_USDToCADRate).div(10 ** _granularity);\n', '    }\n', '\n', '    /**\n', '     * @notice convert Dai amount to CAD amount\n', '     * @param amount     amount of dai in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function daiToCad(uint256 amount) external view virtual override returns (uint256) {\n', '        (, int256 daiEthPrice, , uint256 daiEthTimeStamp,) = daiEthPriceFeed.latestRoundData();\n', '        require(daiEthTimeStamp > 0, "Dai Chainlink Oracle data temporarily incomplete");\n', '        require(daiEthPrice > 0, "Invalid Chainlink Oracle Dai price");\n', '\n', '        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\n', '        require(usdcEthTimeStamp > 0, "USDC conversion Chainlink Oracle data temporarily incomplete");\n', '        require(usdcEthPrice > 0, "Invalid Chainlink Oracle USDC conversion price");\n', '\n', '        return amount.mul(_USDToCADRate).mul(uint256(daiEthPrice)).div(uint256(usdcEthPrice)).div(10 ** _granularity);\n', '    }\n', '\n', '    /**\n', '     * @notice convert USDC amount to CAD amount\n', '     * @param amount     amount of USDC in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdcToCad(uint256 amount) external view virtual override returns (uint256) {\n', '        // USDT has 6 decimals\n', '        return usdToCad(amount.mul(1e12));\n', '    }\n', '\n', '    /**\n', '     * @notice convert USDT amount to CAD amount\n', '     * @param amount     amount of USDT in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdtToCad(uint256 amount) external view virtual override returns (uint256) {\n', '        (, int256 usdtEthPrice, , uint256 usdtEthTimeStamp,) = usdtEthPriceFeed.latestRoundData();\n', '        require(usdtEthTimeStamp > 0, "USDT Chainlink Oracle data temporarily incomplete");\n', '        require(usdtEthPrice > 0, "Invalid Chainlink Oracle USDT price");\n', '\n', '        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\n', '        require(usdcEthTimeStamp > 0, "USDC conversion Chainlink Oracle data temporarily incomplete");\n', '        require(usdcEthPrice > 0, "Invalid Chainlink Oracle USDC conversion price");\n', '\n', '        // USDT has 6 decimals\n', '        return amount.mul(1e12).mul(_USDToCADRate).mul(uint256(usdtEthPrice)).div(uint256(usdcEthPrice)).div(10 ** _granularity);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice convert CAD amount to USD amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USD in 18 decimal places\n', '     */\n', '    function cadToUsd(uint256 amount) public view virtual override returns (uint256) {\n', '        return amount.mul(10 ** _granularity).div(_USDToCADRate);\n', '    }\n', '\n', '    /**\n', '     * @notice convert CAD amount to Dai amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of Dai in 18 decimal places\n', '     */\n', '    function cadToDai(uint256 amount) external view virtual override returns (uint256) {\n', '        (, int256 daiEthPrice, , uint256 daiEthTimeStamp,) = daiEthPriceFeed.latestRoundData();\n', '        require(daiEthTimeStamp > 0, "Dai Chainlink Oracle data temporarily incomplete");\n', '        require(daiEthPrice > 0, "Invalid Chainlink Oracle Dai price");\n', '\n', '        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\n', '        require(usdcEthTimeStamp > 0, "USDC conversion Chainlink Oracle data temporarily incomplete");\n', '        require(usdcEthPrice > 0, "Invalid Chainlink Oracle USDC conversion price");\n', '\n', '        return amount.mul(10 ** _granularity).mul(uint256(usdcEthPrice)).div(uint256(daiEthPrice)).div(_USDToCADRate);\n', '    }\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDC amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDC in 6 decimal places\n', '     */\n', '    function cadToUsdc(uint256 amount) external view virtual override returns (uint256) {\n', '        return cadToUsd(amount).div(1e12);\n', '    }\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDT amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDT in 6 decimal places\n', '     */\n', '    function cadToUsdt(uint256 amount) external view virtual override returns (uint256) {\n', '        (, int256 usdtEthPrice, , uint256 usdtEthTimeStamp,) = usdtEthPriceFeed.latestRoundData();\n', '        require(usdtEthTimeStamp > 0, "USDT Chainlink Oracle data temporarily incomplete");\n', '        require(usdtEthPrice > 0, "Invalid Chainlink Oracle USDT price");\n', '\n', '        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\n', '        require(usdcEthTimeStamp > 0, "USDC conversion Chainlink Oracle data temporarily incomplete");\n', '        require(usdcEthPrice > 0, "Invalid Chainlink Oracle USDC conversion price");\n', '\n', '        return amount.mul(10 ** _granularity).mul(uint256(usdcEthPrice)).div(uint256(usdtEthPrice)).div(_USDToCADRate).div(1e12);\n', '    }\n', '}']