['/* yLAND Farming Contract - v3 */\n', '\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '// File: @openzeppelin\\contracts\\math\\Math.sol\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '\t/**\n', '\t * @dev Returns the largest of two numbers.\n', '\t */\n', '\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the smallest of two numbers.\n', '\t */\n', '\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a < b ? a : b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the average of two numbers. The result is rounded towards\n', '\t * zero.\n', '\t */\n', '\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// (a + b) / 2 can overflow, so we distribute\n', '\t\treturn (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\t/**\n', '\t * @dev Returns the addition of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `+` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Addition cannot overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\interfaces\\IStakedRewardsPool.sol\n', '\n', 'interface IStakedRewardsPool {\n', '\t/* Views */\n', '\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\tfunction earned(address account) external view returns (uint256);\n', '\n', '\tfunction rewardsToken() external view returns (IERC20);\n', '\n', '\tfunction stakingToken() external view returns (IERC20);\n', '\n', '\tfunction stakingTokenDecimals() external view returns (uint8);\n', '\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/* Mutators */\n', '\n', '\tfunction exit() external;\n', '\n', '\tfunction getReward() external;\n', '\n', '\tfunction getRewardExact(uint256 amount) external;\n', '\n', '\tfunction pause() external;\n', '\n', '\tfunction recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) external;\n', '\n', '\tfunction stake(uint256 amount) external;\n', '\n', '\tfunction unpause() external;\n', '\n', '\tfunction updateReward() external;\n', '\n', '\tfunction updateRewardFor(address account) external;\n', '\n', '\tfunction withdraw(uint256 amount) external;\n', '\n', '\t/* Events */\n', '\n', '\tevent RewardPaid(address indexed account, uint256 amount);\n', '\tevent Staked(address indexed account, uint256 amount);\n', '\tevent Withdrawn(address indexed account, uint256 amount);\n', '\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\n', '}\n', '\n', '// File: contracts\\interfaces\\IStakedRewardsPoolTimedRate.sol\n', '\n', 'interface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\n', '\t/* Views */\n', '\n', '\tfunction accruedRewardPerToken() external view returns (uint256);\n', '\n', '\tfunction hasEnded() external view returns (bool);\n', '\n', '\tfunction hasStarted() external view returns (bool);\n', '\n', '\tfunction lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '\tfunction periodDuration() external view returns (uint256);\n', '\n', '\tfunction periodEndTime() external view returns (uint256);\n', '\n', '\tfunction periodStartTime() external view returns (uint256);\n', '\n', '\tfunction rewardRate() external view returns (uint256);\n', '\n', '\tfunction timeRemainingInPeriod() external view returns (uint256);\n', '\n', '\t/* Mutators */\n', '\n', '\tfunction addToRewardsAllocation(uint256 amount) external;\n', '\n', '\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\n', '\n', '\t/* Events */\n', '\n', '\tevent RewardAdded(uint256 amount);\n', '\tevent NewPeriodSet(uint256 startTIme, uint256 endTime);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal view virtual returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view virtual returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\access\\Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev Initializes the contract setting the deployer as the initial owner.\n', '\t */\n', '\tconstructor () {\n', '\t\taddress msgSender = _msgSender();\n', '\t\t_owner = msgSender;\n', '\t\temit OwnershipTransferred(address(0), msgSender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the address of the current owner.\n', '\t */\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Leaves the contract without owner. It will not be possible to call\n', '\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '\t *\n', '\t * NOTE: Renouncing ownership will leave the contract without an owner,\n', '\t * thereby removing any functionality that is only available to the owner.\n', '\t */\n', '\tfunction renounceOwnership() public virtual onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t * Can only be called by the current owner.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n', '\t\trequire(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\Pausable.sol\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '\t/**\n', '\t * @dev Emitted when the pause is triggered by `account`.\n', '\t */\n', '\tevent Paused(address account);\n', '\n', '\t/**\n', '\t * @dev Emitted when the pause is lifted by `account`.\n', '\t */\n', '\tevent Unpaused(address account);\n', '\n', '\tbool private _paused;\n', '\n', '\t/**\n', '\t * @dev Initializes the contract in unpaused state.\n', '\t */\n', '\tconstructor () {\n', '\t\t_paused = false;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the contract is paused, and false otherwise.\n', '\t */\n', '\tfunction paused() public view returns (bool) {\n', '\t\treturn _paused;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is not paused.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must not be paused.\n', '\t */\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!_paused, "Pausable: paused");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is paused.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must be paused.\n', '\t */\n', '\tmodifier whenPaused() {\n', '\t\trequire(_paused, "Pausable: not paused");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Triggers stopped state.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must not be paused.\n', '\t */\n', '\tfunction _pause() internal virtual whenNotPaused {\n', '\t\t_paused = true;\n', '\t\temit Paused(_msgSender());\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns to normal state.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must be paused.\n', '\t */\n', '\tfunction _unpause() internal virtual whenPaused {\n', '\t\t_paused = false;\n', '\t\temit Unpaused(_msgSender());\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '\t// Booleans are more expensive than uint256 or any type that takes up a full\n', '\t// word because each write operation emits an extra SLOAD to first read the\n', "\t// slot's contents, replace the bits taken up by the boolean, and then write\n", "\t// back. This is the compiler's defense against contract upgrades and\n", '\t// pointer aliasing, and it cannot be disabled.\n', '\n', '\t// The values being non-zero value makes deployment a bit more expensive,\n', '\t// but in exchange the refund on every call to nonReentrant will be lower in\n', '\t// amount. Since refunds are capped to a percentage of the total\n', "\t// transaction's gas, it is best to keep them low in cases like this one, to\n", '\t// increase the likelihood of the full refund coming into effect.\n', '\tuint256 private constant _NOT_ENTERED = 1;\n', '\tuint256 private constant _ENTERED = 2;\n', '\n', '\tuint256 private _status;\n', '\n', '\tconstructor () {\n', '\t\t_status = _NOT_ENTERED;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Prevents a contract from calling itself, directly or indirectly.\n', '\t * Calling a `nonReentrant` function from another `nonReentrant`\n', '\t * function is not supported. It is possible to prevent this from happening\n', '\t * by making the `nonReentrant` function external, and make it call a\n', '\t * `private` function that does the actual work.\n', '\t */\n', '\tmodifier nonReentrant() {\n', '\t\t// On the first call to nonReentrant, _notEntered will be true\n', '\t\trequire(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '\t\t// Any calls to nonReentrant after this point will fail\n', '\t\t_status = _ENTERED;\n', '\n', '\t\t_;\n', '\n', '\t\t// By storing the original value once again, a refund is triggered (see\n', '\t\t// https://eips.ethereum.org/EIPS/eip-2200)\n', '\t\t_status = _NOT_ENTERED;\n', '\t}\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\t/**\n', '\t * @dev Returns true if `account` is a contract.\n', '\t *\n', '\t * [IMPORTANT]\n', '\t * ====\n', '\t * It is unsafe to assume that an address for which this function returns\n', '\t * false is an externally-owned account (EOA) and not a contract.\n', '\t *\n', '\t * Among others, `isContract` will return false for the following\n', '\t * types of addresses:\n', '\t *\n', '\t *  - an externally-owned account\n', '\t *  - a contract in construction\n', '\t *  - an address where a contract will be created\n', '\t *  - an address where a contract lived, but was destroyed\n', '\t * ====\n', '\t */\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "\t\t// for accounts without code, i.e. `keccak256('')`\n", '\t\tbytes32 codehash;\n', '\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\tassembly { codehash := extcodehash(account) }\n', '\t\treturn (codehash != accountHash && codehash != 0x0);\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '\t * `recipient`, forwarding all available gas and reverting on errors.\n', '\t *\n', '\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '\t * imposed by `transfer`, making them unable to receive funds via\n', '\t * `transfer`. {sendValue} removes this limitation.\n', '\t *\n', '\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '\t *\n', '\t * IMPORTANT: because control is transferred to `recipient`, care must be\n', '\t * taken to not create reentrancy vulnerabilities. Consider using\n', '\t * {ReentrancyGuard} or the\n', '\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '\t */\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(success, "Address: unable to send value, recipient may have reverted");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs a Solidity function call using a low level `call`. A\n', '\t * plain`call` is an unsafe replacement for a function call: use this\n', '\t * function instead.\n', '\t *\n', '\t * If `target` reverts with a revert reason, it is bubbled up by this\n', '\t * function (like regular Solidity function calls).\n', '\t *\n', '\t * Returns the raw returned data. To convert to the expected return value,\n', '\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `target` must be a contract.\n', '\t * - calling `target` with `data` must not revert.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '\t  return functionCall(target, data, "Address: low-level call failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '\t * `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '\t * but also transferring `value` wei to `target`.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the calling contract must have an ETH balance of at least `value`.\n', '\t * - the called Solidity function must be `payable`.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '\t\treturn functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '\t\trequire(address(this).balance >= value, "Address: insufficient balance for call");\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls\n', '\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\t// Look for revert reason and bubble it up if present\n', '\t\t\tif (returndata.length > 0) {\n', '\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '\t\t\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '\t}\n', '\n', '\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Deprecated. This function has issues similar to the ones found in\n', '\t * {IERC20-approve}, and its usage is discouraged.\n', '\t *\n', '\t * Whenever possible, use {safeIncreaseAllowance} and\n', '\t * {safeDecreaseAllowance} instead.\n', '\t */\n', '\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '\t\t// safeApprove should only be called when setting an initial allowance,\n', '\t\t// or when resetting it to zero. To increase and decrease it, use\n', "\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '\t\t// solhint-disable-next-line max-line-length\n', '\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\n', '\t\t\t"SafeERC20: approve from non-zero to non-zero allowance"\n', '\t\t);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '\t}\n', '\n', '\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\n', '\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '\t * @param token The token targeted by the call.\n', '\t * @param data The call data (encoded using abi.encode or one of its variants).\n', '\t */\n', '\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '\t\t// the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '\t\tbytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '\t\tif (returndata.length > 0) { // Return data is optional\n', '\t\t\t// solhint-disable-next-line max-line-length\n', '\t\t\trequire(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: contracts\\StakedRewardsPool.sol\n', '\n', 'abstract contract StakedRewardsPool is\n', '\tContext,\n', '\tReentrancyGuard,\n', '\tOwnable,\n', '\tPausable,\n', '\tIStakedRewardsPool\n', '{\n', '\tusing SafeERC20 for IERC20;\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* Mutable Internal State */\n', '\n', '\tmapping(address => uint256) internal _rewards;\n', '\n', '\t/* Immutable Private State */\n', '\n', '\tuint8 private _stakingTokenDecimals;\n', '\tIERC20 private _rewardsToken;\n', '\tIERC20 private _stakingToken;\n', '\tuint256 private _stakingTokenBase;\n', '\n', '\t/* Mutable Private State */\n', '\n', '\tmapping(address => uint256) private _balances;\n', '\tuint256 private _totalSupply;\n', '\n', '\t/* Constructor */\n', '\n', '\tconstructor(\n', '\t\tIERC20 rewardsToken,\n', '\t\tIERC20 stakingToken,\n', '\t\tuint8 stakingTokenDecimals\n', '\t) Ownable() {\n', '\t\t// Prevent overflow, though 76 would create a safe but unusable contract\n', '\t\trequire(\n', '\t\t\tstakingTokenDecimals < 77,\n', '\t\t\t"StakedRewardsPool: staking token has far too many decimals"\n', '\t\t);\n', '\n', '\t\t_rewardsToken = rewardsToken;\n', '\n', '\t\t_stakingToken = stakingToken;\n', '\t\t_stakingTokenDecimals = stakingTokenDecimals;\n', '\t\t_stakingTokenBase = 10**stakingTokenDecimals;\n', '\t}\n', '\n', '\t/* Public Views */\n', '\n', '\tfunction balanceOf(address account) public view override returns (uint256) {\n', '\t\treturn _balances[account];\n', '\t}\n', '\n', '\tfunction earned(address account)\n', '\t\tpublic\n', '\t\tview\n', '\t\tvirtual\n', '\t\toverride\n', '\t\treturns (uint256);\n', '\n', '\tfunction rewardsToken() public view override returns (IERC20) {\n', '\t\treturn _rewardsToken;\n', '\t}\n', '\n', '\tfunction stakingToken() public view override returns (IERC20) {\n', '\t\treturn _stakingToken;\n', '\t}\n', '\n', '\tfunction stakingTokenDecimals() public view override returns (uint8) {\n', '\t\treturn _stakingTokenDecimals;\n', '\t}\n', '\n', '\tfunction totalSupply() public view override returns (uint256) {\n', '\t\treturn _totalSupply;\n', '\t}\n', '\n', '\t/* Public Mutators */\n', '\n', '\tfunction exit() public override nonReentrant {\n', '\t\t_exit();\n', '\t}\n', '\n', '\tfunction getReward() public override nonReentrant {\n', '\t\t_getReward();\n', '\t}\n', '\n', '\tfunction getRewardExact(uint256 amount) public override nonReentrant {\n', '\t\t_getRewardExact(amount);\n', '\t}\n', '\n', '\tfunction pause() public override onlyOwner {\n', '\t\t_pause();\n', '\t}\n', '\n', '\t// In the unlikely event that unsupported tokens are successfully sent to the\n', '\t// contract. This will also allow for removal of airdropped tokens.\n', '\tfunction recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) public override onlyOwner {\n', '\t\t_recoverUnsupportedERC20(token, to, amount);\n', '\t}\n', '\n', '\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\n', '\t\t_stakeFrom(_msgSender(), amount);\n', '\t}\n', '\n', '\tfunction unpause() public override onlyOwner {\n', '\t\t_unpause();\n', '\t}\n', '\n', '\tfunction updateReward() public override nonReentrant {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t}\n', '\n', '\tfunction updateRewardFor(address account) public override nonReentrant {\n', '\t\t_updateRewardFor(account);\n', '\t}\n', '\n', '\tfunction withdraw(uint256 amount) public override nonReentrant {\n', '\t\t_withdraw(amount);\n', '\t}\n', '\n', '\t/* Internal Views */\n', '\n', '\tfunction _getStakingTokenBase() internal view returns (uint256) {\n', '\t\treturn _stakingTokenBase;\n', '\t}\n', '\n', '\t/* Internal Mutators */\n', '\n', '\tfunction _exit() internal virtual {\n', '\t\t_withdraw(_balances[_msgSender()]);\n', '\t\t_getReward();\n', '\t}\n', '\n', '\tfunction _getReward() internal virtual {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\tuint256 reward = _rewards[_msgSender()];\n', '\t\tif (reward > 0) {\n', '\t\t\t_rewards[_msgSender()] = 0;\n', '\t\t\t_rewardsToken.safeTransfer(_msgSender(), reward);\n', '\t\t\temit RewardPaid(_msgSender(), reward);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _getRewardExact(uint256 amount) internal virtual {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\tuint256 reward = _rewards[_msgSender()];\n', '\t\trequire(\n', '\t\t\tamount <= reward,\n', '\t\t\t"StakedRewardsPool: can not redeem more rewards than you have earned"\n', '\t\t);\n', '\t\t_rewards[_msgSender()] = reward.sub(amount);\n', '\t\t_rewardsToken.safeTransfer(_msgSender(), amount);\n', '\t\temit RewardPaid(_msgSender(), amount);\n', '\t}\n', '\n', '\tfunction _recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) internal virtual {\n', '\t\trequire(\n', '\t\t\ttoken != _stakingToken,\n', '\t\t\t"StakedRewardsPool: cannot withdraw the staking token"\n', '\t\t);\n', '\t\trequire(\n', '\t\t\ttoken != _rewardsToken,\n', '\t\t\t"StakedRewardsPool: cannot withdraw the rewards token"\n', '\t\t);\n', '\t\ttoken.safeTransfer(to, amount);\n', '\t\temit Recovered(token, to, amount);\n', '\t}\n', '\n', '\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\n', '\t\trequire(\n', '\t\t\taccount != address(0),\n', '\t\t\t"StakedRewardsPool: cannot stake from the zero address"\n', '\t\t);\n', '\t\trequire(amount > 0, "StakedRewardsPool: cannot stake zero");\n', '\t\t_updateRewardFor(account);\n', '\t\t_totalSupply = _totalSupply.add(amount);\n', '\t\t_balances[account] = _balances[account].add(amount);\n', '\t\t_stakingToken.safeTransferFrom(account, address(this), amount);\n', '\t\temit Staked(account, amount);\n', '\t}\n', '\n', '\tfunction _updateRewardFor(address account) internal virtual;\n', '\n', '\tfunction _withdraw(uint256 amount) internal virtual {\n', '\t\trequire(amount > 0, "StakedRewardsPool: cannot withdraw zero");\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\t_totalSupply = _totalSupply.sub(amount);\n', '\t\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\n', '\t\t_stakingToken.safeTransfer(_msgSender(), amount);\n', '\t\temit Withdrawn(_msgSender(), amount);\n', '\t}\n', '}\n', '\n', '// File: contracts\\StakedRewardsPoolTimedRate.sol\n', '\n', '// Accuracy in block.timestamps is not needed.\n', '// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\n', '/* solhint-disable not-rely-on-time */\n', '\n', 'contract StakedRewardsPoolTimedRate is\n', '\tStakedRewardsPool,\n', '\tIStakedRewardsPoolTimedRate\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* Mutable Private State */\n', '\n', '\tuint256 private _accruedRewardPerToken;\n', '\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\n', '\tuint256 private _lastUpdateTime;\n', '\tuint256 private _periodEndTime;\n', '\tuint256 private _periodStartTime;\n', '\tuint256 private _rewardRate;\n', '\n', '\t/* Modifiers */\n', '\n', '\tmodifier whenStarted {\n', '\t\trequire(\n', '\t\t\thasStarted(),\n', '\t\t\t"StakedRewardsPoolTimedRate: current rewards distribution period has not yet begun"\n', '\t\t);\n', '\t\t_;\n', '\t}\n', '\n', '\t/* Constructor */\n', '\n', '\tconstructor(\n', '\t\tIERC20 rewardsToken,\n', '\t\tIERC20 stakingToken,\n', '\t\tuint8 stakingTokenDecimals,\n', '\t\tuint256 periodStartTime,\n', '\t\tuint256 periodEndTime\n', '\t) StakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\n', '\t\t_periodStartTime = periodStartTime;\n', '\t\t_periodEndTime = periodEndTime;\n', '\t}\n', '\n', '\t/* Public Views */\n', '\n', '\t// Represents the ratio of reward token to staking token accrued thus far,\n', '\t// multiplied by 10**stakingTokenDecimal in case of a fraction.\n', '\tfunction accruedRewardPerToken() public view override returns (uint256) {\n', '\t\tuint256 totalSupply = totalSupply();\n', '\t\tif (totalSupply == 0) {\n', '\t\t\treturn _accruedRewardPerToken;\n', '\t\t}\n', '\n', '\t\tuint256 lastUpdateTime = _lastUpdateTime;\n', '\t\tuint256 lastTimeApplicable = lastTimeRewardApplicable();\n', '\n', '\t\t// Allow staking at any time without earning undue rewards\n', '\t\t// The following is guaranteed if the next `if` is true:\n', '\t\t// lastUpdateTime == previous _periodEndTime || lastUpdateTime == 0\n', '\t\tif (_periodStartTime > lastUpdateTime) {\n', '\t\t\t// Prevent underflow\n', '\t\t\tif (_periodStartTime > lastTimeApplicable) {\n', '\t\t\t\treturn _accruedRewardPerToken;\n', '\t\t\t}\n', '\t\t\tlastUpdateTime = _periodStartTime;\n', '\t\t}\n', '\n', '\t\tuint256 dt = lastTimeApplicable.sub(lastUpdateTime);\n', '\t\tif (dt == 0) {\n', '\t\t\treturn _accruedRewardPerToken;\n', '\t\t}\n', '\n', '\t\tuint256 accruedReward = _rewardRate.mul(dt);\n', '\n', '\t\treturn\n', '\t\t\t_accruedRewardPerToken.add(\n', '\t\t\t\taccruedReward.mul(_getStakingTokenBase()).div(totalSupply)\n', '\t\t\t);\n', '\t}\n', '\n', '\tfunction earned(address account)\n', '\t\tpublic\n', '\t\tview\n', '\t\toverride(IStakedRewardsPool, StakedRewardsPool)\n', '\t\treturns (uint256)\n', '\t{\n', '\t\t// Divide by stakingTokenBase in accordance with accruedRewardPerToken()\n', '\t\treturn\n', '\t\t\tbalanceOf(account)\n', '\t\t\t\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\n', '\t\t\t\t.div(_getStakingTokenBase())\n', '\t\t\t\t.add(_rewards[account]);\n', '\t}\n', '\n', '\tfunction hasStarted() public view override returns (bool) {\n', '\t\treturn block.timestamp >= _periodStartTime;\n', '\t}\n', '\n', '\tfunction hasEnded() public view override returns (bool) {\n', '\t\treturn block.timestamp >= _periodEndTime;\n', '\t}\n', '\n', '\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\n', '\t\t// Returns 0 if we have never run a staking period.\n', "\t\t// Returns _periodEndTime if we have but we're not in a staking period.\n", '\t\tif (!hasStarted()) {\n', '\t\t\treturn _lastUpdateTime;\n', '\t\t}\n', '\t\treturn Math.min(block.timestamp, _periodEndTime);\n', '\t}\n', '\n', '\tfunction periodDuration() public view override returns (uint256) {\n', '\t\treturn _periodEndTime.sub(_periodStartTime);\n', '\t}\n', '\n', '\tfunction periodEndTime() public view override returns (uint256) {\n', '\t\treturn _periodEndTime;\n', '\t}\n', '\n', '\tfunction periodStartTime() public view override returns (uint256) {\n', '\t\treturn _periodStartTime;\n', '\t}\n', '\n', '\tfunction rewardRate() public view override returns (uint256) {\n', '\t\treturn _rewardRate;\n', '\t}\n', '\n', '\tfunction timeRemainingInPeriod()\n', '\t\tpublic\n', '\t\tview\n', '\t\toverride\n', '\t\twhenStarted\n', '\t\treturns (uint256)\n', '\t{\n', '\t\tif (hasEnded()) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn _periodEndTime.sub(block.timestamp);\n', '\t}\n', '\n', '\t/* Public Mutators */\n', '\n', '\tfunction addToRewardsAllocation(uint256 amount)\n', '\t\tpublic\n', '\t\toverride\n', '\t\tnonReentrant\n', '\t\tonlyOwner\n', '\t{\n', '\t\t_addToRewardsAllocation(amount);\n', '\t}\n', '\n', '\tfunction setNewPeriod(uint256 startTime, uint256 endTime)\n', '\t\tpublic\n', '\t\toverride\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(\n', '\t\t\t!hasStarted() || hasEnded(),\n', '\t\t\t"StakedRewardsPoolTimedRate: cannot change an ongoing staking period"\n', '\t\t);\n', '\t\trequire(\n', '\t\t\tendTime > startTime,\n', '\t\t\t"StakedRewardsPoolTimedRate: endTime must be greater than startTime"\n', '\t\t);\n', '\t\t// The lastTimeRewardApplicable() function would not allow rewards for a\n', '\t\t// past period that was never started.\n', '\t\trequire(\n', '\t\t\tstartTime > block.timestamp,\n', '\t\t\t"StakedRewardsPoolTimedRate: startTime must be greater than the current block time"\n', '\t\t);\n', '\t\t// Ensure that rewards are fully granted before changing the period.\n', '\t\t_updateAccrual();\n', '\n', '\t\tif (hasEnded()) {\n', '\t\t\t// Reset reward rate if this a brand new period (not changing one)\n', '\t\t\t// Note that you MUST addToRewardsAllocation again if you forgot to call\n', '\t\t\t// this after the previous period ended but before adding rewards.\n', '\t\t\t_rewardRate = 0;\n', '\t\t} else {\n', '\t\t\t// Update reward rate for new duration\n', '\t\t\tuint256 totalReward = _rewardRate.mul(periodDuration());\n', '\t\t\t_rewardRate = totalReward.div(endTime.sub(startTime));\n', '\t\t}\n', '\n', '\t\t_periodStartTime = startTime;\n', '\t\t_periodEndTime = endTime;\n', '\n', '\t\temit NewPeriodSet(startTime, endTime);\n', '\t}\n', '\n', '\t/* Internal Mutators */\n', '\n', "\t// Ensure that the amount param is equal to the amount you've added to the contract, otherwise the funds will run out before _periodEndTime.\n", '\t// If called during an ongoing staking period, the amount will be allocated\n', '\t// to the current staking period.\n', '\t// If called before or after a staking period, the amount will only be\n', '\t// applied to the next staking period.\n', '\tfunction _addToRewardsAllocation(uint256 amount) internal {\n', '\t\t// TODO Require that amount <= available rewards.\n', '\t\t_updateAccrual();\n', '\n', '\t\t// Update reward rate based on remaining time\n', '\t\tuint256 remainingTime;\n', '\t\tif (!hasStarted() || hasEnded()) {\n', '\t\t\tremainingTime = periodDuration();\n', '\t\t} else {\n', '\t\t\tremainingTime = timeRemainingInPeriod();\n', '\t\t}\n', '\n', '\t\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\n', '\n', '\t\temit RewardAdded(amount);\n', '\t}\n', '\n', '\tfunction _updateAccrual() internal {\n', '\t\t_accruedRewardPerToken = accruedRewardPerToken();\n', '\t\t_lastUpdateTime = lastTimeRewardApplicable();\n', '\t}\n', '\n', '\t// This logic is needed for any interaction that may manipulate rewards.\n', '\tfunction _updateRewardFor(address account) internal override {\n', '\t\t_updateAccrual();\n', '\t\t// Allocate due rewards.\n', '\t\t_rewards[account] = earned(account);\n', '\t\t// Remove ability to earn rewards on or before the current timestamp.\n', '\t\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\n', '\t}\n', '}']