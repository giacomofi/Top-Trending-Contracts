['pragma solidity ^0.5.17;\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(\n', '            _initializing || _isConstructor() || !_initialized,\n', '            "Initializable: contract is already initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', 'library Hasher {\n', '    function poseidon(uint256[] memory inputs)\n', '        public\n', '        pure\n', '        returns (uint256 result);\n', '}\n', '\n', 'contract MerkleTreeWithHistory is Initializable {\n', '    // The compiler does not reserve a storage slot for constant variables, the optimiser will replace every occurrence\n', '    // of the constant variables in the compiling process. Hence it is okay to initialize these variables here, even\n', '    // this is an upgradable contract\n', '    uint256\n', '        public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n', '    uint256\n', '        public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292;\n', '    uint32 public constant ROOT_HISTORY_SIZE = 100;\n', '\n', '    uint32 public levels;\n', '\n', '    // the following variables are made public for easier testing and debugging and\n', '    // are not supposed to be accessed in regular code\n', '    bytes32[] public filledSubtrees;\n', '    bytes32[] public zeros;\n', '    uint32 public currentRootIndex;\n', '    uint32 public nextIndex;\n', '\n', '    bytes32[ROOT_HISTORY_SIZE] public roots;\n', '\n', '    // this tree stores two roots\n', '    bytes32 public rewardCurrentRoot;\n', '    uint32 public rewardCurrentBlocknum;\n', '    bytes32 public rewardNextRoot;\n', '    uint32 public rewardNextBlocknum;\n', '\n', '    // rewardRoot|--------blockcount-------|nextRewardRoot|----|\n', '    uint32 public blockCount;\n', '\n', '    event RewardUpdate(uint32 updateAtBlock, bytes32 newRewardRoot);\n', '    event BlockCountUpdate(uint32 blockCount);\n', '\n', '    // DO NOT implement a constructor because this is an upgradable logic.\n', '    // Use the initialize function as a constructor.\n', '    constructor() public {}\n', '\n', '    /**\n', '     * @dev The initializer\n', '     */\n', '    function _initialize(uint32 _treeLevels, uint32 _blockCount)\n', '        internal\n', '        initializer\n', '    {\n', '        require(_treeLevels > 0, "_treeLevels should be greater than zero");\n', '        require(_treeLevels < 32, "_treeLevels should be less than 32");\n', '        levels = _treeLevels;\n', '\n', '        // new\n', '        blockCount = _blockCount;\n', '\n', '        bytes32 currentZero = bytes32(ZERO_VALUE);\n', '\n', '        zeros.push(currentZero);\n', '\n', '        filledSubtrees.push(currentZero);\n', '\n', '        for (uint32 i = 1; i < levels; i++) {\n', '            currentZero = hashLeftRight(currentZero, currentZero);\n', '            zeros.push(currentZero);\n', '            filledSubtrees.push(currentZero);\n', '        }\n', '\n', '        roots[0] = hashLeftRight(currentZero, currentZero);\n', '\n', '        //\n', '        rewardCurrentRoot = roots[0];\n', '        rewardCurrentBlocknum = uint32(block.number);\n', '        rewardNextRoot = roots[0];\n', '        rewardNextBlocknum = uint32(block.number);\n', '    }\n', '\n', '    function _setBlockCount(uint32 _blockCount) internal {\n', '        blockCount = _blockCount;\n', '        emit BlockCountUpdate(blockCount);\n', '    }\n', '\n', '    // poseidon\n', '    function hashLeftRight(bytes32 _left, bytes32 _right)\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        uint256[] memory inputs = new uint256[](2);\n', '        inputs[0] = uint256(_left);\n', '        inputs[1] = uint256(_right);\n', '        uint256 output = Hasher.poseidon(inputs);\n', '        return bytes32(output);\n', '    }\n', '\n', '    function _insert(bytes32 _leaf) internal returns (uint32 index) {\n', '        uint32 currentIndex = nextIndex;\n', '        require(\n', '            currentIndex != uint32(2)**levels,\n', '            "Merkle tree is full. No more leafs can be added"\n', '        );\n', '        nextIndex += 1;\n', '        bytes32 currentLevelHash = _leaf;\n', '        bytes32 left;\n', '        bytes32 right;\n', '\n', '        for (uint32 i = 0; i < levels; i++) {\n', '            if (currentIndex % 2 == 0) {\n', '                left = currentLevelHash;\n', '                right = zeros[i];\n', '\n', '                filledSubtrees[i] = currentLevelHash;\n', '            } else {\n', '                left = filledSubtrees[i];\n', '                right = currentLevelHash;\n', '            }\n', '\n', '            currentLevelHash = hashLeftRight(left, right);\n', '\n', '            currentIndex /= 2;\n', '        }\n', '\n', '        currentRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\n', '        roots[currentRootIndex] = currentLevelHash;\n', '\n', '        // update roots\n', '        if ((uint32(block.number) - rewardNextBlocknum) >= blockCount) {\n', '            rewardCurrentRoot = rewardNextRoot;\n', '            rewardNextRoot = currentLevelHash;\n', '            // current tree root\n', '            rewardCurrentBlocknum = rewardNextBlocknum;\n', '            rewardNextBlocknum = uint32(block.number);\n', '            emit RewardUpdate(rewardCurrentBlocknum, rewardCurrentRoot);\n', '        }\n', '\n', '        return nextIndex - 1;\n', '    }\n', '\n', '    /**\n', '      @dev Whether the root is present in the root history\n', '    */\n', '    function isKnownRoot(bytes32 _root) public view returns (bool) {\n', '        if (_root == 0) {\n', '            return false;\n', '        }\n', '        uint32 i = currentRootIndex;\n', '        do {\n', '            if (_root == roots[i]) {\n', '                return true;\n', '            }\n', '            if (i == 0) {\n', '                i = ROOT_HISTORY_SIZE;\n', '            }\n', '            i--;\n', '        } while (i != currentRootIndex);\n', '        return false;\n', '    }\n', '\n', '    //\n', '    function isRewardRoot(bytes32 _rroot) public view returns (bool) {\n', '        if (_rroot == 0) {\n', '            return false;\n', '        }\n', '        if (_rroot == rewardCurrentRoot) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '      @dev Returns the last root\n', '    */\n', '    function getLastRoot() public view returns (bytes32) {\n', '        return roots[currentRootIndex];\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract UpgradableReentrancyGuard {\n', '    // modified from _notEntered to _entered, to make lifer easier for upgrading contracts.\n', '    bool private _entered;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(!_entered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _entered = true;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _entered = false;\n', '    }\n', '}\n', '\n', 'interface WVerifier {\n', '    function verifyProof(bytes calldata _proof, uint256[7] calldata _input)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', 'interface RVerifier {\n', '    function verifyProof(bytes calldata _proof, uint256[6] calldata _input)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', 'contract BlenderCore is MerkleTreeWithHistory, UpgradableReentrancyGuard {\n', '    // Amount of deposit\n', '    uint256 public d_denomination;\n', '    // Amount of reward\n', '    uint256 public r_denomination;\n', '    // Withdraw nullifier list\n', '    mapping(bytes32 => bool) public nullifierHashes;\n', '    // Reward nullifier list\n', '    mapping(bytes32 => bool) public rewardNullifierHashes;\n', '    // Commitments\n', '    mapping(bytes32 => bool) public commitments;\n', '    // withdraw Verifier\n', '    WVerifier public withdrawVerifier;\n', '    // reward verifier\n', '    RVerifier public rewardVerifier;\n', '    // reward counter\n', '    uint32 public rewardCounter;\n', '    // operator can update snark verification key\n', '    // after the final trusted setup ceremony operator rights are supposed to be transferred to zero address\n', '    address public operator;\n', '    modifier onlyOperator {\n', '        require(\n', '            msg.sender == operator,\n', '            "Only operator can call this function."\n', '        );\n', '        _;\n', '    }\n', '    // relayer whitelisting\n', '    bool public relayerWhitelistingEnabled;\n', '    mapping(address => bool) public relayerWhitelist;\n', '    modifier onlyWhitelistedRelayer(address _relayer) {\n', '        if (relayerWhitelistingEnabled) {\n', '            require(relayerWhitelist[_relayer], "Not a whitelisted relayer");\n', '        }\n', '        _;\n', '    }\n', '\n', '    address public blnd;\n', '\n', '    uint256 public firstStageReward;\n', '    uint256 public secondStageReward;\n', '    uint256 public thirdStageReward;\n', '    uint256 public firstStageDepositors;\n', '    uint256 public secondStageDepositors;\n', '\n', '    event Deposit(\n', '        bytes32 indexed commitment,\n', '        uint32 leafIndex,\n', '        uint256 timestamp\n', '    );\n', '    event Reward(\n', '        address to,\n', '        bytes32 rewardNullifierHash,\n', '        address indexed relayer,\n', '        uint256 fee\n', '    );\n', '    event Withdrawal(\n', '        address to,\n', '        bytes32 withdrawNullifierHash,\n', '        bytes32 rewardNullifierHash,\n', '        address indexed relayer,\n', '        uint256 fee\n', '    );\n', '    event rewardUpdate(uint256 r_denomination, uint32 leafIndex);\n', '    event RelayerUpdate(address relayer, bool permitted);\n', '\n', '    // DO NOT implement a constructor because this is an upgradable logic.\n', '    // Use the initialize function as a constructor.\n', '    constructor() public {}\n', '\n', '    /**\n', '     * @dev The initializer\n', '     * @param _withdrawVerifier the address of SNARK verifier for this contract\n', '     * @param _rewardVerifier the address of SNARK verifier for this contract\n', '     * @param _d_denomination transfer amount for each deposit\n', '     * @param _merkleTreeHeight the height of deposits Merkle Tree\n', '     * @param _operator operator address (see operator comment above)\n', '     */\n', '    function _initialize(\n', '        WVerifier _withdrawVerifier, // withdraw verifier\n', '        RVerifier _rewardVerifier, // reward verifier\n', '        uint256 _d_denomination,\n', '        uint32 _merkleTreeHeight,\n', '        uint32 _blockCount,\n', '        address _operator,\n', '        address _blnd,\n', '        uint256 _firstStageReward,\n', '        uint256 _secondStageReward,\n', '        uint256 _thirdStageReward,\n', '        uint256 _firstStageDepositors,\n', '        uint256 _secondStageDepositors\n', '    ) internal initializer {\n', '        // call the initialize function of the parent contract (the constructor of the parent contract)\n', '        MerkleTreeWithHistory._initialize(_merkleTreeHeight, _blockCount);\n', '        // constructor logic\n', '        require(\n', '            _d_denomination > 0,\n', '            "Deposit denomination should be greater than 0"\n', '        );\n', '        firstStageReward = _firstStageReward;\n', '        secondStageReward = _secondStageReward;\n', '        thirdStageReward = _thirdStageReward;\n', '        firstStageDepositors = _firstStageDepositors;\n', '        secondStageDepositors = _secondStageDepositors;\n', '\n', '        withdrawVerifier = _withdrawVerifier;\n', '        rewardVerifier = _rewardVerifier;\n', '        operator = _operator;\n', '        d_denomination = _d_denomination;\n', '        r_denomination = firstStageReward;\n', '        blnd = _blnd;\n', '    }\n', '\n', '    // Should be unchanged\n', '    /**\n', '      @dev Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.\n', '      @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\n', '    */\n', '    function deposit(bytes32 _commitment) external payable nonReentrant {\n', '        require(!commitments[_commitment], "The commitment has been submitted");\n', '        uint32 insertedIndex = _insert(_commitment);\n', '        commitments[_commitment] = true;\n', '        _processDeposit();\n', '        emit Deposit(_commitment, insertedIndex, block.timestamp);\n', '    }\n', '\n', '    /** @dev this function is defined in a child contract */\n', '    function _processDeposit() internal;\n', '\n', '    /**\n', '      @dev Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\n', '      `input` array consists of:\n', '        - merkle root of all deposits in the contract\n', '        - hash of unique deposit nullifier to prevent double spends\n', '        - the recipient of funds\n', '        - optional fee that goes to the transaction sender (usually a relay)\n', '    */\n', '    function withdraw(\n', '        bytes calldata _proof,\n', '        bytes32 _root,\n', '        bytes32 _wdrHash,\n', '        bytes32 _rwdHash,\n', '        address payable _recipient,\n', '        address payable _relayer,\n', '        uint256 _fee,\n', '        uint256 _refund\n', '    ) external payable nonReentrant onlyWhitelistedRelayer(_relayer) {\n', '        require(_fee <= d_denomination, "Fee exceeds transfer value");\n', '        require(\n', '            !nullifierHashes[_wdrHash],\n', '            "The withdraw note has been already spent for withdrawing"\n', '        );\n', '        require(\n', '            !nullifierHashes[_rwdHash],\n', '            "The reward note has been already spent for withdrawing"\n', '        );\n', '        require(isKnownRoot(_root), "Cannot find your merkle root");\n', '        // Make sure to use a recent one\n', '        require(\n', '            withdrawVerifier.verifyProof(\n', '                _proof,\n', '                [\n', '                    uint256(_root),\n', '                    uint256(_wdrHash),\n', '                    uint256(_rwdHash),\n', '                    uint256(_recipient),\n', '                    uint256(_relayer),\n', '                    _fee,\n', '                    _refund\n', '                ]\n', '            ),\n', '            "Invalid withdraw proof"\n', '        );\n', '        nullifierHashes[_wdrHash] = true;\n', '        //\n', '        nullifierHashes[_rwdHash] = true;\n', '        //\n', '        rewardNullifierHashes[_rwdHash] = true;\n', '        // cannot obtain reward using this hash anymore\n', '        _processWithdraw(_recipient, _relayer, _fee, _refund);\n', '        emit Withdrawal(_recipient, _wdrHash, _rwdHash, _relayer, _fee);\n', '    }\n', '\n', '    function reward(\n', '        bytes calldata _rproof,\n', '        bytes32 _rroot,\n', '        bytes32 _rwdHash,\n', '        address payable _recipient,\n', '        address payable _relayer,\n', '        uint256 _fee,\n', '        uint256 _refund\n', '    ) external payable nonReentrant onlyWhitelistedRelayer(_relayer) {\n', '        require(_fee <= r_denomination, "Fee exceeds transfer value");\n', '        require(\n', '            !rewardNullifierHashes[_rwdHash],\n', '            "The reward note has been already redeemed"\n', '        );\n', '        require(isRewardRoot(_rroot), "Cannot find your merkle root");\n', '        // Make sure to use a recent one\n', '        require(\n', '            rewardVerifier.verifyProof(\n', '                _rproof,\n', '                [\n', '                    uint256(_rroot),\n', '                    uint256(_rwdHash),\n', '                    uint256(_recipient),\n', '                    uint256(_relayer),\n', '                    _fee,\n', '                    _refund\n', '                ]\n', '            ),\n', '            "Invalid reward proof"\n', '        );\n', '        // update reward at certain checkpoints\n', '        if (rewardCounter == firstStageDepositors) {\n', '            r_denomination = secondStageReward;\n', '            emit rewardUpdate(r_denomination, rewardCounter);\n', '        }\n', '\n', '        if (rewardCounter == secondStageDepositors) {\n', '            r_denomination = thirdStageReward;\n', '            emit rewardUpdate(r_denomination, rewardCounter);\n', '        }\n', '        // cannot obtain reward using this hash anymore\n', '        rewardNullifierHashes[_rwdHash] = true;\n', '        _processReward(_recipient, _relayer, _fee, _refund);\n', '        rewardCounter = rewardCounter + 1;\n', '        emit Reward(_recipient, _rwdHash, _relayer, _fee);\n', '    }\n', '\n', '    /** @dev this function is defined in a child contract */\n', '    function _processWithdraw(\n', '        address payable _recipient,\n', '        address payable _relayer,\n', '        uint256 _fee,\n', '        uint256 _refund\n', '    ) internal;\n', '\n', '    function _processReward(\n', '        address payable _recipient,\n', '        address payable _relayer,\n', '        uint256 _fee,\n', '        uint256 _refund\n', '    ) internal {\n', '        require(\n', '            msg.value == _refund,\n', '            "Incorrect refund amount received by the contract"\n', '        );\n', '        SafeERC20.safeTransfer(IERC20(blnd), _recipient, r_denomination - _fee);\n', '        if (_fee > 0) {\n', '            SafeERC20.safeTransfer(IERC20(blnd), _relayer, _fee);\n', '        }\n', '        // to prevent attacker from burning relayer eth in fee\n', '        if (_refund > 0) {\n', '            (bool success, ) = _recipient.call.value(_refund)("");\n', '            if (!success) {\n', '                _relayer.transfer(_refund);\n', '            }\n', '        }\n', '    }\n', '\n', '    /** @dev whether a note is already spent */\n', '    // TODO blnd may need to verify two nullifier hashes is needed\n', '    function isSpent(bytes32 _wdrHash) public view returns (bool) {\n', '        return nullifierHashes[_wdrHash];\n', '    }\n', '\n', '    function isRedeem(bytes32 _rwdHash) public view returns (bool) {\n', '        return rewardNullifierHashes[_rwdHash];\n', '    }\n', '\n', '    /** @dev whether an array of notes is already spent */\n', '    function isSpentArray(bytes32[] calldata _nullifierHashes)\n', '        external\n', '        view\n', '        returns (bool[] memory spent)\n', '    {\n', '        spent = new bool[](_nullifierHashes.length);\n', '        for (uint256 i = 0; i < _nullifierHashes.length; i++) {\n', '            if (isSpent(_nullifierHashes[i])) {\n', '                spent[i] = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    /** @dev whether an array of notes is already spent */\n', '    function isRedeemArray(bytes32[] calldata _nullifierHashes)\n', '        external\n', '        view\n', '        returns (bool[] memory redeem)\n', '    {\n', '        redeem = new bool[](_nullifierHashes.length);\n', '        for (uint256 i = 0; i < _nullifierHashes.length; i++) {\n', '            if (isRedeem(_nullifierHashes[i])) {\n', '                redeem[i] = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '      @dev allow operator to update SNARK verification keys. This is needed to update keys after the final trusted setup ceremony is held.\n', '      After that operator rights are supposed to be transferred to zero address\n', '    */\n', '    // update withdraw verifier\n', '    function updateWithdrawVerifier(address _newVerifier)\n', '        external\n', '        onlyOperator\n', '    {\n', '        withdrawVerifier = WVerifier(_newVerifier);\n', '    }\n', '\n', '    // update reward verifier\n', '    function updateRewardVerifier(address _newVerifier) external onlyOperator {\n', '        rewardVerifier = RVerifier(_newVerifier);\n', '    }\n', '\n', '    /** @dev operator can change his address */\n', '    function changeOperator(address _newOperator) external onlyOperator {\n', '        operator = _newOperator;\n', '    }\n', '\n', '    /**\n', '     * @dev operator can enable relayer whitelisting\n', '     */\n', '    function enableRelayerWhitelisting() external onlyOperator nonReentrant {\n', '        relayerWhitelistingEnabled = true;\n', '    }\n', '\n', '    /**\n', '     * @dev operator can disable relayer whitelisting\n', '     */\n', '    function disableRelayerWhitelisting() external onlyOperator nonReentrant {\n', '        relayerWhitelistingEnabled = false;\n', '    }\n', '\n', '    /**\n', '     * @dev operator can add a relayer to the whitelist.\n', '     */\n', '    function addRelayer(address _relayer) external onlyOperator nonReentrant {\n', '        relayerWhitelist[_relayer] = true;\n', '        emit RelayerUpdate(_relayer, relayerWhitelist[_relayer]);\n', '    }\n', '\n', '    /**\n', '     * @dev operator can remove a relayer from the whitelist.\n', '     */\n', '    function removeRelayer(address _relayer)\n', '        external\n', '        onlyOperator\n', '        nonReentrant\n', '    {\n', '        relayerWhitelist[_relayer] = false;\n', '        emit RelayerUpdate(_relayer, relayerWhitelist[_relayer]);\n', '    }\n', '\n', '    /**\n', '     * @dev operator can change the number of blocks between the current and next reward roots\n', '     */\n', '    function setBlockCount(uint32 _blockCount)\n', '        external\n', '        onlyOperator\n', '        nonReentrant\n', '    {\n', '        _setBlockCount(_blockCount);\n', '    }\n', '}\n', '\n', 'interface AToken {\n', '    function balanceOf(address _user) external view returns (uint256);\n', '\n', '    function redeem(uint256 _amount) external;\n', '}\n', '\n', 'interface ALendingPool {\n', '    function deposit(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint16 _referralCode\n', '    ) external payable;\n', '}\n', '\n', 'interface ALendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', 'contract AETHBlender is Initializable, BlenderCore {\n', '    ALendingPoolAddressesProvider public lendingPoolAddressesProvider;\n', '    AToken public aToken;\n', '    address public reserve;\n', '    uint256 public depositors;\n', '\n', '    // DO NOT implement a constructor because this is an upgradable logic.\n', '    // Use the initialize function as a constructor.\n', '    constructor() public {}\n', '\n', '    function initialize(\n', '        WVerifier _withdrawVerifier,\n', '        RVerifier _rewardVerifier,\n', '        uint256 _d_denomination,\n', '        uint32 _merkleTreeHeight,\n', '        uint32 _blockCount,\n', '        address _operator,\n', '        address _blnd,\n', '        address _aToken,\n', '        address _reserve,\n', '        uint256 _firstStageReward,\n', '        uint256 _secondStageReward,\n', '        uint256 _thirdStageReward,\n', '        uint256 _firstStageDepositors,\n', '        uint256 _secondStageDepositors\n', '    ) public {\n', '        // call the initialize function of the parent contract (the constructor of the parent contract)\n', '        BlenderCore._initialize(\n', '            _withdrawVerifier,\n', '            _rewardVerifier,\n', '            _d_denomination,\n', '            _merkleTreeHeight,\n', '            _blockCount,\n', '            _operator,\n', '            _blnd,\n', '            _firstStageReward,\n', '            _secondStageReward,\n', '            _thirdStageReward,\n', '            _firstStageDepositors,\n', '            _secondStageDepositors\n', '        );\n', '        // constructor logic\n', '        lendingPoolAddressesProvider = ALendingPoolAddressesProvider(\n', '            0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n', '        );\n', '        aToken = AToken(_aToken);\n', '        reserve = _reserve;\n', '    }\n', '\n', '    function _processDeposit() internal {\n', '        require(\n', '            msg.value == d_denomination,\n', '            "Please send `mixDenomination` ETH along with transaction"\n', '        );\n', '        // Deposit all the balance\n', '        uint256 balance = address(this).balance;\n', '        ALendingPool(lendingPoolAddressesProvider.getLendingPool())\n', '            .deposit\n', '            .value(balance)(reserve, balance, 0);\n', '        depositors++;\n', '    }\n', '\n', '    function _processWithdraw(\n', '        address payable _recipient,\n', '        address payable _relayer,\n', '        uint256 _fee,\n', '        uint256 _refund\n', '    ) internal {\n', '        require(\n', '            msg.value == 0,\n', '            "Message value is supposed to be zero for ETH instance"\n', '        );\n', '        require(\n', '            _refund == 0,\n', '            "Refund value is supposed to be zero for ETH instance"\n', '        );\n', '        require(depositors > 0, "Number of depositors must be positive");\n', '\n', '        uint256 beforeBalance = address(this).balance;\n', '        uint256 aBalance = aToken.balanceOf(address(this));\n', '        uint256 redeemAmount = SafeMath.div(aBalance, depositors);\n', '        aToken.redeem(redeemAmount);\n', '        uint256 afterBalance = address(this).balance;\n', '        uint256 redeemedAmount = SafeMath.sub(afterBalance, beforeBalance);\n', '\n', '        (bool success, ) = _recipient.call.value(redeemedAmount - _fee)("");\n', '        require(success, "payment to _recipient did not go thru");\n', '        if (_fee > 0) {\n', '            (success, ) = _relayer.call.value(_fee)("");\n', '            require(success, "payment to _relayer did not go thru");\n', '        }\n', '        depositors--;\n', '    }\n', '\n', '    function() external payable {}\n', '}']