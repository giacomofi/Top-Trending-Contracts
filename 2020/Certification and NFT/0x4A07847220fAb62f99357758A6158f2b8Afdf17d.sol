['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '//pragma solidity >=0.4.23;\n', '\n', 'interface DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) external view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig), "ds-auth-unauthorized");\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}\n', '\n', "/// note.sol -- the `note' modifier, for logging calls as events\n", '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '//pragma solidity >=0.4.23;\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint256           wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '        uint256 wad;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '            wad := callvalue()\n', '        }\n', '\n', '        _;\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n', '    }\n', '}\n', '\n', '\n', "// proxy.sol - execute actions atomically through the proxy's identity\n", '\n', '// Copyright (C) 2017  DappHub, LLC\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '//pragma solidity >=0.5.0 <0.6.0;\n', '\n', '//import "ds-auth/auth.sol";\n', '//import "ds-note/note.sol";\n', '\n', '// DSProxy\n', '// Allows code execution using a persistant identity This can be very\n', '// useful to execute a sequence of atomic actions. Since the owner of\n', '// the proxy can be changed, this allows for dynamic ownership models\n', '// i.e. a multisig\n', 'contract DSProxy is DSAuth, DSNote {\n', '    DSProxyCache public cache;  // global cache for contracts\n', '\n', '    constructor(address _cacheAddr) public {\n', '        setCache(_cacheAddr);\n', '    }\n', '\n', '    function() external payable {\n', '    }\n', '\n', '    // use the proxy to execute calldata _data on contract _code\n', '    function execute(bytes memory _code, bytes memory _data)\n', '        public\n', '        payable\n', '        returns (address target, bytes memory response)\n', '    {\n', '        target = cache.read(_code);\n', '        if (target == address(0)) {\n', '            // deploy contract & store its address in cache\n', '            target = cache.write(_code);\n', '        }\n', '\n', '        response = execute(target, _data);\n', '    }\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        auth\n', '        note\n', '        payable\n', '        returns (bytes memory response)\n', '    {\n', '        require(_target != address(0), "ds-proxy-target-address-required");\n', '\n', '        // call contract in current context\n', '        assembly {\n', '            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\n', '            let size := returndatasize\n', '\n', '            response := mload(0x40)\n', '            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '            mstore(response, size)\n', '            returndatacopy(add(response, 0x20), 0, size)\n', '\n', '            switch iszero(succeeded)\n', '            case 1 {\n', '                // throw if delegatecall failed\n', '                revert(add(response, 0x20), size)\n', '            }\n', '        }\n', '    }\n', '\n', '    //set new cache\n', '    function setCache(address _cacheAddr)\n', '        public\n', '        auth\n', '        note\n', '        returns (bool)\n', '    {\n', '        require(_cacheAddr != address(0), "ds-proxy-cache-address-required");\n', '        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n', '        return true;\n', '    }\n', '}\n', '\n', '// DSProxyFactory\n', '// This factory deploys new proxy instances through build()\n', '// Deployed proxy addresses are logged\n', 'contract DSProxyFactory {\n', '    event Created(address indexed sender, address indexed owner, address proxy, address cache);\n', '    mapping(address=>bool) public isProxy;\n', '    DSProxyCache public cache;\n', '\n', '    constructor() public {\n', '        cache = new DSProxyCache();\n', '    }\n', '\n', '    // deploys a new proxy instance\n', '    // sets owner of proxy to caller\n', '    function build() public returns (address payable proxy) {\n', '        proxy = build(msg.sender);\n', '    }\n', '\n', '    // deploys a new proxy instance\n', '    // sets custom owner of proxy\n', '    function build(address owner) public returns (address payable proxy) {\n', '        proxy = address(new DSProxy(address(cache)));\n', '        emit Created(msg.sender, owner, address(proxy), address(cache));\n', '        DSProxy(proxy).setOwner(owner);\n', '        isProxy[proxy] = true;\n', '    }\n', '}\n', '\n', '// DSProxyCache\n', '// This global cache stores addresses of contracts previously deployed\n', '// by a proxy. This saves gas from repeat deployment of the same\n', '// contracts and eliminates blockchain bloat.\n', '\n', '// By default, all proxies deployed from the same factory store\n', '// contracts in the same cache. The cache a proxy instance uses can be\n', "// changed.  The cache uses the sha3 hash of a contract's bytecode to\n", '// lookup the address\n', 'contract DSProxyCache {\n', '    mapping(bytes32 => address) cache;\n', '\n', '    function read(bytes memory _code) public view returns (address) {\n', '        bytes32 hash = keccak256(_code);\n', '        return cache[hash];\n', '    }\n', '\n', '    function write(bytes memory _code) public returns (address target) {\n', '        assembly {\n', '            target := create(0, add(_code, 0x20), mload(_code))\n', '            switch iszero(extcodesize(target))\n', '            case 1 {\n', '                // throw if contract failed to deploy\n', '                revert(0, 0)\n', '            }\n', '        }\n', '        bytes32 hash = keccak256(_code);\n', '        cache[hash] = target;\n', '    }\n', '}\n', '\n', '//pragma solidity >=0.5.0;\n', '//\n', "//import 'ds-proxy/proxy.sol';\n", '\n', '// This Registry deploys new proxy instances through DSProxyFactory.build(address) and keeps a registry of owner => proxy\n', 'contract ProxyRegistry {\n', '    mapping(address => DSProxy) public proxies;\n', '    DSProxyFactory factory;\n', '\n', '    constructor(address factory_) public {\n', '        factory = DSProxyFactory(factory_);\n', '    }\n', '\n', '    // deploys a new proxy instance\n', '    // sets owner of proxy to caller\n', '    function build() public returns (address payable proxy) {\n', '        proxy = build(msg.sender);\n', '    }\n', '\n', '    // deploys a new proxy instance\n', '    // sets custom owner of proxy\n', '    function build(address owner) public returns (address payable proxy) {\n', '        require(proxies[owner] == DSProxy(0) || proxies[owner].owner() != owner); // Not allow new proxy if the user already has one and remains being the owner\n', '        proxy = factory.build(owner);\n', '        proxies[owner] = DSProxy(proxy);\n', '    }\n', '}']