['pragma solidity ^0.5.17;\n', '\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract    ERC20\n', '{\n', '    mapping(address => uint256)                         balances;\n', '    mapping(address => mapping (address => uint256))    allowances;\n', '\n', '    uint    public  decimals    = 2;\n', '    uint256 public  totalSupply = 100000000 * 10**decimals;        // 800 Millions (18 decimals)\n', '\n', '\n', '    string  public  constant    name       = "JBTR Token";\n', '    string  public  constant    symbol     = "JBTR";\n', '\n', '    event Transfer(address indexed _from,  address indexed _to,      uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //--------------------------------------------------------------------------\n', '    constructor()   public \n', '    {\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function        transfer(address toAddr, uint256 amountInWei)  public   returns (bool)\n', '    {\n', '        uint256         baseAmount;\n', '        uint256         finalAmount;\n', '\n', '        require(toAddr!=address(0x0) && toAddr!=msg.sender \n', '                                     && amountInWei!=0\n', '                                     && amountInWei<=balances[msg.sender]);\n', '        //-----\n', '\n', '        baseAmount  = balances[msg.sender];\n', '        finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        balances[msg.sender] = finalAmount;\n', '\n', '        //-----\n', '       \n', '        baseAmount  = balances[toAddr];\n', '        finalAmount = baseAmount + amountInWei;\n', '\n', '        assert(finalAmount >= baseAmount);\n', '        \n', '        balances[toAddr] = finalAmount;\n', '        \n', '        emit Transfer(msg.sender, toAddr, amountInWei);\n', '\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \n', '    {\n', '        require(amountInWei!=0                                   &&\n', '                balances[fromAddr]               >= amountInWei  &&\n', '                allowances[fromAddr][msg.sender] >= amountInWei);\n', '\n', '                //-----\n', '\n', '        uint256 baseAmount  = balances[fromAddr];\n', '        uint256 finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        balances[fromAddr] = finalAmount;\n', '        \n', '                //-----\n', '                \n', '        baseAmount  = balances[toAddr];\n', '        finalAmount = baseAmount + amountInWei;\n', '        \n', '        assert(finalAmount >= baseAmount);\n', '        \n', '        balances[toAddr] = finalAmount;\n', '        \n', '                //-----\n', '                \n', '        baseAmount  = allowances[fromAddr][msg.sender];\n', '        finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        allowances[fromAddr][msg.sender] = finalAmount;\n', '        \n', '        //-----           \n', '        \n', '        emit Transfer(fromAddr, toAddr, amountInWei);\n', '        return true;\n', '    }\n', '     //--------------------------------------------------------------------------\n', '    function balanceOf(address _owner) public view returns (uint256 balance) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _value) public returns (bool success) \n', '    {\n', '        allowances[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \n', '    {\n', '        return allowances[_owner][_spender];\n', '    }\n', '}\n', '/////////////////////////////////////////////////////////////////////////////////////////\n', 'contract    Airdropper  is ERC20\n', '{\n', '    event onBulkTransfer(address sender, uint256 transactionCount, address tokenAddress);\n', '    \n', '    function    bulkTransfer(address tokenAddress,  address[] memory toWallets, \n', '                                                    uint256[] memory amountsInBaseUnit)\n', '                                                    public\n', '    {\n', '        uint256     i;\n', '        uint256     n;\n', '        \n', '        require(toWallets.length==amountsInBaseUnit.length);\n', '        \n', '        n = toWallets.length;\n', '        \n', '        for (i=0; i<n; i++)\n', '        {\n', '            if (toWallets[i]==address(0x0) || amountsInBaseUnit[i]==0)    \n', '            {\n', '                continue;\n', '            }\n', '            \n', '            ERC20(tokenAddress).transfer(toWallets[i], amountsInBaseUnit[i]);\n', '        }\n', '        \n', '        emit onBulkTransfer(msg.sender, n, tokenAddress);\n', '    }\n', '}']