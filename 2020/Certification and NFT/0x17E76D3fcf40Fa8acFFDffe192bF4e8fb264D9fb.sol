['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-30\n', '*/\n', '\n', '// File: nexusmutual-contracts/contracts/external/openzeppelin-solidity/math/SafeMath.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: nexusmutual-contracts/contracts/NXMDSValue.sol\n', '\n', '/* Copyright (C) 2020 NexusMutual.io\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', 'contract Aggregator {\n', '    function latestAnswer() public view returns (int);\n', '}\n', '\n', '\n', 'contract NXMDSValue {\n', '\n', '    using SafeMath for uint;\n', '\n', '    /// @dev Get DAI-ETH feed from Chainlink and convert it to ETH-DAI(in bytes32).\n', '    /// @return Return ETH-DAI rate in wei.\n', '    function read() public view returns (bytes32)\n', '    {\n', '\n', '        // Instance to get DAI-ETH feed from chainlink.\n', '        Aggregator aggregator = Aggregator(0x773616E4d11A78F511299002da57A0a94577F1f4);\n', '        int rate = aggregator.latestAnswer();\n', '\n', '        // Chainlink returns an int256. Ensure the value is always positive.\n', '        require(rate > 0, "Rate should be a positive integer");\n', '\n', '        // Reciprocating the obtained value because DSValue requires the value to be in format (ETH-DAI).\n', '        // Convert value to bytes32 to follow the DSValue format.\n', '        return bytes32(uint(10**36).div(uint(rate)));\n', '    }\n', '}']