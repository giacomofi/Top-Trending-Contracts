['// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', '// pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/IUniTradeStaker.sol\n', '\n', '// pragma solidity ^0.6.6;\n', '\n', 'interface IUniTradeStaker\n', '{\n', '    function deposit() external payable;\n', '}\n', '\n', '\n', '// Root file: contracts/UniTradeStaker01.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '// import "@uniswap/lib/contracts/libraries/TransferHelper.sol";\n', '// import "contracts/IUniTradeStaker.sol";\n', '\n', 'contract UniTradeStaker01 is IUniTradeStaker, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    address immutable unitrade;\n', '\n', '    uint256 constant DEFAULT_STAKE_PERIOD = 30 days;\n', '    uint256 public totalStake;\n', '    uint256 totalWeight;\n', '    uint256 public totalEthReceived;\n', '    mapping(address => uint256) public staked;\n', '    mapping(address => uint256) public timelock;\n', '    mapping(address => uint256) weighted;\n', '    mapping(address => uint256) accumulated;\n', '\n', '    event Stake(address indexed staker, uint256 unitradeIn);\n', '    event Withdraw(address indexed staker, uint256 unitradeOut, uint256 reward);\n', '    event Deposit(address indexed depositor, uint256 amount);\n', '\n', '    constructor(address _unitrade) public {\n', '        unitrade = _unitrade;\n', '    }\n', '\n', '    function stake(uint256 unitradeIn) nonReentrant public {\n', '        require(unitradeIn > 0, "Nothing to stake");\n', '\n', '        _stake(unitradeIn);\n', '        timelock[msg.sender] = block.timestamp.add(DEFAULT_STAKE_PERIOD);\n', '\n', '        TransferHelper.safeTransferFrom(\n', '            unitrade,\n', '            msg.sender,\n', '            address(this),\n', '            unitradeIn\n', '        );\n', '    }\n', '\n', '    function withdraw() nonReentrant public returns (uint256 unitradeOut, uint256 reward) {\n', '        require(block.timestamp >= timelock[msg.sender], "Stake is locked");\n', '\n', '        (unitradeOut, reward) = _applyReward();\n', '        emit Withdraw(msg.sender, unitradeOut, reward);\n', '\n', '        timelock[msg.sender] = 0;\n', '\n', '        TransferHelper.safeTransfer(unitrade, msg.sender, unitradeOut);\n', '        if (reward > 0) {\n', '            TransferHelper.safeTransferETH(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function payout() nonReentrant public returns (uint256 reward) {\n', '        (uint256 unitradeOut, uint256 _reward) = _applyReward();\n', '        emit Withdraw(msg.sender, unitradeOut, _reward);\n', '        reward = _reward;\n', '\n', '        require(reward > 0, "Nothing to pay out");\n', '        TransferHelper.safeTransferETH(msg.sender, reward);\n', '\n', '        // restake after withdrawal\n', '        _stake(unitradeOut);\n', '        timelock[msg.sender] = block.timestamp.add(DEFAULT_STAKE_PERIOD);\n', '    }\n', '\n', '    function deposit() nonReentrant public override payable {\n', '        require(msg.value > 0, "Nothing to deposit");\n', '        require(totalStake > 0, "Nothing staked");\n', '\n', '        totalEthReceived = totalEthReceived.add(msg.value);\n', '\n', '        emit Deposit(msg.sender, msg.value);\n', '\n', '        _distribute(msg.value, totalStake);\n', '    }\n', '\n', '    function _stake(uint256 unitradeIn) private {\n', '        uint256 addBack;\n', '        if (staked[msg.sender] > 0) {\n', '            (uint256 unitradeOut, uint256 reward) = _applyReward();\n', '            addBack = unitradeOut;\n', '            accumulated[msg.sender] = reward;\n', '            staked[msg.sender] = unitradeOut;\n', '        }\n', '\n', '        staked[msg.sender] = staked[msg.sender].add(unitradeIn);\n', '        weighted[msg.sender] = totalWeight;\n', '        totalStake = totalStake.add(unitradeIn);\n', '\n', '        if (addBack > 0) {\n', '            totalStake = totalStake.add(addBack);\n', '        }\n', '\n', '        emit Stake(msg.sender, unitradeIn);\n', '    }\n', '\n', '    function _applyReward() private returns (uint256 unitradeOut, uint256 reward) {\n', '        require(staked[msg.sender] > 0, "Nothing staked");\n', '\n', '        unitradeOut = staked[msg.sender];\n', '        reward = unitradeOut\n', '            .mul(totalWeight.sub(weighted[msg.sender]))\n', '            .div(10**18)\n', '            .add(accumulated[msg.sender]);\n', '        totalStake = totalStake.sub(unitradeOut);\n', '        accumulated[msg.sender] = 0;\n', '        staked[msg.sender] = 0;\n', '    }\n', '\n', '    function _distribute(uint256 _value, uint256 _totalStake) private {\n', '        totalWeight = totalWeight.add(_value.mul(10**18).div(_totalStake));\n', '    }\n', '}']