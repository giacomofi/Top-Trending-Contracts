['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract KperNetworkJobRegistry {\n', '    /// @notice governance address for the governance contract\n', '    address public governance;\n', '    address public pendingGovernance;\n', '    \n', '    struct _job {\n', '        uint _id;\n', '        address _address;\n', '        string _name;\n', '        string _ipfs;\n', '        string _docs;\n', '        uint _added;\n', '    }\n', '    \n', '    mapping(address => bool) public jobAdded;\n', '    mapping(address => _job) public jobData;\n', '    address[] public jobList;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '    \n', '    uint public length;\n', '    \n', '    function jobs() external view returns (address[] memory) {\n', '        return jobList;\n', '    }\n', '    \n', '    function job(address _address) external view returns (uint, address, string memory, string memory, string memory, uint) {\n', '        _job memory __job = jobData[_address];\n', '        return (__job._id, __job._address, __job._name, __job._ipfs, __job._docs, __job._added);\n', '    }\n', '    \n', '    function set(address _address, string calldata _name, string calldata _ipfs, string calldata _docs) external {\n', '        require(msg.sender == governance, "KperNetworkJobRegistry::add: !gov");\n', '        require(jobAdded[_address], "KperNetworkJobRegistry::add: no job");\n', '        _job storage __job = jobData[_address];\n', '        \n', '        __job._name = _name;\n', '        __job._ipfs = _ipfs;\n', '        __job._docs = _docs;\n', '        \n', '    }\n', '    \n', '    function add(address _address, string calldata _name, string calldata _ipfs, string calldata _docs) external {\n', '        require(msg.sender == governance, "KperNetworkJobRegistry::add: !gov");\n', '        require(!jobAdded[_address], "KperNetworkJobRegistry::add: job exists");\n', '        jobAdded[_address] = true;\n', '        jobList.push(_address);\n', '        jobData[_address] = _job(length++, _address, _name, _ipfs, _docs, now);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change governance (for future upgradability)\n', '     * @param _governance new governance address to set\n', '     */\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "setGovernance: !gov");\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "acceptGovernance: !pendingGov");\n', '        governance = pendingGovernance;\n', '    }\n', '}']