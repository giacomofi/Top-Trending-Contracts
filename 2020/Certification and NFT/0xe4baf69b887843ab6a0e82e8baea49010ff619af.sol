['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n']
['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '// Importing libraries\n', 'import "./Ownable.sol";\n', 'import "./ERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', '/**\n', ' * @title Yield Contract\n', ' * @notice Contract to create yield contracts for users\n', ' */\n', '\n', '/**\n', ' * TO NOTE\n', ' * @notice Store collateral and provide interest MXX or burn MXX\n', ' * @notice Interest (contractFee, penaltyFee etc) is always represented 10 power 6 times the actual value\n', ' * @notice Note that only 4 decimal precision is allowed for interest\n', ' * @notice If interest is 5%, then value to input is 0.05 * 10 pow 6 = 5000\n', ' * @notice mFactor or mintFactor is represented 10 power 18 times the actual value.\n', ' * @notice If value of 1 ETH is 380 USD, then mFactor of ETH is (380 * (10 power 18))\n', ' * @notice Collateral should always be in its lowest denomination (based on the coin or Token)\n', ' * @notice If collateral is 6 USDT, then value is 6 * (10 power 6) as USDT supports 6 decimals\n', ' * @notice startTime and endTime are represented in Unix time\n', ' * @notice tenure for contract is represented in days (90, 180, 270) etc\n', ' * @notice mxxToBeMinted or mxxToBeMinted is always in its lowest denomination (8 decimals)\n', ' * @notice For e.g if mxxToBeMinted = 6 MXX, then actual value is 6 * (10 power 8)\n', ' */\n', '\n', 'contract YieldContract is Ownable, ReentrancyGuard {\n', '    // Using SafeERC20 for ERC20\n', '    using SafeERC20 for ERC20;\n', '\n', '    // Using SafeMath Library to prevent integer overflow\n', '    using SafeMath for uint256;\n', '\n', '    // Using Address library for ERC20 contract checks\n', '    using Address for address;\n', '\n', '    /**\n', '     * DEFINING VARIABLES\n', '     */\n', '\n', '    /**\n', '     * @dev - Array to store valid ERC20 addresses\n', '     */\n', '    address[] public erc20List;\n', '\n', '    /**\n', '     * @dev - A struct to store ERC20 details\n', '     * @notice symbol - The symbol/ ticker symbol of ERC20 contract\n', '     * @notice isValid - Boolean variable indicating if the ERC20 is valid to be used for yield contracts\n', '     * @notice noContracts - Integer indicating the number of contracts associated with it\n', '     * @notice mFactor - Value of a coin/token in USD * 10 power 18\n', '     */\n', '    struct Erc20Details {\n', '        string symbol;\n', '        bool isValid;\n', '        uint64 noContracts;\n', '        uint256 mFactor;\n', '    }\n', '\n', '    /**\n', '     * @dev - A mapping to map ERC20 addresses to its details\n', '     */\n', '    mapping(address => Erc20Details) public erc20Map;\n', '\n', '    /**\n', '     * @dev - Array to store user created yield contract IDs\n', '     */\n', '    bytes32[] public allContracts;\n', '\n', '    /**\n', '     * @dev - A enum to store yield contract status\n', '     */\n', '    enum Status {\n', '        Inactive, \n', '        Active, \n', '        OpenMarket, \n', '        Claimed, \n', '        Destroyed\n', '    }\n', '\n', '    /**\n', '     * @dev - A enum to switch set value case\n', '     */\n', '    enum ParamType {\n', '        ContractFee,\n', '        MinEarlyRedeemFee,\n', '        MaxEarlyRedeemFee,\n', '        TotalAllocatedMxx\n', '    }\n', '\n', '    /**\n', '     * @dev - A struct to store yield contract details\n', '     * @notice contractOwner - The owner of the yield contract\n', '     * @notice tokenAddress - ERC20 contract address (if ETH then ZERO_ADDRESS)\n', '     * @notice startTime - Start time of the yield contract (in unix timestamp)\n', '     * @notice endTime - End time of the yield contract (in unix timestamp)\n', '     * @notice tenure - The agreement tenure in days\n', '     * @notice contractStatus - The status of a contract (can be Inactive/Active/OpenMarket/Claimed/Destroyed)\n', '     * @notice collateral - Value of collateral (multiplied by 10 power 18 to handle decimals)\n', '     * @notice mxxToBeMinted - The final MXX token value to be returned to the contract owner\n', '     * @notice interest - APY or Annual Percentage Yield (returned from tenureApyMap)\n', '     */\n', '    struct ContractDetails {\n', '        address contractOwner;\n', '        uint48 startTime;\n', '        uint48 endTime;\n', '        address tokenAddress;\n', '        uint16 tenure;\n', '        uint64 interest;\n', '        Status contractStatus;\n', '        uint256 collateral;\n', '        uint256 mxxToBeMinted;\n', '    }\n', '\n', '    /**\n', '     * @dev - A mapping to map contract IDs to their details\n', '     */\n', '    mapping(bytes32 => ContractDetails) public contractMap;\n', '\n', '    /**\n', '     * @dev - A mapping to map tenure in days to apy (Annual Percentage Yield aka interest rate)\n', '     * Percent rate is multiplied by 10 power 6. (For e.g. if 5% then value is 0.05 * 10 power 6)\n', '     */\n', '    mapping(uint256 => uint64) public tenureApyMap;\n', '\n', '    /**\n', '     * @dev - Variable to store contract fee\n', '     * If 10% then value is 0.1 * 10 power 6\n', '     */\n', '    uint64 public contractFee;\n', '\n', '    /**\n', '     * @dev - Constant variable to store Official MXX ERC20 token address\n', '     */\n', '    address public constant MXX_ADDRESS = 0x8a6f3BF52A26a21531514E23016eEAe8Ba7e7018;\n', '\n', '    /**\n', '     * @dev - Constant address to store the Official MXX Burn Address\n', '     */\n', '    address public constant BURN_ADDRESS = 0x19B292c1a84379Aab41564283e7f75bF20e45f91;\n', '\n', '    /**\n', '     * @dev - Constant variable to store ETH address\n', '     */\n', '    address internal constant ZERO_ADDRESS = address(0);\n', '\n', '    /**\n', '     * @dev - Constant variable to store 10 power of 6\n', '     */\n', '    uint64 internal constant POW6 = 1000000;\n', '\n', '    /**\n', '     * @dev - Variable to store total allocated MXX for yield contracts\n', '     */\n', '    uint256 public totalAllocatedMxx;\n', '\n', '    /**\n', '     * @dev - Variable to total MXX minted from yield contracts\n', '     */\n', '    uint256 public mxxMintedFromContract;\n', '\n', '    /**\n', '     * @dev - Variables to store % of penalty / redeem fee fees\n', '     * If min penalty / redeem fee is 5% then value is 0.05 * 10 power 6\n', '     * If max penalty / redeem fee is 50% then value is 0.5 * 10 power 6\n', '     */\n', '    uint64 public minEarlyRedeemFee;\n', '    uint64 public maxEarlyRedeemFee;\n', '\n', '    /**\n', '     * CONSTRUCTOR FUNCTION\n', '     */\n', '\n', '    constructor(uint256 _mxxmFactor) public Ownable() {\n', '        // Setting default variables\n', '        tenureApyMap[90] = 2 * POW6;\n', '        tenureApyMap[180] = 4 * POW6;\n', '        tenureApyMap[270] = 10 * POW6;\n', '        contractFee = (8 * POW6) / 100;\n', '        totalAllocatedMxx = 1000000000 * (10**8); // 1 billion initial Mxx allocated //\n', '        minEarlyRedeemFee = (5 * POW6) / 100;\n', '        maxEarlyRedeemFee = (5 * POW6) / 10;\n', '\n', '        addErc20(MXX_ADDRESS, _mxxmFactor);\n', '    }\n', '\n', '    /**\n', '     * DEFINE MODIFIER\n', '     */\n', '\n', '    /**\n', '     * @dev Throws if address is a user address (except ZERO_ADDRESS)\n', '     * @param _erc20Address - Address to be checked\n', '     */\n', '\n', '    modifier onlyErc20OrEth(address _erc20Address) {\n', '        require(\n', '            _erc20Address == ZERO_ADDRESS || Address.isContract(_erc20Address),\n', '            "Not contract address"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if address in not in ERC20 list (check for mFactor and symbol)\n', '     * @param _erc20Address - Address to be checked\n', '     */\n', '\n', '    modifier inErc20List(address _erc20Address) {\n', '        require(\n', '            erc20Map[_erc20Address].mFactor != 0 ||\n', '                bytes(erc20Map[_erc20Address].symbol).length != 0,\n', '            "Not in ERC20 list"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @dev This function will check the array for an element and retun the index\n', '     * @param _inputAddress - Address for which the index has to be found\n', '     * @param _inputAddressList - The address list to be checked\n', '     * @return index - Index element indicating the position of the inputAddress inside the array\n', '     * @return isFound - Boolean indicating if the element is present in the array or not\n', '     * Access Control: This contract or derived contract\n', '     */\n', '\n', '    function getIndex(address _inputAddress, address[] memory _inputAddressList)\n', '        internal\n', '        pure\n', '        returns (uint256 index, bool isFound)\n', '    {\n', '        // Enter loop\n', '        for (uint256 i = 0; i < _inputAddressList.length; i++) {\n', '            // If value matches, return index\n', '            if (_inputAddress == _inputAddressList[i]) {\n', '                return (i, true);\n', '            }\n', '        }\n', '\n', '        // If no value matches, return false\n', '        return (0, false);\n', '    }\n', '\n', '    /**\n', '     * GENERAL FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @dev This function will set interest rate for the tenure in days\n', '     * @param _tenure - Tenure of the agreement in days\n', '     * @param _interestRate - Interest rate in 10 power 6 (If 5%, then value is 0.05 * 10 power 6)\n', '     * @return - Boolean status - True indicating successful completion\n', '     * Access Control: Only Owner\n', '     */\n', '\n', '    function setInterest(uint256 _tenure, uint64 _interestRate)\n', '        public\n', '        onlyOwner()\n', '        returns (bool)\n', '    {\n', '        tenureApyMap[_tenure] = _interestRate;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This function will set value based on ParamType\n', '     * @param _parameter - Enum value indicating ParamType (0,1,2,3)\n', '     * @param _value - Value to be set\n', '     * @return - Boolean status - True indicating successful completion\n', '     * Access Control: Only Owner\n', '     */\n', '\n', '    function setParamType(ParamType _parameter, uint256 _value)\n', '        public\n', '        onlyOwner()\n', '        returns (bool)\n', '    {\n', '        if (_parameter == ParamType.ContractFee) {\n', '            contractFee = uint64(_value);\n', '        } else if (_parameter == ParamType.MinEarlyRedeemFee) {\n', '            require(\n', '                uint64(_value) <= maxEarlyRedeemFee,\n', '                "Greater than max redeem fee"\n', '            );\n', '            minEarlyRedeemFee = uint64(_value);\n', '        } else if (_parameter == ParamType.MaxEarlyRedeemFee) {\n', '            require(\n', '                uint64(_value) >= minEarlyRedeemFee,\n', '                "Less than min redeem fee"\n', '            );\n', '            maxEarlyRedeemFee = uint64(_value);\n', '        } else if (_parameter == ParamType.TotalAllocatedMxx) {\n', '            require(\n', '                _value >= mxxMintedFromContract,\n', '                "Less than total mxx minted"\n', '            );\n', '            totalAllocatedMxx = _value;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * SUPPORTED ERC20 ADDRESS FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @dev Adds a supported ERC20 address into the contract\n', '     * @param _erc20Address - Address of the ERC20 contract\n', '     * @param _mFactor - Mint Factor of the token (value of 1 token in USD * 10 power 18)\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function addErc20(address _erc20Address, uint256 _mFactor)\n', '        public\n', '        onlyOwner()\n', '        onlyErc20OrEth(_erc20Address)\n', '        returns (bool)\n', '    {\n', '        // Check for existing contracts and validity. If condition fails, revert\n', '        require(\n', '            erc20Map[_erc20Address].noContracts == 0,\n', '            "Token has existing contracts"\n', '        );\n', '        require(!erc20Map[_erc20Address].isValid, "Token already available");\n', '\n', '        // Add token details and return true\n', '        // If _erc20Address = ZERO_ADDRESS then it is ETH else ERC20\n', '        erc20Map[_erc20Address] = Erc20Details(\n', '            (_erc20Address == ZERO_ADDRESS)\n', '                ? "ETH"\n', '                : ERC20(_erc20Address).symbol(),\n', '            true,\n', '            0,\n', '            _mFactor\n', '        );\n', '\n', '        erc20List.push(_erc20Address);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a list of supported ERC20 addresses into the contract\n', '     * @param _erc20AddressList - List of addresses of the ERC20 contract\n', '     * @param _mFactorList - List of mint factors of the token\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - The length of _erc20AddressList and _mFactorList must be the same\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function addErc20List(\n', '        address[] memory _erc20AddressList,\n', '        uint256[] memory _mFactorList\n', '    ) public onlyOwner() returns (bool) {\n', '        // Check if the length of 2 input arrays are the same else throw\n', '        require(\n', '            _erc20AddressList.length == _mFactorList.length,\n', '            "Inconsistent Inputs"\n', '        );\n', '\n', '        // Enter loop and token details\n', '        for (uint256 i = 0; i < _erc20AddressList.length; i++) {\n', '            addErc20(_erc20AddressList[i], _mFactorList[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a valid ERC20 addresses from the contract\n', '     * @param _erc20Address - Address of the ERC20 contract to be removed\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function removeErc20(address _erc20Address)\n', '        public\n', '        onlyOwner()\n', '        returns (bool)\n', '    {\n', '        // Check if Valid ERC20 not equals MXX_ADDRESS\n', '        require(_erc20Address != MXX_ADDRESS, "Cannot remove MXX");\n', '\n', '        // Check if _erc20Address has existing yield contracts\n', '        require(\n', '            erc20Map[_erc20Address].noContracts == 0,\n', '            "Token has existing contracts"\n', '        );\n', '\n', '        // Get array index and isFound flag\n', '        uint256 index;\n', '        bool isFound;\n', '        (index, isFound) = getIndex(_erc20Address, erc20List);\n', '\n', '        // Require address to be in list\n', '        require(isFound, "Address not found");\n', '\n', '        // Get last valid ERC20 address in the array\n', '        address lastErc20Address = erc20List[erc20List.length - 1];\n', '\n', '        // Assign last address to the index position\n', '        erc20List[index] = lastErc20Address;\n', '\n', '        // Delete last address from the array\n', '        erc20List.pop();\n', '\n', '        // Delete ERC20 details for the input address\n', '        delete erc20Map[_erc20Address];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Enlists/Delists ERC20 address to prevent adding new yield contracts with this ERC20 collateral\n', '     * @param _erc20Address - Address of the ERC20 contract\n', '     * @param _isValid - New validity boolean of the ERC20 contract\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function setErc20Validity(address _erc20Address, bool _isValid)\n', '        public\n', '        onlyOwner()\n', '        inErc20List(_erc20Address)\n', '        returns (bool)\n', '    {\n', '        // Set valid ERC20 validity\n', '        erc20Map[_erc20Address].isValid = _isValid;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Updates the mint factor of a coin/token\n', '     * @param _erc20Address - Address of the ERC20 contract or ETH address (ZERO_ADDRESS)\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function updateMFactor(address _erc20Address, uint256 _mFactor)\n', '        public\n', '        onlyOwner()\n', '        inErc20List(_erc20Address)\n', '        onlyErc20OrEth(_erc20Address)\n', '        returns (bool)\n', '    {\n', '        // Update mint factor\n', '        erc20Map[_erc20Address].mFactor = _mFactor;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Updates the mint factor for list of coin(s)/token(s)\n', '     * @param _erc20AddressList - List of ERC20 addresses\n', '     * @param _mFactorList - List of mint factors for ERC20 addresses\n', '     * @return - Boolean status - True indicating successful completion\n', '     * @notice - Length of the 2 input arrays must be the same\n', '     * @notice - Access control: Only Owner\n', '     */\n', '    function updateMFactorList(\n', '        address[] memory _erc20AddressList,\n', '        uint256[] memory _mFactorList\n', '    ) public onlyOwner() returns (bool) {\n', '        // Length of the 2 input arrays must be the same. If condition fails, revert\n', '        require(\n', '            _erc20AddressList.length == _mFactorList.length,\n', '            "Inconsistent Inputs"\n', '        );\n', '\n', '        // Enter the loop, update and return true\n', '        for (uint256 i = 0; i < _erc20AddressList.length; i++) {\n', '            updateMFactor(_erc20AddressList[i], _mFactorList[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of valid Tokens/Coins supported\n', '     * @return - Number of valid tokens/coins\n', '     * @notice - Access control: Public\n', '     */\n', '    function getNoOfErc20s() public view returns (uint256) {\n', '        return (erc20List.length);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns subset list of valid ERC20 contracts\n', '     * @param _start - Start index to search in the list\n', '     * @param _end - End index to search in the list\n', '     * @return - List of valid ERC20 addresses subset\n', '     * @notice - Access control: Public\n', '     */\n', '    function getSubsetErc20List(uint256 _start, uint256 _end)\n', '        public\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        // If _end higher than length of array, set end index to last element of the array\n', '        if (_end >= erc20List.length) {\n', '            _end = erc20List.length - 1;\n', '        }\n', '\n', '        // Check conditions else fail\n', '        require(_start <= _end, "Invalid limits");\n', '\n', '        // Define return array\n', '        uint256 noOfElements = _end - _start + 1;\n', '        address[] memory subsetErc20List = new address[](noOfElements);\n', '\n', '        // Loop in and add elements from erc20List array\n', '        for (uint256 i = _start; i <= _end; i++) {\n', '            subsetErc20List[i - _start] = erc20List[i];\n', '        }\n', '        return subsetErc20List;\n', '    }\n', '\n', '    /**\n', '     * YIELD CONTRACT FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @dev Creates a yield contract\n', '     * @param _erc20Address - The address of the ERC20 token (ZERO_ADDRESS if ETH)\n', '     * @param _collateral - The collateral value of the ERC20 token or ETH\n', '     * @param _tenure - The number of days of the agreement\n', '     * @notice - Collateral to be input - Actual value * (10 power decimals)\n', '     * @notice - For e.g If collateral is 5 USDT (Tether) and decimal is 6, then _collateral is (5 * (10 power 6))\n', '     * Non Reentrant modifier is used to prevent re-entrancy attack\n', '     * @notice - Access control: External\n', '     */\n', '\n', '    function createYieldContract(\n', '        address _erc20Address,\n', '        uint256 _collateral,\n', '        uint16 _tenure\n', '    ) external payable nonReentrant() {\n', '        // Check if token/ETH is approved to create contracts\n', '        require(erc20Map[_erc20Address].isValid, "Token/Coin not approved");\n', '\n', '        // Create contractId and check if status Inactive (enum state 0)\n', '        bytes32 contractId = keccak256(\n', '            abi.encode(msg.sender, _erc20Address, now, allContracts.length)\n', '        );\n', '        require(\n', '            contractMap[contractId].contractStatus == Status.Inactive,\n', '            "Contract already exists"\n', '        );\n', '\n', '        // Check if APY (interest rate is not zero for the tenure)\n', '        require(tenureApyMap[_tenure] != 0, "No interest rate is set");\n', '\n', '        // Get decimal value for collaterals\n', '        uint256 collateralDecimals;\n', '\n', '        // Check id collateral is not 0\n', '        require(_collateral != 0, "Collateral is 0");\n', '\n', '        if (_erc20Address == ZERO_ADDRESS) {\n', '            // In case of ETH, check to ensure if collateral value match ETH sent\n', '            require(msg.value == _collateral, "Incorrect funds");\n', '\n', '            // ETH decimals is 18\n', '            collateralDecimals = 10**18;\n', '        } else {\n', '            // In case of non ETH, check to ensure if msg.value is 0\n', '            require(msg.value == 0, "Incorrect funds");\n', '\n', '            collateralDecimals = 10**uint256(ERC20(_erc20Address).decimals());\n', '\n', '            // Transfer collateral\n', '            ERC20(_erc20Address).safeTransferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                _collateral\n', '            );\n', '        }\n', '\n', '        // Calculate MXX to be Minted\n', '        uint256 numerator = _collateral\n', '            .mul(erc20Map[_erc20Address].mFactor)\n', '            .mul(tenureApyMap[_tenure])\n', '            .mul(10**uint256(ERC20(MXX_ADDRESS).decimals()))\n', '            .mul(_tenure);\n', '        uint256 denominator = collateralDecimals\n', '            .mul(erc20Map[MXX_ADDRESS].mFactor)\n', '            .mul(365 * POW6);\n', '        uint256 valueToBeMinted = numerator.div(denominator);\n', '\n', '        // Update total MXX minted from yield contracts\n', '        mxxMintedFromContract = mxxMintedFromContract.add(valueToBeMinted);\n', '\n', '        // Check the MXX to be minted will result in total MXX allocated for creating yield contracts\n', '        require(\n', '            totalAllocatedMxx >= mxxMintedFromContract,\n', '            "Total allocated MXX exceeded"\n', '        );\n', '\n', '        // Calculate MXX to be burnt\n', '        numerator = valueToBeMinted.mul(contractFee);\n', '        denominator = POW6;\n', '        uint256 valueToBeBurnt = numerator.div(denominator);\n', '\n', '        // Send valueToBeBurnt to contract fee destination\n', '        ERC20(MXX_ADDRESS).safeTransferFrom(\n', '            msg.sender,\n', '            BURN_ADDRESS,\n', '            valueToBeBurnt\n', '        );\n', '\n', '        // Create contract\n', '        contractMap[contractId] = ContractDetails(\n', '            msg.sender,\n', '            uint48(now),\n', '            uint48(now.add(uint256(_tenure).mul(1 days))),\n', '            _erc20Address,\n', '            _tenure,\n', '            tenureApyMap[_tenure],\n', '            Status.Active,\n', '            _collateral,\n', '            valueToBeMinted\n', '        );\n', '\n', '        // Push to all contracts and user contracts\n', '        allContracts.push(contractId);\n', '\n', '        // Increase number of contracts ERC20 details\n', '        erc20Map[_erc20Address].noContracts += 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Early Redeem a yield contract\n', '     * @param _contractId - The Id of the contract\n', '     * Non Reentrant modifier is used to prevent re-entrancy attack\n', '     * @notice - Access control: External\n', '     */\n', '\n', '    function earlyRedeemContract(bytes32 _contractId) external nonReentrant() {\n', '        // Check if contract is Active\n', '        require(\n', '            contractMap[_contractId].contractStatus == Status.Active,\n', '            "Contract is not active"\n', '        );\n', '\n', '        // Check if redeemer is the owner\n', '        require(\n', '            contractMap[_contractId].contractOwner == msg.sender,\n', '            "Redeemer is not owner"\n', '        );\n', '\n', '        // Check if current time is less than end time\n', '        require(\n', '            now < contractMap[_contractId].endTime,\n', '            "Contract is beyond its end time"\n', '        );\n', '\n', '        // Calculate mxxMintedTillDate\n', '        uint256 numerator = now.sub(contractMap[_contractId].startTime).mul(\n', '            contractMap[_contractId].mxxToBeMinted\n', '        );\n', '        uint256 denominator = uint256(contractMap[_contractId].endTime).sub(\n', '            contractMap[_contractId].startTime\n', '        );\n', '        uint256 mxxMintedTillDate = numerator.div(denominator);\n', '\n', '        // Calculate penaltyPercent\n', '        numerator = uint256(maxEarlyRedeemFee).sub(minEarlyRedeemFee).mul(\n', '            now.sub(contractMap[_contractId].startTime)\n', '        );\n', '        uint256 penaltyPercent = uint256(maxEarlyRedeemFee).sub(\n', '            numerator.div(denominator)\n', '        );\n', '\n', '        // Calculate penaltyMXXToBurn\n', '        numerator = penaltyPercent.mul(mxxMintedTillDate);\n', '        uint256 penaltyMXXToBurn = numerator.div(POW6);\n', '\n', '        // Check if penalty MXX to burn is not 0\n', '        require(penaltyMXXToBurn != 0, "No penalty MXX");\n', '\n', '        // Calculate mxxToBeSent\n', '        uint256 mxxToBeSent = mxxMintedTillDate.sub(penaltyMXXToBurn);\n', '\n', '        // Return collateral\n', '        if (contractMap[_contractId].tokenAddress == ZERO_ADDRESS) {\n', '            // Send back ETH\n', '            (bool success, ) = contractMap[_contractId].contractOwner.call{\n', '                value: contractMap[_contractId].collateral\n', '            }("");\n', '            require(success, "Transfer failed");\n', '        } else {\n', '            // Send back ERC20 collateral\n', '            ERC20(contractMap[_contractId].tokenAddress).safeTransfer(\n', '                contractMap[_contractId].contractOwner,\n', '                contractMap[_contractId].collateral\n', '            );\n', '        }\n', '\n', '        // Return MXX\n', '        ERC20(MXX_ADDRESS).safeTransfer(\n', '            contractMap[_contractId].contractOwner,\n', '            mxxToBeSent\n', '        );\n', '\n', '        // Burn penalty fee\n', '        ERC20(MXX_ADDRESS).safeTransfer(BURN_ADDRESS, penaltyMXXToBurn);\n', '\n', '        // Updating contract\n', '        contractMap[_contractId].startTime = uint48(now);\n', '        contractMap[_contractId].mxxToBeMinted = contractMap[_contractId]\n', '            .mxxToBeMinted\n', '            .sub(mxxMintedTillDate);\n', '        contractMap[_contractId].contractOwner = ZERO_ADDRESS;\n', '        contractMap[_contractId].contractStatus = Status.OpenMarket;\n', '    }\n', '\n', '    /**\n', '     * @dev Acquire a yield contract in the open market\n', '     * @param _contractId - The Id of the contract\n', '     * Non Reentrant modifier is used to prevent re-entrancy attack\n', '     * @notice - Access control: External\n', '     */\n', '\n', '    function acquireYieldContract(bytes32 _contractId)\n', '        external\n', '        payable\n', '        nonReentrant()\n', '    {\n', '        // Check if contract is open\n', '        require(\n', '            contractMap[_contractId].contractStatus == Status.OpenMarket,\n', '            "Contract not in open market"\n', '        );\n', '\n', '        // Get collateral in case of ERC20 tokens, for ETH it is already received via msg.value\n', '        if (contractMap[_contractId].tokenAddress != ZERO_ADDRESS) {\n', '            // In case of ERC20, ensure no ETH is sent\n', '            require(msg.value == 0, "ETH should not be sent");\n', '            ERC20(contractMap[_contractId].tokenAddress).safeTransferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                contractMap[_contractId].collateral\n', '            );\n', '        } else {\n', '            // In case of ETH check if money received equals the collateral else revert\n', '            require(\n', '                msg.value == contractMap[_contractId].collateral,\n', '                "Incorrect funds"\n', '            );\n', '        }\n', '\n', '        // Updating contract\n', '        contractMap[_contractId].contractOwner = msg.sender;\n', '        contractMap[_contractId].contractStatus = Status.Active;\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy an open market yield contract\n', '     * @param _contractId - The Id of the contract\n', '     * Non Reentrant modifier is used to prevent re-entrancy attack\n', '     * @notice - Access control: External\n', '     */\n', '\n', '    function destroyOMContract(bytes32 _contractId)\n', '        external\n', '        onlyOwner()\n', '        nonReentrant()\n', '    {\n', '        // Check if contract is open\n', '        require(\n', '            contractMap[_contractId].contractStatus == Status.OpenMarket,\n', '            "Contract not in open market"\n', '        );\n', '\n', '        // Reduced MXX minted from contract and update status as destroyed\n', '        mxxMintedFromContract -= contractMap[_contractId].mxxToBeMinted;\n', '        contractMap[_contractId].contractStatus = Status.Destroyed;\n', '    }\n', '\n', '    /**\n', '     * @dev Claim a yield contract in the active market\n', '     * @param _contractId - The Id of the contract\n', '     * Non Reentrant modifier is used to prevent re-entrancy attack\n', '     * @notice - Access control: External\n', '     */\n', '\n', '    function claimYieldContract(bytes32 _contractId) external nonReentrant() {\n', '        // Check if contract is active\n', '        require(\n', '            contractMap[_contractId].contractStatus == Status.Active,\n', '            "Contract is not active"\n', '        );\n', '\n', '        // Check if owner and msg.sender are the same\n', '        require(\n', '            contractMap[_contractId].contractOwner == msg.sender,\n', '            "Contract owned by someone else"\n', '        );\n', '\n', '        // Check if current time is greater than contract end time\n', '        require(now >= contractMap[_contractId].endTime, "Too early to claim");\n', '\n', '        // Return collateral\n', '        if (contractMap[_contractId].tokenAddress == ZERO_ADDRESS) {\n', '            // Send back ETH\n', '            (bool success, ) = contractMap[_contractId].contractOwner.call{\n', '                value: contractMap[_contractId].collateral\n', '            }("");\n', '            require(success, "Transfer failed");\n', '        } else {\n', '            // Send back ERC20 collateral\n', '            ERC20(contractMap[_contractId].tokenAddress).safeTransfer(\n', '                contractMap[_contractId].contractOwner,\n', '                contractMap[_contractId].collateral\n', '            );\n', '        }\n', '\n', '        // Return minted MXX\n', '        ERC20(MXX_ADDRESS).safeTransfer(\n', '            contractMap[_contractId].contractOwner,\n', '            contractMap[_contractId].mxxToBeMinted\n', '        );\n', '\n', '        // Updating contract\n', '        contractMap[_contractId].contractStatus = Status.Claimed;\n', '\n', '        // Reduce no of contracts in ERC20 details\n', '        erc20Map[contractMap[_contractId].tokenAddress].noContracts -= 1;\n', '    }\n', '\n', '    /**\n', '     * @dev This function will subset of yield contract\n', '     * @param _start - Start of the list\n', '     * @param _end - End of the list\n', '     * @return - List of subset yield contract\n', '     * Access Control: Public\n', '     */\n', '\n', '    function getSubsetYieldContracts(uint256 _start, uint256 _end)\n', '        public\n', '        view\n', '        returns (bytes32[] memory)\n', '    {\n', '        // If _end higher than length of array, set end index to last element of the array\n', '        if (_end >= allContracts.length) {\n', '            _end = allContracts.length.sub(1);\n', '        }\n', '\n', '        // Check conditions else fail\n', '        require(_start <= _end, "Invalid limits");\n', '\n', '        // Define return array\n', '        uint256 noOfElements = _end.sub(_start).add(1);\n', '        bytes32[] memory subsetYieldContracts = new bytes32[](noOfElements);\n', '\n', '        // Loop in and add elements from allContracts array\n', '        for (uint256 i = _start; i <= _end; i++) {\n', '            subsetYieldContracts[i - _start] = allContracts[i];\n', '        }\n', '\n', '        return subsetYieldContracts;\n', '    }\n', '\n', '    /**\n', '     * @dev This function will withdraw MXX back to the owner\n', '     * @param _amount - Amount of MXX need to withdraw\n', '     * @return - Boolean status indicating successful completion\n', '     * Access Control: Only Owner\n', '     */\n', '\n', '    function withdrawMXX(uint256 _amount)\n', '        public\n', '        onlyOwner()\n', '        nonReentrant()\n', '        returns (bool)\n', '    {\n', '        ERC20(MXX_ADDRESS).safeTransfer(msg.sender, _amount);\n', '        return true;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./Context.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract MXXERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address. // Commented for MXX\n', '     * - `recipient` cannot be the zero address. // Commented for MXX\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        //require(sender != address(0), "ERC20: transfer from the zero address");\n', '        //require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./Context.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n']
