['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        //   require(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        //   require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '       emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint _amount) external  returns (bool success);\n', '    function balanceOf(address _owner) external constant returns (uint balance);\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    address public tokenAddr;\n', '\n', '    event EtherTransfer(address beneficiary, uint amount);\n', '\n', '    constructor(address _tokenAddr) public {\n', '        tokenAddr = _tokenAddr;\n', '    }\n', '\n', '    function dropTokens(address[] _recipients, uint256[] _amount) public onlyOwner returns (bool) {\n', '        require(_recipients.length == _amount.length);\n', '\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            uint256 toSend = _amount[i] * 10**6;\n', '            require(_recipients[i] != address(0));\n', '            require(Token(tokenAddr).transfer(_recipients[i], toSend));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateTokenAddress(address newTokenAddr) public onlyOwner {\n', '        tokenAddr = newTokenAddr;\n', '    }\n', '\n', '    function withdrawTokens(address beneficiary) public onlyOwner {\n', '        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(this)));\n', '    }\n', '\n', '    function withdrawEther(address beneficiary) public onlyOwner {\n', '        beneficiary.transfer(address(this).balance);\n', '    }\n', '  \n', '\n', '}']