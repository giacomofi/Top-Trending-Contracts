['// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistAdminRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    constructor () internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistedRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n', ' * it), and not Whitelisteds themselves.\n', ' */\n', 'contract WhitelistedRole is Context, WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(_msgSender()), "WhitelistedRole: caller does not have the Whitelisted role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(_msgSender());\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/oracle/IExchangeRateOracle.sol\n', '\n', '\n', '/**\n', ' * @title IExchangeRateOracle\n', ' * @notice provides interface for fetching exchange rate values onchain, underlying implementations could use different oracles.\n', '*/\n', 'interface IExchangeRateOracle {\n', '\n', '    /**\n', "     * @notice return the value and the value's timestamp given a request ID\n", '     * @dev use granularity instead of defaulting to 18 for future oracle integrations\n', '     * @param requestId     a number that specifies the exchange rate pair\n', '     * @return false if could not get value, true with valid value, granularity, and timestamp if could get value\n', '     */\n', '    function getCurrentValue(uint256 requestId) external view returns (bool, uint256, uint256, uint256);\n', '}\n', '\n', '// File: contracts/oracle/ManagedUSDToCADOracle.sol\n', '\n', '\n', '/**\n', ' * @title ManagedUSDToCADOracle\n', ' * @notice Provides a simple USD to CAD rate, centrally managed, not backed by services like Chainlink or Tellor\n', '*/\n', 'contract ManagedUSDToCADOracle is IExchangeRateOracle, WhitelistedRole {\n', '\n', '    event RateUpdated(uint256 value, uint256 timestamp);\n', '\n', '    // exchange rate stored as an integer\n', '    uint256 public _USDToCADRate;\n', '\n', '    // specifies how many decimal places have been converted into integer\n', '    uint256 public _granularity;\n', '\n', '    // specifies the time the exchange was last updated\n', '    uint256 public _timestamp;\n', '\n', '\n', '    constructor(uint256 value, uint256 granularity) public {\n', '        _USDToCADRate = value;\n', '        _granularity = granularity;\n', '        _timestamp = block.timestamp;\n', '\n', '        _addWhitelisted(msg.sender);\n', '    }\n', '\n', '    /**\n', "     * @notice return the value and the value's timestamp given a request ID\n", '     * @param requestId     a number that specifies the exchange rate pair, should always be 1\n', '     * @return  success (always true), latest exchange rate, granularity, and timestamp\n', '     */\n', '    function getCurrentValue(uint256 requestId) external view virtual override returns (bool, uint256, uint256, uint256) {\n', '        require(requestId == 1, "Request Id must be 1");\n', '\n', '        return (true, _USDToCADRate, _granularity, _timestamp);\n', '    }\n', '\n', '    /**\n', '     * @notice admin can update the exchange rate\n', '     * @param requestId     a number that specifies the exchange rate pair, should always be 1\n', '     * @param value         the new exchange rate\n', '     * @param granularity   number of decimal places the exchange value is accurate to\n', '     * @return  true if success\n', '     */\n', '    function updateValue(uint256 requestId, uint256 value, uint256 granularity) external onlyWhitelisted returns (bool) {\n', '        require(requestId == 1, "Request Id must be 1");\n', '        require(value > 0, "Exchange rate cannot be zero");\n', '        require(granularity > 0, "Granularity cannot be zero");\n', '\n', '        _USDToCADRate = value;\n', '        _granularity = granularity;\n', '        _timestamp = block.timestamp;\n', '\n', '        emit RateUpdated(value, granularity);\n', '        return true;\n', '    }\n', '}']