['// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * KP2R.NETWORK\n', ' * A standard implementation of kp3rv1 protocol\n', ' * Optimized Dapp\n', ' * Scalability\n', ' * Clean & tested code\n', ' */\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "add: +");\n', '\n', '        return c;\n', '    }\n', '   function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '   function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "sub: -");\n', '    }\n', '   function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '       if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, "mul: *");\n', '\n', '        return c;\n', '    }\n', '  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '       if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '        return c;\n', '    }\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "div: /");\n', '    }\n', '  function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '   function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "mod: %");\n', '    }\n', '  function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract ReentrancyGuard {\n', '   uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '       require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '       _status = _ENTERED;\n', '       _;\n', '       _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '   function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call{value:amount}("");\n', '        require(success, "Address: reverted");\n', '    }\n', '}\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: < 0");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '           // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: !contract");\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '     if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: !succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library Keep2rLibrary {\n', '    function getReserve(address pair, address reserve) external view returns (uint) {\n', '        (uint _r0, uint _r1,) = IUniswapV2Pair(pair).getReserves();\n', '        if (IUniswapV2Pair(pair).token0() == reserve) {\n', '            return _r0;\n', '        } else if (IUniswapV2Pair(pair).token1() == reserve) {\n', '            return _r1;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IGovernance {\n', '    function proposeJob(address job) external;\n', '}\n', '\n', 'interface IKeep2rHelper {\n', '    function getQuoteLimit(uint gasUsed) external view returns (uint);\n', '}\n', '\n', 'contract Keep2r is ReentrancyGuard {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @notice Keep3r Helper to set max prices for the ecosystem\n', '    IKeep2rHelper public KPRH;\n', '\n', '    /// @notice EIP-20 token name for this token\n', '    string public constant name = "KP2R.Network";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public constant symbol = "KP2R";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0; // Initial 0\n', '\n', '    /// @notice A record of each accounts delegate\n', '    mapping (address => address) public delegates;\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', '    mapping (address => mapping (address => uint)) internal allowances;\n', '    mapping (address => uint) internal balances;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '    bytes32 public immutable DOMAINSEPARATOR;\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint nonce,uint expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint votes;\n', '    }\n', '\n', '    function delegate(address delegatee) public {\n', '        _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAINSEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "delegateBySig: sig");\n', '        require(nonce == nonces[signatory]++, "delegateBySig: nonce");\n', '        require(now <= expiry, "delegateBySig: expired");\n', '        _delegate(signatory, delegatee);\n', '    }\n', '\n', '  \n', '    function getCurrentVotes(address account) external view returns (uint) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    function getPriorVotes(address account, uint blockNumber) public view returns (uint) {\n', '        require(blockNumber < block.number, "getPriorVotes:");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = delegates[delegator];\n', '        uint delegatorBalance = votes[delegator].add(bonds[delegator][address(this)]);\n', '        delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint srcRepNew = srcRepOld.sub(amount, "_moveVotes: underflows");\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint dstRepNew = dstRepOld.add(amount);\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint oldVotes, uint newVotes) internal {\n', '      uint32 blockNumber = safe32(block.number, "_writeCheckpoint: 32 bits");\n', '\n', '      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '      } else {\n', '          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '          numCheckpoints[delegatee] = nCheckpoints + 1;\n', '      }\n', '\n', '      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /// @notice Submit a job\n', '    event SubmitJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Apply credit to a job\n', '    event ApplyCredit(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Remove credit for a job\n', '    event RemoveJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Unbond credit for a job\n', '    event UnbondJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Added a Job\n', '    event JobAdded(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Removed a job\n', '    event JobRemoved(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Worked a job\n', '    event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block, uint amount);\n', '\n', '    /// @notice Keeper bonding\n', '    event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);\n', '\n', '    /// @notice Keeper bonded\n', '    event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);\n', '\n', '    /// @notice Keeper unbonding\n', '    event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);\n', '\n', '    /// @notice Keeper unbound\n', '    event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);\n', '\n', '    /// @notice Keeper slashed\n', '    event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);\n', '\n', '    /// @notice Keeper disputed\n', '    event KeeperDispute(address indexed keeper, uint block);\n', '\n', '    /// @notice Keeper resolved\n', '    event KeeperResolved(address indexed keeper, uint block);\n', '\n', '    event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);\n', '\n', '    /// @notice 1 day to bond to become a keeper\n', '    uint constant public BOND = 3 days;\n', '    /// @notice 14 days to unbond to remove funds from being a keeper\n', '    uint constant public UNBOND = 14 days;\n', '    /// @notice 3 days till liquidity can be bound\n', '    uint constant public LIQUIDITYBOND = 3 days;\n', '\n', '    /// @notice direct liquidity fee 0.3%\n', '    uint constant public FEE = 30;\n', '    uint constant public BASE = 10000;\n', '\n', '    /// @notice address used for ETH transfers\n', '    address constant public ETH = address(0xE);\n', '\n', '    /// @notice tracks all current bondings (time)\n', '    mapping(address => mapping(address => uint)) public bondings;\n', '    /// @notice tracks all current unbondings (time)\n', '    mapping(address => mapping(address => uint)) public unbondings;\n', '    /// @notice allows for partial unbonding\n', '    mapping(address => mapping(address => uint)) public partialUnbonding;\n', '    /// @notice tracks all current pending bonds (amount)\n', '    mapping(address => mapping(address => uint)) public pendingbonds;\n', '    /// @notice tracks how much a keeper has bonded\n', '    mapping(address => mapping(address => uint)) public bonds;\n', "    /// @notice tracks underlying votes (that don't have bond)\n", '    mapping(address => uint) public votes;\n', '\n', '    /// @notice total bonded (totalSupply for bonds)\n', '    uint public totalBonded = 0;\n', '    /// @notice tracks when a keeper was first registered\n', '    mapping(address => uint) public firstSeen;\n', '\n', '    /// @notice tracks if a keeper has a pending dispute\n', '    mapping(address => bool) public disputes;\n', '\n', '    /// @notice tracks last job performed for a keeper\n', '    mapping(address => uint) public lastJob;\n', '    /// @notice tracks the total job executions for a keeper\n', '    mapping(address => uint) public workCompleted;\n', '    /// @notice list of all jobs registered for the keeper system\n', '    mapping(address => bool) public jobs;\n', '    /// @notice the current credit available for a job\n', '    mapping(address => mapping(address => uint)) public credits;\n', '    /// @notice the balances for the liquidity providers\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityProvided;\n', '    /// @notice liquidity unbonding days\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityUnbonding;\n', '    /// @notice liquidity unbonding amounts\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmountsUnbonding;\n', '    /// @notice job proposal delay\n', '    mapping(address => uint) public jobProposalDelay;\n', '    /// @notice liquidity apply date\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityApplied;\n', '    /// @notice liquidity amount to apply\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmount;\n', '\n', '    /// @notice list of all current keepers\n', '    mapping(address => bool) public keepers;\n', '    /// @notice blacklist of keepers not allowed to participate\n', '    mapping(address => bool) public blacklist;\n', '\n', '    /// @notice traversable array of keepers to make external management easier\n', '    address[] public keeperList;\n', '    /// @notice traversable array of jobs to make external management easier\n', '    address[] public jobList;\n', '\n', '    /// @notice governance address for the governance contract\n', '    address public governance;\n', '    address public pendingGovernance;\n', '\n', '    /// @notice the liquidity token supplied by users paying for jobs\n', '    mapping(address => bool) public liquidityAccepted;\n', '\n', '    address[] public liquidityPairs;\n', '\n', '    uint internal _gasUsed;\n', '\n', '    constructor(address _kph) public {\n', '        // Set governance for this token\n', '        governance = msg.sender;\n', '        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\n', '        KPRH = IKeep2rHelper(_kph);\n', '    }\n', '\n', '    /**\n', '     * @notice Add ETH credit to a job to be paid out for work\n', '     * @param job the job being credited\n', '     */\n', '    function addCreditETH(address job) external payable {\n', '        require(jobs[job], "addCreditETH: !job");\n', '        uint _fee = msg.value.mul(FEE).div(BASE);\n', '        credits[job][ETH] = credits[job][ETH].add(msg.value.sub(_fee));\n', '        payable(governance).transfer(_fee);\n', '\n', '        emit AddCredit(ETH, job, msg.sender, block.number, msg.value);\n', '    }\n', '\n', '    function addCredit(address credit, address job, uint amount) external nonReentrant {\n', '        require(jobs[job], "addCreditETH: !job");\n', '        uint _before = IERC20(credit).balanceOf(address(this));\n', '        IERC20(credit).safeTransferFrom(msg.sender, address(this), amount);\n', '        uint _received = IERC20(credit).balanceOf(address(this)).sub(_before);\n', '        uint _fee = _received.mul(FEE).div(BASE);\n', '        credits[job][credit] = credits[job][credit].add(_received.sub(_fee));\n', '        IERC20(credit).safeTransfer(governance, _fee);\n', '\n', '        emit AddCredit(credit, job, msg.sender, block.number, _received);\n', '    }\n', '\n', '    function addVotes(address voter, uint amount) external {\n', '        require(msg.sender == governance, "addVotes: !gov");\n', '        _activate(voter, address(this));\n', '        votes[voter] = votes[voter].add(amount);\n', '        totalBonded = totalBonded.add(amount);\n', '        _moveDelegates(address(0), delegates[voter], amount);\n', '    }\n', '\n', ' \n', '    function removeVotes(address voter, uint amount) external {\n', '        require(msg.sender == governance, "addVotes: !gov");\n', '        votes[voter] = votes[voter].sub(amount);\n', '        totalBonded = totalBonded.sub(amount);\n', '        _moveDelegates(delegates[voter], address(0), amount);\n', '    }\n', '\n', '    function addKPRCredit(address job, uint amount) external {\n', '        require(msg.sender == governance, "addKPRCredit: !gov");\n', '        require(jobs[job], "addKPRCredit: !job");\n', '        credits[job][address(this)] = credits[job][address(this)].add(amount);\n', '        _mint(address(this), amount);\n', '        emit AddCredit(address(this), job, msg.sender, block.number, amount);\n', '    }\n', '\n', ' \n', '    function approveLiquidity(address liquidity) external {\n', '        require(msg.sender == governance, "approveLiquidity: !gov");\n', '        require(!liquidityAccepted[liquidity], "approveLiquidity: !pair");\n', '        liquidityAccepted[liquidity] = true;\n', '        liquidityPairs.push(liquidity);\n', '    }\n', '\n', '    function revokeLiquidity(address liquidity) external {\n', '        require(msg.sender == governance, "revokeLiquidity: !gov");\n', '        liquidityAccepted[liquidity] = false;\n', '    }\n', '\n', '    function pairs() external view returns (address[] memory) {\n', '        return liquidityPairs;\n', '    }\n', '\n', '  \n', '    function addLiquidityToJob(address liquidity, address job, uint amount) external nonReentrant {\n', '        require(liquidityAccepted[liquidity], "addLiquidityToJob: !pair");\n', '        IERC20(liquidity).safeTransferFrom(msg.sender, address(this), amount);\n', '        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);\n', '\n', '        liquidityApplied[msg.sender][liquidity][job] = now.add(LIQUIDITYBOND);\n', '        liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);\n', '\n', '        if (!jobs[job] && jobProposalDelay[job] < now) {\n', '            IGovernance(governance).proposeJob(job);\n', '            jobProposalDelay[job] = now.add(UNBOND);\n', '        }\n', '        emit SubmitJob(job, liquidity, msg.sender, block.number, amount);\n', '    }\n', '\n', '    function applyCreditToJob(address provider, address liquidity, address job) external {\n', '        require(liquidityAccepted[liquidity], "addLiquidityToJob: !pair");\n', '        require(liquidityApplied[provider][liquidity][job] != 0, "credit: no bond");\n', '        require(liquidityApplied[provider][liquidity][job] < now, "credit: bonding");\n', '        uint _liquidity = Keep2rLibrary.getReserve(liquidity, address(this));\n', '        uint _credit = _liquidity.mul(liquidityAmount[provider][liquidity][job]).div(IERC20(liquidity).totalSupply());\n', '        _mint(address(this), _credit);\n', '        credits[job][address(this)] = credits[job][address(this)].add(_credit);\n', '        liquidityAmount[provider][liquidity][job] = 0;\n', '\n', '        emit ApplyCredit(job, liquidity, provider, block.number, _credit);\n', '    }\n', '\n', '    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external {\n', '        require(liquidityAmount[msg.sender][liquidity][job] == 0, "credit: pending credit");\n', '        liquidityUnbonding[msg.sender][liquidity][job] = now.add(UNBOND);\n', '        liquidityAmountsUnbonding[msg.sender][liquidity][job] = liquidityAmountsUnbonding[msg.sender][liquidity][job].add(amount);\n', '        require(liquidityAmountsUnbonding[msg.sender][liquidity][job] <= liquidityProvided[msg.sender][liquidity][job], "unbondLiquidityFromJob: insufficient funds");\n', '\n', '        uint _liquidity = Keep2rLibrary.getReserve(liquidity, address(this));\n', '        uint _credit = _liquidity.mul(amount).div(IERC20(liquidity).totalSupply());\n', '        if (_credit > credits[job][address(this)]) {\n', '            _burn(address(this), credits[job][address(this)]);\n', '            credits[job][address(this)] = 0;\n', '        } else {\n', '            _burn(address(this), _credit);\n', '            credits[job][address(this)] = credits[job][address(this)].sub(_credit);\n', '        }\n', '\n', '        emit UnbondJob(job, liquidity, msg.sender, block.number, amount);\n', '    }\n', '\n', '    function removeLiquidityFromJob(address liquidity, address job) external {\n', '        require(liquidityUnbonding[msg.sender][liquidity][job] != 0, "removeJob: unbond");\n', '        require(liquidityUnbonding[msg.sender][liquidity][job] < now, "removeJob: unbonding");\n', '        uint _amount = liquidityAmountsUnbonding[msg.sender][liquidity][job];\n', '        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].sub(_amount);\n', '        liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;\n', '        IERC20(liquidity).safeTransfer(msg.sender, _amount);\n', '\n', '        emit RemoveJob(job, liquidity, msg.sender, block.number, _amount);\n', '    }\n', '\n', '    function mint(uint amount) external {\n', '        require(msg.sender == governance, "mint: !gov");\n', '        _mint(governance, amount);\n', '    }\n', '\n', '  \n', '    function burn(uint amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function _mint(address dst, uint amount) internal {\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[dst] = balances[dst].add(amount);\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '\n', '    function _burn(address dst, uint amount) internal {\n', '        require(dst != address(0), "_burn: zero address");\n', '        balances[dst] = balances[dst].sub(amount, "_burn: exceeds balance");\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '\n', '    function worked(address keeper) external {\n', '        workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));\n', '    }\n', '\n', '    function workReceipt(address keeper, uint amount) public {\n', '        require(jobs[msg.sender], "workReceipt: !job");\n', '        require(amount <= KPRH.getQuoteLimit(_gasUsed.sub(gasleft())), "workReceipt: max limit");\n', '        credits[msg.sender][address(this)] = credits[msg.sender][address(this)].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        _reward(keeper, amount);\n', '        workCompleted[keeper] = workCompleted[keeper].add(amount);\n', '        emit KeeperWorked(address(this), msg.sender, keeper, block.number, amount);\n', '    }\n', '\n', '  \n', '    function receipt(address credit, address keeper, uint amount) external {\n', '        require(jobs[msg.sender], "receipt: !job");\n', '        credits[msg.sender][credit] = credits[msg.sender][credit].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        IERC20(credit).safeTransfer(keeper, amount);\n', '        emit KeeperWorked(credit, msg.sender, keeper, block.number, amount);\n', '    }\n', '\n', '  \n', '    function receiptETH(address keeper, uint amount) external {\n', '        require(jobs[msg.sender], "receipt: !job");\n', '        credits[msg.sender][ETH] = credits[msg.sender][ETH].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        payable(keeper).transfer(amount);\n', '        emit KeeperWorked(ETH, msg.sender, keeper, block.number, amount);\n', '    }\n', '\n', '    function _reward(address _from, uint _amount) internal {\n', '        bonds[_from][address(this)] = bonds[_from][address(this)].add(_amount);\n', '        totalBonded = totalBonded.add(_amount);\n', '        _moveDelegates(address(0), delegates[_from], _amount);\n', '        emit Transfer(msg.sender, _from, _amount);\n', '    }\n', '\n', '    function _bond(address bonding, address _from, uint _amount) internal {\n', '        bonds[_from][bonding] = bonds[_from][bonding].add(_amount);\n', '        if (bonding == address(this)) {\n', '            totalBonded = totalBonded.add(_amount);\n', '            _moveDelegates(address(0), delegates[_from], _amount);\n', '        }\n', '    }\n', '\n', '    function _unbond(address bonding, address _from, uint _amount) internal {\n', '        bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);\n', '        if (bonding == address(this)) {\n', '            totalBonded = totalBonded.sub(_amount);\n', '            _moveDelegates(delegates[_from], address(0), _amount);\n', '        }\n', '\n', '    }\n', '\n', '    function addJob(address job) external {\n', '        require(msg.sender == governance, "addJob: !gov");\n', '        require(!jobs[job], "addJob: job known");\n', '        jobs[job] = true;\n', '        jobList.push(job);\n', '        emit JobAdded(job, block.number, msg.sender);\n', '    }\n', '\n', '  \n', '    function getJobs() external view returns (address[] memory) {\n', '        return jobList;\n', '    }\n', '\n', ' \n', '    function removeJob(address job) external {\n', '        require(msg.sender == governance, "removeJob: !gov");\n', '        jobs[job] = false;\n', '        emit JobRemoved(job, block.number, msg.sender);\n', '    }\n', '\n', '    function setKeep3rHelper(IKeep2rHelper _kprh) external {\n', '        require(msg.sender == governance, "setKeep3rHelper: !gov");\n', '        KPRH = _kprh;\n', '    }\n', '\n', '  \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "setGovernance: !gov");\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "acceptGovernance: !pendingGov");\n', '        governance = pendingGovernance;\n', '    }\n', '\n', '    function isKeeper(address keeper) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper];\n', '    }\n', '\n', '    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper]\n', '                && bonds[keeper][address(this)].add(votes[keeper]) >= minBond\n', '                && workCompleted[keeper] >= earned\n', '                && now.sub(firstSeen[keeper]) >= age;\n', '    }\n', '\n', '  \n', '    function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper]\n', '                && bonds[keeper][bond] >= minBond\n', '                && workCompleted[keeper] >= earned\n', '                && now.sub(firstSeen[keeper]) >= age;\n', '    }\n', '\n', ' \n', '    function bond(address bonding, uint amount) external nonReentrant {\n', '        require(!blacklist[msg.sender], "bond: blacklisted");\n', '        bondings[msg.sender][bonding] = now.add(BOND);\n', '        if (bonding == address(this)) {\n', '            _transferTokens(msg.sender, address(this), amount);\n', '        } else {\n', '            uint _before = IERC20(bonding).balanceOf(address(this));\n', '            IERC20(bonding).safeTransferFrom(msg.sender, address(this), amount);\n', '            amount = IERC20(bonding).balanceOf(address(this)).sub(_before);\n', '        }\n', '        pendingbonds[msg.sender][bonding] = pendingbonds[msg.sender][bonding].add(amount);\n', '        emit KeeperBonding(msg.sender, block.number, bondings[msg.sender][bonding], amount);\n', '    }\n', '\n', '   \n', '    function getKeepers() external view returns (address[] memory) {\n', '        return keeperList;\n', '    }\n', '\n', '  \n', '    function activate(address bonding) external {\n', '        require(!blacklist[msg.sender], "activate: blacklisted");\n', '        require(bondings[msg.sender][bonding] != 0 && bondings[msg.sender][bonding] < now, "activate: bonding");\n', '        _activate(msg.sender, bonding);\n', '    }\n', '    \n', '    function _activate(address keeper, address bonding) internal {\n', '        if (firstSeen[keeper] == 0) {\n', '          firstSeen[keeper] = now;\n', '          keeperList.push(keeper);\n', '          lastJob[keeper] = now;\n', '        }\n', '        keepers[keeper] = true;\n', '        _bond(bonding, keeper, pendingbonds[keeper][bonding]);\n', '        pendingbonds[keeper][bonding] = 0;\n', '        emit KeeperBonded(keeper, block.number, block.timestamp, bonds[keeper][bonding]);\n', '    }\n', '\n', '  \n', '    function unbond(address bonding, uint amount) external {\n', '        unbondings[msg.sender][bonding] = now.add(UNBOND);\n', '        _unbond(bonding, msg.sender, amount);\n', '        partialUnbonding[msg.sender][bonding] = partialUnbonding[msg.sender][bonding].add(amount);\n', '        emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender][bonding], amount);\n', '    }\n', '\n', '  \n', '    function withdraw(address bonding) external nonReentrant {\n', '        require(unbondings[msg.sender][bonding] != 0 && unbondings[msg.sender][bonding] < now, "withdraw: unbonding");\n', '        require(!disputes[msg.sender], "withdraw: disputes");\n', '\n', '        if (bonding == address(this)) {\n', '            _transferTokens(address(this), msg.sender, partialUnbonding[msg.sender][bonding]);\n', '        } else {\n', '            IERC20(bonding).safeTransfer(msg.sender, partialUnbonding[msg.sender][bonding]);\n', '        }\n', '        emit KeeperUnbound(msg.sender, block.number, block.timestamp, partialUnbonding[msg.sender][bonding]);\n', '        partialUnbonding[msg.sender][bonding] = 0;\n', '    }\n', '\n', '   \n', '    function dispute(address keeper) external {\n', '        require(msg.sender == governance, "dispute: !gov");\n', '        disputes[keeper] = true;\n', '        emit KeeperDispute(keeper, block.number);\n', '    }\n', '\n', '  \n', '    function slash(address bonded, address keeper, uint amount) public nonReentrant {\n', '        require(msg.sender == governance, "slash: !gov");\n', '        if (bonded == address(this)) {\n', '            _transferTokens(address(this), governance, amount);\n', '        } else {\n', '            IERC20(bonded).safeTransfer(governance, amount);\n', '        }\n', '        _unbond(bonded, keeper, amount);\n', '        disputes[keeper] = false;\n', '        emit KeeperSlashed(keeper, msg.sender, block.number, amount);\n', '    }\n', '\n', '    function revoke(address keeper) external {\n', '        require(msg.sender == governance, "slash: !gov");\n', '        keepers[keeper] = false;\n', '        blacklist[keeper] = true;\n', '        slash(address(this), keeper, bonds[keeper][address(this)]);\n', '    }\n', '\n', '  \n', '    function resolve(address keeper) external {\n', '        require(msg.sender == governance, "resolve: !gov");\n', '        disputes[keeper] = false;\n', '        emit KeeperResolved(keeper, block.number);\n', '    }\n', '\n', '   \n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '  \n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '   \n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAINSEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "permit: signature");\n', '        require(signatory == owner, "permit: unauthorized");\n', '        require(now <= deadline, "permit: expired");\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    \n', '    function transfer(address dst, uint amount) public returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '  \n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint(-1)) {\n', '            uint newAllowance = spenderAllowance.sub(amount, "transferFrom: exceeds spender allowance");\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        require(src != address(0), "_transferTokens: zero address");\n', '        require(dst != address(0), "_transferTokens: zero address");\n', '\n', '        balances[src] = balances[src].sub(amount, "_transferTokens: exceeds balance");\n', '        balances[dst] = balances[dst].add(amount, "_transferTokens: overflows");\n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function _getChainId() internal pure returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']