['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IVat.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the vat contract from MakerDAO\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md\n', 'interface IVat {\n', '    // function can(address, address) external view returns (uint);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function live() external view returns (uint);\n', '    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n', '    function urns(bytes32, address) external view returns (uint, uint);\n', '    function gem(bytes32, address) external view returns (uint);\n', '    // function dai(address) external view returns (uint);\n', '    function frob(bytes32, address, address, address, int, int) external;\n', '    function fork(bytes32, address, address, int, int) external;\n', '    function move(address, address, uint) external;\n', '    function flux(bytes32, address, address, uint) external;\n', '}\n', '\n', '// File: contracts/interfaces/IWeth.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function approve(address, uint) external returns (bool) ;\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IGemJoin.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using ERC20\n', 'interface IGemJoin {\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function cage() external;\n', '    function join(address usr, uint WAD) external;\n', '    function exit(address usr, uint WAD) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDaiJoin.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using Dai\n', 'interface IDaiJoin {\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function cage() external;\n', '    function join(address usr, uint WAD) external;\n', '    function exit(address usr, uint WAD) external;\n', '}\n', '\n', '// File: contracts/interfaces/IPot.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the pot contract from MakerDao\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\n', 'interface IPot {\n', '    function chi() external view returns (uint256);\n', '    function pie(address) external view returns (uint256); // Not a function, but a public variable.\n', '    function rho() external returns (uint256);\n', '    function drip() external returns (uint256);\n', '    function join(uint256) external;\n', '    function exit(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/IEnd.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the End contract from MakerDAO\n', 'interface IEnd {\n', '    function tag(bytes32) external returns(uint256);\n', '    function fix(bytes32) external returns(uint256);\n', '    function skim(bytes32, address) external;\n', '    function free(bytes32) external;\n', '    function pack(uint256) external;\n', '    function cash(bytes32, uint) external;\n', '}\n', '\n', '// File: contracts/interfaces/IChai.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the chai contract\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\n', 'interface IChai {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address dst, uint wad) external returns (bool);\n', '    function move(address src, address dst, uint wad) external returns (bool);\n', '    function transferFrom(address src, address dst, uint wad) external returns (bool);\n', '    function approve(address usr, uint wad) external returns (bool);\n', '    function dai(address usr) external returns (uint wad);\n', '    function join(address dst, uint wad) external;\n', '    function exit(address src, uint wad) external;\n', '    function draw(address src, uint wad) external;\n', '    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n', '    function nonces(address account) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ITreasury.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ITreasury {\n', '    function debt() external view returns(uint256);\n', '    function savings() external view returns(uint256);\n', '    function pushDai(address user, uint256 dai) external;\n', '    function pullDai(address user, uint256 dai) external;\n', '    function pushChai(address user, uint256 chai) external;\n', '    function pullChai(address user, uint256 chai) external;\n', '    function pushWeth(address to, uint256 weth) external;\n', '    function pullWeth(address to, uint256 weth) external;\n', '    function shutdown() external;\n', '    function live() external view returns(bool);\n', '\n', '    function vat() external view returns (IVat);\n', '    function weth() external view returns (IWeth);\n', '    function dai() external view returns (IERC20);\n', '    function daiJoin() external view returns (IDaiJoin);\n', '    function wethJoin() external view returns (IGemJoin);\n', '    function pot() external view returns (IPot);\n', '    function chai() external view returns (IChai);\n', '}\n', '\n', '// File: contracts/interfaces/IDelegable.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', 'interface IDelegable {\n', '    function addDelegate(address) external;\n', '    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC2612.sol\n', '\n', '// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC2612 standard as defined in the EIP.\n', ' *\n', " * Adds the {permit} method, which can be used to change one's\n", ' * {IERC20-allowance} without having to send a transaction, by signing a\n', ' * message. This allows users to spend tokens without having to hold Ether.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-2612.\n', ' */\n', 'interface IERC2612 {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IFYDai.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', 'interface IFYDai is IERC20, IERC2612 {\n', '    function isMature() external view returns(bool);\n', '    function maturity() external view returns(uint);\n', '    function chi0() external view returns(uint);\n', '    function rate0() external view returns(uint);\n', '    function chiGrowth() external view returns(uint);\n', '    function rateGrowth() external view returns(uint);\n', '    function mature() external;\n', '    function unlocked() external view returns (uint);\n', '    function mint(address, uint) external;\n', '    function burn(address, uint) external;\n', '    function flashMint(uint, bytes calldata) external;\n', '    function redeem(address, address, uint256) external returns (uint256);\n', '    // function transfer(address, uint) external returns (bool);\n', '    // function transferFrom(address, address, uint) external returns (bool);\n', '    // function approve(address, uint) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IController.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', 'interface IController is IDelegable {\n', '    function treasury() external view returns (ITreasury);\n', '    function series(uint256) external view returns (IFYDai);\n', '    function seriesIterator(uint256) external view returns (uint256);\n', '    function totalSeries() external view returns (uint256);\n', '    function containsSeries(uint256) external view returns (bool);\n', '    function posted(bytes32, address) external view returns (uint256);\n', '    function debtFYDai(bytes32, uint256, address) external view returns (uint256);\n', '    function debtDai(bytes32, uint256, address) external view returns (uint256);\n', '    function totalDebtDai(bytes32, address) external view returns (uint256);\n', '    function isCollateralized(bytes32, address) external view returns (bool);\n', '    function inDai(bytes32, uint256, uint256) external view returns (uint256);\n', '    function inFYDai(bytes32, uint256, uint256) external view returns (uint256);\n', '    function erase(bytes32, address) external returns (uint256, uint256);\n', '    function shutdown() external;\n', '    function post(bytes32, address, address, uint256) external;\n', '    function withdraw(bytes32, address, address, uint256) external;\n', '    function borrow(bytes32, uint256, address, address, uint256) external;\n', '    function repayFYDai(bytes32, uint256, address, address, uint256) external returns (uint256);\n', '    function repayDai(bytes32, uint256, address, address, uint256) external returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ILiquidations.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', 'interface ILiquidations {\n', '    function shutdown() external;\n', '    function totals() external view returns(uint128, uint128);\n', '    function erase(address) external returns(uint128, uint128);\n', '\n', '    function controller() external returns(IController);\n', '}\n', '\n', '// File: contracts/helpers/DecimalMath.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '/// @dev Implements simple fixed point math mul and div operations for 27 decimals.\n', 'contract DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public UNIT = 1e27;\n', '\n', '    /// @dev Multiplies x and y, assuming they are both fixed point with 27 digits.\n', '    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x.mul(y).div(UNIT);\n', '    }\n', '\n', '    /// @dev Divides x between y, assuming they are both fixed point with 27 digits.\n', '    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /// @dev Multiplies x and y, rounding up to the closest representable number.\n', '    /// Assumes x and y are both fixed point with `decimals` digits.\n', '    function muldrup(uint256 x, uint256 y) internal pure returns (uint256)\n', '    {\n', '        uint256 z = x.mul(y);\n', '        return z.mod(UNIT) == 0 ? z.div(UNIT) : z.div(UNIT).add(1);\n', '    }\n', '\n', '    /// @dev Divides x between y, rounding up to the closest representable number.\n', '    /// Assumes x and y are both fixed point with `decimals` digits.\n', '    function divdrup(uint256 x, uint256 y) internal pure returns (uint256)\n', '    {\n', '        uint256 z = x.mul(UNIT);\n', '        return z.mod(y) == 0 ? z.div(y) : z.div(y).add(1);\n', '    }\n', '}\n', '\n', '// File: contracts/Unwind.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Unwind allows everyone to recover their assets from the Yield protocol in the event of a MakerDAO shutdown.\n', ' * During the unwind process, the system debt to MakerDAO is settled first with `settleTreasury`, extracting all free weth.\n', ' * Once the Treasury is settled, any system savings are converted from Chai to Weth using `cashSavings`.\n', ' * At this point, users can settle their positions using `settle`. The MakerDAO rates will be used to convert all debt and collateral to a Weth payout.\n', ' * Users can also redeem here their fyDai for a Weth payout, using `redeem`.\n', ' */\n', 'contract Unwind is Ownable(), DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    bytes32 public constant CHAI = "CHAI";\n', '    bytes32 public constant WETH = "ETH-A";\n', '\n', '    IVat public vat;\n', '    IERC20 public dai;\n', '    IDaiJoin public daiJoin;\n', '    IWeth public weth;\n', '    IGemJoin public wethJoin;\n', '    IPot public pot;\n', '    IEnd public end;\n', '    IChai public chai;\n', '    ITreasury public treasury;\n', '    IController public controller;\n', '    ILiquidations public liquidations;\n', '\n', '    uint256 public _fix; // Dai to weth price on DSS Unwind\n', '    uint256 public _chi; // Chai to dai price on DSS Unwind\n', '\n', '    uint256 internal _treasuryWeth; // Weth that was held by treasury before settling\n', '\n', '    bool public settled;\n', '    bool public cashedOut;\n', '    bool public live = true;\n', '\n', '    /// @dev The constructor links to vat, daiJoin, weth, wethJoin, jug, pot, end, chai, treasury, controller and liquidations.\n', '    /// Liquidations should have privileged access to controller and liquidations using orchestration.\n', "    /// The constructor gives treasury and end permission on unwind's MakerDAO vaults.\n", '    constructor (\n', '        address end_,\n', '        address liquidations_\n', '    ) public {\n', '        end = IEnd(end_);\n', '        liquidations = ILiquidations(liquidations_);\n', '        controller = liquidations.controller();\n', '        treasury = controller.treasury();\n', '        vat = treasury.vat();\n', '        dai = treasury.dai();\n', '        daiJoin = treasury.daiJoin();\n', '        weth = treasury.weth();\n', '        wethJoin = treasury.wethJoin();\n', '        pot = treasury.pot();\n', '        chai = treasury.chai();\n', '\n', '        IERC20(treasury.dai()).approve(address(daiJoin), uint256(-1));\n', '        vat.hope(address(treasury));\n', '        vat.hope(address(end));\n', '    }\n', '\n', '    /// @dev max(0, x - y)\n', '    function subFloorZero(uint256 x, uint256 y) public pure returns(uint256) {\n', '        if (y >= x) return 0;\n', '        else return x - y;\n', '    }\n', '\n', '    /// @dev Safe casting from uint256 to int256\n', '    function toInt(uint256 x) internal pure returns(int256) {\n', '        require(\n', '            x <= uint256(type(int256).max),\n', '            "Treasury: Cast overflow"\n', '        );\n', '        return int256(x);\n', '    }\n', '\n', '    /// @dev Disables treasury, controller and liquidations.\n', '    function unwind() public {\n', '        require(\n', '            end.tag(WETH) != 0,\n', '            "Unwind: MakerDAO not shutting down"\n', '        );\n', '        live = false;\n', '        treasury.shutdown();\n', '        controller.shutdown();\n', '        liquidations.shutdown();\n', '    }\n', '\n', '    /// @dev Return the Dai equivalent value to a Chai amount.\n', '    /// @param chaiAmount The Chai value to convert.\n', '    /// @param chi The `chi` value from `Pot`.\n', '    function chaiToDai(uint256 chaiAmount, uint256 chi) public pure returns(uint256) {\n', '        return muld(chaiAmount, chi);\n', '    }\n', '\n', '    /// @dev Return the Weth equivalent value to a Dai amount, during Dss Shutdown\n', '    /// @param daiAmount The Dai value to convert.\n', '    /// @param fix The `fix` value from `End`.\n', '    function daiToFixWeth(uint256 daiAmount, uint256 fix) public pure returns(uint256) {\n', '        return muld(daiAmount, fix);\n', '    }\n', '\n', '    /// @dev Settle system debt in MakerDAO and free remaining collateral.\n', '    function settleTreasury() public {\n', '        require(\n', '            live == false,\n', '            "Unwind: Unwind first"\n', '        );\n', '        (uint256 ink, uint256 art) = vat.urns(WETH, address(treasury));\n', '        require(ink > 0, "Unwind: Nothing to settle");\n', '\n', '        _treasuryWeth = ink;                            // We will need this to skim profits\n', '        vat.fork(                                      // Take the treasury vault\n', '            WETH,\n', '            address(treasury),\n', '            address(this),\n', '            toInt(ink),\n', '            toInt(art)\n', '        );\n', '        end.skim(WETH, address(this));                // Settle debts\n', '        end.free(WETH);                               // Free collateral\n', '        uint256 gem = vat.gem(WETH, address(this));   // Find out how much collateral we have now\n', '        wethJoin.exit(address(this), gem);            // Take collateral out\n', '        settled = true;\n', '    }\n', '\n', '    /// @dev Put all chai savings in MakerDAO and exchange them for weth\n', '    function cashSavings() public {\n', '        require(\n', '            end.tag(WETH) != 0,\n', '            "Unwind: End.sol not caged"\n', '        );\n', '        require(\n', '            end.fix(WETH) != 0,\n', '            "Unwind: End.sol not ready"\n', '        );\n', '        \n', '        uint256 chaiTokens = chai.balanceOf(address(treasury));\n', '        require(chaiTokens > 0, "Unwind: Nothing to cash");\n', '        chai.exit(address(treasury), chaiTokens);           // Get the chai as dai\n', '\n', '        uint256 daiTokens = dai.balanceOf(address(this));   // Find out how much is the chai worth\n', '        daiJoin.join(address(this), daiTokens);             // Put the dai into MakerDAO\n', '        end.pack(daiTokens);                                // Into End.sol, more exactly\n', '        end.cash(WETH, daiTokens);                          // Exchange the dai for weth\n', '        uint256 gem = vat.gem(WETH, address(this));         // Find out how much collateral we have now\n', '        wethJoin.exit(address(this), gem);                  // Take collateral out\n', '        cashedOut = true;\n', '\n', '        _fix = end.fix(WETH);\n', '        _chi = pot.chi();\n', '    }\n', '\n', '    /// @dev Settles a series position in Controller for any user, and then returns any remaining collateral as weth using the unwind Dai to Weth price.\n', '    /// @param collateral Valid collateral type.\n', '    /// @param user User vault to settle, and wallet to receive the corresponding weth.\n', '    function settle(bytes32 collateral, address user) public {\n', '        (uint256 tokens, uint256 debt) = controller.erase(collateral, user);\n', '        require(tokens > 0, "Unwind: Nothing to settle");\n', '\n', '        uint256 remainder;\n', '        if (collateral == WETH) {\n', '            remainder = subFloorZero(tokens, daiToFixWeth(debt, _fix));\n', '        } else if (collateral == CHAI) {\n', '            remainder = daiToFixWeth(subFloorZero(chaiToDai(tokens, _chi), debt), _fix);\n', '        }\n', '        require(weth.transfer(user, remainder));\n', '    }\n', '\n', '    /// @dev Settles a user vault in Liquidations, and then returns any remaining collateral as weth using the unwind Dai to Weth price.\n', '    /// @param user User vault to settle, and wallet to receive the corresponding weth.\n', '    function settleLiquidations(address user) public {\n', '        (uint256 wethAmount, uint256 debt) = liquidations.erase(user);\n', '        require(wethAmount > 0, "Unwind: Nothing to settle");\n', '\n', '        uint256 remainder = subFloorZero(wethAmount, daiToFixWeth(debt, _fix));\n', '\n', '        require(weth.transfer(user, remainder));\n', '    }\n', '\n', "    /// @dev Redeems FYDai for weth for any user. FYDai.redeem won't work if MakerDAO is in shutdown.\n", '    /// @param maturity Maturity of an added series\n', '    /// @param user Wallet containing the fyDai to burn.\n', '    function redeem(uint256 maturity, address user) public {\n', '        IFYDai fyDai = controller.series(maturity);\n', '        require(fyDai.unlocked() == 1, "fyDai is still locked");\n', '        uint256 fyDaiAmount = fyDai.balanceOf(user);\n', '        require(fyDaiAmount > 0, "Unwind: Nothing to redeem");\n', '\n', '        fyDai.burn(user, fyDaiAmount);\n', '        require(\n', '            weth.transfer(\n', '                user,\n', '                daiToFixWeth(muld(fyDaiAmount, fyDai.chiGrowth()), _fix)\n', '            )\n', '        );\n', '    }\n', '}']