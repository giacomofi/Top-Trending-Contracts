['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IEpochUtils.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IEpochUtils {\n', '    function epochPeriodInSeconds() external view returns (uint256);\n', '\n', '    function firstEpochStartTimestamp() external view returns (uint256);\n', '\n', '    function getCurrentEpochNumber() external view returns (uint256);\n', '\n', '    function getEpochNumber(uint256 timestamp) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IKyberDao.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IKyberDao is IEpochUtils {\n', '    event Voted(\n', '        address indexed staker,\n', '        uint256 indexed epoch,\n', '        uint256 indexed campaignID,\n', '        uint256 option\n', '    );\n', '\n', '    function getLatestNetworkFeeDataWithCache()\n', '        external\n', '        returns (uint256 feeInBps, uint256 expiryTimestamp);\n', '\n', '    function getLatestBRRDataWithCache()\n', '        external\n', '        returns (\n', '            uint256 burnInBps,\n', '            uint256 rewardInBps,\n', '            uint256 rebateInBps,\n', '            uint256 epoch,\n', '            uint256 expiryTimestamp\n', '        );\n', '\n', '    function handleWithdrawal(address staker, uint256 penaltyAmount) external;\n', '\n', '    function vote(uint256 campaignID, uint256 option) external;\n', '\n', '    function getLatestNetworkFeeData()\n', '        external\n', '        view\n', '        returns (uint256 feeInBps, uint256 expiryTimestamp);\n', '\n', '    function shouldBurnRewardForEpoch(uint256 epoch)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    /**\n', "     * @dev  return staker's reward percentage in precision for a past epoch only\n", '     *       fee handler should call this function when a staker wants to claim reward\n', '     *       return 0 if staker has no votes or stakes\n', '     */\n', '    function getPastEpochRewardPercentageInPrecision(\n', '        address staker,\n', '        uint256 epoch\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev  return staker's reward percentage in precision for the current epoch\n", '     *       reward percentage is not finalized until the current epoch is ended\n', '     */\n', '    function getCurrentEpochRewardPercentageInPrecision(address staker)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IExtendedKyberDao.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IExtendedKyberDao is IKyberDao {\n', '    function kncToken() external view returns (address);\n', '\n', '    function staking() external view returns (address);\n', '\n', '    function feeHandler() external view returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/IKyberFeeHandler.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IKyberFeeHandler {\n', '    event RewardPaid(\n', '        address indexed staker,\n', '        uint256 indexed epoch,\n', '        IERC20 indexed token,\n', '        uint256 amount\n', '    );\n', '    event RebatePaid(\n', '        address indexed rebateWallet,\n', '        IERC20 indexed token,\n', '        uint256 amount\n', '    );\n', '    event PlatformFeePaid(\n', '        address indexed platformWallet,\n', '        IERC20 indexed token,\n', '        uint256 amount\n', '    );\n', '    event KncBurned(uint256 kncTWei, IERC20 indexed token, uint256 amount);\n', '\n', '    function handleFees(\n', '        IERC20 token,\n', '        address[] calldata eligibleWallets,\n', '        uint256[] calldata rebatePercentages,\n', '        address platformWallet,\n', '        uint256 platformFee,\n', '        uint256 networkFee\n', '    ) external payable;\n', '\n', '    function claimReserveRebate(address rebateWallet)\n', '        external\n', '        returns (uint256);\n', '\n', '    function claimPlatformFee(address platformWallet)\n', '        external\n', '        returns (uint256);\n', '\n', '    function claimStakerReward(address staker, uint256 epoch)\n', '        external\n', '        returns (uint256 amount);\n', '}\n', '\n', '// File: contracts/interfaces/IExtendedKyberFeeHandler.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IExtendedKyberFeeHandler is IKyberFeeHandler {\n', '    function rewardsPerEpoch(uint256) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IKyberStaking.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IKyberStaking is IEpochUtils {\n', '    event Delegated(\n', '        address indexed staker,\n', '        address indexed representative,\n', '        uint256 indexed epoch,\n', '        bool isDelegated\n', '    );\n', '    event Deposited(uint256 curEpoch, address indexed staker, uint256 amount);\n', '    event Withdraw(\n', '        uint256 indexed curEpoch,\n', '        address indexed staker,\n', '        uint256 amount\n', '    );\n', '\n', '    function initAndReturnStakerDataForCurrentEpoch(address staker)\n', '        external\n', '        returns (\n', '            uint256 stake,\n', '            uint256 delegatedStake,\n', '            address representative\n', '        );\n', '\n', '    function deposit(uint256 amount) external;\n', '\n', '    function delegate(address dAddr) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    /**\n', '     * @notice return combine data (stake, delegatedStake, representative) of a staker\n', '     * @dev allow to get staker data up to current epoch + 1\n', '     */\n', '    function getStakerData(address staker, uint256 epoch)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 stake,\n', '            uint256 delegatedStake,\n', '            address representative\n', '        );\n', '\n', '    function getLatestStakerData(address staker)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 stake,\n', '            uint256 delegatedStake,\n', '            address representative\n', '        );\n', '\n', '    /**\n', '     * @notice return raw data of a staker for an epoch\n', '     *         WARN: should be used only for initialized data\n', '     *          if data has not been initialized, it will return all 0\n', "     *          pool master shouldn't use this function to compute/distribute rewards of pool members\n", '     */\n', '    function getStakerRawData(address staker, uint256 epoch)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 stake,\n', '            uint256 delegatedStake,\n', '            address representative\n', '        );\n', '}\n', '\n', '// File: contracts/KyberPoolMaster.sol\n', '\n', 'pragma solidity 0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Kyber PoolMaster contract\n', ' * @author Protofire\n', ' * @dev Contract that allows pool masters to let pool members claim their designated rewards trustlessly and update fees\n', ' *      with sufficient notice times while maintaining full trustlessness.\n', ' */\n', 'contract KyberPoolMaster is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant MINIMUM_EPOCH_NOTICE = 1;\n', '    uint256 internal constant MAX_DELEGATION_FEE = 10000;\n', '    uint256 internal constant PRECISION = (10**18);\n', '    IERC20 internal constant ETH_TOKEN_ADDRESS = IERC20(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '\n', '    // Number of epochs after which a change on delegationFee will be applied\n', '    uint256 public immutable epochNotice;\n', '\n', '    // Mapping of if staker has claimed reward for Epoch in a feeHandler\n', '    // epoch -> member -> feeHandler -> true | false\n', '    mapping(uint256 => mapping(address => mapping(address => bool)))\n', '        public claimedDelegateReward;\n', '\n', '    struct Claim {\n', '        bool claimedByPool;\n', '        uint256 totalRewards;\n', '        uint256 totalStaked;\n', '    }\n', '    //epoch -> feeHandler -> Claim\n', '    mapping(uint256 => mapping(address => Claim)) public epochFeeHandlerClaims;\n', '\n', '    // Fee charged by poolMasters to poolMembers for services\n', '    // Denominated in 1e4 units\n', '    // 100 = 1%\n', '    struct DFeeData {\n', '        uint256 fromEpoch;\n', '        uint256 fee;\n', '        bool applied;\n', '    }\n', '\n', '    DFeeData[] public delegationFees;\n', '\n', '    IERC20 public immutable kncToken;\n', '    IExtendedKyberDao public immutable kyberDao;\n', '    IKyberStaking public immutable kyberStaking;\n', '\n', '    address[] public feeHandlersList;\n', '    mapping(address => IERC20) public rewardTokenByFeeHandler;\n', '\n', '    uint256 public immutable firstEpoch;\n', '\n', '    mapping(address => bool) public successfulClaimByFeeHandler;\n', '\n', '    struct RewardInfo {\n', '        IExtendedKyberFeeHandler kyberFeeHandler;\n', '        IERC20 rewardToken;\n', '        uint256 totalRewards;\n', '        uint256 totalFee;\n', '        uint256 rewardsAfterFee;\n', '        uint256 poolMembersShare;\n', '        uint256 poolMasterShare;\n', '    }\n', '\n', '    struct UnclaimedRewardData {\n', '        uint256 epoch;\n', '        address feeHandler;\n', '        uint256 rewards;\n', '        IERC20 rewardToken;\n', '    }\n', '\n', '    /*** Events ***/\n', '    event CommitNewFees(uint256 deadline, uint256 feeRate);\n', '    event NewFees(uint256 fromEpoch, uint256 feeRate);\n', '\n', '    event MemberClaimReward(\n', '        uint256 indexed epoch,\n', '        address indexed poolMember,\n', '        address indexed feeHandler,\n', '        IERC20 rewardToken,\n', '        uint256 reward\n', '    );\n', '\n', '    event MasterClaimReward(\n', '        uint256 indexed epoch,\n', '        address indexed feeHandler,\n', '        address indexed poolMaster,\n', '        IERC20 rewardToken,\n', '        uint256 totalRewards,\n', '        uint256 feeApplied,\n', '        uint256 feeAmount,\n', '        uint256 poolMasterShare\n', '    );\n', '\n', '    event AddFeeHandler(address indexed feeHandler, IERC20 indexed rewardToken);\n', '\n', '    event RemoveFeeHandler(address indexed feeHandler);\n', '\n', '    /**\n', '     * @notice Address deploying this contract should be able to receive ETH, owner can be changed using transferOwnership method\n', '     * @param _kyberDao KyberDao contract address\n', '     * @param _epochNotice Number of epochs after which a change on deledatioFee is will be applied\n', '     * @param _delegationFee Fee charged by poolMasters to poolMembers for services - Denominated in 1e4 units - 100 = 1%\n', '     * @param _kyberFeeHandlers Array of FeeHandlers\n', '     * @param _rewardTokens Array of ERC20 tokens used by FeeHandlers to pay reward. Use zero address if FeeHandler pays ETH\n', '     */\n', '    constructor(\n', '        address _kyberDao,\n', '        uint256 _epochNotice,\n', '        uint256 _delegationFee,\n', '        address[] memory _kyberFeeHandlers,\n', '        IERC20[] memory _rewardTokens\n', '    ) public {\n', '        require(_kyberDao != address(0), "ctor: kyberDao is missing");\n', '        require(\n', '            _epochNotice >= MINIMUM_EPOCH_NOTICE,\n', '            "ctor: Epoch Notice too low"\n', '        );\n', '        require(\n', '            _delegationFee <= MAX_DELEGATION_FEE,\n', '            "ctor: Delegation Fee greater than 100%"\n', '        );\n', '        require(\n', '            _kyberFeeHandlers.length > 0,\n', '            "ctor: at least one _kyberFeeHandlers required"\n', '        );\n', '        require(\n', '            _kyberFeeHandlers.length == _rewardTokens.length,\n', '            "ctor: _kyberFeeHandlers and _rewardTokens uneven"\n', '        );\n', '\n', '        IExtendedKyberDao _kyberDaoContract = IExtendedKyberDao(_kyberDao);\n', '        kyberDao = _kyberDaoContract;\n', '\n', '        kncToken = IERC20(_kyberDaoContract.kncToken());\n', '        kyberStaking = IKyberStaking(_kyberDaoContract.staking());\n', '\n', '        epochNotice = _epochNotice;\n', '\n', '        uint256 _firstEpoch = _kyberDaoContract.getCurrentEpochNumber();\n', '        firstEpoch = _firstEpoch;\n', '\n', '        delegationFees.push(DFeeData(_firstEpoch, _delegationFee, true));\n', '\n', '        for (uint256 i = 0; i < _kyberFeeHandlers.length; i++) {\n', '            require(\n', '                _kyberFeeHandlers[i] != address(0),\n', '                "ctor: feeHandler is missing"\n', '            );\n', '            require(\n', '                rewardTokenByFeeHandler[_kyberFeeHandlers[i]] ==\n', '                    IERC20(address(0)),\n', '                "ctor: repeated feeHandler"\n', '            );\n', '\n', '            feeHandlersList.push(_kyberFeeHandlers[i]);\n', '            rewardTokenByFeeHandler[_kyberFeeHandlers[i]] = _rewardTokens[i];\n', '\n', '            emit AddFeeHandler(\n', '                _kyberFeeHandlers[i],\n', '                rewardTokenByFeeHandler[_kyberFeeHandlers[i]]\n', '            );\n', '        }\n', '\n', '        emit CommitNewFees(_firstEpoch, _delegationFee);\n', '        emit NewFees(_firstEpoch, _delegationFee);\n', '    }\n', '\n', '    /**\n', '     * @dev adds a new FeeHandler\n', '     * @param _feeHandler FeeHandler address\n', '     * @param _rewardToken Rewards Token address\n', '     */\n', '    function addFeeHandler(address _feeHandler, IERC20 _rewardToken)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            _feeHandler != address(0),\n', '            "addFeeHandler: _feeHandler is missing"\n', '        );\n', '        require(\n', '            rewardTokenByFeeHandler[_feeHandler] == IERC20(address(0)),\n', '            "addFeeHandler: already added"\n', '        );\n', '\n', '        feeHandlersList.push(_feeHandler);\n', '        rewardTokenByFeeHandler[_feeHandler] = _rewardToken;\n', '\n', '        emit AddFeeHandler(_feeHandler, rewardTokenByFeeHandler[_feeHandler]);\n', '    }\n', '\n', '    /**\n', '     * @dev removes a FeeHandler\n', '     * @param _feeHandler FeeHandler address\n', '     */\n', '    function removeFeeHandler(address _feeHandler) external onlyOwner {\n', '        require(\n', '            rewardTokenByFeeHandler[_feeHandler] != IERC20(address(0)),\n', '            "removeFeeHandler: not added"\n', '        );\n', '        require(\n', '            !successfulClaimByFeeHandler[_feeHandler],\n', '            "removeFeeHandler: can not remove FeeHandler successfully claimed"\n', '        );\n', '\n', '        if (feeHandlersList[feeHandlersList.length - 1] != _feeHandler) {\n', '            for (uint256 i = 0; i < feeHandlersList.length; i++) {\n', '                if (feeHandlersList[i] == _feeHandler) {\n', '                    feeHandlersList[i] = feeHandlersList[feeHandlersList\n', '                        .length - 1];\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        feeHandlersList.pop();\n', '        delete rewardTokenByFeeHandler[_feeHandler];\n', '\n', '        emit RemoveFeeHandler(_feeHandler);\n', '    }\n', '\n', '    /**\n', '     * @dev call to stake more KNC for poolMaster\n', '     * @param amount amount of KNC to stake\n', '     */\n', '    function masterDeposit(uint256 amount) external onlyOwner {\n', '        require(\n', '            amount > 0,\n', '            "masterDeposit: amount to deposit should be positive"\n', '        );\n', '\n', '        require(\n', '            kncToken.transferFrom(msg.sender, address(this), amount),\n', '            "masterDeposit: can not get token"\n', '        );\n', '\n', '        // approve\n', '        kncToken.approve(address(kyberStaking), amount);\n', '\n', '        // deposit in KyberStaking\n', '        kyberStaking.deposit(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev call to withdraw KNC from staking\n', '     * @param amount amount of KNC to withdraw\n', '     */\n', '    function masterWithdraw(uint256 amount) external onlyOwner {\n', '        require(amount > 0, "masterWithdraw: amount is 0");\n', '\n', '        // withdraw from KyberStaking\n', '        kyberStaking.withdraw(amount);\n', '\n', '        // transfer KNC back to pool master\n', '        require(\n', '            kncToken.transfer(msg.sender, amount),\n', '            "masterWithdraw: can not transfer knc to the pool master"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev  vote for an option of a campaign\n', '     *       options are indexed from 1 to number of options\n', '     * @param campaignID id of campaign to vote for\n', '     * @param option id of options to vote for\n', '     */\n', '    function vote(uint256 campaignID, uint256 option) external onlyOwner {\n', '        kyberDao.vote(campaignID, option);\n', '    }\n', '\n', '    /**\n', '     * @dev  set a new delegation fee to be applied in current epoch + epochNotice\n', '     * @param _fee new fee\n', '     */\n', '    function commitNewFee(uint256 _fee) external onlyOwner {\n', '        require(\n', '            _fee <= MAX_DELEGATION_FEE,\n', '            "commitNewFee: Delegation Fee greater than 100%"\n', '        );\n', '\n', '        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\n', '        uint256 fromEpoch = curEpoch.add(epochNotice);\n', '\n', '        DFeeData storage lastFee = delegationFees[delegationFees.length - 1];\n', '\n', '        if (lastFee.fromEpoch > curEpoch) {\n', '            lastFee.fromEpoch = fromEpoch;\n', '            lastFee.fee = _fee;\n', '        } else {\n', '            if (!lastFee.applied) {\n', '                applyFee(lastFee);\n', '            }\n', '\n', '            delegationFees.push(DFeeData(fromEpoch, _fee, false));\n', '        }\n', '        emit CommitNewFees(fromEpoch.sub(1), _fee);\n', '    }\n', '\n', '    /**\n', '     * @dev Applies the pending new fee\n', '     */\n', '    function applyPendingFee() public {\n', '        DFeeData storage lastFee = delegationFees[delegationFees.length - 1];\n', '        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\n', '\n', '        if (lastFee.fromEpoch <= curEpoch && !lastFee.applied) {\n', '            applyFee(lastFee);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Applies a pending fee\n', '     * @param fee to be applied\n', '     */\n', '    function applyFee(DFeeData storage fee) internal {\n', '        fee.applied = true;\n', '        emit NewFees(fee.fromEpoch, fee.fee);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the id of the delegation fee corresponding to the given epoch\n', '     * @param _epoch for which epoch is querying delegation fee\n', '     * @param _from delegationFees starting index\n', '     */\n', '    function getEpochDFeeDataId(uint256 _epoch, uint256 _from)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (delegationFees[_from].fromEpoch > _epoch) {\n', '            return _from;\n', '        }\n', '\n', '        uint256 left = _from;\n', '        uint256 right = delegationFees.length;\n', '\n', '        while (left < right) {\n', '            uint256 m = (left + right).div(2);\n', '            if (delegationFees[m].fromEpoch > _epoch) {\n', '                right = m;\n', '            } else {\n', '                left = m + 1;\n', '            }\n', '        }\n', '\n', '        return right - 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the the delegation fee data corresponding to the given epoch\n', '     * @param epoch for which epoch is querying delegation fee\n', '     */\n', '    function getEpochDFeeData(uint256 epoch)\n', '        public\n', '        view\n', '        returns (DFeeData memory epochDFee)\n', '    {\n', '        epochDFee = delegationFees[getEpochDFeeDataId(epoch, 0)];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the the delegation fee data corresponding to the current epoch\n', '     */\n', '    function delegationFee() public view returns (DFeeData memory) {\n', '        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\n', '        return getEpochDFeeData(curEpoch);\n', '    }\n', '\n', '    /**\n', '     * @dev  Queries the amount of unclaimed rewards for the pool in a given epoch and feeHandler\n', '     *       return 0 if PoolMaster has calledRewardMaster\n', "     *       return 0 if staker's reward percentage in precision for the epoch is 0\n", '     *       return 0 if total reward for the epoch is 0\n', '     * @param _epoch for which epoch is querying unclaimed reward\n', '     * @param _feeHandler FeeHandler address\n', '     */\n', '    function getUnclaimedRewards(\n', '        uint256 _epoch,\n', '        IExtendedKyberFeeHandler _feeHandler\n', '    ) public view returns (uint256) {\n', '        if (epochFeeHandlerClaims[_epoch][address(_feeHandler)].claimedByPool) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 perInPrecision = kyberDao\n', '            .getPastEpochRewardPercentageInPrecision(address(this), _epoch);\n', '        if (perInPrecision == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 rewardsPerEpoch = _feeHandler.rewardsPerEpoch(_epoch);\n', '        if (rewardsPerEpoch == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return rewardsPerEpoch.mul(perInPrecision).div(PRECISION);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns data related to all epochs and feeHandlers with unclaimed rewards, for the pool.\n', '     */\n', '    function getUnclaimedRewardsData()\n', '        external\n', '        view\n', '        returns (UnclaimedRewardData[] memory)\n', '    {\n', '        uint256 currentEpoch = kyberDao.getCurrentEpochNumber();\n', '        uint256 maxEpochNumber = currentEpoch.sub(firstEpoch);\n', '        uint256[] memory epochGroup = new uint256[](maxEpochNumber);\n', '        uint256 e = 0;\n', '        for (uint256 epoch = firstEpoch; epoch < currentEpoch; epoch++) {\n', '            epochGroup[e] = epoch;\n', '            e++;\n', '        }\n', '\n', '        return _getUnclaimedRewardsData(epochGroup, feeHandlersList);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns data related to all epochs and feeHandlers, from the given groups, with unclaimed rewards, for the pool.\n', '     */\n', '    function getUnclaimedRewardsData(\n', '        uint256[] calldata _epochGroup,\n', '        address[] calldata _feeHandlerGroup\n', '    ) external view returns (UnclaimedRewardData[] memory) {\n', '        return _getUnclaimedRewardsData(_epochGroup, _feeHandlerGroup);\n', '    }\n', '\n', '    function _getUnclaimedRewardsData(\n', '        uint256[] memory _epochGroup,\n', '        address[] memory _feeHandlerGroup\n', '    ) internal view returns (UnclaimedRewardData[] memory) {\n', '\n', '            UnclaimedRewardData[] memory epochFeeHanlderRewards\n', '         = new UnclaimedRewardData[](\n', '            _epochGroup.length.mul(_feeHandlerGroup.length)\n', '        );\n', '        uint256 rewardsCounter = 0;\n', '        for (uint256 e = 0; e < _epochGroup.length; e++) {\n', '            for (uint256 f = 0; f < _feeHandlerGroup.length; f++) {\n', '                uint256 unclaimed = getUnclaimedRewards(\n', '                    _epochGroup[e],\n', '                    IExtendedKyberFeeHandler(_feeHandlerGroup[f])\n', '                );\n', '\n', '                if (unclaimed > 0) {\n', '                    epochFeeHanlderRewards[rewardsCounter] = UnclaimedRewardData(\n', '                        _epochGroup[e],\n', '                        _feeHandlerGroup[f],\n', '                        unclaimed,\n', '                        rewardTokenByFeeHandler[_feeHandlerGroup[f]]\n', '                    );\n', '                    rewardsCounter++;\n', '                }\n', '            }\n', '        }\n', '\n', '        UnclaimedRewardData[] memory result = new UnclaimedRewardData[](\n', '            rewardsCounter\n', '        );\n', '        for (uint256 i = 0; i < (rewardsCounter); i++) {\n', '            result[i] = epochFeeHanlderRewards[i];\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev  Claims rewards for a given group of epochs in all feeHandlers, distribute fees and its share to poolMaster\n', '     * @param _epochGroup An array of epochs for which rewards are being claimed. Asc order and uniqueness is required.\n', '     */\n', '    function claimRewardsMaster(uint256[] memory _epochGroup) public {\n', '        claimRewardsMaster(_epochGroup, feeHandlersList);\n', '    }\n', '\n', '    /**\n', '     * @dev  Claims rewards for a given group of epochs and a given group of feeHandlers, distribute fees and its share to poolMaster\n', '     * @param _epochGroup An array of epochs for which rewards are being claimed. Asc order and uniqueness is required.\n', '     * @param _feeHandlerGroup An array of FeeHandlers for which rewards are being claimed.\n', '     */\n', '    function claimRewardsMaster(\n', '        uint256[] memory _epochGroup,\n', '        address[] memory _feeHandlerGroup\n', '    ) public {\n', '        require(_epochGroup.length > 0, "cRMaster: _epochGroup required");\n', '        require(\n', '            isOrderedSet(_epochGroup),\n', '            "cRMaster: order and uniqueness required"\n', '        );\n', '        require(\n', '            _feeHandlerGroup.length > 0,\n', '            "cRMaster: _feeHandlerGroup required"\n', '        );\n', '\n', '        uint256[] memory accruedByFeeHandler = new uint256[](\n', '            _feeHandlerGroup.length\n', '        );\n', '\n', '        uint256 feeId = 0;\n', '\n', '        for (uint256 j = 0; j < _epochGroup.length; j++) {\n', '            uint256 _epoch = _epochGroup[j];\n', '            feeId = getEpochDFeeDataId(_epoch, feeId);\n', '            DFeeData storage epochDFee = delegationFees[feeId];\n', '\n', '            if (!epochDFee.applied) {\n', '                applyFee(epochDFee);\n', '            }\n', '\n', '            (uint256 stake, uint256 delegatedStake, ) = kyberStaking\n', '                .getStakerRawData(address(this), _epoch);\n', '\n', '            for (uint256 i = 0; i < _feeHandlerGroup.length; i++) {\n', '                RewardInfo memory rewardInfo = _claimRewardsFromKyber(\n', '                    _epoch,\n', '                    _feeHandlerGroup[i],\n', '                    epochDFee,\n', '                    stake,\n', '                    delegatedStake\n', '                );\n', '\n', '                if (rewardInfo.totalRewards == 0) {\n', '                    continue;\n', '                }\n', '\n', '                accruedByFeeHandler[i] = accruedByFeeHandler[i].add(\n', '                    rewardInfo.poolMasterShare\n', '                );\n', '\n', '                if (!successfulClaimByFeeHandler[_feeHandlerGroup[i]]) {\n', '                    successfulClaimByFeeHandler[_feeHandlerGroup[i]] = true;\n', '                }\n', '            }\n', '        }\n', '\n', '        address poolMaster = owner();\n', '        for (uint256 k = 0; k < accruedByFeeHandler.length; k++) {\n', '            _sendTokens(\n', '                rewardTokenByFeeHandler[_feeHandlerGroup[k]],\n', '                poolMaster,\n', '                accruedByFeeHandler[k],\n', '                "cRMaster: poolMaster share transfer failed"\n', '            );\n', '        }\n', '    }\n', '\n', '    function _claimRewardsFromKyber(\n', '        uint256 _epoch,\n', '        address _feeHandlerAddress,\n', '        DFeeData memory epochDFee,\n', '        uint256 stake,\n', '        uint256 delegatedStake\n', '    ) internal returns (RewardInfo memory rewardInfo) {\n', '        rewardInfo.kyberFeeHandler = IExtendedKyberFeeHandler(\n', '            _feeHandlerAddress\n', '        );\n', '        uint256 unclaimed = getUnclaimedRewards(\n', '            _epoch,\n', '            rewardInfo.kyberFeeHandler\n', '        );\n', '\n', '        if (unclaimed > 0) {\n', '            rewardInfo\n', '                .rewardToken = rewardTokenByFeeHandler[_feeHandlerAddress];\n', '\n', '            rewardInfo.kyberFeeHandler.claimStakerReward(address(this), _epoch);\n', '\n', '            rewardInfo.totalRewards = unclaimed;\n', '\n', '            rewardInfo.totalFee = rewardInfo\n', '                .totalRewards\n', '                .mul(epochDFee.fee)\n', '                .div(MAX_DELEGATION_FEE);\n', '            rewardInfo.rewardsAfterFee = rewardInfo.totalRewards.sub(\n', '                rewardInfo.totalFee\n', '            );\n', '\n', '            rewardInfo.poolMembersShare = calculateRewardsShare(\n', '                delegatedStake,\n', '                stake.add(delegatedStake),\n', '                rewardInfo.rewardsAfterFee\n', '            );\n', '            rewardInfo.poolMasterShare = rewardInfo.totalRewards.sub(\n', '                rewardInfo.poolMembersShare\n', '            ); // fee + poolMaster stake share\n', '\n', '            epochFeeHandlerClaims[_epoch][_feeHandlerAddress] = Claim(\n', '                true,\n', '                rewardInfo.poolMembersShare,\n', '                delegatedStake\n', '            );\n', '\n', '            emit MasterClaimReward(\n', '                _epoch,\n', '                _feeHandlerAddress,\n', '                payable(owner()),\n', '                rewardInfo.rewardToken,\n', '                rewardInfo.totalRewards,\n', '                epochDFee.fee,\n', '                rewardInfo.totalFee,\n', '                rewardInfo.poolMasterShare.sub(rewardInfo.totalFee)\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev  Helper method to transfer tokens\n', '     * @param _token address of the token\n', '     * @param _receiver account that will receive the transfer\n', '     * @param _value the amount of tokens to transfer\n', '     * @param _errorMsg error msg in case transfer of native tokens fails\n', '     */\n', '    function _sendTokens(\n', '        IERC20 _token,\n', '        address _receiver,\n', '        uint256 _value,\n', '        string memory _errorMsg\n', '    ) internal {\n', '        if (_value == 0) {\n', '            return;\n', '        }\n', '\n', '        if (_token == ETH_TOKEN_ADDRESS) {\n', '            (bool success, ) = _receiver.call{value: _value}("");\n', '            require(success, _errorMsg);\n', '        } else {\n', '            SafeERC20.safeTransfer(_token, _receiver, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev  Queries the amount of unclaimed rewards for the pool member in a given epoch and feeHandler\n', '     *       return 0 if PoolMaster has not called claimRewardMaster\n', '     *       return 0 if PoolMember has previously claimed reward for the epoch\n', '     *       return 0 if PoolMember has not stake for the epoch\n', '     *       return 0 if PoolMember has not delegated it stake to this contract for the epoch\n', '     * @param _poolMember address of pool member\n', '     * @param _epoch for which epoch the member is querying unclaimed reward\n', '     * @param _feeHandler FeeHandler address\n', '     */\n', '    function getUnclaimedRewardsMember(\n', '        address _poolMember,\n', '        uint256 _epoch,\n', '        address _feeHandler\n', '    ) public view returns (uint256) {\n', '        if (\n', '            !epochFeeHandlerClaims[_epoch][address(_feeHandler)].claimedByPool\n', '        ) {\n', '            return 0;\n', '        }\n', '\n', '        if (claimedDelegateReward[_epoch][_poolMember][_feeHandler]) {\n', '            return 0;\n', '        }\n', '\n', '        (uint256 stake, , address representative) = kyberStaking.getStakerData(\n', '            _poolMember,\n', '            _epoch\n', '        );\n', '\n', '        if (stake == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if (representative != address(this)) {\n', '            return 0;\n', '        }\n', '\n', '\n', '            Claim memory rewardForEpoch\n', '         = epochFeeHandlerClaims[_epoch][_feeHandler];\n', '\n', '        return\n', '            calculateRewardsShare(\n', '                stake,\n', '                rewardForEpoch.totalStaked,\n', '                rewardForEpoch.totalRewards\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev  Returns data related to all epochs and feeHandlers with unclaimed rewards, for a the poolMember. From initial to current epoch.\n', '     * @param _poolMember address of pool member\n', '     */\n', '    function getAllUnclaimedRewardsDataMember(address _poolMember)\n', '        external\n', '        view\n', '        returns (UnclaimedRewardData[] memory)\n', '    {\n', '        uint256 currentEpoch = kyberDao.getCurrentEpochNumber();\n', '        return\n', '            _getAllUnclaimedRewardsDataMember(\n', '                _poolMember,\n', '                firstEpoch,\n', '                currentEpoch\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns data related to all epochs and feeHandlers with unclaimed rewards, for a the poolMember.\n', '     * @param _poolMember address of pool member\n', '     * @param _fromEpoch initial epoch parameter\n', '     * @param _toEpoch end epoch parameter\n', '     */\n', '    function getAllUnclaimedRewardsDataMember(\n', '        address _poolMember,\n', '        uint256 _fromEpoch,\n', '        uint256 _toEpoch\n', '    ) external view returns (UnclaimedRewardData[] memory) {\n', '        return\n', '            _getAllUnclaimedRewardsDataMember(\n', '                _poolMember,\n', '                _fromEpoch,\n', '                _toEpoch\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Queries data related to epochs and feeHandlers with unclaimed rewards, for a the poolMember\n', '     * @param _poolMember address of pool member\n', '     * @param _fromEpoch initial epoch parameter\n', '     * @param _toEpoch end epoch parameter\n', '     */\n', '    function _getAllUnclaimedRewardsDataMember(\n', '        address _poolMember,\n', '        uint256 _fromEpoch,\n', '        uint256 _toEpoch\n', '    ) internal view returns (UnclaimedRewardData[] memory) {\n', '        uint256 maxEpochNumber = _toEpoch.sub(_fromEpoch).add(1);\n', '        uint256[] memory epochGroup = new uint256[](maxEpochNumber);\n', '        uint256 e = 0;\n', '        for (uint256 epoch = _fromEpoch; epoch <= _toEpoch; epoch++) {\n', '            epochGroup[e] = epoch;\n', '            e++;\n', '        }\n', '\n', '        return\n', '            _getUnclaimedRewardsDataMember(\n', '                _poolMember,\n', '                epochGroup,\n', '                feeHandlersList\n', '            );\n', '    }\n', '\n', '    function _getUnclaimedRewardsDataMember(\n', '        address _poolMember,\n', '        uint256[] memory _epochGroup,\n', '        address[] memory _feeHandlerGroup\n', '    ) internal view returns (UnclaimedRewardData[] memory) {\n', '\n', '            UnclaimedRewardData[] memory epochFeeHanlderRewards\n', '         = new UnclaimedRewardData[](\n', '            _epochGroup.length.mul(_feeHandlerGroup.length)\n', '        );\n', '\n', '        uint256 rewardsCounter = 0;\n', '        for (uint256 e = 0; e < _epochGroup.length; e++) {\n', '            for (uint256 f = 0; f < _feeHandlerGroup.length; f++) {\n', '                uint256 unclaimed = getUnclaimedRewardsMember(\n', '                    _poolMember,\n', '                    _epochGroup[e],\n', '                    _feeHandlerGroup[f]\n', '                );\n', '\n', '                if (unclaimed > 0) {\n', '                    epochFeeHanlderRewards[rewardsCounter] = UnclaimedRewardData(\n', '                        _epochGroup[e],\n', '                        _feeHandlerGroup[f],\n', '                        unclaimed,\n', '                        rewardTokenByFeeHandler[_feeHandlerGroup[f]]\n', '                    );\n', '                    rewardsCounter++;\n', '                }\n', '            }\n', '        }\n', '\n', '        UnclaimedRewardData[] memory result = new UnclaimedRewardData[](\n', '            rewardsCounter\n', '        );\n', '        for (uint256 i = 0; i < (rewardsCounter); i++) {\n', '            result[i] = epochFeeHanlderRewards[i];\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Someone claims rewards for a PoolMember in a given group of epochs in all feeHandlers.\n', '     *      It will transfer rewards where epoch->feeHandler has been claimed by the pool and not yet by the member.\n', '     *      This contract will keep locked remainings from rounding at a wei level.\n', '     * @param _epochGroup An array of epochs for which rewards are being claimed\n', '     * @param _poolMember PoolMember address to claim rewards for\n', '     */\n', '    function claimRewardsMember(\n', '        address _poolMember,\n', '        uint256[] memory _epochGroup\n', '    ) public {\n', '        _claimRewardsMember(_poolMember, _epochGroup, feeHandlersList);\n', '    }\n', '\n', '    /**\n', '     * @dev Someone claims rewards for a PoolMember in a given group of epochs in a given group of feeHandlers.\n', '     *      It will transfer rewards where epoch->feeHandler has been claimed by the pool and not yet by the member.\n', '     *      This contract will keep locked remainings from rounding at a wei level.\n', '     * @param _epochGroup An array of epochs for which rewards are being claimed\n', '     * @param _feeHandlerGroup An array of FeeHandlers for which rewards are being claimed\n', '     * @param _poolMember PoolMember address to claim rewards for\n', '     */\n', '    function claimRewardsMember(\n', '        address _poolMember,\n', '        uint256[] memory _epochGroup,\n', '        address[] memory _feeHandlerGroup\n', '    ) public {\n', '        _claimRewardsMember(_poolMember, _epochGroup, _feeHandlerGroup);\n', '    }\n', '\n', '    function _claimRewardsMember(\n', '        address _poolMember,\n', '        uint256[] memory _epochGroup,\n', '        address[] memory _feeHandlerGroup\n', '    ) internal {\n', '        require(_epochGroup.length > 0, "cRMember: _epochGroup required");\n', '        require(\n', '            _feeHandlerGroup.length > 0,\n', '            "cRMember: _feeHandlerGroup required"\n', '        );\n', '\n', '        uint256[] memory accruedByFeeHandler = new uint256[](\n', '            _feeHandlerGroup.length\n', '        );\n', '\n', '        for (uint256 j = 0; j < _epochGroup.length; j++) {\n', '            uint256 _epoch = _epochGroup[j];\n', '\n', '            for (uint256 i = 0; i < _feeHandlerGroup.length; i++) {\n', '                uint256 poolMemberShare = getUnclaimedRewardsMember(\n', '                    _poolMember,\n', '                    _epoch,\n', '                    _feeHandlerGroup[i]\n', '                );\n', '\n', '\n', '                    IERC20 rewardToken\n', '                 = rewardTokenByFeeHandler[_feeHandlerGroup[i]];\n', '\n', '                if (poolMemberShare == 0) {\n', '                    continue;\n', '                }\n', '\n', '                accruedByFeeHandler[i] = accruedByFeeHandler[i].add(\n', '                    poolMemberShare\n', '                );\n', '\n', '                claimedDelegateReward[_epoch][_poolMember][_feeHandlerGroup[i]] = true;\n', '\n', '                emit MemberClaimReward(\n', '                    _epoch,\n', '                    _poolMember,\n', '                    _feeHandlerGroup[i],\n', '                    rewardToken,\n', '                    poolMemberShare\n', '                );\n', '            }\n', '        }\n', '\n', '        // distribute _poolMember rewards share\n', '        for (uint256 k = 0; k < accruedByFeeHandler.length; k++) {\n', '            _sendTokens(\n', '                rewardTokenByFeeHandler[_feeHandlerGroup[k]],\n', '                _poolMember,\n', '                accruedByFeeHandler[k],\n', '                "cRMember: poolMember share transfer failed"\n', '            );\n', '        }\n', '    }\n', '\n', '    // Utils\n', '\n', '    /**\n', '     * @dev Calculates rewards share based on the stake over the total stake\n', '     */\n', '    function calculateRewardsShare(\n', '        uint256 stake,\n', '        uint256 totalStake,\n', '        uint256 rewards\n', '    ) internal pure returns (uint256) {\n', '        return stake.mul(rewards).div(totalStake);\n', '    }\n', '\n', '    /**\n', '     * @dev Queries the number of elements in delegationFees\n', '     */\n', '    function delegationFeesLength() public view returns (uint256) {\n', '        return delegationFees.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Queries the number of elements in feeHandlersList\n', '     */\n', '    function feeHandlersListLength() public view returns (uint256) {\n', '        return feeHandlersList.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if elements in array are ordered and unique\n', '     */\n', '    function isOrderedSet(uint256[] memory numbers)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        bool isOrdered = true;\n', '\n', '        if (numbers.length > 1) {\n', '            for (uint256 i = 0; i < numbers.length - 1; i++) {\n', '                // strict inequality ensures both ordering and uniqueness\n', '                if (numbers[i] >= numbers[i + 1]) {\n', '                    isOrdered = false;\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        return isOrdered;\n', '    }\n', '\n', '    /**\n', '     * @dev Enables the contract to receive ETH\n', '     */\n', '    receive() external payable {\n', '        require(\n', '            rewardTokenByFeeHandler[msg.sender] == ETH_TOKEN_ADDRESS,\n', '            "only accept ETH from a KyberFeeHandler"\n', '        );\n', '    }\n', '}']