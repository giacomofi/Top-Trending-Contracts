['/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '\n', '// File: contracts/interfaces/BPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'abstract contract BPoolInterface {\n', '    function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external virtual;\n', '    function swapExactAmountIn(address, uint, address, uint, uint) external virtual returns (uint, uint);\n', '    function swapExactAmountOut(address, uint, address, uint, uint) external virtual returns (uint, uint);\n', '    function calcInGivenOut(uint, uint, uint, uint, uint, uint) public pure virtual returns (uint);\n', '    function getDenormalizedWeight(address) external view virtual returns (uint);\n', '    function getBalance(address) external view virtual returns (uint);\n', '    function getSwapFee() external view virtual returns (uint);\n', '    function totalSupply() external view virtual returns (uint);\n', '    function balanceOf(address) external view virtual returns (uint);\n', '    function getTotalDenormalizedWeight() external view virtual returns (uint);\n', '\n', '    function getCommunityFee() external view virtual returns (uint, uint, uint, address);\n', '    function calcAmountWithCommunityFee(uint, uint, address) external view virtual returns (uint, uint);\n', '    function getRestrictions() external view virtual returns (address);\n', '\n', '    function getCurrentTokens() external view virtual returns (address[] memory tokens);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/TokenInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'abstract contract TokenInterface is IERC20 {\n', '    function deposit() public virtual payable;\n', '    function withdraw(uint) public virtual;\n', '}\n', '\n', '// File: contracts/IPoolRestrictions.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IPoolRestrictions {\n', '    function getMaxTotalSupply(address _pool) external virtual view returns(uint256);\n', '    function isVotingSignatureAllowed(address _votingAddress, bytes4 _signature) external virtual view returns(bool);\n', '    function isWithoutFee(address _addr) external virtual view returns(bool);\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/EthPiptSwap.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EthPiptSwap is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for TokenInterface;\n', '\n', '    TokenInterface public weth;\n', '    TokenInterface public cvp;\n', '    BPoolInterface public pipt;\n', '\n', '    uint256[] public feeLevels;\n', '    uint256[] public feeAmounts;\n', '    address public feePayout;\n', '    address public feeManager;\n', '\n', '    mapping(address => address) public uniswapEthPairByTokenAddress;\n', '    mapping(address => bool) public reApproveTokens;\n', '    uint256 public defaultSlippage;\n', '\n', '    struct CalculationStruct {\n', '        uint256 tokenShare;\n', '        uint256 ethRequired;\n', '        uint256 tokenReserve;\n', '        uint256 ethReserve;\n', '    }\n', '\n', '    event SetTokenSetting(address indexed token, bool reApprove, address uniswapPair);\n', '    event SetDefaultSlippage(uint256 newDefaultSlippage);\n', '    event SetFees(address indexed sender, uint256[] newFeeLevels, uint256[] newFeeAmounts, address indexed feePayout, address indexed feeManager);\n', '\n', '    event EthToPiptSwap(address indexed user, uint256 ethSwapAmount, uint256 ethFeeAmount, uint256 piptAmount, uint256 piptCommunityFee);\n', '    event OddEth(address indexed user, uint256 amount);\n', '    event PayoutCVP(address indexed receiver, uint256 wethAmount, uint256 cvpAmount);\n', '\n', '    constructor(\n', '        address _weth,\n', '        address _cvp,\n', '        address _pipt,\n', '        address _feeManager\n', '    ) public Ownable() {\n', '        weth = TokenInterface(_weth);\n', '        cvp = TokenInterface(_cvp);\n', '        pipt = BPoolInterface(_pipt);\n', '        feeManager = _feeManager;\n', '        defaultSlippage = 0.02 ether;\n', '    }\n', '\n', '    modifier onlyFeeManagerOrOwner() {\n', '        require(msg.sender == feeManager || msg.sender == owner(), "NOT_FEE_MANAGER");\n', '        _;\n', '    }\n', '\n', '    receive() external payable {\n', '        if (msg.sender != tx.origin) {\n', '            return;\n', '        }\n', '        swapEthToPipt(defaultSlippage);\n', '    }\n', '\n', '    function swapEthToPipt(uint256 _slippage) public payable {\n', '        (, uint256 swapAmount) = calcEthFee(msg.value);\n', '\n', '        address[] memory tokens = pipt.getCurrentTokens();\n', '\n', '        (\n', '            uint256[] memory tokensInPipt,\n', '            uint256[] memory ethInUniswap,\n', '            uint256 poolAmountOut\n', '        ) = getEthAndTokensIn(swapAmount, tokens, _slippage);\n', '\n', '        swapEthToPiptByInputs(tokensInPipt, ethInUniswap, poolAmountOut);\n', '    }\n', '\n', '    function swapEthToPiptByInputs(\n', '        uint256[] memory tokensInPipt,\n', '        uint256[] memory ethInUniswap,\n', '        uint256 poolAmountOut\n', '    )\n', '        public\n', '        payable\n', '    {\n', '        {\n', '            address poolRestrictions = pipt.getRestrictions();\n', '            if(address(poolRestrictions) != address(0)) {\n', '                uint maxTotalSupply = IPoolRestrictions(poolRestrictions).getMaxTotalSupply(address(pipt));\n', '                require(pipt.totalSupply().add(poolAmountOut) <= maxTotalSupply, "PIPT_MAX_SUPPLY");\n', '            }\n', '        }\n', '\n', '        require(msg.value > 0, "ETH required");\n', '        weth.deposit.value(msg.value)();\n', '\n', '        (uint256 feeAmount, uint256 swapAmount) = calcEthFee(msg.value);\n', '\n', '        uint ratio = poolAmountOut.mul(1 ether).div(pipt.totalSupply()).add(10);\n', '\n', '        address[] memory tokens = pipt.getCurrentTokens();\n', '        uint256 len = tokens.length;\n', '\n', '        uint256 totalEthSwap = 0;\n', '        for(uint256 i = 0; i < len; i++) {\n', '            IUniswapV2Pair tokenPair = uniswapPairFor(tokens[i]);\n', '\n', '            (uint256 tokenReserve, uint256 ethReserve,) = tokenPair.getReserves();\n', '            tokensInPipt[i] = ratio.mul(pipt.getBalance(tokens[i])).div(1 ether);\n', '            ethInUniswap[i] = getAmountIn(tokensInPipt[i], ethReserve, tokenReserve);\n', '\n', '            weth.transfer(address(tokenPair), ethInUniswap[i]);\n', '\n', '            tokenPair.swap(tokensInPipt[i], uint(0), address(this), new bytes(0));\n', '            totalEthSwap = totalEthSwap.add(ethInUniswap[i]);\n', '\n', '            if(reApproveTokens[tokens[i]]) {\n', '                TokenInterface(tokens[i]).approve(address(pipt), 0);\n', '            }\n', '\n', '            TokenInterface(tokens[i]).approve(address(pipt), tokensInPipt[i]);\n', '        }\n', '\n', '        (, uint communityJoinFee, ,) = pipt.getCommunityFee();\n', '        (uint poolAmountOutAfterFee, uint poolAmountOutFee) = pipt.calcAmountWithCommunityFee(\n', '            poolAmountOut,\n', '            communityJoinFee,\n', '            address(this)\n', '        );\n', '\n', '        emit EthToPiptSwap(msg.sender, swapAmount, feeAmount, poolAmountOut, poolAmountOutFee);\n', '\n', '        pipt.joinPool(poolAmountOut, tokensInPipt);\n', '        pipt.transfer(msg.sender, poolAmountOutAfterFee);\n', '\n', '        uint256 ethDiff = swapAmount.sub(totalEthSwap);\n', '        if (ethDiff > 0) {\n', '            weth.withdraw(ethDiff);\n', '            msg.sender.transfer(ethDiff);\n', '            emit OddEth(msg.sender, ethDiff);\n', '        }\n', '    }\n', '\n', '    function convertOddToCvpAndSendToPayout(address[] memory oddTokens) public {\n', '        require(msg.sender == tx.origin && !Address.isContract(msg.sender), "Call from contract not allowed");\n', '\n', '        uint256 len = oddTokens.length;\n', '\n', '        uint256 totalEthSwap = 0;\n', '        for(uint256 i = 0; i < len; i++) {\n', '            uint256 tokenBalance = TokenInterface(oddTokens[i]).balanceOf(address(this));\n', '            IUniswapV2Pair tokenPair = uniswapPairFor(oddTokens[i]);\n', '\n', '            (uint256 tokenReserve, uint256 ethReserve,) = tokenPair.getReserves();\n', '            uint256 wethOut = getAmountOut(tokenBalance, tokenReserve, ethReserve);\n', '\n', '            TokenInterface(oddTokens[i]).transfer(address(tokenPair), tokenBalance);\n', '\n', '            tokenPair.swap(uint(0), wethOut, address(this), new bytes(0));\n', '        }\n', '\n', '        uint256 wethBalance = weth.balanceOf(address(this));\n', '\n', '        IUniswapV2Pair cvpPair = uniswapPairFor(address(cvp));\n', '\n', '        (uint256 cvpReserve, uint256 ethReserve,) = cvpPair.getReserves();\n', '        uint256 cvpOut = getAmountOut(wethBalance, ethReserve, cvpReserve);\n', '\n', '        weth.transfer(address(cvpPair), wethBalance);\n', '\n', '        cvpPair.swap(cvpOut, uint(0), address(this), new bytes(0));\n', '\n', '        cvp.transfer(feePayout, cvpOut);\n', '\n', '        emit PayoutCVP(feePayout, wethBalance, cvpOut);\n', '    }\n', '\n', '    function setFees(\n', '        uint256[] calldata _feeLevels,\n', '        uint256[] calldata _feeAmounts,\n', '        address _feePayout,\n', '        address _feeManager\n', '    )\n', '        external\n', '        onlyFeeManagerOrOwner\n', '    {\n', '        feeLevels = _feeLevels;\n', '        feeAmounts = _feeAmounts;\n', '        feePayout = _feePayout;\n', '        feeManager = _feeManager;\n', '\n', '        emit SetFees(msg.sender, _feeLevels, _feeAmounts, _feePayout, _feeManager);\n', '    }\n', '\n', '    function setTokensSettings(\n', '        address[] memory _tokens,\n', '        address[] memory _pairs,\n', '        bool[] memory _reapprove\n', '    ) external onlyOwner {\n', '        uint256 len = _tokens.length;\n', '        require(len == _pairs.length && len == _reapprove.length, "Lengths are not equal");\n', '        for(uint i = 0; i < _tokens.length; i++) {\n', '            uniswapEthPairByTokenAddress[_tokens[i]] = _pairs[i];\n', '            reApproveTokens[_tokens[i]] = _reapprove[i];\n', '            emit SetTokenSetting(_tokens[i], _reapprove[i], _pairs[i]);\n', '        }\n', '    }\n', '\n', '    function setDefaultSlippage(uint256 _defaultSlippage) external onlyOwner {\n', '        defaultSlippage = _defaultSlippage;\n', '        emit SetDefaultSlippage(_defaultSlippage);\n', '    }\n', '\n', '    function getEthAndTokensIn(uint256 _ethValue, address[] memory _tokens, uint256 _slippage) public view returns(\n', '        uint256[] memory tokensInPipt,\n', '        uint256[] memory ethInUniswap,\n', '        uint256 poolOut\n', '    ) {\n', '        _ethValue = _ethValue.sub(_ethValue.mul(_slippage).div(1 ether));\n', '\n', '        // get shares and eth required for each share\n', '        CalculationStruct[] memory calculations = new CalculationStruct[](_tokens.length);\n', '\n', '        uint256 totalEthRequired = 0;\n', '        {\n', '            uint256 piptTotalSupply = pipt.totalSupply();\n', '            // get pool out for 1 ether as 100% for calculate shares\n', '            // poolOut by 1 ether first token join = piptTotalSupply.mul(1 ether).div(pipt.getBalance(_tokens[0]))\n', '            // poolRatio = poolOut/totalSupply\n', '            uint256 poolRatio = piptTotalSupply.mul(1 ether).div(pipt.getBalance(_tokens[0])).mul(1 ether).div(piptTotalSupply);\n', '\n', '            for (uint i = 0; i < _tokens.length; i++) {\n', '                calculations[i].tokenShare = poolRatio.mul(pipt.getBalance(_tokens[i])).div(1 ether);\n', '\n', '                (calculations[i].tokenReserve, calculations[i].ethReserve,) = uniswapPairFor(_tokens[i]).getReserves();\n', '                calculations[i].ethRequired = getAmountIn(\n', '                    calculations[i].tokenShare,\n', '                    calculations[i].ethReserve,\n', '                    calculations[i].tokenReserve\n', '                );\n', '                totalEthRequired = totalEthRequired.add(calculations[i].ethRequired);\n', '            }\n', '        }\n', '\n', '        // calculate eth and tokensIn based on shares and normalize if totalEthRequired more than 100%\n', '        tokensInPipt = new uint256[](_tokens.length);\n', '        ethInUniswap = new uint256[](_tokens.length);\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            ethInUniswap[i] = _ethValue.mul(calculations[i].ethRequired.mul(1 ether).div(totalEthRequired)).div(1 ether);\n', '            tokensInPipt[i] = calculations[i].tokenShare.mul(_ethValue.mul(1 ether).div(totalEthRequired)).div(1 ether);\n', '        }\n', '\n', '        poolOut = pipt.totalSupply().mul(tokensInPipt[0]).div(pipt.getBalance(_tokens[0]));\n', '    }\n', '\n', '    function calcEthFee(uint256 ethValue) public view returns(uint256 ethFee, uint256 ethAfterFee) {\n', '        ethFee = 0;\n', '        uint len = feeLevels.length;\n', '        for(uint i = 0; i < len; i++) {\n', '            if(ethValue >= feeLevels[i]) {\n', '                ethFee = ethValue.mul(feeAmounts[i]).div(1 ether);\n', '                break;\n', '            }\n', '        }\n', '        ethAfterFee = ethValue.sub(ethFee);\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    function uniswapPairFor(address token) internal view returns(IUniswapV2Pair) {\n', '        return IUniswapV2Pair(uniswapEthPairByTokenAddress[token]);\n', '    }\n', '}']