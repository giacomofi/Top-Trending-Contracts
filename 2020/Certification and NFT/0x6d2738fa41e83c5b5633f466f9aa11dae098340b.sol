['pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'interface Pool1  {\n', '    function changeDependentContractAddress() external;\n', '    function makeCoverBegin(\n', '        address smartCAdd,\n', '        bytes4 coverCurr,\n', '        uint[] calldata coverDetails,\n', '        uint16 coverPeriod,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    )\n', '        external\n', '        payable;\n', '    function makeCoverUsingCA(\n', '        address smartCAdd,\n', '        bytes4 coverCurr,\n', '        uint[] calldata coverDetails,\n', '        uint16 coverPeriod,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    )\n', '        external;\n', '    function getWei(uint amount) external view returns(uint);\n', '    function sellNXMTokens(uint _amount) external  returns (bool);\n', '}\n', '\n', 'contract INXMMaster {\n', '    address public tokenAddress;\n', '    address public owner;\n', '    uint public pauseTime;\n', '    function masterInitialized() external view returns(bool);\n', '    function isPause() external view returns(bool check);\n', '    function isMember(address _add) external view returns(bool);\n', '    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\n', '}\n', '\n', 'interface DSValue {\n', '    function peek() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '}\n', '\n', 'interface PoolData {\n', '\n', '    struct ApiId {\n', '        bytes4 typeOf;\n', '        bytes4 currency;\n', '        uint id;\n', '        uint64 dateAdd;\n', '        uint64 dateUpd;\n', '    }\n', '\n', '    struct CurrencyAssets {\n', '        address currAddress;\n', '        uint baseMin;\n', '        uint varMin;\n', '    }\n', '\n', '    struct InvestmentAssets {\n', '        address currAddress;\n', '        bool status;\n', '        uint64 minHoldingPercX100;\n', '        uint64 maxHoldingPercX100;\n', '        uint8 decimals;\n', '    }\n', '\n', '    struct IARankDetails {\n', '        bytes4 maxIACurr;\n', '        uint64 maxRate;\n', '        bytes4 minIACurr;\n', '        uint64 minRate;\n', '    }\n', '\n', '    struct McrData {\n', '        uint mcrPercx100;\n', '        uint mcrEther;\n', '        uint vFull; //Pool funds\n', '        uint64 date;\n', '    }\n', '\n', '    function setCapReached(uint val) external;\n', '    function getInvestmentAssetDecimals(bytes4 curr) external returns(uint8 decimal);\n', '    function getCurrencyAssetAddress(bytes4 curr) external view returns(address);\n', '    function getInvestmentAssetAddress(bytes4 curr) external view returns(address);\n', '    function getInvestmentAssetStatus(bytes4 curr) external view returns(bool status);\n', '\n', '}\n', '\n', 'interface QuotationData {\n', '\n', '    enum HCIDStatus { NA, kycPending, kycPass, kycFailedOrRefunded, kycPassNoCover }\n', '    enum CoverStatus { Active, ClaimAccepted, ClaimDenied, CoverExpired, ClaimSubmitted, Requested }\n', '\n', '    struct Cover {\n', '        address payable memberAddress;\n', '        bytes4 currencyCode;\n', '        uint sumAssured;\n', '        uint16 coverPeriod;\n', '        uint validUntil;\n', '        address scAddress;\n', '        uint premiumNXM;\n', '    }\n', '\n', '    struct HoldCover {\n', '        uint holdCoverId;\n', '        address payable userAddress;\n', '        address scAddress;\n', '        bytes4 coverCurr;\n', '        uint[] coverDetails;\n', '        uint16 coverPeriod;\n', '    }\n', '\n', '    function getCoverLength() external returns(uint len);\n', '    function getAuthQuoteEngine() external returns(address _add);\n', '    function getAllCoversOfUser(address _add) external returns(uint[] memory allCover);\n', '    function getUserCoverLength(address _add) external returns(uint len);\n', '    function getCoverStatusNo(uint _cid) external returns(uint8);\n', '    function getCoverPeriod(uint _cid) external returns(uint32 cp);\n', '    function getCoverSumAssured(uint _cid) external returns(uint sa);\n', '    function getCurrencyOfCover(uint _cid) external returns(bytes4 curr);\n', '    function getValidityOfCover(uint _cid) external returns(uint date);\n', '    function getscAddressOfCover(uint _cid) external view returns(uint, address);\n', '    function getCoverMemberAddress(uint _cid) external returns(address payable _add);\n', '    function getCoverPremiumNXM(uint _cid) external returns(uint _premiumNXM);\n', '    function getCoverDetailsByCoverID1(\n', '        uint _cid\n', '    )\n', '        external\n', '        returns (\n', '            uint cid,\n', '            address _memberAddress,\n', '            address _scAddress,\n', '            bytes4 _currencyCode,\n', '            uint _sumAssured,\n', '            uint premiumNXM\n', '        );\n', '    function getCoverDetailsByCoverID2(\n', '        uint _cid\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint cid,\n', '            uint8 status,\n', '            uint sumAssured,\n', '            uint16 coverPeriod,\n', '            uint validUntil\n', '        );\n', '    function getHoldedCoverDetailsByID1(\n', '        uint _hcid\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint hcid,\n', '            address scAddress,\n', '            bytes4 coverCurr,\n', '            uint16 coverPeriod\n', '        );\n', '    function getUserHoldedCoverLength(address _add) external returns (uint);\n', '    function getUserHoldedCoverByIndex(address _add, uint index) external returns (uint);\n', '    function getHoldedCoverDetailsByID2(\n', '        uint _hcid\n', '    )\n', '        external\n', '        returns (\n', '            uint hcid,\n', '            address payable memberAddress,\n', '            uint[] memory coverDetails\n', '        );\n', '    function getTotalSumAssuredSC(address _add, bytes4 _curr) external returns(uint amount);\n', '\n', '}\n', '\n', 'contract TokenData {\n', '    function lockTokenTimeAfterCoverExp() external returns (uint);\n', '}\n', '\n', 'interface Claims {\n', '    function getClaimbyIndex(uint _claimId) external view returns (\n', '        uint claimId,\n', '        uint status,\n', '        int8 finalVerdict,\n', '        address claimOwner,\n', '        uint coverId\n', '    );\n', '    function submitClaim(uint coverId) external;\n', '}\n', '\n', 'contract ClaimsData {\n', '    function actualClaimLength() external view returns(uint);\n', '}\n', '\n', 'interface NXMToken {\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '}\n', '\n', 'interface MemberRoles {\n', '    function switchMembership(address) external;\n', '}\n', '\n', 'interface yInsure {\n', '    \n', '    function tokens(uint) external view returns (uint expirationTimestamp,\n', '        bytes4 coverCurrency,\n', '        uint coverAmount,\n', '        uint coverPrice,\n', '        uint coverPriceNXM,\n', '        uint expireTime,\n', '        uint generationTime,\n', '        uint coverId,\n', '        bool claimInProgress,\n', '        uint claimId);\n', '}\n', '\n', 'contract yInsureView  {\n', '    \n', '    event ClaimRedeemed (\n', '        address receiver,\n', '        uint value,\n', '        bytes4 currency\n', '    );\n', '    \n', '    using SafeMath for uint;\n', '\n', '    INXMMaster constant public nxMaster = INXMMaster(0x01BFd82675DBCc7762C84019cA518e701C0cD07e);\n', '    yInsure constant public yIns = yInsure(0x181Aea6936B407514ebFC0754A37704eB8d98F91);\n', '    \n', '    enum CoverStatus {\n', '        Active,\n', '        ClaimAccepted,\n', '        ClaimDenied,\n', '        CoverExpired,\n', '        ClaimSubmitted,\n', '        Requested\n', '    }\n', '    \n', '    enum ClaimStatus {\n', '        PendingClaimAssessorVote, // 0\n', '        PendingClaimAssessorVoteDenied, // 1\n', '        PendingClaimAssessorVoteThresholdNotReachedAccept, // 2\n', '        PendingClaimAssessorVoteThresholdNotReachedDeny, // 3\n', '        PendingClaimAssessorConsensusNotReachedAccept, // 4\n', '        PendingClaimAssessorConsensusNotReachedDeny, // 5\n', '        FinalClaimAssessorVoteDenied, // 6\n', '        FinalClaimAssessorVoteAccepted, // 7\n', '        FinalClaimAssessorVoteDeniedMVAccepted, // 8\n', '        FinalClaimAssessorVoteDeniedMVDenied, // 9\n', '        FinalClaimAssessorVotAcceptedMVNoDecision, // 10\n', '        FinalClaimAssessorVoteDeniedMVNoDecision, // 11\n', '        ClaimAcceptedPayoutPending, // 12\n', '        ClaimAcceptedNoPayout, // 13\n', '        ClaimAcceptedPayoutDone // 14\n', '    }\n', '    \n', '    function getMemberRoles() external view returns (address) {\n', '        return nxMaster.getLatestAddress("MR");\n', '    }\n', '    \n', '    function getCover(\n', '        uint coverId\n', '    ) public view returns (\n', '        uint cid,\n', '        uint8 status,\n', '        uint sumAssured,\n', '        uint16 coverPeriod,\n', '        uint validUntil\n', '    ) {\n', '        QuotationData quotationData = QuotationData(nxMaster.getLatestAddress("QD"));\n', '        return quotationData.getCoverDetailsByCoverID2(coverId);\n', '    }\n', '    \n', '    function getscAddressOfCover(\n', '        uint _coverId\n', '    ) public view returns (\n', '        uint coverId,\n', '        address coverAddress\n', '    ) {\n', '        QuotationData quotationData = QuotationData(nxMaster.getLatestAddress("QD"));\n', '        return quotationData.getscAddressOfCover(_coverId);\n', '    }\n', '    \n', '    function getCurrencyAssetAddress(bytes4 currency) external view returns (address) {\n', '        PoolData pd = PoolData(nxMaster.getLatestAddress("PD"));\n', '        return pd.getCurrencyAssetAddress(currency);\n', '    }\n', '    \n', '    function getLockTokenTimeAfterCoverExpiry() external returns (uint) {\n', '        TokenData tokenData = TokenData(nxMaster.getLatestAddress("TD"));\n', '        return tokenData.lockTokenTimeAfterCoverExp();\n', '    }\n', '    \n', '    function getTokenAddress() external view returns (address) {\n', '        return nxMaster.tokenAddress();\n', '    }\n', '    \n', '    function payoutIsCompleted(uint claimId) public view returns (bool) {\n', '        uint256 status;\n', '        Claims claims = Claims(nxMaster.getLatestAddress("CL"));\n', '        (, status, , , ) = claims.getClaimbyIndex(claimId);\n', '        return status == uint(ClaimStatus.FinalClaimAssessorVoteAccepted)\n', '            || status == uint(ClaimStatus.ClaimAcceptedPayoutDone);\n', '    }\n', '    \n', '    uint public distributorFeePercentage;\n', '    uint256 internal issuedTokensCount;\n', '    \n', '    struct Token {\n', '        address coverContract;\n', '        uint expirationTimestamp;\n', '        bytes4 coverCurrency;\n', '        uint coverAmount;\n', '        uint expireTime;\n', '        uint generationTime;\n', '        uint coverId;\n', '        bool claimInProgress;\n', '        uint claimId;\n', '        uint8 coverStatus;\n', '        bool payoutCompleted;\n', '    }\n', '    \n', '    function getToken(uint tokenId) public view returns (Token memory) {\n', '        Token memory tkn;\n', '        (\n', '            tkn.expirationTimestamp, \n', '            tkn.coverCurrency, \n', '            tkn.coverAmount, \n', '            , \n', '            , \n', '            tkn.expireTime, \n', '            tkn.generationTime, \n', '            tkn.coverId, \n', '            tkn.claimInProgress, \n', '            tkn.claimId) = yIns.tokens(tokenId);\n', '    }\n', '    \n', '    function tokens(uint tokenId) public view returns (Token memory) {\n', '        Token memory tkn = getToken(tokenId);\n', '        (, tkn.coverContract) = getscAddressOfCover(tkn.coverId);\n', '        (, tkn.coverStatus, , , ) = getCover(tkn.coverId);\n', '        tkn.payoutCompleted = payoutIsCompleted(tkn.claimId);\n', '    }\n', '}']