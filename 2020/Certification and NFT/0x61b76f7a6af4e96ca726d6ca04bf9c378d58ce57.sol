['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-25\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function mint(address account, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract VampTokenSale is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    IERC20 public usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    address public collector = 0x45a6b8BdfC1FAa745720165e0B172A3D6D4EC897;\n', '    string public name = "VAMP Presale";\n', '\n', '    IERC20 public VAMP = IERC20(0xb2C822a1b923E06Dbd193d2cFc7ad15388EA09DD);\n', '    address public beneficiary;\n', '\n', '    uint256 public hardCap;\n', '    uint256 public softCap;\n', '    uint256 public tokensPerUSDT;\n', '    uint256 public purchaseLimitStageOne = 500 * 1e6;\n', '    uint256 public purchaseLimitStageTwo = 2000 * 1e6;\n', '    uint256 public purchaseLimitStageThree = 10000 * 1e6;\n', '\n', '    uint256 public tokensSold = 0;\n', '    uint256 public usdtRaised = 0;\n', '    uint256 public investorCount = 0;\n', '    uint256 public weiRefunded = 0;\n', '    uint256 public minAmount = 1 * 1e6;\n', '    uint256 public maxAmount = 10000 * 1e6;\n', '\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    uint256 public stageOne = 2 hours;\n', '    uint256 public stageTwo = 4 hours;\n', '    uint256 public timeHardCapReached;\n', '\n', '    bool public softCapReached = false;\n', '    bool public crowdsaleFinished = false;\n', '   // address[] public whitelistAddress;\n', '    mapping(address => uint256) sold;\n', '    mapping(address => uint256) whitelistAmount;\n', '    mapping(address => bool) whitelistedAddress;\n', '    mapping(address => uint256) tokensAlreadyBought;\n', '\n', '    event GoalReached(uint256 amountRaised);\n', '    event HardCapReached(uint256 hardcap);\n', '    event NewContribution(\n', '        address indexed holder,\n', '        uint256 tokenAmount,\n', '        uint256 etherAmount\n', '    );\n', '    event Refunded(address indexed holder, uint256 amount);\n', '\n', '    modifier onlyAfter(uint256 time) {\n', '        require(now >= time);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBefore(uint256 time) {\n', '        require(now <= time);\n', '        _;\n', '    }\n', '\n', '      modifier claimEnabled() {\n', '        require(block.timestamp.add(1 hours) >= timeHardCapReached);\n', '        _;\n', '    }\n', '\n', '    constructor ( // in token-wei. i.e. number of presale tokens * 10^18\n', '        uint256 _startTime // start time (unix time, in seconds since 1970-01-01)\n', '       // address[] memory whitelistAddresses // presale duration in hours\n', '    ) public {\n', '        hardCap = 550000 * 1e6;\n', '        tokensPerUSDT = 10000000000000;\n', '        startTime = _startTime;\n', '        endTime = _startTime + 48 hours;\n', '        timeHardCapReached = endTime;\n', '       // whitelistAddress = whitelistAddresses;\n', '    }\n', '\n', '    function() payable external {\n', '        revert("not purchased by eth");\n', '        // doPurchase(msg.sender);\n', '    }\n', '    function canClaim() public view returns (bool){\n', '         if(block.timestamp.add(1 hours) >= timeHardCapReached){\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '    }\n', '\n', '  /*  function refund() external onlyAfter(endTime) {\n', '        require(!softCapReached);\n', '        uint256 balance = sold[msg.sender];\n', '        require(balance > 0);\n', '        uint256 refund = balance / tokensPerUSDT;\n', '        msg.sender.transfer(refund);\n', '        delete sold[msg.sender];\n', '        weiRefunded = weiRefunded.add(refund);\n', '        token.refundPresale(msg.sender, balance);\n', '        Refunded(msg.sender, refund);\n', '    }*/\n', '    \n', '    function addWhiteListedAddresses(address[] memory _addresses) public onlyOwner {\n', '        require(_addresses.length > 0);\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '         whitelistedAddress[_addresses[i]] = true;\n', '    }\n', '    }\n', '    \n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        if(whitelistedAddress[_address]) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function simulatebuy(uint256 amount) public view returns (uint256) {\n', '          uint256 tokens = amount * tokensPerUSDT;\n', '          return tokens;\n', '    }\n', '    \n', '    function tokensBought(address _address) public view returns (uint256) {\n', '        return tokensAlreadyBought[_address];\n', '    }\n', '    \n', '    function tokensAlreadySold() public view returns (uint256) {\n', '        return tokensSold;\n', '    }\n', '    \n', '    function raisedUSDT() public view returns (uint256) {\n', '        return usdtRaised;\n', '    }\n', '    function usdtDeposited(address _address) public view returns (uint256) {\n', '        return whitelistAmount[_address].add(sold[_address]);\n', '    }\n', '    \n', '    function getStage() public view returns (uint256) {\n', '         if (block.timestamp <= startTime.add(stageOne)) {\n', '             return 1;\n', '         } else if(block.timestamp >= startTime.add(stageOne) &&\n', '            block.timestamp <= startTime.add(stageTwo)) {\n', '                return 2;\n', '            } else {\n', '                return 3;\n', '            }\n', '    }\n', '    \n', '\n', '    function withdrawTokens() public onlyOwner onlyAfter(timeHardCapReached) {\n', '        VAMP.safeTransfer(collector, VAMP.balanceOf(address(this)));\n', '    }\n', '\n', '    function claimTokens() public claimEnabled() {\n', '        \n', '        if(tokensAlreadyBought[msg.sender] > 0){\n', '        VAMP.safeTransfer(msg.sender,tokensAlreadyBought[msg.sender]);\n', '        tokensAlreadyBought[msg.sender]= 0;\n', '        } else {\n', '            revert("No tokens to claim");\n', '        }\n', '       \n', '    }\n', '\n', '    function purchase(uint256 amount) public {\n', '        require(amount > minAmount,"Must be more than minumum amount 1USDT");\n', '        require(amount <= maxAmount,"Must be smaller than max amount 10k usdt");\n', '      doPurchase(amount);\n', '    }\n', '     function doPurchase(uint256 amount)\n', '        private\n', '        onlyAfter(startTime)\n', '        onlyBefore(endTime)\n', '    {\n', '        assert(crowdsaleFinished == false);\n', '\n', '        require(usdtRaised.add(amount) <= hardCap,"cant deposit without triggering hardcap");\n', '        if (block.timestamp <= startTime.add(stageOne) && isWhitelisted(msg.sender)) {\n', '            //first 2 hours\n', '            uint256 tokens = amount * tokensPerUSDT;\n', '            require(\n', '                amount <= purchaseLimitStageOne,\n', '                "Over purchase limit in stage one"\n', '            );\n', '            require(\n', '                whitelistAmount[msg.sender].add(amount) <= purchaseLimitStageOne,\n', '                "can\'t purchase more than allowed amount stage one"\n', '            );\n', '            usdt.safeTransferFrom(msg.sender, collector, amount);\n', '            whitelistAmount[msg.sender] = whitelistAmount[msg.sender].add(\n', '                amount\n', '            );\n', '            usdtRaised = usdtRaised.add(amount);\n', '            tokensSold = tokensSold.add(tokens);\n', '            tokensAlreadyBought[msg.sender] = tokensAlreadyBought[msg.sender].add(tokens);\n', '        } else if (\n', '            block.timestamp >= startTime.add(stageOne) &&\n', '            block.timestamp <= startTime.add(stageTwo)\n', '        ) {\n', '            //first 2 - 4 hours\n', '\n', '            uint256 tokens = amount * tokensPerUSDT;\n', '            require(\n', '                amount <= purchaseLimitStageTwo,\n', '                "Over purchase limit in stage two"\n', '            );\n', '            require(\n', '                sold[msg.sender].add(amount) <=\n', '                    purchaseLimitStageTwo,\n', '                "can\'t purchase more than allowed amount stage two"\n', '            );\n', '            sold[msg.sender] = sold[msg.sender].add(amount);\n', '            usdt.safeTransferFrom(msg.sender, collector, amount);\n', '            usdtRaised = usdtRaised.add(amount);\n', '            tokensSold = tokensSold.add(tokens);\n', '            tokensAlreadyBought[msg.sender] = tokensAlreadyBought[msg.sender].add(tokens);\n', '        } else if (block.timestamp > startTime.add(stageTwo)) {\n', '            //4 - 48 hours\n', '             uint256 tokens = amount * tokensPerUSDT;\n', '             require(\n', '                amount <= purchaseLimitStageThree,\n', '                "Over purchase limit in stage three"\n', '            );\n', '               require(\n', '                sold[msg.sender].add(amount) <=\n', '                    purchaseLimitStageThree,\n', '                "can\'t purchase more than allowed amount stage three"\n', '            );\n', '            sold[msg.sender] = sold[msg.sender].add(amount);\n', '            usdt.safeTransferFrom(msg.sender, collector, amount);\n', '            usdtRaised = usdtRaised.add(amount);\n', '            tokensSold = tokensSold.add(tokens);\n', '            tokensAlreadyBought[msg.sender] = tokensAlreadyBought[msg.sender].add(tokens);\n', '        }\n', '         if (usdtRaised == hardCap) {\n', '          timeHardCapReached = block.timestamp;\n', '          crowdsaleFinished = true;\n', '          emit HardCapReached(timeHardCapReached);\n', '        }\n', '\n', '    }\n', '}']