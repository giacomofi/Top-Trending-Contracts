['/*\n', '\n', '    /     |  __    / ____|\n', '   /      | |__) | | |\n', '  / /    |  _  /  | |\n', ' / ____   | |    | |____\n', '/_/    _ |_|  _  _____|\n', '\n', '* ARC: global/SkillsetMetadata.sol\n', '*\n', '* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/global/SkillsetMetadata.sol\n', '*\n', '* Contract Dependencies: \n', '*\t- Adminable\n', '*\t- SkillsetMetadataStorageV1\n', '* Libraries: \n', '*\t- Storage\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 ARC\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '/* ===============================================\n', '* Flattened with Solidifier by Coinage\n', '* \n', '* https://solidifier.coina.ge\n', '* ===============================================\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'library Storage {\n', '\n', '    /**\n', '     * @dev Performs an SLOAD and returns the data in the slot.\n', '     */\n', '    function load(\n', '        bytes32 slot\n', '    )\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        bytes32 result;\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            result := sload(slot)\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Performs an SSTORE to save the value to the slot.\n', '     */\n', '    function store(\n', '        bytes32 slot,\n', '        bytes32 value\n', '    )\n', '        internal\n', '    {\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            sstore(slot, value)\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Adminable\n', ' * @author dYdX\n', ' *\n', ' * @dev EIP-1967 Proxy Admin contract.\n', ' */\n', 'contract Adminable {\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     *  This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1.\n', '     */\n', '    bytes32 internal constant ADMIN_SLOT =\n', '    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '    * @dev Modifier to check whether the `msg.sender` is the admin.\n', '    *  If it is, it will run the function. Otherwise, it will revert.\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(\n', '            msg.sender == getAdmin(),\n', '            "Adminable: caller is not admin"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return The EIP-1967 proxy admin\n', '     */\n', '    function getAdmin()\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\n', '    }\n', '}\n', '\n', '\n', 'contract SkillsetMetadataStorageV1 {\n', '\n', '    mapping (address => bool) public approvedSkillsets;\n', '\n', '    address[] public skillsetsArray;\n', '\n', '    mapping (address => uint256) public maxLevel;\n', '\n', '}\n', '\n', 'contract SkillsetMetadata is Adminable, SkillsetMetadataStorageV1 {\n', '\n', '    /* ========== Events ========== */\n', '\n', '    event SkillsetStatusUpdated(address _token, bool _status);\n', '    event SkillsetMaxLevelSet(address _token, uint256 _level);\n', '\n', '    /* ========== View Functions ========== */\n', '\n', '    function getSkillsetBalance(\n', '        address _token,\n', '        address _user\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return IERC20(_token).balanceOf(_user);\n', '    }\n', '\n', '    function isValidSkillset(\n', '        address _token\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return approvedSkillsets[_token];\n', '    }\n', '\n', '    function getAllSkillsets()\n', '        public\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return skillsetsArray;\n', '    }\n', '\n', '    /* ========== Admin Functions ========== */\n', '\n', '    function addSkillsetToken(\n', '        address _token\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(\n', '            approvedSkillsets[_token] != true,\n', '            "Skillset has already been added"\n', '        );\n', '\n', '        skillsetsArray.push(_token);\n', '        approvedSkillsets[_token] = true;\n', '\n', '        emit SkillsetStatusUpdated(_token, true);\n', '    }\n', '\n', '    function removeSkillsetToken(\n', '        address _token\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(\n', '            approvedSkillsets[_token] == true,\n', '            "Skillset does not exist"\n', '        );\n', '\n', '        for (uint i = 0; i < skillsetsArray.length; i++) {\n', '            if (skillsetsArray[i] == _token) {\n', '                delete skillsetsArray[i];\n', '                skillsetsArray[i] = skillsetsArray[skillsetsArray.length - 1];\n', '                skillsetsArray.length--;\n', '                break;\n', '            }\n', '        }\n', '\n', '        delete approvedSkillsets[_token];\n', '\n', '        emit SkillsetStatusUpdated(_token, false);\n', '    }\n', '\n', '    function setMaxLevel(\n', '        address _token,\n', '        uint256 _level\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        maxLevel[_token] = _level;\n', '\n', '        emit SkillsetMaxLevelSet(_token, _level);\n', '\n', '    }\n', '\n', '}']