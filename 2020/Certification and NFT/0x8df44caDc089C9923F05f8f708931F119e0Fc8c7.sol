['// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// Inheritance\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', 'contract LimitedSetup {\n', '    uint public setupExpiryTime;\n', '\n', '    /**\n', '     * @dev LimitedSetup Constructor.\n', '     * @param setupDuration The time the setup period will last for.\n', '     */\n', '    constructor(uint setupDuration) internal {\n', '        setupExpiryTime = now + setupDuration;\n', '    }\n', '\n', '    modifier onlyDuringSetup {\n', '        require(now < setupExpiryTime, "Can only perform this action during setup");\n', '        _;\n', '    }\n', '}\n', '\n', '// Based on https://docs.synthetix.io/contracts/SynthetixEscrow\n', 'contract Escrow is Ownable, LimitedSetup {\n', '    using SafeMath for uint;\n', '\n', '    /* The escrow token. */\n', '    address public token;\n', '\n', '    /* Lists of (timestamp, quantity) pairs per account, sorted in ascending time order.\n', '     * These are the times at which each given quantity of SNX vests. */\n', '    mapping(address => uint[2][]) public vestingSchedules;\n', '\n', "    /* An account's total vested balance to save recomputing this for fee extraction purposes. */\n", '    mapping(address => uint) public totalVestedAccountBalance;\n', '\n', '    /* The total remaining vested balance, for verifying the actual balance of this contract against. */\n', '    uint public totalVestedBalance;\n', '\n', '    uint public constant TIME_INDEX = 0;\n', '    uint public constant QUANTITY_INDEX = 1;\n', '\n', '    /* Limit vesting entries to disallow unbounded iteration over vesting schedules. */\n', '    uint public constant MAX_VESTING_ENTRIES = 20;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(address _token) public LimitedSetup(8 weeks) {\n', '        token = _token;\n', '    }\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    /**\n', '     * @notice A simple alias to totalVestedAccountBalance: provides ERC20 balance integration.\n', '     */\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return totalVestedAccountBalance[account];\n', '    }\n', '\n', '    /**\n', "     * @notice The number of vesting dates in an account's schedule.\n", '     */\n', '    function numVestingEntries(address account) public view returns (uint) {\n', '        return vestingSchedules[account].length;\n', '    }\n', '\n', '    /**\n', '     * @notice Get a particular schedule entry for an account.\n', '     * @return A pair of uints: (timestamp, quantity).\n', '     */\n', '    function getVestingScheduleEntry(address account, uint index) public view returns (uint[2] memory) {\n', '        return vestingSchedules[account][index];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the time at which a given schedule entry will vest.\n', '     */\n', '    function getVestingTime(address account, uint index) public view returns (uint) {\n', '        return getVestingScheduleEntry(account, index)[TIME_INDEX];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the quantity of SNX associated with a given schedule entry.\n', '     */\n', '    function getVestingQuantity(address account, uint index) public view returns (uint) {\n', '        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];\n', '    }\n', '\n', '    /**\n', '     * @notice Obtain the index of the next schedule entry that will vest for a given user.\n', '     */\n', '    function getNextVestingIndex(address account) public view returns (uint) {\n', '        uint len = numVestingEntries(account);\n', '        for (uint i = 0; i < len; i++) {\n', '            if (getVestingTime(account, i) != 0) {\n', '                return i;\n', '            }\n', '        }\n', '        return len;\n', '    }\n', '\n', '    /**\n', '     * @notice Obtain the next schedule entry that will vest for a given user.\n', '     * @return A pair of uints: (timestamp, quantity). */\n', '    function getNextVestingEntry(address account) public view returns (uint[2] memory) {\n', '        uint index = getNextVestingIndex(account);\n', '        if (index == numVestingEntries(account)) {\n', '            return [uint(0), 0];\n', '        }\n', '        return getVestingScheduleEntry(account, index);\n', '    }\n', '\n', '    /**\n', '     * @notice Obtain the time at which the next schedule entry will vest for a given user.\n', '     */\n', '    function getNextVestingTime(address account) external view returns (uint) {\n', '        return getNextVestingEntry(account)[TIME_INDEX];\n', '    }\n', '\n', '    /**\n', '     * @notice Obtain the quantity which the next schedule entry will vest for a given user.\n', '     */\n', '    function getNextVestingQuantity(address account) external view returns (uint) {\n', '        return getNextVestingEntry(account)[QUANTITY_INDEX];\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    /**\n', '     * @notice Destroy the vesting information associated with an account.\n', '     */\n', '    function purgeAccount(address account) external onlyOwner onlyDuringSetup {\n', '        delete vestingSchedules[account];\n', '        totalVestedBalance = totalVestedBalance.sub(totalVestedAccountBalance[account]);\n', '        delete totalVestedAccountBalance[account];\n', '    }\n', '\n', '    /**\n', "     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n", '     * @dev A call to this should be accompanied by either enough balance already available\n', '     * in this contract, or a corresponding call to.endow(), to ensure that when\n', '     * the funds are withdrawn, there is enough balance, as well as correctly calculating\n', '     * the fees.\n', "     * This may only be called by the owner during the contract's setup period.\n", '     * Note; although this function could technically be used to produce unbounded\n', "     * arrays, it's only in the foundation's command to add to these lists.\n", '     * @param account The account to append a new vesting entry to.\n', '     * @param time The absolute unix timestamp after which the vested quantity may be withdrawn.\n', '     * @param quantity The quantity of SNX that will vest.\n', '     */\n', '    function appendVestingEntry(\n', '        address account,\n', '        uint time,\n', '        uint quantity\n', '    ) public onlyOwner onlyDuringSetup {\n', '        /* No empty or already-passed vesting entries allowed. */\n', '        require(now < time, "Time must be in the future");\n', '        require(quantity != 0, "Quantity cannot be zero");\n', '\n', '        /* There must be enough balance in the contract to provide for the vesting entry. */\n', '        totalVestedBalance = totalVestedBalance.add(quantity);\n', '        require(\n', '            totalVestedBalance <= IERC20(token).balanceOf(address(this)),\n', '            "Must be enough balance in the contract to provide for the vesting entry"\n', '        );\n', '\n', '        /* Disallow arbitrarily long vesting schedules in light of the gas limit. */\n', '        uint scheduleLength = vestingSchedules[account].length;\n', '        require(scheduleLength <= MAX_VESTING_ENTRIES, "Vesting schedule is too long");\n', '\n', '        if (scheduleLength == 0) {\n', '            totalVestedAccountBalance[account] = quantity;\n', '        } else {\n', '            /* Disallow adding new vesting earlier than the last one.\n', '             * Since entries are only appended, this means that no vesting date can be repeated. */\n', '            require(\n', '                getVestingTime(account, numVestingEntries(account) - 1) < time,\n', '                "Cannot add new vested entries earlier than the last one"\n', '            );\n', '            totalVestedAccountBalance[account] = totalVestedAccountBalance[account].add(quantity);\n', '        }\n', '\n', '        vestingSchedules[account].push([time, quantity]);\n', '    }\n', '\n', '    /**\n', '     * @notice Construct a vesting schedule to release a quantities of SNX\n', '     * over a series of intervals.\n', '     * @dev Assumes that the quantities are nonzero\n', '     * and that the sequence of timestamps is strictly increasing.\n', "     * This may only be called by the owner during the contract's setup period.\n", '     */\n', '    function addVestingSchedule(\n', '        address account,\n', '        uint[] calldata times,\n', '        uint[] calldata quantities\n', '    ) external onlyOwner onlyDuringSetup {\n', '        for (uint i = 0; i < times.length; i++) {\n', '            appendVestingEntry(account, times[i], quantities[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Allow a user to withdraw any SNX in their schedule that have vested.\n', '     */\n', '    function vest() external {\n', '        uint numEntries = numVestingEntries(msg.sender);\n', '        uint total;\n', '        for (uint i = 0; i < numEntries; i++) {\n', '            uint time = getVestingTime(msg.sender, i);\n', '            /* The list is sorted; when we reach the first future time, bail out. */\n', '            if (time > now) {\n', '                break;\n', '            }\n', '            uint qty = getVestingQuantity(msg.sender, i);\n', '            if (qty > 0) {\n', '                vestingSchedules[msg.sender][i] = [0, 0];\n', '                total = total.add(qty);\n', '            }\n', '        }\n', '\n', '        if (total != 0) {\n', '            totalVestedBalance = totalVestedBalance.sub(total);\n', '            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[msg.sender].sub(total);\n', '            IERC20(token).transfer(msg.sender, total);\n', '            emit Vested(msg.sender, now, total);\n', '        }\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event Vested(address indexed beneficiary, uint time, uint value);\n', '}']