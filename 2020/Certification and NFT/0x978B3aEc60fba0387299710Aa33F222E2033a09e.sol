['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/flamincome/Controller.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface Controller {\n', '    function strategist() external view returns (address);\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(address, uint) external;\n', '    function earn(address, uint) external;\n', '}\n', '\n', '// File: contracts/interfaces/flamincome/Vault.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface Vault {\n', '    function token() external view returns (address);\n', '    function priceE18() external view returns (uint);\n', '    function deposit(uint) external;\n', '    function withdraw(uint) external;\n', '    function depositAll() external;\n', '    function withdrawAll() external;\n', '}\n', '\n', '// File: contracts/interfaces/external/MakerDAO.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IGemLike {\n', '    function approve(address, uint) external;\n', '    function transfer(address, uint) external;\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IManagerLike {\n', '    function cdpCan(address, uint, address) external view returns (uint);\n', '    function ilks(uint) external view returns (bytes32);\n', '    function owns(uint) external view returns (address);\n', '    function urns(uint) external view returns (address);\n', '    function vat() external view returns (address);\n', '    function open(bytes32, address) external returns (uint);\n', '    function give(uint, address) external;\n', '    function cdpAllow(uint, address, uint) external;\n', '    function urnAllow(address, uint) external;\n', '    function frob(uint, int, int) external;\n', '    function flux(uint, address, uint) external;\n', '    function move(uint, address, uint) external;\n', '    function exit(address, uint, address, uint) external;\n', '    function quit(uint, address) external;\n', '    function enter(address, uint) external;\n', '    function shift(uint, uint) external;\n', '}\n', '\n', 'interface IVatLike {\n', '    function can(address, address) external view returns (uint);\n', '    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n', '    function dai(address) external view returns (uint);\n', '    function urns(bytes32, address) external view returns (uint, uint);\n', '    function frob(bytes32, address, address, address, int, int) external;\n', '    function hope(address) external;\n', '    function move(address, address, uint) external;\n', '}\n', '\n', 'interface IGemJoinLike {\n', '    function dec() external returns (uint);\n', '    function gem() external returns (IGemLike);\n', '    function join(address, uint) external payable;\n', '    function exit(address, uint) external;\n', '}\n', '\n', 'interface IGNTJoinLike {\n', '    function bags(address) external view returns (address);\n', '    function make(address) external returns (address);\n', '}\n', '\n', 'interface IDaiJoinLike {\n', '    function vat() external returns (IVatLike);\n', '    function dai() external returns (IGemLike);\n', '    function join(address, uint) external payable;\n', '    function exit(address, uint) external;\n', '}\n', '\n', 'interface IHopeLike {\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '}\n', '\n', 'interface IEndLike {\n', '    function fix(bytes32) external view returns (uint);\n', '    function cash(bytes32, uint) external;\n', '    function free(bytes32) external;\n', '    function pack(uint) external;\n', '    function skim(bytes32, address) external;\n', '}\n', '\n', 'interface IJugLike {\n', '    function drip(bytes32) external returns (uint);\n', '}\n', '\n', 'interface IPotLike {\n', '    function pie(address) external view returns (uint);\n', '    function drip() external returns (uint);\n', '    function join(uint) external;\n', '    function exit(uint) external;\n', '}\n', '\n', 'interface ISpotLike {\n', '    function ilks(bytes32) external view returns (address, uint);\n', '}\n', '\n', 'interface IOSMedianizer {\n', '    function read() external view returns (uint, bool);\n', '    function foresight() external view returns (uint, bool);\n', '}\n', '\n', 'interface IMedianizer {\n', '    function read() external view returns (bytes32);\n', '    function peek() external view returns (bytes32, bool);\n', '    function poke() external;\n', '    function compute() external view returns (bytes32, bool);\n', '}\n', '\n', '// File: contracts/interfaces/external/Uniswap.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IUniV2 {\n', '    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n', '}\n', '\n', 'interface UniSwapV1 {\n', '    function tokenAddress() external view returns (address token);\n', '    function factoryAddress() external view returns (address factory);\n', '    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n', '    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n', '    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n', '    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n', '    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n', '    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n', '    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n', '    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n', '    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n', '    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n', '    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n', '    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n', '    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n', '    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n', '    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n', '    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/implementations/strategy/Strategy_YFI_wETH.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Strategy_YFI_wETH {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address constant public token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    address public cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\n', '    address public vat = address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\n', '    address public mcd_join_eth_a = address(0x2F0b23f53734252Bda2277357e97e1517d6B042A);\n', '    address public mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\n', '    address public mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\n', '    address public jug = address(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\n', '\n', '    address public eth_price_oracle = address(0x66d828CF5f39Db5Ab6B30BE8234918f84e008FDf);\n', '    address constant public fDAI = address(0x163D457fA8247f1A9279B9fa8eF513de116e4327);\n', '\n', '    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    uint public c = 20000;\n', '    uint public c_safe = 30000;\n', '    uint constant public c_base = 10000;\n', '\n', '    uint public performanceFee = 500;\n', '    uint constant public performanceMax = 10000;\n', '\n', '    uint public withdrawalFee = 50;\n', '    uint constant public withdrawalMax = 10000;\n', '\n', '    uint public strategistReward = 5000;\n', '    uint constant public strategistRewardMax = 10000;\n', '\n', '    bytes32 constant public ilk = "ETH-A";\n', '\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public harvester;\n', '\n', '    uint public cdpId;\n', '\n', '    constructor(address _controller) public {\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '        harvester = msg.sender;\n', '        controller = _controller;\n', '        cdpId = IManagerLike(cdp_manager).open(ilk, address(this));\n', '        _approveAll();\n', '    }\n', '\n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyMKRVaultDAIDelegate";\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setHarvester(address _harvester) external {\n', '        require(msg.sender == harvester || msg.sender == governance, "!allowed");\n', '        harvester = _harvester;\n', '    }\n', '\n', '    function setWithdrawalFee(uint _withdrawalFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setPerformanceFee(uint _performanceFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        performanceFee = _performanceFee;\n', '    }\n', '\n', '    function setStrategistReward(uint _strategistReward) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategistReward = _strategistReward;\n', '    }\n', '\n', '    function setBorrowCollateralizationRatio(uint _c) external {\n', '        require(msg.sender == governance, "!governance");\n', '        c = _c;\n', '    }\n', '\n', '    function setWithdrawCollateralizationRatio(uint _c_safe) external {\n', '        require(msg.sender == governance, "!governance");\n', '        c_safe = _c_safe;\n', '    }\n', '\n', '    function setOracle(address _oracle) external {\n', '        require(msg.sender == governance, "!governance");\n', '        eth_price_oracle = _oracle;\n', '    }\n', '\n', '    // optional\n', '    function setMCDValue(\n', '        address _manager,\n', '        address _ethAdapter,\n', '        address _daiAdapter,\n', '        address _spot,\n', '        address _jug\n', '    ) external {\n', '        require(msg.sender == governance, "!governance");\n', '        cdp_manager = _manager;\n', '        vat = IManagerLike(_manager).vat();\n', '        mcd_join_eth_a = _ethAdapter;\n', '        mcd_join_dai = _daiAdapter;\n', '        mcd_spot = _spot;\n', '        jug = _jug;\n', '    }\n', '\n', '    function _approveAll() internal {\n', '        IERC20(token).approve(mcd_join_eth_a, uint(-1));\n', '        IERC20(dai).approve(mcd_join_dai, uint(-1));\n', '        IERC20(dai).approve(fDAI, uint(-1));\n', '        IERC20(dai).approve(unirouter, uint(-1));\n', '    }\n', '\n', '    function deposit() public {\n', '        uint _token = IERC20(token).balanceOf(address(this));\n', '        if (_token > 0) {\n', '            uint p = _getPrice();\n', '            uint _draw = _token.mul(p).mul(c_base).div(c).div(1e18);\n', '            // approve adapter to use token amount\n', '            require(_checkDebtCeiling(_draw), "debt ceiling is reached!");\n', '            _lockWETHAndDrawDAI(_token, _draw);\n', '        }\n', '        // approve fDAI use DAI\n', '        Vault(fDAI).depositAll();\n', '    }\n', '\n', '    function _getPrice() internal view returns (uint p) {\n', '        (uint _read,) = IOSMedianizer(eth_price_oracle).read();\n', '        (uint _foresight,) = IOSMedianizer(eth_price_oracle).foresight();\n', '        p = _foresight < _read ? _foresight : _read;\n', '    }\n', '\n', '    function _checkDebtCeiling(uint _amt) internal view returns (bool) {\n', '        (,,,uint _line,) = IVatLike(vat).ilks(ilk);\n', '        uint _debt = getTotalDebtAmount().add(_amt);\n', '        if (_line.div(1e27) < _debt) { return false; }\n', '        return true;\n', '    }\n', '\n', '    function _lockWETHAndDrawDAI(uint wad, uint wadD) internal {\n', '        address urn = IManagerLike(cdp_manager).urns(cdpId);\n', '\n', '        // IGemJoinLike(mcd_join_eth_a).gem().approve(mcd_join_eth_a, wad);\n', '        IGemJoinLike(mcd_join_eth_a).join(urn, wad);\n', '        IManagerLike(cdp_manager).frob(cdpId, toInt(wad), _getDrawDart(urn, wadD));\n', '        IManagerLike(cdp_manager).move(cdpId, address(this), wadD.mul(1e27));\n', '        if (IVatLike(vat).can(address(this), address(mcd_join_dai)) == 0) {\n', '            IVatLike(vat).hope(mcd_join_dai);\n', '        }\n', '        IDaiJoinLike(mcd_join_dai).exit(address(this), wadD);\n', '    }\n', '\n', '    function _getDrawDart(address urn, uint wad) internal returns (int dart) {\n', '        uint rate = IJugLike(jug).drip(ilk);\n', '        uint _dai = IVatLike(vat).dai(urn);\n', '\n', '        // If there was already enough DAI in the vat balance, just exits it without adding more debt\n', '        if (_dai < wad.mul(1e27)) {\n', '            dart = toInt(wad.mul(1e27).sub(_dai).div(rate));\n', '            dart = uint(dart).mul(rate) < wad.mul(1e27) ? dart + 1 : dart;\n', '        }\n', '    }\n', '\n', '    function toInt(uint x) internal pure returns (int y) {\n', '        y = int(x);\n', '        require(y >= 0, "int-overflow");\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        require(dai != address(_asset), "dai");\n', '        require(fDAI != address(_asset), "ydai");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        uint _fee = _amount.mul(withdrawalFee).div(withdrawalMax);\n', '\n', '        IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal returns (uint) {\n', '        if (getTotalDebtAmount() != 0 && \n', '            getmVaultRatio(_amount) < c_safe.mul(1e2)) {\n', '            uint p = _getPrice();\n', '            _wipe(_withdrawDaiLeast(_amount.mul(p).div(1e18)));\n', '        }\n', '        \n', '        _freeWETH(_amount);\n', '        \n', '        return _amount;\n', '    }\n', '\n', '    function _freeWETH(uint wad) internal {\n', '        IManagerLike(cdp_manager).frob(cdpId, -toInt(wad), 0);\n', '        IManagerLike(cdp_manager).flux(cdpId, address(this), wad);\n', '        IGemJoinLike(mcd_join_eth_a).exit(address(this), wad);\n', '    }\n', '\n', '    function _wipe(uint wad) internal {\n', '        // wad in DAI\n', '        address urn = IManagerLike(cdp_manager).urns(cdpId);\n', '\n', '        IDaiJoinLike(mcd_join_dai).join(urn, wad);\n', '        IManagerLike(cdp_manager).frob(cdpId, 0, _getWipeDart(IVatLike(vat).dai(urn), urn));\n', '    }\n', '\n', '    function _getWipeDart(\n', '        uint _dai,\n', '        address urn\n', '    ) internal view returns (int dart) {\n', '        (, uint rate,,,) = IVatLike(vat).ilks(ilk);\n', '        (, uint art) = IVatLike(vat).urns(ilk, urn);\n', '\n', '        dart = toInt(_dai / rate);\n', '        dart = uint(dart) <= art ? - dart : - toInt(art);\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        _swap(IERC20(dai).balanceOf(address(this)));\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        Vault(fDAI).withdrawAll(); // get Dai\n', '        _wipe(getTotalDebtAmount().add(1)); // in case of edge case\n', '        _freeWETH(balanceOfmVault());\n', '    }\n', '\n', '    function balanceOf() public view returns (uint) {\n', '        return balanceOfWant()\n', '               .add(balanceOfmVault());\n', '    }\n', '\n', '    function balanceOfWant() public view returns (uint) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfmVault() public view returns (uint) {\n', '        uint ink;\n', '        address urnHandler = IManagerLike(cdp_manager).urns(cdpId);\n', '        (ink,) = IVatLike(vat).urns(ilk, urnHandler);\n', '        return ink;\n', '    }\n', '\n', '    function harvest() public {\n', '        require(msg.sender == strategist || msg.sender == harvester || msg.sender == governance, "!authorized");\n', '        \n', '        uint v = getUnderlyingDai();\n', '        uint d = getTotalDebtAmount();\n', '        require(v > d, "profit is not realized yet!");\n', '        uint profit = v.sub(d);\n', '\n', '        \n', '        uint _before = IERC20(want).balanceOf(address(this));\n', '        _swap(_withdrawDaiMost(profit));\n', '        uint _after = IERC20(want).balanceOf(address(this));\n', '\n', '        uint _want = _after.sub(_before);\n', '        if (_want > 0) {\n', '            uint _fee = _want.mul(performanceFee).div(performanceMax);\n', '            uint _strategistReward = _fee.mul(strategistReward).div(strategistRewardMax);\n', '            IERC20(want).safeTransfer(strategist, _strategistReward);\n', '            IERC20(want).safeTransfer(Controller(controller).rewards(), _fee.sub(_strategistReward));\n', '        }\n', '\n', '        deposit();\n', '    }\n', '    \n', '    function shouldDraw() external view returns (bool) {\n', '        uint _safe = c.mul(1e2);\n', '        uint _current = getmVaultRatio(0);\n', '        if (_current > c_base.mul(c_safe).mul(1e2)) {\n', '            _current = c_base.mul(c_safe).mul(1e2);\n', '        }\n', '        return (_current > _safe);\n', '    }\n', '    \n', '    function drawAmount() public view returns (uint) {\n', '        uint _safe = c.mul(1e2);\n', '        uint _current = getmVaultRatio(0);\n', '        if (_current > c_base.mul(c_safe).mul(1e2)) {\n', '            _current = c_base.mul(c_safe).mul(1e2);\n', '        }\n', '        if (_current > _safe) {\n', '            uint _eth = balanceOfmVault();\n', '            uint _diff = _current.sub(_safe);\n', '            uint _draw = _eth.mul(_diff).div(_safe).mul(c_base).mul(1e2).div(_current);\n', '            return _draw.mul(_getPrice()).div(1e18);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function draw() external {\n', '        uint _drawD = drawAmount();\n', '        if (_drawD > 0) {\n', '            _lockWETHAndDrawDAI(0, _drawD);\n', '            Vault(fDAI).depositAll();\n', '        }\n', '    }\n', '    \n', '    function shouldRepay() external view returns (bool) {\n', '        uint _safe = c.mul(1e2);\n', '        uint _current = getmVaultRatio(0);\n', '        _current = _current.mul(105).div(100); // 5% buffer to avoid deposit/rebalance loops\n', '        return (_current < _safe);\n', '    }\n', '    \n', '    function repayAmount() public view returns (uint) {\n', '        uint _safe = c.mul(1e2);\n', '        uint _current = getmVaultRatio(0);\n', '        _current = _current.mul(105).div(100); // 5% buffer to avoid deposit/rebalance loops\n', '        if (_current < _safe) {\n', '            uint d = getTotalDebtAmount();\n', '            uint diff = _safe.sub(_current);\n', '            return d.mul(diff).div(_safe);\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function repay() external {\n', '        uint free = repayAmount();\n', '        if (free > 0) {\n', '            _wipe(_withdrawDaiLeast(free));\n', '        }\n', '    }\n', '    \n', '    function forceRebalance(uint _amount) external {\n', '        require(msg.sender == governance || msg.sender == strategist || msg.sender == harvester, "!authorized");\n', '        _wipe(_withdrawDaiLeast(_amount));\n', '    }\n', '\n', '    function getTotalDebtAmount() public view returns (uint) {\n', '        uint art;\n', '        uint rate;\n', '        address urnHandler = IManagerLike(cdp_manager).urns(cdpId);\n', '        (,art) = IVatLike(vat).urns(ilk, urnHandler);\n', '        (,rate,,,) = IVatLike(vat).ilks(ilk);\n', '        return art.mul(rate).div(1e27);\n', '    }\n', '\n', '    function getmVaultRatio(uint amount) public view returns (uint) {\n', '        uint spot; // ray\n', '        uint liquidationRatio; // ray\n', '        uint denominator = getTotalDebtAmount();\n', '\n', '        if (denominator == 0) {\n', '            return uint(-1);\n', '        }\n', '\n', '        (,,spot,,) = IVatLike(vat).ilks(ilk);\n', '        (,liquidationRatio) = ISpotLike(mcd_spot).ilks(ilk);\n', '        uint delayedCPrice = spot.mul(liquidationRatio).div(1e27); // ray\n', '\n', '        uint _balance = balanceOfmVault();\n', '        if (_balance < amount) {\n', '            _balance = 0;\n', '        } else {\n', '            _balance = _balance.sub(amount);\n', '        }\n', '\n', '        uint numerator = _balance.mul(delayedCPrice).div(1e18); // ray\n', '        return numerator.div(denominator).div(1e3);\n', '    }\n', '\n', '    function getUnderlyingDai() public view returns (uint) {\n', '        return IERC20(fDAI).balanceOf(address(this))\n', '                .mul(Vault(fDAI).priceE18())\n', '                .div(1e18);\n', '    }\n', '\n', '    function _withdrawDaiMost(uint _amount) internal returns (uint) {\n', '        uint _shares = _amount\n', '                        .mul(1e18)\n', '                        .div(Vault(fDAI).priceE18());\n', '        \n', '        if (_shares > IERC20(fDAI).balanceOf(address(this))) {\n', '            _shares = IERC20(fDAI).balanceOf(address(this));\n', '        }\n', '\n', '        uint _before = IERC20(dai).balanceOf(address(this));\n', '        Vault(fDAI).withdraw(_shares);\n', '        uint _after = IERC20(dai).balanceOf(address(this));\n', '        return _after.sub(_before);\n', '    }\n', '\n', '    function _withdrawDaiLeast(uint _amount) internal returns (uint) {\n', '        uint _shares = _amount\n', '                        .mul(1e18)\n', '                        .div(Vault(fDAI).priceE18())\n', '                        .mul(withdrawalMax)\n', '                        .div(withdrawalMax.sub(withdrawalFee));\n', '\n', '        if (_shares > IERC20(fDAI).balanceOf(address(this))) {\n', '            _shares = IERC20(fDAI).balanceOf(address(this));\n', '        }\n', '\n', '        uint _before = IERC20(dai).balanceOf(address(this));\n', '        Vault(fDAI).withdraw(_shares);\n', '        uint _after = IERC20(dai).balanceOf(address(this));\n', '        return _after.sub(_before);\n', '    }\n', '\n', '    function _swap(uint _amountIn) internal {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(dai);\n', '        path[1] = address(want);\n', '\n', '        // approve unirouter to use dai\n', '        IUniV2(unirouter).swapExactTokensForTokens(_amountIn, 0, path, address(this), now.add(1 days));\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}\n', '\n', '// File: contracts/instances/Strategy_YFI_wETHInstrance.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'contract Strategy_YFI_wETHInstrance is Strategy_YFI_wETH {\n', '    constructor()\n', '        public\n', '        Strategy_YFI_wETH(address(0xDc03b4900Eff97d997f4B828ae0a45cd48C3b22d))\n', '    {}\n', '}']