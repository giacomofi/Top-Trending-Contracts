['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-21\n', '*/\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'library ExtendedMath {\n', '    /**\n', '     * @return The given number raised to the power of 2\n', '     */\n', '    function pow2(uint256 a) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * a;\n', '        require(c / a == a, "ExtendedMath: squaring overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @return The square root of the given number\n', '     */\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Sacrifice {\n', '    constructor(address payable _recipient) public payable {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface IERC20Mintable {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function mint(address _to, uint256 _value) external returns (bool);\n', '    function balanceOf(address _account) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard is Initializable {\n', '    // counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    function initialize() public initializer {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title EasyStaking\n', ' *\n', ' * Note: all percentage values are between 0 (0%) and 1 (100%)\n', ' * and represented as fixed point numbers containing 18 decimals like with Ether\n', ' * 100% == 1 ether\n', ' */\n', 'contract EasyStaking is Ownable, ReentrancyGuard {\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '\n', '    /**\n', '     * @dev Emitted when a user deposits tokens.\n', '     * @param sender User address.\n', "     * @param id User's unique deposit ID.\n", '     * @param amount The amount of deposited tokens.\n', '     * @param balance Current user balance.\n', "     * @param accruedEmission User's accrued emission.\n", '     * @param prevDepositDuration Duration of the previous deposit in seconds.\n', '     */\n', '    event Deposited(\n', '        address indexed sender,\n', '        uint256 indexed id,\n', '        uint256 amount,\n', '        uint256 balance,\n', '        uint256 accruedEmission,\n', '        uint256 prevDepositDuration\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev Emitted when a user withdraws tokens.\n', '     * @param sender User address.\n', "     * @param id User's unique deposit ID.\n", '     * @param amount The amount of withdrawn tokens.\n', '     * @param balance Current user balance.\n', "     * @param accruedEmission User's accrued emission.\n", '     * @param lastDepositDuration Duration of the last deposit in seconds.\n', '     */\n', '    event Withdrawn(\n', '        address indexed sender,\n', '        uint256 indexed id,\n', '        uint256 amount,\n', '        uint256 balance,\n', '        uint256 accruedEmission,\n', '        uint256 lastDepositDuration\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when a user withdraws Reward tokens.\n', '     * @param sender User address.\n', "     * @param id User's unique deposit ID.\n", '     * @param rewardAmount The amount of withdrawn tokens.\n', '     * @param claimedRewards The amount of already claimed rewards.\n', '     */\n', '    event WithdrawnRewards(\n', '        address indexed sender,\n', '        uint256 indexed id,\n', '        uint256 rewardAmount,\n', '        uint256 claimedRewards\n', '    );\n', '    \n', '\n', '    /**\n', '     * @dev Emitted when a new Liquidity Provider address value is set.\n', '     * @param value A new address value.\n', '     * @param sender The owner address at the moment of address changing.\n', '     */\n', '    event LiquidityProviderAddressSet(address value, address sender);\n', '\n', '    uint256 private constant YEAR = 365 days;\n', '    // The maximum emission rate (in percentage)\n', '    uint256 public constant MAX_EMISSION_RATE = 150 finney; // 15%, 0.15 ether\n', '    // The period after which the new value of the parameter is set\n', '    uint256 public constant PARAM_UPDATE_DELAY = 7 days;\n', '\n', '    // STAKE token\n', '    IERC20Mintable public token;\n', '    \n', '    // Reward Token\n', '    IERC20Mintable public tokenReward;\n', '    \n', '    \n', '    struct UintParam {\n', '        uint256 oldValue;\n', '        uint256 newValue;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    struct AddressParam {\n', '        address oldValue;\n', '        address newValue;\n', '        uint256 timestamp;\n', '    }\n', '\n', '\n', '    // The address for the Liquidity Providers \n', '    AddressParam public liquidityProviderAddressParam;\n', '\n', '    // The deposit balances of users\n', '    mapping (address => mapping (uint256 => uint256)) public balances;\n', "    // The dates of users' deposits\n", '    mapping (address => mapping (uint256 => uint256)) public depositDates;\n', '    // The last deposit id\n', '    mapping (address => uint256) public lastDepositIds;\n', '    // Rewards tokens sum \n', '    mapping (address => mapping (uint256 => uint256)) public claimedRewards;\n', '    // To claim rewards tokens sum\n', '    mapping (address => mapping (uint256 => uint256)) public toClaimRewards;\n', '    // The total staked amount\n', '    uint256 public totalStaked;\n', '\n', '    // Variable that prevents _deposit method from being called 2 times\n', '    bool private locked;\n', "    // The library that is used to calculate user's current emission rate\n", '\n', '\n', '    /**\n', '     * @dev Initializes the contract.\n', '     * @param _owner The owner of the contract.\n', '     * @param _tokenAddress The address of the STAKE token contract.\n', '     * @param _liquidityProviderAddress The address for the Liquidity Providers reward.\n', '     */\n', '    function initialize(\n', '        address _owner,\n', '        address _tokenAddress,\n', '        address _tokenReward,\n', '        address _liquidityProviderAddress\n', '    ) external initializer {\n', '        require(_owner != address(0), "zero address");\n', '        require(_tokenAddress.isContract(), "not a contract address");\n', '        Ownable.initialize(msg.sender);\n', '        ReentrancyGuard.initialize();\n', '        token = IERC20Mintable(_tokenAddress);\n', '        tokenReward = IERC20Mintable(_tokenReward);\n', '        setLiquidityProviderAddress(_liquidityProviderAddress);\n', '        Ownable.transferOwnership(_owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev This method is used to deposit tokens to the deposit opened before.\n', '     * It calls the internal "_deposit" method and transfers tokens from sender to contract.\n', '     * Sender must approve tokens first.\n', '     *\n', '     * Instead this, user can use the simple "transfer" method of STAKE token contract to make a deposit.\n', "     * Sender's approval is not needed in this case.\n", '     *\n', '     * Note: each call updates the deposit date so be careful if you want to make a long staking.\n', '     *\n', "     * @param _depositId User's unique deposit ID.\n", '     * @param _amount The amount to deposit.\n', '     */\n', '    function deposit(uint256 _depositId, uint256 _amount) public {\n', '        require (_depositId <=4 );\n', '        lastDepositIds[msg.sender]=3;\n', '        _deposit(msg.sender, _depositId, _amount);\n', '        _setLocked(true);\n', '        require(token.transferFrom(msg.sender, address(this), _amount), "transfer failed");\n', '        _setLocked(false);\n', '    }\n', '\n', ' \n', '    /**\n', '     * @dev This method is used to make a withdrawal.\n', '     * It calls the internal "_withdraw" method.\n', "     * @param _depositId User's unique deposit ID\n", '     * @param _amount The amount to withdraw (0 - to withdraw all).\n', '     */\n', '    function makeWithdrawal(uint256 _depositId, uint256 _amount) external {\n', '        uint256 requestDate = depositDates[msg.sender][_depositId];\n', '        uint256 timestamp = _now();\n', '        uint256 lockEnd = 0;\n', '        if (_depositId==1) {\n', '            lockEnd=60;\n', '        } else if (_depositId==2) {\n', '            lockEnd=60*60*24*30*3; // 3 months\n', '        } else {\n', '            lockEnd=60*60*24*30*6; // 6 months\n', '        }\n', '        require(timestamp >= requestDate+lockEnd, "too early. Lockup period");\n', '        _withdraw(msg.sender, _depositId, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev This method is used to make a Rewards withdrawal.\n', '     * It calls the internal "_withdraw" method.\n', "     * @param _depositId User's unique deposit ID\n", '     */\n', '    function makeWithdrawalRewards(uint256 _depositId) external {\n', '        _withdrawRewards(msg.sender, _depositId);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev This method is used to claim unsupported tokens accidentally sent to the contract.\n', '     * It can only be called by the owner.\n', '     * @param _token The address of the token contract (zero address for claiming native coins).\n', '     * @param _to The address of the tokens/coins receiver.\n', '     * @param _amount Amount to claim.\n', '     */\n', '    function claimTokens(address _token, address payable _to, uint256 _amount) external onlyOwner {\n', '        require(_to != address(0) && _to != address(this), "not a valid recipient");\n', '        require(_amount > 0, "amount should be greater than 0");\n', '        if (_token == address(0)) {\n', '            if (!_to.send(_amount)) { // solium-disable-line security/no-send\n', '                (new Sacrifice).value(_amount)(_to);\n', '            }\n', '        } else if (_token == address(token)) {\n', '            uint256 availableAmount = token.balanceOf(address(this)).sub(totalStaked);\n', '            require(availableAmount >= _amount, "insufficient funds");\n', '            require(token.transfer(_to, _amount), "transfer failed");\n', '        } else {\n', '            IERC20 customToken = IERC20(_token);\n', '            customToken.safeTransfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Sets the address for the Liquidity Providers reward.\n', '     * Can only be called by owner.\n', '     * @param _address The new address.\n', '     */\n', '    function setLiquidityProviderAddress(address _address) public onlyOwner {\n', '        require(_address != address(0), "zero address");\n', '        require(_address != address(this), "wrong address");\n', '        AddressParam memory param = liquidityProviderAddressParam;\n', '        if (param.timestamp == 0) {\n', '            param.oldValue = _address;\n', '        } else if (_paramUpdateDelayElapsed(param.timestamp)) {\n', '            param.oldValue = param.newValue;\n', '        }\n', '        param.newValue = _address;\n', '        param.timestamp = _now();\n', '        liquidityProviderAddressParam = param;\n', '        emit LiquidityProviderAddressSet(_address, msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @param _depositDate Deposit date.\n', '     * @param _amount Amount based on which emission is calculated and accrued.\n', '     * @return Total accrued emission user share, and seconds passed since the previous deposit started.\n', '     */\n', '    function getAccruedEmission(\n', '        uint256 _depositDate,\n', '        uint256 _amount,\n', '        uint256 stakeType\n', '    ) public view returns (uint256 userShare, uint256 timePassed) {\n', '        if (_amount == 0 || _depositDate == 0) return (0, 0);\n', '        timePassed = _now().sub(_depositDate);\n', '        if (timePassed == 0) return (0, 0);\n', '        \n', '        uint256 stakeRate = 0 finney; \n', '        \n', '        if (stakeType==1) {\n', '            stakeRate = 50 finney; //5%\n', '        } else if (stakeType==2) {\n', '            stakeRate = 100 finney; //10%\n', '        } else if (stakeType==3) {\n', '            stakeRate = 150 finney; //15%\n', '        }\n', '        userShare = _amount.mul(stakeRate).mul(timePassed).div(YEAR * 1 ether);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Calls internal "_mint" method, increases the user balance, and updates the deposit date.\n', '     * @param _sender The address of the sender.\n', "     * @param _id User's unique deposit ID.\n", '     * @param _amount The amount to deposit.\n', '     */\n', '    function _deposit(address _sender, uint256 _id, uint256 _amount) internal nonReentrant {\n', '        require(_amount > 0, "deposit amount should be more than 0");\n', '        //(uint256 sigmoidParamA,,) = getSigmoidParameters();\n', '        //if (sigmoidParamA == 0 && totalSupplyFactor() == 0) revert("emission stopped");\n', '        // new deposit, calculate interests\n', '        (uint256 userShare, uint256 timePassed) = _calcRewards(_sender, _id, 0);\n', '        uint256 newBalance = balances[_sender][_id].add(_amount);\n', '        balances[_sender][_id] = newBalance;\n', '        totalStaked = totalStaked.add(_amount);\n', '        depositDates[_sender][_id] = _now();\n', '        emit Deposited(_sender, _id, _amount, newBalance, userShare, timePassed);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal "_mint" method and then transfers tokens to the sender.\n', '     * @param _sender The address of the sender.\n', "     * @param _id User's unique deposit ID.\n", '     * @param _amount The amount to withdraw (0 - to withdraw all).\n', '     */\n', '    function _withdraw(address _sender, uint256 _id, uint256 _amount) internal nonReentrant {\n', '        require(_id > 0, "wrong deposit id");\n', '        require(balances[_sender][_id] > 0 && balances[_sender][_id] >= _amount, "insufficient funds");\n', '        uint256 amount = _amount == 0 ? balances[_sender][_id] : _amount;\n', '        require(token.transfer(_sender, amount), "transfer failed");\n', '\n', '        (uint256 accruedEmission, uint256 timePassed) = _calcRewards(_sender, _id, amount);\n', '        balances[_sender][_id] = balances[_sender][_id].sub(amount);\n', '        totalStaked = totalStaked.sub(amount);\n', '        if (balances[_sender][_id] == 0) {\n', '            depositDates[_sender][_id] = 0;\n', '        }\n', '        emit Withdrawn(_sender, _id, _amount, balances[_sender][_id], accruedEmission, timePassed);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal "_mint" method and then transfers tokens to the sender.\n', '     * @param _sender The address of the sender.\n', "     * @param _id User's unique deposit ID.\n", '     */\n', '    function _withdrawRewards(address _sender, uint256 _id) internal nonReentrant {\n', '        require(_id > 0, "wrong deposit id");\n', '        (uint256 userShare, uint256 timePassed) = _calcRewards(_sender, _id, 0);\n', '        uint256 toClaim=0;\n', '        if (toClaimRewards[_sender][_id] < claimedRewards[_sender][_id]) {\n', '            toClaim = 0;\n', '        } else {\n', '            toClaim = toClaimRewards[_sender][_id].sub(claimedRewards[_sender][_id]);\n', '        }\n', '        require(toClaim > 0, "nothing to claim");\n', '        claimedRewards[_sender][_id]=claimedRewards[_sender][_id].add(toClaimRewards[_sender][_id]); \n', '        require(tokenReward.transferFrom(liquidityProviderAddress(),_sender, toClaim), "Liquidity pool transfer failed");\n', '        emit WithdrawnRewards(\n', '        _sender,\n', '        _id,\n', '        toClaim,\n', '        claimedRewards[_sender][_id]);\n', '    }\n', '    \n', '\n', '    /**\n', '     * @dev Calculate MAX_EMISSION_RATE per annum and distributes.\n', "     * @param _user User's address.\n", "     * @param _id User's unique deposit ID.\n", '     * @param _amount Amount based on which emission is calculated and accrued. When 0, current deposit balance is used.\n', '     */\n', '    function _calcRewards(address _user, uint256 _id, uint256 _amount) internal returns (uint256, uint256) {\n', '        uint256 currentBalance = balances[_user][_id]; \n', '        uint256 amount = _amount == 0 ? currentBalance : _amount;\n', '        (uint256 accruedEmission, uint256 timePassed) = getAccruedEmission(depositDates[_user][_id], amount,_id);\n', '        toClaimRewards[_user][_id]=toClaimRewards[_user][_id].add(accruedEmission);\n', '        return (accruedEmission, timePassed);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the next value of the parameter and the timestamp of this setting.\n', '     */\n', '    function _updateUintParam(UintParam storage _param, uint256 _newValue) internal {\n', '        if (_param.timestamp == 0) {\n', '            _param.oldValue = _newValue;\n', '        } else if (_paramUpdateDelayElapsed(_param.timestamp)) {\n', '            _param.oldValue = _param.newValue;\n', '        }\n', '        _param.newValue = _newValue;\n', '        _param.timestamp = _now();\n', '    }\n', '\n', '    /**\n', '     * @return Returns current liquidity providers reward address.\n', '     */\n', '    function liquidityProviderAddress() public view returns (address) {\n', '        AddressParam memory param = liquidityProviderAddressParam;\n', '        return param.newValue;\n', '    }\n', '    \n', '    /**\n', '     * @return Returns the current value of the parameter.\n', '     */\n', '    function _getUintParamValue(UintParam memory _param) internal view returns (uint256) {\n', '        return _paramUpdateDelayElapsed(_param.timestamp) ? _param.newValue : _param.oldValue;\n', '    }\n', '\n', '    /**\n', '     * @return Returns true if param update delay elapsed.\n', '     */\n', '    function _paramUpdateDelayElapsed(uint256 _paramTimestamp) internal view returns (bool) {\n', '        return _now() > _paramTimestamp.add(PARAM_UPDATE_DELAY);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets lock to prevent reentrance.\n', '     */\n', '    function _setLocked(bool _locked) internal {\n', '        locked = _locked;\n', '    }\n', '\n', '    /**\n', '     * @return Returns current timestamp.\n', '     */\n', '    function _now() internal view returns (uint256) {\n', '        // Note that the timestamp can have a 900-second error:\n', '        // https://github.com/ethereum/wiki/blob/c02254611f218f43cbb07517ca8e5d00fd6d6d75/Block-Protocol-2.0.md\n', '        return now; // solium-disable-line security/no-block-members\n', '    }\n', '}']