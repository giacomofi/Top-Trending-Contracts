['/*\n', '\n', '    /     |  __    / ____|\n', '   /      | |__) | | |\n', '  / /    |  _  /  | |\n', ' / ____   | |    | |____\n', '/_/    _ |_|  _  _____|\n', '\n', '* ARC: v1/CoreV1.sol\n', '*\n', '* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/v1/CoreV1.sol\n', '*\n', '* Contract Dependencies: \n', '*\t- Adminable\n', '*\t- Context\n', '*\t- Ownable\n', '*\t- StorageV1\n', '* Libraries: \n', '*\t- Address\n', '*\t- Decimal\n', '*\t- Math\n', '*\t- SafeERC20\n', '*\t- SafeMath\n', '*\t- Storage\n', '*\t- TypesV1\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 ARC\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/* ===============================================\n', '* Flattened with Solidifier by Coinage\n', '* \n', '* https://solidifier.coina.ge\n', '* ===============================================\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface ISyntheticToken {\n', '\n', '    function symbolKey()\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function burn(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function transferCollateral(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IMintableToken {\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function burn(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title Math\n', ' *\n', ' * Library for non-standard Math functions\n', ' */\n', 'library Math {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Library Functions ============\n', '\n', '    /*\n', '     * Return target * (numerator / denominator).\n', '     */\n', '    function getPartial(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return target.mul(numerator).div(denominator);\n', '    }\n', '\n', '    function to128(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint128)\n', '    {\n', '        uint128 result = uint128(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint128"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function to96(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint96)\n', '    {\n', '        uint96 result = uint96(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint96"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function to32(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint32)\n', '    {\n', '        uint32 result = uint32(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint32"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function min(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a > b ? a : b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title Decimal\n', ' *\n', ' * Library that defines a fixed-point number with 18 decimal places.\n', ' */\n', 'library Decimal {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constants ============\n', '\n', '    uint256 constant BASE = 10**18;\n', '\n', '    // ============ Structs ============\n', '\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function one()\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: BASE });\n', '    }\n', '\n', '    function onePlus(\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.add(BASE) });\n', '    }\n', '\n', '    function mul(\n', '        uint256 target,\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, d.value, BASE);\n', '    }\n', '\n', '    function mul(\n', '        D256 memory d1,\n', '        D256 memory d2\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\n', '    }\n', '\n', '    function div(\n', '        uint256 target,\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, BASE, d.value);\n', '    }\n', '\n', '    function add(\n', '        D256 memory d,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.add(amount) });\n', '    }\n', '\n', '    function sub(\n', '        D256 memory d,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.sub(amount) });\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IOracle {\n', '\n', '    function fetchCurrentPrice()\n', '        external\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'library TypesV1 {\n', '\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Enums ============\n', '\n', '    enum AssetType {\n', '        Collateral,\n', '        Synthetic\n', '    }\n', '\n', '    // ============ Structs ============\n', '\n', '    struct MarketParams {\n', '        Decimal.D256 collateralRatio;\n', '        Decimal.D256 liquidationUserFee;\n', '        Decimal.D256 liquidationArcFee;\n', '    }\n', '\n', '    struct Position {\n', '        address owner;\n', '        AssetType collateralAsset;\n', '        AssetType borrowedAsset;\n', '        Par collateralAmount;\n', '        Par borrowedAmount;\n', '    }\n', '\n', '    struct RiskParams {\n', '        uint256 collateralLimit;\n', '        uint256 syntheticLimit;\n', '        uint256 positionCollateralMinimum;\n', '    }\n', '\n', '    // ============ AssetAmount ============\n', '\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par  // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ ArcAsset ============\n', '\n', '    function oppositeAsset(\n', '        AssetType assetType\n', '    )\n', '        internal\n', '        pure\n', '        returns (AssetType)\n', '    {\n', '        return assetType == AssetType.Collateral ? AssetType.Synthetic : AssetType.Collateral;\n', '    }\n', '\n', '    // ============ Par (Principal Amount) ============\n', '\n', '    // Individual principal amount for an account\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    function zeroPar()\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: false,\n', '            value: 0\n', '        });\n', '    }\n', '\n', '    function positiveZeroPar()\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: true,\n', '            value: 0\n', '        });\n', '    }\n', '\n', '    function sub(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return add(a, negative(b));\n', '    }\n', '\n', '    function add(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        Par memory result;\n', '        if (a.sign == b.sign) {\n', '            result.sign = a.sign;\n', '            result.value = SafeMath.add(a.value, b.value).to128();\n', '        } else {\n', '            if (a.value >= b.value) {\n', '                result.sign = a.sign;\n', '                result.value = SafeMath.sub(a.value, b.value).to128();\n', '            } else {\n', '                result.sign = b.sign;\n', '                result.value = SafeMath.sub(b.value, a.value).to128();\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function equals(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        if (a.value == b.value) {\n', '            if (a.value == 0) {\n', '                return true;\n', '            }\n', '            return a.sign == b.sign;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function negative(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: !a.sign,\n', '            value: a.value\n', '        });\n', '    }\n', '\n', '    function isNegative(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return !a.sign && a.value > 0;\n', '    }\n', '\n', '    function isPositive(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a.sign && a.value > 0;\n', '    }\n', '\n', '    function isZero(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a.value == 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'library Storage {\n', '\n', '    /**\n', '     * @dev Performs an SLOAD and returns the data in the slot.\n', '     */\n', '    function load(\n', '        bytes32 slot\n', '    )\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        bytes32 result;\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            result := sload(slot)\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Performs an SSTORE to save the value to the slot.\n', '     */\n', '    function store(\n', '        bytes32 slot,\n', '        bytes32 value\n', '    )\n', '        internal\n', '    {\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            sstore(slot, value)\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Adminable\n', ' * @author dYdX\n', ' *\n', ' * @dev EIP-1967 Proxy Admin contract.\n', ' */\n', 'contract Adminable {\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     *  This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1.\n', '     */\n', '    bytes32 internal constant ADMIN_SLOT =\n', '    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '    * @dev Modifier to check whether the `msg.sender` is the admin.\n', '    *  If it is, it will run the function. Otherwise, it will revert.\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(\n', '            msg.sender == getAdmin(),\n', '            "Adminable: caller is not admin"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return The EIP-1967 proxy admin\n', '     */\n', '    function getAdmin()\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title StateV1\n', ' * @author Kerman Kohli\n', ' * @notice This contract holds all the state regarding a sythetic asset protocol.\n', ' *         The contract has an owner and core address which can call certain functions.\n', ' */\n', 'contract StateV1 is Ownable {\n', '\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '    using TypesV1 for TypesV1.Par;\n', '\n', '    // ============ Variables ============\n', '\n', '    address public core;\n', '\n', '    TypesV1.MarketParams public market;\n', '    TypesV1.RiskParams public risk;\n', '\n', '    IOracle public oracle;\n', '    address public collateralAsset;\n', '    address public syntheticAsset;\n', '\n', '    uint256 public positionCount;\n', '    uint256 public totalSupplied;\n', '\n', '    mapping (uint256 => TypesV1.Position) public positions;\n', '\n', '    // ============ Events ============\n', '\n', '    event MarketParamsUpdated(TypesV1.MarketParams updatedMarket);\n', '    event RiskParamsUpdated(TypesV1.RiskParams updatedParams);\n', '    event OracleUpdated(address updatedOracle);\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        address _core,\n', '        address _collateralAsset,\n', '        address _syntheticAsset,\n', '        address _oracle,\n', '        TypesV1.MarketParams memory _marketParams,\n', '        TypesV1.RiskParams memory _riskParams\n', '    )\n', '        public\n', '    {\n', '        core = _core;\n', '        collateralAsset = _collateralAsset;\n', '        syntheticAsset = _syntheticAsset;\n', '\n', '        setOracle(_oracle);\n', '        setMarketParams(_marketParams);\n', '        setRiskParams(_riskParams);\n', '    }\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier onlyCore() {\n', '        require(\n', '            msg.sender == core,\n', '            "StateV1: only core can call"\n', '        );\n', '        _;\n', '    }\n', '\n', '    // ============ Admin Setters ============\n', '\n', '    /**\n', '     * @dev Set the address of the oracle\n', '     *\n', '     * @param _oracle Address of the oracle to set\n', '     */\n', '    function setOracle(\n', '        address _oracle\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(\n', '            _oracle != address(0),\n', '            "StateV1: cannot set 0 for oracle address"\n', '        );\n', '\n', '        oracle = IOracle(_oracle);\n', '        emit OracleUpdated(_oracle);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the parameters of the market\n', '     *\n', '     * @param _marketParams Set the new market params\n', '     */\n', '    function setMarketParams(\n', '        TypesV1.MarketParams memory _marketParams\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        market = _marketParams;\n', '        emit MarketParamsUpdated(market);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the risk parameters of the market\n', '     *\n', '     * @param _riskParams Set the risk levels of the market\n', '     */\n', '    function setRiskParams(\n', '        TypesV1.RiskParams memory _riskParams\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        risk = _riskParams;\n', '        emit RiskParamsUpdated(risk);\n', '    }\n', '\n', '    // ============ Core Setters ============\n', '\n', '    function updateTotalSupplied(\n', '        uint256 amount\n', '    )\n', '        public\n', '        onlyCore\n', '    {\n', '        totalSupplied = totalSupplied.add(amount);\n', '    }\n', '\n', '    function savePosition(\n', '        TypesV1.Position memory position\n', '    )\n', '        public\n', '        onlyCore\n', '        returns (uint256)\n', '    {\n', '        uint256 idToAllocate = positionCount;\n', '        positions[positionCount] = position;\n', '        positionCount = positionCount.add(1);\n', '\n', '        return idToAllocate;\n', '    }\n', '\n', '    function setAmount(\n', '        uint256 id,\n', '        TypesV1.AssetType asset,\n', '        TypesV1.Par memory amount\n', '    )\n', '        public\n', '        onlyCore\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        TypesV1.Position storage position = positions[id];\n', '\n', '        if (position.collateralAsset == asset) {\n', '            position.collateralAmount = amount;\n', '        } else {\n', '            position.borrowedAmount = amount;\n', '        }\n', '\n', '        return position;\n', '    }\n', '\n', '    function updatePositionAmount(\n', '        uint256 id,\n', '        TypesV1.AssetType asset,\n', '        TypesV1.Par memory amount\n', '    )\n', '        public\n', '        onlyCore\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        TypesV1.Position storage position = positions[id];\n', '\n', '        if (position.collateralAsset == asset) {\n', '            position.collateralAmount = position.collateralAmount.add(amount);\n', '        } else {\n', '            position.borrowedAmount = position.borrowedAmount.add(amount);\n', '        }\n', '\n', '        return position;\n', '    }\n', '\n', '    // ============ Public Getters ============\n', '\n', '    function getAddress(\n', '        TypesV1.AssetType asset\n', '    )\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return asset == TypesV1.AssetType.Collateral ?\n', '            address(collateralAsset) :\n', '            address(syntheticAsset);\n', '    }\n', '\n', '    function getPosition(\n', '        uint256 id\n', '    )\n', '        public\n', '        view\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        return positions[id];\n', '    }\n', '\n', '    function getCurrentPrice()\n', '        public\n', '        view\n', '        returns (Decimal.D256 memory)\n', '    {\n', '        return oracle.fetchCurrentPrice();\n', '    }\n', '\n', '    // ============ Calculation Getters ============\n', '\n', '    function isCollateralized(\n', '        TypesV1.Position memory position\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (position.borrowedAmount.value == 0) {\n', '            return true;\n', '        }\n', '\n', '        Decimal.D256 memory currentPrice = oracle.fetchCurrentPrice();\n', '\n', '        (TypesV1.Par memory collateralDelta) = calculateCollateralDelta(\n', '            position.borrowedAsset,\n', '            position.collateralAmount,\n', '            position.borrowedAmount,\n', '            currentPrice\n', '        );\n', '\n', '        return collateralDelta.sign || collateralDelta.value == 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Given an asset, calculate the inverse amount of that asset\n', '     *\n', '     * @param asset The asset in question here\n', '     * @param amount The amount of this asset\n', '     * @param price What price do you want to calculate the inverse at\n', '     */\n', '    function calculateInverseAmount(\n', '        TypesV1.AssetType asset,\n', '        uint256 amount,\n', '        Decimal.D256 memory price\n', '    )\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 borrowRequired;\n', '\n', '        if (asset == TypesV1.AssetType.Collateral) {\n', '            borrowRequired = Decimal.mul(\n', '                amount,\n', '                price\n', '            );\n', '        } else if (asset == TypesV1.AssetType.Synthetic) {\n', '            borrowRequired = Decimal.div(\n', '                amount,\n', '                price\n', '            );\n', '        }\n', '\n', '        return borrowRequired;\n', '    }\n', '\n', '    /**\n', '     * @dev Similar to calculateInverseAmount although the difference being\n', '     *      that this factors in the collateral ratio.\n', '     *\n', '     * @param asset The asset in question here\n', '     * @param amount The amount of this asset\n', '     * @param price What price do you want to calculate the inverse at\n', '     */\n', '    function calculateInverseRequired(\n', '        TypesV1.AssetType asset,\n', '        uint256 amount,\n', '        Decimal.D256 memory price\n', '    )\n', '        public\n', '        view\n', '        returns (TypesV1.Par memory)\n', '    {\n', '\n', '        uint256 inverseRequired = calculateInverseAmount(\n', '            asset,\n', '            amount,\n', '            price\n', '        );\n', '\n', '        if (asset == TypesV1.AssetType.Collateral) {\n', '            inverseRequired = Decimal.div(\n', '                inverseRequired,\n', '                market.collateralRatio\n', '            );\n', '\n', '        } else if (asset == TypesV1.AssetType.Synthetic) {\n', '            inverseRequired = Decimal.mul(\n', '                inverseRequired,\n', '                market.collateralRatio\n', '            );\n', '        }\n', '\n', '        return TypesV1.Par({\n', '            sign: true,\n', '            value: inverseRequired.to128()\n', '        });\n', '    }\n', '\n', '    /**\n', '     * @dev When executing a liqudation, the price of the asset has to be calculated\n', '     *      at a discount in order for it to be profitable for the liquidator. This function\n', '     *      will get the current oracle price for the asset and find the discounted price.\n', '     *\n', '     * @param asset The asset in question here\n', '     */\n', '    function calculateLiquidationPrice(\n', '        TypesV1.AssetType asset\n', '    )\n', '        public\n', '        view\n', '        returns (Decimal.D256 memory)\n', '    {\n', '        Decimal.D256 memory result;\n', '        Decimal.D256 memory currentPrice = oracle.fetchCurrentPrice();\n', '\n', '        uint256 totalSpread = market.liquidationUserFee.value.add(\n', '            market.liquidationArcFee.value\n', '        );\n', '\n', '        if (asset == TypesV1.AssetType.Collateral) {\n', '            result = Decimal.sub(\n', '                Decimal.one(),\n', '                totalSpread\n', '            );\n', '        } else if (asset == TypesV1.AssetType.Synthetic) {\n', '            result = Decimal.add(\n', '                Decimal.one(),\n', '                totalSpread\n', '            );\n', '        }\n', '\n', '        result = Decimal.mul(\n', '            currentPrice,\n', '            result\n', '        );\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Given an asset being borrowed, figure out how much collateral can this still borrow or\n', '     *      is in the red by. This function is used to check if a position is undercolalteralised and\n', '     *      also to calculate how much can a position be liquidated by.\n', '     *\n', '     * @param borrowedAsset The asset which is being borrowed\n', '     * @param parSupply The amount being supplied\n', '     * @param parBorrow The amount being borrowed\n', '     * @param price The price to calculate this difference by\n', '     */\n', '    function calculateCollateralDelta(\n', '        TypesV1.AssetType borrowedAsset,\n', '        TypesV1.Par memory parSupply,\n', '        TypesV1.Par memory parBorrow,\n', '        Decimal.D256 memory price\n', '    )\n', '        public\n', '        view\n', '        returns (TypesV1.Par memory)\n', '    {\n', '        TypesV1.Par memory collateralDelta;\n', '        TypesV1.Par memory collateralRequired;\n', '\n', '        if (borrowedAsset == TypesV1.AssetType.Collateral) {\n', '            collateralRequired = calculateInverseRequired(\n', '                borrowedAsset,\n', '                parBorrow.value,\n', '                price\n', '            );\n', '        } else if (borrowedAsset == TypesV1.AssetType.Synthetic) {\n', '            collateralRequired = calculateInverseRequired(\n', '                borrowedAsset,\n', '                parBorrow.value,\n', '                price\n', '            );\n', '        }\n', '\n', '        collateralDelta = parSupply.sub(collateralRequired);\n', '\n', '        return collateralDelta;\n', '    }\n', '\n', '    /**\n', '     * @dev Add the user liqudation fee with the arc liquidation fee\n', '     */\n', '    function totalLiquidationSpread()\n', '        public\n', '        view\n', '        returns (Decimal.D256 memory)\n', '    {\n', '        return Decimal.D256({\n', '            value: market.liquidationUserFee.value.add(\n', '                market.liquidationArcFee.value\n', '            )\n', '        });\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the liquidation ratio between the user and ARC.\n', '     *\n', "     * @return First parameter it the user ratio, second is ARC's ratio\n", '     */\n', '    function calculateLiquidationSplit()\n', '        public\n', '        view\n', '        returns (\n', '            Decimal.D256 memory,\n', '            Decimal.D256 memory\n', '        )\n', '    {\n', '        Decimal.D256 memory total = Decimal.D256({\n', '            value: market.liquidationUserFee.value.add(\n', '                market.liquidationArcFee.value\n', '            )\n', '        });\n', '\n', '        Decimal.D256 memory userRatio = Decimal.D256({\n', '            value: Decimal.div(\n', '                market.liquidationUserFee.value,\n', '                total\n', '            )\n', '        });\n', '\n', '        return (\n', '            userRatio,\n', '            Decimal.sub(\n', '                Decimal.one(),\n', '                userRatio.value\n', '            )\n', '        );\n', '    }\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'contract StorageV1 {\n', '\n', '    bool public paused;\n', '\n', '    StateV1 public state;\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title CoreV1\n', ' * @author Kerman Kohli\n', ' * @notice This contract holds the core logic for manipulating ARC state. Ideally\n', '        both state and logic could be in one or as libraries however the bytecode\n', '        size is too large for this to occur. The core can be replaced via a new\n', '        proxy implementation for upgrade purposes. Important to note that NO user\n', '        funds are held in this contract. All funds are held inside the synthetic\n', '        asset itself. This was done to show transparency around how much collateral\n', '        is always backing a synth via Etherscan.\n', ' */\n', 'contract CoreV1 is StorageV1, Adminable {\n', '\n', '    // ============ Libraries ============\n', '\n', '    using SafeMath for uint256;\n', '    using Math for uint256;\n', '    using TypesV1 for TypesV1.Par;\n', '\n', '    // ============ Types ============\n', '\n', '    enum Operation {\n', '        Open,\n', '        Borrow,\n', '        Repay,\n', '        Liquidate\n', '    }\n', '\n', '    struct OperationParams {\n', '        uint256 id;\n', '        uint256 amountOne;\n', '        uint256 amountTwo;\n', '    }\n', '\n', '    // ============ Events ============\n', '\n', '    event ActionOperated(\n', '        uint8 operation,\n', '        OperationParams params,\n', '        TypesV1.Position updatedPosition\n', '    );\n', '\n', '    event ExcessTokensWithdrawn(\n', '        address token,\n', '        uint256 amount,\n', '        address destination\n', '    );\n', '\n', '    event PauseStatusUpdated(\n', '        bool value\n', '    );\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor() public {\n', '        paused = true;\n', '    }\n', '\n', '    function init(address _state)\n', '        external\n', '    {\n', '        require(\n', '            address(state) == address(0),\n', '            "CoreV1.init(): cannot recall init"\n', '        );\n', '\n', '        state = StateV1(_state);\n', '        paused = false;\n', '    }\n', '\n', '    // ============ Public Functions ============\n', '\n', '    /**\n', "     * @dev This is the only function that can be called by user's of the system\n", '     *      and uses an enum and struct to parse the args. This structure guarantees\n', '     *      the state machine will always meet certain properties\n', '     *\n', '     * @param operation An enum of the operation to execute\n', '     * @param params Parameters to exceute the operation against\n', '     */\n', '    function operateAction(\n', '        Operation operation,\n', '        OperationParams memory params\n', '    )\n', '        public\n', '    {\n', '        require(\n', '            paused == false,\n', '            "operateAction(): contracts cannot be paused"\n', '        );\n', '\n', '        TypesV1.Position memory operatedPosition;\n', '\n', '        (\n', '            uint256 collateralLimit,\n', '            uint256 syntheticLimit,\n', '            uint256 collateralMinimum\n', '        ) = state.risk();\n', '\n', '        if (operation == Operation.Open) {\n', '            (operatedPosition, params.id) = openPosition(\n', '                params.amountOne,\n', '                params.amountTwo\n', '            );\n', '\n', '            require(\n', '                params.amountOne >= collateralMinimum,\n', '                "operateAction(): must exceed minimum collateral amount"\n', '            );\n', '\n', '        } else if (operation == Operation.Borrow) {\n', '            operatedPosition = borrow(\n', '                params.id,\n', '                params.amountOne,\n', '                params.amountTwo\n', '            );\n', '        } else if (operation == Operation.Repay) {\n', '            operatedPosition = repay(\n', '                params.id,\n', '                params.amountOne,\n', '                params.amountTwo\n', '            );\n', '        } else if (operation == Operation.Liquidate) {\n', '            operatedPosition = liquidate(\n', '                params.id\n', '            );\n', '        }\n', '\n', '        IERC20 synthetic = IERC20(state.syntheticAsset());\n', '        IERC20 collateralAsset = IERC20(state.collateralAsset());\n', '\n', '        require(\n', '            synthetic.totalSupply() <= syntheticLimit || syntheticLimit == 0,\n', '            "operateAction(): synthetic supply cannot be greater than limit"\n', '        );\n', '\n', '        require(\n', '            collateralAsset.balanceOf(address(synthetic)) <= collateralLimit || collateralLimit == 0,\n', '            "operateAction(): collateral locked cannot be greater than limit"\n', '        );\n', '\n', "        // SUGGESTION: Making sure the state doesn't get trapped. Echnida fuzzing could help.\n", '        //             Testing very specific cases which a fuzzer may not be able to hit.\n', '        //             Setup derived contract which allows direct entry point of internal functions.\n', '\n', '        // Ensure that the operated action is collateralised again\n', '        require(\n', '            state.isCollateralized(operatedPosition) == true,\n', '            "operateAction(): the operated position is undercollateralised"\n', '        );\n', '\n', '        emit ActionOperated(\n', '            uint8(operation),\n', '            params,\n', '            operatedPosition\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw tokens owned by the proxy. This will never include depositor funds\n', '     *      since all the collateral is held by the synthetic token itself. The only funds\n', '     *      that will accrue based on CoreV1 & StateV1 is the liquidation fees.\n', '     *\n', '     * @param token Address of the token to withdraw\n', '     * @param destination Destination to withdraw to\n', '     * @param amount The total amount of tokens withdraw\n', '     */\n', '    function withdrawTokens(\n', '        address token,\n', '        address destination,\n', '        uint256 amount\n', '    )\n', '        external\n', '        onlyAdmin\n', '    {\n', '        SafeERC20.safeTransfer(\n', '            IERC20(token),\n', '            destination,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function setPause(bool value)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        paused = value;\n', '\n', '        emit PauseStatusUpdated(value);\n', '    }\n', '\n', '    // ============ Internal Functions ============\n', '\n', '    /**\n', '     * @dev Open a new position.\n', '     *\n', '     * @return The new position and the ID of the opened position\n', '     */\n', '    function openPosition(\n', '        uint256 collateralAmount,\n', '        uint256 borrowAmount\n', '    )\n', '        internal\n', '        returns (TypesV1.Position memory, uint256)\n', '    {\n', '        // CHECKS:\n', "        // 1. No checks required as it's all processed in borrow()\n", '\n', '        // EFFECTS:\n', '        // 1. Create a new Position struct with the basic fields filled out and save it to storage\n', '        // 2. Call `borrowPosition()`\n', '\n', '        TypesV1.Position memory newPosition = TypesV1.Position({\n', '            owner: msg.sender,\n', '            collateralAsset: TypesV1.AssetType.Collateral,\n', '            borrowedAsset: TypesV1.AssetType.Synthetic,\n', '            collateralAmount: TypesV1.positiveZeroPar(),\n', '            borrowedAmount: TypesV1.zeroPar()\n', '        });\n', '\n', '        // This position is saved to storage to make the logic around borrowing\n', '        // uniform. This is slightly gas inefficient but ok given the ability to\n', '        // ensure no diverging logic.\n', '\n', '        uint256 positionId = state.savePosition(newPosition);\n', '\n', '        newPosition = borrow(\n', '            positionId,\n', '            collateralAmount,\n', '            borrowAmount\n', '        );\n', '\n', '        return (\n', '            newPosition,\n', '            positionId\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Borrow against an existing position.\n', '     *\n', "     * @param positionId ID of the position you'd like to borrow against\n", '     * @param collateralAmount Collateral deposit amount\n', "     * @param borrowAmount How much would you'd like to borrow/mint\n", '     */\n', '    function borrow(\n', '        uint256 positionId,\n', '        uint256 collateralAmount,\n', '        uint256 borrowAmount\n', '    )\n', '        internal\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        // CHECKS:\n', '        // 1. Ensure that the position actually exists\n', '        // 2. Ensure the position is collateralised before borrowing against it\n', '        // 3. Ensure that msg.sender == owner of position\n', "        // 4. Determine if there's enough liquidity of the `borrowAsset`\n", '        // 5. Calculate the amount of collateral actually needed given the `collateralRatio`\n', '        // 6. Ensure the user has provided enough of the collateral asset\n', '\n', '        // EFFECTS:\n', '        // 1. Increase the collateral amount to calculate the maximum the amount the user can borrow\n', '        // 2. Calculate the proportional new par value based on the borrow amount\n', '        // 3. Update the total supplied collateral amount\n', '        // 4. Calculate the collateral needed and ensuring the position has that much\n', '\n', '        // INTERACTIONS:\n', '        // 1. Mint the synthetic asset\n', '        // 2. Transfer the collateral to the synthetic token itself.\n', '        //    This ensures on Etherscan people can see how much collateral is backing\n', '        //    the synthetic\n', '\n', '        // Get the current position\n', '        TypesV1.Position memory position = state.getPosition(positionId);\n', '\n', "        // Ensure it's collateralized\n", '        require(\n', '            state.isCollateralized(position) == true,\n', '            "borrowPosition(): position is not collateralised"\n', '        );\n', '\n', '        require(\n', '            position.owner == msg.sender,\n', '            "borrowPosition(): must be a valid position"\n', '        );\n', '\n', '        Decimal.D256 memory currentPrice = state.getCurrentPrice();\n', '\n', "        // Increase the user's collateral amount\n", '        position = state.updatePositionAmount(\n', '            positionId,\n', '            position.collateralAsset,\n', '            TypesV1.Par({\n', '                sign: true,\n', '                value: collateralAmount.to128()\n', '            })\n', '        );\n', '\n', '        state.updateTotalSupplied(collateralAmount);\n', '\n', "        // Only if they're borrowing\n", '        if (borrowAmount > 0) {\n', '            // Calculate the new borrow amount\n', '            TypesV1.Par memory newPar = position.borrowedAmount.add(\n', '                TypesV1.Par({\n', '                    sign: false,\n', '                    value: borrowAmount.to128()\n', '                })\n', '            );\n', '\n', "            // Update the position's borrow amount\n", '            position = state.setAmount(\n', '                positionId,\n', '                position.borrowedAsset,\n', '                newPar\n', '            );\n', '\n', '            // Check how much collateral they need based on their new position details\n', '            TypesV1.Par memory collateralRequired = state.calculateInverseRequired(\n', '                position.borrowedAsset,\n', '                position.borrowedAmount.value,\n', '                currentPrice\n', '            );\n', '\n', "            // Ensure the user's collateral amount is greater than the collateral needed\n", '            require(\n', '                position.collateralAmount.value >= collateralRequired.value,\n', '                "borrowPosition(): not enough collateral provided"\n', '            );\n', '        }\n', '\n', '        IERC20 syntheticAsset = IERC20(state.syntheticAsset());\n', '        IERC20 collateralAsset = IERC20(state.collateralAsset());\n', '\n', '        // Transfer the collateral asset to the synthetic contract\n', '        SafeERC20.safeTransferFrom(\n', '            collateralAsset,\n', '            msg.sender,\n', '            address(syntheticAsset),\n', '            collateralAmount\n', '        );\n', '\n', '        // Mint the synthetic token to user opening the borrow position\n', '        ISyntheticToken(address(syntheticAsset)).mint(\n', '            msg.sender,\n', '            borrowAmount\n', '        );\n', '\n', '        return position;\n', '    }\n', '\n', '    /**\n', "     * @dev Repay money against a borrowed position. When this process occurs the position's\n", '     *      debt will be reduced and in turn will allow them to withdraw their collateral should they choose.\n', '     *\n', '     * @param positionId ID of the position to repay\n', '     * @param repayAmount Amount of collateral to repay\n', '     * @param withdrawAmount Amount of collateral to withdraw\n', '     */\n', '    function repay(\n', '        uint256 positionId,\n', '        uint256 repayAmount,\n', '        uint256 withdrawAmount\n', '    )\n', '        private\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        // CHECKS:\n', '        // 1. Ensure the position actually exists by ensuring the owner == msg.sender\n', '        // 2. Ensure the position is sufficiently collateralized\n', '\n', '        // EFFECTS:\n', '        // 1. Calculate the new par value of the position based on the amount paid back\n', "        // 2. Update the position's new borrow amount\n", '        // 3. Calculate how much collateral you need based on your current position balance\n', "        // 4. If the amount being withdrawn is less than or equal to amount withdrawn you're good\n", '\n', '        // INTERACTIONS:\n', '        // 1. Burn the synthetic asset directly from their wallet\n', '        // 2.Transfer the stable coins back to the user\n', '        TypesV1.Position memory position = state.getPosition(positionId);\n', '\n', '        Decimal.D256 memory currentPrice = state.getCurrentPrice();\n', '\n', '        // Ensure the user has a collateralised position when depositing\n', '        require(\n', '            state.isCollateralized(position) == true,\n', '            "repay(): position is not collateralised"\n', '        );\n', '\n', '        require(\n', '            position.owner == msg.sender,\n', '            "repay(): must be a valid position"\n', '        );\n', '\n', "        // Calculate the user's new borrow requirements after decreasing their debt\n", '        // An positive wei value will reduce the negative wei borrow value\n', '        TypesV1.Par memory newPar = position.borrowedAmount.add(\n', '            TypesV1.Par({\n', '                sign: true,\n', '                value: repayAmount.to128()\n', '            })\n', '        );\n', '\n', "        // Update the position's new borrow amount\n", '        position = state.setAmount(positionId, position.borrowedAsset, newPar);\n', '\n', '        // Calculate how much the user is allowed to withdraw given their debt was repaid\n', '        (TypesV1.Par memory collateralDelta) = state.calculateCollateralDelta(\n', '            position.borrowedAsset,\n', '            position.collateralAmount,\n', '            position.borrowedAmount,\n', '            currentPrice\n', '        );\n', '\n', '        // Ensure that the amount they are trying to withdraw is less than their limit\n', '        require(\n', '            withdrawAmount <= collateralDelta.value,\n', '            "repay(): cannot withdraw more than you\'re allowed"\n', '        );\n', '\n', '        // Decrease the collateral amount of the position\n', '        position = state.updatePositionAmount(\n', '            positionId,\n', '            position.collateralAsset,\n', '            TypesV1.Par({\n', '                sign: false,\n', '                value: withdrawAmount.to128()\n', '            })\n', '        );\n', '\n', '        ISyntheticToken synthetic = ISyntheticToken(state.syntheticAsset());\n', '        IERC20 collateralAsset = IERC20(state.collateralAsset());\n', '\n', '        // Burn the synthetic asset from the user\n', '        synthetic.burn(\n', '            msg.sender,\n', '            repayAmount\n', '        );\n', '\n', '        // Transfer collateral back to the user\n', '        bool transferResult = synthetic.transferCollateral(\n', '            address(collateralAsset),\n', '            msg.sender,\n', '            withdrawAmount\n', '        );\n', '\n', '        require(\n', '            transferResult == true,\n', '            "repay(): collateral failed to transfer"\n', '        );\n', '\n', '        return position;\n', '    }\n', '\n', '    /**\n', "     * @dev Liquidate a user's position. When this process occurs you're essentially\n", "     *      purchasing the users's debt at a discount (liquidation spread) in exchange\n", '     *      for the collateral they have deposited inside their position.\n', '     *\n', '     * @param positionId ID of the position to liquidate\n', '     */\n', '    function liquidate(\n', '        uint256 positionId\n', '    )\n', '        private\n', '        returns (TypesV1.Position memory)\n', '    {\n', '        // CHECKS:\n', '        // 1. Ensure that the position id is valid\n', "        // 2. Check the status of the position, only if it's undercollateralized you can call this\n", '\n', '        // EFFECTS:\n', '        // 1. Calculate the liquidation price price based on the liquidation penalty\n', '        // 2. Calculate how much the user is in debt by\n', '        // 3. Add the liquidation penalty on to the liquidation amount so they have some\n', "        //    margin of safety to make sure they don't get liquidated again\n", '        // 4. If the collateral to liquidate is greater than the collateral, bound it.\n', '        // 5. Calculate how much of the borrowed asset is to be liquidated based on the collateral delta\n', "        // 6. Decrease the user's debt obligation by that amount\n", '        // 7. Update the new borrow and collateral amounts\n', '\n', '        // INTERACTIONS:\n', '        // 1. Burn the synthetic asset from the liquidator\n', '        // 2. Transfer the collateral from the synthetic token to the liquidator\n', '        // 3. Transfer a portion to the ARC Core contract as a fee\n', '\n', '        TypesV1.Position memory position = state.getPosition(positionId);\n', '\n', '        require(\n', '            position.owner != address(0),\n', '            "liquidatePosition(): must be a valid position"\n', '        );\n', '\n', '        // Ensure that the position is not collateralized\n', '        require(\n', '            state.isCollateralized(position) == false,\n', '            "liquidatePosition(): position is collateralised"\n', '        );\n', '\n', '        // Get the liquidation price of the asset (discount for liquidator)\n', '        Decimal.D256 memory liquidationPrice = state.calculateLiquidationPrice(\n', '            position.collateralAsset\n', '        );\n', '\n', '        // Calculate how much the user is in debt by to be whole again\n', '        (TypesV1.Par memory collateralDelta) = state.calculateCollateralDelta(\n', '            position.borrowedAsset,\n', '            position.collateralAmount,\n', '            position.borrowedAmount,\n', '            liquidationPrice\n', '        );\n', '\n', '        // Liquidate a slight bit more to ensure the user is guarded against futher price drops\n', '        collateralDelta.value = Decimal.mul(\n', '            collateralDelta.value,\n', '            Decimal.add(\n', '                state.totalLiquidationSpread(),\n', '                Decimal.one().value\n', '            )\n', '        ).to128();\n', '\n', "        // If the maximum they're down by is greater than their collateral, bound to the maximum\n", '        if (collateralDelta.value > position.collateralAmount.value) {\n', '            collateralDelta.value = position.collateralAmount.value;\n', '        }\n', '\n', '        // Calculate how much borrowed assets to liquidate (at a discounted price)\n', '        uint256 borrowToLiquidate = state.calculateInverseAmount(\n', '            position.collateralAsset,\n', '            collateralDelta.value,\n', '            liquidationPrice\n', '        );\n', '\n', "        // Decrease the user's debt obligation\n", '        // This amount is denominated in par since collateralDelta uses the borrow index\n', '        TypesV1.Par memory newPar = position.borrowedAmount.add(\n', '            TypesV1.Par({\n', '                sign: true,\n', '                value: borrowToLiquidate.to128()\n', '            })\n', '        );\n', '\n', "        // Set the user's new borrow amount\n", '        position = state.setAmount(positionId, position.borrowedAsset, newPar);\n', '\n', '        // Decrease their collateral amount by the amount they were missing\n', '        position = state.updatePositionAmount(\n', '            positionId,\n', '            position.collateralAsset,\n', '            collateralDelta\n', '        );\n', '\n', '        address borrowAddress = state.getAddress(position.borrowedAsset);\n', '\n', '        require(\n', '            IERC20(borrowAddress).balanceOf(msg.sender) >= borrowToLiquidate,\n', '            "liquidatePosition(): msg.sender not enough of borrowed asset to liquidate"\n', '        );\n', '\n', '        ISyntheticToken synthetic = ISyntheticToken(\n', '            state.getAddress(TypesV1.AssetType.Synthetic)\n', '        );\n', '\n', '        IERC20 collateralAsset = IERC20(state.collateralAsset());\n', '\n', '        (\n', '            Decimal.D256 memory userSplit,\n', '            Decimal.D256 memory arcSplit\n', '        ) = state.calculateLiquidationSplit();\n', '\n', '        // Burn the synthetic asset from the liquidator\n', '        synthetic.burn(\n', '            msg.sender,\n', '            borrowToLiquidate\n', '        );\n', '\n', '        // Transfer them the collateral assets they acquired at a discount\n', '        bool userTransferResult = synthetic.transferCollateral(\n', '            address(collateralAsset),\n', '            msg.sender,\n', '            Decimal.mul(\n', '                collateralDelta.value,\n', '                userSplit\n', '            )\n', '        );\n', '\n', '        require(\n', '            userTransferResult == true,\n', '            "liquidate(): collateral failed to transfer to user"\n', '        );\n', '\n', '        // Transfer ARC the collateral asset acquired at a discount\n', '        bool arcTransferResult = synthetic.transferCollateral(\n', '            address(collateralAsset),\n', '            address(this),\n', '            Decimal.mul(\n', '                collateralDelta.value,\n', '                arcSplit\n', '            )\n', '        );\n', '\n', '        require(\n', '            arcTransferResult == true,\n', '            "liquidate(): collateral failed to transfer to arc"\n', '        );\n', '\n', '        return position;\n', '    }\n', '\n', '}']