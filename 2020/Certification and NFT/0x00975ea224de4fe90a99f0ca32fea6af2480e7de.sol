['// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    constructor () internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n', ' * it), and not Whitelisteds themselves.\n', ' */\n', 'contract WhitelistedRole is Context, WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(_msgSender()), "WhitelistedRole: caller does not have the Whitelisted role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(_msgSender());\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/aave/IAToken.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', 'interface IAToken {\n', '\n', '    function balanceOf(address _user) external view returns (uint256);\n', '\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function principalBalanceOf(address _user) external view returns (uint256);\n', '\n', '    function getInterestRedirectionAddress(address _user) external view returns (address);\n', '\n', '    function allowInterestRedirectionTo(address _to) external;\n', '\n', '    function redirectInterestStream(address _to) external;\n', '\n', '    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/BondingVaultInterface.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface BondingVaultInterface {\n', '\n', '    function fundWithReward(address payable _donor) external payable;\n', '\n', '    function getEthKidsToken() external view returns (address);\n', '\n', '    function calculateReward(uint256 _ethAmount) external view returns (uint256 _tokenAmount);\n', '\n', '    function calculateReturn(uint256 _tokenAmount) external view returns (uint256 _returnEth);\n', '\n', '    function sweepVault(address payable _operator) external;\n', '\n', '    function addWhitelisted(address account) external;\n', '\n', '    function removeWhitelisted(address account) external;\n', '\n', '}\n', '\n', '// File: contracts/YieldVaultInterface.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', 'interface YieldVaultInterface {\n', '\n', '    function withdraw(address _token, address _atoken, uint _amount) external;\n', '\n', '    function addWhitelisted(address account) external;\n', '\n', '    function removeWhitelisted(address account) external;\n', '\n', '}\n', '\n', '// File: contracts/RegistryInterface.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', 'interface RegistryInterface {\n', '\n', '    function getCurrencyConverter() external view returns (address);\n', '\n', '    function getBondingVault() external view returns (BondingVaultInterface);\n', '\n', '    function yieldVault() external view returns (YieldVaultInterface);\n', '\n', '    function getCharityVaults() external view returns (address[] memory);\n', '\n', '    function communityCount() external view returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/RegistryAware.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'interface RegistryAware {\n', '\n', '    function setRegistry(address _registry) external;\n', '\n', '    function getRegistry() external view returns (RegistryInterface);\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '\n', '    function decimals() external view returns (uint digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/YieldVault.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract YieldVault is YieldVaultInterface, RegistryAware, WhitelistedRole {\n', '\n', '    using SafeMath for uint256;\n', '    RegistryInterface public registry;\n', '    mapping(address => uint256) public withdrawalBacklog;\n', '\n', '    /**\n', '     * @dev Payable fallback to receive ETH while converting ERC\n', '     **/\n', '    function() external payable {\n', '    }\n', '\n', '    function balance(address _atoken) public view returns (uint256) {\n', '        return IAToken(_atoken).balanceOf(address(this));\n', '    }\n', '\n', '    function historicBalance(address _atoken) public view returns (uint256) {\n', '        return balance(_atoken).add(withdrawalBacklog[_atoken]);\n', '    }\n', '\n', '    function communityVaultBalance(address _atoken) public view returns (uint256) {\n', '        return balance(_atoken) / registry.communityCount();\n', '    }\n', '\n', '    /**\n', '    * @dev Community triggers the withdrawal from Aave.\n', '    * All aTokens (x communityCount) will be redeemed and the resulting ERC will be distributed among the communities\n', "    * _amount = 0 means 'ALL'\n", '    **/\n', '    function withdraw(address _token, address _atoken, uint _amount) public onlyWhitelisted {\n', '        if (_amount == 0) {\n', '            //withdraw all available\n', '            _amount = communityVaultBalance(_atoken);\n', '        } else {\n', '            require(communityVaultBalance(_atoken) >= _amount);\n', '        }\n', '\n', '        if (_amount > 0) {\n', '            uint totalAmount = _amount.mul(registry.communityCount());\n', '            IAToken aToken = IAToken(_atoken);\n', '            //if not used as a collateral\n', '            require(aToken.isTransferAllowed(address(this), totalAmount));\n', '            aToken.redeem(totalAmount);\n', '            withdrawalBacklog[_atoken] = withdrawalBacklog[_atoken].add(totalAmount);\n', '\n', '            ERC20 token = ERC20(_token);\n', '            //approve for swap\n', '            token.approve(address(currencyConverter()), totalAmount);\n', '            //swap\n', '            currencyConverter().executeSwapMyERCToETH(token, totalAmount);\n', '\n', '            //fund the BondingVault\n', '            uint _bondingAllocation = (address(this).balance).mul(10).div(100);\n', '            address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));\n', '            bondingVaultPayable.transfer(_bondingAllocation);\n', '\n', '            //distribute ETH all over communities\n', '            uint ethAmout = (address(this).balance).div(registry.communityCount());\n', '            for (uint8 i = 0; i < registry.communityCount(); i++) {\n', '                CharityVaultInterface charityVault = CharityVaultInterface(registry.getCharityVaults()[i]);\n', '                charityVault.deposit.value(ethAmout)(msg.sender);\n', '            }\n', '        }\n', '    }\n', '\n', '    function currencyConverter() internal view returns (CurrencyConverterInterface) {\n', '        return CurrencyConverterInterface(getRegistry().getCurrencyConverter());\n', '    }\n', '\n', '    function setRegistry(address _registry) public onlyWhitelistAdmin {\n', '        registry = (RegistryInterface)(_registry);\n', '    }\n', '\n', '    function getRegistry() public view returns (RegistryInterface) {\n', '        return registry;\n', '    }\n', '\n', '}\n', '\n', 'interface CurrencyConverterInterface {\n', '    function executeSwapMyERCToETH(ERC20 srcToken, uint srcQty) external;\n', '}\n', '\n', 'interface CharityVaultInterface {\n', '    function deposit(address _payee) external payable;\n', '}']