['pragma solidity >=0.4.22 <0.7.0;\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' * Forked from AmplGeyser*/\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract DGOVMINING  {\n', '    using SafeMath for uint256;\n', '    IERC20 public DistributionToken; //0x3087d935aa27128be399851bf8dbf6a40a9964fb\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event CheckIn(address indexed user); \n', '    //\n', '    // Global accounting state\n', '    //\n', '    uint256 public globalShares = 0;\n', '    uint256 private globalSeconds = 0;\n', '    uint256 private _lastGlobalTimestampSec = now;\n', '\tuint256 private _iniTimestampSec = now;\n', '    uint256 private _totalclaimed =0;\n', '\tuint256 private _baseShare = 1;\n', '\tuint256 private _lockingPeriod = 600;\n', '    uint256 private _iniSharesPerToken = 1 * (10**17);\n', '\tuint256 private _totalUnlockedToken = 15000000 * (10**18);\n', '   \n', "    // If lastTimestampSec is 0, there's no entry for that user.\n", '    struct UserRecords {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastTimestampSec;\n', '    }\n', '     \n', '    // Aggregated staking values per user\n', '    mapping(address => UserRecords) private _userRecords;\n', '    \n', '    /**\n', '     * @param distributionToken The token users receive as they unstake.\n', '     */\n', '    constructor(IERC20 distributionToken) public {       \n', '            DistributionToken = distributionToken;\n', '    }\n', '\n', '\tfunction initialTimestampSec() public view returns (uint256) {\n', '       \n', '\t\treturn _iniTimestampSec;\n', '    }\n', '\tfunction userTimestampSec() public view returns (uint256) {\n', '       \n', '\t\treturn _userRecords[msg.sender].lastTimestampSec;\n', '    }\n', '\tfunction userShares() public view returns (uint256) {\n', '       \n', '\t\treturn _userRecords[msg.sender].stakingShares;\n', '    }\n', '\tfunction userShareSeconds() public view returns (uint256) {\n', '       \n', '\t\treturn _userRecords[msg.sender].stakingShareSeconds;\n', '    }\n', '\tfunction globalShareSeconds() public view returns (uint256) {\n', '       \n', '\t\treturn globalSeconds;\n', '    }\n', '    function totalDistributionToken() public view returns (uint256) {\n', '       \n', '\t\treturn DistributionToken.balanceOf(address(this));\n', '    }\n', '    function totalClaimedTokens() public view returns (uint256) {\n', '       \n', '\t\treturn _totalclaimed;\n', '    }\n', '    /**\n', '      *@dev Start the mining process  \n', '     */\n', '    function Mining() external {\n', '          // User Accounting\n', '        UserRecords storage totals = _userRecords[msg.sender];\n', '\t\tuint256 waitingPeriod = now.sub(totals.lastTimestampSec);\n', '\t\trequire(waitingPeriod > _lockingPeriod,"Doro.Network: must be 10-minute average interval");\t\t       \n', '         //User Accounting\n', '\t\tuint256 newUserSeconds =\n', '\t\t    now\n', '            .sub(totals.lastTimestampSec)\n', '            .mul(totals.stakingShares);\n', '        totals.stakingShareSeconds =totals.stakingShareSeconds.add(newUserSeconds);       \n', '\t\ttotals.stakingShares = totals.stakingShares.add(_baseShare);\n', '        totals.lastTimestampSec = now;\n', '        // 2. Global Accounting\n', '\t\tuint256 newStakingShareSeconds =\n', '            now\n', '            .sub(_lastGlobalTimestampSec)\n', '            .mul(globalShares);\n', '        globalSeconds = globalSeconds.add(newStakingShareSeconds);\n', '        _lastGlobalTimestampSec = now;\n', '        globalShares = globalShares.add(_baseShare);\n', '\t\temit CheckIn(msg.sender);\n', '    }\n', '    /*User Claim Token */\n', '\tfunction claimTokens () external {\t    \n', '\t   require(_totalclaimed <= _totalUnlockedToken,"Doro.Network:15 Millions Tokens have been mined");\n', '\t   // User Accounting\n', '\t   UserRecords storage totals = _userRecords[msg.sender];\n', '\t   require(totals.stakingShares >0,"Doro.Network: User has no mining power.");\n', '\t   uint256 claimInterval = now.sub(totals.lastTimestampSec);\n', '\t   require(claimInterval > _lockingPeriod, "Doro.Network:must be 10-minute average interval");\t\t      \n', '\t    // Global accounting\n', '\t\tuint256 UnlockedTokens =now.sub(_iniTimestampSec).mul(_iniSharesPerToken);\t\n', '\t\tUnlockedTokens =(_totalclaimed>0)? UnlockedTokens.sub(_totalclaimed):UnlockedTokens;\n', '        uint256 newGlobalSeconds =\n', '            now\n', '            .sub(_lastGlobalTimestampSec)\n', '            .mul(globalShares);\n', '        globalSeconds = globalSeconds.add(newGlobalSeconds);\n', '        _lastGlobalTimestampSec = now;\n', '         // User Accounting       \n', '        uint256 newUserSeconds =\n', '            now\n', '            .sub(totals.lastTimestampSec)\n', '            .mul(totals.stakingShares);\n', '        totals.stakingShareSeconds =\n', '            totals.stakingShareSeconds\n', '            .add(newUserSeconds);  \n', '        uint256 totalUserRewards = (globalSeconds > 0)\n', '            ? UnlockedTokens.mul(totals.stakingShareSeconds).div(globalSeconds)\n', '            : 0;\n', '\t\tglobalSeconds = globalSeconds.sub(totals.stakingShareSeconds);\n', '\t\tglobalShares = globalShares.sub(totals.stakingShares);\n', '        _totalclaimed =  _totalclaimed.add(totalUserRewards);\n', '\t\ttotals.stakingShareSeconds =0;\n', '\t\ttotals.stakingShares = 0;\n', '        totals.lastTimestampSec = now;\t  \t   \t  \n', '\t    require(DistributionToken.transfer(msg.sender, totalUserRewards),\n', "            'Doro.Network: transfer out of distribution token failed');\n", '\t    emit TokensClaimed(msg.sender, totalUserRewards);\n', '\t}\t\n', '}']