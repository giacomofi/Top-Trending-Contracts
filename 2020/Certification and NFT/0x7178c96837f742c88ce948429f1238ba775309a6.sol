['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface Proxy {\n', '  function upgradeTo(address newImplementation) external;\n', '}\n', '\n', 'contract sbUpgrader {\n', '  event Upgraded(address indexed proxyAddress, address indexed implementationAddress);\n', '\n', '  address internal sbTimelock;\n', '\n', '  constructor(address sbTimelockAddress) public {\n', '    sbTimelock = sbTimelockAddress;\n', '  }\n', '\n', '  function upgrade(address proxyAddress, address implementationAddress) external {\n', "    require(msg.sender == sbTimelock, 'not sbTimelock');\n", '    Proxy proxy = Proxy(proxyAddress);\n', '    proxy.upgradeTo(implementationAddress);\n', '    emit Upgraded(proxyAddress, implementationAddress);\n', '  }\n', '\n', '  function getSbTimelockAddressUsed() public view returns (address) {\n', '    return sbTimelock;\n', '  }\n', '}']