['// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it).\n', ' */\n', 'contract Secondary is Context {\n', '    address private _primary;\n', '\n', '    /**\n', '     * @dev Emitted when the primary contract changes.\n', '     */\n', '    event PrimaryTransferred(\n', '        address recipient\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _primary = msgSender;\n', '        emit PrimaryTransferred(msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if called from any account other than the primary.\n', '     */\n', '    modifier onlyPrimary() {\n', '        require(_msgSender() == _primary, "Secondary: caller is not the primary account");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the primary.\n', '     */\n', '    function primary() public view returns (address) {\n', '        return _primary;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers contract to a new primary.\n', '     * @param recipient The address of new primary.\n', '     */\n', '    function transferPrimary(address recipient) public onlyPrimary {\n', '        require(recipient != address(0), "Secondary: new primary is the zero address");\n', '        _primary = recipient;\n', '        emit PrimaryTransferred(recipient);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '\n', '    function decimals() external view returns (uint digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/BondingVaultInterface.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface BondingVaultInterface {\n', '\n', '    function fundWithReward(address payable _donor) external payable;\n', '\n', '    function getEthKidsToken() external view returns (address);\n', '\n', '    function calculateReward(uint256 _ethAmount) external view returns (uint256 _tokenAmount);\n', '\n', '    function calculateReturn(uint256 _tokenAmount) external view returns (uint256 _returnEth);\n', '\n', '    function sweepVault(address payable _operator) external;\n', '\n', '    function addWhitelisted(address account) external;\n', '\n', '    function removeWhitelisted(address account) external;\n', '\n', '}\n', '\n', '// File: contracts/YieldVaultInterface.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', 'interface YieldVaultInterface {\n', '\n', '    function withdraw(address _token, address _atoken, uint _amount) external;\n', '\n', '    function addWhitelisted(address account) external;\n', '\n', '    function removeWhitelisted(address account) external;\n', '\n', '}\n', '\n', '// File: contracts/RegistryInterface.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', 'interface RegistryInterface {\n', '\n', '    function getCurrencyConverter() external view returns (address);\n', '\n', '    function getBondingVault() external view returns (BondingVaultInterface);\n', '\n', '    function yieldVault() external view returns (YieldVaultInterface);\n', '\n', '    function getCharityVaults() external view returns (address[] memory);\n', '\n', '    function communityCount() external view returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/RegistryAware.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'interface RegistryAware {\n', '\n', '    function setRegistry(address _registry) external;\n', '\n', '    function getRegistry() external view returns (RegistryInterface);\n', '}\n', '\n', '// File: contracts/community/CharityVault.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title CharityVault\n', ' * @dev Vault which holds the assets until the community leader(s) decide to transfer\n', ' * them to the actual charity destination.\n', ' * Deposit and withdrawal calls come only from the actual community contract\n', ' */\n', 'contract CharityVault is RegistryAware, Secondary {\n', '    using SafeMath for uint256;\n', '\n', '    RegistryInterface public registry;\n', '    uint256 public sumStats;\n', '\n', '    event LogDonationReceived(\n', '        uint256 amount,\n', '        address indexed account\n', '    );\n', '    event LogDonationWithdrawn(\n', '        uint256 amount,\n', '        address indexed account\n', '    );\n', '\n', '    /**\n', "    * @dev 'deposit' must be used instead\n", '    **/\n', '    function() external {\n', "        //no 'payable' here\n", '    }\n', '\n', '    /**\n', '     * @dev Receives some ETH and stores it.\n', "     * @param _payee the donor's address.\n", '     */\n', '    function deposit(address _payee) public payable {\n', '        sumStats = sumStats.add(msg.value);\n', '        emit LogDonationReceived(msg.value, _payee);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw some of accumulated balance for a _payee.\n', '     */\n', '    function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {\n', '        require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");\n', '        _payee.transfer(_payment);\n', '        emit LogDonationWithdrawn(_payment, _payee);\n', '    }\n', '\n', '    function setRegistry(address _registry) public onlyPrimary {\n', '        registry = (RegistryInterface)(_registry);\n', '    }\n', '\n', '    function getRegistry() public view returns (RegistryInterface) {\n', '        return registry;\n', '    }\n', '\n', '}']