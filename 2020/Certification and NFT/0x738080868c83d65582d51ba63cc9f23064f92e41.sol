['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IController {\n', '    function harvestStrategy(address _strategy) external;\n', '}\n', '\n', 'interface IStrategy {\n', '    function harvest() external;\n', '}\n', '\n', 'contract yAxisMetaVaultStrategists {\n', '    address public governance;\n', '\n', '    IController public controller;\n', '    IStrategy public strategy;\n', '\n', '    mapping(address => bool) public isStrategist;\n', '\n', '    constructor() public {\n', '        governance = msg.sender;\n', '        isStrategist[governance] = true;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function addStrategist(address _strategist) public {\n', '        require(msg.sender == governance, "!governance");\n', '        isStrategist[_strategist] = true;\n', '    }\n', '\n', '    function removeStrategist(address _strategist) public {\n', '        require(msg.sender == governance, "!governance");\n', '        isStrategist[_strategist] = false;\n', '    }\n', '\n', '    function setController(IController _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setStrategy(IStrategy _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategy = _strategy;\n', '    }\n', '\n', '    function harvestDefaultController() external {\n', '        harvestController(controller, address(strategy));\n', '    }\n', '\n', '    function harvestController(IController _controller, address _strategy) public {\n', '        require(isStrategist[msg.sender], "!strategist");\n', '        _controller.harvestStrategy(_strategy);\n', '    }\n', '\n', '    function harvestDefaultStrategy() external {\n', '        harvestStrategy(strategy);\n', '    }\n', '\n', '    function harvestStrategy(IStrategy _strategy) public {\n', '        require(isStrategist[msg.sender], "!strategist");\n', '        _strategy.harvest();\n', '    }\n', '}']