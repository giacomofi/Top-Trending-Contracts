['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '  function _msgSender() internal virtual view returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal virtual view returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor() internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', "    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public virtual onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n", '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', "    require(c >= a, 'SafeMath: addition overflow');\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return sub(a, b, 'SafeMath: subtraction overflow');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', "    require(c / a == b, 'SafeMath: multiplication overflow');\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return div(a, b, 'SafeMath: division by zero');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return mod(a, b, 'SafeMath: modulo by zero');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '// File: contracts/utils/Roles.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping(address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '  /**\n', '   * @dev Returns true if this contract implements the interface defined by\n', '   * `interfaceId`. See the corresponding\n', '   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '   * to learn more about how these ids are created.\n', '   *\n', '   * This function call must use less than 30 000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '  /**\n', '   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '   */\n', '  event TransferSingle(\n', '    address indexed operator,\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 id,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '   * transfers.\n', '   */\n', '  event TransferBatch(\n', '    address indexed operator,\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256[] ids,\n', '    uint256[] values\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '   * `approved`.\n', '   */\n', '  event ApprovalForAll(\n', '    address indexed account,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '   *\n', '   * If an {URI} event was emitted for `id`, the standard\n', '   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '   * returned by {IERC1155MetadataURI-uri}.\n', '   */\n', '  event URI(string value, uint256 indexed id);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `account` cannot be the zero address.\n', '   */\n', '  function balanceOf(address account, uint256 id)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', '   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `accounts` and `ids` must have the same length.\n', '   */\n', '  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n', '    external\n', '    view\n', '    returns (uint256[] memory);\n', '\n', '  /**\n', "   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '   *\n', '   * Emits an {ApprovalForAll} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `operator` cannot be the caller.\n', '   */\n', '  function setApprovalForAll(address operator, bool approved) external;\n', '\n', '  /**\n', "   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '   *\n', '   * See {setApprovalForAll}.\n', '   */\n', '  function isApprovedForAll(address account, address operator)\n', '    external\n', '    view\n', '    returns (bool);\n', '\n', '  /**\n', '   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '   *\n', '   * Emits a {TransferSingle} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `to` cannot be the zero address.\n', "   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '   * acceptance magic value.\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 id,\n', '    uint256 amount,\n', '    bytes calldata data\n', '  ) external;\n', '\n', '  /**\n', '   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '   *\n', '   * Emits a {TransferBatch} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `ids` and `amounts` must have the same length.\n', '   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '   * acceptance magic value.\n', '   */\n', '  function safeBatchTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256[] calldata ids,\n', '    uint256[] calldata amounts,\n', '    bytes calldata data\n', '  ) external;\n', '}\n', '\n', '// File: contracts/ToshiDojo.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ToshimonMinter {\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _amount,\n', '    bytes calldata _data\n', '  ) external;\n', '\n', '  function safeBatchTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256[] calldata _ids,\n', '    uint256[] calldata _amounts,\n', '    bytes calldata _data\n', '  ) external;\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    external\n', '    view\n', '    returns (bool isOperator);\n', '\n', '  function balanceOf(address _owner, uint256 _id)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function totalSupply(uint256 _id) external view returns (uint256);\n', '\n', '  function tokenMaxSupply(uint256 _id) external view returns (uint256);\n', '\n', '  function burn(\n', '    address _account,\n', '    uint256 _id,\n', '    uint256 _amount\n', '  ) external;\n', '\n', '  function mint(\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _quantity,\n', '    bytes memory _data\n', '  ) external;\n', '  function mintBatch(address user, uint256[] calldata ids, uint256[] calldata amounts)\n', '        external;\n', '}\n', '\n', 'interface ToshiCoin {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function totalClaimed() external view returns (uint256);\n', '\n', '  function addClaimed(uint256 _amount) external;\n', '\n', '  function setClaimed(uint256 _amount) external;\n', '\n', '  function transfer(address receiver, uint256 numTokens)\n', '    external\n', '    returns (bool);\n', '\n', '  function transferFrom(\n', '    address owner,\n', '    address buyer,\n', '    uint256 numTokens\n', '  ) external returns (bool);\n', '\n', '  function balanceOf(address owner) external view returns (uint256);\n', '\n', '  function mint(address _to, uint256 _amount) external;\n', '\n', '  function burn(address _account, uint256 value) external;\n', '}\n', '\n', '\n', 'contract ToshiDojo is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  ToshimonMinter public toshimonMinter;\n', '  ToshiCoin public toshiCoin;\n', '  uint256 public minterPackId;\n', '  uint256 public packPriceInToshiCoin;\n', '  uint256 public packsPurchased;\n', '  uint256 public packsRedeemed;\n', '  bytes private prevHash;\n', '\n', '  uint256[] public probabilities;\n', '  uint256[][] public cardRanges;\n', '  uint256[] public probabilitiesRare;\n', '  uint256[][] public cardRangesRare; \n', '\n', '\n', '  event Redeemed(\n', '    address indexed _user,\n', '    uint256[] indexed _cardIds,\n', '    uint256[] indexed _quantities\n', '  );\n', '\n', '  constructor() public {\n', '    toshimonMinter = ToshimonMinter(0xd2d2a84f0eB587F70E181A0C4B252c2c053f80cB);\n', '    toshiCoin = ToshiCoin(0x3EEfF4487F64bF73cd9D99e83D837B0Ef1F58247);\n', '    minterPackId = 0;\n', '    packPriceInToshiCoin = 1000000000000000000;\n', '    prevHash = abi.encodePacked(block.timestamp, msg.sender);\n', '    probabilities = [350,600,780,930,980,995,1000];\n', '    cardRanges = [[uint256(1),uint256(102)],[uint256(103),uint256(180)],[uint256(181),uint256(226)],[uint256(227),uint256(248)],[uint256(249),uint256(258)],[uint256(259),uint256(263)],[uint256(264),uint256(264)]];\n', '    probabilitiesRare = [700,930,980,995,1000];\n', '    cardRangesRare = [[265,291],[292,307],[308,310],[311,311],[312,312]];\n', '\n', '\n', '  }\n', '\n', '  modifier onlyEOA() {\n', "    require(msg.sender == tx.origin, 'Not eoa');\n", '    _;\n', '  }\n', '\n', '  function setMinterPackId(uint256 _minterPackId) external onlyOwner {\n', '    minterPackId = _minterPackId;\n', '  }\n', '\n', '\n', '  function setPackPriceInToshiCoin(uint256 _packPriceInToshiCoin)\n', '    external\n', '    onlyOwner\n', '  {\n', '    packPriceInToshiCoin = _packPriceInToshiCoin;\n', '  }\n', '\n', '  function tokenMaxSupply(uint256 _cardId) external view returns (uint256) {\n', '    return toshimonMinter.tokenMaxSupply(_cardId);\n', '  }\n', '\n', '  function totalSupply(uint256 _cardId) external view returns (uint256) {\n', '    return toshimonMinter.totalSupply(_cardId);\n', '  }\n', '\n', '\n', '  function addPack(\n', '    uint256[] memory _probabilities,\n', '    uint256[][] memory _cardRanges,\n', '    uint256[] memory _probabilitiesRare,\n', '    uint256[][] memory _cardRangesRare\n', '    \n', '  ) public onlyOwner {\n', "    require(_probabilities.length > 0, 'probabilities cannot be empty');\n", "    require(_cardRanges.length > 0, 'cardRanges cannot be empty');\n", "    require(_probabilitiesRare.length > 0, 'probabilities rare cannot be empty');\n", "    require(_cardRangesRare.length > 0, 'cardRanges rare cannot be empty');\n", '\n', '\n', '    probabilities = _probabilities;\n', '    cardRanges = _cardRanges;\n', '    probabilitiesRare = _probabilitiesRare;\n', '    cardRangesRare = _cardRangesRare;\n', '\n', '\n', '  }\n', '\n', '  function updateprobabilities(uint256[] memory _probabilities)\n', '    external\n', '    onlyOwner\n', '  {\n', '    probabilities = _probabilities;\n', '  }\n', '\n', '  function updateCardRanges(uint256[][] memory _cardRanges)\n', '    external\n', '    onlyOwner\n', '  {\n', '    cardRanges = _cardRanges;\n', '  }\n', '    function updateProbabilitiesRare(uint256[] memory _probabilitiesRare)\n', '    external\n', '    onlyOwner\n', '  {\n', '    probabilitiesRare = _probabilitiesRare;\n', '  }\n', '\n', '  function updateCardRangesRare(uint256[][] memory _cardRangesRare)\n', '    external\n', '    onlyOwner\n', '  {\n', '    cardRangesRare = _cardRangesRare;\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  // Purchase one or more card packs for the price in ToshiCoin\n', '  function purchasePack(uint256 amount) public {\n', "    require(packPriceInToshiCoin > 0, 'Pack does not exist');\n", '    require(\n', '      toshiCoin.balanceOf(msg.sender) >= packPriceInToshiCoin.mul(amount),\n', "      'Not enough toshiCoin for pack'\n", '    );\n', '\n', '    toshiCoin.burn(msg.sender, packPriceInToshiCoin.mul(amount));\n', '    packsPurchased = packsPurchased.add(amount);\n', "    toshimonMinter.mint(msg.sender, minterPackId, amount, '');\n", '  }\n', '  \n', '  // Redeem a random card pack (Not callable by contract, to prevent exploits on RNG)\n', '\n', '  function redeemPack(uint256 _packsToRedeem) external {\n', '     require(\n', '      toshimonMinter.balanceOf(msg.sender, minterPackId) >= _packsToRedeem,\n', "      'Not enough pack tokens'\n", '    );\n', '\n', '    toshimonMinter.burn(msg.sender, minterPackId, _packsToRedeem);\n', '\n', '    uint256 probability;\n', '    uint256 max;\n', '    uint256 min; \n', '    uint256[] memory _cardsToMint = new uint256[](312);\n', '    uint256[] memory _cardsToMintCount = new uint256[](312);\n', '    uint256 cardIdWon;\n', '    uint256 rng = _rngSimple(_rng());\n', '\n', '\n', '    for (uint256 i = 0; i < _packsToRedeem; ++i) {\n', '\n', '      for (uint256 j = 0; j < 7; ++j) {\n', '          probability = rng % 1000;\n', '          for (uint256 _probIndex = 0; _probIndex < probabilities.length; ++_probIndex) {\n', '            if(probability < probabilities[_probIndex]){\n', '              max = cardRanges[_probIndex][1];\n', '              min = cardRanges[_probIndex][0];\n', '              break;\n', '            }\n', '          }\n', '          rng = _rngSimple(rng);\n', '          cardIdWon = (rng % (max + 1 - min)) + min;\n', '          _cardsToMint[cardIdWon - 1] = cardIdWon;\n', '          _cardsToMintCount[cardIdWon - 1] = _cardsToMintCount[cardIdWon - 1] + 1;\n', '      }\n', '      \n', '      // run for rare packs start\n', '      probability = rng % 1000;\n', '      for (uint256 _probIndex = 0; _probIndex < probabilitiesRare.length; ++_probIndex) {\n', '        if(probability < probabilitiesRare[_probIndex]){\n', '          max = cardRangesRare[_probIndex][1];\n', '          min = cardRangesRare[_probIndex][0];\n', '          break;\n', '        }\n', '      }\n', '      rng = _rngSimple(rng);\n', '      cardIdWon = (rng % (max + 1 - min)) + min;\n', '      _cardsToMint[cardIdWon - 1] = cardIdWon;\n', '      _cardsToMintCount[cardIdWon - 1] = _cardsToMintCount[cardIdWon - 1] + 1;\n', '    }\n', '    \n', '    \n', '    emit Redeemed(msg.sender,_cardsToMint,_cardsToMintCount);\n', '    toshimonMinter.mintBatch(msg.sender,_cardsToMint,_cardsToMintCount);\n', '  }\n', '  \n', '  \n', '  // Utility function to check if a value is inside an array\n', '  function _isInArray(uint256 _value, uint256[] memory _array)\n', '    internal\n', '    pure\n', '    returns (bool)\n', '  {\n', '    uint256 length = _array.length;\n', '    for (uint256 i = 0; i < length; ++i) {\n', '      if (_array[i] == _value) {\n', '        return true;\n', '      }\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '\n', '  // This is a pseudo random function, but considering the fact that redeem function is not callable by contract,\n', '  // and the fact that ToshiCoin is not transferable, this should be enough to protect us from an attack\n', '  // I would only expect a miner to be able to exploit this, and the attack cost would not be worth it in our case\n', '  function _rng() internal returns (uint256) {\n', '    bytes32 ret = keccak256(prevHash);\n', '    prevHash = abi.encodePacked(ret,block.coinbase,msg.sender);\n', '    return uint256(ret);\n', '  }\n', '  function _rngSimple(uint256 seed) internal pure returns (uint256) {\n', '\n', '    return uint256(keccak256(abi.encodePacked(seed)));\n', '  }\n', '}']