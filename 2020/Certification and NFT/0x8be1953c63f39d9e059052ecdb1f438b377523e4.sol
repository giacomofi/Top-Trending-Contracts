['pragma solidity ^0.4.26;\n', 'contract SHRIMPTokenInterface {\n', '    function balanceOf(address who) external view returns(uint256);\n', '}\n', 'contract UNISWAPTokenInterface {\n', '    function balanceOf(address who) external view returns(uint256);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '\n', '\n', 'contract vote {\n', '    mapping(uint => uint) public event_start_time;\n', '    mapping(uint => uint) public event_end_time;\n', '    address public owner;\n', '    uint public now_id;\n', '    mapping (address => mapping (uint => bool)) public vote_content;\n', '    event Voter(uint indexed id,address voter);\n', '    event Purposal(uint indexed id, string content);\n', '    SHRIMPTokenInterface public shrimp = SHRIMPTokenInterface(0x38c4102D11893351cED7eF187fCF43D33eb1aBE6);\n', '    UNISWAPTokenInterface public uniswap = UNISWAPTokenInterface(0xeBA5D22bBeB146392D032A2F74a735d66A32aeE4);\n', '    SHRIMPTokenInterface public zombieshrimp = SHRIMPTokenInterface(0x1dD61127758c47Ab95a1931E02D3517f8d0dD1A6);\n', '\n', '    constructor()public{\n', '        owner = msg.sender;\n', '        now_id = 0;\n', '    }\n', '    function agree_vote(uint id)public{\n', '        // require(event_start_time[id] <= now && event_end_time[id] >= now);\n', '        vote_content[msg.sender][id] = true;\n', '        emit Voter(id,msg.sender);\n', '    }\n', '    function disagree_vote(uint id)public{\n', '        // require(event_start_time[id] <= now && event_end_time[id] >= now);\n', '        vote_content[msg.sender][id] = false;\n', '    }\n', '    function get_vote(uint id, address[] _owners)public view returns(uint tickets){\n', '        uint vote_count = 0;\n', '        address uniswapAddress = 0xeBA5D22bBeB146392D032A2F74a735d66A32aeE4;\n', '        for (uint i=0; i<_owners.length; i++) {\n', '           if(vote_content[_owners[i]][id] == true){\n', '               vote_count+=shrimp.balanceOf(_owners[i]);\n', '               vote_count+=(shrimp.balanceOf(uniswapAddress)*uniswap.balanceOf(_owners[i])/uniswap.totalSupply());\n', '                vote_count+=zombieshrimp.balanceOf(_owners[i]);\n', '           }\n', '        }\n', '        return vote_count;\n', '    }\n', '    function update_event_time(uint id, uint ev_time, uint ev_end_time)public{\n', '        require(msg.sender == owner);\n', '        event_start_time[id] = ev_time;\n', '        event_end_time[id] = ev_end_time;\n', '    }\n', '    function purpose(string content)public{\n', '        emit Purposal(now_id, content);\n', '        now_id ++;\n', '    }\n', '    function get_time()public view returns(uint timestamp){\n', '        return now;\n', '    }\n', '}']