['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: contracts/IETradingNFT.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IETradingNFT {\n', '    function mint(address _to, uint256 _id, uint256 _quantity, bytes memory _data) external ;\n', '\tfunction totalSupply(uint256 _id) external view returns (uint256);\n', '    function maxSupply(uint256 _id) external view returns (uint256);\n', '    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n', '}\n', '\n', '// File: contracts/token/interfaces/IERC20Token.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'interface IERC20Token {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function eulerBalances(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '}\n', '\n', '// File: contracts/token/utility/Utils.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', '  * @dev Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    // verifies that a value is greater than zero\n', '    modifier greaterThanZero(uint256 _value) {\n', '        _greaterThanZero(_value);\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _greaterThanZero(uint256 _value) internal pure {\n', '        require(_value > 0, "ERR_ZERO_VALUE");\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        _validAddress(_address);\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _validAddress(address _address) internal pure {\n', '        require(_address != address(0), "ERR_INVALID_ADDRESS");\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        _notThis(_address);\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _notThis(address _address) internal view {\n', '        require(_address != address(this), "ERR_ADDRESS_IS_SELF");\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20Token.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '/**\n', '  * @dev ERC20 Standard Token implementation\n', '*/\n', 'contract ERC20Token is IERC20Token, Utils {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    string public override name;\n', '    string public override symbol;\n', '    uint8 public override decimals;\n', '    uint256 public override totalSupply;\n', '    mapping (address => uint256) public override eulerBalances;\n', '    mapping (address => mapping (address => uint256)) public override allowance;\n', '\n', '    /**\n', '      * @dev triggered when tokens are transferred between wallets\n', '      *\n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '      * @dev triggered when a wallet allows another wallet to transfer tokens from on its behalf\n', '      *\n', '      * @param _owner   wallet that approves the allowance\n', '      * @param _spender wallet that receives the allowance\n', '      * @param _value   allowance amount\n', '    */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /**\n', '      * @dev initializes a new ERC20Token instance\n', '      *\n', '      * @param _name        token name\n', '      * @param _symbol      token symbol\n', '      * @param _totalSupply total supply of token units\n', '    */\n', '    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) public {\n', '        // validate input\n', '        require(bytes(_name).length > 0, "ERR_INVALID_NAME");\n', '        require(bytes(_symbol).length > 0, "ERR_INVALID_SYMBOL");\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = 18;\n', '        totalSupply = _totalSupply;\n', '        eulerBalances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /**\n', '      * @dev transfers tokens to a given address\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      *\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      *\n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        virtual\n', '        override\n', '        validAddress(_to)\n', '        returns (bool)\n', '    {\n', '        eulerBalances[msg.sender] = eulerBalances[msg.sender].sub(_value);\n', '        eulerBalances[_to] = eulerBalances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev transfers tokens to a given address on behalf of another address\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      *\n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      *\n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        virtual\n', '        override\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool)\n', '    {\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        eulerBalances[_from] = eulerBalances[_from].sub(_value);\n', '        eulerBalances[_to] = eulerBalances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev allows another account/contract to transfers tokens on behalf of the caller\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      *\n', '      * also, to minimize the risk of the approve/transferFrom attack vector\n', '      * (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n', '      * in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n', '      *\n', '      * @param _spender approved address\n', '      * @param _value   allowance amount\n', '      *\n', "      * @return true if the approval was successful, false if it wasn't\n", '    */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        virtual\n', '        override\n', '        validAddress(_spender)\n', '        returns (bool)\n', '    {\n', "        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n", '        require(_value == 0 || allowance[msg.sender][_spender] == 0, "ERR_INVALID_AMOUNT");\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/token/utility/interfaces/IOwned.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'interface IOwned {\n', "    // this function isn't since the compiler emits automatically generated getter functions as external\n", '    function owner() external view returns (address);\n', '\n', '    function transferOwnership(address _newOwner) external;\n', '    function acceptOwnership() external;\n', '}\n', '\n', '// File: contracts/token/utility/interfaces/ITokenHolder.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/*\n', '    Token Holder interface\n', '*/\n', 'interface ITokenHolder is IOwned {\n', '    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/token/utility/interfaces/IConverterAnchor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/*\n', '    Converter Anchor interface\n', '*/\n', 'interface IConverterAnchor is IOwned, ITokenHolder {\n', '}\n', '\n', '// File: contracts/token/interfaces/IEulerToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '/*\n', '    Euler Token interface\n', '*/\n', 'interface IEulerToken is IConverterAnchor, IERC20Token {\n', '    function disableTransfers(bool _disable) external;\n', '    function issue(address _to, uint256 _amount) external;\n', '    function destroy(address _from, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/token/utility/Owned.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', '  * @dev Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public override owner;\n', '    address public newOwner;\n', '\n', '    /**\n', '      * @dev triggered when the owner is updated\n', '      *\n', '      * @param _prevOwner previous owner\n', '      * @param _newOwner  new owner\n', '    */\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '      * @dev initializes a new Owned instance\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _onlyOwner() internal view {\n', '        require(msg.sender == owner, "ERR_ACCESS_DENIED");\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnerUpdate(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '      * @dev allows transferring the contract ownership\n', '      * the new owner still needs to accept the transfer\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public override onlyOwner {\n', '        require(_newOwner != owner, "ERR_SAME_OWNER");\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '      * @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() override public {\n', '        require(msg.sender == newOwner, "ERR_ACCESS_DENIED");\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/token/utility/TokenHandler.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract TokenHandler {\n', '    bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256("approve(address,uint256)"));\n', '    bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256("transfer(address,uint256)"));\n', '    bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256("transferFrom(address,address,uint256)"));\n', '\n', '    /**\n', "      * @dev executes the ERC20 token's `approve` function and reverts upon failure\n", '      * the main purpose of this function is to prevent a non standard ERC20 token\n', '      * from failing silently\n', '      *\n', '      * @param _token   ERC20 token address\n', '      * @param _spender approved address\n', '      * @param _value   allowance amount\n', '    */\n', '    function safeApprove(IERC20Token _token, address _spender, uint256 _value) internal {\n', '        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_APPROVE_FAILED');\n", '    }\n', '\n', '    /**\n', "      * @dev executes the ERC20 token's `transfer` function and reverts upon failure\n", '      * the main purpose of this function is to prevent a non standard ERC20 token\n', '      * from failing silently\n', '      *\n', '      * @param _token   ERC20 token address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '    */\n', '    function safeTransfer(IERC20Token _token, address _to, uint256 _value) internal {\n', '       (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_TRANSFER_FAILED');\n", '    }\n', '\n', '    /**\n', "      * @dev executes the ERC20 token's `transferFrom` function and reverts upon failure\n", '      * the main purpose of this function is to prevent a non standard ERC20 token\n', '      * from failing silently\n', '      *\n', '      * @param _token   ERC20 token address\n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '    */\n', '    function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) internal {\n', '       (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_TRANSFER_FROM_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts/token/utility/TokenHolder.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', "  * @dev We consider every contract to be a 'token holder' since it's currently not possible\n", '  * for a contract to deny receiving tokens.\n', '  *\n', "  * The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n", '  * the owner to send tokens that were sent to the contract by mistake back to their sender.\n', '  *\n', '  * Note that we use the non standard ERC-20 interface which has no return value for transfer\n', '  * in order to support both non standard as well as standard token contracts.\n', '  * see https://github.com/ethereum/solidity/issues/4116\n', '*/\n', 'contract TokenHolder is ITokenHolder, TokenHandler, Owned, Utils {\n', '    /**\n', '      * @dev withdraws tokens held by the contract and sends them to an account\n', '      * can only be called by the owner\n', '      *\n', '      * @param _token   ERC20 token contract address\n', '      * @param _to      account to receive the new amount\n', '      * @param _amount  amount to withdraw\n', '    */\n', '    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n', '        public\n', '        virtual\n', '        override\n', '        onlyOwner\n', '        validAddress(address(_token))\n', '        validAddress(_to)\n', '    {\n', '        safeTransfer(_token, _to, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/token/EulerToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '  * @dev Euler Token\n', '  *\n', "  * 'Owned' is specified here for readability reasons\n", '*/\n', 'contract EulerToken is IEulerToken, Owned, ERC20Token, TokenHolder {\n', '    using SafeMath for uint256;\n', '\n', '    bool public transfersEnabled = false;    // true if transfer/transferFrom are enabled, false otherwise\n', '\n', '    /**\n', '      * @dev triggered when the total supply is increased\n', '      *\n', '      * @param _amount  amount that gets added to the supply\n', '    */\n', '    event Issuance(uint256 _amount);\n', '\n', '    /**\n', '      * @dev triggered when the total supply is decreased\n', '      *\n', '      * @param _amount  amount that gets removed from the supply\n', '    */\n', '    event Destruction(uint256 _amount);\n', '\n', '    /**\n', '      * @dev initializes a new EulerToken instance\n', '      *\n', '      * @param _name       token name\n', '      * @param _symbol     token short symbol, minimum 1 character\n', '    */\n', '    constructor(string memory _name, string memory _symbol)\n', '        public\n', '        ERC20Token(_name, _symbol, 0)\n', '    {\n', '    }\n', '\n', '    // allows execution only when transfers are enabled\n', '    modifier transfersAllowed {\n', '        _transfersAllowed();\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _transfersAllowed() internal view {\n', '        require(transfersEnabled, "ERR_TRANSFERS_DISABLED");\n', '    }\n', '\n', '    /**\n', '      * @dev disables/enables transfers\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _disable    true to disable transfers, false to enable them\n', '    */\n', '    function disableTransfers(bool _disable) public override onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '      * @dev increases the token supply and sends the new tokens to the given account\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _to      account to receive the new amount\n', '      * @param _amount  amount to increase the supply by\n', '    */\n', '    function issue(address _to, uint256 _amount)\n', '        public\n', '        override\n', '        onlyOwner\n', '        validAddress(_to)\n', '    {\n', '        totalSupply = totalSupply.add(_amount);\n', '        eulerBalances[_to] = eulerBalances[_to].add(_amount);\n', '\n', '        emit Issuance(_amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    /**\n', '      * @dev removes tokens from the given account and decreases the token supply\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _from    account to remove the amount from\n', '      * @param _amount  amount to decrease the supply by\n', '    */\n', '    function destroy(address _from, uint256 _amount) public override onlyOwner {\n', '        eulerBalances[_from] = eulerBalances[_from].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '\n', '        emit Transfer(_from, address(0), _amount);\n', '        emit Destruction(_amount);\n', '    }\n', '\n', '    // ERC20 standard method overrides with some extra functionality\n', '\n', '    /**\n', '      * @dev send coins\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * in addition to the standard checks, the function throws if transfers are disabled\n', '      *\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      *\n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        override(IERC20Token, ERC20Token)\n', '        transfersAllowed\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '      * @dev an account/contract attempts to get the coins\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * in addition to the standard checks, the function throws if transfers are disabled\n', '      *\n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      *\n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        override(IERC20Token, ERC20Token)\n', '        transfersAllowed\n', '        returns (bool) \n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/EulersFormula.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IMigratorEulersFormula {\n', '    // Perform LP token migration from legacy UniswapV2 to ESwap.\n', '    // Take the current LP token address and return the new LP token address.\n', "    // Migrator should have full access to the caller's LP token.\n", '    // Return the new LP token address.\n', '    //\n', '    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\n', '    // ESwap must mint EXACTLY the same amount of ESwap LP tokens or\n', '    // else something bad will happen. Traditional UniswapV2 does not\n', '    // do that so be careful!\n', '    function migrate(IERC20 token) external returns (IERC20);\n', '}\n', '\n', '/**\n', 'Copyright 2020 PoolTogether Inc.\n', 'This file is part of PoolTogether.\n', 'PoolTogether is free software: you can redistribute it and/or modify\n', 'it under the terms of the GNU General Public License as published by\n', 'the Free Software Foundation under version 3 of the License.\n', 'PoolTogether is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', 'GNU General Public License for more details.\n', 'You should have received a copy of the GNU General Public License\n', 'along with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/**\n', ' * @author Brendan Asselstine\n', ' * @notice A library that uses entropy to select a random number within a bound.  Compensates for modulo bias.\n', ' * @dev Thanks to https://medium.com/hownetworks/dont-waste-cycles-with-modulo-bias-35b6fdafcf94\n', ' */\n', 'library UniformRandomNumber {\n', '  /// @notice Select a random number without modulo bias using a random seed and upper bound\n', '  /// @param _entropy The seed for randomness\n', '  /// @param _upperBound The upper bound of the desired number\n', '  /// @return A random number less than the _upperBound\n', '  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n', '    require(_upperBound > 0, "UniformRand/min-bound");\n', '    uint256 min = -_upperBound % _upperBound;\n', '    uint256 random = _entropy;\n', '    while (true) {\n', '      if (random >= min) {\n', '        break;\n', '      }\n', '      random = uint256(keccak256(abi.encodePacked(random)));\n', '    }\n', '    return random % _upperBound;\n', '  }\n', '}\n', '\n', 'contract Formula is EulerToken("Euler\'s Formula", "EULER") {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Airdrop list\n', '    address[] public airdropList;\n', '    // Only deposit user can get airdrop.\n', '    mapping(address => bool) addressAvailable;\n', '    mapping(address => bool) addressAvailableHistory;\n', '\n', '    // Claimable enft of user.\n', '    struct UserEnftInfo {\n', '        uint256 amount;\n', '    }\n', '    // Info of each user that claimable enft.\n', '    mapping (address => mapping (uint256 => UserEnftInfo)) public userEnftInfo;\n', '\n', '    // Info of each enft.\n', '    struct EnftInfo {\n', "        uint256 enftID;            // Enft's ID. \n", '        uint256 amount;            // Distribution amount.\n', '        uint256 fixedPrice;        // Claim the enft need pay some wETH.\n', '    }\n', '    // Info of each enft.\n', '    EnftInfo[] public enftInfo;\n', '    // Total enft amount.\n', '    uint256 public totalEnftAmount = 0;\n', '    // Original total enft amount.\n', '    uint256 public originalTotalEnftAmount = 0;\n', '    // Draw Fusion\n', '    uint256 public eulersFused = 1000 * (10 ** 18);\n', '    // Base number\n', '    uint256 public base = 10 ** 6;\n', '    // Claim fee is 3%.\n', "    // Pool's fee 1%. Artist's fee 2%.\n", '    uint256 public totalFee = 3 * (base) / 100;\n', '\n', '    // Enft token.\n', '    IETradingNFT ETradingNFT;\n', '\n', '    event Reward(address indexed user, uint256 indexed enftID);\n', '    event AirDrop(address indexed user, uint256 indexed enftID);\n', '\n', '    function enftLength() public view returns (uint256) {\n', '        return enftInfo.length;\n', '    }\n', '\n', '    function eulerBalanceOf(address tokenOwner) public view returns (uint256) {\n', '        return eulerBalances[tokenOwner];\n', '    }\n', '\n', '    function userEnftBalanceOf(address tokenOwner, uint256 _enftID) public view returns (uint256) {\n', '        return userEnftInfo[tokenOwner][_enftID].amount;\n', '    }\n', '\n', '    function userUnclaimEnft(address tokenOwner) public view returns (uint256[] memory) {\n', '        uint256[] memory userEnft = new uint256[](enftInfo.length);\n', '        for(uint i = 0; i < enftInfo.length; i++) {\n', '            userEnft[i] = userEnftInfo[tokenOwner][i].amount;\n', '        }\n', '        return userEnft;\n', '    }\n', '\n', '    function enftBalanceOf(uint256 _enftID) public view returns (uint256) {\n', '        return enftInfo[_enftID].amount;\n', '    }\n', '\n', '    // Set setEulersFused. Can only be called by the owner.\n', '    function setEulersFused(uint256 _newEulersFused) public onlyOwner {\n', '        eulersFused = _newEulersFused;\n', '    }\n', '\n', '    // Set setTotalFee. Can only be called by the owner.\n', '    function setTotalFee(uint256 _newTotalFee) public onlyOwner {\n', '        totalFee = _newTotalFee;\n', '    }\n', '\n', '    // Add a new enft. Can only be called by the owner.\n', '    function addEnft(uint256 _enftID, uint256 _amount, uint256 _fixedPrice) external onlyOwner {\n', '        require(_amount.add(ETradingNFT.totalSupply(_enftID)) <= ETradingNFT.maxSupply(_enftID), "Max supply reached");\n', '        totalEnftAmount = totalEnftAmount.add(_amount);\n', '        originalTotalEnftAmount = originalTotalEnftAmount.add(_amount);\n', '        enftInfo.push(EnftInfo({\n', '            enftID: _enftID,\n', '            amount: _amount,\n', '            fixedPrice: _fixedPrice\n', '        }));\n', '    }\n', '\n', '    // Update enft.\n', "    // It's always decrease.\n", '    function _updateEnft(uint256 _wid, uint256 amount) internal {\n', '        EnftInfo storage enft = enftInfo[_wid];\n', '        enft.amount = enft.amount.sub(amount);\n', '        totalEnftAmount = totalEnftAmount.sub(amount);\n', '    }\n', '\n', '    // Update user enft\n', '    function _addUserEnft(address user, uint256 _wid, uint256 amount) internal {\n', '        UserEnftInfo storage userEnft = userEnftInfo[user][_wid];\n', '        userEnft.amount = userEnft.amount.add(amount);\n', '    }\n', '    function _removeUserEnft(address user, uint256 _wid, uint256 amount) internal {\n', '        UserEnftInfo storage userEnft = userEnftInfo[user][_wid];\n', '        userEnft.amount = userEnft.amount.sub(amount);\n', '    }\n', '\n', '    // Draw main function\n', '    function _draw() internal view returns (uint256) {\n', '        uint256 seed = uint256(keccak256(abi.encodePacked(now, block.difficulty, msg.sender)));\n', '        uint256 rnd = UniformRandomNumber.uniform(seed, totalEnftAmount);\n', '        // Sort by rarity. Avoid gas attacks, start from the tail.\n', '        for(uint i = enftInfo.length - 1; i > 0; --i){\n', '            if(rnd < enftInfo[i].amount){\n', '                return i;\n', '            }\n', '            rnd = rnd - enftInfo[i].amount;\n', '        }\n', '        // should not happen.\n', '        return uint256(-1);\n', '    }\n', '\n', '    // Draw a enft\n', '    function draw() external {\n', '        // EOA only\n', '        require(msg.sender == tx.origin);\n', '\n', '        require(eulerBalances[msg.sender] >= eulersFused, "Eulers are not enough.");\n', '        eulerBalances[msg.sender] = eulerBalances[msg.sender].sub(eulersFused);\n', '\n', '        uint256 _rwid = _draw();\n', '        // Reward reduced\n', '        _updateEnft(_rwid, 1);\n', '        _addUserEnft(msg.sender, _rwid, 1);\n', '\n', '        emit Reward(msg.sender, _rwid);\n', '    }\n', '\n', '    // Airdrop by owner\n', '    function airDrop() external onlyOwner {\n', '\n', '        uint256 _rwid = _draw();\n', '        // Reward reduced\n', '        _updateEnft(_rwid, 1);\n', '\n', '        uint256 seed = uint256(keccak256(abi.encodePacked(now, _rwid)));\n', '        bool status = false;\n', '        uint256 rnd = 0;\n', '\n', '        while (!status) {\n', '            rnd = UniformRandomNumber.uniform(seed, airdropList.length);\n', '            status = addressAvailable[airdropList[rnd]];\n', '            seed = uint256(keccak256(abi.encodePacked(seed, rnd)));\n', '        }\n', '\n', '        _addUserEnft(airdropList[rnd], _rwid, 1);\n', '        emit AirDrop(airdropList[rnd], _rwid);\n', '    }\n', '\n', '    // Airdrop by user\n', '    function airDropByUser() external {\n', '\n', '        // EOA only\n', '        require(msg.sender == tx.origin);\n', '\n', '        require(eulerBalances[msg.sender] >= eulersFused, "Eulers are not enough.");\n', '        eulerBalances[msg.sender] = eulerBalances[msg.sender].sub(eulersFused);\n', '        \n', '        uint256 _rwid = _draw();\n', '        // Reward reduced\n', '        _updateEnft(_rwid, 1);\n', '\n', '        uint256 seed = uint256(keccak256(abi.encodePacked(now, _rwid)));\n', '        bool status = false;\n', '        uint256 rnd = 0;\n', '\n', '        while (!status) {\n', '            rnd = UniformRandomNumber.uniform(seed, airdropList.length);\n', '            status = addressAvailable[airdropList[rnd]];\n', '            seed = uint256(keccak256(abi.encodePacked(seed, rnd)));\n', '        }\n', '\n', '        _addUserEnft(airdropList[rnd], _rwid, 1);\n', '        emit AirDrop(airdropList[rnd], _rwid);\n', '    }\n', '\n', "    // pool's fee & artist's fee\n", '    function withdrawFee() external onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    // Compute claim fee.\n', '    function claimFee(uint256 _wid, uint256 amount) public view returns (uint256){\n', '        EnftInfo storage enft = enftInfo[_wid];\n', '        return amount * enft.fixedPrice * (totalFee) / (base);\n', '    }\n', '\n', '    // User claim enft.\n', '    function claim(uint256 _wid, uint256 amount) external payable {\n', '        UserEnftInfo storage userEnft = userEnftInfo[msg.sender][_wid];\n', '        require(amount > 0, "amount must not zero");\n', '        require(userEnft.amount >= amount, "amount is bad");\n', '        require(msg.value == claimFee(_wid, amount), "need payout claim fee");\n', '\n', '        _removeUserEnft(msg.sender, _wid, amount);\n', '        ETradingNFT.mint(msg.sender, _wid, amount, "");\n', '    }\n', '}\n', '\n', '\n', 'contract EulersFormula is Formula {\n', '    // Info of each user.\n', '    struct UserLPInfo {\n', '        uint256 amount;       // How many LP tokens the user has provided.\n', '        uint256 rewardEULER; // Reward euler. \n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;            // Address of LP token contract.\n', '        uint256 allocPoint;        // How many allocation points assigned to this pool. EULERs to distribute per block.\n', '        uint256 lastRewardBlock;   // Last block number that EULERs distribution occurs.\n', '        uint256 accEULERPerShare; // Accumulated EULERs per share, times 1e12. See below.\n', '    }\n', '    // Dev address.\n', '    address public devaddr;\n', '    // Block number when bonus EARN period ends.\n', '    uint256 public bonusEndBlock;\n', '    // EULER tokens created per block.\n', '    uint256 public eulerPerBlock = 3141592653589793238; //18 decimals\n', '    // Bonus muliplier for early euler seekers.\n', '    uint256 public bonusMultiplier = 2718281828459045235; //18 decimals\n', '    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n', '    IMigratorEulersFormula public migrator;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserLPInfo)) public userLPInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when EULER mining starts.\n', '    uint256 public startBlock;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    constructor(\n', '        IETradingNFT _ETradingNFT,\n', '        address _devaddr,\n', '        uint256 _startBlock,\n', '        uint256 _bonusEndBlock\n', '    ) public {\n', '        ETradingNFT = _ETradingNFT;\n', '        devaddr = _devaddr;\n', '        startBlock = _startBlock;\n', '        bonusEndBlock = _bonusEndBlock;\n', '        enftInfo.push(EnftInfo({\n', '            enftID: 0,\n', '            amount: 0,\n', '            fixedPrice: 0\n', '        }));\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accEULERPerShare: 0\n', '        }));\n', '    }\n', '\n', "    // Update the given pool's Eulers allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // Set eulerPerBlock. Can only be called by the owner.\n', '    function setEULERPerBlock(uint256 _eulerPerBlock) public onlyOwner {\n', '        eulerPerBlock = _eulerPerBlock;\n', '    }\n', '\n', '    // Set startBlock. Can only be called by the owner.\n', '    function setStartBlock(uint256 _startBlock) public onlyOwner {\n', '        startBlock = _startBlock;\n', '    }\n', '\n', '    // Set bonusEndBlock. Can only be called by the owner.\n', '    function setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner {\n', '        bonusEndBlock = _bonusEndBlock;\n', '    }\n', '\n', '    // Set bonusMultiplier. Can only be called by the owner.\n', '    function setBonusMultiplier(uint256 _bonusMultiplier) public onlyOwner {\n', '        bonusMultiplier = _bonusMultiplier;\n', '    }\n', '\n', '    // Set newLpToken. Can only be called by the owner.\n', '    function setNewLpToken(uint _pid, IERC20 _newLpToken) public onlyOwner {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.lpToken = _newLpToken;\n', '    }\n', '\n', '    // Set newAllocPoint. Can only be called by the owner.\n', '    function setNewAllocPoint(uint _pid, uint256 _newAllocPoint) public onlyOwner {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.allocPoint = _newAllocPoint;\n', '    }\n', '\n', '    // Set the migrator contract. Can only be called by the owner.\n', '    function setMigrator(IMigratorEulersFormula _migrator) public onlyOwner {\n', '        migrator = _migrator;\n', '    }\n', '\n', '    // Migrate lp token to another lp contract. Can only be called by the owner. We trust that migrator contract is good.\n', '    function migrate(uint256 _pid) public onlyOwner {\n', '        require(address(migrator) != address(0), "migrate: no migrator");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        IERC20 lpToken = pool.lpToken;\n', '        uint256 bal = lpToken.balanceOf(address(this));\n', '        lpToken.safeApprove(address(migrator), bal);\n', '        IERC20 newLpToken = migrator.migrate(lpToken);\n', '        //check balance equivalence on Migrator side\n', '        //require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");\n', '        pool.lpToken = newLpToken;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n', '        if (_to <= bonusEndBlock) {\n', '            return _to.sub(_from).mul(bonusMultiplier);\n', '        } else if (_from >= bonusEndBlock) {\n', '            return _to.sub(_from);\n', '        } else {\n', '            return bonusEndBlock.sub(_from).mul(bonusMultiplier).add(\n', '                _to.sub(bonusEndBlock)\n', '            );\n', '        }\n', '    }\n', '\n', '    // View function to see pending Eulers on frontend.\n', '    function pendingEULER(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserLPInfo storage user = userLPInfo[_pid][_user];\n', '        uint256 accEULERPerShare = pool.accEULERPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 eulerReward = multiplier.mul(eulerPerBlock).mul(pool.allocPoint).div(totalAllocPoint).div(1e18);\n', '            accEULERPerShare = accEULERPerShare.add(eulerReward.mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accEULERPerShare).div(1e12).sub(user.rewardEULER);\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 eulerReward = multiplier.mul(eulerPerBlock).mul(pool.allocPoint).div(totalAllocPoint).div(1e18);\n', '        issue(devaddr, eulerReward);\n', '        issue(address(this), eulerReward);\n', '        pool.accEULERPerShare = pool.accEULERPerShare.add(eulerReward.mul(1e12).div(lpSupply));\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Deposit LP tokens to Formula for EULER allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        // EOA only\n', '        require(msg.sender == tx.origin);\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserLPInfo storage user = userLPInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accEULERPerShare).div(1e12).sub(user.rewardEULER);\n', '            if(pending > 0) {\n', '                safeEulerTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        if(_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardEULER = user.amount.mul(pool.accEULERPerShare).div(1e12);\n', '        if (user.amount > 0){\n', '            addressAvailable[msg.sender] = true;\n', '            if(!addressAvailableHistory[msg.sender]){\n', '                addressAvailableHistory[msg.sender] = true;\n', '                airdropList.push(msg.sender);\n', '            }\n', '        }\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from Formula.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserLPInfo storage user = userLPInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accEULERPerShare).div(1e12).sub(user.rewardEULER);\n', '        if(pending > 0) {\n', '            safeEulerTransfer(msg.sender, pending);\n', '        }\n', '        if(_amount > 0) {\n', '        user.amount = user.amount.sub(_amount);\n', '        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardEULER = user.amount.mul(pool.accEULERPerShare).div(1e12);\n', '        if (user.amount == 0){\n', '            addressAvailable[msg.sender] = false;\n', '        }\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserLPInfo storage user = userLPInfo[_pid][msg.sender];\n', '        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '        user.amount = 0;\n', '        user.rewardEULER = 0;\n', '        addressAvailable[msg.sender] = false;\n', '    }\n', '\n', '    // Safe euler transfer function, just in case if rounding error causes pool to not have enough EULERs.\n', '    function safeEulerTransfer(address _to, uint256 _amount) internal {\n', '        uint256 eulerBal = eulerBalanceOf(address(this));\n', '        if (_amount > eulerBal) {\n', '            transfer(_to, eulerBal);\n', '        } else {\n', '            transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    function dev(address _devaddr) public {\n', '        require(msg.sender == devaddr, "dev: wut?");\n', '        devaddr = _devaddr;\n', '    }\n', '}']