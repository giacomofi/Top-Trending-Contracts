['pragma solidity 0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract DydxFlashloanBase {\n', '    using SafeMath for uint256;\n', '\n', '    // -- Internal Helper functions -- //\n', '\n', '    function _getMarketIdFromTokenAddress(address _solo, address token)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        ISoloMargin solo = ISoloMargin(_solo);\n', '\n', '        uint256 numMarkets = solo.getNumMarkets();\n', '\n', '        address curToken;\n', '        for (uint256 i = 0; i < numMarkets; i++) {\n', '            curToken = solo.getMarketTokenAddress(i);\n', '\n', '            if (curToken == token) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        revert("No marketId found for provided token");\n', '    }\n', '\n', '    function _getRepaymentAmountInternal(uint256 amount)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // Needs to be overcollateralize\n', '        // Needs to provide +2 wei to be safe\n', '        return amount.add(2);\n', '    }\n', '\n', '    function _getAccountInfo() internal view returns (Account.Info memory) {\n', '        return Account.Info({owner: address(this), number: 1});\n', '    }\n', '\n', '    function _getWithdrawAction(uint marketId, uint256 amount)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Withdraw,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: false,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: amount\n', '                }),\n', '                primaryMarketId: marketId,\n', '                secondaryMarketId: 0,\n', '                otherAddress: address(this),\n', '                otherAccountId: 0,\n', '                data: ""\n', '            });\n', '    }\n', '\n', '    function _getCallAction(bytes memory data)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Call,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: false,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: 0\n', '                }),\n', '                primaryMarketId: 0,\n', '                secondaryMarketId: 0,\n', '                otherAddress: address(this),\n', '                otherAccountId: 0,\n', '                data: data\n', '            });\n', '    }\n', '\n', '    function _getDepositAction(uint marketId, uint256 amount)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Deposit,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: true,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: amount\n', '                }),\n', '                primaryMarketId: marketId,\n', '                secondaryMarketId: 0,\n', '                otherAddress: address(this),\n', '                otherAccountId: 0,\n', '                data: ""\n', '            });\n', '    }\n', '}\n', '\n', 'contract Love_Swap_V2 is DydxFlashloanBase {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using address_make_payable for address;\n', '    \n', '    struct MyCustomData {\n', '        address token;\n', '        uint256 repayAmount;\n', '    }\n', '    \n', '    address superMan;\n', '    address cofixRouter = 0x26aaD4D82f6c9FA6E34D8c1067429C986A055872;\n', '    address uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address USDTAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address cofiAddress = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\n', '    address WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address dydxAddress = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n', '    uint256 cofixETHSapn = 300 ether;\n', '    uint256 nestPrice = 0.01 ether;\n', '    \n', '    \n', '    constructor() public {\n', '        superMan = address(msg.sender);\n', '        IERC20(USDTAddress).safeApprove(cofixRouter, 10000000000000000);\n', '        IERC20(USDTAddress).safeApprove(uniRouter, 10000000000000000);\n', '    }\n', '    \n', '    function getCofixRouter() public view returns(address) {\n', '        return cofixRouter;\n', '    }\n', '    \n', '    function getUniRouter() public view returns(address) {\n', '        return uniRouter;\n', '    }\n', '    \n', '    function getNestPrice() public view returns(uint256) {\n', '        return nestPrice;\n', '    }\n', '    \n', '    function getSuperMan() public view returns(address) {\n', '        return superMan;\n', '    }\n', '    \n', '    function getCofixETHSapn() public view returns(uint256) {\n', '        return cofixETHSapn;\n', '    }\n', '    \n', '    function setCofixRouter(address _cofixRouter) public onlyOwner {\n', '        cofixRouter = _cofixRouter;\n', '    }\n', '    \n', '    function setUniRouter(address _uniRouter) public onlyOwner {\n', '        uniRouter = _uniRouter;\n', '    }\n', '    \n', '    function setNestPrice(uint256 _amount) public onlyOwner {\n', '        nestPrice = _amount;\n', '    }\n', '    \n', '    function setSuperMan(address _newMan) public onlyOwner {\n', '        superMan = _newMan;\n', '    }\n', '    \n', '    function setCofixETHSapn(uint256 _amount) public onlyOwner {\n', '        cofixETHSapn = _amount;\n', '    }\n', '    \n', '    //  实现操作\n', '    function callFunction(\n', '        address sender,\n', '        Account.Info memory account,\n', '        bytes memory data\n', '    ) public {\n', '        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\n', '        uint256 tokenBalanceBefore = IERC20(mcd.token).balanceOf(address(this));\n', '        // money\n', '        // WETH->ETH\n', '        WETH9(WETHAddress).withdraw(tokenBalanceBefore);\n', '        // ETH->USDT\n', '        uint256 loopTimes = address(this).balance.div(cofixETHSapn);\n', '        for(uint256 i = 0; i < loopTimes; i++) {\n', '            CoFiXRouter(cofixRouter).swapExactETHForTokens{value:cofixETHSapn}(USDTAddress,cofixETHSapn.sub(nestPrice),1,address(this), address(this), uint256(block.timestamp).add(100));\n', '        }\n', '        // USDT->ETH\n', '        uint256 usdtBalance = IERC20(USDTAddress).balanceOf(address(this));\n', '        address[] memory uniData = new address[](2);\n', '        uniData[0] = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '        uniData[1] = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '        UniswapV2Router(uniRouter).swapExactTokensForETH(usdtBalance,1,uniData,address(this),uint256(block.timestamp).add(100));\n', '        // ETH->WETH\n', '        WETH9(WETHAddress).deposit{value:tokenBalanceBefore.add(2)};\n', '        \n', '        uint256 balOfLoanedToken = IERC20(mcd.token).balanceOf(address(this));\n', '        require(\n', '            balOfLoanedToken >= mcd.repayAmount,\n', '            "Not enough funds to repay dydx loan!"\n', '        );\n', '        \n', '    }\n', '    \n', '    function initiateFlashLoan(uint256 _amount)\n', '        external\n', '    {\n', '        ISoloMargin solo = ISoloMargin(dydxAddress);\n', '        uint256 marketId = _getMarketIdFromTokenAddress(dydxAddress, WETHAddress);\n', '        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\n', '        IERC20(WETHAddress).approve(dydxAddress, repayAmount);\n', '\n', '        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n', '        operations[0] = _getWithdrawAction(marketId, _amount);\n', '        operations[1] = _getCallAction(\n', '            abi.encode(MyCustomData({token: WETHAddress, repayAmount: repayAmount}))\n', '        );\n', '        operations[2] = _getDepositAction(marketId, repayAmount);\n', '\n', '        Account.Info[] memory accountInfos = new Account.Info[](1);\n', '        accountInfos[0] = _getAccountInfo();\n', '\n', '        solo.operate(accountInfos, operations);\n', '    }\n', '    \n', '\n', '    function moreETH() public payable {\n', '        \n', '    }\n', '    \n', '    function turnOutToken(address token, uint256 amount) public onlyOwner{\n', '        IERC20(token).safeTransfer(superMan, amount);\n', '    }\n', '    \n', '    function turnOutETH(uint256 amount) public onlyOwner {\n', '        address payable addr = superMan.make_payable();\n', '        addr.transfer(amount);\n', '    }\n', '    \n', '    function getTokenBalance(address token) public view returns(uint256) {\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '    \n', '    function getETHBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    modifier onlyOwner(){\n', '        require(address(msg.sender) == superMan, "No authority");\n', '        _;\n', '    }\n', '    \n', '    receive() external payable {\n', '        \n', '    }\n', '}\n', '\n', 'interface WETH9 {\n', '    function deposit() external payable;\n', '    function withdraw(uint wad) external;\n', '}\n', '\n', 'interface CoFiXRouter {\n', '    function swapExactETHForTokens(\n', '        address token,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address to,\n', '        address rewardTo,\n', '        uint deadline\n', '    ) external payable returns (uint _amountIn, uint _amountOut);\n', '    function swapExactTokensForTokens(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address to,\n', '        address rewardTo,\n', '        uint deadline\n', '    ) external payable returns (uint _amountIn, uint _amountOut);\n', '    function swapExactTokensForETH(\n', '        address token,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address to,\n', '        address rewardTo,\n', '        uint deadline\n', '    ) external payable returns (uint _amountIn, uint _amountOut);\n', '}\n', '\n', 'interface UniswapV2Router {\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '     function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{value:amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library address_make_payable {\n', '   function make_payable(address x) internal pure returns (address payable) {\n', '      return address(uint160(x));\n', '   }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// dydx\n', '\n', '\n', 'library Account {\n', '    enum Status {Normal, Liquid, Vapor}\n', '    struct Info {\n', '        address owner; // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '    struct Storage {\n', '        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n', '        Status status;\n', '    }\n', '}\n', '\n', '\n', 'library Actions {\n', '    enum ActionType {\n', '        Deposit, // supply tokens\n', '        Withdraw, // borrow tokens\n', '        Transfer, // transfer balance between accounts\n', '        Buy, // buy an amount of some token (publicly)\n', '        Sell, // sell an amount of some token (publicly)\n', '        Trade, // trade tokens against another account\n', '        Liquidate, // liquidate an undercollateralized or expiring account\n', '        Vaporize, // use excess tokens to zero-out a completely negative account\n', '        Call // send arbitrary data to an address\n', '    }\n', '\n', '    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n', '\n', '    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        Types.AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct DepositArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address from;\n', '    }\n', '\n', '    struct WithdrawArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address to;\n', '    }\n', '\n', '    struct TransferArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info accountOne;\n', '        Account.Info accountTwo;\n', '        uint256 market;\n', '    }\n', '\n', '    struct BuyArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 makerMarket;\n', '        uint256 takerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct SellArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 takerMarket;\n', '        uint256 makerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct TradeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info takerAccount;\n', '        Account.Info makerAccount;\n', '        uint256 inputMarket;\n', '        uint256 outputMarket;\n', '        address autoTrader;\n', '        bytes tradeData;\n', '    }\n', '\n', '    struct LiquidateArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info liquidAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct VaporizeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info vaporAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct CallArgs {\n', '        Account.Info account;\n', '        address callee;\n', '        bytes data;\n', '    }\n', '}\n', '\n', '\n', 'library Decimal {\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Interest {\n', '    struct Rate {\n', '        uint256 value;\n', '    }\n', '\n', '    struct Index {\n', '        uint96 borrow;\n', '        uint96 supply;\n', '        uint32 lastUpdate;\n', '    }\n', '}\n', '\n', '\n', 'library Monetary {\n', '    struct Price {\n', '        uint256 value;\n', '    }\n', '    struct Value {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Storage {\n', '    // All information necessary for tracking a market\n', '    struct Market {\n', '        // Contract address of the associated ERC20 token\n', '        address token;\n', '        // Total aggregated supply and borrow amount of the entire market\n', '        Types.TotalPar totalPar;\n', '        // Interest index of the market\n', '        Interest.Index index;\n', '        // Contract address of the price oracle for this market\n', '        address priceOracle;\n', '        // Contract address of the interest setter for this market\n', '        address interestSetter;\n', '        // Multiplier on the marginRatio for this market\n', '        Decimal.D256 marginPremium;\n', '        // Multiplier on the liquidationSpread for this market\n', '        Decimal.D256 spreadPremium;\n', '        // Whether additional borrows are allowed for this market\n', '        bool isClosing;\n', '    }\n', '\n', '    // The global risk parameters that govern the health and security of the system\n', '    struct RiskParams {\n', '        // Required ratio of over-collateralization\n', '        Decimal.D256 marginRatio;\n', '        // Percentage penalty incurred by liquidated accounts\n', '        Decimal.D256 liquidationSpread;\n', "        // Percentage of the borrower's interest fee that gets passed to the suppliers\n", '        Decimal.D256 earningsRate;\n', '        // The minimum absolute borrow value of an account\n', '        // There must be sufficient incentivize to liquidate undercollateralized accounts\n', '        Monetary.Value minBorrowedValue;\n', '    }\n', '\n', '    // The maximum RiskParam values that can be set\n', '    struct RiskLimits {\n', '        uint64 marginRatioMax;\n', '        uint64 liquidationSpreadMax;\n', '        uint64 earningsRateMax;\n', '        uint64 marginPremiumMax;\n', '        uint64 spreadPremiumMax;\n', '        uint128 minBorrowedValueMax;\n', '    }\n', '\n', '    // The entire storage state of Solo\n', '    struct State {\n', '        // number of markets\n', '        uint256 numMarkets;\n', '        // marketId => Market\n', '        mapping(uint256 => Market) markets;\n', '        // owner => account number => Account\n', '        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n', '        // Addresses that can control other users accounts\n', '        mapping(address => mapping(address => bool)) operators;\n', '        // Addresses that can control all users accounts\n', '        mapping(address => bool) globalOperators;\n', '        // mutable risk parameters of the system\n', '        RiskParams riskParams;\n', '        // immutable risk limits of the system\n', '        RiskLimits riskLimits;\n', '    }\n', '}\n', '\n', '\n', 'library Types {\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct TotalPar {\n', '        uint128 borrow;\n', '        uint128 supply;\n', '    }\n', '\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ISoloMargin{\n', '    struct OperatorArg {\n', '        address operator;\n', '        bool trusted;\n', '    }\n', '\n', '    function ownerSetSpreadPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public virtual;\n', '\n', '    function getIsGlobalOperator(address operator) public virtual returns (bool);\n', '\n', '    function getMarketTokenAddress(uint256 marketId)\n', '        public\n', '        virtual\n', '        view\n', '        returns (address);\n', '\n', '    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n', '        public virtual;\n', '\n', '    function getAccountValues(Account.Info memory account)\n', '        public\n', '        virtual\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketPriceOracle(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (address);\n', '\n', '    function getMarketInterestSetter(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (address);\n', '\n', '    function getMarketSpreadPremium(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getNumMarkets() public view virtual returns (uint256);\n', '\n', '    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n', '        public\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n', '        public\n', '        virtual;\n', '\n', '    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\n', '\n', '    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\n', '\n', '    function getIsLocalOperator(address owner, address operator)\n', '        public\n', '        virtual\n', '        returns (bool);\n', '\n', '    function getAccountPar(Account.Info memory account, uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Types.Par memory);\n', '\n', '    function ownerSetMarginPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory marginPremium\n', '    ) public\n', '    virtual;\n', '\n', '    function getMarginRatio() public virtual returns (Decimal.D256 memory);\n', '\n', '    function getMarketCurrentIndex(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Interest.Index memory);\n', '\n', '    function getMarketIsClosing(uint256 marketId) public virtual returns (bool);\n', '\n', '    function getRiskParams() public virtual returns (Storage.RiskParams memory);\n', '\n', '    function getAccountBalances(Account.Info memory account)\n', '        public\n', '        virtual\n', '        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n', '\n', '    function renounceOwnership() public virtual;\n', '\n', '    function getMinBorrowedValue() public virtual returns (Monetary.Value memory);\n', '\n', '    function setOperators(OperatorArg[] memory args) public virtual;\n', '\n', '    function getMarketPrice(uint256 marketId) public virtual returns (address);\n', '\n', '    function owner() public virtual returns (address);\n', '\n', '    function isOwner() public virtual returns (bool);\n', '\n', '    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n', '        public\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function ownerAddMarket(\n', '        address token,\n', '        address priceOracle,\n', '        address interestSetter,\n', '        Decimal.D256 memory marginPremium,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public\n', '    virtual;\n', '\n', '    function operate(\n', '        Account.Info[] memory accounts,\n', '        Actions.ActionArgs[] memory actions\n', '    ) public\n', '    virtual;\n', '\n', '    function getMarketWithInfo(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (\n', '            Storage.Market memory,\n', '            Interest.Index memory,\n', '            Monetary.Price memory,\n', '            Interest.Rate memory\n', '        );\n', '\n', '    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\n', '\n', '    function getLiquidationSpread() public virtual returns (Decimal.D256 memory);\n', '\n', '    function getAccountWei(Account.Info memory account, uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketTotalPar(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Types.TotalPar memory);\n', '\n', '    function getLiquidationSpreadForPair(\n', '        uint256 heldMarketId,\n', '        uint256 owedMarketId\n', '    ) public virtual returns (Decimal.D256 memory);\n', '\n', '    function getNumExcessTokens(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketCachedIndex(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Interest.Index memory);\n', '\n', '    function getAccountStatus(Account.Info memory account)\n', '        public\n', '        virtual\n', '        returns (uint8);\n', '\n', '    function getEarningsRate() public virtual returns (Decimal.D256 memory);\n', '\n', '    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\n', '\n', '    function getRiskLimits() public virtual returns (Storage.RiskLimits memory);\n', '\n', '    function getMarket(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Storage.Market memory);\n', '\n', '    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\n', '\n', '    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\n', '\n', '    function transferOwnership(address newOwner) public virtual;\n', '\n', '    function getAdjustedAccountValues(Account.Info memory account)\n', '        public\n', '        virtual\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketMarginPremium(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getMarketInterestRate(uint256 marketId)\n', '        public\n', '        virtual\n', '        returns (Interest.Rate memory);\n', '}']