['pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '  The contract determines which addresses are permitted\n', '*/\n', 'contract PermittedAddresses is Ownable {\n', '  event AddNewPermittedAddress(address newAddress, uint256 addressType);\n', '  event RemovePermittedAddress(address Address);\n', '\n', '  // Mapping to permitted addresses\n', '  mapping (address => bool) public permittedAddresses;\n', '  mapping (address => uint256) public addressesTypes;\n', '\n', '  enum Types { EMPTY, EXCHANGE_PORTAL, POOL_PORTAL, DEFI_PORTAL, STABLE_COIN }\n', '\n', '  /**\n', '  * @dev contructor\n', '  *\n', '  * @param _exchangePortal      Exchange portal contract\n', '  * @param _poolPortal          Pool portal contract\n', '  * @param _stableCoin          Stable coins addresses to permitted\n', '  * @param _defiPortal          Defi portal\n', '  */\n', '  constructor(\n', '    address _exchangePortal,\n', '    address _poolPortal,\n', '    address _stableCoin,\n', '    address _defiPortal\n', '  ) public\n', '  {\n', '    _enableAddress(_exchangePortal, uint256(Types.EXCHANGE_PORTAL));\n', '    _enableAddress(_poolPortal, uint256(Types.POOL_PORTAL));\n', '    _enableAddress(_defiPortal, uint256(Types.DEFI_PORTAL));\n', '    _enableAddress(_stableCoin, uint256(Types.STABLE_COIN));\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev adding a new address to permittedAddresses\n', '  *\n', '  * @param _newAddress    The new address to permit\n', '  */\n', '  function addNewAddress(address _newAddress, uint256 addressType) public onlyOwner {\n', '    _enableAddress(_newAddress, addressType);\n', '  }\n', '\n', '  /**\n', '  * @dev update address type as owner for case if wrong address type was set\n', '  *\n', '  * @param _newAddress    The new address to permit\n', '  */\n', '  function updateAddressType(address _newAddress, uint256 addressType) public onlyOwner {\n', '    addressesTypes[_newAddress] = addressType;\n', '  }\n', '\n', '  /**\n', '  * @dev Disables an address, meaning SmartFunds will no longer be able to connect to them\n', "  * if they're not already connected\n", '  *\n', '  * @param _address    The address to disable\n', '  */\n', '  function disableAddress(address _address) public onlyOwner {\n', '    permittedAddresses[_address] = false;\n', '    emit RemovePermittedAddress(_address);\n', '  }\n', '\n', '  /**\n', '  * @dev Enables/disables an address\n', '  *\n', '  * @param _newAddress    The new address to set\n', '  * @param addressType    Address type\n', '  */\n', '  function _enableAddress(address _newAddress, uint256 addressType) private {\n', '    permittedAddresses[_newAddress] = true;\n', '    addressesTypes[_newAddress] = addressType;\n', '\n', '    emit AddNewPermittedAddress(_newAddress, addressType);\n', '  }\n', '\n', '  /**\n', '  * @dev check if input address has the same type as addressType\n', '  */\n', '  function isMatchTypes(address _address, uint256 addressType) public view returns(bool){\n', '    return addressesTypes[_address] == addressType;\n', '  }\n', '\n', '  /**\n', '  * @dev return address type\n', '  */\n', '  function getType(address _address) public view returns(uint256){\n', '    return addressesTypes[_address];\n', '  }\n', '}']