['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract BrandContestV2 {\n', '    uint256 private _startBlock;\n', '    uint256 private _endBlock;\n', '\n', '    address private _votingTokenAddress;\n', '    address private _nftTokenAddress;\n', '\n', '    uint256[] private _candidates;\n', '    mapping(uint256 => bool) _isCandidate;\n', '\n', '    uint256 private _singleVoteAmount;\n', '    uint256 private _singleVoteAmountToBurn;\n', '\n', '    mapping(address => bool) private _voted;\n', '    mapping(address => bool) private _redeemed;\n', '    mapping(address => uint256) private _voters;\n', '    mapping(uint256 => uint256) private _votes;\n', '\n', '    uint256 private _toBurn;\n', '\n', '    bool private _burnt;\n', '\n', '    constructor(\n', '        uint256 startBlock,\n', '        uint256 endBlock,\n', '        address votingTokenAddress,\n', '        address nftTokenAddress,\n', '        uint256[] memory candidates,\n', '        uint256 singleVoteAmount,\n', '        uint256 singleVoteAmountToBurn\n', '    ) {\n', '        _startBlock = startBlock;\n', '        _endBlock = endBlock;\n', '        _votingTokenAddress = votingTokenAddress;\n', '        _nftTokenAddress = nftTokenAddress;\n', '        _candidates = candidates;\n', '        for(uint256 i = 0; i < candidates.length; i++) {\n', '            _isCandidate[candidates[i]] = true;\n', '        }\n', '        _singleVoteAmount = singleVoteAmount;\n', '        _singleVoteAmountToBurn = singleVoteAmountToBurn;\n', '    }\n', '\n', '    function startBlock() public view returns (uint256) {\n', '        return _startBlock;\n', '    }\n', '\n', '    function endBlock() public view returns (uint256) {\n', '        return _endBlock;\n', '    }\n', '\n', '    function votingTokenAddress() public view returns (address) {\n', '        return _votingTokenAddress;\n', '    }\n', '\n', '    function nftTokenAddress() public view returns (address) {\n', '        return _nftTokenAddress;\n', '    }\n', '\n', '    function candidates() public view returns (uint256[] memory) {\n', '        return _candidates;\n', '    }\n', '\n', '    function isCandidate(uint256 tokenId) public view returns (bool) {\n', '        return _isCandidate[tokenId];\n', '    }\n', '\n', '    function singleVoteAmount() public view returns (uint256) {\n', '        return _singleVoteAmount;\n', '    }\n', '\n', '    function singleVoteAmountToBurn() public view returns (uint256) {\n', '        return _singleVoteAmountToBurn;\n', '    }\n', '\n', '    function votes(uint256 tokenId) public view returns (uint256) {\n', '        return _votes[tokenId];\n', '    }\n', '\n', '    function voted(address voter) public view returns (bool, uint256) {\n', '        return (_voted[voter], _voters[voter]);\n', '    }\n', '\n', '    function burnt() public view returns (bool) {\n', '        return _burnt;\n', '    }\n', '\n', '    function toBurn() public view returns (uint256) {\n', '        return _toBurn;\n', '    }\n', '\n', '    function redeemed(address voter) public view returns (bool) {\n', '        return _redeemed[voter];\n', '    }\n', '\n', '    function vote(uint256 tokenId) public {\n', '        require(block.number >= _startBlock, "Survey not yet started");\n', '        require(block.number <= _endBlock, "Survey has ended");\n', '        require(!_voted[msg.sender], "User Already Voted");\n', '        require(\n', '            _isCandidate[tokenId],\n', '            "The chosen tokenId is not concurring in the challenge"\n', '        );\n', '        IERC20(_votingTokenAddress).transferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _singleVoteAmount\n', '        );\n', '        _voters[msg.sender] = tokenId;\n', '        _voted[msg.sender] = true;\n', '        _votes[tokenId] = _votes[tokenId] + 1;\n', '        _toBurn += _singleVoteAmountToBurn;\n', '    }\n', '\n', '    function redeemVotingTokens(address voter) public {\n', '        require(block.number >= _startBlock, "Survey not yet started");\n', '        require(block.number >= _endBlock, "Survey is still running");\n', '        require(_voted[voter], "Your address did not vote");\n', '        require(!_redeemed[voter], "This voter already redeemed his stake");\n', '        _redeemed[voter] = true;\n', '        IERC20(_votingTokenAddress).transfer(\n', '            voter,\n', '            _singleVoteAmount - _singleVoteAmountToBurn\n', '        );\n', '    }\n', '\n', '    function burn() public {\n', '        require(block.number >= _startBlock, "Survey not yet started");\n', '        require(block.number >= _endBlock, "Survey is still running");\n', '        require(!_burnt, "Already burnt");\n', '        IERC20(_votingTokenAddress).burn(_toBurn);\n', '        _burnt = true;\n', '    }\n', '}\n', '\n', 'interface IERC721 {\n', '    function ownerOf(uint256 tokenId) external view returns (address);\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function burn(uint256 amount) external;\n', '}']