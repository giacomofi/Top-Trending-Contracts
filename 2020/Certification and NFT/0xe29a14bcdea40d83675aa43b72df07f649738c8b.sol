['// hevm: flattened sources of src/join-8.sol\n', 'pragma solidity >=0.5.12;\n', '\n', '////// lib/dss-deploy/lib/dss/src/lib.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', 'contract LibNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  usr,\n', '        bytes32  indexed  arg1,\n', '        bytes32  indexed  arg2,\n', '        bytes             data\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        _;\n', '        assembly {\n', "            // log an 'anonymous' event with a constant 6 words of calldata\n", '            // and four indexed topics: selector, caller, arg1 and arg2\n', '            let mark := msize()                       // end of memory ensures zero\n', '            mstore(0x40, add(mark, 288))              // update free memory pointer\n', '            mstore(mark, 0x20)                        // bytes type data offset\n', '            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n', '            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n', '            log4(mark, 288,                           // calldata\n', '                 shl(224, shr(224, calldataload(0))), // msg.sig\n', '                 caller(),                            // msg.sender\n', '                 calldataload(4),                     // arg1\n', '                 calldataload(36)                     // arg2\n', '                )\n', '        }\n', '    }\n', '}\n', '\n', '////// src/join-8.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '\n', '/// join-8.sol -- Non-standard token adapters\n', '\n', '// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n', '// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', '/* import "dss/lib.sol"; */\n', '\n', 'interface VatLike_17 {\n', '    function slip(bytes32, address, int256) external;\n', '}\n', '\n', 'interface GemLike_11 {\n', '    function decimals() external view returns (uint8);\n', '    function transfer(address,uint256) external returns (bool);\n', '    function transferFrom(address,address,uint256) external returns (bool);\n', '    function erc20Impl() external view returns (address);\n', '}\n', '\n', '// GemJoin8\n', '// For a token that has a lower precision than 18, has decimals and it is upgradable (like GUSD)\n', '\n', 'contract GemJoin8 is LibNote {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public wards;\n', '    function rely(address usr) external note auth { wards[usr] = 1; }\n', '    function deny(address usr) external note auth { wards[usr] = 0; }\n', '    modifier auth { require(wards[msg.sender] == 1); _; }\n', '\n', '    VatLike_17  public vat;\n', '    bytes32  public ilk;\n', '    GemLike_11  public gem;\n', '    uint256  public dec;\n', '    uint256  public live;  // Access Flag\n', '\n', '    mapping (address => uint256) public implementations;\n', '\n', '    constructor(address vat_, bytes32 ilk_, address gem_) public {\n', '        gem = GemLike_11(gem_);\n', '        dec = gem.decimals();\n', '        require(dec < 18, "GemJoin8/decimals-18-or-higher");\n', '        wards[msg.sender] = 1;\n', '        live = 1;\n', '        setImplementation(gem.erc20Impl(), 1);\n', '        vat = VatLike_17(vat_);\n', '        ilk = ilk_;\n', '    }\n', '\n', '    function cage() external note auth {\n', '        live = 0;\n', '    }\n', '\n', '    function setImplementation(address implementation, uint256 permitted) public auth note {\n', '        implementations[implementation] = permitted;  // 1 live, 0 disable\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "GemJoin8/overflow");\n', '    }\n', '\n', '    function join(address urn, uint256 wad) public note {\n', '        require(live == 1, "GemJoin8/not-live");\n', '        uint256 wad18 = mul(wad, 10 ** (18 - dec));\n', '        require(int256(wad18) >= 0, "GemJoin8/overflow");\n', '        require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");\n', '        vat.slip(ilk, urn, int256(wad18));\n', '        require(gem.transferFrom(msg.sender, address(this), wad), "GemJoin8/failed-transfer");\n', '    }\n', '\n', '    function exit(address guy, uint256 wad) public note {\n', '        uint256 wad18 = mul(wad, 10 ** (18 - dec));\n', '        require(int256(wad18) >= 0, "GemJoin8/overflow");\n', '        require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");\n', '        vat.slip(ilk, msg.sender, -int256(wad18));\n', '        require(gem.transfer(guy, wad), "GemJoin8/failed-transfer");\n', '    }\n', '}']