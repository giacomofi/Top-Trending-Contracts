['// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.5.12 >0.4.13 >=0.4.23 >=0.5.12;\n', '\n', '////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'interface DSPauseAbstract {\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setDelay(uint256) external;\n', '    function plans(bytes32) external view returns (bool);\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function drop(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/CatAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/cat.sol\n', 'interface CatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function box() external view returns (uint256);\n', '    function litter() external view returns (uint256);\n', '    function ilks(bytes32) external view returns (address, uint256, uint256);\n', '    function live() external view returns (uint256);\n', '    function vat() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function bite(bytes32, address) external returns (uint256);\n', '    function claw(uint256) external;\n', '    function cage() external;\n', '}\n', '////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function keys() external view returns (bytes32[] memory);\n', '    function version() external view returns (string memory);\n', '    function ipfs() external view returns (string memory);\n', '    function setVersion(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setAddress(bytes32,address) external;\n', '    function removeAddress(bytes32) external;\n', '    function count() external view returns (uint256);\n', '    function get(uint256) external view returns (bytes32,address);\n', '    function list() external view returns (bytes32[] memory);\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/FlipAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/flip.sol\n', 'interface FlipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function beg() external view returns (uint256);\n', '    function ttl() external view returns (uint48);\n', '    function tau() external view returns (uint48);\n', '    function kicks() external view returns (uint256);\n', '    function file(bytes32, uint256) external;\n', '    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\n', '    function tick(uint256) external;\n', '    function tend(uint256, uint256, uint256) external;\n', '    function dent(uint256, uint256, uint256) external;\n', '    function deal(uint256) external;\n', '    function yank(uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/join.sol\n', 'interface GemJoinAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function gem() external view returns (address);\n', '    function dec() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function cage() external;\n', '    function join(address, uint256) external;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/ilk-registry\n', 'interface IlkRegistryAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function ilkData(bytes32) external view returns (\n', '        uint256, address, address, address, address, uint256, string memory, string memory\n', '    );\n', '    function ilks() external view returns (bytes32[] memory);\n', '    function ilks(uint) external view returns (bytes32);\n', '    function add(address) external;\n', '    function remove(bytes32) external;\n', '    function update(bytes32) external;\n', '    function removeAuth(bytes32) external;\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, string calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (bytes32[] memory);\n', '    function list(uint256, uint256) external view returns (bytes32[] memory);\n', '    function get(uint256) external view returns (bytes32);\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, address, address, address, address\n', '    );\n', '    function pos(bytes32) external view returns (uint256);\n', '    function gem(bytes32) external view returns (address);\n', '    function pip(bytes32) external view returns (address);\n', '    function join(bytes32) external view returns (address);\n', '    function flip(bytes32) external view returns (address);\n', '    function dec(bytes32) external view returns (uint256);\n', '    function symbol(bytes32) external view returns (string memory);\n', '    function name(bytes32) external view returns (string memory);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/JugAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/jug.sol\n', 'interface JugAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256);\n', '    function vat() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function base() external view returns (address);\n', '    function init(bytes32) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, address) external;\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/MedianAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/median\n', 'interface MedianAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function age() external view returns (uint32);\n', '    function wat() external view returns (bytes32);\n', '    function bar() external view returns (uint256);\n', '    function orcl(address) external view returns (uint256);\n', '    function bud(address) external view returns (uint256);\n', '    function slot(uint8) external view returns (address);\n', '    function read() external view returns (uint256);\n', '    function peek() external view returns (uint256, bool);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/OsmAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/osm\n', 'interface OsmAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function stopped() external view returns (uint256);\n', '    function src() external view returns (address);\n', '    function hop() external view returns (uint16);\n', '    function zzz() external view returns (uint64);\n', '    function cur() external view returns (uint128, uint128);\n', '    function nxt() external view returns (uint128, uint128);\n', '    function bud(address) external view returns (uint256);\n', '    function stop() external;\n', '    function start() external;\n', '    function change(address) external;\n', '    function step(uint16) external;\n', '    function void() external;\n', '    function pass() external view returns (bool);\n', '    function poke() external;\n', '    function peek() external view returns (bytes32, bool);\n', '    function peep() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/OsmMomAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '\n', '// https://github.com/makerdao/osm-mom\n', 'interface OsmMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function osms(bytes32) external view returns (address);\n', '    function setOsm(bytes32, address) external;\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function stop(bytes32) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/SpotAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/spot.sol\n', 'interface SpotAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '    function vat() external view returns (address);\n', '    function par() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '    function cage() external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VatAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function can(address, address) external view returns (uint256);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function sin(address) external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function cage() external;\n', '    function slip(bytes32, address, int256) external;\n', '    function flux(bytes32, address, address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function fork(bytes32, address, address, int256, int256) external;\n', '    function grab(bytes32, address, address, address, int256, int256) external;\n', '    function heal(uint256) external;\n', '    function suck(address, address, uint256) external;\n', '    function fold(bytes32, address, int256) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.5.12; */\n', '\n', '/* import "lib/dss-interfaces/src/dapp/DSPauseAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/CatAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/FlipAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/GemJoinAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/JugAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/MedianAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/OsmAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/OsmMomAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/SpotAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/VatAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/ChainlogAbstract.sol"; */\n', '\n', 'contract SpellAction {\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    //  against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.2/contracts.json\n', '\n', '    address constant MCD_VAT         = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address constant MCD_CAT         = 0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea;\n', '    address constant MCD_JUG         = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address constant MCD_SPOT        = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address constant MCD_POT         = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\n', '    address constant MCD_END         = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\n', '    address constant FLIPPER_MOM     = 0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472;\n', '    address constant OSM_MOM         = 0x76416A4d5190d071bfed309861527431304aA14f;\n', '    address constant ILK_REGISTRY    = 0x8b4ce5DCbb01e0e1f0521cd8dCfb31B308E52c24;\n', '    address constant CHAINLOG        = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '\n', '    // ETH-B specific addresses\n', '    address constant ETH            = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address constant MCD_JOIN_ETH_B = 0x08638eF1A205bE6762A8b935F5da9b700Cf7322c;\n', '    address constant MCD_FLIP_ETH_B = 0xD499d71bE9e9E5D236A07ac562F7B6CeacCa624c;\n', '    address constant PIP_ETH        = 0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763; // OSM\n', '\n', '    // Decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    uint256 constant         SIX_PCT_RATE = 1000000001847694957439350562;\n', '\n', '    function execute() external {\n', '\n', '        /*** ETH-B Collateral Onboarding ***/\n', '\n', '        //   $ seth --to-bytes32 $(seth --from-ascii "ETH-B")\n', '        //   0x4554482d42000000000000000000000000000000000000000000000000000000\n', '        bytes32 ilk = "ETH-B";\n', '\n', '        // Sanity checks\n', '        require(GemJoinAbstract(MCD_JOIN_ETH_B).vat() == MCD_VAT, "join-vat-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_ETH_B).ilk() == ilk, "join-ilk-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_ETH_B).gem() == ETH, "join-gem-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_ETH_B).dec() == 18, "join-dec-not-match");\n', '        require(FlipAbstract(MCD_FLIP_ETH_B).vat() == MCD_VAT, "flip-vat-not-match");\n', '        require(FlipAbstract(MCD_FLIP_ETH_B).cat() == MCD_CAT, "flip-cat-not-match");\n', '        require(FlipAbstract(MCD_FLIP_ETH_B).ilk() == ilk, "flip-ilk-not-match");\n', '\n', '        // Add the new flip and join to the Chainlog\n', '        ChainlogAbstract(CHAINLOG).setAddress("MCD_JOIN_ETH_B", MCD_JOIN_ETH_B);\n', '        ChainlogAbstract(CHAINLOG).setAddress("MCD_FLIP_ETH_B", MCD_FLIP_ETH_B);\n', '        ChainlogAbstract(CHAINLOG).setVersion("1.1.3");\n', '\n', '        // Set the TOKEN PIP in the Spotter\n', '        SpotAbstract(MCD_SPOT).file(ilk, "pip", PIP_ETH);\n', '\n', '        // Set the TOKEN-LETTER Flipper in the Cat\n', '        CatAbstract(MCD_CAT).file(ilk, "flip", MCD_FLIP_ETH_B);\n', '\n', '        // Init TOKEN-LETTER ilk in Vat & Jug\n', '        VatAbstract(MCD_VAT).init(ilk);\n', '        JugAbstract(MCD_JUG).init(ilk);\n', '\n', '        // Allow TOKEN-LETTER Join to modify Vat registry\n', '        VatAbstract(MCD_VAT).rely(MCD_JOIN_ETH_B);\n', '        // Allow the TOKEN-LETTER Flipper to reduce the Cat litterbox on deal()\n', '        CatAbstract(MCD_CAT).rely(MCD_FLIP_ETH_B);\n', '        // Allow Cat to kick auctions in TOKEN-LETTER Flipper\n', '        FlipAbstract(MCD_FLIP_ETH_B).rely(MCD_CAT);\n', '        // Allow End to yank auctions in TOKEN-LETTER Flipper\n', '        FlipAbstract(MCD_FLIP_ETH_B).rely(MCD_END);\n', '        // Allow FlipperMom to access to the TOKEN-LETTER Flipper\n', '        FlipAbstract(MCD_FLIP_ETH_B).rely(FLIPPER_MOM);\n', '        // Disallow Cat to kick auctions in TOKEN-LETTER Flipper\n', '        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\n', '        //FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_ETH_B);\n', '\n', '        // Allow OsmMom to access to the TOKEN Osm\n', "        // !!!!!!!! Only if PIP_TOKEN = Osm and hasn't been already relied due a previous deployed ilk\n", '        //OsmAbstract(PIP_TOKEN).rely(OSM_MOM);\n', '        // Whitelist Osm to read the Median data (only necessary if it is the first time the token is being added to an ilk)\n', "        // !!!!!!!! Only if PIP_TOKEN = Osm, its src is a Median and hasn't been already whitelisted due a previous deployed ilk\n", '        //MedianAbstract(OsmAbstract(PIP_TOKEN).src()).kiss(PIP_TOKEN);\n', '        // Whitelist Spotter to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\n', "        // !!!!!!!! Only if PIP_TOKEN = Osm or PIP_TOKEN = Median and hasn't been already whitelisted due a previous deployed ilk\n", '        //OsmAbstract(PIP_TOKEN).kiss(MCD_SPOT);\n', '        // Whitelist End to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\n', "        // !!!!!!!! Only if PIP_TOKEN = Osm or PIP_TOKEN = Median and hasn't been already whitelisted due a previous deployed ilk\n", '        //OsmAbstract(PIP_TOKEN).kiss(MCD_END);\n', '        // Set TOKEN Osm in the OsmMom for new ilk\n', '        // !!!!!!!! Only if PIP_TOKEN = Osm\n', '        OsmMomAbstract(OSM_MOM).setOsm(ilk, PIP_ETH);\n', '\n', '        // Set the global debt ceiling\n', '        VatAbstract(MCD_VAT).file("Line", 1476 * MILLION * RAD);\n', '        // Set the TOKEN-LETTER debt ceiling\n', '        VatAbstract(MCD_VAT).file(ilk, "line", 20 * MILLION * RAD);\n', '        // Set the TOKEN-LETTER dust\n', '        VatAbstract(MCD_VAT).file(ilk, "dust", 100 * RAD);\n', '        // Set the Lot size\n', '        CatAbstract(MCD_CAT).file(ilk, "dunk", 50 * THOUSAND * RAD);\n', '        // Set the TOKEN-LETTER liquidation penalty (e.g. 13% => X = 113)\n', '        CatAbstract(MCD_CAT).file(ilk, "chop", 113 * WAD / 100);\n', '        // Set the TOKEN-LETTER stability fee (e.g. 1% = 1000000000315522921573372069)\n', '        JugAbstract(MCD_JUG).file(ilk, "duty", SIX_PCT_RATE);\n', '        // Set the TOKEN-LETTER percentage between bids (e.g. 3% => X = 103)\n', '        FlipAbstract(MCD_FLIP_ETH_B).file("beg", 103 * WAD / 100);\n', '        // Set the TOKEN-LETTER time max time between bids\n', '        FlipAbstract(MCD_FLIP_ETH_B).file("ttl", 6 hours);\n', '        // Set the TOKEN-LETTER max auction duration to\n', '        FlipAbstract(MCD_FLIP_ETH_B).file("tau", 6 hours);\n', '        // Set the TOKEN-LETTER min collateralization ratio (e.g. 150% => X = 150)\n', '        SpotAbstract(MCD_SPOT).file(ilk, "mat", 130 * RAY / 100);\n', '\n', '        // Update TOKEN-LETTER spot value in Vat\n', '        SpotAbstract(MCD_SPOT).poke(ilk);\n', '\n', '        // Add new ilk to the IlkRegistry\n', '        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_ETH_B);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/6a97b8f1f145d86b2ea898826cd3232a5abc7c1d/governance/votes/Executive%20vote%20-%20October%2016%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-10-16 MakerDAO Executive Spell | Hash: 0xbaf455a1f3360f0d9f9941f79626e38344c5c58e96c4d2cf03461995fa1fe913";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    modifier officeHours {\n', '        uint day = (now / 1 days + 3) % 7;\n', '        require(day < 5, "Can only be cast on a weekday");\n', '        uint hour = now / 1 hours % 24;\n', '        require(hour >= 14 && hour < 21, "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public officeHours {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']