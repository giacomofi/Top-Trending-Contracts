['// SPDX-License-Identifier: MIT\n', '// COPYRIGHT cVault.finance TEAM\n', '// NO COPY\n', '// COPY = BAD\n', '// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\n', '//\n', '//  _     _             _     _ _ _           \n', '// | |   (_)           (_)   | (_) |         \n', '// | |    _  __ _ _   _ _  __| |_| |_ _   _  \n', '// | |   | |/ _` | | | | |/ _` | | __| | | | \n', '// | |___| | (_| | |_| | | (_| | | |_| |_| | \n', '// \\_____/_|\\__, |\\__,_|_|\\__,_|_|\\__|\\__, |  \n', '//             | |                     __/ |                                                                               \n', '//             |_|                    |___/               \n', '//  _____                           _   _               _____                _                                                                    \n', '// |  __ \\                         | | (_)             |  ___|              | |  \n', '// | |  \\/ ___ _ __   ___ _ __ __ _| |_ _  ___  _ __   | |____   _____ _ __ | |_ \n', "// | | __ / _ \\ '_ \\ / _ \\ '__/ _` | __| |/ _ \\| '_ \\  |  __\\ \\ / / _ \\ '_ \\| __|\n", '// | |_\\ \\  __/ | | |  __/ | | (_| | |_| | (_) | | | | | |___\\ V /  __/ | | | |_ \n', '//  \\____/\\___|_| |_|\\___|_|  \\__,_|\\__|_|\\___/|_| |_| \\____/ \\_/ \\___|_| |_|\\__|\n', '//\n', '// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                      \n', '//    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \n', '//       \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \n', '//          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                          \n', '//            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                           \n', '//               \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                             \n', '//                  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                              \n', '//                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\                               \n', '//                    \\\\\\\\\\\\\\\\\\\\\\\\\\                                \n', '//                    \\\\\\\\\\\\\\\\\\\\\\\\                                 \n', '//                   \\\\\\\\\\\\\\\\\\\\\\\\                                  \n', '//                  \\\\\\\\\\\\\\\\\\\\\\\\                                   \n', '//                 \\\\\\\\\\\\\\\\\\\\\\\\                                    \n', '//                \\\\\\\\\\\\\\\\\\\\\\\\                                     \n', '//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \n', '//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \n', '//          `     \\\\\\\\\\\\\\\\\\\\\\\\      `    `                         \n', '//             *    \\\\\\\\\\\\\\\\\\\\\\\\  *   *                            \n', '//      `    *    *   \\\\\\\\\\\\\\\\\\\\\\\\   *  *   `                      \n', '//              *   *   \\\\\\\\\\\\\\\\\\\\  *                              \n', '//           `    *   * \\\\\\\\\\\\\\\\\\ *   *   `                        \n', '//        `    `     *  \\\\\\\\\\\\\\\\   *   `_____                      \n', '//              \\ \\ \\ * \\\\\\\\\\\\\\  * /  /\\`````\\                    \n', '//            \\ \\ \\ \\  \\\\\\\\\\\\  / / / /  \\`````\\                    \n', '//          \\ \\ \\ \\ \\ \\\\\\\\\\\\ / / / / |[] | [] |\n', '//                                  EqPtz5qN7HM\n', '//\n', '// This contract lets people kickstart pair liquidity on uniswap together\n', '// By pooling tokens together for a period of time\n', '// A bundle of sticks makes one mighty liquidity pool\n', '//\n', '\n', '\n', '// File: contracts/v612/ICOREGlobals.sol\n', '\n', '// COPYRIGHT cVault.finance TEAM\n', '// NO COPY\n', '// COPY = BAD\n', '// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\n', '\n', 'interface ICOREGlobals {\n', '    function CORETokenAddress() external view returns (address);\n', '    function COREGlobalsAddress() external view returns (address);\n', '    function COREDelegatorAddress() external view returns (address);\n', '    function COREVaultAddress() external returns (address);\n', '    function COREWETHUniPair() external view returns (address);\n', '    function UniswapFactory() external view returns (address);\n', '    function TransferHandler() external view returns (address);\n', '    function addDelegatorStateChangePermission(address that, bool status) external;\n', '    function isStateChangeApprovedContract(address that)  external view returns (bool);\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuardUpgradeSafe is Initializable {\n', '    bool private _notEntered;\n', '\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '\n', '\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts/v612/COREv1/ICoreVault.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface ICoreVault {\n', '    function devaddr() external returns (address);\n', '    function addPendingRewards(uint _amount) external;\n', '}\n', '\n', '// File: contracts/v612/LGE.sol\n', 'pragma solidity 0.6.12;\n', '\n', '\n', "// import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n", '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', "// import '@uniswap/v2-core/contracts/UniswapV2Pair.sol';\n", '\n', 'library COREIUniswapV2Library {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    // Copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/IUniswapV2Library.sol\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'IUniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'IUniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '        // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal  returns (uint256 amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '}\n', '\n', '\n', 'interface ICOREVault {\n', '    function depositFor(address, uint256 , uint256 ) external;\n', '}\n', '\n', '\n', 'interface IERC95 {\n', '    function wrapAtomic(address) external;\n', '    function transfer(address, uint256) external returns (bool);\n', '    function balanceOf(address) external view returns (uint256);\n', '    function skim(address to) external;\n', '    function unpauseTransfers() external;\n', '\n', '}\n', '\n', 'interface CERC95 {\n', '    function wrapAtomic(address) external;\n', '    function transfer(address, uint256) external returns (bool);\n', '    function balanceOf(address) external view returns (uint256);\n', '    function skim(address to) external;\n', '    function name() external view returns (string memory);\n', '}\n', '\n', '\n', 'interface ICORETransferHandler {\n', '    function sync(address) external returns(bool,bool);\n', '}\n', '\n', 'contract cLGE is Initializable, OwnableUpgradeSafe, ReentrancyGuardUpgradeSafe {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    /// CORE gets deposited straight never sold - refunded if balance is off at end\n', '    // Others get sold if needed\n', '    // ETH always gets sold into XXX from CORE/XXX\n', '    \n', '    IERC20 public tokenBeingWrapped;\n', '    address public coreEthPair;\n', '    address public wrappedToken;\n', '    address public preWrapEthPair;\n', '    address public COREToken;\n', '    address public _WETH;\n', '    address public wrappedTokenUniswapPair;\n', '    address public uniswapFactory;\n', '\n', '    ///////////////////////////////////////\n', '    // Note this 3 are not supposed to be actual contributed because of the internal swaps\n', '    // But contributed by people, before internal swaps\n', '    uint256 public totalETHContributed;\n', '    uint256 public totalCOREContributed;\n', '    uint256 public totalWrapTokenContributed;\n', '    ////////////////////////////////////////\n', '\n', '\n', '\n', '    ////////////////////////////////////////\n', '    // Internal balances user to calculate canges\n', '    // Note we dont have WETH here because it all goes out\n', '    uint256 private wrappedTokenBalance;\n', '    uint256 private COREBalance;\n', '    ////////////////////////////////////////\n', '\n', '    ////////////////////////////////////////\n', '    // Variables for calculating LP gotten per each user\n', '    // Note all contributions get "flattened" to CORE \n', '    // This means we just calculate how much CORE it would buy with the running average\n', '    // And use that as the counter\n', '    uint256 public totalCOREToRefund; // This is in case there is too much CORE in the contract we refund people who contributed CORE proportionally\n', '                                      // Potential scenario where someone swapped too much ETH/WBTC into CORE causing too much CORE to be in the contract\n', "                                      // and subsequently being not refunded because he didn't contribute CORE but bought CORE for his ETH/WETB\n", '                                      // Was noted and decided that the impact of this is not-significant\n', '    uint256 public totalLPCreated;    \n', '    uint256 private totalUnitsContributed;\n', '    uint256 public LPPerUnitContributed; // stored as 1e18 more - this is done for change\n', '    ////////////////////////////////////////\n', '\n', '\n', '    event Contibution(uint256 COREvalue, address from);\n', '    event COREBought(uint256 COREamt, address from);\n', '\n', '    mapping (address => uint256) public COREContributed; // We take each persons core contributed to calculate units and \n', '                                                        // to calculate refund later from totalCoreRefund + CORE total contributed\n', '    mapping (address => uint256) public unitsContributed; // unit to keep track how much each person should get of LP\n', '    mapping (address => uint256) public unitsClaimed; \n', '    mapping (address => bool) public CORERefundClaimed; \n', '    mapping (address => address) public pairWithWETHAddressForToken; \n', '\n', '    mapping (address => uint256) public wrappedTokenContributed; // To calculate units\n', '                                                                 // Note eth contributed will turn into this and get counted\n', '    ICOREGlobals public coreGlobals;\n', '    bool public LGEStarted;\n', '    uint256 public contractStartTimestamp;\n', '    uint256 public LGEDurationDays;\n', '    bool public LGEFinished;\n', '\n', '    function initialize(uint256 daysLong, address _wrappedToken, address _coreGlobals, address _preWrapEthPair) public initializer {\n', '        require(msg.sender == address(0x5A16552f59ea34E44ec81E58b3817833E9fD5436));\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init();\n', '\n', '        contractStartTimestamp = uint256(-1); // wet set it here to max so checks fail\n', '        LGEDurationDays = daysLong.mul(1 days);\n', '        coreGlobals = ICOREGlobals(_coreGlobals);\n', '        coreEthPair = coreETHPairGetter();\n', '        (COREToken, _WETH) = (IUniswapV2Pair(coreEthPair).token0(), IUniswapV2Pair(coreEthPair).token1()); // bb\n', '        address tokenBeingWrappedAddress = IUniswapV2Pair(_preWrapEthPair).token1(); // bb\n', '        tokenBeingWrapped =  IERC20(tokenBeingWrappedAddress);\n', '\n', '        pairWithWETHAddressForToken[address(tokenBeingWrapped)] = _preWrapEthPair;\n', '        pairWithWETHAddressForToken[IUniswapV2Pair(coreEthPair).token0()] = coreEthPair;// bb \n', '\n', '\n', '        wrappedToken = _wrappedToken;\n', '        preWrapEthPair = _preWrapEthPair;\n', '        uniswapFactory = coreGlobals.UniswapFactory();\n', '    }\n', '\n', '\n', '    function setTokenBeingWrapped(address token, address tokenPairWithWETH) public onlyOwner {\n', '        tokenBeingWrapped = IERC20(token);\n', '        pairWithWETHAddressForToken[token] = tokenPairWithWETH;\n', '    }\n', '    \n', '    /// Starts LGE by admin call\n', '    function startLGE() public onlyOwner {\n', '        require(LGEStarted == false, "Already started");\n', '        contractStartTimestamp = block.timestamp;\n', '        LGEStarted = true;\n', '\n', '        updateRunningAverages();\n', '    }\n', '    \n', '    function isLGEOver() public view returns (bool) {\n', '        return block.timestamp > contractStartTimestamp.add(LGEDurationDays);\n', '    }\n', '    \n', '    function claimLP() nonReentrant public {\n', '        IUniswapV2Pair(wrappedTokenUniswapPair).transfer(msg.sender, _claimLP());\n', '    }\n', '\n', '    function claimAndStakeLP() nonReentrant public {\n', '        address vault = coreGlobals.COREVaultAddress();\n', '\n', '        IUniswapV2Pair(wrappedTokenUniswapPair).approve(vault, uint(-1));\n', '    \n', '        ICOREVault(vault).depositFor(msg.sender,1, _claimLP());\n', '    }\n', '\n', '\n', '    function _claimLP() internal returns (uint256 sentAmt){ \n', '        require(LGEFinished == true, "LGE : Liquidity generation not finished");\n', '        require(unitsContributed[msg.sender].sub(unitsClaimed[msg.sender]) > 0, "LEG : Nothing to claim");\n', '        sentAmt = unitsContributed[msg.sender].sub(getCORERefundForPerson(msg.sender)).mul(LPPerUnitContributed).div(1e18);\n', '            // LPPerUnitContributed is stored at 1e18 multiplied\n', '\n', '\n', '        unitsClaimed[msg.sender] = unitsContributed[msg.sender];\n', '    }\n', '\n', '    function buyToken(address tokenTarget, uint256 amtToken, address tokenSwapping, uint256 amtTokenSwappingInput, address pair) internal {\n', '        (address token0, address token1) = COREIUniswapV2Library.sortTokens(tokenSwapping, tokenTarget);\n', '        IERC20(tokenSwapping).transfer(pair, amtTokenSwappingInput); \n', '        if(tokenTarget == token0) {\n', '             IUniswapV2Pair(pair).swap(amtToken, 0, address(this), "");\n', '        }\n', '        else {\n', '            IUniswapV2Pair(pair).swap(0, amtToken, address(this), "");\n', '        }\n', '\n', '        if(tokenTarget == COREToken){\n', '            emit COREBought(amtToken, msg.sender);\n', '        }\n', '        \n', '        updateRunningAverages();\n', '    }\n', '\n', '    function updateRunningAverages() internal{\n', '         if(_averagePrices[address(tokenBeingWrapped)].lastBlockOfIncrement != block.number) {\n', '            _averagePrices[address(tokenBeingWrapped)].lastBlockOfIncrement = block.number;\n', '            updateRunningAveragePrice(address(tokenBeingWrapped), false);\n', '          }\n', '         if(_averagePrices[COREToken].lastBlockOfIncrement != block.number) {\n', '            _averagePrices[COREToken].lastBlockOfIncrement = block.number;\n', '            updateRunningAveragePrice(COREToken, false);\n', '         }\n', '    }\n', '\n', '\n', '    function coreETHPairGetter() public view returns (address) {\n', '        return coreGlobals.COREWETHUniPair();\n', '    }\n', '\n', '\n', '    function getPairReserves(address pair) internal view returns (uint256 wethReserves, uint256 tokenReserves) {\n', '        address token0 = IUniswapV2Pair(pair).token0();\n', '        (uint256 reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n', '        (wethReserves, tokenReserves) = token0 == _WETH ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    function finalizeTokenWrapAddress(address _wrappedToken) onlyOwner public {\n', '        wrappedToken = _wrappedToken;\n', '    }\n', '\n', "    // If LGE doesn't trigger in 24h after its complete its possible to withdraw tokens\n", '    // Because then we can assume something went wrong since LGE is a publically callable function\n', '    // And otherwise everything is stuck.\n', '    function safetyTokenWithdraw(address token) onlyOwner public {\n', '        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\n', '        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n', '    }\n', '    function safetyETHWithdraw() onlyOwner public {\n', '        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\n', '        msg.sender.call.value(address(this).balance)("");\n', '    }\n', '\n', "    // Added safety function to extend LGE in case multisig #2 isn't avaiable from emergency life events\n", '    // TODO x3 add your key here\n', '    function extendLGE(uint numHours) public {\n', '        require(msg.sender == 0xd5b47B80668840e7164C1D1d81aF8a9d9727B421 || msg.sender == 0xC91FE1ee441402D854B8F22F94Ddf66618169636, "LGE: Requires admin");\n', '        require(numHours <= 24);\n', '        LGEDurationDays = LGEDurationDays.add(numHours.mul(1 hours));\n', '    }\n', '\n', '    function addLiquidityAtomic() public {\n', '        require(LGEStarted == true, "LGE Didn\'t start");\n', '        require(LGEFinished == false, "LGE : Liquidity generation finished");\n', '        require(isLGEOver() == false, "LGE is over.");\n', '\n', '        // require(token == _WETH || token == COREToken || token == address(tokenBeingWrapped) || token == preWrapEthPair, "Unsupported deposit token");\n', '\n', '        if(IUniswapV2Pair(preWrapEthPair).balanceOf(address(this)) > 0) {\n', '            // Special carveout because unwrap calls this funciton\n', '            // Since unwrap will add both WETH and tokenwrapped\n', '            unwrapLiquidityTokens();\n', '        } else{\n', '            ( uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH) = getHowMuch1WETHBuysOfTokens();\n', '\n', '\n', '             // Check WETH if there is swap for CORRE or WBTC depending\n', '             // Check WBTC and swap for core or not depending on peg\n', '            uint256 balWETH = IERC20(_WETH).balanceOf(address(this));\n', '            // No need to upate it because we dont retain WETH\n', '\n', '            uint256 totalCredit; // In core units\n', '\n', ' \n', '\n', '            // Handling core wrap deposits\n', '            // we check change from reserves\n', '            uint256 tokenBeingWrappedBalNow = IERC20(tokenBeingWrapped).balanceOf(address(this));\n', '            uint256 tokenBeingWrappedBalChange = tokenBeingWrappedBalNow.sub(wrappedTokenBalance);\n', '            // If its bigger than 0 we handle\n', '            if(tokenBeingWrappedBalChange > 0) {\n', '                totalWrapTokenContributed = totalWrapTokenContributed.add(tokenBeingWrappedBalChange);\n', '      \n', '                // We add wrapped token contributionsto the person this is for stats only\n', '                wrappedTokenContributed[msg.sender] = wrappedTokenContributed[msg.sender].add(tokenBeingWrappedBalChange);\n', '                // We check how much credit he got that returns from this function\n', '                totalCredit =   handleTokenBeingWrappedLiquidityAddition(tokenBeingWrappedBalChange,tokenBeingWrappedPer1ETH,coreTokenPer1ETH) ;\n', '                // We update reserves\n', '                wrappedTokenBalance = IERC20(tokenBeingWrapped).balanceOf(address(this));\n', '                COREBalance = IERC20(COREToken).balanceOf(address(this)); /// CHANGE\n', '\n', '           }           \n', '           \n', '             // Handling weth\n', '            if(balWETH > 0){\n', '                totalETHContributed = totalETHContributed.add(balWETH);\n', '                totalCredit = totalCredit.add( handleWETHLiquidityAddition(balWETH,tokenBeingWrappedPer1ETH,coreTokenPer1ETH) );\n', '                // No other number should be there since it just started a line above\n', '                COREBalance = IERC20(COREToken).balanceOf(address(this)); /// CHANGE\n', '            }\n', '\n', '            // we check core balance against reserves\n', '            // Note this is FoT token safe because we check balance of this \n', '            // And not accept user input\n', '            uint256 COREBalNow = IERC20(COREToken).balanceOf(address(this));\n', '            uint256 balCOREChange = COREBalNow.sub(COREBalance);\n', '            if(balCOREChange > 0) {\n', '                COREContributed[msg.sender] = COREContributed[msg.sender].add(balCOREChange);\n', '                totalCOREContributed = totalCOREContributed.add(balCOREChange);\n', '            }\n', '            // Reset reserves\n', '            COREBalance = COREBalNow;\n', '\n', '            uint256 unitsChange = totalCredit.add(balCOREChange);\n', '            // Gives people balances based on core units, if Core is contributed then we just append it to it without special logic\n', '            unitsContributed[msg.sender] = unitsContributed[msg.sender].add(unitsChange);\n', '            totalUnitsContributed = totalUnitsContributed.add(unitsChange);\n', '            emit Contibution(totalCredit, msg.sender);\n', '        \n', '        }\n', '    }\n', '\n', '    function handleTokenBeingWrappedLiquidityAddition(uint256 amt,uint256 tokenBeingWrappedPer1ETH,uint256 coreTokenPer1ETH) internal  returns (uint256 coreUnitsCredit) {\n', '        // VERY IMPRECISE TODO\n', '        uint256 outWETH;\n', '        (uint256 reserveWETHofWrappedTokenPair, uint256 reserveTokenofWrappedTokenPair) = getPairReserves(preWrapEthPair);\n', '\n', '        if(COREBalance.div(coreTokenPer1ETH) <= wrappedTokenBalance.div(tokenBeingWrappedPer1ETH)) {\n', '            // swap for eth\n', '            outWETH = COREIUniswapV2Library.getAmountOut(amt, reserveTokenofWrappedTokenPair, reserveWETHofWrappedTokenPair);\n', '            buyToken(_WETH, outWETH, address(tokenBeingWrapped) , amt, preWrapEthPair);\n', '            // buy core\n', '            (uint256 buyReserveWeth, uint256 reserveCore) = getPairReserves(coreEthPair);\n', '            uint256 outCore = COREIUniswapV2Library.getAmountOut(outWETH, buyReserveWeth, reserveCore);\n', '            buyToken(COREToken, outCore, _WETH ,outWETH,coreEthPair);\n', '        } else {\n', '            // Dont swap just calculate out and credit and leave as is\n', '            outWETH = COREIUniswapV2Library.getAmountOut(amt, reserveTokenofWrappedTokenPair , reserveWETHofWrappedTokenPair);\n', '        }\n', '\n', '        // Out weth is in 2 branches\n', '        // We give credit to user contributing\n', '        coreUnitsCredit = outWETH.mul(coreTokenPer1ETH).div(1e18);\n', '    }\n', '\n', '    function handleWETHLiquidityAddition(uint256 amt,uint256 tokenBeingWrappedPer1ETH,uint256 coreTokenPer1ETH) internal returns (uint256 coreUnitsCredit) {\n', '        // VERY IMPRECISE TODO\n', '\n', '        // We check if corebalance in ETH is smaller than wrapped token balance in eth\n', '        if(COREBalance.div(coreTokenPer1ETH) <= wrappedTokenBalance.div(tokenBeingWrappedPer1ETH)) {\n', '            // If so we buy core\n', '            (uint256 reserveWeth, uint256 reserveCore) = getPairReserves(coreEthPair);\n', '            uint256 outCore = COREIUniswapV2Library.getAmountOut(amt, reserveWeth, reserveCore);\n', '            //we buy core\n', '            buyToken(COREToken, outCore,_WETH,amt, coreEthPair);\n', '\n', '            // amt here is weth contributed\n', '        } else {\n', '            (uint256 reserveWeth, uint256 reserveToken) = getPairReserves(preWrapEthPair);\n', '            uint256 outToken = COREIUniswapV2Library.getAmountOut(amt, reserveWeth, reserveToken);\n', '            // we buy wrappedtoken\n', '            buyToken(address(tokenBeingWrapped), outToken,_WETH, amt,preWrapEthPair);\n', '            wrappedTokenBalance = IERC20(tokenBeingWrapped).balanceOf(address(this));\n', '\n', '\n', '           //We buy outToken of the wrapped token and add it here\n', '            wrappedTokenContributed[msg.sender] = wrappedTokenContributed[msg.sender].add(outToken);\n', '        }\n', '        // we credit user for ETH/ multiplied per core per 1 eth and then divided by 1 weth meaning we get exactly how much core it would be\n', '        // in the running average\n', '        coreUnitsCredit = amt.mul(coreTokenPer1ETH).div(1e18);\n', '\n', '    }\n', '\n', '\n', '\n', '    function getHowMuch1WETHBuysOfTokens() public view returns (uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH) {\n', '        return (getAveragePriceLast20Blocks(address(tokenBeingWrapped)), getAveragePriceLast20Blocks(COREToken));\n', '    }\n', '\n', '\n', '    //TEST TASK : Check if liquidity is added via just ending ETH to contract\n', '    fallback() external payable {\n', '        if(msg.sender != _WETH) {\n', '             addLiquidityETH();\n', '        }\n', '    }\n', '\n', '    //TEST TASK : Check if liquidity is added via calling this function\n', '    function addLiquidityETH() nonReentrant public payable {\n', '        // wrap weth\n', '        IWETH(_WETH).deposit{value: msg.value}();\n', '        addLiquidityAtomic();\n', '    }\n', '\n', '    // TEST TASK : check if this function deposits tokens\n', '    function addLiquidityWithTokenWithAllowance(address token, uint256 amount) public nonReentrant {\n', '        IERC20(token).transferFrom(msg.sender, address(this), amount);\n', '        addLiquidityAtomic();\n', '    }   \n', '\n', '    // We burn liquiidyt from WBTC/ETH pair\n', '    // And then send it to this ontract\n', '    // Wrap atomic will handle both deposits of WETH and wrappedtoken\n', '    function unwrapLiquidityTokens() internal {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(preWrapEthPair);\n', '        pair.transfer(preWrapEthPair, pair.balanceOf(address(this)));\n', '        pair.burn(address(this));\n', '        addLiquidityAtomic();\n', '    }\n', '\n', '\n', '\n', '    // TODO\n', '\n', '    mapping(address => PriceAverage) _averagePrices;\n', '    struct PriceAverage{\n', '       uint8 lastAddedHead;\n', '       uint256[20] price;\n', '       uint256 cumulativeLast20Blocks;\n', '       bool arrayFull;\n', '       uint lastBlockOfIncrement; // Just update once per block ( by buy token function )\n', '    }\n', '\n', '    // This is out tokens per 1WETH (1e18 units)\n', '    function getAveragePriceLast20Blocks(address token) public view returns (uint256){\n', '\n', '       return _averagePrices[token].cumulativeLast20Blocks.div(_averagePrices[token].arrayFull ? 20 : _averagePrices[token].lastAddedHead);\n', '       // We check if the "array is full" because 20 writes might not have happened yet\n', '       // And therefor the average would be skewed by dividing it by 20\n', '    }\n', '\n', '\n', '    // NOTE outTokenFor1WETH < lastQuote.mul(150).div(100) check\n', '    function updateRunningAveragePrice(address token, bool isRescue) public returns (uint256) {\n', '        PriceAverage storage currentAveragePrices =  _averagePrices[token];\n', '        address pairWithWETH = pairWithWETHAddressForToken[token];\n', '        (uint256 wethReserves, uint256 tokenReserves) = getPairReserves(address(pairWithWETH));\n', '        // Get amt you would get for 1eth\n', '        uint256 outTokenFor1WETH = COREIUniswapV2Library.getAmountOut(1e18, wethReserves, tokenReserves);\n', '\n', '        uint8 i = currentAveragePrices.lastAddedHead;\n', '        \n', '        ////////////////////\n', '        /// flash loan safety\n', '        //we check the last quote for comparing to this one\n', '        uint256 lastQuote;\n', '        if(i == 0) {\n', '            lastQuote = currentAveragePrices.price[19];\n', '        }\n', '        else {\n', '            lastQuote = currentAveragePrices.price[i - 1];\n', '        }\n', '\n', '        // Safety flash loan revert\n', '        // If change is above 50%\n', '        // This can be rescued by the bool "isRescue"\n', '        if(lastQuote != 0 && isRescue == false){\n', '            require(outTokenFor1WETH < lastQuote.mul(15000).div(10000), "Change too big from previous price");\n', '        }\n', '        ////////////////////\n', '        \n', '        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.sub(currentAveragePrices.price[i]);\n', '        currentAveragePrices.price[i] = outTokenFor1WETH;\n', '        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.add(outTokenFor1WETH);\n', '        currentAveragePrices.lastAddedHead++;\n', '        if(currentAveragePrices.lastAddedHead > 19) {\n', '            currentAveragePrices.lastAddedHead = 0;\n', '            currentAveragePrices.arrayFull = true;\n', '        }\n', '        return currentAveragePrices.cumulativeLast20Blocks;\n', '    }\n', '\n', '    // Because its possible that price of someting legitimately goes +50%\n', '    // Then the updateRunningAveragePrice would be stuck until it goes down,\n', '    // This allows the admin to "rescue" it by writing a new average\n', '    // skiping the +50% check\n', '    function rescueRatioLock(address token) public onlyOwner{\n', '        updateRunningAveragePrice(token, true);\n', '    }\n', '\n', '\n', '\n', '    // Protect form people atomically calling for LGE generation [x]\n', '    // Price manipulation protections\n', '    // use TWAP [x] custom 20 blocks\n', '    // Set max diviation from last trade - not needed [ ]\n', '    // re-entrancy protection [x]\n', '    // dev tax [x]\n', '    function addLiquidityToPairPublic() nonReentrant public{\n', '        addLiquidityToPair(true,0,0);\n', '    }\n', '\n', '    // 1000 finey in 1 eth\n', '    function getUnitsContributedPerFenny(uint256 amt) internal pure returns (uint256 units){\n', '        // Counted at 14ETH/CORE which is one of the best rates\n', '        //109.64791 ETH is 109647 fenny and shoul dbe around 7.83CORE\n', '        // times 1e18 is 1.09647e+23\n', '        // divided by 14000 ( 1000 for finney times 14 for price)\n', '        // gives us 7831928571428571000 which is 7.83 ... in CORE units\n', '        units = amt.mul(1e18).div(14000);\n', '    }\n', '\n', '    bool public LPmismatchCredited;\n', '    function matchCreditFromLPContributionBug() onlyOwner public {\n', '        require(LPmismatchCredited == false , "Already refunded");\n', '        // Values in ETH are half of the value of LP token at the moment of contribution\n', '        // 30 transactions in total\n', '        //1) https://etherscan.io/tx/0xc98284112b627a2187156faaaff860238ebd0934f560871849dd946fd8f52975\n', '        // 15.21958 ETH\n', '        addUnitsContributed(0x6996C784cdA7a2841C3a6F579C896477586A1D9A, 15_219);\n', '        //2) https://etherscan.io/tx/0xb721c3f2b0766ee8b8e80c5fd383fb024309b32c1620401a41c46639682a6fed\n', '        //7.280364ETH\n', '        addUnitsContributed(0x38Bc5196d8b21782372a843E5A505d9F457e6ff8, 7_280);\n', '        //3) https://etherscan.io/tx/0x54c7e90b302e92f14949958394b95b8550273b65917f2de72e62dc2ed5e9fe9c\n', '        //0.249332ETH\n', '        addUnitsContributed(0x91a90ACd8791ABB4c07c69aBBca82822c3451584, 249);\n', '        //4) https://etherscan.io/tx/0x5ca6470a79aa015cf8dd877f51c757e71ae12bd4fd74a1d02e5ad7d6c426afe4\n', '        //109.64791 ETH\n', '        addUnitsContributed(0x4523b791292da89A9194B61bA4CD9d98f2af68E0, 109_647);\n', '        //5) https://etherscan.io/tx/0x9de3e90e1f02c2f069859ba0616c57e0d4e07e074a4348455e3a26dfd91b39cc\n', '        //0.1511757ETH\n', '        addUnitsContributed(0xD2FA59811af055e0e94D570EA7F9800c0E5C0428, 151);\n', '        //6) https://etherscan.io/tx/0xafd98d37c98a663faee7c850acc99d8cab9dd38125cba1faeb36a8b278ca9805\n', '        //0.2204769ETH\n', '        addUnitsContributed(0xeeBa4a8f5b27D7d7c91cF4D4A716FbA042850f9A, 220);\n', '        //7) https://etherscan.io/tx/0xe41f8073be1026910df96dc734882aeca6cbc27170c6fee76249810096aed102\n', '        //11.99914ETH\n', '        addUnitsContributed(0x2eACd09e92273D5fb86Cf40504917F664EE15Da8, 11_999);\n', '        //8) https://etherscan.io/tx/0xf9576b52ebf9344f2fdb03dcbe02efdd447ee5b2f7de246a5a48f48358f3875b\n', '        //0.289062357ETH\n', '        addUnitsContributed(0xbbAb2ca3dF54726D3F484aFFf85708C0075a4400, 289);\n', '        //9) https://etherscan.io/tx/0x26a32da8579121351c4476ec5bc1a18dddca6867fa59a4ad4b91872f648a00c9\n', '        //123.992301ETH\n', '        addUnitsContributed(0xC8D76B1Ae76bdE393ef4CD495502D18326623ec5, 123_992);\n', '        //10) https://etherscan.io/tx/0xaa4348ce279a3282cafd69ea2d42533d14fe5bd5c5bddab8f51487a77472c907\n', '        //1.39978401ETH\n', '        addUnitsContributed(0x882E11F884E9d221706DB9A36bA4856292b26d87, 1_399);\n', '        //11) https://etherscan.io/tx/0x0c82f065e054a6c0914f37853bac76bb601a04a5d3d6215e218a96d1c90bc733\n', '        //0.25052733ETH\n', '        addUnitsContributed(0xb0e7C2319993C00B9430d18bDd9f98Fefb6B5857, 250);\n', '        //12) https://etherscan.io/tx/0xcc62b3df51d3e29ede693706fc3bbac3d713f3332dda0782d3e425c48decc271\n', '        //1.147797ETH\n', '        addUnitsContributed(0x41AFc9c6414FE7C4AbBc9977B07E5C5e62F7938A ,1_147);\n', '        //13) https://etherscan.io/tx/0x24235a4894ada1dabb3929a4e5deaf77dd599b76d36cb0f42a91257eeb19e6d3\n', '        //5.129589455ETH\n', '        addUnitsContributed(0x3E4D97C22571C5Ff22f0DAaBDa2d3835E67738EB, 5_129);\n', '        //14) https://etherscan.io/tx/0xcd0d52f92257e360482799ed9a502c703d979d8ede7979bfb514a9304853c360\n', '        //2.0568510ETH\n', '        addUnitsContributed(0x5924544A57e26b52231597aaa5E0374748C0a127, 2_056);\n', '        //15) https://etherscan.io/tx/0x0f8a9f142c4ffd8ad585a14b260c5040d2c6dc1d4bb47cf94720be420238d220\n', '        //4.9843880ETH\n', '        addUnitsContributed(0xa26f824aE181cD3893D77D0ACd2Fb7afc225e07e, 4_984);\n', '        //16) https://etherscan.io/tx/0x570fe1ca7d5baf0c8a772ee28a6d7e4a65bf3391961f3ad650b22e83a543629b\n', '        //9.645344991ETH\n', '        addUnitsContributed(0x821fC6A963b94920c57966A31BA1cF9b7569Dd30, 9_645);\n', '        //17) https://etherscan.io/tx/0x6933e20bdca0b8dfad169bdaa7d79194c8cc2f1eb783b79acfa5183ecd16efd7\n', '        //0.299104ETH\n', '        addUnitsContributed(0x09cC473b67696F31A8536D43C7CF4B32Ade588C8, 299);\n', '        //18) https://etherscan.io/tx/0x49d37f9a25ff53a301927a0ddcded0e3ccc0c8c1eb7abf84cb99d2ddee5e0a6d\n', '        //0.2683990359ETH\n', '        addUnitsContributed(0x67593A4F0c1e290eaE66459eE160A82945a5886f, 268);\n', '        //19) https://etherscan.io/tx/0x19c1861853e2cd9a5ad6fec6910215f63b39a1d824c1b862ffab5a6d12a82733\n', '        //1.0975376ETH\n', '        addUnitsContributed(0x2aCFd4D5EBbC9803Ee5B6BA190BA41B8b3e6A29d, 1_097);\n', '        //20) https://etherscan.io/tx/0xe29887b6f27a9e98610f73544d750a4f9219378da25c7228b14f2f757efc0798\n', '        //7.64413238ETH\n', '        addUnitsContributed(0xEd037d27846A6a7943B7b33AeBA526cd95Bd95Ce, 7_644);\n', '        //21) https://etherscan.io/tx/0xbbb03e0258f0d2df9123ae2587ab22ef4f62bc55d0ab1ca91ea5092480666fc6\n', '        //0.86045ETH\n', '        addUnitsContributed(0xe39Bc99b80a9EFD0F14F82AEA1406Eee93D456F2, 860);\n', '        //22) https://etherscan.io/tx/0x53735a0f31f37d8e9927998ac4548546b365a285736d9665bc851479b9cc8f90\n', '        //0.092910ETH\n', '        addUnitsContributed(0xA467b35b756359F55BC26bA82BAfA83B9Fb720Ed, 92);\n', '        //23) https://etherscan.io/tx/0xa622ff0e0a0dfc194bcc5fc3a590cafb5a891289c889e2e712b10b3717d23110\n', '        //8.973076534\n', '        addUnitsContributed(0x8261F215B09F6595A66C251625c24b6F52857195, 8_973);\n', '        //24) https://etherscan.io/tx/0xc9f36aba09bbd3fedf3f5e3f861c8616aceda619e82fcaf7a74792872be15747\n', '        // 27.95852ETH\n', '        addUnitsContributed(0x3D3C3EEAc517B72670DB36cb7380cd18B929430b, 27_958);\n', '        //25) https://etherscan.io/tx/0x0892c57752316d222430e1096ff17c68c4dcee49fcc4b27ffae82841295c88f6\n', '        //0.036792ETH\n', '        addUnitsContributed(0x27f5EB564BAEDb169C0c2d3a5ea1d25281D9a5e5, 36);\n', '        //26) https://etherscan.io/tx/0x76cb986eaf3213ea6127950b791660795f2b4666e3d9d33b7dc38c1945992195\n', '        //3.865313825ETH\n', '        addUnitsContributed(0x473bbC06D7fdB7713D1ED334F8D8096CaD6eC3f3, 3_865);\n', '        //27) https://etherscan.io/tx/0x7b41f44ad43f82c5707e05566113bb2614b274a0644aea7f6a3e095b819f9366\n', '        //0.120902ETH\n', '        addUnitsContributed(0x11ef72795691570b28277043d344D969f749A837, 120);\n', '        //28) https://etherscan.io/tx/0x61fe2706a03fb152f4713466cefc0dbc60e7ccf695426c5916faf1b94522cabd\n', '        //1.2530218ETH\n', '        addUnitsContributed(0x2836cFCc14d89Ccf0B0a980e5605f24Fa0A4a735, 1_253);\n', '        //29) https://etherscan.io/tx/0x3e94390de1bc53bee0f9dc8a0af5d66f567d82b21dd1355783a495022af16ca8/\n', '        //0.499988ETH\n', '        addUnitsContributed(0x83d371D26FE57a17849F87B14717fbAd7C6B82A5, 499);\n', '        //30) https://etherscan.io/tx/0xbacad42784b3f16bf7da601db7d83a40b4756076b2daaa7588cae1afbafc55c9/\n', '        //0.9410832ETH\n', '        addUnitsContributed(0xf172ee7B2b94b70f975E98E25044F82E6C29f996, 941);\n', '\n', '        LPmismatchCredited = true;\n', '    }\n', '\n', '    function addUnitsContributed(address guy, uint256 amtFenny) internal {\n', '        unitsContributed[guy] = unitsContributed[guy].add(getUnitsContributedPerFenny(amtFenny));\n', '        totalUnitsContributed = totalUnitsContributed.add(getUnitsContributedPerFenny(amtFenny));\n', '    }\n', '\n', '    // Safety function that can call public add liquidity before\n', '    // This is in case someone manipulates the 20 liquidity addition blocks \n', '    // and screws up the ratio\n', '    // Allows admins 2 hours to rescue the contract.\n', '    function addLiquidityToPairAdmin(uint256 ratio1ETHWholeBuysXCOREUnits, uint256 ratio1ETHWholeBuysXWrappedTokenUnits)\n', '         nonReentrant onlyOwner public{\n', '        addLiquidityToPair(false,ratio1ETHWholeBuysXCOREUnits, ratio1ETHWholeBuysXWrappedTokenUnits);\n', '    }\n', '    \n', '    function getCORERefundForPerson(address guy) public view returns (uint256) {\n', '        return COREContributed[guy].mul(1e12).div(totalCOREContributed).\n', '            mul(totalCOREToRefund).div(1e12);\n', '    }\n', '    \n', '    function getCOREREfund() nonReentrant public {\n', '        require(LGEFinished == true, "LGE not finished");\n', '        require(totalCOREToRefund > 0 , "No refunds");\n', '        require(COREContributed[msg.sender] > 0, "You didn\'t contribute anything");\n', '        // refund happens just once\n', '        require(CORERefundClaimed[msg.sender] == false , "You already claimed");\n', '        \n', '        // To get refund we get the core contributed of this user\n', '        // divide it by total core to get the percentage of total this user contributed\n', '        // And then multiply that by total core\n', '        uint256 COREToRefundToThisPerson = getCORERefundForPerson(msg.sender);\n', '        // Let 50% of total core is refunded, total core contributed is 5000\n', '        // So refund amount it 2500\n', '        // Lets say this user contributed 100, so he needs to get 50 back\n', '        // 100*1e12 = 100000000000000\n', '        // 100000000000000/5000 is 20000000000\n', '        // 20000000000*2500 is 50000000000000\n', '        // 50000000000000/1e21 = 50\n', '        CORERefundClaimed[msg.sender] = true;\n', '        IERC20(COREToken).transfer(msg.sender,COREToRefundToThisPerson);\n', '    }\n', '\n', '    function notMoreThan4PercentDeltaFromCurrentPrice(address pair, uint256 amtOutPer1ETH) internal  {\n', '        (uint256 reserveWETHofWrappedTokenPair, uint256 reserveTokenofWrappedTokenPair) = getPairReserves(pair);\n', '        uint256 outTokenFor1WETH = COREIUniswapV2Library.getAmountOut(1e18, reserveWETHofWrappedTokenPair, reserveTokenofWrappedTokenPair);\n', '        \n', '        require(amtOutPer1ETH.mul(104) > outTokenFor1WETH.mul(100) \n', '                && outTokenFor1WETH.mul(96) <  amtOutPer1ETH.mul(100), \n', '                  "LGE : Delta of balances is too big from actual (4% or more)");\n', '    }\n', '\n', '    function addLiquidityToPair(bool publicCall, uint256 ratio1ETHWholeBuysXCOREUnits, uint256 ratio1ETHWholeBuysXWrappedTokenUnits)\n', '     internal {\n', '        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(publicCall ? 2 hours : 0), "LGE : Liquidity generation ongoing");\n', '        require(LGEFinished == false, "LGE : Liquidity generation finished");\n', '        \n', '        // !!!!!!!!!!!\n', '        //unlock wrapping\n', '        IERC95(wrappedToken).unpauseTransfers();\n', '        //!!!!!!!!!\n', '\n', '\n', '        // // wrap token\n', '        tokenBeingWrapped.transfer(wrappedToken, tokenBeingWrapped.balanceOf(address(this)));\n', '        IERC95(wrappedToken).wrapAtomic(address(this));\n', '        IERC95(wrappedToken).skim(address(this)); // In case\n', '\n', '        // Optimistically get pair\n', '        wrappedTokenUniswapPair = IUniswapV2Factory(coreGlobals.UniswapFactory()).getPair(COREToken , wrappedToken);\n', "        if(wrappedTokenUniswapPair == address(0)) { // Pair doesn't exist yet \n", '            // create pair returns address\n', '            wrappedTokenUniswapPair = IUniswapV2Factory(coreGlobals.UniswapFactory()).createPair(\n', '                COREToken,\n', '                wrappedToken\n', '            );\n', '        }\n', '\n', '        //send dev fee\n', '        // 7.24% \n', "        uint256 DEV_FEE = 724; // TODO: DEV_FEE isn't public //ICoreVault(coreGlobals.COREVault).DEV_FEE();\n", '        address devaddress = ICoreVault(coreGlobals.COREVaultAddress()).devaddr();\n', '        IERC95(wrappedToken).transfer(devaddress, IERC95(wrappedToken).balanceOf(address(this)).mul(DEV_FEE).div(10000));\n', '        IERC20(COREToken).transfer(devaddress, IERC20(COREToken).balanceOf(address(this)).mul(DEV_FEE).div(10000));\n', '\n', '        //calculate core refund\n', '        uint256 balanceCORENow = IERC20(COREToken).balanceOf(address(this));\n', '        uint256 balanceCOREWrappedTokenNow = IERC95(wrappedToken).balanceOf(address(this));\n', '\n', '        ( uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH)  = getHowMuch1WETHBuysOfTokens();\n', '\n', ' \n', '\n', '        if(publicCall == false){ // admin added ratio\n', '            notMoreThan4PercentDeltaFromCurrentPrice(coreEthPair, ratio1ETHWholeBuysXCOREUnits);\n', '            notMoreThan4PercentDeltaFromCurrentPrice(preWrapEthPair, ratio1ETHWholeBuysXWrappedTokenUnits);\n', '\n', '            uint256 totalValueOfWrapper = balanceCOREWrappedTokenNow.div(ratio1ETHWholeBuysXWrappedTokenUnits).mul(1e18);\n', '            uint256 totalValueOfCORE =  balanceCORENow.div(ratio1ETHWholeBuysXCOREUnits).mul(1e18);\n', '\n', '            totalCOREToRefund = totalValueOfWrapper >= totalValueOfCORE ? 0 :\n', '                totalValueOfCORE.sub(totalValueOfWrapper).mul(coreTokenPer1ETH).div(1e18);\n', '\n', '            require(totalValueOfWrapper.mul(100) < totalValueOfCORE.mul(104), "Too much WBTC value ( max 4% deviation)");\n', '\n', '\n', '        }else{\n', '            notMoreThan4PercentDeltaFromCurrentPrice(preWrapEthPair, tokenBeingWrappedPer1ETH);\n', '            notMoreThan4PercentDeltaFromCurrentPrice(coreEthPair, coreTokenPer1ETH);\n', '\n', '            uint256 totalValueOfWrapper = balanceCOREWrappedTokenNow.div(tokenBeingWrappedPer1ETH).mul(1e18);\n', '            uint256 totalValueOfCORE =  balanceCORENow.div(coreTokenPer1ETH).mul(1e18);\n', '\n', '            totalCOREToRefund = totalValueOfWrapper >= totalValueOfCORE ? 0 :\n', '                totalValueOfCORE.sub(totalValueOfWrapper).mul(coreTokenPer1ETH).div(1e18);\n', '\n', '            require(totalValueOfWrapper.mul(100) < totalValueOfCORE.mul(104), "Too much WBTC value ( max 4% deviation)");\n', '    \n', '        }\n', '\n', '  \n', '\n', '\n', '        // send tokenwrap\n', '        IERC95(wrappedToken).transfer(wrappedTokenUniswapPair, IERC95(wrappedToken).balanceOf(address(this)));\n', '\n', '        // send core without the refund\n', '        IERC20(COREToken).transfer(wrappedTokenUniswapPair, balanceCORENow.sub(totalCOREToRefund));\n', '\n', '        require(IUniswapV2Pair(wrappedTokenUniswapPair).totalSupply() == 0, "Somehow total supply is higher, sanity fail");\n', '        // mint LP to this adddress\n', '        IUniswapV2Pair(wrappedTokenUniswapPair).mint(address(this));\n', '\n', '        // check how much was minted\n', '        totalLPCreated = IUniswapV2Pair(wrappedTokenUniswapPair).balanceOf(address(this));\n', '\n', '        // calculate minted per contribution\n', '        LPPerUnitContributed = totalLPCreated.mul(1e18).div(totalUnitsContributed.sub(totalCOREToRefund)); // Stored as 1e18 more for round erorrs and change\n', '                                                                               // Remove refunded from the total\n', '        require(LPPerUnitContributed > 0, "LP Per Unit Contribute Must be above Zero");\n', '        // set LGE to complete\n', '        LGEFinished = true;\n', '\n', '        //sync the tokens\n', '        ICORETransferHandler(coreGlobals.TransferHandler()).sync(wrappedTokenUniswapPair);\n', '        ICORETransferHandler(coreGlobals.TransferHandler()).sync(coreEthPair);\n', '\n', '    }\n', '    \n', '\n', '\n', '    \n', '}']