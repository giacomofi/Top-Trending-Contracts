['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param roleNames the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] roleNames) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '  //         if (hasRole(msg.sender, roleNames[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '// File: contracts/ERC2980/Issuable.sol\n', '\n', '/**\n', ' * @title Issuable\n', ' * @dev The Issuable contract defines the issuer role who can perform certain kind of actions\n', ' * even if he is not the owner.\n', ' * An issuer can transfer his role to a new address.\n', ' */\n', 'contract Issuable is Ownable, RBAC {\n', '  string public constant ROLE_ISSUER = "issuer";\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not a issuer.\n", '   */\n', '  modifier onlyIssuer() {\n', "    require(isIssuer(msg.sender), 'Issuable: caller is not the issuer');\n", '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrIssuer() {\n', "    require(msg.sender == owner || isIssuer(msg.sender), 'Issuable: caller is not the issuer or the owner');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address has issuer role\n', '   */\n', '  function isIssuer(address _addr) public view returns (bool) {\n', '    return hasRole(_addr, ROLE_ISSUER);\n', '  }\n', '\n', '  /**\n', '   * @dev add a new issuer address\n', '   * @param _operator address\n', '   * @return true if the address was not an issuer, false if the address was already an issuer\n', '   */\n', '  function addIssuer(address _operator) public onlyOwner {\n', '    addRole(_operator, ROLE_ISSUER);\n', '  }\n', '\n', '    /**\n', '   * @dev remove an address from issuers\n', '   * @param _operator address\n', '   * @return true if the address has been removed from issuers,\n', "   * false if the address wasn't in the issuer list in the first place\n", '   */\n', '  function removeIssuer(address _operator) public onlyOwner {\n', '    removeRole(_operator, ROLE_ISSUER);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current issuer to transfer his role to a newIssuer.\n', '   * @param _newIssuer The address to transfer the issuer role to.\n', '   */\n', '  function transferIssuer(address _newIssuer) public onlyIssuer {\n', '    require(_newIssuer != address(0));\n', '    removeRole(msg.sender, ROLE_ISSUER);\n', '    addRole(_newIssuer, ROLE_ISSUER);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/Frozenlist.sol\n', '\n', '/**\n', ' * @title Frozenlist\n', ' * @dev The Frozenlist contract has a frozen list of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Frozenlist is Issuable {\n', '\n', '  event FundsFrozen(address target);\n', '\n', '  string public constant ROLE_FROZENLIST = "frozenlist";\n', '\n', '  /**\n', '   * @dev Throws if operator is frozen.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfNotFrozen(address _operator) {\n', '    require(!hasRole(_operator, ROLE_FROZENLIST), "Account frozen");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the frozenlist\n', '   * @param _operator address\n', '   * @return true if the address was added to the frozenlist, false if the address was already in the frozenlist\n', '   */\n', '  function addAddressToFrozenlist(address _operator) public onlyIssuer {\n', '    addRole(_operator, ROLE_FROZENLIST);\n', '    emit FundsFrozen(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in frozenlist\n', '   */\n', '  function frozenlist(address _operator) public view returns (bool) {\n', '    return hasRole(_operator, ROLE_FROZENLIST);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the frozenlist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the frozenlist,\n', '   * false if all addresses were already in the frozenlist\n', '   */\n', '  function addAddressesToFrozenlist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToFrozenlist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the frozenlist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the frozenlist,\n', "   * false if the address wasn't in the frozenlist in the first place\n", '   */\n', '  function removeAddressFromFrozenlist(address _operator) public onlyIssuer {\n', '    removeRole(_operator, ROLE_FROZENLIST);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the frozenlist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the frozenlist,\n', "   * false if all addresses weren't in the frozenlist in the first place\n", '   */\n', '  function removeAddressesFromFrozenlist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromFrozenlist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', '    By default whitelist in not enabled.\n', ' */\n', 'contract Whitelist is Issuable {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '  bool public whitelistEnabled;\n', '\n', '  constructor(bool enableWhitelist)\n', '    public {\n', '      whitelistEnabled = enableWhitelist;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted and whitelist is enabled.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    if(whitelistEnabled) {\n', '      checkRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '    _;\n', '  }\n', '\n', '  function enableWhitelist() public onlyOwner {\n', '    whitelistEnabled = true;\n', '  }\n', '\n', '  function disableWhitelist() public onlyOwner {\n', '    whitelistEnabled = false;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator) public onlyIssuer {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator) public view returns (bool) {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator) public onlyIssuer {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'contract NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n', '}\n', '\n', '// File: contracts/NokuCustomToken.sol\n', '\n', 'contract NokuCustomToken is Ownable {\n', '\n', '    event LogBurnFinished();\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    // The entity acting as Custom Token service provider i.e. Noku\n', '    address public serviceProvider;\n', '\n', '    // Flag indicating if Custom Token burning has been permanently finished or not.\n', '    bool public burningFinished;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n', '    */\n', '    modifier onlyServiceProvider() {\n', '        require(msg.sender == serviceProvider, "caller is not service provider");\n', '        _;\n', '    }\n', '\n', '    modifier canBurn() {\n', '        require(!burningFinished, "burning finished");\n', '        _;\n', '    }\n', '\n', '    constructor(address _pricingPlan, address _serviceProvider) internal {\n', '        require(_pricingPlan != 0, "_pricingPlan is zero");\n', '        require(_serviceProvider != 0, "_serviceProvider is zero");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '        serviceProvider = _serviceProvider;\n', '    }\n', '\n', '    /**\n', '    * @dev Presence of this function indicates the contract is a Custom Token.\n', '    */\n', '    function isCustomToken() public pure returns(bool isCustom) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Stop burning new tokens.\n', '    * @return true if the operation was successful.\n', '    */\n', '    function finishBurning() public onlyOwner canBurn returns(bool finished) {\n', '        burningFinished = true;\n', '\n', '        emit LogBurnFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n', '    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n', '    */\n', '    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n', '        require(_pricingPlan != 0, "_pricingPlan is 0");\n', '        require(_pricingPlan != address(pricingPlan), "_pricingPlan == pricingPlan");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/introspection/SupportsInterfaceWithLookup.sol\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic is ERC165 {\n', '\n', '  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '  /*\n', '   * 0x4f558e79 ===\n', "   *   bytes4(keccak256('exists(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId)\n', '    public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 _tokenId);\n', '\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safetransfer`. This function MAY throw to revert and reject the\n', '   * transfer. Return of other than the magic value MUST result in the\n', '   * transaction being reverted.\n', '   * Note: the contract address is always the message sender.\n', '   * @param _operator The address which called `safeTransferFrom` function\n', '   * @param _from The address which previously owned the token\n', '   * @param _tokenId The NFT identifier which is being transferred\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '    _registerInterface(InterfaceId_ERC721Exists);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    tokenApprovals[_tokenId] = _to;\n', '    emit Approval(owner, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(\n', '    address _spender,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      _spender == owner ||\n', '      getApproved(_tokenId) == _spender ||\n', '      isApprovedForAll(owner, _spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '      msg.sender, _from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    ownedTokens[_from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/NokuCustomERC721.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC721Token contract is a custom ERC721-compliant token available in the Noku Service Platform (NSP).\n', '* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n', '* by minting or burning tokens in order to increase or decrease the token supply.\n', '*/\n', 'contract NokuCustomERC721 is NokuCustomToken, ERC721Token, Issuable, Frozenlist, Whitelist {\n', '    using SafeMath for uint256;\n', '    enum StorageTypes { None, IPFS, NOKU }\n', '\n', '    bool public isAdvanced = false;\n', '    bool public mintingFinished = false;\n', '\n', '    StorageTypes private storageType;\n', '    string private tokenBaseURIValue = "";\n', '    mapping (uint256 => string) private metadataURIs;\n', '\n', '    event LogNokuCustomERC721Created(\n', '        address indexed caller,\n', '        string indexed name,\n', '        string indexed symbol,\n', '        address pricingPlan,\n', '        address serviceProvider,\n', '        string baseURI,\n', '        StorageTypes _storageType\n', '    );\n', '\n', '    // event LogInformationChanged(\n', '    //     address indexed caller, \n', '    //     string name, \n', '    //     string symbol\n', '    // );\n', '\n', '    event MintFinished();\n', '\n', '    event FundsReassigned(address _from, address _to, uint256 _tokenId);\n', '    event FundsRevoked(address _from, uint256 _tokenId);\n', '\n', '    bytes32 public constant BURN_SERVICE_NAME = "NokuCustomERC721.burn";\n', '    bytes32 public constant MINT_SERVICE_NAME = "NokuCustomERC721.mint";\n', '    bytes32 public constant TRANSFERFROM_SERVICE_NAME = "NokuCustomERC721.transferFrom";\n', '\n', '    bytes4 internal constant InterfaceId_ERC721Advanced = 0xdb1e569f;\n', '    /**\n', '    * 0xdb1e569f ===\n', "    *   bytes4(keccak256('isERC721Advanced()'))\n", '    */\n', '\n', '    modifier canBurnToken(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', "        require(!mintingFinished, 'Mint finished');\n", '        _;\n', '    }\n', '\n', '    modifier isERC721Advanced() {\n', "        require(isAdvanced, 'ERC721 Advanced functions not available');\n", '        _;\n', '    }\n', '\n', '    modifier onlyIfNotFrozen(address _operator) {\n', '        if (isAdvanced) {\n', '            require(!hasRole(_operator, ROLE_FROZENLIST), "Account frozen");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    constructor (\n', '        string _name,\n', '        string _symbol,\n', '        string _tokenBaseURI,\n', '        bool _enableWhitelist,\n', '        bool _isAdvanced,\n', '        StorageTypes _storageType,\n', '        address _pricingPlan,\n', '        address _serviceProvider\n', '    )\n', '    NokuCustomToken(_pricingPlan, _serviceProvider)\n', '    ERC721Token(_name, _symbol)\n', '    Whitelist(_enableWhitelist)\n', '    public\n', '    {\n', '        _registerInterface(InterfaceId_ERC721Advanced);\n', '        isAdvanced = _isAdvanced;\n', '\n', '        addIssuer(owner);\n', '        if(_enableWhitelist) {\n', '            addAddressToWhitelist(owner);\n', '        }\n', '\n', '        require(bytes(_name).length > 0, "_name is empty");\n', '        require(bytes(_symbol).length > 0, "_symbol is empty");\n', '\n', '        if(bytes(_tokenBaseURI).length > 0){\n', '            tokenBaseURIValue = _tokenBaseURI;\n', '        }\n', '\n', '\n', '        storageType = _storageType;\n', '\n', '        emit LogNokuCustomERC721Created(\n', '            msg.sender,\n', '            _name,\n', '            _symbol,\n', '            _pricingPlan,\n', '            _serviceProvider,\n', '            _tokenBaseURI,\n', '            _storageType\n', '        );\n', '    }\n', '\n', '    // function setInformation(string _name, string _symbol) public onlyOwner returns(bool successful) {\n', '    //     require(bytes(_name).length > 0, "_name is empty");\n', '    //     require(bytes(_symbol).length > 0, "_symbol is empty");\n', '\n', '    //     name_ = _name;\n', '    //     symbol_ = _symbol;\n', '\n', '        // emit LogInformationChanged(msg.sender, _name, _symbol);\n', '\n', '    //     return true;\n', '    // }\n', '\n', '    function getStorageType() public view returns(StorageTypes) {\n', '        return storageType;\n', '    }\n', '\n', '    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n', '        require(exists(_tokenId), "tokenId does not exist");\n', '        if(getStorageType() == StorageTypes.IPFS) {\n', '            return tokenMetadataURI(_tokenId);\n', '        } else if(getStorageType() == StorageTypes.NOKU) {\n', '            string memory partialPath = string(abi.encodePacked(tokenBaseURIValue, toString(this)));\n', '            return string(abi.encodePacked(string(abi.encodePacked(partialPath, "/")), uint2str(_tokenId)));\n', '        } else {\n', '            return string(abi.encodePacked(tokenBaseURIValue, uint2str(_tokenId)));\n', '        }\n', '    }\n', '\n', '    function tokenBaseURI() public view returns (string) {\n', '        return tokenBaseURIValue;\n', '    }\n', '\n', '    function updateTokenBaseURI(string memory _newBaseURI) public onlyOwner {\n', '        tokenBaseURIValue = _newBaseURI;\n', '    }\n', '\n', '    function updateTokenMetadataURI(uint256 _tokenId, string _tokenMetadataURI) public onlyOwner {\n', '        require(exists(_tokenId), "tokenId does not exist");\n', '        _setTokenMetadataURI(_tokenId, _tokenMetadataURI);\n', '    }\n', '\n', '    function tokenMetadataURI(uint256 _tokenId) public view returns (string) {\n', '        return metadataURIs[_tokenId];\n', '    }\n', '\n', '    function mint(uint256 _tokenId, address _to) public onlyOwner {\n', '        _mint(_tokenId, _to, "");\n', '    }\n', '\n', '    function mint(uint256 _tokenId, address _to, string _tokenMetadataURI) public onlyOwner {\n', '        _mint(_tokenId, _to, _tokenMetadataURI);\n', '    }\n', '\n', '    function multipleMint(uint256[] _tokensIds, address _to) public onlyOwner {\n', '        _multipleMint(_tokensIds, _to, "");\n', '    }\n', '\n', '    function multipleMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) public onlyOwner {\n', '        _multipleMint(_tokensIds, _to, _tokenMetadataURI);\n', '    }\n', '\n', '    function safeMint(uint256 _tokenId, address _to) public onlyOwner {\n', '        _safeMint(_tokenId, _to, "", "");\n', '    }\n', '\n', '    function safeMint(uint256 _tokenId, address _to, bytes memory _data) public onlyOwner {\n', '        _safeMint(_tokenId, _to, "", _data);\n', '    }\n', '\n', '    function safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI) public onlyOwner {\n', '        _safeMint(_tokenId, _to, _tokenMetadataURI, "");\n', '    }\n', '\n', '    function safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI, bytes memory _data) public onlyOwner {\n', '        _safeMint(_tokenId, _to, _tokenMetadataURI, _data);\n', '    }\n', '\n', '    function multipleSafeMint(uint256[] _tokensIds, address _to) public onlyOwner {\n', '        _multipleSafeMint(_tokensIds, _to, "", "");\n', '    }\n', '\n', '    function multipleSafeMint(uint256[] _tokensIds, address _to, bytes memory _data) public onlyOwner {\n', '        _multipleSafeMint(_tokensIds, _to, "", _data);\n', '    }\n', '\n', '    function multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) public onlyOwner {\n', '        _multipleSafeMint(_tokensIds, _to, _tokenMetadataURI, "");\n', '    }\n', '\n', '    function multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI, bytes memory _data) public onlyOwner {\n', '        _multipleSafeMint(_tokensIds, _to, _tokenMetadataURI, _data);\n', '    }\n', '\n', '    function burn(uint256 _tokenId) public canBurn canBurnToken(_tokenId) onlyIfNotFrozen(msg.sender) {\n', '        if (bytes(metadataURIs[_tokenId]).length != 0) {\n', '            delete metadataURIs[_tokenId];\n', '        }\n', '        super._burn(ownerOf(_tokenId), _tokenId);\n', '        require(pricingPlan.payFee(BURN_SERVICE_NAME, 1 * 10**18, msg.sender), "burn fee payment failed");\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public onlyIfNotFrozen(_from) onlyIfNotFrozen(_to) onlyIfWhitelisted(_to) canTransfer(_tokenId) {\n', '        super.transferFrom(_from, _to, _tokenId);\n', '        require(pricingPlan.payFee(TRANSFERFROM_SERVICE_NAME, 1 * 10**18, msg.sender), "transferFrom fee payment failed");\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function reassign(address _from, address _to, uint256 _tokenId) public onlyIssuer isERC721Advanced {\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '        emit FundsReassigned(_from, _to, _tokenId);\n', '    }\n', '\n', '    function revoke(address _from, uint256 _tokenId) public onlyIssuer isERC721Advanced {\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(msg.sender, _tokenId);\n', '\n', '        emit Transfer(_from, msg.sender, _tokenId);\n', '        emit FundsRevoked(_from, _tokenId);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        if(isIssuer(owner)) {\n', '            if(whitelistEnabled) {\n', '                removeAddressFromWhitelist(owner);\n', '                addAddressToWhitelist(_newOwner);\n', '            }\n', '            transferIssuer(_newOwner);\n', '        }\n', '        super.transferOwnership(_newOwner);\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        if(whitelistEnabled) {\n', '            removeAddressFromWhitelist(owner);\n', '        }\n', '        removeIssuer(owner);\n', '        super.renounceOwnership();\n', '    }\n', '\n', '    function addAddressToFrozenlist(address _operator) public isERC721Advanced {\n', '        super.addAddressToFrozenlist(_operator);\n', '    }\n', '\n', '    function removeAddressFromFrozenlist(address _operator) public isERC721Advanced {\n', '        super.removeAddressFromFrozenlist(_operator);\n', '    }\n', '\n', '    //Internal functions\n', '\n', '    function _mint(uint256 _tokenId, address _to, string _tokenMetadataURI) canMint onlyIfNotFrozen(_to) onlyIfWhitelisted(_to) internal returns (uint256) {\n', "        require(!exists(_tokenId), 'tokenId already exists');\n", '\n', '        if (storageType == StorageTypes.IPFS) {\n', '            require(bytes(_tokenMetadataURI).length > 0, "missing IPFS uri");\n', '        } else if (storageType == StorageTypes.NOKU) {\n', '            require(bytes(_tokenMetadataURI).length > 0, "missing Noku uri");\n', '        }\n', '\n', '        super._mint(_to, _tokenId);\n', '        _setTokenMetadataURI(_tokenId, _tokenMetadataURI);\n', '\n', '        require(pricingPlan.payFee(MINT_SERVICE_NAME, 1 * 10**18, msg.sender), "mint fee payment failed");\n', '\n', '        return _tokenId;\n', '    }\n', '\n', '    function _multipleMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) internal {\n', '        for(uint256 i = 0; i < _tokensIds.length; i++) {\n', '            _mint(_tokensIds[i], _to, _tokenMetadataURI);\n', '        }\n', '    }\n', '\n', '    function _safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI, bytes memory _data) internal returns (uint256) {\n', '        _mint(_tokenId, _to, _tokenMetadataURI);\n', '        require(checkAndCallSafeTransfer(address(0), _to, _tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '        return _tokenId;\n', '    }\n', '\n', '    function _multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI, bytes memory _data) internal {\n', '        for(uint256 i = 0; i < _tokensIds.length; i++) {\n', '            _safeMint(_tokensIds[i], _to, _tokenMetadataURI, _data);\n', '        }\n', '    }\n', '\n', '    function _setTokenMetadataURI(uint256 _tokenId, string _tokenMetadataURI) internal {\n', '        if (storageType != StorageTypes.None) {\n', '            metadataURIs[_tokenId] = _tokenMetadataURI;\n', '        }\n', '    }\n', '\n', '    function uint2str(uint i) internal pure returns (string) {\n', '        if (i == 0) return "0";\n', '        uint j = i;\n', '        uint length;\n', '        while (j != 0){\n', '            length++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(length);\n', '        uint k = length - 1;\n', '        while (i != 0){\n', '            bstr[k--] = byte(48 + i % 10);\n', '            i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '\n', '    function toString(address _addr) internal pure returns (string) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', '        str[0] = "0";\n', '        str[1] = "x";\n', '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '\n', '    //Private functions\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/NokuCustomService.sol\n', '\n', 'contract NokuCustomService is Pausable {\n', '    using AddressUtils for address;\n', '\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    constructor(address _pricingPlan) internal {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '    }\n', '\n', '    function setPricingPlan(address _pricingPlan) public onlyOwner {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '        require(NokuPricingPlan(_pricingPlan) != pricingPlan, "_pricingPlan equal to current");\n', '        \n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: contracts/NokuCustomERC721Service.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC721Service contract .\n', '*/\n', 'contract NokuCustomERC721Service is NokuCustomService {\n', '    event LogNokuCustomERC721ServiceCreated(address caller, address indexed _pricingPlan);\n', '\n', '    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n', '\n', '    bytes32 public constant CREATE_SERVICE_NAME = "NokuCustomERC721.create";\n', '\n', '    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n', '        emit LogNokuCustomERC721ServiceCreated(msg.sender, _pricingPlan);\n', '    }\n', '\n', '    function createCustomToken(string _name, string _symbol, string _tokenBaseURI, bool _enableWhitelist, bool _isAdvanced, NokuCustomERC721.StorageTypes _storageType, NokuPricingPlan _pricingPlan) public returns(NokuCustomERC721 customToken) {\n', '        customToken = new NokuCustomERC721(\n', '            _name,\n', '            _symbol,\n', '            _tokenBaseURI,\n', '            _enableWhitelist,\n', '            _isAdvanced,\n', '            _storageType,\n', '            _pricingPlan,\n', '            owner\n', '        );\n', '\n', '        // Transfer NokuCustomERC721 ownership to the client\n', '        customToken.transferOwnership(msg.sender);\n', '\n', '        require(_pricingPlan.payFee(CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), "fee payment failed");\n', '    }\n', '\n', '}']