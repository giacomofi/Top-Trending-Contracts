['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n', '// Subject to the MIT license.\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "Uniloan::SafeMath: subtraction underflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2SlidingOracle {\n', '    function quote(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (uint amountOut);\n', '}\n', '\n', 'contract YearnOptionsV1Manager {\n', '    using SafeMath for uint;\n', '\n', '    /// @notice EIP-20 token name for this token\n', '    string public name = "Yearn OptionsV1Manager";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public symbol = "yOV1M";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0; // Initial 0\n', '\n', '    mapping (address => mapping (address => uint)) internal allowances;\n', '    mapping (address => uint) internal balances;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /// @notice Deposited event for creditor/LP\n', '    event Deposited(address indexed creditor, uint shares, uint credit);\n', '    \n', '    /// @notice Withdawn event for creditor/LP\n', '    event Withdrew(address indexed creditor, uint shares, uint credit);\n', '\n', '    /// @notice The create option event\n', '    event Created(uint id, address indexed owner, address indexed tokenIn, uint amountIn, uint amountOut, uint created, uint expire);\n', '    \n', '    /// @notice swap the position event when processing options\n', '    event Excercised(uint id, address indexed owner, address indexed tokenIn, uint amountIn, uint amountOut, uint created, uint expire);\n', '    \n', '    /// @notice The close position event when processing options\n', '    event Closed(uint id, address indexed owner, uint created, uint expire);\n', '\n', '    struct position {\n', '        address owner;\n', '        address asset;\n', '        uint amountIn;\n', '        uint amountOut;\n', '        uint created;\n', '        uint expire;\n', '        bool open;\n', '    }\n', '    /// @notice Uniswap Oracle Router\n', '    IUniswapV2SlidingOracle public constant ORACLE = IUniswapV2SlidingOracle(0xCA2E2df6A7a7Cf5bd19D112E8568910a6C2D3885);\n', '\n', '    uint constant public SQRTPERIOD = 777;\n', '    uint constant public PERIOD = 7 days;\n', '    uint constant public GRANULARITY = 8;\n', '    \n', '    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    /**\n', '     * @notice Provides a quote of how much output can be expected given the inputs\n', '     * @param tokenIn the asset being received\n', '     * @param amountIn the amount of tokenIn being provided\n', '     * @return minOut the minimum amount of liquidity to send\n', '     */\n', '    function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {\n', '        if (tokenIn != WETH) {\n', '            amountIn = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);\n', '        }\n', '        minOut = ORACLE.quote(WETH, amountIn, DAI, GRANULARITY);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates strikeFee\n', '     * @param amountIn Option amount\n', '     * @param amountOut Strike price of the option\n', '     * @param currentOut Current price of the option\n', '     * @return fee Strike fee amount\n', '     */\n', '    function getStrikeFee(\n', '        uint256 amountIn,\n', '        uint256 amountOut,\n', '        uint256 currentOut\n', '    ) internal pure returns (uint256) {\n', '        if (amountOut > currentOut)\n', '            return amountOut.sub(currentOut).mul(amountIn).div(currentOut);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates periodFee\n', '     * @param amountIn Option amount\n', '     * @param amountOut Strike price of the option\n', '     * @param currentOut Current price of the option\n', '     * @return fee Period fee amount\n', '     *\n', '     * amount < 1e30        |\n', '     * impliedVolRate < 1e10| => amount * impliedVolRate * strike < 1e60 < 2^uint256\n', '     * strike < 1e20 ($1T)  |\n', '     *\n', '     * in case amount * impliedVolRate * strike >= 2^256\n', '     * transaction will be reverted by the SafeMath\n', '     */\n', '    function getPeriodFee(\n', '        uint256 amountIn,\n', '        uint256 amountOut,\n', '        uint256 currentOut\n', '    ) internal pure returns (uint256) {\n', '        return amountIn\n', '                .mul(SQRTPERIOD)\n', '                .mul(amountOut)\n', '                .div(currentOut)\n', '                .mul(5500)\n', '                .div(100000000);\n', '    }\n', '\n', '    /**\n', '     * @notice Used for getting the actual options prices\n', '     * @param amountIn Option amount\n', '     * @param amountOut Strike price of the option\n', '     * @param currentOut current price of the option\n', '     * @return total Total price to be paid\n', '     */\n', '    function fees(uint amountIn, uint amountOut, uint currentOut) public pure returns (uint) {\n', '        return getPeriodFee(amountIn, amountOut, currentOut)\n', '                .add(getStrikeFee(amountIn, amountOut, currentOut))\n', '                .add(getSettlementFee(amountIn));\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates settlementFee\n', '     * @param amount Option amount\n', '     * @return fee Settlement fee amount\n', '     */\n', '    function getSettlementFee(uint amount) internal pure returns (uint) {\n', '        return amount / 100;\n', '    }\n', '\n', '    /// @notice array of all option positions\n', '    position[] public positions;\n', '\n', '    /// @notice the tip index of the positions array\n', '    uint public nextIndex;\n', '\n', '    /// @notice the last index processed by the contract\n', '    uint public processedIndex;\n', '\n', '    /// @notice mapping of options assigned to users\n', '    mapping(address => uint[]) public options;\n', '\n', '    address public governance;\n', '    address public pendingGovernance;\n', '    \n', '    address public constant reserve = address(0x9cA85572E6A3EbF24dEDd195623F188735A5179f);\n', '    \n', '    uint public reserveInUse;\n', '\n', '    /// @notice constructor takes a uniswap pair as an argument to set its 2 borrowable assets\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "::setGovernance: only governance");\n', '        pendingGovernance = _governance;\n', '    }\n', '    \n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "::acceptGovernance: only pendingGovernance");\n', '        governance = pendingGovernance;\n', '    }\n', '\n', '    function _mint(address dst, uint amount) internal {\n', '        // mint the amount\n', '        totalSupply = totalSupply.add(amount);\n', '\n', '        // transfer the amount to the recipient\n', '        balances[dst] = balances[dst].add(amount);\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '\n', '    function _burn(address dst, uint amount) internal {\n', '        // burn the amount\n', '        totalSupply = totalSupply.sub(amount, "::_burn: underflow");\n', '\n', '        // transfer the amount to the recipient\n', '        balances[dst] = balances[dst].sub(amount, "::_burn: underflow");\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw all liquidity from msg.sender shares\n', '     * @return success/failure\n', '     */\n', '    function withdrawAll() external returns (bool) {\n', '        return withdraw(balances[msg.sender]);\n', '    }\n', '    \n', '    function liquidityBalance() public view returns (uint) {\n', '        return IERC20(reserve).balanceOf(address(this));\n', '    }\n', '    \n', '    function inCaseTokensGetStuck(address token) external {\n', '        require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");\n', '        IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw `_shares` amount of liquidity for user\n', '     * @param _shares the amount of shares to burn for liquidity\n', '     * @return success/failure\n', '     */\n', '    function withdraw(uint _shares) public returns (bool) {\n', '        uint r = liquidityBalance().mul(_shares).div(totalSupply);\n', '        _burn(msg.sender, _shares);\n', '\n', '        IERC20(reserve).transfer(msg.sender, r);\n', '        emit Withdrew(msg.sender, _shares, r);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice deposit all liquidity from msg.sender\n', '     * @return success/failure\n', '     */\n', '    function depositAll() external returns (bool) {\n', '        return deposit(IERC20(reserve).balanceOf(msg.sender));\n', '    }\n', '\n', '    /**\n', '     * @notice deposit `amount` amount of liquidity for user\n', '     * @param amount the amount of liquidity to add for shares\n', '     * @return success/failure\n', '     */\n', '    function deposit(uint amount) public returns (bool) {\n', '        IERC20(reserve).transferFrom(msg.sender, address(this), amount);\n', '        uint _shares = 0;\n', '        if (liquidityBalance() == 0) {\n', '            _shares = amount;\n', '        } else {\n', '            _shares = amount.mul(totalSupply).div(liquidityBalance());\n', '        }\n', '        _mint(msg.sender, _shares);\n', '        emit Deposited(msg.sender, _shares, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice batch close any pending open options that have expired\n', '     * @param size the maximum size of batch to execute\n', '     * @return the last index processed\n', '     */\n', '    function closeInBatches(uint size) external returns (uint) {\n', '        uint i = processedIndex;\n', '        for (; i < size; i++) {\n', '            close(i);\n', '        }\n', '        processedIndex = i;\n', '        return processedIndex;\n', '    }\n', '\n', '    /**\n', '     * @notice iterate through all open options and close\n', '     * @return the last index processed\n', '     */\n', '    function closeAllOpen() external returns (uint) {\n', '        uint i = processedIndex;\n', '        for (; i < nextIndex; i++) {\n', '            close(i);\n', '        }\n', '        processedIndex = i;\n', '        return processedIndex;\n', '    }\n', '\n', '    /**\n', '     * @notice close a specific options based on id\n', '     * @param id the `id` of the given options to close\n', '     * @return success/failure\n', '     */\n', '    function close(uint id) public returns (bool) {\n', '        position storage _pos = positions[id];\n', '        if (_pos.owner == address(0x0)) {\n', '            return false;\n', '        }\n', '        if (!_pos.open) {\n', '            return false;\n', '        }\n', '        if (_pos.expire > block.timestamp) {\n', '            return false;\n', '        }\n', '        _pos.open = false;\n', '        reserveInUse = reserveInUse.sub(_pos.amountOut);\n', '        emit Closed(id, _pos.owner, _pos.created, _pos.expire);\n', '        return true;\n', '    }\n', '    \n', '    function calculateFee(address tokenIn, uint amountIn, uint amountOut) public view returns (uint) {\n', '        return fees(amountIn, amountOut, quote(tokenIn, amountIn));\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a new option position for the owner\n', '     * @param tokenIn the token you are adding to the pool if you exercise the option\n', '     * @param amountIn the amount of option cover\n', '     * @param amountOut the amount of tokens you would like out\n', '     */\n', '    function createOption(address tokenIn, uint amountIn, uint amountOut) external returns (uint) {\n', '        reserveInUse = reserveInUse.add(amountOut);\n', "        require(liquidityBalance() > reserveInUse, '::createOption: insufficient liquidity');\n", '        \n', '        IERC20(tokenIn).transferFrom(msg.sender, address(this), calculateFee(tokenIn, amountIn, amountOut));\n', '\n', '        positions.push(position(msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD), true));\n', '        options[msg.sender].push(nextIndex);\n', '\n', '        emit Created(nextIndex, msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD));\n', '        return nextIndex++;\n', '    }\n', '\n', '    /**\n', '     * @notice swap a non expired option\n', '     * @param id the id of the options to close\n', '     * @return true/false if option was success\n', '     */\n', '    function exercise(uint id) external returns (bool) {\n', '        position storage _pos = positions[id];\n', '        require(_pos.open, "::exercise: position is closed");\n', '        require(_pos.expire < block.timestamp, "::exercise: position expired");\n', '        IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);\n', '        IERC20(reserve).transfer(msg.sender, _pos.amountOut);\n', '        _pos.open = false;\n', '        positions[id] = _pos;\n', '        emit Excercised(id, _pos.owner, _pos.asset, _pos.amountIn, _pos.amountOut, _pos.created, _pos.expire);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "::permit: invalid signature");\n', '        require(signatory == owner, "::permit: unauthorized");\n', '        require(now <= deadline, "::permit: signature expired");\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint amount) public returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint(-1)) {\n', '            uint newAllowance = spenderAllowance.sub(amount, "::transferFrom: transfer amount exceeds spender allowance");\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        require(src != address(0), "::_transferTokens: cannot transfer from the zero address");\n', '        require(dst != address(0), "::_transferTokens: cannot transfer to the zero address");\n', '\n', '        balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");\n', '        balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");\n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']