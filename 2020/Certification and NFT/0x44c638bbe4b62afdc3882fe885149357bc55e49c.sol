['// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either {approve} or {setApprovalForAll}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either {approve} or {setApprovalForAll}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '    function approve(address to, uint256 tokenId) external;\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Enumerable is IERC721 {\n', '    function totalSupply() external view returns (uint256);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @notice Handle the receipt of an NFT\n', '     * @dev The ERC721 smart contract calls this function on the recipient\n', '     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n', '     * otherwise the caller will revert the transaction. The selector to be\n', '     * returned can be obtained as `this.onERC721Received.selector`. This\n', '     * function MAY throw to revert and reject the transfer.\n', '     * Note: the ERC721 contract address is always the message sender.\n', '     * @param operator The address which called `safeTransferFrom` function\n', '     * @param from The address which previously owned the token\n', '     * @param tokenId The NFT identifier which is being transferred\n', '     * @param data Additional data with no specified format\n', '     * @return bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n', '    external returns (bytes4);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165UpgradeSafe is Initializable, IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '\n', '    function __ERC165_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '    }\n', '\n', '    function __ERC165_init_unchained() internal initializer {\n', '\n', '\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Library for managing an enumerable variant of Solidity's\n", ' * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n', ' * type.\n', ' *\n', ' * Maps have the following properties:\n', ' *\n', ' * - Entries are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableMap.UintToAddressMap private myMap;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n', ' * supported.\n', ' */\n', 'library EnumerableMap {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Map type with\n', '    // bytes32 keys and values.\n', '    // The Map implementation uses private functions, and user-facing\n', '    // implementations (such as Uint256ToAddressMap) are just wrappers around\n', '    // the underlying Map.\n', '    // This means that we can only create new EnumerableMaps for types that fit\n', '    // in bytes32.\n', '\n', '    struct MapEntry {\n', '        bytes32 _key;\n', '        bytes32 _value;\n', '    }\n', '\n', '    struct Map {\n', '        // Storage of map keys and values\n', '        MapEntry[] _entries;\n', '\n', '        // Position of the entry defined by a key in the `entries` array, plus 1\n', '        // because index 0 means a key is not in the map.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n', '            map._entries.push(MapEntry({ _key: key, _value: value }));\n', '            // The entry is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            map._indexes[key] = map._entries.length;\n', '            return true;\n', '        } else {\n', '            map._entries[keyIndex - 1]._value = value;\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a key-value pair from a map. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function _remove(Map storage map, bytes32 key) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex != 0) { // Equivalent to contains(map, key)\n', '            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n', "            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = keyIndex - 1;\n', '            uint256 lastIndex = map._entries.length - 1;\n', '\n', '            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            MapEntry storage lastEntry = map._entries[lastIndex];\n', '\n', '            // Move the last entry to the index where the entry to delete is\n', '            map._entries[toDeleteIndex] = lastEntry;\n', '            // Update the index for the moved entry\n', '            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved entry was stored\n', '            map._entries.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete map._indexes[key];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n', '        return map._indexes[key] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of key-value pairs in the map. O(1).\n', '     */\n', '    function _length(Map storage map) private view returns (uint256) {\n', '        return map._entries.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of entries inside the\n', '    * array, and it may change when more entries are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n', '        require(map._entries.length > index, "EnumerableMap: index out of bounds");\n', '\n', '        MapEntry storage entry = map._entries[index];\n', '        return (entry._key, entry._value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n', '        return _get(map, key, "EnumerableMap: nonexistent key");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    // UintToAddressMap\n', '\n', '    struct UintToAddressMap {\n', '        Map _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n', '        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(UintToAddressMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (uint256(key), address(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key))));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        uint256 index = digits - 1;\n', '        temp = value;\n', '        while (temp != 0) {\n', '            buffer[index--] = byte(uint8(48 + temp % 10));\n', '            temp /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721UpgradeSafe is Initializable, ContextUpgradeSafe, ERC165UpgradeSafe, IERC721, IERC721Metadata, IERC721Enumerable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '    using Strings for uint256;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from holder address to their (enumerable) set of owned tokens\n', '    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n', '\n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _tokenOwners;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Optional mapping for token URIs\n', '    mapping(uint256 => string) private _tokenURIs;\n', '\n', '    // Base URI\n', '    string private _baseURI;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '\n', '    function __ERC721_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC165_init_unchained();\n', '        __ERC721_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC721_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner address to query the balance of\n', '     * @return uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _holderTokens[owner].length();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the owner of the specified token ID.\n', '     * @param tokenId uint256 ID of the token to query the owner of\n', '     * @return address currently marked as the owner of the given token ID\n', '     */\n', '    function ownerOf(uint256 tokenId) public view override returns (address) {\n', '        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token name.\n', '     * @return string representing the token name\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token symbol.\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the URI for a given token ID. May return an empty string.\n', '     *\n', '     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\n', "     * token's own URI (via {_setTokenURI}).\n", '     *\n', "     * If there is a base URI but no token URI, the token's ID will be used as\n", '     * its URI when appending it to the base URI. This pattern for autogenerated\n', '     * token URIs can lead to large gas savings.\n', '     *\n', '     * .Examples\n', '     * |===\n', '     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\n', '     * | ""\n', '     * | ""\n', '     * | ""\n', '     * | ""\n', '     * | "token.uri/123"\n', '     * | "token.uri/123"\n', '     * | "token.uri/"\n', '     * | "123"\n', '     * | "token.uri/123"\n', '     * | "token.uri/"\n', '     * | ""\n', '     * | "token.uri/<tokenId>"\n', '     * |===\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        string memory _tokenURI = _tokenURIs[tokenId];\n', '\n', '        // If there is no base URI, return the token URI.\n', '        if (bytes(_baseURI).length == 0) {\n', '            return _tokenURI;\n', '        }\n', '        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n', '        if (bytes(_tokenURI).length > 0) {\n', '            return string(abi.encodePacked(_baseURI, _tokenURI));\n', '        }\n', '        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n', '        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the base URI set via {_setBaseURI}. This will be\n', "    * automatically added as a prefix in {tokenURI} to each token's URI, or\n", '    * to the token ID if no specific URI is set for that token ID.\n', '    */\n', '    function baseURI() public view returns (string memory) {\n', '        return _baseURI;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n', '     * @param owner address owning the tokens list to be accessed\n', '     * @param index uint256 representing the index to be accessed of the requested tokens list\n', '     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _holderTokens[owner].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the total amount of tokens stored by the contract.\n', '     * @return uint256 representing the total amount of tokens\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n', '        return _tokenOwners.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of all the tokens in this contract\n', '     * Reverts if the index is greater or equal to the total number of tokens.\n', '     * @param index uint256 representing the index to be accessed of the tokens list\n', '     * @return uint256 token ID at the given index of the tokens list\n', '     */\n', '    function tokenByIndex(uint256 index) public view override returns (uint256) {\n', '        (uint256 tokenId, ) = _tokenOwners.at(index);\n', '        return tokenId;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves another address to transfer the given token ID\n', '     * The zero address indicates there is no approved address.\n', '     * There can only be one approved address per token at a given time.\n', '     * Can only be called by the token owner or an approved operator.\n', '     * @param to address to be approved for the given token ID\n', '     * @param tokenId uint256 ID of the token to be approved\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the approved address for a token ID, or zero if no address set\n', '     * Reverts if the token ID does not exist.\n', '     * @param tokenId uint256 ID of the token to query the approval of\n', '     * @return address currently approved for the given token ID\n', '     */\n', '    function getApproved(uint256 tokenId) public view override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Sets or unsets the approval of a given operator\n', '     * An operator is allowed to transfer all tokens of the sender on their behalf.\n', '     * @param operator operator address to set the approval\n', '     * @param approved representing the status of the approval to be set\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev Tells whether an operator is approved by a given owner.\n', '     * @param owner owner address which you want to query the approval of\n', '     * @param operator operator address which you want to query the approval of\n', '     * @return bool whether the given operator is approved by the given owner\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the ownership of a given token ID to another address.\n', '     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     * Requires the msg.sender to be the owner, approved, or operator.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the msg.sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the _msgSender() to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the msg.sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the specified token exists.\n', '     * @param tokenId uint256 ID of the token to query the existence of\n', '     * @return bool whether the token exists\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _tokenOwners.contains(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the given spender can transfer a given token ID.\n', '     * @param spender address of the spender to query\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @return bool whether the msg.sender is approved for the given token ID,\n', '     * is an operator of the owner, or is the owner of the token\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to safely mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to safely mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to burn a specific token.\n', '     * Reverts if the token does not exist.\n', '     * @param tokenId uint256 ID of the token being burned\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '            delete _tokenURIs[tokenId];\n', '        }\n', '\n', '        _holderTokens[owner].remove(tokenId);\n', '\n', '        _tokenOwners.remove(tokenId);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to transfer ownership of a given token ID to another address.\n', '     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[from].remove(tokenId);\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the token URI for a given token.\n', '     *\n', '     * Reverts if the token ID does not exist.\n', '     *\n', '     * TIP: If all token IDs share a prefix (for example, if your URIs look like\n', '     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\n', '     * it and save gas.\n', '     */\n', '    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = _tokenURI;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the base URI for all token IDs. It is\n', '     * automatically added as a prefix to the value returned in {tokenURI},\n', '     * or to the token ID if {tokenURI} is empty.\n', '     */\n', '    function _setBaseURI(string memory baseURI_) internal virtual {\n', '        _baseURI = baseURI_;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ));\n', '        if (!success) {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert("ERC721: transfer to non ERC721Receiver implementer");\n', '            }\n', '        } else {\n', '            bytes4 retval = abi.decode(returndata, (bytes4));\n', '            return (retval == _ERC721_RECEIVED);\n', '        }\n', '    }\n', '\n', '    function _approve(address to, uint256 tokenId) private {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - when `from` is zero, `tokenId` will be minted for `to`.\n', "     * - when `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '\n', '    uint256[41] private __gap;\n', '}\n', '\n', '// File: contracts/core/IBaseContract.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IBaseContract is IERC165 {\n', '  function contractName() external view returns (string memory);\n', '\n', '  function contractDescription() external view returns (string memory);\n', '\n', '  function contractUri() external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165Checker.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Library used to query support of an interface declared via {IERC165}.\n', ' *\n', ' * Note that these functions return the actual result of the query: they do not\n', ' * `revert` if an interface is not supported. It is up to the caller to decide\n', ' * what to do in these cases.\n', ' */\n', 'library ERC165Checker {\n', '    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n', '    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n', '\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports the {IERC165} interface,\n', '     */\n', '    function supportsERC165(address account) internal view returns (bool) {\n', '        // Any contract that implements ERC165 must explicitly indicate support of\n', '        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n', '        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n', '            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports the interface defined by\n', '     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n', '        // query support of both ERC165 as per the spec and support of _interfaceId\n', '        return supportsERC165(account) &&\n', '            _supportsERC165Interface(account, interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports all the interfaces defined in\n', '     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n', '     *\n', '     * Batch-querying can lead to gas savings by skipping repeated checks for\n', '     * {IERC165} support.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n', '        // query support of ERC165 itself\n', '        if (!supportsERC165(account)) {\n', '            return false;\n', '        }\n', '\n', '        // query support of each interface in _interfaceIds\n', '        for (uint256 i = 0; i < interfaceIds.length; i++) {\n', '            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        // all interfaces supported\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Query if a contract implements an interface, does not check ERC165 support\n', '     * @param account The address of the contract to query for support of an interface\n', '     * @param interfaceId The interface identifier, as specified in ERC-165\n', '     * @return true if the contract at account indicates support of the interface with\n', '     * identifier interfaceId, false otherwise\n', '     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n', '     * the behavior of this method is undefined. This precondition can be checked\n', '     * with {supportsERC165}.\n', '     * Interface identification is specified in ERC-165.\n', '     */\n', '    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n', '        // success determines whether the staticcall succeeded and result determines\n', '        // whether the contract at account indicates support of _interfaceId\n', '        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n', '\n', '        return (success && result);\n', '    }\n', '\n', '    /**\n', '     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n', '     * @param account The address of the contract to query for support of an interface\n', '     * @param interfaceId The interface identifier, as specified in ERC-165\n', '     * @return success true if the STATICCALL succeeded, false otherwise\n', '     * @return result true if the STATICCALL succeeded and the contract at account\n', '     * indicates support of the interface with identifier interfaceId, false otherwise\n', '     */\n', '    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n', '        private\n', '        view\n', '        returns (bool, bool)\n', '    {\n', '        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n', '        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n', '        if (result.length < 32) return (false, false);\n', '        return (success, abi.decode(result, (bool)));\n', '    }\n', '}\n', '\n', '// File: contracts/core/BaseContractInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library BaseContractInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant BASE_CONTRACT_INTERFACE_ID = 0x321f350b;\n', '\n', '  function supportsBaseContractInterface(IBaseContract account) internal view returns (bool) {\n', '    return address(account).supportsInterface(BASE_CONTRACT_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: contracts/core/BaseContract.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract BaseContract is Initializable, IBaseContract, ERC165UpgradeSafe {\n', '  struct ContractInfo {\n', '    string name;\n', '    string description;\n', '    string uri;\n', '  }\n', '\n', '  ContractInfo private _info;\n', '\n', '  function _initializeBaseContract(ContractInfo memory info) internal initializer {\n', '    __ERC165_init();\n', '    _registerInterface(BaseContractInterfaceSupport.BASE_CONTRACT_INTERFACE_ID);\n', '\n', '    _info = info;\n', '  }\n', '\n', '  function contractName() external override view returns (string memory) {\n', '    return _info.name;\n', '  }\n', '\n', '  function contractDescription() external override view returns (string memory) {\n', '    return _info.description;\n', '  }\n', '\n', '  function contractUri() external override view returns (string memory) {\n', '    return _info.uri;\n', '  }\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/core/consumable/IConsumable.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IConsumable is IERC165, IERC20 {\n', '  struct ConsumableAmount {\n', '    IConsumable consumable;\n', '    uint256 amount;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the symbol for the ERC20 token, which is usually a shorter\n', '   * version of the name\n', '   */\n', '  //  function symbol() external view returns (string memory);\n', '\n', '  /**\n', '   * @dev Returns the number of decimals that this consumable uses.\n', '   *\n', '   * NOTE: The standard number of decimals is 18, to match ETH\n', '   */\n', '  //  function decimals() external pure returns (uint8);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by caller.\n', '   */\n', '  function myBalance() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that caller will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {increaseAllowance}, {decreaseAllowance} or {transferFrom} are called.\n', '   */\n', '  function myAllowance(address owner) external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   */\n', '  //  function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\n', '\n', '  /**\n', '   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   */\n', '  //  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\n', '}\n', '\n', '// File: contracts/core/consumable/IConsumableProvider.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IConsumableProvider {\n', '  /**\n', '   * @dev Returns the list of provided consumables\n', '   */\n', '  function consumablesProvided() external view returns (IConsumable[] memory);\n', '\n', '  /**\n', '   * @dev Returns whether or not the given consumable is required.\n', '   */\n', '  function isProvided(IConsumable consumable) external view returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the amount of the given consumable that is required.\n', '   */\n', '  function amountProvided(IConsumable consumable) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/core/item/IArtifact.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'interface IArtifact is IERC165, IERC721, IConsumableProvider {\n', '  struct Item {\n', '    IArtifact artifact;\n', '    uint256 itemId;\n', '  }\n', '\n', '  /**\n', '   * Emitted when an item is used\n', '   *\n', '   * @param player Address of the player who used the item\n', '   * @param action Address of whatever the item was used for\n', '   * @param itemId The item that was used\n', '   */\n', '  event Used(address indexed player, address indexed action, uint256 indexed itemId);\n', '\n', '  /**\n', '   * @dev Returns the number of uses that items start with\n', '   */\n', '  function initialUses() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the number of uses left for the given item\n', '   */\n', '  function usesLeft(uint256 itemId) external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the number of uses left for all of the items in circulation\n', '   */\n', '  function totalUsesLeft() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Uses the given item for the given `action`.\n', '   *\n', '   * Emits a {Used} event.\n', '   */\n', '  function useItem(uint256 itemId, address action) external;\n', '}\n', '\n', '// File: contracts/core/item/ArtifactInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library ArtifactInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant ARTIFACT_INTERFACE_ID = 0xd3abf7f1;\n', '\n', '  function supportsArtifactInterface(IArtifact artifact) internal view returns (bool) {\n', '    return address(artifact).supportsInterface(ARTIFACT_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '// File: contracts/core/consumable/ConsumableInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library ConsumableInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant CONSUMABLE_INTERFACE_ID = 0x0d6673db;\n', '\n', '  function supportsConsumableInterface(IConsumable account) internal view returns (bool) {\n', '    return address(account).supportsInterface(CONSUMABLE_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: contracts/core/consumable/ConsumableProvider.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ConsumableProvider is IConsumableProvider {\n', '  using SafeMath for uint256;\n', '  using ConsumableInterfaceSupport for IConsumable;\n', '\n', '  mapping(address => uint256) private _amountsToProvide;\n', '  IConsumable[] private _consumablesToProvide;\n', '\n', '  function _initializeConsumableProvider(IConsumable.ConsumableAmount[] memory amountsToProvide) internal {\n', '    for (uint256 consumableIndex = 0; consumableIndex < amountsToProvide.length; consumableIndex++) {\n', '      IConsumable.ConsumableAmount memory amountToProvide = amountsToProvide[consumableIndex];\n', '      IConsumable consumable = IConsumable(amountToProvide.consumable);\n', "      require(consumable.supportsConsumableInterface(), 'Provider: Consumable must support interface');\n", '\n', '      if (amountToProvide.amount > 0) {\n', '        _amountsToProvide[address(consumable)] = amountToProvide.amount;\n', '        _consumablesToProvide.push(consumable);\n', '      }\n', '    }\n', '  }\n', '\n', '  function consumablesProvided() external override view returns (IConsumable[] memory) {\n', '    return _consumablesToProvide;\n', '  }\n', '\n', '  function isProvided(IConsumable consumable) external override view returns (bool) {\n', '    return _amountsToProvide[address(consumable)] > 0;\n', '  }\n', '\n', '  function amountProvided(IConsumable consumable) external override view returns (uint256) {\n', '    return _amountsToProvide[address(consumable)];\n', '  }\n', '\n', '  function _canProvideMultiple(uint256 howMany) internal view returns (bool) {\n', '    if (howMany == 0) {\n', '      return true;\n', '    }\n', '\n', '    for (uint256 consumableIndex = 0; consumableIndex < _consumablesToProvide.length; consumableIndex++) {\n', '      IConsumable consumable = _consumablesToProvide[consumableIndex];\n', '\n', '      uint256 amountOwned = consumable.balanceOf(address(this));\n', '      uint256 totalAmountToProvide;\n', '      if (howMany > 1) {\n', '        totalAmountToProvide = _amountsToProvide[address(consumable)].mul(howMany);\n', '      } else {\n', '        totalAmountToProvide = _amountsToProvide[address(consumable)];\n', '      }\n', '\n', '      if (totalAmountToProvide > amountOwned) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function _provideConsumables(address consumer) internal virtual {\n', "    require(_canProvideMultiple(1), 'Provider: Not enough consumable to provide');\n", '\n', '    for (uint256 consumableIndex = 0; consumableIndex < _consumablesToProvide.length; consumableIndex++) {\n', '      IConsumable consumable = _consumablesToProvide[consumableIndex];\n', '\n', '      // could fail if not enough resources\n', '      ERC20UpgradeSafe token = ERC20UpgradeSafe(address(consumable));\n', '      bool success = token.increaseAllowance(consumer, _amountsToProvide[address(consumable)]);\n', "      require(success, 'Provider: Consumable failed to transfer');\n", '\n', '      // enhance: limit the amount transferred for each consumable based on the activity amount\n', '    }\n', '  }\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/core/consumable/ConsumableProviderInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library ConsumableProviderInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant CONSUMABLE_PROVIDER_INTERFACE_ID = 0x63d9fe18;\n', '\n', '  function supportsConsumableProviderInterface(IConsumableProvider provider) internal view returns (bool) {\n', '    return address(provider).supportsInterface(CONSUMABLE_PROVIDER_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: contracts/core/IDisableable.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IDisableable {\n', '  /**\n', '   * Emitted when the contract is disabled\n', '   */\n', '  event Disabled();\n', '\n', '  /**\n', '   * Emitted when the contract is enabled\n', '   */\n', '  event Enabled();\n', '\n', '  /**\n', '   * @dev Returns whether or not the contract is disabled\n', '   */\n', '  function disabled() external view returns (bool);\n', '\n', '  /**\n', '   * @dev Returns whether or not the contract is enabled\n', '   */\n', '  function enabled() external view returns (bool);\n', '\n', '  modifier onlyEnabled() virtual {\n', "    require(!this.disabled(), 'Contract is disabled');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Disables the contract\n', '   */\n', '  function disable() external;\n', '\n', '  /**\n', '   * @dev Enables the contract\n', '   */\n', '  function enable() external;\n', '}\n', '\n', '// File: contracts/core/transfer/TransferringInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'library TransferringInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant TRANSFERRING_INTERFACE_ID = 0x6fafa3a8;\n', '\n', '  function supportsTransferInterface(address account) internal view returns (bool) {\n', '    return account.supportsInterface(TRANSFERRING_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: contracts/core/consumable/IConvertibleConsumable.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IConvertibleConsumable is IConsumable {\n', '  /**\n', '   * @dev the token that can be exchanged to/from\n', '   */\n', '  function exchangeToken() external view returns (IERC20);\n', '\n', '  /**\n', '   * @dev whether or not this consumable has a different purchase price than intrinsic value\n', '   */\n', '  function asymmetricalExchangeRate() external view returns (bool);\n', '\n', '  /**\n', '   * @dev the amount of this consumable needed to convert to 1 of `exchangeToken`\n', '   *\n', '   * eg if `intrinsicValueExchangeRate` is 1000, then 1000 this --> 1 `conversionToken`\n', '   */\n', '  function intrinsicValueExchangeRate() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev the amount that 1 of `exchangeToken` will convert into this consumable\n', '   *\n', '   * eg if `purchasePriceExchangeRate` is 1000, then 1 `conversionToken` --> 1000 this\n', '   */\n', '  function purchasePriceExchangeRate() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev amount of exchange token available, given total supply\n', '   */\n', '  function amountExchangeTokenAvailable() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev mint `consumableAmount` tokens by converting from `exchangeToken`\n', '   */\n', '  function mintByExchange(uint256 consumableAmount) external;\n', '\n', '  /**\n', '   * @dev amount of exchange token needed to mint the given amount of consumable\n', '   */\n', '  function amountExchangeTokenNeeded(uint256 consumableAmount) external view returns (uint256);\n', '\n', '  /**\n', '   * @dev burn `consumableAmount` tokens by converting to `exchangeToken`\n', '   */\n', '  function burnByExchange(uint256 consumableAmount) external;\n', '\n', '  /**\n', '   * @dev amount of exchange token provided by burning the given amount of consumable\n', '   */\n', '  function amountExchangeTokenProvided(uint256 consumableAmount) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/core/consumable/ConvertibleConsumableInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library ConvertibleConsumableInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant CONVERTIBLE_CONSUMABLE_INTERFACE_ID = 0x1574139e;\n', '\n', '  function supportsConvertibleConsumableInterface(IConvertibleConsumable consumable) internal view returns (bool) {\n', '    return address(consumable).supportsInterface(CONVERTIBLE_CONSUMABLE_INTERFACE_ID);\n', '  }\n', '\n', '  function calcConvertibleConsumableInterfaceId(IConvertibleConsumable consumable) internal pure returns (bytes4) {\n', '    return\n', '      consumable.exchangeToken.selector ^\n', '      consumable.asymmetricalExchangeRate.selector ^\n', '      consumable.intrinsicValueExchangeRate.selector ^\n', '      consumable.purchasePriceExchangeRate.selector ^\n', '      consumable.amountExchangeTokenAvailable.selector ^\n', '      consumable.mintByExchange.selector ^\n', '      consumable.amountExchangeTokenNeeded.selector ^\n', '      consumable.burnByExchange.selector ^\n', '      consumable.amountExchangeTokenProvided.selector;\n', '  }\n', '}\n', '\n', '// File: contracts/core/transfer/TransferLogic.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TransferLogic {\n', '  using ConvertibleConsumableInterfaceSupport for IConvertibleConsumable;\n', '\n', '  function transferToken(\n', '    address, /*account*/\n', '    IERC20 token,\n', '    uint256 amount,\n', '    address recipient\n', '  ) internal {\n', '    token.transfer(recipient, amount);\n', '  }\n', '\n', '  function transferTokenWithExchange(\n', '    address account,\n', '    IERC20 token,\n', '    uint256 amount,\n', '    address recipient\n', '  ) internal {\n', '    uint256 myBalance = token.balanceOf(account);\n', '    if (myBalance < amount && IConvertibleConsumable(address(token)).supportsConvertibleConsumableInterface()) {\n', "      // increase allowance as needed, but only if it's a convertible consumable\n", '      IConvertibleConsumable convertibleConsumable = IConvertibleConsumable(address(token));\n', '\n', '      uint256 amountConsumableNeeded = amount - myBalance; // safe since we checked < above\n', '      uint256 amountExchangeToken = convertibleConsumable.amountExchangeTokenNeeded(amountConsumableNeeded);\n', '\n', '      ERC20UpgradeSafe exchange = ERC20UpgradeSafe(address(convertibleConsumable.exchangeToken()));\n', '      exchange.increaseAllowance(address(token), amountExchangeToken);\n', '    }\n', '\n', '    token.transfer(recipient, amount);\n', '  }\n', '\n', '  function transferItem(\n', '    address account,\n', '    IERC721 artifact,\n', '    uint256 itemId,\n', '    address recipient\n', '  ) internal {\n', '    artifact.safeTransferFrom(account, recipient, itemId);\n', '  }\n', '\n', '  function onERC721Received(\n', '    address, /*operator*/\n', '    address, /*from*/\n', '    uint256, /*tokenId*/\n', '    bytes memory /*data*/\n', '  ) internal pure returns (bytes4) {\n', '    return IERC721Receiver.onERC721Received.selector;\n', '  }\n', '}\n', '\n', '// File: contracts/core/transfer/ITransferring.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'interface ITransferring is IERC165, IERC721Receiver {\n', '  /**\n', '   * @dev Transfer the given amount of an ERC20 token to the given recipient address.\n', '   */\n', '  function transferToken(\n', '    IERC20 token,\n', '    uint256 amount,\n', '    address recipient\n', '  ) external;\n', '\n', '  /**\n', '   * @dev Transfer the given item of an ERC721 token to the given recipient address.\n', '   */\n', '  function transferItem(\n', '    IERC721 artifact,\n', '    uint256 itemId,\n', '    address recipient\n', '  ) external;\n', '}\n', '\n', '// File: contracts/core/item/Artifact.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract Artifact is\n', '  IDisableable,\n', '  Initializable,\n', '  ContextUpgradeSafe,\n', '  ITransferring,\n', '  ERC165UpgradeSafe,\n', '  IArtifact,\n', '  BaseContract,\n', '  ConsumableProvider,\n', '  ERC721UpgradeSafe\n', '{\n', '  using TransferLogic for address;\n', '\n', '  uint256 private _initialUses;\n', '\n', '  mapping(uint256 => uint256) private _usesLeft;\n', '  uint256 private _totalUsesLeft;\n', '\n', '  function _initializeArtifact(\n', '    ContractInfo memory info,\n', '    string memory baseUri,\n', '    string memory symbol,\n', '    IConsumable.ConsumableAmount[] memory amountsToProvide,\n', '    uint256 initialUses\n', '  ) internal initializer {\n', '    _initializeBaseContract(info);\n', '    _initializeConsumableProvider(amountsToProvide);\n', '    _registerInterface(ArtifactInterfaceSupport.ARTIFACT_INTERFACE_ID);\n', '    _registerInterface(ConsumableProviderInterfaceSupport.CONSUMABLE_PROVIDER_INTERFACE_ID);\n', '\n', '    __ERC721_init(info.name, symbol);\n', '    _registerInterface(TransferringInterfaceSupport.TRANSFERRING_INTERFACE_ID);\n', '    _setBaseURI(baseUri);\n', '\n', '    _initialUses = initialUses;\n', '  }\n', '\n', '  function initialUses() external override view returns (uint256) {\n', '    return _initialUses;\n', '  }\n', '\n', '  function usesLeft(uint256 itemId) external override view returns (uint256) {\n', '    return _usesLeft[itemId];\n', '  }\n', '\n', '  function totalUsesLeft() external override view returns (uint256) {\n', '    return _totalUsesLeft;\n', '  }\n', '\n', '  function useItem(uint256 itemId, address action) external override onlyEnabled {\n', '    address sender = _msgSender();\n', '    address player = ownerOf(itemId);\n', '\n', "    require(sender == player, 'Artifact: must be used by the owner');\n", '\n', "    _usesLeft[itemId] = _usesLeft[itemId].sub(1, 'Artifact: no uses left for item');\n", '    _totalUsesLeft = _totalUsesLeft.sub(1);\n', '\n', '    _provideConsumables(action);\n', '\n', '    emit Used(player, action, itemId);\n', '  }\n', '\n', '  function _mint(address to, uint256 itemId) internal override onlyEnabled {\n', '    super._mint(to, itemId);\n', '\n', '    _usesLeft[itemId] = _initialUses;\n', '    _totalUsesLeft += _initialUses;\n', '\n', '    _checkEnoughConsumable();\n', '  }\n', '\n', '  function _checkEnoughConsumable() internal {\n', "    require(_canProvideMultiple(_totalUsesLeft), 'Artifact: not enough consumable for items');\n", '  }\n', '\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes calldata data\n', '  ) external virtual override returns (bytes4) {\n', '    return TransferLogic.onERC721Received(operator, from, tokenId, data);\n', '  }\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/core/access/IRoleDelegate.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IRoleDelegate {\n', '  /**\n', '   * @dev Returns `true` if `account` has been granted `role`.\n', '   */\n', '  function isInRole(bytes32 role, address account) external view returns (bool);\n', '}\n', '\n', '// File: contracts/core/access/RoleDelegateInterfaceSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library RoleDelegateInterfaceSupport {\n', '  using ERC165Checker for address;\n', '\n', '  bytes4 internal constant ROLE_DELEGATE_INTERFACE_ID = 0x7cef57ea;\n', '\n', '  function supportsRoleDelegateInterface(IRoleDelegate roleDelegate) internal view returns (bool) {\n', '    return address(roleDelegate).supportsInterface(ROLE_DELEGATE_INTERFACE_ID);\n', '  }\n', '}\n', '\n', '// File: contracts/core/access/RoleSupport.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library RoleSupport {\n', '  bytes32 public constant SUPER_ADMIN_ROLE = 0x00;\n', "  bytes32 public constant MINTER_ROLE = keccak256('Minter');\n", "  bytes32 public constant ADMIN_ROLE = keccak256('Admin');\n", "  bytes32 public constant TRANSFER_AGENT_ROLE = keccak256('Transfer');\n", '}\n', '\n', '// File: contracts/core/access/DelegatingRoles.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DelegatingRoles is Initializable, ContextUpgradeSafe {\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '  using RoleDelegateInterfaceSupport for IRoleDelegate;\n', '\n', '  EnumerableSet.AddressSet private _roleDelegates;\n', '\n', '  function isRoleDelegate(IRoleDelegate roleDelegate) public view returns (bool) {\n', '    return _roleDelegates.contains(address(roleDelegate));\n', '  }\n', '\n', '  /**\n', '   * @dev Adds the given role delegate\n', '   */\n', '  function _addRoleDelegate(IRoleDelegate roleDelegate) internal {\n', "    require(address(roleDelegate) != address(0), 'Role delegate cannot be zero address');\n", "    require(roleDelegate.supportsRoleDelegateInterface(), 'Role delegate must implement interface');\n", '\n', '    _roleDelegates.add(address(roleDelegate));\n', '    emit RoleDelegateAdded(roleDelegate);\n', '  }\n', '\n', '  /**\n', '   * @dev Removes the given role delegate\n', '   */\n', '  function _removeRoleDelegate(IRoleDelegate roleDelegate) internal {\n', '    _roleDelegates.remove(address(roleDelegate));\n', '    emit RoleDelegateRemoved(roleDelegate);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns `true` if `account` has been granted `role`.\n', '   */\n', '  function _hasRole(bytes32 role, address account) internal virtual view returns (bool) {\n', '    uint256 roleDelegateLength = _roleDelegates.length();\n', '    for (uint256 roleDelegateIndex = 0; roleDelegateIndex < roleDelegateLength; roleDelegateIndex++) {\n', '      IRoleDelegate roleDelegate = IRoleDelegate(_roleDelegates.at(roleDelegateIndex));\n', '      if (roleDelegate.isInRole(role, account)) {\n', '        return true;\n', '      }\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  // Admin\n', '  modifier onlyAdmin() {\n', "    require(isAdmin(_msgSender()), 'Caller does not have the Admin role');\n", '    _;\n', '  }\n', '\n', '  function isAdmin(address account) public view returns (bool) {\n', '    return _hasRole(RoleSupport.ADMIN_ROLE, account);\n', '  }\n', '\n', '  // Minter\n', '  modifier onlyMinter() {\n', "    require(isMinter(_msgSender()), 'Caller does not have the Minter role');\n", '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return _hasRole(RoleSupport.MINTER_ROLE, account);\n', '  }\n', '\n', '  // Transfer Agent\n', '  modifier onlyTransferAgent() {\n', "    require(isTransferAgent(_msgSender()), 'Caller does not have the Transfer Agent role');\n", '    _;\n', '  }\n', '\n', '  function isTransferAgent(address account) public view returns (bool) {\n', '    return _hasRole(RoleSupport.TRANSFER_AGENT_ROLE, account);\n', '  }\n', '\n', '  /**\n', '   * @dev Emitted when `roleDelegated` is added.\n', '   */\n', '  event RoleDelegateAdded(IRoleDelegate indexed roleDelegate);\n', '\n', '  /**\n', '   * @dev Emitted when `roleDelegated` is removed.\n', '   */\n', '  event RoleDelegateRemoved(IRoleDelegate indexed roleDelegate);\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/core/Disableable.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'abstract contract Disableable is IDisableable {\n', '  bool private _disabled;\n', '\n', '  function disabled() external override view returns (bool) {\n', '    return _disabled;\n', '  }\n', '\n', '  function enabled() external override view returns (bool) {\n', '    return !_disabled;\n', '  }\n', '\n', '  /**\n', '   * @dev Disables the contract\n', '   */\n', '  function _disable() internal {\n', '    if (_disabled) {\n', '      return;\n', '    }\n', '\n', '    _disabled = true;\n', '    emit Disabled();\n', '  }\n', '\n', '  /**\n', '   * @dev Enables the contract\n', '   */\n', '  function _enable() internal {\n', '    if (!_disabled) {\n', '      return;\n', '    }\n', '\n', '    _disabled = false;\n', '    emit Enabled();\n', '  }\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/core/item/ConfigurableArtifact.sol\n', '\n', '/*\n', ' * Copyright (c) 2020 The Paypr Company, LLC\n', ' *\n', ' * This file is part of Paypr Ethereum Contracts.\n', ' *\n', ' * Paypr Ethereum Contracts is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * Paypr Ethereum Contracts is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with Paypr Ethereum Contracts.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ConfigurableArtifact is Initializable, ContextUpgradeSafe, Artifact, Disableable, DelegatingRoles {\n', '  using TransferLogic for address;\n', '\n', '  using Counters for Counters.Counter;\n', '\n', '  Counters.Counter private _lastItemId;\n', '\n', '  function initializeArtifact(\n', '    ContractInfo memory info,\n', '    string memory baseUri,\n', '    string memory symbol,\n', '    IConsumable.ConsumableAmount[] memory amountsToProvide,\n', '    uint256 initialUses,\n', '    IRoleDelegate roleDelegate\n', '  ) public initializer {\n', '    _initializeArtifact(info, baseUri, symbol, amountsToProvide, initialUses);\n', '\n', '    _addRoleDelegate(roleDelegate);\n', '  }\n', '\n', '  function mint(address to) external onlyMinter returns (uint256) {\n', '    _lastItemId.increment();\n', '    uint256 itemId = _lastItemId.current();\n', '\n', '    _mint(to, itemId);\n', '\n', '    return itemId;\n', '  }\n', '\n', '  function transferToken(\n', '    IERC20 token,\n', '    uint256 amount,\n', '    address recipient\n', '  ) external override onlyTransferAgent onlyEnabled {\n', '    address(this).transferToken(token, amount, recipient);\n', '    _checkEnoughConsumable();\n', '  }\n', '\n', '  function transferItem(\n', '    IERC721 artifact,\n', '    uint256 itemId,\n', '    address recipient\n', '  ) external override onlyTransferAgent onlyEnabled {\n', '    address(this).transferItem(artifact, itemId, recipient);\n', '  }\n', '\n', '  function disable() external override onlyAdmin {\n', '    _disable();\n', '  }\n', '\n', '  function enable() external override onlyAdmin {\n', '    _enable();\n', '  }\n', '}']