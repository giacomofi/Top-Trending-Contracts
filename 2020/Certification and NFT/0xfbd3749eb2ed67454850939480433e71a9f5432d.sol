['// SPDX-License-Identifier: MIT\n', '\n', '/*\n', '   ____  ____  ______   _____                           \n', '   / __ \\/ __ \\/_  __/  / __(_)___  ____ _____  ________ \n', '  / /_/ / / / / / /    / /_/ / __ \\/ __ `/ __ \\/ ___/ _ \\\n', ' / ____/ /_/ / / /    / __/ / / / / /_/ / / / / /__/  __/\n', '/_/    \\____/ /_/    /_/ /_/_/ /_/\\__,_/_/ /_/\\___/\\___/ \n', '\n', '* POT.Finance: ChefMao.sol\n', '* The first Admin contract for YuanYangPot\n', '*\n', '*/\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap\\lib\\contracts\\libraries\\FixedPoint.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// File: @uniswap\\v2-periphery\\contracts\\libraries\\UniswapV2OracleLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\IYuanYangPot.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Interface of the YuanYangPot.\n', ' */\n', 'interface IYuanYangPot {\n', '\t/**\n', '\t * @dev Hotpot Base created per block\n', '\t */\n', '\tfunction hotpotBasePerBlock() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev The Hotpot Base Token\n', '\t */\n', '\tfunction hotpotBaseTotalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev The block number when Hotpot mining starts.\n', '\t */\n', '\tfunction startBlock() external view returns (uint256);\n', '\t\n', '\t/**\n', '\t * @dev Update reward vairables for all pools.\n', '\t */\n', '\tfunction massUpdatePools() external;\n', '\n', '\t/**\n', '\t * @dev Update the Hotpot Base distribution speed.\n', '\t */\n', '\tfunction setHotpotBasePerBlock(uint256 _hotpotBasePerBlock) external;\n', '\n', '\t/**\n', '\t * @dev Update the distributio share of RED soups; WHITE share = 100% - RED share\n', '\t */\n', '\tfunction setRedPotShare(uint256 _redPotShare) external;\n', '\n', '\t/**\n', '\t * @dev Update if HotPot is in Circuit Breaker mode. Reward claims are suspended during CB\n', '\t */\n', '\tfunction setCircuitBreaker(bool _isInCircuitBreaker) external;\n', '\n', '\t/**\n', '\t * @dev Add a new lp to the pool.\n', '\t * XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '\t */\n', '\tfunction addPool(\n', '\t\tuint256 _allocPoint,\n', '\t\tIERC20 _lpToken,\n', '\t\tbool _isRed,\n', '\t\tbool _withUpdate\n', '\t) external;\n', '\n', '\t/**\n', "\t * @dev Update the given pool's Hotpot allocation point.\n", '\t */\n', '\tfunction setPool(\n', '\t\tuint256 _pid,\n', '\t\tuint256 _allocPoint,\n', '\t\tbool _withUpdate\n', '\t) external;\n', '\n', '\t/**\n', '\t * @dev Update the tip rate on reward distribution.\n', '\t */\n', '\tfunction setTipRate(uint256 _tipRate) external;\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the pot to a new account (`newOwner`).\n', '\t */\n', '\tfunction transferPotOwnership(address newOwner) external;\n', '}\n', '\n', '// File: contracts\\ChefMao.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract ChefMao {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmodifier onlyGov() {\n', "\t\trequire(msg.sender == gov, 'onlyGov: caller is not gov');\n", '\t\t_;\n', '\t}\n', '\t// an event emitted when deviationThreshold is changed\n', '\tevent NewDeviationThreshold(uint256 oldDeviationThreshold, uint256 newDeviationThreshold);\n', '\n', '\t// an event emitted when deviationMovement is changed\n', '\tevent NewDeviationMovement(uint256 oldDeviationMovement, uint256 newDeviationMovement);\n', '\n', '\t// Event emitted when pendingGov is changed\n', '\tevent NewPendingGov(address oldPendingGov, address newPendingGov);\n', '\n', '\t// Event emitted when gov is changed\n', '\tevent NewGov(address oldGov, address newGov);\n', '\n', '\t// Governance address\n', '\taddress public gov;\n', '\n', '\t// Pending Governance address\n', '\taddress public pendingGov;\n', '\n', '\t// Peg target\n', '\tuint256 public targetPrice;\n', '\n', '\t// POT Tokens created per block at inception.\n', "\t// POT's inflation will eventually be governed by targetStock2Flow.\n", '\tuint256 public farmHotpotBasePerBlock;\n', '\n', '\t// Halving period for Hotpot Base per block, in blocks.\n', '\tuint256 public halfLife = 88888;\n', '\n', '\t// targetTokenPerBlock = totalSupply / (targetStock2Flow * 2,400,000)\n', "\t// 2,400,000 is ~1-year's ETH block count as of Sep 2020\n", "\t// See @100trillionUSD's article below on Scarcity and S2F:\n", '\t// https://medium.com/@100trillionUSD/modeling-bitcoins-value-with-scarcity-91fa0fc03e25\n', '\t//\n', '\t// Ganularity of targetStock2Flow is intentionally restricted.\n', '\tuint256 public targetStock2Flow = 10; // ~10% p.a. target inflation;\n', '\n', '\t// If the current price is within this fractional distance from the target, no supply\n', '\t// update is performed. Fixed point number--same format as the price.\n', '\t// (ie) abs(price - targetPrice) / targetPrice < deviationThreshold, then no supply change.\n', '\tuint256 public deviationThreshold = 5e16; // 5%\n', '\n', '\tuint256 public deviationMovement = 5e16; // 5%\n', '\n', '\t// More than this much time must pass between rebase operations.\n', '\tuint256 public minRebaseTimeIntervalSec = 24 hours;\n', '\n', '\t// Block timestamp of last rebase operation\n', '\tuint256 public lastRebaseTimestamp;\n', '\n', '\t// The rebase window begins this many seconds into the minRebaseTimeInterval period.\n', '\t// For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\n', '\tuint256 public rebaseWindowOffsetSec = 28800; // 8am/8pm UTC rebases\n', '\n', '\t// The length of the time window where a rebase operation is allowed to execute, in seconds.\n', '\tuint256 public rebaseWindowLengthSec = 3600; // 60 minutes\n', '\n', '\t// The number of rebase cycles since inception\n', '\tuint256 public epoch;\n', '\n', '\t// The number of halvings since inception\n', '\tuint256 public halvingCounter;\n', '\n', '\t// The number of consecutive upward threshold breaching when rebasing.\n', '\tuint256 public upwardCounter;\n', '\n', '\t// The number of consecutive downward threshold breaching when rebasing.\n', '\tuint256 public downwardCounter;\n', '\n', '\tuint256 public retargetThreshold = 2; // 2 days\n', '\n', '\t// rebasing is not active initially. It can be activated at T+12 hours from\n', '\t// deployment time\n', '\n', '\t// boolean showing rebase activation status\n', '\tbool public rebasingActive;\n', '\n', '\t// delays rebasing activation to facilitate liquidity\n', '\tuint256 public constant rebaseDelay = 12 hours;\n', '\n', '\t// Time of TWAP initialization\n', '\tuint256 public timeOfTwapInit;\n', '\n', '\t// pair for reserveToken <> POT\n', '\taddress public uniswapPair;\n', '\n', '\t// last TWAP update time\n', '\tuint32 public blockTimestampLast;\n', '\n', '\t// last TWAP cumulative price;\n', '\tuint256 public priceCumulativeLast;\n', '\n', '\t// Whether or not this token is first in uniswap POT<>Reserve pair\n', '\t// address of USDT:\n', '\t// address of POT:\n', '\tbool public isToken0 = true;\n', '\n', '\tIYuanYangPot public masterPot;\n', '\n', '\tconstructor(\n', '\t\tIYuanYangPot _masterPot,\n', '\t\taddress _uniswapPair,\n', '\t\taddress _gov,\n', '\t\tuint256 _targetPrice,\n', '\t\tbool _isToken0\n', '\t) public {\n', '\t\tmasterPot = _masterPot;\n', '\t\tfarmHotpotBasePerBlock = masterPot.hotpotBasePerBlock();\n', '\t\tuniswapPair = _uniswapPair;\n', '\t\tgov = _gov;\n', '\t\ttargetPrice = _targetPrice;\n', '\t\tisToken0 = _isToken0;\n', '\t}\n', '\n', '\t// sets the pendingGov\n', '\tfunction setPendingGov(address _pendingGov) external onlyGov {\n', '\t\taddress oldPendingGov = pendingGov;\n', '\t\tpendingGov = _pendingGov;\n', '\t\temit NewPendingGov(oldPendingGov, _pendingGov);\n', '\t}\n', '\n', '\t// lets msg.sender accept governance\n', '\tfunction acceptGov() external {\n', "\t\trequire(msg.sender == pendingGov, 'acceptGov: !pending');\n", '\t\taddress oldGov = gov;\n', '\t\tgov = pendingGov;\n', '\t\tpendingGov = address(0);\n', '\t\temit NewGov(oldGov, gov);\n', '\t}\n', '\n', '\t// Initializes TWAP start point, starts countdown to first rebase\n', '\tfunction initTwap() public onlyGov {\n', "\t\trequire(timeOfTwapInit == 0, 'initTwap: already activated');\n", '\t\t(\n', '\t\t\tuint256 price0Cumulative,\n', '\t\t\tuint256 price1Cumulative,\n', '\t\t\tuint32 blockTimestamp\n', '\t\t) = UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '\t\tpriceCumulativeLast = isToken0 ? price0Cumulative : price1Cumulative;\n', "\t\trequire(priceCumulativeLast > 0, 'initTwap: no trades');\n", '\t\tblockTimestampLast = blockTimestamp;\n', '\t\ttimeOfTwapInit = blockTimestamp;\n', '\t}\n', '\n', '\t// @notice Activates rebasing\n', '\t// @dev One way function, cannot be undone, callable by anyone\n', '\tfunction activateRebasing() public {\n', "\t\trequire(timeOfTwapInit > 0, 'activateRebasing: twap wasnt intitiated, call init_twap()');\n", '\t\t// cannot enable prior to end of rebaseDelay\n', "\t\trequire(getNow() >= timeOfTwapInit + rebaseDelay, 'activateRebasing: !end_delay');\n", '\n', '\t\trebasingActive = true;\n', '\t}\n', '\n', '\t// If the latest block timestamp is within the rebase time window it, returns true.\n', '\t// Otherwise, returns false.\n', '\tfunction inRebaseWindow() public view returns (bool) {\n', '\t\t// rebasing is delayed until there is a liquid market\n', "\t\trequire(rebasingActive, 'inRebaseWindow: rebasing not active');\n", '\t\tuint256 nowTimestamp = getNow();\n', '\t\trequire(\n', '\t\t\tnowTimestamp.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec,\n', "\t\t\t'inRebaseWindow: too early'\n", '\t\t);\n', '\t\trequire(\n', '\t\t\tnowTimestamp.mod(minRebaseTimeIntervalSec) <\n', '\t\t\t\t(rebaseWindowOffsetSec.add(rebaseWindowLengthSec)),\n', "\t\t\t'inRebaseWindow: too late'\n", '\t\t);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '\t *\n', '\t * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\n', '\t *      Where DeviationFromTargetRate is (MarketOracleRate - targetPrice) / targetPrice\n', '\t *      and targetPrice is 1e18\n', '\t */\n', '\tfunction rebase() public {\n', '\t\t// no possibility of reentry as this function only invoke view functions or internal functions\n', '\t\t// or functions from master pot which also only invoke only invoke view functions or internal functions\n', '\t\t// EOA only\n', '\t\t// require(msg.sender == tx.origin);\n', '\t\t// ensure rebasing at correct time\n', '\t\tinRebaseWindow();\n', '\n', '\t\tuint256 nowTimestamp = getNow();\n', '\t\t// This comparison also ensures there is no reentrancy.\n', '\t\trequire(\n', '\t\t\tlastRebaseTimestamp.add(minRebaseTimeIntervalSec) < nowTimestamp,\n', "\t\t\t'rebase: Rebase already triggered'\n", '\t\t);\n', '\n', '\t\t// Snap the rebase time to the start of this window.\n', '\t\tlastRebaseTimestamp = nowTimestamp.sub(nowTimestamp.mod(minRebaseTimeIntervalSec)).add(\n', '\t\t\trebaseWindowOffsetSec\n', '\t\t);\n', '\n', '\t\t// no safe math required\n', '\t\tepoch++;\n', '\n', '\t\t// Get twap from uniswapv2.\n', '\t\t(uint256 priceCumulative, uint32 blockTimestamp, uint256 twap) = getCurrentTwap();\n', '\t\tpriceCumulativeLast = priceCumulative;\n', '\t\tblockTimestampLast = blockTimestamp;\n', '\n', '\t\tbool inCircuitBreaker = false;\n', '\t\t(\n', '\t\t\tuint256 newHotpotBasePerBlock,\n', '\t\t\tuint256 newFarmHotpotBasePerBlock,\n', '\t\t\tuint256 newHalvingCounter\n', '\t\t) = getNewHotpotBasePerBlock(twap);\n', '\t\tfarmHotpotBasePerBlock = newFarmHotpotBasePerBlock;\n', '\t\thalvingCounter = newHalvingCounter;\n', '\t\tuint256 newRedShare = getNewRedShare(twap);\n', '\n', '\t\t// Do a bunch of things if twap is outside of threshold.\n', '\t\tif (!withinDeviationThreshold(twap)) {\n', '\t\t\tuint256 absoluteDeviationMovement = targetPrice.mul(deviationMovement).div(1e18);\n', '\n', '\t\t\t// Calculates and sets the new target rate if twap is outside of threshold.\n', '\t\t\tif (twap > targetPrice) {\n', '\t\t\t\t// no safe math required\n', '\t\t\t\tupwardCounter++;\n', '\t\t\t\tif (downwardCounter > 0) {\n', '\t\t\t\t\tdownwardCounter = 0;\n', '\t\t\t\t}\n', '\t\t\t\t// if twap continues to go up, retargetThreshold is only effective for the first upward retarget\n', '\t\t\t\t// and every following rebase would retarget upward until twap is within deviation threshold\n', '\t\t\t\tif (upwardCounter >= retargetThreshold) {\n', '\t\t\t\t\ttargetPrice = targetPrice.add(absoluteDeviationMovement);\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\tinCircuitBreaker = true;\n', '\t\t\t\t// no safe math required\n', '\t\t\t\tdownwardCounter++;\n', '\t\t\t\tif (upwardCounter > 0) {\n', '\t\t\t\t\tupwardCounter = 0;\n', '\t\t\t\t}\n', '\t\t\t\t// if twap continues to go down, retargetThreshold is only effective for the first downward retarget\n', '\t\t\t\t// and every following rebase would retarget downward until twap is within deviation threshold\n', '\t\t\t\tif (downwardCounter >= retargetThreshold) {\n', '\t\t\t\t\ttargetPrice = targetPrice.sub(absoluteDeviationMovement);\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\tupwardCounter = 0;\n', '\t\t\tdownwardCounter = 0;\n', '\t\t}\n', '\n', '\t\tmasterPot.massUpdatePools();\n', '\t\tmasterPot.setHotpotBasePerBlock(newHotpotBasePerBlock);\n', '\t\tmasterPot.setRedPotShare(newRedShare);\n', '\t\tmasterPot.setCircuitBreaker(inCircuitBreaker);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Calculates TWAP from uniswap\n', '\t *\n', '\t * @dev When liquidity is low, this can be manipulated by an end of block -> next block\n', '\t *      attack. We delay the activation of rebases 12 hours after liquidity incentives\n', '\t *      to reduce this attack vector. Additional there is very little supply\n', '\t *      to be able to manipulate this during that time period of highest vuln.\n', '\t */\n', '\tfunction getCurrentTwap()\n', '\t\tpublic\n', '\t\tvirtual\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 priceCumulative,\n', '\t\t\tuint32 blockTimestamp,\n', '\t\t\tuint256 twap\n', '\t\t)\n', '\t{\n', '\t\t(\n', '\t\t\tuint256 price0Cumulative,\n', '\t\t\tuint256 price1Cumulative,\n', '\t\t\tuint32 blockTimestampUniswap\n', '\t\t) = UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '\t\tpriceCumulative = isToken0 ? price0Cumulative : price1Cumulative;\n', '\t\tblockTimestamp = blockTimestampUniswap;\n', '\t\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '\t\t// no period check as is done in isRebaseWindow\n', '\n', '\t\t// overflow is desired, casting never truncates\n', '\t\t// cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '\t\tFixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '\t\t\tuint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '\t\t);\n', '\t\t// 1e30 for trading pair with 6-decimal tokens. Be ultra-cautious when changing this.\n', '\t\ttwap = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1e30));\n', '\t}\n', '\n', '\t// Computes new tokenPerBlock based on price.\n', '\tfunction getNewHotpotBasePerBlock(uint256 price)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 newHotpotBasePerBlock,\n', '\t\t\tuint256 newFarmHotpotBasePerBlock,\n', '\t\t\tuint256 newHalvingCounter\n', '\t\t)\n', '\t{\n', '\t\tuint256 blockElapsed = getBlockNumber().sub(masterPot.startBlock());\n', '\t\tnewHalvingCounter = blockElapsed.div(halfLife);\n', '\t\tnewFarmHotpotBasePerBlock = farmHotpotBasePerBlock;\n', '\n', '\t\t// if new halvingCounter is larger than old one, perform halving.\n', '\t\tif (newHalvingCounter > halvingCounter) {\n', '\t\t\tnewFarmHotpotBasePerBlock = newFarmHotpotBasePerBlock.div(2);\n', '\t\t}\n', '\n', '\t\t// computes newHotpotBasePerBlock based on targetStock2Flow.\n', '\t\tnewHotpotBasePerBlock = masterPot.hotpotBaseTotalSupply().div(\n', '\t\t\ttargetStock2Flow.mul(2400000)\n', '\t\t);\n', '\n', '\t\t// use the larger of newHotpotBasePerBlock and newFarmHotpotBasePerBlock.\n', '\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock > newFarmHotpotBasePerBlock\n', '\t\t\t? newHotpotBasePerBlock\n', '\t\t\t: newFarmHotpotBasePerBlock;\n', '\n', '\t\tif (price > targetPrice) {\n', '\t\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock.mul(price).div(targetPrice);\n', '\t\t} else {\n', '\t\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock.mul(targetPrice).div(price);\n', '\t\t}\n', '\t}\n', '\n', '\t// Computes new redShare based on price.\n', '\tfunction getNewRedShare(uint256 price) public view returns (uint256) {\n', '\t\treturn uint256(1e24).div(price.mul(1e12).div(targetPrice).add(1e12));\n', '\t}\n', '\n', '\t// Check if the current price is within the deviation threshold for rebasing.\n', '\tfunction withinDeviationThreshold(uint256 price) public view returns (bool) {\n', '\t\tuint256 absoluteDeviationThreshold = targetPrice.mul(deviationThreshold).div(1e18);\n', '\t\treturn\n', '\t\t\t(price >= targetPrice && price.sub(targetPrice) < absoluteDeviationThreshold) ||\n', '\t\t\t(price < targetPrice && targetPrice.sub(price) < absoluteDeviationThreshold);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\n', '\t *         oracle is within this fractional distance from the targetPrice, then no supply\n', '\t *         modifications are made.\n', '\t * @param _deviationThreshold The new exchange rate threshold fraction.\n', '\t */\n', '\tfunction setDeviationThreshold(uint256 _deviationThreshold) external onlyGov {\n', "\t\trequire(_deviationThreshold > 0, 'deviationThreshold: too low');\n", '\t\tuint256 oldDeviationThreshold = deviationThreshold;\n', '\t\tdeviationThreshold = _deviationThreshold;\n', '\t\temit NewDeviationThreshold(oldDeviationThreshold, _deviationThreshold);\n', '\t}\n', '\n', '\tfunction setDeviationMovement(uint256 _deviationMovement) external onlyGov {\n', "\t\trequire(_deviationMovement > 0, 'deviationMovement: too low');\n", '\t\tuint256 oldDeviationMovement = deviationMovement;\n', '\t\tdeviationMovement = _deviationMovement;\n', '\t\temit NewDeviationMovement(oldDeviationMovement, _deviationMovement);\n', '\t}\n', '\n', '\t// Sets the retarget threshold parameter, Gov only.\n', '\tfunction setRetargetThreshold(uint256 _retargetThreshold) external onlyGov {\n', "\t\trequire(_retargetThreshold > 0, 'retargetThreshold: too low');\n", '\t\tretargetThreshold = _retargetThreshold;\n', '\t}\n', '\n', '\t// Overwrites the target stock-to-flow ratio, Gov only.\n', '\tfunction setTargetStock2Flow(uint256 _targetStock2Flow) external onlyGov {\n', "\t\trequire(_targetStock2Flow > 0, 'targetStock2Flow: too low');\n", '\t\ttargetStock2Flow = _targetStock2Flow;\n', '\t}\n', '\n', '\t/**\n', '     * @notice Sets the parameters which control the timing and frequency of\n', '     *         rebase operations.\n', '     *         a) the minimum time period that must elapse between rebase cycles.\n', '     *         b) the rebase window offset parameter.\n', '     *         c) the rebase window length parameter.\n', '     * @param _minRebaseTimeIntervalSec More than this much time must pass between rebase\n', '     *        operations, in seconds.\n', '     * @param _rebaseWindowOffsetSec The number of seconds from the beginning of\n', '              the rebase interval, where the rebase window begins.\n', '     * @param _rebaseWindowLengthSec The length of the rebase window in seconds.\n', '     */\n', '\tfunction setRebaseTimingParameters(\n', '\t\tuint256 _minRebaseTimeIntervalSec,\n', '\t\tuint256 _rebaseWindowOffsetSec,\n', '\t\tuint256 _rebaseWindowLengthSec\n', '\t) external onlyGov {\n', "\t\trequire(_minRebaseTimeIntervalSec > 0, 'minRebaseTimeIntervalSec: too low');\n", '\t\trequire(\n', '\t\t\t_rebaseWindowOffsetSec < _minRebaseTimeIntervalSec,\n', "\t\t\t'rebaseWindowOffsetSec: too high'\n", '\t\t);\n', '\n', '\t\tminRebaseTimeIntervalSec = _minRebaseTimeIntervalSec;\n', '\t\trebaseWindowOffsetSec = _rebaseWindowOffsetSec;\n', '\t\trebaseWindowLengthSec = _rebaseWindowLengthSec;\n', '\t}\n', '\n', '\t// Passthrough function to add pool.\n', '\tfunction addPool(\n', '\t\tuint256 _allocPoint,\n', '\t\tIERC20 _lpToken,\n', '\t\tbool _isRed,\n', '\t\tbool _withUpdate\n', '\t) public onlyGov {\n', '\t\tmasterPot.addPool(_allocPoint, _lpToken, _isRed, _withUpdate);\n', '\t}\n', '\n', '\t// Passthrough function to set pool.\n', '\tfunction setPool(\n', '\t\tuint256 _pid,\n', '\t\tuint256 _allocPoint,\n', '\t\tbool _withUpdate\n', '\t) public onlyGov {\n', '\t\tmasterPot.setPool(_pid, _allocPoint, _withUpdate);\n', '\t}\n', '\n', '\t// Passthrough function to set tip rate.\n', '\tfunction setTipRate(uint256 _tipRate) public onlyGov {\n', '\t\tmasterPot.setTipRate(_tipRate);\n', '\t}\n', '\n', '\t// Passthrough function to transfer pot ownership.\n', '\tfunction transferPotOwnership(address newOwner) public onlyGov {\n', '\t\tmasterPot.transferPotOwnership(newOwner);\n', '\t}\n', '\n', '\tfunction getNow() public virtual view returns (uint256) {\n', '\t\treturn now;\n', '\t}\n', '\n', '\tfunction getBlockNumber() public virtual view returns (uint256) {\n', '\t\treturn block.number;\n', '\t}\n', '}']