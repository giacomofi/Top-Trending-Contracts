['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-21\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.6;\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n', '// Subject to the MIT license.\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "Keep3r::SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "Keep3r::SafeMath: subtraction underflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "Keep3r::SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "Keep3r::SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "Keep3r::SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface Governance {\n', '    function proposeJob(address job) external returns (uint);\n', '}\n', '\n', 'interface WETH9 {\n', '    function deposit() external payable;\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '}\n', '\n', 'interface Uniswap {\n', '    function factory() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '}\n', '\n', 'interface UniswapPair {\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function totalSupply() external view returns (uint);\n', '}\n', '\n', 'interface Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'interface Keep3rHelper {\n', '    function getQuoteLimit(uint gasUsed) external view returns (uint);\n', '}\n', '\n', 'contract Keep3r {\n', '    using SafeMath for uint;\n', '\n', '    /// @notice Keep3r Helper to set max prices for the ecosystem\n', '    Keep3rHelper public KPRH;\n', '\n', '    /// @notice WETH address to liquidity into UNI\n', '    WETH9 public constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    /// @notice UniswapV2Router address\n', '    Uniswap public constant UNI = Uniswap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    /// @notice EIP-20 token name for this token\n', '    string public constant name = "Keep3r";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public constant symbol = "KPR";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0; // Initial 0\n', '\n', '    /// @notice A record of each accounts delegate\n', '    mapping (address => address) public delegates;\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', '    mapping (address => mapping (address => uint)) internal allowances;\n', '    mapping (address => uint) internal balances;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint nonce,uint expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint votes;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee) public {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates votes from signatory to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "::delegateBySig: invalid signature");\n', '        require(nonce == nonces[signatory]++, "::delegateBySig: invalid nonce");\n', '        require(now <= expiry, "::delegateBySig: signature expired");\n', '        return _delegate(signatory, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint blockNumber) public view returns (uint) {\n', '        require(blockNumber < block.number, "::getPriorVotes: not yet determined");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = delegates[delegator];\n', '        uint delegatorBalance = bonds[delegator];\n', '        delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint srcRepNew = srcRepOld.sub(amount, "::_moveVotes: vote amount underflows");\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint dstRepNew = dstRepOld.add(amount);\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint oldVotes, uint newVotes) internal {\n', '      uint32 blockNumber = safe32(block.number, "::_writeCheckpoint: block number exceeds 32 bits");\n', '\n', '      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '      } else {\n', '          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '          numCheckpoints[delegatee] = nCheckpoints + 1;\n', '      }\n', '\n', '      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /// @notice Submit a job\n', '    event SubmitJob(address indexed job, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Apply credit to a job\n', '    event ApplyCredit(address indexed job, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Remove credit for a job\n', '    event RemoveJob(address indexed job, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Unbond credit for a job\n', '    event UnbondJob(address indexed job, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Added a Job\n', '    event JobAdded(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Removed a job\n', '    event JobRemoved(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Worked a job\n', '    event KeeperWorked(address indexed job, address indexed keeper, uint block);\n', '\n', '    /// @notice Keeper bonding\n', '    event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);\n', '\n', '    /// @notice Keeper bonded\n', '    event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);\n', '\n', '    /// @notice Keeper unbonding\n', '    event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);\n', '\n', '    /// @notice Keeper unbound\n', '    event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);\n', '\n', '    /// @notice Keeper slashed\n', '    event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);\n', '\n', '    /// @notice Keeper disputed\n', '    event KeeperDispute(address indexed keeper, uint block);\n', '\n', '    /// @notice Keeper resolved\n', '    event KeeperResolved(address indexed keeper, uint block);\n', '\n', '    /// @notice 1 day to bond to become a keeper\n', '    uint constant public BOND = 3 days;\n', '    /// @notice 14 days to unbond to remove funds from being a keeper\n', '    uint constant public UNBOND = 14 days;\n', '    /// @notice 7 days maximum downtime before being slashed\n', '    uint constant public DOWNTIME = 7 days;\n', '    /// @notice 3 days till liquidity can be bound\n', '    uint constant public LIQUIDITYBOND = 3 days;\n', '\n', '    /// @notice 5% of funds slashed for downtime\n', '    uint constant public DOWNTIMESLASH = 500;\n', '    uint constant public BASE = 10000;\n', '\n', '    /// @notice tracks all current bondings (time)\n', '    mapping(address => uint) public bondings;\n', '    /// @notice tracks all current unbondings (time)\n', '    mapping(address => uint) public unbondings;\n', '    /// @notice allows for partial unbonding\n', '    mapping(address => uint) public partialUnbonding;\n', '    /// @notice tracks all current pending bonds (amount)\n', '    mapping(address => uint) public pendingbonds;\n', '    /// @notice tracks how much a keeper has bonded\n', '    mapping(address => uint) public bonds;\n', '\n', '    /// @notice total bonded (totalSupply for bonds)\n', '    uint public totalBonded = 0;\n', '    /// @notice tracks when a keeper was first registered\n', '    mapping(address => uint) public firstSeen;\n', '\n', '    /// @notice tracks if a keeper has a pending dispute\n', '    mapping(address => bool) public disputes;\n', '\n', '    /// @notice tracks last job performed for a keeper\n', '    mapping(address => uint) public lastJob;\n', '    /// @notice tracks the amount of job executions for a keeper\n', '    mapping(address => uint) public work;\n', '    /// @notice tracks the total job executions for a keeper\n', '    mapping(address => uint) public workCompleted;\n', '    /// @notice list of all jobs registered for the keeper system\n', '    mapping(address => bool) public jobs;\n', '    /// @notice the current credit available for a job\n', '    mapping(address => uint) public credits;\n', '    /// @notice the balances for the liquidity providers\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityProvided;\n', '    /// @notice liquidity unbonding days\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityUnbonding;\n', '    /// @notice liquidity unbonding amounts\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmountsUnbonding;\n', '    /// @notice job proposal delay\n', '    mapping(address => uint) public jobProposalDelay;\n', '    /// @notice liquidity apply date\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityApplied;\n', '    /// @notice liquidity amount to apply\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmount;\n', '\n', '    /// @notice list of all current keepers\n', '    mapping(address => bool) public keepers;\n', '    /// @notice blacklist of keepers not allowed to participate\n', '    mapping(address => bool) public blacklist;\n', '\n', '    /// @notice traversable array of keepers to make external management easier\n', '    address[] public keeperList;\n', '    /// @notice traversable array of jobs to make external management easier\n', '    address[] public jobList;\n', '\n', '    /// @notice governance address for the governance contract\n', '    address public governance;\n', '    address public pendingGovernance;\n', '\n', '    /// @notice the liquidity token supplied by users paying for jobs\n', '    mapping(address => bool) public liquidityAccepted;\n', '\n', '    address[] public liquidityPairs;\n', '\n', '    uint internal gasUsed;\n', '\n', '    constructor() public {\n', '        // Set governance for this token\n', '        governance = msg.sender;\n', '        _mint(msg.sender, 10000e18);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Approve a liquidity pair for being accepted in future\n', '     * @param liquidity the liquidity no longer accepted\n', '     */\n', '    function approveLiquidity(address liquidity) external {\n', '        require(msg.sender == governance, "Keep3r::approveLiquidity: governance only");\n', '        require(!liquidityAccepted[liquidity], "Keep3r::approveLiquidity: existing liquidity pair");\n', '        liquidityAccepted[liquidity] = true;\n', '        liquidityPairs.push(liquidity);\n', '    }\n', '\n', '    /**\n', '     * @notice Revoke a liquidity pair from being accepted in future\n', '     * @param liquidity the liquidity no longer accepted\n', '     */\n', '    function revokeLiquidity(address liquidity) external {\n', '        require(msg.sender == governance, "Keep3r::revokeLiquidity: governance only");\n', '        liquidityAccepted[liquidity] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Displays all accepted liquidity pairs\n', '     */\n', '    function pairs() external view returns (address[] memory) {\n', '        return liquidityPairs;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows liquidity providers to submit jobs\n', '     * @param amount the amount of tokens to mint to treasury\n', '     * @param job the job to assign credit to\n', '     * @param amount the amount of liquidity tokens to use\n', '     */\n', '    function addLiquidityToJob(address liquidity, address job, uint amount) external {\n', '        require(liquidityAccepted[liquidity], "Keep3r::addLiquidityToJob: asset not accepted as liquidity");\n', '        UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);\n', '        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);\n', '\n', '        liquidityApplied[msg.sender][liquidity][job] = now.add(LIQUIDITYBOND);\n', '        liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);\n', '\n', '        if (!jobs[job] && jobProposalDelay[job] < now) {\n', '            Governance(governance).proposeJob(job);\n', '            jobProposalDelay[job] = now.add(UNBOND);\n', '        }\n', '        emit SubmitJob(job, msg.sender, block.number, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Applies the credit provided in addLiquidityToJob to the job\n', '     * @param provider the liquidity provider\n', '     * @param liquidity the pair being added as liquidity\n', '     * @param job the job that is receiving the credit\n', '     */\n', '    function applyCreditToJob(address provider, address liquidity, address job) external {\n', '        require(liquidityAccepted[liquidity], "Keep3r::addLiquidityToJob: asset not accepted as liquidity");\n', '        require(liquidityApplied[provider][liquidity][job] != 0, "Keep3r::credit: submitJob first");\n', '        require(liquidityApplied[provider][liquidity][job] < now, "Keep3r::credit: still bonding");\n', '        uint _liquidity = balances[address(liquidity)];\n', '        uint _credit = _liquidity.mul(liquidityAmount[msg.sender][liquidity][job]).div(UniswapPair(liquidity).totalSupply());\n', '        credits[job] = credits[job].add(_credit);\n', '        liquidityAmount[msg.sender][liquidity][job] = 0;\n', '\n', '        emit ApplyCredit(job, msg.sender, block.number, _credit);\n', '    }\n', '\n', '    /**\n', '     * @notice Unbond liquidity for a pending keeper job\n', '     * @param liquidity the pair being unbound\n', '     * @param job the job being unbound from\n', '     * @param amount the amount of liquidity being removed\n', '     */\n', '    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external {\n', '        require(liquidityAmount[msg.sender][liquidity][job] == 0, "Keep3r::credit: pending credit, settle first");\n', '        liquidityUnbonding[msg.sender][liquidity][job] = now.add(UNBOND);\n', '        liquidityAmountsUnbonding[msg.sender][liquidity][job] = liquidityAmountsUnbonding[msg.sender][liquidity][job].add(amount);\n', '        require(liquidityAmountsUnbonding[msg.sender][liquidity][job] <= liquidityProvided[msg.sender][liquidity][job], "Keep3r::unbondLiquidityFromJob: insufficient funds");\n', '\n', '        uint _liquidity = balances[address(liquidity)];\n', '        uint _credit = _liquidity.mul(amount).div(UniswapPair(liquidity).totalSupply());\n', '        if (_credit > credits[job]) {\n', '            credits[job] = 0;\n', '        } else {\n', '            credits[job].sub(_credit);\n', '        }\n', '\n', '        emit UnbondJob(job, msg.sender, block.number, liquidityProvided[msg.sender][liquidity][job]);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows liquidity providers to remove liquidity\n', '     * @param liquidity the pair being unbound\n', '     * @param job the job being unbound from\n', '     */\n', '    function removeLiquidityFromJob(address liquidity, address job) external {\n', '        require(liquidityUnbonding[msg.sender][liquidity][job] != 0, "Keep3r::removeJob: unbond first");\n', '        require(liquidityUnbonding[msg.sender][liquidity][job] < now, "Keep3r::removeJob: still unbonding");\n', '        uint _amount = liquidityAmountsUnbonding[msg.sender][liquidity][job];\n', '        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].sub(_amount);\n', '        liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;\n', '        UniswapPair(liquidity).transfer(msg.sender, _amount);\n', '\n', '        emit RemoveJob(job, msg.sender, block.number, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to mint new tokens to treasury\n', '     * @param amount the amount of tokens to mint to treasury\n', '     */\n', '    function mint(uint amount) external {\n', '        require(msg.sender == governance, "Keep3r::mint: governance only");\n', '        _mint(governance, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice burn owned tokens\n', '     * @param amount the amount of tokens to burn\n', '     */\n', '    function burn(uint amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function _mint(address dst, uint amount) internal {\n', '        // mint the amount\n', '        totalSupply = totalSupply.add(amount);\n', '        // transfer the amount to the recipient\n', '        balances[dst] = balances[dst].add(amount);\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '\n', '    function _burn(address dst, uint amount) internal {\n', '        require(dst != address(0), "::_burn: burn from the zero address");\n', '        balances[dst] = balances[dst].sub(amount, "::_burn: burn amount exceeds balance");\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Implemented by jobs to show that a keeper performend work\n', '     * @param keeper address of the keeper that performed the work\n', '     * @param amount the reward that should be allocated\n', '     */\n', '    function workReceipt(address keeper, uint amount) external {\n', '        require(jobs[msg.sender], "Keep3r::workReceipt: only jobs can approve work");\n', '        gasUsed = gasUsed.sub(gasleft());\n', '        require(amount < KPRH.getQuoteLimit(gasUsed), "Keep3r::workReceipt: spending over max limit");\n', '        credits[msg.sender] = credits[msg.sender].sub(amount, "Keep3r::workReceipt: insuffient funds to pay keeper");\n', '        lastJob[keeper] = now;\n', '        _mint(address(this), amount);\n', '        _bond(keeper, amount);\n', '        workCompleted[keeper] = workCompleted[keeper].add(amount);\n', '        emit KeeperWorked(msg.sender, keeper, block.number);\n', '    }\n', '\n', '    function _bond(address _from, uint _amount) internal {\n', '        bonds[_from] = bonds[_from].add(_amount);\n', '        totalBonded = totalBonded.add(_amount);\n', '        _moveDelegates(address(0), delegates[_from], _amount);\n', '    }\n', '    \n', '    function _unbond(address _from, uint _amount) internal {\n', '        bonds[_from] = bonds[_from].sub(_amount);\n', '        totalBonded = totalBonded.sub(_amount);\n', '        _moveDelegates(delegates[_from], address(0), _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to add new job systems\n', '     * @param job address of the contract for which work should be performed\n', '     */\n', '    function addJob(address job) external {\n', '        require(msg.sender == governance, "Keep3r::addJob: only governance can add jobs");\n', '        require(!jobs[job], "Keep3r::addJob: job already known");\n', '        jobs[job] = true;\n', '        jobList.push(job);\n', '        emit JobAdded(job, block.number, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Full listing of all jobs ever added\n', '     * @return array blob\n', '     */\n', '    function getJobs() external view returns (address[] memory) {\n', '        return jobList;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to remove a job from the systems\n', '     * @param job address of the contract for which work should be performed\n', '     */\n', '    function removeJob(address job) external {\n', '        require(msg.sender == governance, "Keep3r::removeJob: only governance can remove jobs");\n', '        jobs[job] = false;\n', '        emit JobRemoved(job, block.number, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change the Keep3rHelper for max spend\n', '     * @param _kprh new helper address to set\n', '     */\n', '    function setKeep3rHelper(Keep3rHelper _kprh) external {\n', '        require(msg.sender == governance, "Keep3r::setKeep3rHelper: only governance can set");\n', '        KPRH = _kprh;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change governance (for future upgradability)\n', '     * @param _governance new governance address to set\n', '     */\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "Keep3r::setGovernance: only governance can set");\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "Keep3r::acceptGovernance: only pendingGovernance can accept");\n', '        governance = pendingGovernance;\n', '    }\n', '\n', '    /**\n', '     * @notice confirms if the current keeper is registered, can be used for general (non critical) functions\n', '     * @return true/false if the address is a keeper\n', '     */\n', '    function isKeeper(address keeper) external returns (bool) {\n', '        gasUsed = gasleft();\n', '        return keepers[keeper];\n', '    }\n', '\n', '    /**\n', '     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\n', '     * @return true/false if the address is a keeper and has more than the bond\n', '     */\n', '    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {\n', '        gasUsed = gasleft();\n', '        return keepers[keeper]\n', '                && bonds[keeper] >= minBond\n', '                && workCompleted[keeper] >= earned\n', '                && now.sub(firstSeen[keeper]) >= age;\n', '    }\n', '\n', '    /**\n', '     * @notice begin the bonding process for a new keeper\n', '     */\n', '    function bond(uint amount) external {\n', '        require(pendingbonds[msg.sender] == 0, "Keep3r::bond: current pending bond");\n', '        require(!blacklist[msg.sender], "Keep3r::bond: keeper is blacklisted");\n', '        bondings[msg.sender] = now.add(BOND);\n', '        _transferTokens(msg.sender, address(this), amount);\n', '        pendingbonds[msg.sender] = pendingbonds[msg.sender].add(amount);\n', '        emit KeeperBonding(msg.sender, block.number, bondings[msg.sender], amount);\n', '    }\n', '\n', '    function getKeepers() external view returns (address[] memory) {\n', '        return keeperList;\n', '    }\n', '\n', '    /**\n', '     * @notice allows a keeper to activate/register themselves after bonding\n', '     */\n', '    function activate() external {\n', '        require(!blacklist[msg.sender], "Keep3r::activate: keeper is blacklisted");\n', '        require(bondings[msg.sender] != 0 && bondings[msg.sender] < now, "Keep3r::activate: still bonding");\n', '        if (firstSeen[msg.sender] == 0) {\n', '          firstSeen[msg.sender] = now;\n', '          keeperList.push(msg.sender);\n', '          lastJob[msg.sender] = now;\n', '        }\n', '        keepers[msg.sender] = true;\n', '        _bond(msg.sender, pendingbonds[msg.sender]);\n', '        pendingbonds[msg.sender] = 0;\n', '        emit KeeperBonded(msg.sender, block.number, block.timestamp, bonds[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * @notice begin the unbonding process to stop being a keeper\n', '     * @param amount allows for partial unbonding\n', '     */\n', '    function unbond(uint amount) external {\n', '        unbondings[msg.sender] = now.add(UNBOND);\n', '        _unbond(msg.sender, amount);\n', '        partialUnbonding[msg.sender] = partialUnbonding[msg.sender].add(amount);\n', '        emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender], amount);\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw funds after unbonding has finished\n', '     */\n', '    function withdraw() external {\n', '        require(unbondings[msg.sender] != 0 && unbondings[msg.sender] < now, "Keep3r::withdraw: still unbonding");\n', '        require(!disputes[msg.sender], "Keep3r::withdraw: pending disputes");\n', '\n', '        _transferTokens(address(this), msg.sender, partialUnbonding[msg.sender]);\n', '        emit KeeperUnbound(msg.sender, block.number, block.timestamp, partialUnbonding[msg.sender]);\n', '        partialUnbonding[msg.sender] = 0;\n', '    }\n', '\n', '    /**\n', '     * @notice slash a keeper for downtime\n', '     * @param keeper the address being slashed\n', '     */\n', '    function down(address keeper) external {\n', '        require(keepers[msg.sender], "Keep3r::down: not a keeper");\n', '        require(keepers[keeper], "Keep3r::down: keeper not registered");\n', '        require(lastJob[keeper].add(DOWNTIME) < now, "Keep3r::down: keeper safe");\n', '        uint _slash = bonds[keeper].mul(DOWNTIMESLASH).div(BASE);\n', '        \n', '        _unbond(keeper, _slash);\n', '        _bond(msg.sender, _slash);\n', '        \n', '        lastJob[keeper] = now;\n', '        lastJob[msg.sender] = now;\n', '        emit KeeperSlashed(keeper, msg.sender, block.number, _slash);\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to create a dispute for a given keeper\n', '     * @param keeper the address in dispute\n', '     */\n', '    function dispute(address keeper) external returns (uint) {\n', '        require(msg.sender == governance, "Keep3r::dispute: only governance can dispute");\n', '        disputes[keeper] = true;\n', '        emit KeeperDispute(keeper, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to slash a keeper based on a dispute\n', '     * @param keeper the address being slashed\n', '     * @param amount the amount being slashed\n', '     */\n', '    function slash(address keeper, uint amount) public {\n', '        require(msg.sender == governance, "Keep3r::slash: only governance can resolve");\n', '        _transferTokens(address(this), governance, amount);\n', '        _unbond(keeper, amount);\n', '        disputes[keeper] = false;\n', '        emit KeeperSlashed(keeper, msg.sender, block.number, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice blacklists a keeper from participating in the network\n', '     * @param keeper the address being slashed\n', '     */\n', '    function revoke(address keeper) external {\n', '        require(msg.sender == governance, "Keep3r::slash: only governance can resolve");\n', '        keepers[keeper] = false;\n', '        blacklist[keeper] = true;\n', '        slash(keeper, bonds[keeper]);\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to resolve a dispute on a keeper\n', '     * @param keeper the address cleared\n', '     */\n', '    function resolve(address keeper) external {\n', '        require(msg.sender == governance, "Keep3r::resolve: only governance can resolve");\n', '        disputes[keeper] = false;\n', '        emit KeeperResolved(keeper, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "::permit: invalid signature");\n', '        require(signatory == owner, "::permit: unauthorized");\n', '        require(now <= deadline, "::permit: signature expired");\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint amount) public returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint(-1)) {\n', '            uint newAllowance = spenderAllowance.sub(amount, "::transferFrom: transfer amount exceeds spender allowance");\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        require(src != address(0), "::_transferTokens: cannot transfer from the zero address");\n', '        require(dst != address(0), "::_transferTokens: cannot transfer to the zero address");\n', '\n', '        balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");\n', '        balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");\n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']