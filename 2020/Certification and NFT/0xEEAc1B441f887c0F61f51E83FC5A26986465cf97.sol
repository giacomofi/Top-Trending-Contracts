['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(\n', '        address indexed sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        address indexed to\n', '    );\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to)\n', '        external\n', '        returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n', '            pairFor(factory, tokenA, tokenB)\n', '        )\n', '            .getReserves();\n', '        (reserveA, reserveB) = tokenA == token0\n', '            ? (reserve0, reserve1)\n', '            : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");\n', '        require(\n', '            reserveA > 0 && reserveB > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n', '                factory,\n', '                path[i],\n', '                path[i + 1]\n', '            );\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n', '                factory,\n', '                path[i - 1],\n', '                path[i]\n', '            );\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        address pair,\n', '        uint256\n', '    );\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', '// File: @uniswap/lib/contracts/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x095ea7b3, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: APPROVE_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0xa9059cbb, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x23b872dd, from, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FROM_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferETH(address to, uint256 value) internal {\n', '        (bool success, ) = to.call{value: value}(new bytes(0));\n', '        require(success, "TransferHelper: ETH_TRANSFER_FAILED");\n', '    }\n', '}\n', '\n', '// File: contracts/PureCrowdsale.sol\n', '\n', '// SPDX-License-Identifier: Unlicense\n', 'pragma solidity ^0.6.6;\n', '\n', 'contract PureCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev start and end timestamps where investments are allowed (both inclusive)\n', '     */\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    /**\n', '     * @dev amount of already sold vPURE\n', '     */\n', '    uint256 private _soldvPURE;\n', '\n', '    /**\n', '     * @dev contract owner address\n', '     */\n', '    address private _owner;\n', '\n', '    /**\n', '     * @dev uniswap router address\n', '     */\n', '    address private _uniswapRouterAddress;\n', '\n', '    /**\n', '     * @dev vBRIGHT token address\n', '     */\n', '    address private _vBRIGHTAddress;\n', '\n', '    /**\n', '     * @dev vPURE token address\n', '     */\n', '    address private _vPUREAddress;\n', '\n', '    /**\n', '     * @dev VIVID token address\n', '     */\n', '    address private _VIVIDAddress;\n', '\n', '    /**\n', '     * @dev uniswap factory address\n', '     */\n', '    address private _uniswapFactory;\n', '\n', '    /**\n', '     * @dev uniswap router\n', '     */\n', '    IUniswapV2Router02 private _uniswapRouter02;\n', '\n', '    /**\n', '     * @dev helper constants to compute the vPURE/ETH ratio\n', '     */\n', '    uint256 private constant _VPURENUMERATOR = 1000;\n', '    uint256 private constant _VPUREDENOMINATOR = 42;\n', '\n', '    /**\n', '     * @dev maximum and minimum eth needed for a purchase\n', '     */\n', '    uint256 private constant _ETHMIN = 1 * 10**18;\n', '    uint256 private constant _ETHMAX = 50 * 10**18;\n', '    \n', '    uint256 private _ethMINValue;\n', '\n', '    /**\n', '     * @dev vPURE token\n', '     */\n', '    IERC20 private _vPUREToken;\n', '\n', '    /**\n', '     * @dev vBRIGHT token\n', '     */\n', '    IERC20 private _vBRIGHTToken;\n', '\n', '    /**\n', '     * @dev VIVID token\n', '     */\n', '    IERC20 private _VIVIDToken;\n', '\n', '    /**\n', '     * @dev WETH address\n', '     */\n', '    address private _weth;\n', '\n', '    /**\n', '     * struct to keep the amount of vPURE boght and the total ETH sent\n', '     */\n', '    struct trackCrowdsaleAmount {\n', '        uint256 ethAmount;\n', '        uint256 vPUREAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev it keeps the mapping between the vPURE sold to the specific address\n', '     */\n', '    mapping(address => trackCrowdsaleAmount) private _vCrowdsaleBalance;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param ethAmount ETH paid for purchase\n', '     * @param vPUREAmount amount of tokens purchased\n', '     */\n', '    event onVPURETokenPurchase(\n', '        address indexed purchaser,\n', '        uint256 ethAmount,\n', '        uint256 vPUREAmount\n', '    );\n', '\n', '    /**\n', '     * event for LP added to vBRIGHT\n', '     * @param tokenAmount amount of tokens added to LP\n', '     * @param ethAmount ETH paid for purchase\n', '     * @param liquidity the LP\n', '     * @param tokenAddress address\n', '     */\n', '    event onLpvAdded(\n', '        uint256 tokenAmount,\n', '        uint256 ethAmount,\n', '        uint256 liquidity,\n', '        address tokenAddress\n', '    );\n', '\n', '    /**\n', '     * event for claim tokens action\n', '     * @param beneficiary address\n', '     * @param amount amount of VPURE\n', '     */\n', '    event onClaimPurchasedTokens(address beneficiary, uint256 amount);\n', '\n', '    /**\n', '     * @dev constructor\n', '     */\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '\n', '        setVBRIGHTAddress(0x3E88f8C31E1F9D26c1904584EFbCA58b75F53568);\n', '\n', '        setVPUREAddress(0x12ED21C3d2E966162c4C65Ea8a62d13061D46eb6);\n', '\n', '        setVIVIDAddress(0xF32544D1Ab31814160054bD6371Db4DE389E0083);\n', '\n', '        setUniswapRouterAddress(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '        setUniswapFactoryAddress(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '\n', '        startTime = 1605121200;\n', '        endTime = startTime + 10 days;\n', '\n', '        _weth = _uniswapRouter02.WETH();\n', '        \n', '        _ethMINValue = _ETHMIN;\n', '    }\n', '\n', '    /**\n', '     * @dev access modifier to restrict different functionalities\n', '     */\n', '    modifier _onlyOwner() {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function can be used to buy tokens\n', '     */\n', '    receive() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '     * @dev helper to set VIVID contract address\n', '     * _onlyOwner available\n', '     */\n', '    function setVIVIDAddress(address VIVIDAddress) public _onlyOwner {\n', '        _VIVIDAddress = VIVIDAddress;\n', '        _VIVIDToken = IERC20(_VIVIDAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev helper to set vBRIGHT contract address\n', '     * _onlyOwner available\n', '     */\n', '    function setVBRIGHTAddress(address vBRIGHTAddress) public _onlyOwner {\n', '        _vBRIGHTAddress = vBRIGHTAddress;\n', '        _vBRIGHTToken = IERC20(_vBRIGHTAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev helper to set vPURE contract address\n', '     * _onlyOwner available\n', '     */\n', '    function setVPUREAddress(address vPUREAddress) public _onlyOwner {\n', '        _vPUREAddress = vPUREAddress;\n', '        _vPUREToken = IERC20(_vPUREAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev helper to set uniswap factory address\n', '     * _onlyOwner available\n', '     */\n', '    function setUniswapFactoryAddress(address factoryAddress)\n', '        public\n', '        _onlyOwner\n', '    {\n', '        _uniswapFactory = factoryAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev helper to set uniswap router address\n', '     * _onlyOwner available\n', '     */\n', '    function setUniswapRouterAddress(address routerAddress) public _onlyOwner {\n', '        _uniswapRouterAddress = routerAddress;\n', '        _uniswapRouter02 = IUniswapV2Router02(_uniswapRouterAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev set the start time for the crowdsale period\n', '     * _onlyOwner available\n', '     */\n', '    function setStartTime(uint256 start) public _onlyOwner {\n', '        startTime = start;\n', '    }\n', '\n', '    /**\n', '     * @dev set the end time for the crowdsale period\n', '     * _onlyOwner available\n', '     */\n', '    function setEndTime(uint256 end) public _onlyOwner {\n', '        endTime = end;\n', '    }\n', '\n', '    /**\n', '     * @dev set the minimum ETH purchase value, only unsed for testing purposes\n', '     * _onlyOwner available\n', '     */\n', '    function setETHMin(uint256 ethMinValue) public _onlyOwner {\n', '        _ethMINValue = ethMinValue;\n', '    }\n', '    \n', '    /**\n', '     * @return the vPURE balance available for the given address.\n', '     * _onlyOwner available\n', '     */\n', '    function getvPUREBalance(address from)\n', '        public\n', '        view\n', '        _onlyOwner\n', '        returns (uint256)\n', '    {\n', '        return _vCrowdsaleBalance[from].vPUREAmount;\n', '    }\n', '\n', '    /**\n', '     * @return the ETH balance available for the given address\n', '     * _onlyOwner available\n', '     */\n', '    function getEthBalance(address from)\n', '        public\n', '        view\n', '        _onlyOwner\n', '        returns (uint256)\n', '    {\n', '        return _vCrowdsaleBalance[from].ethAmount;\n', '    }\n', '\n', '    /**\n', '     * @return the ETH balance available for the contract address\n', '     */\n', '    function getAvailableEth() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * @return the vPURE balance available for the sender address\n', '     */\n', '    function getvPUREBalance() public view returns (uint256) {\n', '        return _vCrowdsaleBalance[msg.sender].vPUREAmount;\n', '    }\n', '\n', '    /**\n', '     * @return the ETH balance available for the sender address\n', '     */\n', '    function getEthBalance() public view returns (uint256) {\n', '        return _vCrowdsaleBalance[msg.sender].ethAmount;\n', '    }\n', '\n', '    /**\n', '     * @return the cap of the crowdsale\n', '     * As long as the crowsale is running, vPURE is not yet delivered, so the capital will remain the same during the crowdsale.\n', '     */\n', '    function getCurrentCap() public view returns (uint256) {\n', '        return _vPUREToken.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @return the remaining cap of the crowdsale\n', '     */\n', '    function getAvailablevPURE() public view returns (uint256) {\n', '        uint256 available = getCurrentCap();\n', '        available = available.sub(_soldvPURE);\n', '        return available;\n', '    }\n', '\n', '    /**\n', '     * @return the ratio vPURE to ETH of the Crowdsale in wei\n', '     */\n', '    function getConversionvPUREtoETHRatio() public pure returns (uint256) {\n', '        uint256 ratio = _VPURENUMERATOR * 10**18;\n', '        ratio = ratio.div(_VPUREDENOMINATOR);\n', '        return ratio;\n', '    }\n', '\n', '    /**\n', '     * @return the price of vPURE in ETH of the Crowdsale in wei\n', '     */\n', '    function getPricevPUREinETH() public pure returns (uint256) {\n', '        uint256 ratio = _VPUREDENOMINATOR * 10**18;\n', '        ratio = ratio.div(_VPURENUMERATOR);\n', '        return ratio;\n', '    }\n', '\n', '    /**\n', '     * @return the min and max ETH required for a sale in wei\n', '     */\n', '    function getMinMaxETHForPurchase() public view returns (uint256, uint256) {\n', '        return ( _ethMINValue, _ETHMAX );\n', '    }\n', '\n', '    /**\n', '     * @return get the total amount of vPURE already sold\n', '     */\n', '    function getSoldvPURE() public view returns (uint256) {\n', '        return _soldvPURE;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase function\n', '     */\n', '    function buyTokens() public payable {\n', '        uint256 ethAmount = msg.value;\n', '        require(ethAmount >= _ethMINValue, "Minimum amount is 1 ETH");\n', '        require(ethAmount <= _ETHMAX, "Maximum amount is 50 ETH");\n', '        require(_isValidPurchase(ethAmount), "Wrong data sent to contract");\n', '        require(!_isCapReached(), "Cap exceeded");\n', '\n', '        // calculate token amount to be delivered\n', '        uint256 vPUREAmount = ethAmount.mul(_VPURENUMERATOR);\n', '        vPUREAmount = vPUREAmount.div(_VPUREDENOMINATOR);\n', '\n', '        require(\n', '            vPUREAmount <= getAvailablevPURE(),\n', '            "Not enough vPURE available."\n', '        );\n', '\n', '        // update state\n', '        _soldvPURE = _soldvPURE.add(vPUREAmount);\n', '\n', '        // update the balance for the msg.sender\n', '        _updateBalance(ethAmount, vPUREAmount);\n', '\n', '        uint256 ethAmoutToLPvBRIGHT = ethAmount.mul(16).div(100); // 16% goes to LP for vBRIGHT;\n', '        _adLp(ethAmoutToLPvBRIGHT, _vBRIGHTAddress);\n', '\n', '        uint256 ethAmountToLpVIVID = ethAmount.mul(18).div(100); // 18% goes to LP for VIVID;\n', '        // add LP for VIVID\n', '        _adLp(ethAmountToLpVIVID, _VIVIDAddress);\n', '\n', '        emit onVPURETokenPurchase(msg.sender, ethAmount, vPUREAmount);\n', '    }\n', '    \n', '    /**\n', '     * @dev low level token purchase function\n', '     */\n', '    \n', '\n', '    /**\n', '     * @dev withdraw the remaining tokens (UNIV2) at the end of presale period\n', '     */\n', '    function withdrawToken(address tokenAddress) public _onlyOwner {\n', '        require(hasEnded(), "Presale still active");\n', '        IERC20 token = IERC20(tokenAddress);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        TransferHelper.safeTransfer(tokenAddress, msg.sender, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw 9.8% of ETH to be used for marketing purpose\n', '     */\n', '    function withdrawETHForMarketing() public _onlyOwner {\n', '        uint256 balance = address(this).balance;\n', '        require(balance >= 0, "Insuficient founds");\n', '        uint256 amount = balance.mul(98).div(1000);\n', '        TransferHelper.safeTransferETH(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev used by the Vivid Finance team to support development\n', '     * this is allowed only after the presale has ended\n', '     */\n', '    function withdrawRemainingETH() public _onlyOwner {\n', '        require(hasEnded(), "Presale still active");\n', '\n', '        uint256 balance = address(this).balance;\n', '        require(balance >= 0, "Insuficient founds");\n', '        TransferHelper.safeTransferETH(msg.sender, balance);\n', '    }\n', '\n', '    /**\n', '     * @return true if crowdsale event has ended or the cap has been reached\n', '     */\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime || _isCapReached();\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return bool\n', '     */\n', '    function _isCapReached() private view returns (bool) {\n', '        return getAvailablevPURE() == 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the presale is active.\n', '     * @return bool\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return now > startTime && !hasEnded();\n', '    }\n', '\n', '    /**\n', '     * @dev used to claim de purchased tokens at the end of presale event\n', '     */\n', '    function claimvPURE() public {\n', '        require(hasEnded(), "Presale still active.");\n', '\n', '        uint256 pureAmount = _vCrowdsaleBalance[msg.sender].vPUREAmount;\n', '        require(pureAmount > 0, "No purchase has been made");\n', '        _processPurchase(msg.sender, pureAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount)\n', '        private\n', '    {\n', '        TransferHelper.safeTransfer(_vPUREAddress, beneficiary, tokenAmount);\n', '\n', '        // reset the beneficiary balance\n', '        _vCrowdsaleBalance[beneficiary].vPUREAmount = 0;\n', '        _vCrowdsaleBalance[beneficiary].ethAmount = 0;\n', '\n', '        emit onClaimPurchasedTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev add liquidity to LP\n', '     */\n', '    function _adLp(uint256 ethAmount, address tokenAddress)\n', '        private\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        uint256 reserveA;\n', '        uint256 reserveB;\n', '\n', '        (reserveA, reserveB) = UniswapV2Library.getReserves(\n', '            _uniswapFactory,\n', '            _weth,\n', '            tokenAddress\n', '        );\n', '\n', '        uint256 tokenAmount = UniswapV2Library.quote(\n', '            ethAmount,\n', '            reserveA,\n', '            reserveB\n', '        );\n', '\n', '        TransferHelper.safeApprove(\n', '            tokenAddress,\n', '            _uniswapRouterAddress,\n', '            tokenAmount\n', '        );\n', '\n', '        (amountToken, amountETH, liquidity) = _uniswapRouter02.addLiquidityETH{\n', '            value: ethAmount\n', '        }(\n', '            tokenAddress,\n', '            tokenAmount,\n', '            tokenAmount,\n', '            1,\n', '            address(this),\n', '            block.timestamp + 1 days\n', '        );\n', '\n', '        emit onLpvAdded(tokenAmount, amountETH, liquidity, tokenAddress);\n', '    }\n', '\n', '    /**\n', '     * @return true if the transaction can buy tokens\n', '     */\n', '    function _isValidPurchase(uint256 amount) private view returns (bool) {\n', '        bool withinPeriod = block.timestamp >= startTime &&\n', '            block.timestamp <= endTime;\n', '        bool nonZeroPurchase = amount != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    /**\n', '     * @dev update the internal list of purchases\n', '     */\n', '    function _updateBalance(uint256 ethAmount, uint256 vPUREAmount) private {\n', '        _vCrowdsaleBalance[msg.sender].ethAmount = _vCrowdsaleBalance[msg\n', '            .sender]\n', '            .ethAmount\n', '            .add(ethAmount);\n', '        // safetly check for the total amount of ETH bought by a single user\n', '        // it should not exceed 50 ETH\n', '        require(\n', '            _vCrowdsaleBalance[msg.sender].ethAmount <= _ETHMAX * 10**18,\n', '            "The total amount of ETH exceeded maximul value: 50 ETH"\n', '        );\n', '\n', '        _vCrowdsaleBalance[msg.sender].vPUREAmount = _vCrowdsaleBalance[msg\n', '            .sender]\n', '            .vPUREAmount\n', '            .add(vPUREAmount);\n', '    }\n', '}']