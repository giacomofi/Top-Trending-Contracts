['pragma solidity 0.5.0;\n', '\n', '/*       AmpleForthGold AAU Midas Distributor. \n', '** \n', '**       (c) 2020. Developed by the AmpleForthGold Team.\n', '**  \n', '**       www.ampleforth.gold\n', '*/\n', '\n', '\n', '//import "openzeppelin-solidity/contracts/math/SafeMath.sol";\n', '//pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '//import "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol";\n', '//pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '//import "openzeppelin-solidity/contracts/ownership/Ownable.sol";\n', '//pragma solidity ^0.5.0;\n', '\n', '//import "../GSN/Context.sol";\n', '//pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//import "./TokenPool.sol";\n', '//pragma solidity 0.5.0;\n', '\n', '//import "openzeppelin-solidity/contracts/ownership/Ownable.sol";\n', '//import "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return token.transfer(to, value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Midas Distributor\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n', ' *      Compound, Uniswap and Ampleforth.\n', ' *\n', " *      The ampleforth geyser has the concept of a 'locked pool' in the geyser. MidasDistributor\n", ' *      performs a similar action to the ampleforth geyser locked pool but allows for multiple\n', ' *      geysers (which we call MidasAgents).\n', ' *\n', ' *      Distribution tokens are added to a pool in the contract and, over time, are sent to\n', ' *      multiple midas agents based on a distribution share. Each agent gets a set\n', ' *      percentage of the pool each time a distribution occurs.\n', ' *\n', ' *      Before unstaking the tokens in an agent it would be benifical to maximise the \n', ' *      take: to perform a distribution. That distribution event would be at the stakholders\n', ' *      expense, and we allow anyone to perform a distribution.\n', ' *\n', ' *      Multiple midas agents can be registered, deregistered and have their distribution\n', ' *      percentage adjusted. The distributor must be locked for adjustments to be made.\n', ' *\n', ' *      More background and motivation available at the AmpleForthGold github & website.\n', ' */\n', 'contract MidasDistributor is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event TokensLocked(uint256 amount, uint256 total);\n', '    event TokensDistributed(uint256 amount, uint256 total);\n', '\n', '    /* the ERC20 token to distribute */\n', '    IERC20 public token;\n', '\n', '    /* timestamp of last distribution event. */\n', '    uint256 public lastDistributionTimestamp;\n', '\n', '    /* When *true* the distributor:\n', '     *      1) shall distribute tokens to agents,\n', '     *      2) shall not allow for the registration or\n', '     *         modification of agent details.\n', '     * When *false* the distributor:\n', '     *      1) shall not distribute tokens to agents,\n', '     *      2) shall allow for the registration and\n', '     *         modification of agent details.\n', '     */\n', '    bool public distributing = false;\n', '\n', '    /* Allows us to represent a number by moving the decimal point. */\n', '    uint256 public constant DECIMALS_EXP = 10**12;\n', '\n', '    /* Represents the distribution rate per second.\n', '     * Distribution rate is (0.5% per day) == (5.78703e-8 per second).\n', '     */\n', '    uint256 public constant PER_SECOND_INTEREST \n', '        = (DECIMALS_EXP * 5) / (1000 * 1 days);\n', '\n', '    /* The collection of Agents and their percentage share. */\n', '    struct MidasAgent {\n', '        \n', '        /* reference to a Midas Agent (destination for distributions) */\n', '        address agent;\n', '\n', '        /* Share of the distribution as a percentage.\n', '         * i.e. 14% == 14\n', '         * The sum of all shares must be equal to 100.\n', '         */\n', '        uint8 share;\n', '    }\n', '    MidasAgent[] public agents;\n', '\n', '    /**\n', '     * @param _distributionToken The token to be distributed.\n', '     */\n', '    constructor(IERC20 _distributionToken) public {\n', '        token = _distributionToken;\n', '        lastDistributionTimestamp = block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the distributing state of the contract\n', '     * @param _distributing the distributing state.\n', '     */\n', '    function setDistributionState(bool _distributing) external onlyOwner {\n', '        /* we can only become enabled if the sum of shares == 100%. */\n', '        if (_distributing == true) {\n', '            require(checkAgentPercentage() == true);\n', '        }\n', '\n', '        distributing = _distributing;\n', '    }\n', '\n', '    /**\n', '     * @notice Adds an Agent\n', '     * @param _agent Address of the destination agent\n', '     * @param _share Percentage share of distribution (can be 0)\n', '     */\n', '    function addAgent(address _agent, uint8 _share) external onlyOwner {\n', '        require(_share <= uint8(100));\n', '        distributing = false;\n', '        agents.push(MidasAgent({agent: _agent, share: _share}));\n', '    }\n', '\n', '    /**\n', '     * @notice Removes an Agent\n', '     * @param _index Index of Agent to remove.\n', '     *              Agent ordering may have changed since adding.\n', '     */\n', '    function removeAgent(uint256 _index) external onlyOwner {\n', '        require(_index < agents.length, "index out of bounds");\n', '        distributing = false;\n', '        if (_index < agents.length - 1) {\n', '            agents[_index] = agents[agents.length - 1];\n', '        }\n', '        agents.length--;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets an Agents share of the distribution.\n', '     * @param _index Index of Agents. Ordering may have changed since adding.\n', '     * @param _share Percentage share of the distribution (can be 0).\n', '     */\n', '    function setAgentShare(uint256 _index, uint8 _share) external onlyOwner {\n', '        require(\n', '            _index < agents.length,\n', '            "index must be in range of stored tx list"\n', '        );\n', '        require(_share <= uint8(100));\n', '        distributing = false;\n', '        agents[_index].share = _share;\n', '    }\n', '\n', '    /**\n', '     * @return Number of midas agents in agents list.\n', '     */\n', '    function agentsSize() public view returns (uint256) {\n', '        return agents.length;\n', '    }\n', '\n', '    /**\n', '     * @return boolean true if the percentage of all\n', '     *         agents equals 100%. */\n', '    function checkAgentPercentage() public view returns (bool) {\n', '        uint256 sum = 0;\n', '        for (uint256 i = 0; i < agents.length; i++) {\n', '            sum += agents[i].share;\n', '        }\n', '        return (uint256(100) == sum);\n', '    }\n', '\n', '    /**\n', '     * @return gets the total balance of the distributor\n', '     */\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function getElapsedTime() public view returns(uint256) {\n', '        /* Checking for a wormhole or time dialation event.\n', '         * this error may also be caused by sunspots. */\n', '        require(block.timestamp >= lastDistributionTimestamp);\n', '        return (block.timestamp - lastDistributionTimestamp);\n', '    }\n', '\n', '    /* Gets the (total) amount that would be distributed\n', '     * if a distribution event happened now. */\n', '    function getDistributionAmount() public view returns (uint256) {\n', '        return\n', '            balance()\n', '            .mul(getElapsedTime())\n', '            .mul(PER_SECOND_INTEREST)\n', '            .div(DECIMALS_EXP);\n', '    }\n', '\n', '    /* Gets the amount that would be distributed to a specific agent\n', '     * if a distribution event happened now. */\n', '    function getAgentDistributionAmount(uint256 index)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(checkAgentPercentage() == true);\n', '        require(index < agents.length);\n', '\n', '        return\n', '            getDistributionAmount()\n', '            .mul(agents[index].share)\n', '            .div(100);\n', '    }\n', '\n', '    /**\n', '     * Distributes the tokens based on the balance and the distribution rate.\n', '     *\n', '     * Anyone can call, and should call prior to an unstake event.\n', '     */\n', '    function distribute() external {\n', '        require(distributing == true);\n', '        require(checkAgentPercentage() == true);\n', '        require(getDistributionAmount() > 0);\n', '\n', '        for (uint256 i = 0; i < agents.length; i++) {\n', '            uint256 amount = getAgentDistributionAmount(i);\n', '            if (amount > 0) {\n', '                require(token.transfer(agents[i].agent, amount));\n', '            }\n', '        }\n', '        lastDistributionTimestamp = block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * Returns the balance to the owner of the contract. This is needed\n', '     * if there is a contract upgrade & for testing & validation purposes.\n', '     */\n', '    function returnBalance2Owner() external onlyOwner returns (bool) {\n', '        uint256 value = balance();\n', '        if (value == 0) {\n', '            return true;\n', '        }\n', '        return token.transfer(owner(), value);\n', '    }\n', '}']