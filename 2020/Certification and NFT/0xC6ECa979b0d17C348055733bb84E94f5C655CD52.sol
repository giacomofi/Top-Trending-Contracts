['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-18\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-11\n', '*/\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'contract Upgradeable {\n', '    event Upgrade(\n', '        address indexed sender,\n', '        address indexed from,\n', '        address indexed to\n', '    );\n', '\n', '    //https://eips.ethereum.org/EIPS/eip-1967\n', "    //bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\n", '    bytes32\n', '        internal constant IMPLEMENTATION_STORAGE_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '    bytes32\n', '        internal constant AUTHENTICATION_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    constructor(address _authentication, address _implementation) public {\n', '        require(_authentication != address(0), "Upgradeable.constructor.EID00090");\n', '        require(_implementation != address(0), "Upgradeable.constructor.EID00090");\n', '        _setauthentication(_authentication);\n', '        _setimplementation(_implementation);\n', '    }\n', '\n', '    modifier auth() {\n', '        require(msg.sender == authentication(), "Upgradeable.auth.EID00001");\n', '        _;\n', '    }\n', '\n', '    function authentication() public view returns (address _authentication) {\n', '        bytes32 slot = AUTHENTICATION_STORAGE_SLOT;\n', '        assembly {\n', '            _authentication := sload(slot)\n', '        }\n', '    }\n', '\n', '    function implementation() public view returns (address _implementation) {\n', '        bytes32 slot = IMPLEMENTATION_STORAGE_SLOT;\n', '        assembly {\n', '            _implementation := sload(slot)\n', '        }\n', '    }\n', '\n', '    function upgrade(address _implementation)\n', '        public\n', '        auth\n', '        returns (address)\n', '    {\n', '        require(_implementation != address(0), "Upgradeable.upgrade.EID00090");\n', '        address from = _setimplementation(_implementation);\n', '        emit Upgrade(msg.sender, from, _implementation);\n', '        return from;\n', '    }\n', '\n', '    fallback() external payable {\n', '        address _implementation = implementation();\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let result := delegatecall(\n', '                gas(),\n', '                _implementation,\n', '                0,\n', '                calldatasize(),\n', '                0,\n', '                0\n', '            )\n', '            returndatacopy(0, 0, returndatasize())\n', '            switch result\n', '                case 0 {\n', '                    revert(0, returndatasize())\n', '                }\n', '                default {\n', '                    return(0, returndatasize())\n', '                }\n', '        }\n', '    }\n', '\n', '    function _setimplementation(address _implementation)\n', '        internal\n', '        returns (address)\n', '    {\n', '        address from = implementation();\n', '        bytes32 slot = IMPLEMENTATION_STORAGE_SLOT;\n', '        assembly {\n', '            sstore(slot, _implementation)\n', '        }\n', '        return from;\n', '    }\n', '\n', '    function _setauthentication(address _authentication)\n', '        internal\n', '        returns (address)\n', '    {\n', '        address from = authentication();\n', '        bytes32 slot = AUTHENTICATION_STORAGE_SLOT;\n', '        assembly {\n', '            sstore(slot, _authentication)\n', '        }\n', '        return from;\n', '    }\n', '}']