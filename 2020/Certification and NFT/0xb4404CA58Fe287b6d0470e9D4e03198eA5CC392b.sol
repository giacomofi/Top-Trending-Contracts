['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface Structs {\n', '    struct Val {\n', '        uint256 value;\n', '    }\n', '\n', '    enum ActionType {\n', '      Deposit,   // supply tokens\n', '      Withdraw,  // borrow tokens\n', '      Transfer,  // transfer balance between accounts\n', '      Buy,       // buy an amount of some token (externally)\n', '      Sell,      // sell an amount of some token (externally)\n', '      Trade,     // trade tokens against another account\n', '      Liquidate, // liquidate an undercollateralized or expiring account\n', '      Vaporize,  // use excess tokens to zero-out a completely negative account\n', '      Call       // send arbitrary data to an address\n', '    }\n', '\n', '    enum AssetDenomination {\n', '        Wei // the amount is denominated in wei\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta // the amount is given as a delta from the current value\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct Info {\n', '        address owner;  // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', 'contract DyDxPool is Structs {\n', '    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\n', '    function operate(Info[] memory, ActionArgs[] memory) public;\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract DyDxFlashLoan is Structs {\n', '    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\n', '\n', '    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    mapping(address => uint256) public currencies;\n', '\n', '    constructor() public {\n', '        currencies[WETH] = 1;\n', '        currencies[SAI] = 2;\n', '        currencies[USDC] = 3;\n', '        currencies[DAI] = 4;\n', '    }\n', '\n', '    modifier onlyPool() {\n', '        require(\n', '            msg.sender == address(pool),\n', '            "FlashLoan: could be called by DyDx pool only"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function tokenToMarketId(address token) public view returns (uint256) {\n', '        uint256 marketId = currencies[token];\n', '        require(marketId != 0, "FlashLoan: Unsupported token");\n', '        return marketId - 1;\n', '    }\n', '\n', '    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\n', '    function flashloan(address token, uint256 amount, bytes memory data)\n', '        internal\n', '    {\n', '        IERC20(token).approve(address(pool), amount + 1);\n', '        Info[] memory infos = new Info[](1);\n', '        ActionArgs[] memory args = new ActionArgs[](3);\n', '\n', '        infos[0] = Info(address(this), 0);\n', '\n', '        AssetAmount memory wamt = AssetAmount(\n', '            false,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount\n', '        );\n', '        ActionArgs memory withdraw;\n', '        withdraw.actionType = ActionType.Withdraw;\n', '        withdraw.accountId = 0;\n', '        withdraw.amount = wamt;\n', '        withdraw.primaryMarketId = tokenToMarketId(token);\n', '        withdraw.otherAddress = address(this);\n', '\n', '        args[0] = withdraw;\n', '\n', '        ActionArgs memory call;\n', '        call.actionType = ActionType.Call;\n', '        call.accountId = 0;\n', '        call.otherAddress = address(this);\n', '        call.data = data;\n', '\n', '        args[1] = call;\n', '\n', '        ActionArgs memory deposit;\n', '        AssetAmount memory damt = AssetAmount(\n', '            true,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount + 1\n', '        );\n', '        deposit.actionType = ActionType.Deposit;\n', '        deposit.accountId = 0;\n', '        deposit.amount = damt;\n', '        deposit.primaryMarketId = tokenToMarketId(token);\n', '        deposit.otherAddress = address(this);\n', '\n', '        args[2] = deposit;\n', '\n', '        pool.operate(infos, args);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract IOneSplit {\n', '    function getExpectedReturn(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 disableFlags\n', '    )\n', '        public\n', '        view\n', '        returns(\n', '            uint256 returnAmount,\n', '            uint256[] memory distribution\n', '        );\n', '\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] memory distribution,\n', '        uint256 disableFlags\n', '    ) public payable;\n', '}\n', '\n', 'contract TradingBot is DyDxFlashLoan {\n', '    uint256 public loan;\n', '\n', '    // Addresses\n', '    address payable OWNER;\n', '\n', '    // OneSplit Config\n', '    address ONE_SPLIT_ADDRESS = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\n', '    uint256 PARTS = 10;\n', '    uint256 FLAGS = 0;\n', '\n', '    // ZRX Config\n', '    address ZRX_EXCHANGE_ADDRESS = 0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef;\n', '    address ZRX_ERC20_PROXY_ADDRESS = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n', '    address ZRX_STAKING_PROXY = 0xa26e80e7Dea86279c6d778D702Cc413E6CFfA777; // Fee collector\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == OWNER, "caller is not the owner!");\n', '        _;\n', '    }\n', '\n', '    // Allow the contract to receive Ether\n', '    function () external payable  {}\n', '\n', '    constructor() public payable {\n', '        _getWeth(msg.value);\n', '        _approveWeth(msg.value);\n', '        OWNER = msg.sender;\n', '    }\n', '\n', '    function getFlashloan(address flashToken, uint256 flashAmount, address arbToken, bytes calldata zrxData, uint256 oneSplitMinReturn, uint256[] calldata oneSplitDistribution) external payable onlyOwner {\n', '        uint256 balanceBefore = IERC20(flashToken).balanceOf(address(this));\n', '        bytes memory data = abi.encode(flashToken, flashAmount, balanceBefore, arbToken, zrxData, oneSplitMinReturn, oneSplitDistribution);\n', '        flashloan(flashToken, flashAmount, data); // execution goes to `callFunction`\n', '\n', '        // and this point we have succefully paid the dept\n', '    }\n', '\n', '    function callFunction(\n', '        address, /* sender */\n', '        Info calldata, /* accountInfo */\n', '        bytes calldata data\n', '    ) external onlyPool {\n', '        (address flashToken, uint256 flashAmount, uint256 balanceBefore, address arbToken, bytes memory zrxData, uint256 oneSplitMinReturn, uint256[] memory oneSplitDistribution) = abi\n', '            .decode(data, (address, uint256, uint256, address, bytes, uint256, uint256[]));\n', '        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));\n', '        require(\n', '            balanceAfter - balanceBefore == flashAmount,\n', '            "contract did not get the loan"\n', '        );\n', '        loan = balanceAfter;\n', '\n', '        // do whatever you want with the money\n', '        // the dept will be automatically withdrawn from this contract at the end of execution\n', '        _arb(flashToken, arbToken, flashAmount, zrxData, oneSplitMinReturn, oneSplitDistribution);\n', '    }\n', '\n', '    function arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {\n', '        _arb(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\n', '    }\n', '\n', '    function _arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {\n', '        // Track original balance\n', '        uint256 _startBalance = IERC20(_fromToken).balanceOf(address(this));\n', '\n', '        // Perform the arb trade\n', '        _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\n', '\n', '        // Track result balance\n', '        uint256 _endBalance = IERC20(_fromToken).balanceOf(address(this));\n', '\n', '        // Require that arbitrage is profitable\n', '        require(_endBalance > _startBalance, "End balance must exceed start balance.");\n', '    }\n', '\n', '    function trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {\n', '        _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\n', '    }\n', '\n', '    function _trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {\n', '        // Track the balance of the token RECEIVED from the trade\n', '        uint256 _beforeBalance = IERC20(_toToken).balanceOf(address(this));\n', '\n', '        // Swap on 0x: give _fromToken, receive _toToken\n', '        _zrxSwap(_fromToken, _fromAmount, _0xData);\n', '\n', '        // Calculate the how much of the token we received\n', '        uint256 _afterBalance = IERC20(_toToken).balanceOf(address(this));\n', '\n', '        // Read _toToken balance after swap\n', '        uint256 _toAmount = _afterBalance - _beforeBalance;\n', '\n', '        // Swap on 1Split: give _toToken, receive _fromToken\n', '        _oneSplitSwap(_toToken, _fromToken, _toAmount, _1SplitMinReturn, _1SplitDistribution);\n', '    }\n', '\n', '    function zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) onlyOwner public payable {\n', '        _zrxSwap(_from, _amount, _calldataHexString);\n', '    }\n', '\n', '    function _zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) internal {\n', '        // Approve tokens\n', '        IERC20 _fromIERC20 = IERC20(_from);\n', '        _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, _amount);\n', '\n', '        // Swap tokens\n', '        address(ZRX_EXCHANGE_ADDRESS).call.value(msg.value)(_calldataHexString);\n', '\n', '        // Reset approval\n', '        _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, 0);\n', '    }\n', '\n', '    function oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) onlyOwner public payable {\n', '        _oneSplitSwap(_from, _to, _amount, _minReturn, _distribution);\n', '    }\n', '\n', '    function _oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) internal {\n', '        // Setup contracts\n', '        IERC20 _fromIERC20 = IERC20(_from);\n', '        IERC20 _toIERC20 = IERC20(_to);\n', '        IOneSplit _oneSplitContract = IOneSplit(ONE_SPLIT_ADDRESS);\n', '\n', '        // Approve tokens\n', '        _fromIERC20.approve(ONE_SPLIT_ADDRESS, _amount);\n', '\n', '        // Swap tokens: give _from, get _to\n', '        _oneSplitContract.swap(_fromIERC20, _toIERC20, _amount, _minReturn, _distribution, FLAGS);\n', '\n', '        // Reset approval\n', '        _fromIERC20.approve(ONE_SPLIT_ADDRESS, 0);\n', '    }\n', '\n', '    function getWeth() public payable onlyOwner {\n', '        _getWeth(msg.value);\n', '    }\n', '\n', '    function _getWeth(uint256 _amount) internal {\n', '        (bool success, ) = WETH.call.value(_amount)("");\n', '        require(success, "failed to get weth");\n', '    }\n', '\n', '    function approveWeth(uint256 _amount) public onlyOwner {\n', '        _approveWeth(_amount);\n', '    }\n', '\n', '    function _approveWeth(uint256 _amount) internal {\n', '        IERC20(WETH).approve(ZRX_STAKING_PROXY, _amount);\n', '    }\n', '\n', '    // KEEP THIS FUNCTION IN CASE THE CONTRACT RECEIVES TOKENS!\n', '    function withdrawToken(address _tokenAddress) public onlyOwner {\n', '        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\n', '        IERC20(_tokenAddress).transfer(OWNER, balance);\n', '    }\n', '\n', '    // KEEP THIS FUNCTION IN CASE THE CONTRACT KEEPS LEFTOVER ETHER!\n', '    function withdrawEther() public onlyOwner {\n', '        address self = address(this); // workaround for a possible solidity bug\n', '        uint256 balance = self.balance;\n', '        address(OWNER).transfer(balance);\n', '    }\n', '}']