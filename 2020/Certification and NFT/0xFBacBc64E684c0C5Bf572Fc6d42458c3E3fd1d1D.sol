['// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IWSFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IWSController {\n', '    function getLogicForPair() external view returns(address);\n', '    function getCurrentAdmin() external view returns(address);\n', '    function updatePairLogic(address _logic) external;\n', '    function updateCurrentAdmin(address _newAdmin) external;\n', '    function updateProxyPair(address _proxy) external;\n', '    function setAdminForProxy(address _proxy) external;\n', '}\n', '\n', '\n', '\n', 'interface IWSProxy {\n', '    function initialize(address _implementation, address _admin, bytes calldata _data) external;\n', '    function upgradeTo(address _proxy) external;\n', '    function upgradeToAndCall(address _proxy, bytes calldata data) external payable;\n', '    function changeAdmin(address newAdmin) external;\n', '    function admin() external returns (address);\n', '    function implementation() external returns (address);\n', '}\n', '\n', '/**\n', ' * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n', ' * be specified by overriding the virtual {_implementation} function.\n', ' * \n', ' * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n', ' * different contract through the {_delegate} function.\n', ' * \n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'abstract contract Proxy {\n', '    /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _delegate(address implementation) internal {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n', '     * and {_fallback} should delegate.\n', '     */\n', '    function _implementation() internal virtual view returns (address);\n', '\n', '    /**\n', '     * @dev Delegates the current call to the address returned by `_implementation()`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal {\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback () payable external {\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive () payable external {\n', '        _delegate(_implementation());\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n', ' * implementation address that can be changed. This address is stored in storage in the location specified by\n', " * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n", ' * implementation behind the proxy.\n', ' * \n', ' * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n', ' * {TransparentUpgradeableProxy}.\n', ' */\n', 'contract UpgradeableProxy is Proxy {\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n', '     * \n', "     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor() public payable {\n', '        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _implementation() internal override view returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            impl := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the proxy to a new implementation.\n', '     * \n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeTo(address newImplementation) virtual internal {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address newImplementation) private {\n', '        address implementation = _implementation();\n', '        require(implementation != newImplementation, "WSProxy: Attemps update proxy with the same implementation");\n', '\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newImplementation)\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This contract implements a proxy that is upgradeable by an admin.\n', ' * \n', ' * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n', ' * clashing], which can potentially be used in an attack, this contract uses the\n', ' * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n', ' * things that go hand in hand:\n', ' * \n', ' * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n', ' * that call matches one of the admin functions exposed by the proxy itself.\n', ' * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n', ' * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n', ' * "admin cannot fallback to proxy target".\n', ' * \n', ' * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n', " * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n", ' * to sudden errors when trying to call a function from the proxy implementation.\n', ' * \n', ' * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n', ' * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\n', ' */\n', 'contract TransparentUpgradeableProxy is UpgradeableProxy, IWSProxy {\n', '    /**\n', '     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n', '     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\n', '     */\n', '    constructor() public payable UpgradeableProxy() {\n', '        require(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1), "Wrong admin slot");\n', '        _setAdmin(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the admin account has changed.\n', '     */\n', '    event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n', '     */\n', '    modifier ifAdmin() {\n', '        if (msg.sender == _admin()) {\n', '            _;\n', '        } else {\n', '            _fallback();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n', '     * \n', '     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n', '     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n', '     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n', '     */\n', '    function admin() external override ifAdmin returns (address) {\n', '        return _admin();\n', '    }\n', '\n', '    function initialize(address _newImplementation, address _admin, bytes calldata _data) external override ifAdmin {\n', '        _upgradeTo(_newImplementation);\n', '        _setAdmin(_admin);\n', '        if(_data.length > 0) {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success,) = _implementation().delegatecall(_data);\n', '            require(success);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current implementation.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n', '     * \n', '     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n', '     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n', '     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n', '     */\n', '    function implementation() external override ifAdmin returns (address) {\n', '        return _implementation();\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the admin of the proxy.\n', '     * \n', '     * Emits an {AdminChanged} event.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n', '     */\n', '    function changeAdmin(address newAdmin) external override ifAdmin {\n', '        require(newAdmin != _admin(), "WSProxy: new admin is the same admin.");\n', '        emit AdminChanged(_admin(), newAdmin);\n', '        _setAdmin(newAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n', '     */\n', '    function upgradeTo(address newImplementation) external override ifAdmin {\n', '        _upgradeTo(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n', '     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n', '     * proxied contract.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n', '     */\n', '    function upgradeToAndCall(address newImplementation, bytes calldata data) external override payable ifAdmin {\n', '        _upgradeTo(newImplementation);\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success,) = newImplementation.delegatecall(data);\n', '        require(success);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     */\n', '    function _admin() internal view returns (address adm) {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            adm := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 admin slot.\n', '     */\n', '    function _setAdmin(address newAdmin) private {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '        require(newAdmin != address(0), "WSProxy: Can\'t set admin to zero address.");\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newAdmin)\n', '        }\n', '    }\n', '}\n', '\n', 'contract WSProxyPair is TransparentUpgradeableProxy {\n', '    constructor() public payable TransparentUpgradeableProxy() {\n', '    }\n', '}\n', '\n', 'interface IWSPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '    function isLocked() external view returns (uint);\n', '\n', '    function initialize(address _factory, address _token0, address _token1) external returns(bool);\n', '}\n', '\n', 'interface IWSImplementation {\n', '\tfunction getImplementationType() external pure returns(uint256);\n', '}\n', '\n', 'contract WSFactory is IWSFactory, IWSImplementation {\n', '    bool private initialized;\n', '    address public override feeTo;\n', '    address public override feeToSetter;\n', '    address public controller;\n', '\n', '    mapping(address => mapping(address => address)) public override getPair;\n', '    address[] public override allPairs;\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function initialize(address _feeToSetter, address _controller) public returns(bool) {\n', '        require(initialized == false, "WSFactory: Factory was already initialized.");\n', '        require(_controller != address(0), "WSFactory: controller should not bo zero address.");\n', '        require(_feeToSetter != address(0), "WSFactory: _feeToSetter should not be zero address.");\n', '        feeToSetter = _feeToSetter;\n', '        controller = _controller;\n', '        initialized = true;\n', '        return true;\n', '    }\n', '\n', '    function allPairsLength() external override view returns (uint) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n', "        require(tokenA != tokenB, 'WSwap: IDENTICAL_ADDRESSES');\n", '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'WSwap: ZERO_ADDRESS');\n", "        require(getPair[token0][token1] == address(0), 'WSwap: PAIR_EXISTS'); // single check is sufficient\n", '        bytes memory bytecode = type(WSProxyPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        // Factory as current proxypair admin initializes proxy with logic and right admin\n', '        IWSProxy(pair).initialize(IWSController(controller).getLogicForPair(), IWSController(controller).getCurrentAdmin(), "");\n', '        // Factory initialized created pair with tokens variables\n', '        require(IWSPair(pair).initialize(address(this), token0, token1) == true, "WSFactory: Pair initialize not succeed.");\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '\n', '    function setFeeTo(address _feeTo) external override {\n', "        require(msg.sender == feeToSetter, 'WSwap: FORBIDDEN');\n", '        feeTo = _feeTo;\n', '    }\n', '\n', '    function setFeeToSetter(address _feeToSetter) external override {\n', "        require(msg.sender == feeToSetter, 'WSwap: FORBIDDEN');\n", '        feeToSetter = _feeToSetter;\n', '    }\n', '\n', '    function getImplementationType() external pure override returns(uint256) {\n', '        /// 1 is a factory type\n', '        return 1;\n', '    }\n', '}']