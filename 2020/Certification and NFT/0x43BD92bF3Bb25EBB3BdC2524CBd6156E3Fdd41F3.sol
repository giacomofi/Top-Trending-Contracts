['// File: contracts\\modules\\Ownable.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\whiteList.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint32.\n', '     */\n', 'library whiteListUint32 {\n', '    /**\n', '     * @dev add uint32 into white list.\n', '     * @param whiteList the storage whiteList.\n', '     * @param temp input value\n', '     */\n', '\n', '    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\n', '        if (!isEligibleUint32(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    /**\n', '     * @dev remove uint32 from whitelist.\n', '     */\n', '    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.pop();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint256.\n', '     */\n', 'library whiteListUint256 {\n', '    // add whiteList\n', '    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\n', '        if (!isEligibleUint256(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.pop();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible address.\n', '     */\n', 'library whiteListAddress {\n', '    // add whiteList\n', '    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\n', '        if (!isEligibleAddress(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.pop();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\Operator.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * each operator can be granted exclusive access to specific functions.\n', ' *\n', ' */\n', 'contract Operator is Ownable {\n', '    using whiteListAddress for address[];\n', '    address[] private _operatorList;\n', '    /**\n', '     * @dev modifier, every operator can be granted exclusive access to specific functions. \n', '     *\n', '     */\n', '    modifier onlyOperator() {\n', '        require(_operatorList.isEligibleAddress(msg.sender),"Managerable: caller is not the Operator");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev modifier, Only indexed operator can be granted exclusive access to specific functions. \n', '     *\n', '     */\n', '    modifier onlyOperatorIndex(uint256 index) {\n', '        require(_operatorList.length>index && _operatorList[index] == msg.sender,"Managerable: caller is not the eligible Operator");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev add a new operator by owner. \n', '     *\n', '     */\n', '    function addOperator(address addAddress)public onlyOwner{\n', '        _operatorList.addWhiteListAddress(addAddress);\n', '    }\n', '    /**\n', '     * @dev modify indexed operator by owner. \n', '     *\n', '     */\n', '    function setOperator(uint256 index,address addAddress)public onlyOwner{\n', '        _operatorList[index] = addAddress;\n', '    }\n', '    /**\n', '     * @dev remove operator by owner. \n', '     *\n', '     */\n', '    function removeOperator(address removeAddress)public onlyOwner returns (bool){\n', '        return _operatorList.removeWhiteListAddress(removeAddress);\n', '    }\n', '    /**\n', '     * @dev get all operators. \n', '     *\n', '     */\n', '    function getOperator()public view returns (address[] memory) {\n', '        return _operatorList;\n', '    }\n', '    /**\n', '     * @dev set all operators by owner. \n', '     *\n', '     */\n', '    function setOperators(address[] memory operators)public onlyOwner {\n', '        _operatorList = operators;\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\AggregatorV3Interface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: contracts\\interfaces\\IERC20.sol\n', '\n', 'pragma solidity ^0.6.11;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\FNXOracle.sol\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', '\n', '\n', '\n', 'contract FNXOracle is Operator {\n', '    mapping(uint256 => AggregatorV3Interface) private assetsMap;\n', '    mapping(uint256 => uint256) private decimalsMap;\n', '    mapping(uint256 => uint256) private priceMap;\n', '    uint256 internal decimals = 1;\n', '\n', '    /**\n', '     * Network: Ropsten\n', '     * Aggregator: LTC/USD\n', '     * Address: 0x727B59d0989d6D1961138122BC9F94f534E82B32\n', '     */\n', '    constructor() public {\n', '        //mainnet\n', '        assetsMap[1] = AggregatorV3Interface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\n', '        assetsMap[2] = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '        assetsMap[3] = AggregatorV3Interface(0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2);\n', '        assetsMap[4] = AggregatorV3Interface(0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699);\n', '        assetsMap[5] = AggregatorV3Interface(0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c);\n', '        assetsMap[0] = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '        assetsMap[uint256(0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B)] = AggregatorV3Interface(0x80070f7151BdDbbB1361937ad4839317af99AE6c);\n', '        priceMap[uint256(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 1e20;\n', '        decimalsMap[0] = 18;\n', '        decimalsMap[1] = 18;\n', '        decimalsMap[2] = 18;\n', '        decimalsMap[3] = 18;\n', '        decimalsMap[4] = 18;\n', '        decimalsMap[5] = 18;\n', '        decimalsMap[uint256(0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B)] = 18;\n', '        decimalsMap[uint256(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 6;\n', '        /*\n', '        //rinkeby\n', '        assetsMap[1] = AggregatorV3Interface(0xECe365B379E1dD183B20fc5f022230C044d51404);\n', '        assetsMap[2] = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\n', '        assetsMap[3] = AggregatorV3Interface(0xd8bD0a1cB028a31AA859A21A3758685a95dE4623);\n', '        assetsMap[4] = AggregatorV3Interface(0xE96C4407597CD507002dF88ff6E0008AB41266Ee);\n', '        assetsMap[5] = AggregatorV3Interface(0xd8bD0a1cB028a31AA859A21A3758685a95dE4623);\n', '        assetsMap[0] = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\n', '        assetsMap[uint256(0xaf30F6A6B09728a4e793ED6d9D0A7CcBa192c229)] = AggregatorV3Interface(0xcf74110A02b1D391B27cE37364ABc3b279B1d9D1);\n', '        priceMap[uint256(0xD12BC93Ac5eA2b4Ba99e0ffEd053a53B6d18C7a3)] = 1e20;\n', '        decimalsMap[0] = 18;\n', '        decimalsMap[1] = 18;\n', '        decimalsMap[2] = 18;\n', '        decimalsMap[3] = 18;\n', '        decimalsMap[4] = 18;\n', '        decimalsMap[5] = 18;\n', '        decimalsMap[uint256(0xaf30F6A6B09728a4e793ED6d9D0A7CcBa192c229)] = 18;\n', '        decimalsMap[uint256(0xD12BC93Ac5eA2b4Ba99e0ffEd053a53B6d18C7a3)] = 6;\n', '        */\n', '\n', '\n', '    }\n', '    function setDecimals(uint256 newDecimals) public onlyOwner{\n', '        decimals = newDecimals;\n', '    }\n', '    function getAssetAndUnderlyingPrice(address asset,uint256 underlying) public view returns (uint256,uint256) {\n', '        return (getUnderlyingPrice(uint256(asset)),getUnderlyingPrice(underlying));\n', '    }\n', '    function setPrices(uint256[]memory assets,uint256[]memory prices) public onlyOwner {\n', '        require(assets.length == prices.length, "input arrays\' length are not equal");\n', '        uint256 len = assets.length;\n', '        for (uint i=0;i<len;i++){\n', '            priceMap[i] = prices[i];\n', '        }\n', '    }\n', '    function getPrices(uint256[]memory assets) public view returns (uint256[]memory) {\n', '        uint256 len = assets.length;\n', '        uint256[] memory prices = new uint256[](len);\n', '        for (uint i=0;i<len;i++){\n', '            prices[i] = getUnderlyingPrice(assets[i]);\n', '        }\n', '        return prices;\n', '    }\n', '        /**\n', '  * @notice retrieves price of an asset\n', '  * @dev function to get price for an asset\n', '  * @param asset Asset for which to get the price\n', '  * @return uint mantissa of asset price (scaled by 1e8) or zero if unset or contract paused\n', '  */\n', '    function getPrice(address asset) public view returns (uint256) {\n', '        return getUnderlyingPrice(uint256(asset));\n', '    }\n', '    function getUnderlyingPrice(uint256 underlying) public view returns (uint256) {\n', '        if (underlying == 3){\n', '            return getMKRPrice();\n', '        }\n', '        AggregatorV3Interface assetsPrice = assetsMap[underlying];\n', '        if (address(assetsPrice) != address(0)){\n', '            (, int price,,,) = assetsPrice.latestRoundData();\n', '            uint256 tokenDecimals = decimalsMap[underlying];\n', '            if (tokenDecimals < 18){\n', '                return uint256(price)/decimals*(10**(18-tokenDecimals));  \n', '            }else if (tokenDecimals > 18){\n', '                return uint256(price)/decimals/(10**(18-tokenDecimals)); \n', '            }else{\n', '                return uint256(price)/decimals;\n', '            }\n', '        }else {\n', '            return priceMap[underlying];\n', '        }\n', '    }\n', '    function getMKRPrice() internal view returns (uint256) {\n', '        AggregatorV3Interface assetsPrice = assetsMap[3];\n', '        AggregatorV3Interface ethPrice = assetsMap[0];\n', '        if (address(assetsPrice) != address(0) && address(ethPrice) != address(0)){\n', '            (, int price,,,) = assetsPrice.latestRoundData();\n', '            (, int ethPrice,,,) = ethPrice.latestRoundData();\n', '            uint256 tokenDecimals = decimalsMap[3];\n', '            uint256 mkrPrice = uint256(price*ethPrice)/decimals/1e18;\n', '            if (tokenDecimals < 18){\n', '                return mkrPrice/decimals*(10**(18-tokenDecimals));  \n', '            }else if (tokenDecimals > 18){\n', '                return mkrPrice/decimals/(10**(18-tokenDecimals)); \n', '            }else{\n', '                return mkrPrice/decimals;\n', '            }\n', '        }else {\n', '            return priceMap[3];\n', '        }\n', '    }\n', '    /**\n', '      * @notice set price of an asset\n', '      * @dev function to set price for an asset\n', '      * @param asset Asset for which to set the price\n', "      * @param price the Asset's price\n", '      */    \n', '    function setPrice(address asset,uint256 price) public onlyOperatorIndex(0) {\n', '        priceMap[uint256(asset)] = price;\n', '\n', '    }\n', '    /**\n', '      * @notice set price of an underlying\n', '      * @dev function to set price for an underlying\n', '      * @param underlying underlying for which to set the price\n', "      * @param price the underlying's price\n", '      */  \n', '    function setUnderlyingPrice(uint256 underlying,uint256 price) public onlyOperatorIndex(0) {\n', '        require(underlying>0 , "underlying cannot be zero");\n', '        priceMap[underlying] = price;\n', '    }\n', '        /**\n', '      * @notice set price of an asset\n', '      * @dev function to set price for an asset\n', '      * @param asset Asset for which to set the price\n', "      * @param aggergator the Asset's aggergator\n", '      */    \n', '    function setAssetsAggregator(address asset,address aggergator,uint256 _decimals) public onlyOwner {\n', '        assetsMap[uint256(asset)] = AggregatorV3Interface(aggergator);\n', '        decimalsMap[uint256(asset)] = _decimals;\n', '    }\n', '    /**\n', '      * @notice set price of an underlying\n', '      * @dev function to set price for an underlying\n', '      * @param underlying underlying for which to set the price\n', "      * @param aggergator the underlying's aggergator\n", '      */  \n', '    function setUnderlyingAggregator(uint256 underlying,address aggergator,uint256 _decimals) public onlyOwner {\n', '        require(underlying>0 , "underlying cannot be zero");\n', '        assetsMap[underlying] = AggregatorV3Interface(aggergator);\n', '        decimalsMap[underlying] = _decimals;\n', '    }\n', '    function getAssetsAggregator(address asset) public view returns (address,uint256) {\n', '        return (address(assetsMap[uint256(asset)]),decimalsMap[uint256(asset)]);\n', '    }\n', '    function getUnderlyingAggregator(uint256 underlying) public view returns (address,uint256) {\n', '        return (address(assetsMap[underlying]),decimalsMap[underlying]);\n', '    }\n', '}']