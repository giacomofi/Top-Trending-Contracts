['// File: contracts/Lend/ProtocolInterface.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'abstract contract ProtocolInterface {\n', '    function deposit(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public virtual;\n', '\n', '    function withdraw(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public virtual;\n', '}\n', '\n', '// File: contracts/interfaces/ERC20.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface ERC20 {\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _src, address indexed _dst, uint256 _amount);\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    // function decimals() external view returns (uint256 digits);\n', '\n', '   \n', '}\n', '\n', '// File: contracts/interfaces/CTokenInterface.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'abstract contract CTokenInterface is ERC20 {\n', '    function mint(uint256 mintAmount) external virtual returns (uint256);\n', '\n', '    function mint() external virtual payable;\n', '\n', '    function redeem(uint256 redeemTokens) external virtual returns (uint256);\n', '\n', '    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n', '\n', '    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrow() external virtual payable;\n', '\n', '    function repayBorrowBehalf(address borrower, uint256 repayAmount)\n', '        external\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function repayBorrowBehalf(address borrower) external virtual payable;\n', '\n', '    function liquidateBorrow(\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        address cTokenCollateral\n', '    ) external virtual returns (uint256);\n', '\n', '    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\n', '\n', '    function exchangeRateCurrent() external virtual returns (uint256);\n', '\n', '    function supplyRatePerBlock() external virtual returns (uint256);\n', '\n', '    function borrowRatePerBlock() external virtual returns (uint256);\n', '\n', '    function totalReserves() external virtual returns (uint256);\n', '\n', '    function reserveFactorMantissa() external virtual returns (uint256);\n', '\n', '    function borrowBalanceCurrent(address account) external virtual returns (uint256);\n', '\n', '    function totalBorrowsCurrent() external virtual returns (uint256);\n', '\n', '    function getCash() external virtual returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n', '}\n', '\n', '// File: contracts/Lend/compound/CompoundProtocol.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice CompoundProtocol\n', ' * @author Solidefi\n', ' */\n', 'contract CompoundProtocol is ProtocolInterface {\n', '    CTokenInterface public cTokenContract;\n', '\n', '    /**\n', '     * @dev Deposit DAI to compound protocol return cDAI to user proxy wallet.\n', '     * @param _user User proxy wallet address.\n', '     * @param _amount Amount of DAI.\n', '     */\n', '\n', '    function deposit(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public override {\n', '        cTokenContract = CTokenInterface(_cToken);\n', '\n', '        require(ERC20(_token).transferFrom(_user, address(this), _amount), "Nothing to deposit");\n', '\n', '        ERC20(_token).approve(_cToken, uint256(-1));\n', '        require(cTokenContract.mint(_amount) == 0, "Failed to mint");\n', '        cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     *@dev Withdraw DAI from Compound protcol return it to users EOA\n', '     *@param _user User proxy wallet address.\n', '     *@param _amount Amount of DAI.\n', '     */\n', '    function withdraw(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public override {\n', '        cTokenContract = CTokenInterface(_cToken);\n', '        require(\n', '            cTokenContract.transferFrom(_user, address(this), ERC20(_cToken).balanceOf(_user)),\n', '            "Nothing to withdraw"\n', '        );\n', '        cTokenContract.approve(_cToken, uint256(-1));\n', '        require(cTokenContract.redeemUnderlying(_amount) == 0, "Reedem Failed");\n', '        uint256 cDaiBalance = cTokenContract.balanceOf(address(this));\n', '        if (cDaiBalance > 0) {\n', '            cTokenContract.transfer(_user, cDaiBalance);\n', '        }\n', '        ERC20(_token).transfer(_user, _amount);\n', '    }\n', '}']