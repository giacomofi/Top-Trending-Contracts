['// File: contracts/src/common/lifecycle/Killable.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * A module that allows contracts to self-destruct.\n', ' */\n', 'contract Killable {\n', '\taddress payable public _owner;\n', '\n', '\t/**\n', '\t * Initialized with the deployer as the owner.\n', '\t */\n', '\tconstructor() internal {\n', '\t\t_owner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * Self-destruct the contract.\n', '\t * This function can only be executed by the owner.\n', '\t */\n', '\tfunction kill() public {\n', '\t\trequire(msg.sender == _owner, "only owner method");\n', '\t\tselfdestruct(_owner);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/src/common/interface/IGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IGroup {\n', '\tfunction isGroup(address _addr) public view returns (bool);\n', '\n', '\tfunction addGroup(address _addr) external;\n', '\n', '\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\n', '\t\treturn keccak256(abi.encodePacked("_group", _addr));\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/AddressValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * A module that provides common validations patterns.\n', ' */\n', 'contract AddressValidator {\n', '\tstring constant errorMessage = "this is illegal address";\n', '\n', '\t/**\n', '\t * Validates passed address is not a zero address.\n', '\t */\n', '\tfunction validateIllegalAddress(address _addr) external pure {\n', '\t\trequire(_addr != address(0), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in an address set.\n', '\t */\n', '\tfunction validateGroup(address _addr, address _groupAddr) external view {\n', '\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in two address sets.\n', '\t */\n', '\tfunction validateGroups(\n', '\t\taddress _addr,\n', '\t\taddress _groupAddr1,\n', '\t\taddress _groupAddr2\n', '\t) external view {\n', '\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates that the address of the first argument is equal to the address of the second argument.\n', '\t */\n', '\tfunction validateAddress(address _addr, address _target) external pure {\n', '\t\trequire(_addr == _target, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the two addresses.\n', '\t */\n', '\tfunction validateAddresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target2, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the three addresses.\n', '\t */\n', '\tfunction validate3Addresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2,\n', '\t\taddress _target3\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tif (_addr == _target2) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target3, errorMessage);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/UsingValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '// prettier-ignore\n', '\n', '\n', '/**\n', ' * Module for contrast handling AddressValidator.\n', ' */\n', 'contract UsingValidator {\n', '\tAddressValidator private _validator;\n', '\n', '\t/**\n', '\t * Create a new AddressValidator contract when initialize.\n', '\t */\n', '\tconstructor() public {\n', '\t\t_validator = new AddressValidator();\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set AddressValidator address.\n', '\t */\n', '\tfunction addressValidator() internal view returns (AddressValidator) {\n', '\t\treturn _validator;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/AddressConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * A registry contract to hold the latest contract addresses.\n', ' * Dev Protocol will be upgradeable by this contract.\n', ' */\n', 'contract AddressConfig is Ownable, UsingValidator, Killable {\n', '\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\n', '\taddress public allocator;\n', '\taddress public allocatorStorage;\n', '\taddress public withdraw;\n', '\taddress public withdrawStorage;\n', '\taddress public marketFactory;\n', '\taddress public marketGroup;\n', '\taddress public propertyFactory;\n', '\taddress public propertyGroup;\n', '\taddress public metricsGroup;\n', '\taddress public metricsFactory;\n', '\taddress public policy;\n', '\taddress public policyFactory;\n', '\taddress public policySet;\n', '\taddress public policyGroup;\n', '\taddress public lockup;\n', '\taddress public lockupStorage;\n', '\taddress public voteTimes;\n', '\taddress public voteTimesStorage;\n', '\taddress public voteCounter;\n', '\taddress public voteCounterStorage;\n', '\n', '\t/**\n', '\t * Set the latest Allocator contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setAllocator(address _addr) external onlyOwner {\n', '\t\tallocator = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest AllocatorStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the AllocatorStorage contract is not used.\n', '\t */\n', '\tfunction setAllocatorStorage(address _addr) external onlyOwner {\n', '\t\tallocatorStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Withdraw contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdraw(address _addr) external onlyOwner {\n', '\t\twithdraw = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest WithdrawStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdrawStorage(address _addr) external onlyOwner {\n', '\t\twithdrawStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketFactory(address _addr) external onlyOwner {\n', '\t\tmarketFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketGroup(address _addr) external onlyOwner {\n', '\t\tmarketGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyFactory(address _addr) external onlyOwner {\n', '\t\tpropertyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyGroup(address _addr) external onlyOwner {\n', '\t\tpropertyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsFactory(address _addr) external onlyOwner {\n', '\t\tmetricsFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsGroup(address _addr) external onlyOwner {\n', '\t\tmetricsGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyFactory(address _addr) external onlyOwner {\n', '\t\tpolicyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyGroup(address _addr) external onlyOwner {\n', '\t\tpolicyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicySet contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicySet(address _addr) external onlyOwner {\n', '\t\tpolicySet = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Policy contract address.\n', '\t * Only the latest PolicyFactory contract can execute this function.\n', '\t */\n', '\tfunction setPolicy(address _addr) external {\n', '\t\taddressValidator().validateAddress(msg.sender, policyFactory);\n', '\t\tpolicy = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Dev contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setToken(address _addr) external onlyOwner {\n', '\t\ttoken = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Lockup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setLockup(address _addr) external onlyOwner {\n', '\t\tlockup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest LockupStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the LockupStorage contract is not used as a stand-alone because it is inherited from the Lockup contract.\n', '\t */\n', '\tfunction setLockupStorage(address _addr) external onlyOwner {\n', '\t\tlockupStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimes contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimes contract is not used.\n', '\t */\n', '\tfunction setVoteTimes(address _addr) external onlyOwner {\n', '\t\tvoteTimes = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimesStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimesStorage contract is not used.\n', '\t */\n', '\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\n', '\t\tvoteTimesStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounter contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setVoteCounter(address _addr) external onlyOwner {\n', '\t\tvoteCounter = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounterStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteCounterStorage contract is not used as a stand-alone because it is inherited from the VoteCounter contract.\n', '\t */\n', '\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\n', '\t\tvoteCounterStorage = _addr;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/UsingConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * Module for using AddressConfig contracts.\n', ' */\n', 'contract UsingConfig {\n', '\tAddressConfig private _config;\n', '\n', '\t/**\n', '\t * Initialize the argument as AddressConfig address.\n', '\t */\n', '\tconstructor(address _addressConfig) public {\n', '\t\t_config = AddressConfig(_addressConfig);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig instance.\n', '\t */\n', '\tfunction config() internal view returns (AddressConfig) {\n', '\t\treturn _config;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig address.\n', '\t */\n', '\tfunction configAddress() external view returns (address) {\n', '\t\treturn address(_config);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/src/allocator/IAllocator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IAllocator {\n', '\tfunction calculateMaxRewardsPerBlock() public view returns (uint256);\n', '\n', '\tfunction beforeBalanceChange(\n', '\t\taddress _property,\n', '\t\taddress _from,\n', '\t\taddress _to\n', '\t\t// solium-disable-next-line indentation\n', '\t) external;\n', '}\n', '\n', '// File: contracts/src/property/IProperty.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IProperty {\n', '\tfunction author() external view returns (address);\n', '\n', '\tfunction withdraw(address _sender, uint256 _value) external;\n', '}\n', '\n', '// File: contracts/src/property/Property.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '// prettier-ignore\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * A contract that represents the assets of the user and collects staking from the stakers.\n', ' * Property contract inherits ERC20.\n', ' * Holders of Property contracts(tokens) receive holder rewards according to their share.\n', ' */\n', 'contract Property is\n', '\tERC20,\n', '\tERC20Detailed,\n', '\tUsingConfig,\n', '\tUsingValidator,\n', '\tIProperty\n', '{\n', '\tusing SafeMath for uint256;\n', '\tuint8 private constant _property_decimals = 18;\n', '\tuint256 private constant _supply = 10000000000000000000000000;\n', '\taddress public author;\n', '\n', '\t/**\n', '\t * Initializes the passed value as AddressConfig address, author address, token name, and token symbol.\n', '\t */\n', '\tconstructor(\n', '\t\taddress _config,\n', '\t\taddress _own,\n', '\t\tstring memory _name,\n', '\t\tstring memory _symbol\n', '\t)\n', '\t\tpublic\n', '\t\tUsingConfig(_config)\n', '\t\tERC20Detailed(_name, _symbol, _property_decimals)\n', '\t{\n', '\t\t/**\n', '\t\t * Validates the sender is PropertyFactory contract.\n', '\t\t */\n', '\t\taddressValidator().validateAddress(\n', '\t\t\tmsg.sender,\n', '\t\t\tconfig().propertyFactory()\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Sets the author.\n', '\t\t */\n', '\t\tauthor = _own;\n', '\n', '\t\t/**\n', '\t\t * Mints to the author 100% of the total supply.\n', '\t\t */\n', '\t\t_mint(author, _supply);\n', '\t}\n', '\n', '\t/**\n', '\t * Hook on `transfer` and call `Withdraw.beforeBalanceChange` function.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\t/**\n', '\t\t * Validates the destination is not 0 address.\n', '\t\t */\n', '\t\taddressValidator().validateIllegalAddress(_to);\n', '\t\trequire(_value != 0, "illegal transfer value");\n', '\n', '\t\t/**\n', '\t\t * Calls Withdraw contract via Allocator contract.\n', '\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\n', '\t\t */\n', '\t\tIAllocator(config().allocator()).beforeBalanceChange(\n', '\t\t\taddress(this),\n', '\t\t\tmsg.sender,\n', '\t\t\t_to\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Calls the transfer of ERC20.\n', '\t\t */\n', '\t\t_transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * Hook on `transferFrom` and call `Withdraw.beforeBalanceChange` function.\n', '\t */\n', '\tfunction transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t) public returns (bool) {\n', '\t\t/**\n', '\t\t * Validates the source and destination is not 0 address.\n', '\t\t */\n', '\t\taddressValidator().validateIllegalAddress(_from);\n', '\t\taddressValidator().validateIllegalAddress(_to);\n', '\t\trequire(_value != 0, "illegal transfer value");\n', '\n', '\t\t/**\n', '\t\t * Calls Withdraw contract via Allocator contract.\n', '\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\n', '\t\t */\n', '\t\tIAllocator(config().allocator()).beforeBalanceChange(\n', '\t\t\taddress(this),\n', '\t\t\t_from,\n', '\t\t\t_to\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Calls the transfer of ERC20.\n', '\t\t */\n', '\t\t_transfer(_from, _to, _value);\n', '\n', '\t\t/**\n', '\t\t * Reduces the allowance amount.\n', '\t\t */\n', '\t\tuint256 allowanceAmount = allowance(_from, msg.sender);\n', '\t\t_approve(\n', '\t\t\t_from,\n', '\t\t\tmsg.sender,\n', '\t\t\tallowanceAmount.sub(\n', '\t\t\t\t_value,\n', '\t\t\t\t"ERC20: transfer amount exceeds allowance"\n', '\t\t\t)\n', '\t\t);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * Transfers the staking amount to the original owner.\n', '\t */\n', '\tfunction withdraw(address _sender, uint256 _value) external {\n', '\t\t/**\n', '\t\t * Validates the sender is Lockup contract.\n', '\t\t */\n', '\t\taddressValidator().validateAddress(msg.sender, config().lockup());\n', '\n', '\t\t/**\n', '\t\t * Transfers the passed amount to the original owner.\n', '\t\t */\n', '\t\tERC20 devToken = ERC20(config().token());\n', '\t\tbool result = devToken.transfer(_sender, _value);\n', '\t\trequire(result, "dev transfer failed");\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/storage/EternalStorage.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * Module for persisting states.\n', ' * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\n', ' */\n', 'contract EternalStorage {\n', '\taddress private currentOwner = msg.sender;\n', '\n', '\tmapping(bytes32 => uint256) private uIntStorage;\n', '\tmapping(bytes32 => string) private stringStorage;\n', '\tmapping(bytes32 => address) private addressStorage;\n', '\tmapping(bytes32 => bytes32) private bytesStorage;\n', '\tmapping(bytes32 => bool) private boolStorage;\n', '\tmapping(bytes32 => int256) private intStorage;\n', '\n', '\t/**\n', '\t * Modifiers to validate that only the owner can execute.\n', '\t */\n', '\tmodifier onlyCurrentOwner() {\n', '\t\trequire(msg.sender == currentOwner, "not current owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * Transfer the owner.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction changeOwner(address _newOwner) external {\n', '\t\trequire(msg.sender == currentOwner, "not current owner");\n', '\t\tcurrentOwner = _newOwner;\n', '\t}\n', '\n', '\t// *** Getter Methods ***\n', '\n', '\t/**\n', '\t * Returns the value of the `uint256` type that mapped to the given key.\n', '\t */\n', '\tfunction getUint(bytes32 _key) external view returns (uint256) {\n', '\t\treturn uIntStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `string` type that mapped to the given key.\n', '\t */\n', '\tfunction getString(bytes32 _key) external view returns (string memory) {\n', '\t\treturn stringStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `address` type that mapped to the given key.\n', '\t */\n', '\tfunction getAddress(bytes32 _key) external view returns (address) {\n', '\t\treturn addressStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `bytes32` type that mapped to the given key.\n', '\t */\n', '\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\n', '\t\treturn bytesStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `bool` type that mapped to the given key.\n', '\t */\n', '\tfunction getBool(bytes32 _key) external view returns (bool) {\n', '\t\treturn boolStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `int256` type that mapped to the given key.\n', '\t */\n', '\tfunction getInt(bytes32 _key) external view returns (int256) {\n', '\t\treturn intStorage[_key];\n', '\t}\n', '\n', '\t// *** Setter Methods ***\n', '\n', '\t/**\n', '\t * Maps a value of `uint256` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\n', '\t\tuIntStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `string` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setString(bytes32 _key, string calldata _value)\n', '\t\texternal\n', '\t\tonlyCurrentOwner\n', '\t{\n', '\t\tstringStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `address` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setAddress(bytes32 _key, address _value)\n', '\t\texternal\n', '\t\tonlyCurrentOwner\n', '\t{\n', '\t\taddressStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `bytes32` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\n', '\t\tbytesStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `bool` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\n', '\t\tboolStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `int256` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\n', '\t\tintStorage[_key] = _value;\n', '\t}\n', '\n', '\t// *** Delete Methods ***\n', '\n', '\t/**\n', '\t * Deletes the value of the `uint256` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete uIntStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `string` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete stringStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `address` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete addressStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `bytes32` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete bytesStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `bool` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete boolStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `int256` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete intStorage[_key];\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/storage/UsingStorage.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '/**\n', ' * Module for contrast handling EternalStorage.\n', ' */\n', 'contract UsingStorage is Ownable {\n', '\taddress private _storage;\n', '\n', '\t/**\n', '\t * Modifier to verify that EternalStorage is set.\n', '\t */\n', '\tmodifier hasStorage() {\n', '\t\trequire(_storage != address(0), "storage is not set");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set EternalStorage instance.\n', '\t */\n', '\tfunction eternalStorage()\n', '\t\tinternal\n', '\t\tview\n', '\t\thasStorage\n', '\t\treturns (EternalStorage)\n', '\t{\n', '\t\treturn EternalStorage(_storage);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set EternalStorage address.\n', '\t */\n', '\tfunction getStorageAddress() external view hasStorage returns (address) {\n', '\t\treturn _storage;\n', '\t}\n', '\n', '\t/**\n', '\t * Create a new EternalStorage contract.\n', '\t * This function call will fail if the EternalStorage contract is already set.\n', '\t * Also, only the owner can execute it.\n', '\t */\n', '\tfunction createStorage() external onlyOwner {\n', '\t\trequire(_storage == address(0), "storage is set");\n', '\t\tEternalStorage tmp = new EternalStorage();\n', '\t\t_storage = address(tmp);\n', '\t}\n', '\n', '\t/**\n', '\t * Assigns the EternalStorage contract that has already been created.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setStorage(address _storageAddress) external onlyOwner {\n', '\t\t_storage = _storageAddress;\n', '\t}\n', '\n', '\t/**\n', '\t * Delegates the owner of the current EternalStorage contract.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction changeOwner(address newOwner) external onlyOwner {\n', '\t\tEternalStorage(_storage).changeOwner(newOwner);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/property/PropertyGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', 'contract PropertyGroup is UsingConfig, UsingStorage, UsingValidator, IGroup {\n', '\t// solium-disable-next-line no-empty-blocks\n', '\tconstructor(address _config) public UsingConfig(_config) {}\n', '\n', '\tfunction addGroup(address _addr) external {\n', '\t\taddressValidator().validateAddress(\n', '\t\t\tmsg.sender,\n', '\t\t\tconfig().propertyFactory()\n', '\t\t);\n', '\n', '\t\trequire(isGroup(_addr) == false, "already enabled");\n', '\t\teternalStorage().setBool(getGroupKey(_addr), true);\n', '\t}\n', '\n', '\tfunction isGroup(address _addr) public view returns (bool) {\n', '\t\treturn eternalStorage().getBool(getGroupKey(_addr));\n', '\t}\n', '}\n', '\n', '// File: contracts/src/property/IPropertyFactory.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IPropertyFactory {\n', '\tfunction create(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _author\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\taddress\n', '\t\t);\n', '\n', '\tfunction createAndAuthenticate(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _market,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tbool\n', '\t\t);\n', '}\n', '\n', '// File: contracts/src/market/IMarket.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'interface IMarket {\n', '\tfunction authenticate(\n', '\t\taddress _prop,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3,\n', '\t\tstring calldata _args4,\n', '\t\tstring calldata _args5\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tbool\n', '\t\t);\n', '\n', '\tfunction authenticateFromPropertyFactory(\n', '\t\taddress _prop,\n', '\t\taddress _author,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3,\n', '\t\tstring calldata _args4,\n', '\t\tstring calldata _args5\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tbool\n', '\t\t);\n', '\n', '\tfunction authenticatedCallback(address _property, bytes32 _idHash)\n', '\t\texternal\n', '\t\treturns (address);\n', '\n', '\tfunction deauthenticate(address _metrics) external;\n', '\n', '\tfunction schema() external view returns (string memory);\n', '\n', '\tfunction behavior() external view returns (address);\n', '\n', '\tfunction enabled() external view returns (bool);\n', '\n', '\tfunction votingEndBlockNumber() external view returns (uint256);\n', '\n', '\tfunction toEnable() external;\n', '}\n', '\n', '// File: contracts/src/property/PropertyFactory.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * A factory contract that creates a new Property contract.\n', ' */\n', 'contract PropertyFactory is UsingConfig, IPropertyFactory {\n', '\tevent Create(address indexed _from, address _property);\n', '\n', '\t/**\n', '\t * Initialize the passed address as AddressConfig address.\n', '\t */\n', '\t// solium-disable-next-line no-empty-blocks\n', '\tconstructor(address _config) public UsingConfig(_config) {}\n', '\n', '\t/**\n', '\t * Creates a new Property contract.\n', '\t */\n', '\tfunction create(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _author\n', '\t) external returns (address) {\n', '\t\treturn _create(_name, _symbol, _author);\n', '\t}\n', '\n', '\t/**\n', '\t * Creates a new Property contract and authenticate.\n', '\t * There are too many local variables, so when using this method limit the number of arguments that can be used to authenticate to a maximum of 3.\n', '\t */\n', '\tfunction createAndAuthenticate(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _market,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3\n', '\t) external returns (bool) {\n', '\t\treturn\n', '\t\t\tIMarket(_market).authenticateFromPropertyFactory(\n', '\t\t\t\t_create(_name, _symbol, msg.sender),\n', '\t\t\t\tmsg.sender,\n', '\t\t\t\t_args1,\n', '\t\t\t\t_args2,\n', '\t\t\t\t_args3,\n', '\t\t\t\t"",\n', '\t\t\t\t""\n', '\t\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * Creates a new Property contract.\n', '\t */\n', '\tfunction _create(\n', '\t\tstring memory _name,\n', '\t\tstring memory _symbol,\n', '\t\taddress _author\n', '\t) private returns (address) {\n', '\t\t/**\n', '\t\t * Creates a new Property contract.\n', '\t\t */\n', '\t\tProperty property = new Property(\n', '\t\t\taddress(config()),\n', '\t\t\t_author,\n', '\t\t\t_name,\n', '\t\t\t_symbol\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Adds the new Property contract to the Property address set.\n', '\t\t */\n', '\t\tIGroup(config().propertyGroup()).addGroup(address(property));\n', '\n', '\t\temit Create(msg.sender, address(property));\n', '\t\treturn address(property);\n', '\t}\n', '}']