['pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Oracle {\n', '    function getPricePerFullShare() external view returns (uint);\n', '}\n', '\n', 'contract yUSD is ERC20Detailed {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '    \n', '    address public governance;\n', '    \n', '    mapping(address => uint) public userCredit;\n', '    // user => token => credit\n', '    mapping(address => mapping(address => uint)) public credit;\n', '    // user => token => balance\n', '    mapping(address => mapping(address => uint)) public balances;\n', '    // user => address[] markets (credit markets supplied to)\n', '    mapping(address => address[]) public markets;\n', '    address[] public market = [\n', '        0x597aD1e0c13Bfe8025993D9e79C69E1c0233522e, // yUSDC\n', '        0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c, // yCRV\n', '        0x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a, // yTUSD\n', '        0xACd43E627e64355f1861cEC6d3a6688B31a6F952, // yDAI\n', '        0x2f08119C6f07c006695E079AAFc638b8789FAf18, // yUSDT\n', '        0x2994529C0652D127b7842094103715ec5299bBed  // yBUSD\n', '    ];\n', '    mapping(address => bool) public supported;\n', '    uint public constant BASE = 1e18;\n', '    \n', '    constructor () public ERC20Detailed("Yearn USD", "yUSD", 18) {\n', '        governance = msg.sender;\n', '        for (uint i = 0; i < market.length; i++) {\n', '            supported[market[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function approveMarket(address _market) external {\n', '        require(msg.sender == governance, "!governance");\n', '        market.push(_market);\n', '        supported[_market] = true;\n', '    }\n', '    \n', '    // Can only stop deposited\n', '    function revokeMarket(address _market) external {\n', '        require(msg.sender == governance, "!governance");\n', '        supported[_market] = false;\n', '    }\n', '    \n', '    function factor() public view returns (uint) {\n', '        uint _backed = 0;\n', '        for (uint i = 0; i < market.length; i++) {\n', '            uint _value = IERC20(market[i]).balanceOf(address(this));\n', '            _backed = _backed.add(Oracle(market[i]).getPricePerFullShare().mul(_value).div(uint256(10)**ERC20Detailed(market[i]).decimals()));\n', '        }\n', '        if (_backed > 0) {\n', '            return _totalSupply.mul(BASE).div(_backed);\n', '        }\n', '        return BASE;\n', '    }\n', '    \n', '    function depositAll(address token) external {\n', '        deposit(token, IERC20(token).balanceOf(msg.sender));\n', '    }\n', '    \n', '    function deposit(address token, uint amount) public {\n', '        _deposit(token, amount);\n', '    }\n', '    \n', '    function getCredit(address owner, address token) public view returns (uint) {\n', '        return credit[owner][token].mul(factor()).div(BASE);\n', '    }\n', '    \n', '    function _getCredit(address owner, address token, uint _factor) internal view returns (uint) {\n', '        return credit[owner][token].mul(_factor).div(BASE);\n', '    }\n', '    \n', '    function getUserCredit(address owner) public view returns (uint) {\n', '        return userCredit[owner].mul(factor()).div(BASE);\n', '    }\n', '    \n', '    function _getUserCredit(address owner, uint _factor) internal view returns (uint) {\n', '        return userCredit[owner].mul(_factor).div(BASE);\n', '    }\n', '    \n', '    function _deposit(address token, uint amount) internal {\n', '        require(supported[token], "!supported");\n', '        uint _value = Oracle(token).getPricePerFullShare().mul(amount).div(uint256(10)**ERC20Detailed(token).decimals());\n', '        require(_value > 0, "!value");\n', '        \n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        // Assign collateral to the user\n', '        balances[msg.sender][token] = balances[msg.sender][token].add(amount);\n', '        \n', '        credit[msg.sender][token] = credit[msg.sender][token].add(_value);\n', '        userCredit[msg.sender] = userCredit[msg.sender].add(_value);\n', '        \n', '        _mint(msg.sender, _value);\n', '        \n', '        markets[msg.sender].push(token);\n', '    }\n', '    \n', '    function withdrawAll(address token) external {\n', '        _withdraw(token, IERC20(this).balanceOf(msg.sender));\n', '    }\n', '    \n', '    function withdraw(address token, uint amount) external {\n', '        _withdraw(token, amount);\n', '    }\n', '\n', '    // UNSAFE: No slippage protection, should not be called directly\n', '    function _withdraw(address token, uint amount) internal {\n', '        \n', '        uint _factor = factor(); // call once to minimize sub calls in getCredit and getUserCredit\n', '        \n', '        uint _credit = _getCredit(msg.sender, token, _factor);\n', '        uint _token = balances[msg.sender][token];\n', '        \n', '        if (_credit < amount) {\n', '            amount = _credit;\n', '        }\n', '        \n', '        _burn(msg.sender, amount, _factor);\n', '        credit[msg.sender][token] = _getCredit(msg.sender, token, _factor).sub(amount);\n', '        userCredit[msg.sender] = _getUserCredit(msg.sender, _factor).sub(amount);\n', '        \n', '        // Calculate % of collateral to release\n', '        _token = _token.mul(amount).div(_credit);\n', '        \n', '        IERC20(token).safeTransfer(msg.sender, _token);\n', '        balances[msg.sender][token] = balances[msg.sender][token].sub(_token);\n', '    }\n', '    \n', '    function getMarkets(address owner) external view returns (address[] memory) {\n', '        return markets[owner];\n', '    }\n', '    \n', '    function adjusted(uint amount) external view returns (uint) {\n', '        return amount = amount.mul(BASE).div(factor());\n', '    }\n', '    \n', '    mapping (address => uint) private _balances;\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '    uint private _totalSupply;\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.mul(factor()).div(BASE);\n', '    }\n', '    function totalSupplyBase() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account].mul(factor()).div(BASE);\n', '    }\n', '    function balanceOfBase(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount.mul(BASE).div(factor()), amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender].mul(factor()).div(BASE);\n', '    }\n', '    function _allowance(address owner, address spender, uint _factor) internal view returns (uint) {\n', '        return _allowances[owner][spender].mul(_factor).div(BASE);\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount.mul(BASE).div(factor()));\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        uint _factor = factor();\n', '        _transfer(sender, recipient, amount.mul(BASE).div(_factor), amount);\n', '        _approve(sender, msg.sender, _allowance(sender, msg.sender, _factor).sub(amount.mul(BASE).div(_factor), "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        uint _factor = factor();\n', '        _approve(msg.sender, spender, _allowance(msg.sender, spender, _factor).add(addedValue.mul(BASE).div(_factor)));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        uint _factor = factor();\n', '        _approve(msg.sender, spender, _allowance(msg.sender, spender, _factor).sub(subtractedValue.mul(BASE).div(_factor), "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount, uint sent) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, sent);\n', '    }\n', '    function _mint(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        amount = amount.mul(BASE).div(factor());\n', '        \n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint amount, uint _factor) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        \n', '        amount = amount.mul(BASE).div(_factor);\n', '        \n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        \n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']