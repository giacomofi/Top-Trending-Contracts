['pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal view virtual returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view virtual returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev Initializes the contract setting the deployer as the initial owner.\n', '\t */\n', '\tconstructor () internal {\n', '\t\taddress msgSender = _msgSender();\n', '\t\t_owner = msgSender;\n', '\t\temit OwnershipTransferred(address(0), msgSender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the address of the current owner.\n', '\t */\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Leaves the contract without owner. It will not be possible to call\n', '\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '\t *\n', '\t * NOTE: Renouncing ownership will leave the contract without an owner,\n', '\t * thereby removing any functionality that is only available to the owner.\n', '\t */\n', '\tfunction renounceOwnership() public virtual onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t * Can only be called by the current owner.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n', '\t\trequire(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\t/**\n', '\t * @dev Returns the addition of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `+` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Addition cannot overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '\t}\n', '\n', '\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Deprecated. This function has issues similar to the ones found in\n', '\t * {IERC20-approve}, and its usage is discouraged.\n', '\t *\n', '\t * Whenever possible, use {safeIncreaseAllowance} and\n', '\t * {safeDecreaseAllowance} instead.\n', '\t */\n', '\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '\t\t// safeApprove should only be called when setting an initial allowance,\n', '\t\t// or when resetting it to zero. To increase and decrease it, use\n', "\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '\t\t// solhint-disable-next-line max-line-length\n', '\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\n', '\t\t\t"SafeERC20: approve from non-zero to non-zero allowance"\n', '\t\t);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '\t}\n', '\n', '\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\n', '\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '\t * @param token The token targeted by the call.\n', '\t * @param data The call data (encoded using abi.encode or one of its variants).\n', '\t */\n', '\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '\t\t// the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '\t\tbytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '\t\tif (returndata.length > 0) { // Return data is optional\n', '\t\t\t// solhint-disable-next-line max-line-length\n', '\t\t\trequire(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '\t\t}\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\t/**\n', '\t * @dev Returns true if `account` is a contract.\n', '\t *\n', '\t * [IMPORTANT]\n', '\t * ====\n', '\t * It is unsafe to assume that an address for which this function returns\n', '\t * false is an externally-owned account (EOA) and not a contract.\n', '\t *\n', '\t * Among others, `isContract` will return false for the following\n', '\t * types of addresses:\n', '\t *\n', '\t *  - an externally-owned account\n', '\t *  - a contract in construction\n', '\t *  - an address where a contract will be created\n', '\t *  - an address where a contract lived, but was destroyed\n', '\t * ====\n', '\t */\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\t// This method relies on extcodesize, which returns 0 for contracts in\n', '\t\t// construction, since the code is only stored at the end of the\n', '\t\t// constructor execution.\n', '\n', '\t\tuint256 size;\n', '\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\tassembly { size := extcodesize(account) }\n', '\t\treturn size > 0;\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '\t * `recipient`, forwarding all available gas and reverting on errors.\n', '\t *\n', '\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '\t * imposed by `transfer`, making them unable to receive funds via\n', '\t * `transfer`. {sendValue} removes this limitation.\n', '\t *\n', '\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '\t *\n', '\t * IMPORTANT: because control is transferred to `recipient`, care must be\n', '\t * taken to not create reentrancy vulnerabilities. Consider using\n', '\t * {ReentrancyGuard} or the\n', '\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '\t */\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(success, "Address: unable to send value, recipient may have reverted");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs a Solidity function call using a low level `call`. A\n', '\t * plain`call` is an unsafe replacement for a function call: use this\n', '\t * function instead.\n', '\t *\n', '\t * If `target` reverts with a revert reason, it is bubbled up by this\n', '\t * function (like regular Solidity function calls).\n', '\t *\n', '\t * Returns the raw returned data. To convert to the expected return value,\n', '\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `target` must be a contract.\n', '\t * - calling `target` with `data` must not revert.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '\t  return functionCall(target, data, "Address: low-level call failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '\t * `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '\t * but also transferring `value` wei to `target`.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the calling contract must have an ETH balance of at least `value`.\n', '\t * - the called Solidity function must be `payable`.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '\t\treturn functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '\t\trequire(address(this).balance >= value, "Address: insufficient balance for call");\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls\n', '\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\t// Look for revert reason and bubble it up if present\n', '\t\t\tif (returndata.length > 0) {\n', '\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '\t\t\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '\t/**\n', '\t * @dev Returns true if this contract implements the interface defined by\n', '\t * `interfaceId`. See the corresponding\n', '\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '\t * to learn more about how these ids are created.\n', '\t *\n', '\t * This function call must use less than 30 000 gas.\n', '\t */\n', '\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', '\t@title ERC-1155 Multi Token Standard\n', '\t@dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n', '\tNote: The ERC-165 identifier for this interface is 0xd9b67a26.\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '\t/**\n', '\t\t@dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).\n', '\t\tThe `_operator` argument MUST be msg.sender.\n', '\t\tThe `_from` argument MUST be the address of the holder whose balance is decreased.\n', '\t\tThe `_to` argument MUST be the address of the recipient whose balance is increased.\n', '\t\tThe `_id` argument MUST be the token type being transferred.\n', '\t\tThe `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n', '\t\tWhen minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n', '\t\tWhen burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n', '\t*/\n', '\tevent TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n', '\n', '\t/**\n', '\t\t@dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).\n', '\t\tThe `_operator` argument MUST be msg.sender.\n', '\t\tThe `_from` argument MUST be the address of the holder whose balance is decreased.\n', '\t\tThe `_to` argument MUST be the address of the recipient whose balance is increased.\n', '\t\tThe `_ids` argument MUST be the list of tokens being transferred.\n', '\t\tThe `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n', '\t\tWhen minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n', '\t\tWhen burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n', '\t*/\n', '\tevent TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n', '\n', '\t/**\n', '\t\t@dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\n', '\t*/\n', '\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '\t/**\n', '\t\t@dev MUST emit when the URI is updated for a token ID.\n', '\t\tURIs are defined in RFC 3986.\n', '\t\tThe URI MUST point a JSON file that conforms to the "ERC-1155 Metadata URI JSON Schema".\n', '\t*/\n', '\tevent URI(string _value, uint256 indexed _id);\n', '\n', '\t/**\n', '\t\t@notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n', '\t\t@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n', '\t\tMUST revert if `_to` is the zero address.\n', '\t\tMUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n', '\t\tMUST revert on any other error.\n', '\t\tMUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard).\n', '\t\tAfter the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).\n', '\t\t@param _from    Source address\n', '\t\t@param _to      Target address\n', '\t\t@param _id      ID of the token type\n', '\t\t@param _value   Transfer amount\n', '\t\t@param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n', '\t*/\n', '\tfunction safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n', '\n', '\t/**\n', '\t\t@notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n', '\t\t@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n', '\t\tMUST revert if `_to` is the zero address.\n', '\t\tMUST revert if length of `_ids` is not the same as length of `_values`.\n', '\t\tMUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n', '\t\tMUST revert on any other error.\n', '\t\tMUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard).\n', '\t\tBalance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n', '\t\tAfter the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).\n', '\t\t@param _from    Source address\n', '\t\t@param _to      Target address\n', '\t\t@param _ids     IDs of each token type (order and length must match _values array)\n', '\t\t@param _values  Transfer amounts per token type (order and length must match _ids array)\n', '\t\t@param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n', '\t*/\n', '\tfunction safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n', '\n', '\t/**\n', "\t\t@notice Get the balance of an account's Tokens.\n", '\t\t@param _owner  The address of the token holder\n', '\t\t@param _id     ID of the Token\n', "\t\t@return        The _owner's balance of the Token type requested\n", '\t */\n', '\tfunction balanceOf(address _owner, uint256 _id) external view returns (uint256);\n', '\n', '\t/**\n', '\t\t@notice Get the balance of multiple account/token pairs\n', '\t\t@param _owners The addresses of the token holders\n', '\t\t@param _ids    ID of the Tokens\n', "\t\t@return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n", '\t */\n', '\tfunction balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n', '\n', '\t/**\n', '\t\t@notice Enable or disable approval for a third party ("operator") to manage all of the caller\'s tokens.\n', '\t\t@dev MUST emit the ApprovalForAll event on success.\n', '\t\t@param _operator  Address to add to the set of authorized operators\n', '\t\t@param _approved  True if the operator is approved, false to revoke approval\n', '\t*/\n', '\tfunction setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '\t/**\n', '\t\t@notice Queries the approval status of an operator for a given owner.\n', '\t\t@param _owner     The owner of the Tokens\n', '\t\t@param _operator  Address of authorized operator\n', '\t\t@return           True if the operator is approved, false if not\n', '\t*/\n', '\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract nQub20to1155 is Ownable {\n', '\tusing SafeMath for uint;\n', '\tusing SafeERC20 for IERC20;\n', '\t\n', '\tuint256 public CLAIM_PAYMENT = 19*10**15;\n', '\t\n', '\tIERC20 public nQub20 = IERC20(0x892A74a8727Daf514cD3EFaBAaC03f415f3D20Af);\n', '\tIERC1155 public nQub1155 = IERC1155(0x0760AbBCadE5fE056bbD79a625CA2e18C17dc0e8);\n', '\t\n', '\taddress public nqubHolder = address(0xA3C9Af80be1C08c933f17Fa2515775b697266FCF);\n', '\taddress public nQub1155to20 = address(0xA3C9Af80be1C08c933f17Fa2515775b697266FCF);\n', '\t\n', '\tmodifier checkPayment {\n', '\t\trequire(msg.value >= CLAIM_PAYMENT);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction exchange(uint256 amount) public payable checkPayment {\n', '\t\tnQub20.safeTransferFrom(msg.sender, nQub1155to20, amount);\n', '\t\tnQub1155.safeTransferFrom(nqubHolder, msg.sender, 1, amount, "");\n', '\t}\n', '\t\n', '\tfunction setNqubHolder(address holderAddress) public onlyOwner {\n', '\t\tnqubHolder = holderAddress;\n', '\t}\n', '\t\n', '\tfunction getEtherFund(uint256 amount) public onlyOwner {\n', '\t\tmsg.sender.transfer(amount);\n', '\t}\n', '\t\n', '\tfunction getTokenFund(address tokenAddress, uint256 amount) public onlyOwner {\n', '\t\tIERC20 ierc20Token = IERC20(tokenAddress);\n', '\t\tierc20Token.safeTransfer(msg.sender, amount);\n', '\t}\n', '}']