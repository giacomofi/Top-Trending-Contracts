['/**\n', '_____________ThePvPGameRevolutions(V3)\n', '\n', '\n', '░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░█████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░█████░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░████░░░░░░░░░░░░░░░░░░░░░░░░░\n', '████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n', '░██░░░░░░░░░░░░░░░░░░░░░░░░░███████░░░░░\n', '░██░░░░░░░█░░░░░░░░░░░░███░░░░░░░██░░░░░\n', '░██░░░░░░░█░░░░░░░░░░░░███░░░░████░░░░░░\n', '░██░░░░░░░██░░░░░░░░░░███░██░░░░░██░░░░░\n', '░██░░░░░░░██░░░░░░░░░░██░░█░░░░░░░█░░░░░\n', '░██░░░░░░░██░░░░░░░░░██░░░████████░░░░░░\n', '░██░░░░░░░██░░░░░░░░███░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░███░░░░░░██░░░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░███░░░░░██░░░░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░░██░░░░███░░░░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░░██░░░██░░████████████████████\n', '░░░░░░░░░░░███░██░░░░██░░░░░░░░░░░░░░███\n', '░░░░░░░░░░░░████░░░░░██░░░░░░░░░░░░░░███\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░███\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░███\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░███\n', '░░░░░░░░░░░░░░░░░░░░░███████████████████\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░\n', '░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░\n', '\n', 'Telegram:\n', 'https://t.me/thepvpgamerevolutions\n', '\n', 'Website:\n', 'the-pvp-game.com\n', '\n', '*/\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface Token {\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract PvPBuyInContract is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  Token public token;\n', '\n', '  uint256 public constant RATE = 1; // Number of tokens per Ether\n', '  uint256 public constant CAP = 65; // Cap in Ether\n', '  uint256 public constant initialTokens = 65 * 10**18; // Initial number of tokens available\n', '  bool public initialized = false;\n', '  uint256 public raisedAmount = 0;\n', '\n', '  event BoughtTokens(address indexed to, uint256 value);\n', '  \n', '    modifier whenSaleIsActive() {\n', '    \n', '    assert(isActive());\n', '\n', '    _;\n', '    }\n', '\n', '\n', '  function PvPBuyInContract(address _tokenAddr) {\n', '      require(_tokenAddr != 0);\n', '      token = Token(_tokenAddr);\n', '  }\n', '  \n', '  function initialize() onlyOwner {\n', '      require(initialized == false);\n', '      require(tokensAvailable() >= initialTokens);\n', '      initialized = true;\n', '  }\n', '\n', '  function isActive() constant returns (bool) {\n', '    return (\n', '        initialized == true &&\n', '        goalReached() == false\n', '    );\n', '  }\n', '\n', '  function goalReached() constant returns (bool) {\n', '    return (raisedAmount >= CAP * 1 ether);\n', '  }\n', '\n', '  function () payable {\n', '    buyTokens();\n', '  }\n', '\n', ' \n', '  function buyTokens() payable {\n', '      \n', 'if ( msg.value == 1000000000000000000 || msg.value == 2000000000000000000 )\n', '   {\n', '  \n', '\n', '    // Calculate tokens to sell\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(RATE);\n', '\n', '    BoughtTokens(msg.sender, tokens);\n', '\n', '    // Increment raised amount\n', '    raisedAmount = raisedAmount.add(msg.value);\n', '    \n', '    // Send tokens to buyer\n', '    token.transfer(msg.sender, tokens);\n', '    \n', '    // Send money to owner\n', '    owner.transfer(msg.value);\n', '    \n', '}\n', '\n', 'else\n', '          {\n', '          revert();\n', '          }\n', '    \n', '       \n', '}\n', '\n', ' \n', '  function tokensAvailable() constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', ' \n', '  function destroy() onlyOwner {\n', '    \n', '    uint256 balance = token.balanceOf(this);\n', '    assert(balance > 0);\n', '    token.transfer(owner, balance);\n', '\n', '    \n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']