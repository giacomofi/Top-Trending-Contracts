['// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "./IERC20.sol";\n', '// import "../../math/SafeMath.sol";\n', '// import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/lib/ExplicitERC20.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    \n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @title ExplicitERC20\n', ' * @author Set Protocol\n', ' *\n', ' * Utility functions for ERC20 transfers that require the explicit amount to be transfered.\n', ' */\n', 'library ExplicitERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * When given allowance, transfers a token from the "_from" to the "_to" of quantity "_quantity".\n', '     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\n', '     *\n', '     * @param _token           ERC20 token to approve\n', '     * @param _from            The account to transfer tokens from\n', '     * @param _to              The account to transfer tokens to\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function transferFrom(\n', '        IERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        // Call specified ERC20 contract to transfer tokens (via proxy).\n', '        if (_quantity > 0) {\n', '            uint256 existingBalance = _token.balanceOf(_to);\n', '\n', '            SafeERC20.safeTransferFrom(\n', '                _token,\n', '                _from,\n', '                _to,\n', '                _quantity\n', '            );\n', '\n', '            uint256 newBalance = _token.balanceOf(_to);\n', '\n', '            // Verify transfer quantity is reflected in balance\n', '            require(\n', '                newBalance == existingBalance.add(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/lib/AddressArrayUtils.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    \n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AddressArrayUtils\n', ' * @author Set Protocol\n', ' *\n', ' * Utility functions to handle Address Arrays\n', ' */\n', 'library AddressArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (0, false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(address[] memory A, address a) internal pure returns (bool) {\n', '        bool isIn;\n', '        (, isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurence of a duplicate\n', '    */\n', '    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            address current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * Returns the array with a appended to A.\n', '     * @param A The first array\n', '     * @param a The value to append\n', '     * @return Returns A appended by a\n', '     */\n', '    function append(address[] memory A, address a) internal pure returns (address[] memory) {\n', '        address[] memory newAddresses = new address[](A.length + 1);\n', '        for (uint256 i = 0; i < A.length; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        newAddresses[A.length] = a;\n', '        return newAddresses;\n', '    }\n', '\n', '    /**\n', '     * @return Returns the new array\n', '     */\n', '    function remove(address[] memory A, address a)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            (address[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * Resulting ordering is not guaranteed\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(address[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (address[] memory, address)\n', '    {\n', '        uint256 length = A.length;\n', '        address[] memory newAddresses = new address[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newAddresses[j - 1] = A[j];\n', '        }\n', '        return (newAddresses, A[index]);\n', '    }\n', '}\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    \n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { AddressArrayUtils } from "../lib/AddressArrayUtils.sol";\n', '// import { ExplicitERC20 } from "../lib/ExplicitERC20.sol";\n', '\n', '/**\n', ' * @title Controller\n', ' * @author Set Protocol\n', ' *\n', ' * Contract that houses state for approvals and system contracts such as added Sets,\n', ' * modules, factories, resources (like price oracles), and protocol fee configurations.\n', ' */\n', 'contract Controller is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    using AddressArrayUtils for address[];\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event FactoryAdded(address _factory);\n', '    event FactoryRemoved(address _factory);\n', '    event FeeEdited(address indexed _module, uint256 indexed _feeType, uint256 _feePercentage);\n', '    event FeeRecipientChanged(address _newFeeRecipient);\n', '    event ModuleAdded(address _module);\n', '    event ModuleRemoved(address _module);\n', '    event ResourceAdded(address _resource, uint256 _id);\n', '    event ResourceRemoved(address _resource, uint256 _id);\n', '    event SetAdded(address _setToken, address _factory);\n', '    event SetRemoved(address _setToken);\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    /**\n', '     * Throws if function is called by any address other than a valid factory.\n', '     */\n', '    modifier onlyFactory() {\n', '        require(isFactory[msg.sender], "Only valid factories can call");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Throws if function is called by any address other than a module or a resource.\n', '     */\n', '    modifier onlyModuleOrResource() {\n', '        require(\n', '            isResource[msg.sender] || isModule[msg.sender],\n', '            "Only valid resources or modules can call"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfInitialized() {\n', '        require(isInitialized, "Contract must be initialized.");\n', '        _;\n', '    }\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // List of enabled Sets\n', '    address[] public sets;\n', '    // List of enabled factories of SetTokens\n', '    address[] public factories;\n', '    // List of enabled Modules; Modules extend the functionality of SetTokens\n', '    address[] public modules;\n', '    // List of enabled Resources; Resources provide data, functionality, or\n', '    // permissions that can be drawn upon from Module, SetTokens or factories\n', '    address[] public resources;\n', '\n', '    // Mappings to check whether address is valid Set, Factory, Module or Resource\n', '    mapping(address => bool) public isSet;\n', '    mapping(address => bool) public isFactory;\n', '    mapping(address => bool) public isModule;\n', '    mapping(address => bool) public isResource;\n', '\n', '    // Mapping of modules to fee types to fee percentage. A module can have multiple feeTypes\n', '    // Fee is denominated in precise unit percentages (100% = 1e18, 1% = 1e16)\n', '    mapping(address => mapping(uint256 => uint256)) public fees;\n', '\n', '    // Mapping of resource ID to resource address, which allows contracts to fetch the correct\n', '    // resource while providing an ID\n', '    mapping(uint256 => address) public resourceId;\n', '\n', '    // Recipient of protocol fees\n', '    address public feeRecipient;\n', '\n', '    // Return true if the controller is initialized\n', '    bool public isInitialized;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Initializes the initial fee recipient on deployment.\n', '     *\n', '     * @param _feeRecipient          Address of the initial protocol fee recipient\n', '     */\n', '    constructor(address _feeRecipient) public {\n', '        feeRecipient = _feeRecipient;\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * Initializes any predeployed factories, modules, and resources post deployment. Note: This function can\n', '     * only be called by the owner once to batch initialize the initial system contracts.\n', '     *\n', '     * @param _factories             List of factories to add\n', '     * @param _modules               List of modules to add\n', '     * @param _resources             List of resources to add\n', '     * @param _resourceIds           List of resource IDs associated with the resources\n', '     */\n', '    function initialize(\n', '        address[] memory _factories,\n', '        address[] memory _modules,\n', '        address[] memory _resources,\n', '        uint256[] memory _resourceIds\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        // Requires Controller has not been initialized yet\n', '        require(\n', '            !isInitialized,\n', '            "Controller is already initialized"\n', '        );\n', '\n', '        factories = _factories;\n', '        modules = _modules;\n', '        resources = _resources;\n', '\n', '        // Loop through and initialize isModule, isFactory, and isResource mapping\n', '        for (uint256 i = 0; i < _factories.length; i++) {\n', '            require(_factories[i] != address(0), "Zero address submitted.");\n', '            isFactory[_factories[i]] = true;\n', '        }\n', '        for (uint256 i = 0; i < _modules.length; i++) {\n', '            require(_modules[i] != address(0), "Zero address submitted.");\n', '            isModule[_modules[i]] = true;\n', '        }\n', '        for (uint256 i = 0; i < _resources.length; i++) {\n', '            require(_resources[i] != address(0), "Zero address submitted.");\n', '            require(_resources.length == _resourceIds.length, "Array lengths do not match.");\n', '            isResource[_resources[i]] = true;\n', '            resourceId[_resourceIds[i]] = _resources[i];\n', '        }\n', '\n', '        // Set to true to only allow initialization once\n', '        isInitialized = true;\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED MODULE OR RESOURCE FUNCTION. Allows a module or resource to transfer tokens\n', '     * from an address (that has set allowance on the controller).\n', '     *\n', '     * @param  _token          The address of the ERC20 token\n', '     * @param  _from           The address to transfer from\n', '     * @param  _to             The address to transfer to\n', '     * @param  _quantity       The number of tokens to transfer\n', '     */\n', '    function transferFrom(\n', '        address _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        external\n', '        onlyIfInitialized\n', '        onlyModuleOrResource\n', '    {\n', '        if (_quantity > 0) {\n', '            ExplicitERC20.transferFrom(\n', '                IERC20(_token),\n', '                _from,\n', '                _to,\n', '                _quantity\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED MODULE OR RESOURCE FUNCTION. Allows a module or resource to batch transfer tokens\n', '     * from an address (that has set allowance on the proxy).\n', '     *\n', '     * @param  _tokens          The addresses of the ERC20 token\n', '     * @param  _from            The addresses to transfer from\n', '     * @param  _to              The addresses to transfer to\n', '     * @param  _quantities      The numbers of tokens to transfer\n', '     */\n', '    function batchTransferFrom(\n', '        address[] calldata _tokens,\n', '        address _from,\n', '        address _to,\n', '        uint256[] calldata _quantities\n', '    )\n', '        external\n', '        onlyIfInitialized\n', '        onlyModuleOrResource\n', '    {\n', '        // Storing token count to local variable to save on invocation\n', '        uint256 tokenCount = _tokens.length;\n', '\n', '        // Confirm and empty _tokens array is not passed\n', '        require(\n', '            tokenCount > 0,\n', '            "Tokens must not be empty"\n', '        );\n', '\n', '        // Confirm there is one quantity for every token address\n', '        require(\n', '            tokenCount == _quantities.length,\n', '            "Tokens and quantities lengths mismatch"\n', '        );\n', '\n', '        for (uint256 i = 0; i < tokenCount; i++) {\n', '            if (_quantities[i] > 0) {\n', '                ExplicitERC20.transferFrom(\n', '                    IERC20(_tokens[i]),\n', '                    _from,\n', '                    _to,\n', '                    _quantities[i]\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed SetToken as an enabled SetToken.\n', '     *\n', '     * @param _setToken               Address of the SetToken contract to add\n', '     */\n', '    function addSet(address _setToken) external onlyIfInitialized onlyFactory {\n', '        require(!isSet[_setToken], "Set already exists");\n', '\n', '        isSet[_setToken] = true;\n', '\n', '        sets.push(_setToken);\n', '\n', '        emit SetAdded(_setToken, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a Set\n', '     *\n', '     * @param _setToken               Address of the SetToken contract to remove\n', '     */\n', '    function removeSet(address _setToken) external onlyIfInitialized onlyOwner {\n', '        require(isSet[_setToken], "Set does not exist");\n', '\n', '        sets = sets.remove(_setToken);\n', '\n', '        isSet[_setToken] = false;\n', '\n', '        emit SetRemoved(_setToken);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\n', '     *\n', '     * @param _factory               Address of the factory contract to add\n', '     */\n', '    function addFactory(address _factory) external onlyIfInitialized onlyOwner {\n', '        require(!isFactory[_factory], "Factory already exists");\n', '\n', '        isFactory[_factory] = true;\n', '\n', '        factories.push(_factory);\n', '\n', '        emit FactoryAdded(_factory);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\n', '     *\n', '     * @param _factory               Address of the factory contract to remove\n', '     */\n', '    function removeFactory(address _factory) external onlyIfInitialized onlyOwner {\n', '        require(isFactory[_factory], "Factory does not exist");\n', '\n', '        factories = factories.remove(_factory);\n', '\n', '        isFactory[_factory] = false;\n', '\n', '        emit FactoryRemoved(_factory);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a module\n', '     *\n', '     * @param _module               Address of the module contract to add\n', '     */\n', '    function addModule(address _module) external onlyIfInitialized onlyOwner {\n', '        require(!isModule[_module], "Module already exists");\n', '\n', '        isModule[_module] = true;\n', '\n', '        modules.push(_module);\n', '\n', '        emit ModuleAdded(_module);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a module\n', '     *\n', '     * @param _module               Address of the module contract to remove\n', '     */\n', '    function removeModule(address _module) external onlyIfInitialized onlyOwner {\n', '        require(isModule[_module], "Module does not exist");\n', '\n', '        modules = modules.remove(_module);\n', '\n', '        isModule[_module] = false;\n', '\n', '        emit ModuleRemoved(_module);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a resource\n', '     *\n', '     * @param _resource               Address of the resource contract to add\n', '     * @param _id                     New ID of the resource contract\n', '     */\n', '    function addResource(address _resource, uint256 _id) external onlyIfInitialized onlyOwner {\n', '        require(!isResource[_resource], "Resource already exists");\n', '\n', '        require(resourceId[_id] == address(0), "Resource ID already exists");\n', '\n', '        isResource[_resource] = true;\n', '\n', '        resourceId[_id] = _resource;\n', '\n', '        resources.push(_resource);\n', '\n', '        emit ResourceAdded(_resource, _id);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a resource\n', '     *\n', '     * @param _id               ID of the resource contract to remove\n', '     */\n', '    function removeResource(uint256 _id) external onlyIfInitialized onlyOwner {\n', '        address resourceToRemove = resourceId[_id];\n', '\n', '        require(resourceToRemove != address(0), "Resource does not exist");\n', '\n', '        resources = resources.remove(resourceToRemove);\n', '\n', '        resourceId[_id] = address(0);\n', '\n', '        isResource[resourceToRemove] = false;\n', '\n', '        emit ResourceRemoved(resourceToRemove, _id);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a fee to a module\n', '     *\n', '     * @param _module               Address of the module contract to add fee to\n', '     * @param _feeType              Type of the fee to add in the module\n', '     * @param _newFeePercentage     Percentage of fee to add in the module (denominated in preciseUnits eg 1% = 1e16)\n', '     */\n', '    function addFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyIfInitialized onlyOwner {\n', '        require(isModule[_module], "Module does not exist");\n', '\n', '        require(fees[_module][_feeType] == 0, "Fee type already exists on module");\n', '\n', '        fees[_module][_feeType] = _newFeePercentage;\n', '\n', '        emit FeeEdited(_module, _feeType, _newFeePercentage);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit a fee in an existing module\n', '     *\n', '     * @param _module               Address of the module contract to edit fee\n', '     * @param _feeType              Type of the fee to edit in the module\n', '     * @param _newFeePercentage     Percentage of fee to edit in the module (denominated in preciseUnits eg 1% = 1e16)\n', '     */\n', '    function editFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyIfInitialized onlyOwner {\n', '        require(isModule[_module], "Module does not exist");\n', '\n', '        require(fees[_module][_feeType] != 0, "Fee type does not exist on module");\n', '\n', '        fees[_module][_feeType] = _newFeePercentage;\n', '\n', '        emit FeeEdited(_module, _feeType, _newFeePercentage);\n', '    }\n', '\n', '    /**\n', '     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit the protocol fee recipient\n', '     *\n', '     * @param _newFeeRecipient      Address of the new protocol fee recipient\n', '     */\n', '    function editFeeRecipient(address _newFeeRecipient) external onlyIfInitialized onlyOwner {\n', '        feeRecipient = _newFeeRecipient;\n', '\n', '        emit FeeRecipientChanged(_newFeeRecipient);\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    function getModuleFee(\n', '        address _moduleAddress,\n', '        uint256 _feeType\n', '    )\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return fees[_moduleAddress][_feeType];\n', '    }\n', '\n', '    function getFactories() external view returns (address[] memory) {\n', '        return factories;\n', '    }\n', '\n', '    function getModules() external view returns (address[] memory) {\n', '        return modules;\n', '    }\n', '\n', '    function getResources() external view returns (address[] memory) {\n', '        return resources;\n', '    }\n', '\n', '    function getSets() external view returns (address[] memory) {\n', '        return sets;\n', '    }\n', '\n', '    /**\n', '     * Check if a contract address is a module, Set, resource, factory or controller\n', '     *\n', '     * @param  _contractAddress           The contract address to check\n', '     */\n', '    function isSystemContract(address _contractAddress) external view returns (bool) {\n', '        return (\n', '            isSet[_contractAddress] ||\n', '            isModule[_contractAddress] ||\n', '            isResource[_contractAddress] ||\n', '            isFactory[_contractAddress] ||\n', '            _contractAddress == address(this)\n', '        );\n', '    }\n', '}']