['/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-06\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'contract Airpool is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    event Staked(\n', '        address lpToken,\n', '        address user,\n', '        uint256 amountToken,\n', '        uint256 amountETH,\n', '        uint256 liquidity\n', '    );\n', '    \n', '    event Unstaked(\n', '        address user,\n', '        address lpToken,\n', '        uint256 amountToken\n', '    );\n', '    \n', '    event RewardWithdrawn(\n', '        address user,\n', '        uint256 amount\n', '    );\n', '    \n', '    uint256 private constant rewardMultiplier = 1e17;\n', '    \n', '    struct Stake {\n', '        uint256 stakeAmount; // lp token address to token amount\n', '        uint256 totalStakedAmountByUser; // sum of all lp tokens\n', '        uint256 lastInteractionBlockNumber; // block number at last withdraw\n', '        uint256 stakingPeriodEndTime;\n', '    }\n', '    \n', '    mapping(address => Stake) public userToStakes; // user to stake\n', '    uint256 public totalStakedAmount; // sum of stakes by all of the users across all lp\n', '    \n', '    address internal uniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address internal uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    //address internal WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n', '     \n', '    IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\n', '    IUniswapV2Router02 public uniswapRouter = IUniswapV2Router02(uniswapRouterAddress);\n', '\n', '    address public token;\n', '    address public lpToken;\n', '    \n', '    uint256 public blockMiningTime = 15;\n', '    uint256 public blockReward = 100000000000000000;\n', '    uint256 public stakingDuration = 2592000;\n', '    uint256 public minimumAmount = 1000000000000000;\n', '    uint256 public maximumAmount = 100000000000000000000; \n', '\n', '    constructor(address airdropToken, address pairToken) public {\n', '        token = airdropToken;\n', '        lpToken = pairToken;\n', '        \n', '        IERC20(token).approve(uniswapRouterAddress, 1e52); // approve uniswap router\n', '        \n', '        IERC20(token).approve(address(this), 1e52); // approve sending token\n', '        IERC20(lpToken).approve(address(this), 1e52); // approve sending lp token\n', '    }\n', '    \n', '    function setMinimumAmount(uint256 amount) external onlyOwner {\n', '        require(\n', '            amount != 0,\n', '            "minimum amount cannot be zero"\n', '        );\n', '        minimumAmount = amount;\n', '    }\n', '    \n', '    function setMaximumAmount(uint256 amount) external onlyOwner {\n', '        require(\n', '            amount != 0,\n', '            "maximum amount cannot be zero"\n', '        );\n', '        maximumAmount = amount;\n', '    }\n', '    \n', '    function setBlockReward(uint256 rewardAmount) external onlyOwner {\n', '        require(\n', '            rewardAmount != 0,\n', '            "new reward cannot be zero"\n', '        );\n', '        blockReward = rewardAmount;\n', '    }\n', '    \n', '    function setStakingDuration(uint256 duration) external onlyOwner {\n', '        require(\n', '            duration != 0,\n', '            "new reward cannot be zero"\n', '        );\n', '        stakingDuration = duration;\n', '    }\n', '\n', '    function changeBlockMiningTime(uint256 newTime) external onlyOwner {\n', '        require(\n', '            newTime != 0,\n', '            "new time cannot be zero"\n', '        );\n', '        blockMiningTime = newTime;\n', '    }\n', '\n', '    function supplyAirpool(\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin\n', '    ) external payable {\n', '        require(\n', '            msg.value != 0, // must send ether\n', '            "amount should be greater than 0"\n', '        );\n', '        \n', '        require(\n', '            msg.value >= minimumAmount,\n', '            "amount too low"\n', '        );\n', '        \n', '        require(\n', '            msg.value > maximumAmount,\n', '            "amount too high"\n', '        );\n', '\n', '        uint deadline = block.timestamp.add(2 hours); // set deadline to 2 hours from now\n', '\n', '        (uint amountToken, uint amountETH, uint liquidity) = uniswapRouter.addLiquidityETH.value(msg.value)(\n', '            token,\n', '            amountTokenDesired,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline \n', '        );\n', '\n', '        _withdrawReward(_msgSender()); // withdraw any existing rewards\n', '\n', '        totalStakedAmount = totalStakedAmount.add(liquidity); // add stake amount to sum of all stakes across al lps\n', '        \n', '        Stake storage currentStake = userToStakes[_msgSender()];\n', '        currentStake.stakingPeriodEndTime = block.timestamp.add(\n', '            stakingDuration\n', '        ); // set the staking period end time\n', '\n', '        currentStake.stakeAmount =  currentStake.stakeAmount // add stake amount by lp\n', '            .add(liquidity);\n', '        \n', '        currentStake.totalStakedAmountByUser = currentStake.totalStakedAmountByUser // add stake amount to sum of all stakes by user\n', '            .add(liquidity);\n', '\n', '        emit Staked(\n', '            lpToken,\n', '            _msgSender(),\n', '            amountToken,\n', '            amountETH,\n', '            liquidity\n', '        ); // broadcast event\n', '    }\n', '    \n', '    function unstake() external {\n', '        _withdrawReward(_msgSender());\n', '        Stake storage currentStake = userToStakes[_msgSender()];\n', '        uint256 stakeAmountToDeduct;\n', '        bool executeUnstaking;\n', '        uint256 stakeAmount = currentStake.stakeAmount;\n', '            \n', '        if (currentStake.stakeAmount == 0) {\n', '            revert("no stake");\n', '        }\n', '\n', '        if (currentStake.stakingPeriodEndTime <= block.timestamp) {\n', '            executeUnstaking = true;\n', '        }\n', '\n', '        require(\n', '            executeUnstaking,\n', '            "cannot unstake"\n', '        );\n', '        \n', '        currentStake.stakeAmount = 0;\n', '        \n', '        currentStake.totalStakedAmountByUser = currentStake.totalStakedAmountByUser\n', '            .sub(stakeAmount);\n', '        \n', '        stakeAmountToDeduct = stakeAmountToDeduct.add(stakeAmount);\n', '        \n', '        require(\n', '            IERC20(lpToken).transferFrom(address(this), _msgSender(), stakeAmount), // transfer staked tokens back to the user\n', '            "#transfer failed"\n', '        );\n', '        \n', '        emit Unstaked(lpToken, _msgSender(), stakeAmount);\n', '        \n', '        totalStakedAmount = totalStakedAmount.sub(stakeAmountToDeduct); // subtract unstaked amount from total staked amount\n', '    }\n', '    \n', '    function withdrawReward() external {\n', '        _withdrawReward(_msgSender());\n', '    }\n', '    \n', '    function getBlockCountSinceLastIntreraction(address user) public view returns(uint256) {\n', '        uint256 lastInteractionBlockNum = userToStakes[user].lastInteractionBlockNumber;\n', '        if (lastInteractionBlockNum == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        return block.number.sub(lastInteractionBlockNum);\n', '    }\n', '    \n', '    function getTotalStakeAmountByUser(address user) public view returns(uint256) {\n', '        return userToStakes[user].totalStakedAmountByUser;\n', '    }\n', '    \n', '    function getStakeAmountByUser(\n', '        address user\n', '    ) public view returns(uint256) {\n', '        return userToStakes[user].stakeAmount;\n', '    }\n', '    \n', '    function getRewardByAddress(\n', '        address user\n', '    ) public view returns(uint256) {\n', '        if (totalStakedAmount == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        Stake storage currentStake = userToStakes[user];\n', '        \n', '        uint256 blockCount = block.number\n', '            .sub(currentStake.lastInteractionBlockNumber);\n', '        \n', '        uint256 totalReward = blockCount.mul(blockReward);\n', '        \n', '        return totalReward\n', '            .mul(currentStake.totalStakedAmountByUser)\n', '            .div(totalStakedAmount);\n', '    }\n', '    \n', '    function _withdrawReward(address user) internal {\n', '        uint256 rewardAmount = getRewardByAddress(user);\n', '        \n', '        if (rewardAmount != 0) {\n', '            require(\n', '                IERC20(token).transferFrom(address(this), user, rewardAmount), // get the tokens from user to the contract\n', '                "#transferFrom failed"\n', '            );\n', '            emit RewardWithdrawn(user, rewardAmount);\n', '        }\n', '        \n', '        userToStakes[user].lastInteractionBlockNumber = block.number;\n', '    }\n', '}']