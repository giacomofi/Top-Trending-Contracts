['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// \n', 'contract PublicSaleWaitlistContract is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tevent Whitelist(address indexed _address, bool _isStaking);\n', '\tevent Deposit(uint256 _timestamp, address indexed _address);\n', '\tevent Refund(uint256 _timestamp, address indexed _address);\n', '\tevent TokenReleased(uint256 _timestamp, address indexed _address, uint256 _amount);\n', '\n', '\t// Token Contract\n', '\tIERC20 tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);\n', '\tuint256 public noStakeReleaseAmount = 166666.67 ether;\n', '\tuint256 public stakeReleaseFirstBatchAmount = 83333.33 ether;\n', '\tuint256 public stakeReleaseSecondBatchAmount = 87500 ether;\n', '\n', '\t// Receiving Address\n', '\taddress payable receivingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;\n', '\n', '\t// Contract status\n', '\tContractStatus public status;\n', '\n', '\tenum ContractStatus {\n', '\t\tINIT, \n', '\t\tACCEPT_DEPOSIT, \n', '\t\tFIRST_BATCH_TOKEN_RELEASED, \n', '\t\tSECOND_BATCH_TOKEN_RELEASED\n', '\t}\n', '\n', '\n', '\t// Whitelist\n', '\tmapping(address => WhitelistDetail) whitelist;\n', '\n', '\tstruct WhitelistDetail {\n', '        // Check if address is whitelisted\n', '        bool isWhitelisted;\n', '\n', '        // Check if address is staking\n', '        bool isStaking;\n', '\n', '        // Check if address has deposited\n', '        bool hasDeposited;\n', '    }\n', '\n', '\t// Total count of whitelisted address\n', '\tuint256 public whitelistCount = 0;\n', '\n', '\t// Addresses that deposited\n', '\taddress[] depositAddresses;\n', '\tuint256 dIndex = 0;\n', '\n', '\t// Addresses for second batch release\n', '\taddress[] secondBatchAddresses;\n', '\tuint256 sIndex = 0;\n', '\n', '\t// Total count of deposits\n', '\tuint256 public depositCount = 0;\n', '\n', '\t// Deposit ticket size\n', '\tuint256 public ticketSize = 2.85 ether;\n', '\n', '\t// Duration of stake\n', '\tuint256 constant stakeDuration = 30 days;\n', '\n', '\t// Time that staking starts\n', '\tuint256 public stakeStart;\n', '\n', '\tconstructor() public {\n', '\t\tstatus = ContractStatus.INIT;\n', '\t}\n', '\n', '\tfunction updateReceivingAddress(address payable _address) public onlyOwner {\n', '\t\treceivingAddress = _address;\n', '\t}\n', '\n', '\t/**\n', '     * @dev ContractStatus.INIT functions\n', '     */\n', '\n', '\tfunction whitelistAddresses(address[] memory _addresses, bool[] memory _isStaking) public onlyOwner {\n', '\t\trequire(status == ContractStatus.INIT);\n', '\n', '\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\n', '\t\t\tif (!whitelist[_addresses[i]].isWhitelisted) {\n', '\t\t\t\twhitelistCount = whitelistCount.add(1);\n', '\t\t\t}\n', '\n', '\t\t\twhitelist[_addresses[i]].isWhitelisted = true;\n', '\t\t\twhitelist[_addresses[i]].isStaking = _isStaking[i];\n', '\n', '\t\t\temit Whitelist(_addresses[i], _isStaking[i]);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction updateTicketSize(uint256 _amount) public onlyOwner {\n', '\t\trequire(status == ContractStatus.INIT);\n', '\n', '\t\tticketSize = _amount;\n', '\t}\n', '\n', '\tfunction acceptDeposit() public onlyOwner {\n', '\t\trequire(status == ContractStatus.INIT);\n', '\n', '\t\tstatus = ContractStatus.ACCEPT_DEPOSIT;\n', '\t}\n', '\n', '\t/**\n', '     * @dev ContractStatus.ACCEPT_DEPOSIT functions\n', '     */\n', '\n', '    receive() external payable {\n', '\t\tdeposit();\n', '\t}\n', '\n', '\tfunction deposit() internal {\n', '\t\trequire(status == ContractStatus.ACCEPT_DEPOSIT);\n', '\t\trequire(whitelist[msg.sender].isWhitelisted && !whitelist[msg.sender].hasDeposited);\n', '\t\trequire(msg.value >= ticketSize);\n', '\n', '\t\tmsg.sender.transfer(msg.value.sub(ticketSize));\n', '\t\twhitelist[msg.sender].hasDeposited = true;\n', '\t\tdepositAddresses.push(msg.sender);\n', '\t\tdepositCount = depositCount.add(1);\n', '\n', '\t\temit Deposit(block.timestamp, msg.sender);\n', '\t}\n', '\n', '\tfunction refund(address payable _address) public onlyOwner {\n', '\t\trequire(whitelist[_address].hasDeposited);\n', '\n', '\t\tdelete whitelist[_address];\n', '\t\t_address.transfer(ticketSize);\n', '\t\tdepositCount = depositCount.sub(1);\n', '\n', '\t\temit Refund(block.timestamp, _address);\n', '\t}\n', '\n', '\tfunction refundMultiple(address payable[] memory _addresses) public onlyOwner {\n', '\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\n', '\t\t\tif (whitelist[_addresses[i]].hasDeposited) {\n', '\t\t\t\tdelete whitelist[_addresses[i]];\n', '\t\t\t\t_addresses[i].transfer(ticketSize);\n', '\t\t\t\tdepositCount = depositCount.sub(1);\n', '\n', '\t\t\t\temit Refund(block.timestamp, _addresses[i]);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction releaseFirstBatchTokens(uint256 _count) public onlyOwner {\n', '\t\trequire(status == ContractStatus.ACCEPT_DEPOSIT);\n', '\n', '\t\tfor (uint256 i = 0; i < _count; i++) {\n', '\t\t\tif (whitelist[depositAddresses[dIndex]].isWhitelisted) {\n', '\t\t\t\tif (whitelist[depositAddresses[dIndex]].isStaking) {\n', '\t\t\t\t\t// Is staking\n', '\t\t\t\t\ttokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);\n', '\t\t\t\t\tsecondBatchAddresses.push(depositAddresses[dIndex]);\n', '\n', '\t\t\t\t\temit TokenReleased(block.timestamp, depositAddresses[dIndex], stakeReleaseFirstBatchAmount);\n', '\t\t\t\t} else {\n', '\t\t\t\t\t// Not staking\n', '\t\t\t\t\ttokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);\n', '\n', '\t\t\t\t\temit TokenReleased(block.timestamp, depositAddresses[dIndex], noStakeReleaseAmount);\n', '\t\t\t\t}\n', '\t\t\t}\n', '\n', '\t\t\tdIndex = dIndex.add(1);\n', '\n', '\t\t\tif (dIndex == depositAddresses.length) {\n', '\t\t\t\treceivingAddress.transfer(address(this).balance);\n', '\t\t\t\tstakeStart = block.timestamp;\n', '\t\t\t\tstatus = ContractStatus.FIRST_BATCH_TOKEN_RELEASED;\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '     * @dev ContractStatus.FIRST_BATCH_TOKEN_RELEASED functions\n', '     */\n', '\n', '    function releaseSecondBatchTokens(uint256 _count) public onlyOwner {\n', '\t\trequire(status == ContractStatus.FIRST_BATCH_TOKEN_RELEASED);\n', '\t\trequire(block.timestamp > (stakeStart + stakeDuration));\n', '\n', '\t\tfor (uint256 i = 0; i < _count; i++) {\n', '\t\t\ttokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);\n', '\t\t\temit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);\n', '\n', '\t\t\tsIndex = sIndex.add(1);\n', '\n', '\t\t\tif (sIndex == secondBatchAddresses.length) {\n', '\t\t\t\tstatus = ContractStatus.SECOND_BATCH_TOKEN_RELEASED;\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '     * @dev ContractStatus.SECOND_BATCH_TOKEN_RELEASED functions\n', '     */\n', '\n', '\tfunction withdrawTokens() public onlyOwner {\n', '\t\trequire(status == ContractStatus.SECOND_BATCH_TOKEN_RELEASED);\n', '\n', '\t\ttokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));\n', '\t}\n', '\n', '}']