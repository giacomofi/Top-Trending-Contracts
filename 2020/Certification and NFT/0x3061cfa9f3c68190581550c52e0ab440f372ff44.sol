['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface PickleJar {\n', '    function balanceOf(address account) external view returns (uint);\n', '    function balance() external view returns (uint);\n', '    function available() external view returns (uint);\n', '    function depositAll() external;\n', '    function deposit(uint _amount) external;\n', '    function withdrawAll() external;\n', '    function withdraw(uint _shares) external;\n', '    function getRatio() external view returns (uint);\n', '}\n', '\n', 'interface PickleMasterChef {\n', '    function deposit(uint _poolId, uint _amount) external;\n', '    function withdraw(uint _poolId, uint _amount) external;\n', '    function pendingPickle(uint _pid, address _user) external view returns (uint);\n', '    function userInfo(uint _pid, address _user) external view returns (uint amount, uint rewardDebt);\n', '    function emergencyWithdraw(uint _pid) external;\n', '}\n', '\n', 'interface Uni {\n', '    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n', '}\n', '\n', 'interface Balancer {\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        address tokenOut,\n', '        uint minAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint maxAmountIn,\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n', '    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut) external returns (uint poolAmountOut);\n', '    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\n', '}\n', '\n', '// 0: DAI, 1: USDC, 2: USDT\n', 'interface IStableSwap3Pool {\n', '    function get_virtual_price() external view returns (uint);\n', '    function balances(uint) external view returns (uint);\n', '    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\n', '    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\n', '    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n', '    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n', '    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\n', '}\n', '\n', 'interface IValueMultiVault {\n', '    function cap() external view returns (uint);\n', '    function getConverter(address _want) external view returns (address);\n', '    function getVaultMaster() external view returns (address);\n', '    function balance() external view returns (uint);\n', '    function token() external view returns (address);\n', '    function available(address _want) external view returns (uint);\n', '    function accept(address _input) external view returns (bool);\n', '\n', '    function claimInsurance() external;\n', '    function earn(address _want) external;\n', '    function harvest(address reserve, uint amount) external;\n', '\n', '    function withdraw_fee(uint _shares) external view returns (uint);\n', '    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint);\n', '    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n', '    function convert_rate(address _input, uint _amount) external view returns (uint);\n', '    function getPricePerFullShare() external view returns (uint);\n', '    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\n', '\n', '    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositAll(uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositAllFor(address _account, address _to, uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\n', '    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\n', '\n', '    function harvestStrategy(address _strategy) external;\n', '    function harvestWant(address _want) external;\n', '    function harvestAllStrategies() external;\n', '}\n', '\n', 'interface IMultiVaultController {\n', '    function vault() external view returns (address);\n', '\n', '    function wantQuota(address _want) external view returns (uint);\n', '    function wantStrategyLength(address _want) external view returns (uint);\n', '    function wantStrategyBalance(address _want) external view returns (uint);\n', '\n', '    function getStrategyCount() external view returns(uint);\n', '    function strategies(address _want, uint _stratId) external view returns (address _strategy, uint _quota, uint _percent);\n', '    function getBestStrategy(address _want) external view returns (address _strategy);\n', '\n', '    function basedWant() external view returns (address);\n', '    function want() external view returns (address);\n', '    function wantLength() external view returns (uint);\n', '\n', '    function balanceOf(address _want, bool _sell) external view returns (uint);\n', '    function withdraw_fee(address _want, uint _amount) external view returns (uint); // eg. 3CRV => pJar: 0.5% (50/10000)\n', '    function investDisabled(address _want) external view returns (bool);\n', '\n', '    function withdraw(address _want, uint) external returns (uint _withdrawFee);\n', '    function earn(address _token, uint _amount) external;\n', '\n', '    function harvestStrategy(address _strategy) external;\n', '    function harvestWant(address _want) external;\n', '    function harvestAllStrategies() external;\n', '}\n', '\n', 'interface IValueVaultMaster {\n', '    function bank(address) view external returns (address);\n', '    function isVault(address) view external returns (bool);\n', '    function isController(address) view external returns (bool);\n', '    function isStrategy(address) view external returns (bool);\n', '\n', '    function slippage(address) view external returns (uint);\n', '    function convertSlippage(address _input, address _output) view external returns (uint);\n', '\n', '    function valueToken() view external returns (address);\n', '    function govVault() view external returns (address);\n', '    function insuranceFund() view external returns (address);\n', '    function performanceReward() view external returns (address);\n', '\n', '    function govVaultProfitShareFee() view external returns (uint);\n', '    function gasFee() view external returns (uint);\n', '    function insuranceFee() view external returns (uint);\n', '    function withdrawalProtectionFee() view external returns (uint);\n', '}\n', '\n', '/*\n', '\n', ' A strategy must implement the following calls;\n', '\n', ' - deposit()\n', ' - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\n', ' - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\n', ' - withdrawAll() - Controller | Vault role - withdraw should always return to vault\n', ' - balanceOf()\n', '\n', ' Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\n', '\n', '*/\n', 'contract StrategyPickle3Crv {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '\n', '    Uni public unirouter = Uni(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    address public want = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490); // supposed to be 3CRV\n', '    address public p3crv = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n', '\n', '    // used for pickle -> weth -> [getMostPremium()] -> 3crv route\n', '    address public pickle = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n', '    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public t3crv = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n', '\n', '    // for add_liquidity via curve.fi to get back 3CRV (use getMostPremium() for the best stable coin used in the route)\n', '    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    address public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '\n', '    PickleJar public pickleJar;\n', '    PickleMasterChef public pickleMasterChef = PickleMasterChef(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n', '    uint public poolId = 14;\n', '\n', '    uint public withdrawalFee = 0; // over 10000\n', '\n', '    address public governance;\n', '    address public timelock;\n', '    address public controller;\n', '    address public strategist;\n', '\n', '    IValueMultiVault public vault;\n', '    IValueVaultMaster public vaultMaster;\n', '    IStableSwap3Pool public stableSwap3Pool;\n', '\n', '    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\n', '    mapping(address => mapping(address => address)) public balancerPools; // [input -> output] => balancer_pool\n', '\n', '    constructor(address _want, address _p3crv, address _pickle, address _weth, address _t3crv,\n', '        address _dai, address _usdc, address _usdt,\n', '        IStableSwap3Pool _stableSwap3Pool, address _controller) public {\n', '        want = _want;\n', '        p3crv = _p3crv;\n', '        pickle = _pickle;\n', '        weth = _weth;\n', '        t3crv = _t3crv;\n', '        dai = _dai;\n', '        usdc = _usdc;\n', '        usdt = _usdt;\n', '        stableSwap3Pool = _stableSwap3Pool;\n', '        pickleJar = PickleJar(_p3crv);\n', '        controller = _controller;\n', '        vault = IValueMultiVault(IMultiVaultController(_controller).vault());\n', '        require(address(vault) != address(0), "!vault");\n', '        vaultMaster = IValueVaultMaster(vault.getVaultMaster());\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '        timelock = msg.sender;\n', '        IERC20(want).safeApprove(address(pickleJar), type(uint256).max);\n', '        IERC20(p3crv).safeApprove(address(pickleMasterChef), type(uint256).max);\n', '        IERC20(weth).safeApprove(address(unirouter), type(uint256).max);\n', '        IERC20(pickle).safeApprove(address(unirouter), type(uint256).max);\n', '        IERC20(dai).safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        IERC20(usdc).safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        IERC20(usdt).safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        IERC20(t3crv).safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '    }\n', '\n', '    function getMostPremium() public view returns (address, uint256)\n', '    {\n', '        uint256[] memory balances = new uint256[](3);\n', '        balances[0] = stableSwap3Pool.balances(0); // DAI\n', '        balances[1] = stableSwap3Pool.balances(1).mul(10**12); // USDC\n', '        balances[2] = stableSwap3Pool.balances(2).mul(10**12); // USDT\n', '\n', '        // DAI\n', '        if (balances[0] < balances[1] && balances[0] < balances[2]) {\n', '            return (dai, 0);\n', '        }\n', '\n', '        // USDC\n', '        if (balances[1] < balances[0] && balances[1] < balances[2]) {\n', '            return (usdc, 1);\n', '        }\n', '\n', '        // USDT\n', '        if (balances[2] < balances[0] && balances[2] < balances[1]) {\n', '            return (usdt, 2);\n', '        }\n', '\n', "        // If they're somehow equal, we just want DAI\n", '        return (dai, 0);\n', '    }\n', '\n', '    function getName() public pure returns (string memory) {\n', '        return "mvUSD:StrategyPickle3Crv";\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setWithdrawalFee(uint _withdrawalFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setPickleMasterChef(PickleMasterChef _pickleMasterChef) external {\n', '        require(msg.sender == governance, "!governance");\n', '        pickleMasterChef = _pickleMasterChef;\n', '        IERC20(p3crv).safeApprove(address(pickleMasterChef), type(uint256).max);\n', '    }\n', '\n', '    function setPoolId(uint _poolId) external {\n', '        require(msg.sender == governance, "!governance");\n', '        poolId = _poolId;\n', '    }\n', '\n', '    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\n', '        require(msg.sender == controller || msg.sender == governance, "!authorized");\n', '        _token.safeApprove(_spender, _amount);\n', '    }\n', '\n', '    function setUnirouter(Uni _unirouter) external {\n', '        require(msg.sender == governance, "!governance");\n', '        unirouter = _unirouter;\n', '        IERC20(weth).safeApprove(address(unirouter), type(uint256).max);\n', '        IERC20(pickle).safeApprove(address(unirouter), type(uint256).max);\n', '    }\n', '\n', '    function deposit() public {\n', '        uint _wantBal = IERC20(want).balanceOf(address(this));\n', '        if (_wantBal > 0) {\n', '            // deposit 3crv to pickleJar\n', '            pickleJar.depositAll();\n', '        }\n', '\n', '        uint _p3crvBal = IERC20(p3crv).balanceOf(address(this));\n', '        if (_p3crvBal > 0) {\n', '            // stake p3crv to pickleMasterChef\n', '            pickleMasterChef.deposit(poolId, _p3crvBal);\n', '        }\n', '    }\n', '\n', '    function skim() external {\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        IERC20(want).safeTransfer(controller, _balance);\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint balance) {\n', '        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, "!authorized");\n', '\n', '        require(want != address(_asset), "want");\n', '\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    function withdrawToController(uint _amount) external {\n', '        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, "!authorized");\n', '        require(controller != address(0), "!controller"); // additional protection so we don\'t burn the funds\n', '\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        IERC20(want).safeTransfer(controller, _amount);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external returns (uint) {\n', '        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, "!authorized");\n', '\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        IERC20(want).safeTransfer(address(vault), _amount);\n', '        return _amount;\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint balance) {\n', '        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, "!authorized");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        IERC20(want).safeTransfer(address(vault), balance);\n', '    }\n', '\n', '    function claimReward() public {\n', '        pickleMasterChef.withdraw(poolId, 0);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        (uint amount,) = pickleMasterChef.userInfo(poolId, address(this));\n', '        pickleMasterChef.withdraw(poolId, amount);\n', '        pickleJar.withdrawAll();\n', '    }\n', '\n', '    function setUnirouterPath(address _input, address _output, address [] memory _path) public {\n', '        require(msg.sender == governance || msg.sender == strategist, "!authorized");\n', '        uniswapPaths[_input][_output] = _path;\n', '    }\n', '\n', '    function setBalancerPools(address _input, address _output, address _pool) public {\n', '        require(msg.sender == governance || msg.sender == strategist, "!authorized");\n', '        balancerPools[_input][_output] = _pool;\n', '        IERC20(_input).safeApprove(_pool, type(uint256).max);\n', '    }\n', '\n', '    function _swapTokens(address _input, address _output, uint256 _amount) internal {\n', '        address _pool = balancerPools[_input][_output];\n', '        if (_pool != address(0)) { // use balancer/vliquid\n', '            Balancer(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\n', '        } else { // use Uniswap\n', '            address[] memory path = uniswapPaths[_input][_output];\n', '            if (path.length == 0) {\n', '                // path: _input -> _output\n', '                path = new address[](2);\n', '                path[0] = _input;\n', '                path[1] = _output;\n', '            }\n', '            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\n', '        }\n', '    }\n', '\n', '    function _addLiquidity() internal {\n', '        uint[3] memory amounts;\n', '        amounts[0] = IERC20(dai).balanceOf(address(this));\n', '        amounts[1] = IERC20(usdc).balanceOf(address(this));\n', '        amounts[2] = IERC20(usdt).balanceOf(address(this));\n', '        stableSwap3Pool.add_liquidity(amounts, 1);\n', '    }\n', '\n', '    function harvest(address _mergedStrategy) external {\n', '        require(msg.sender == controller || msg.sender == strategist || msg.sender == governance, "!authorized");\n', '        claimReward();\n', '        uint _pickleBal = IERC20(pickle).balanceOf(address(this));\n', '\n', '        _swapTokens(pickle, weth, _pickleBal);\n', '        uint256 _wethBal = IERC20(weth).balanceOf(address(this));\n', '\n', '        if (_wethBal > 0) {\n', '            if (_mergedStrategy != address(0)) {\n', '                require(vaultMaster.isStrategy(_mergedStrategy), "!strategy"); // additional protection so we don\'t burn the funds\n', '                IERC20(weth).safeTransfer(_mergedStrategy, _wethBal); // forward WETH to one strategy and do the profit split all-in-one there (gas saving)\n', '            } else {\n', '                address govVault = vaultMaster.govVault();\n', '                address performanceReward = vaultMaster.performanceReward();\n', '\n', '                if (vaultMaster.govVaultProfitShareFee() > 0 && govVault != address(0)) {\n', '                    address _valueToken = vaultMaster.valueToken();\n', '                    uint256 _govVaultProfitShareFee = _wethBal.mul(vaultMaster.govVaultProfitShareFee()).div(10000);\n', '                    _swapTokens(weth, _valueToken, _govVaultProfitShareFee);\n', '                    IERC20(_valueToken).safeTransfer(govVault, IERC20(_valueToken).balanceOf(address(this)));\n', '                }\n', '\n', '                if (vaultMaster.gasFee() > 0 && performanceReward != address(0)) {\n', '                    uint256 _gasFee = _wethBal.mul(vaultMaster.gasFee()).div(10000);\n', '                    IERC20(weth).safeTransfer(performanceReward, _gasFee);\n', '                }\n', '\n', '                _wethBal = IERC20(weth).balanceOf(address(this));\n', '                // stablecoin we want to convert to\n', '                (address _stableCoin,) = getMostPremium();\n', '                _swapTokens(weth, _stableCoin, _wethBal);\n', '                _addLiquidity();\n', '\n', '                uint _want = IERC20(want).balanceOf(address(this));\n', '                if (_want > 0) {\n', '                    deposit(); // auto re-invest\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function _withdrawSome(uint _amount) internal returns (uint) {\n', '        // unstake p3crv from pickleMasterChef\n', '        uint _ratio = pickleJar.getRatio();\n', '        _amount = _amount.mul(1e18).div(_ratio);\n', '        (uint _stakedAmount,) = pickleMasterChef.userInfo(poolId, address(this));\n', '        if (_amount > _stakedAmount) {\n', '            _amount = _stakedAmount;\n', '        }\n', '        uint _before = pickleJar.balanceOf(address(this));\n', '        pickleMasterChef.withdraw(poolId, _amount);\n', '        uint _after = pickleJar.balanceOf(address(this));\n', '        _amount = _after.sub(_before);\n', '\n', '        // withdraw 3crv from pickleJar\n', '        _before = IERC20(want).balanceOf(address(this));\n', '        pickleJar.withdraw(_amount);\n', '        _after = IERC20(want).balanceOf(address(this));\n', '        _amount = _after.sub(_before);\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function balanceOfWant() public view returns (uint) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public view returns (uint) {\n', '        uint p3crvBal = pickleJar.balanceOf(address(this));\n', '        (uint amount,) = pickleMasterChef.userInfo(poolId, address(this));\n', '        return p3crvBal.add(amount).mul(pickleJar.getRatio()).div(1e18);\n', '    }\n', '\n', '    function balanceOf() public view returns (uint) {\n', '        return balanceOfWant()\n', '               .add(balanceOfPool());\n', '    }\n', '\n', '    function withdrawFee(uint _amount) external view returns (uint) {\n', '        return _amount.mul(withdrawalFee).div(10000);\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setTimelock(address _timelock) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        timelock = _timelock;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '        vault = IValueMultiVault(IMultiVaultController(_controller).vault());\n', '        require(address(vault) != address(0), "!vault");\n', '        vaultMaster = IValueVaultMaster(vault.getVaultMaster());\n', '    }\n', '\n', '    event ExecuteTransaction(address indexed target, uint value, string signature, bytes data);\n', '\n', '    /**\n', '     * @dev This is from Timelock contract, the governance should be a Timelock contract before calling this emergency function!\n', '     */\n', '    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public returns (bytes memory) {\n', '        require(msg.sender == timelock, "!timelock");\n', '\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call{value : value}(callData);\n', '        require(success, string(abi.encodePacked(getName(), "::executeTransaction: Transaction execution reverted.")));\n', '\n', '        emit ExecuteTransaction(target, value, signature, data);\n', '\n', '        return returnData;\n', '    }\n', '}']