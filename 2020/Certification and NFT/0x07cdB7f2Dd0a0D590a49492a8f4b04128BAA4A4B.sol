['// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '\n', '    function decimals() external view returns (uint digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/kyber/KyberNetworkProxyInterface.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'interface KyberNetworkProxyInterface {\n', '    function maxGasPrice() external view returns (uint);\n', '\n', '    function getUserCapInWei(address user) external view returns (uint);\n', '\n', '    function getUserCapInTokenWei(address user, ERC20 token) external view returns (uint);\n', '\n', '    function enabled() external view returns (bool);\n', '\n', '    function info(bytes32 id) external view returns (uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\n', '    returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n', '        uint minConversionRate, address walletId, bytes calldata hint) external payable returns (uint);\n', '}\n', '\n', '// File: contracts/community/IDonationCommunity.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface IDonationCommunity {\n', '\n', '    function donateDelegated(address payable _donator) external payable;\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function charityVault() external view returns (address);\n', '}\n', '\n', '// File: contracts/kyber/KyberConverter.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract KyberConverter is Ownable {\n', '    using SafeMath for uint256;\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '\n', '    KyberNetworkProxyInterface public kyberNetworkProxyContract;\n', '    address public walletId;\n', '\n', '    // Events\n', '    event Swap(address indexed sender, ERC20 srcToken, ERC20 destToken);\n', '\n', '    /**\n', '     * @dev Payable fallback to receive ETH while converting\n', '     **/\n', '    function() external payable {\n', '    }\n', '\n', '    constructor (KyberNetworkProxyInterface _kyberNetworkProxyContract, address _walletId) public {\n', '        kyberNetworkProxyContract = _kyberNetworkProxyContract;\n', '        walletId = _walletId;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the conversion rate for the destToken given the srcQty.\n', '     * @param srcToken source token contract address\n', '     * @param srcQty amount of source tokens\n', '     * @param destToken destination token contract address\n', '     */\n', '    function getConversionRates(\n', '        ERC20 srcToken,\n', '        uint srcQty,\n', '        ERC20 destToken\n', '    ) public\n', '    view\n', '    returns (uint, uint)\n', '    {\n', '        return kyberNetworkProxyContract.getExpectedRate(srcToken, destToken, srcQty);\n', '    }\n', '\n', '    /**\n', "     * @dev Swap the user's ERC20 token to ETH\n", "     * Note: requires 'approve' srcToken first!\n", '     * @param srcToken source token contract address\n', '     * @param srcQty amount of source tokens\n', '     */\n', '    function executeSwapMyERCToETH(ERC20 srcToken, uint srcQty) public {\n', '        swapERCToETH(srcToken, srcQty, msg.sender);\n', '        emit Swap(msg.sender, srcToken, ETH_TOKEN_ADDRESS);\n', '    }\n', '\n', '\n', '    /**\n', "     * @dev Swap the user's ERC20 token to ETH and donates to the community.\n", "     * Note: requires 'approve' srcToken first!\n", '     * @param srcToken source token contract address\n', '     * @param srcQty amount of source tokens\n', '     * @param community address of the donation community\n', '     */\n', '    function executeSwapAndDonate(ERC20 srcToken, uint srcQty, IDonationCommunity community) public {\n', '        swapERCToETH(srcToken, srcQty, address(this));\n', '        // donate ETH to the community\n', '        community.donateDelegated.value(address(this).balance)(msg.sender);\n', '        emit Swap(msg.sender, srcToken, ETH_TOKEN_ADDRESS);\n', '    }\n', '\n', '    function swapERCToETH(ERC20 srcToken, uint srcQty, address destAddress) internal {\n', '        uint minConversionRate;\n', '\n', '        // Check that the token transferFrom has succeeded\n', '        require(srcToken.transferFrom(msg.sender, address(this), srcQty));\n', '\n', "        // Set the spender's token allowance to tokenQty\n", '        require(srcToken.approve(address(kyberNetworkProxyContract), srcQty));\n', '\n', '        // Get the minimum conversion rate\n', '        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(srcToken, ETH_TOKEN_ADDRESS, srcQty);\n', '        // -5% max\n', '        minConversionRate = minConversionRate.mul(95).div(100);\n', '        // +5% max\n', '        uint maxDestAmount = srcQty.mul(minConversionRate).mul(105).div(100);\n', '\n', "        // Swap the ERC20 token and send to 'this' contract address\n", '        bytes memory hint;\n', '        uint256 amount = kyberNetworkProxyContract.tradeWithHint(\n', '            srcToken,\n', '            srcQty,\n', '            ETH_TOKEN_ADDRESS,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '\n', '        // Return the change of src token\n', '        uint256 change = srcToken.balanceOf(address(this));\n', '\n', '        if (change > 0) {\n', '            require(\n', '                srcToken.transfer(msg.sender, change),\n', '                "Could not transfer change to sender"\n', '            );\n', '        }\n', '    }\n', '\n', '    function executeSwapMyETHToERC(address _ercAddress) public payable returns (uint256) {\n', '        uint minConversionRate;\n', '        uint srcQty = msg.value;\n', '        address destAddress = msg.sender;\n', '        ERC20 ercToken = ERC20(_ercAddress);\n', '\n', '        // Get the minimum conversion rate\n', '        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(ETH_TOKEN_ADDRESS, ercToken, srcQty);\n', '\n', '        uint maxDestAmount = srcQty.mul(minConversionRate).mul(105).div(100);\n', '        // 5%\n', '\n', '        // Swap the ERC20 token and send to destAddress\n', '        bytes memory hint;\n', '        uint256 amount = kyberNetworkProxyContract.tradeWithHint.value(srcQty)(\n', '            ETH_TOKEN_ADDRESS,\n', '            srcQty,\n', '            ercToken,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '        // Return the change of ETH if any\n', '        uint256 change = address(this).balance;\n', '        if (change > 0) {\n', '            address(msg.sender).transfer(change);\n', '        }\n', '        // Log the event\n', '        emit Swap(msg.sender, ETH_TOKEN_ADDRESS, ercToken);\n', '\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Recovery for the remaining change\n', '     */\n', '    function withdraw() public onlyOwner {\n', '        require(address(this).balance > 0, "Insufficient funds to withdraw");\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '}']