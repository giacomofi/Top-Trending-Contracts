['pragma solidity ^0.5.10;\n', '/*\n', ' * date: 10/6/2020\n', ' * title: CryptoBoard - Simple smart contract billboard that charges users a set price to update the image, the price to update is then increased by a set amount (25% markup in this example)\n', ' *\t\t\t\t\t\tThe received funds are then split between the developer and a charity\n', ' * author: Crypto [Neo] - Check me out on twitter! (@neoaikon), if you like my work feel free to send me a tip at 0x5E294C8db9FdE66C19665ed42c6cb4552B0f5e73\n', ' */\n', 'contract CryptoBoard {\n', '\taddress private owner;\t\t\n', '\t// Billboard parameters\n', '\tstring public urlCharity;\n', '\tstring public nameCharity;\t\n', '\tstring public urlBillboard;\n', '\tstring public lcdMessage;\n', '\t// Payment parameters\t\n', '\taddress payable public payeeDev;\n', '\taddress payable public payeeCharity;\n', '\tuint256 public minCost;\n', '\tuint256 public lastEpoch;\n', '\tuint256 public updateCost;\n', '\tuint8 public split;\n', '\tuint8 public markup;\n', '\t\n', '\t/// Modifier so only the owner can change the Minimum Cost, Markup and Split amounds, as well as the Dev and Charity addresses\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\t\n', '\t// Constructor\n', '\tconstructor(address payable initDevPayee, string memory initCharityName, address payable initCharityPayee, string memory initCharityUrl) public {\n', '\t\t// Set owner, developer, and charity addresses\n', '\t\towner = msg.sender;\n', '\t\tpayeeDev = initDevPayee;\n', '\t\tpayeeCharity = initCharityPayee;\n', '\t\t// Initialize the initial image, charity name and icon\n', '\t\tnameCharity = initCharityName;\n', '\t\turlCharity = initCharityUrl;\n', '\t\t// Initialize the billboard\n', '\t\turlBillboard = "https://ipfs.io/ipfs/Qmej3Wu3NxqaHCJ1wdDuQUu3PWwLoPoA6mX9ts5YjPGgrJ";\n', '\t\t// Initialize the LCD message\n', '\t\tlcdMessage = "Cryptoboard - The interwebs Ethereum powered billboard!";\n', '\t\t// Initialize the last updated time\n', '\t\tlastEpoch = now;\n', '\t\t// Initialze the price variables\n', '\t\tmarkup = 125; // 25%\n', '\t\tsplit = 5; // 5%\n', '\t\tminCost = .01 ether;\n', '\t\tupdateCost = minCost;\n', '\t}\n', '\n', '\t// Update the image displayed on the billboard\t\n', '\tfunction updateBillboard(string memory newBillboardUrl) public payable {\n', '\t    require(bytes(newBillboardUrl).length != 0, "Billboard URL cannot be blank");\n', '\t\trequire(msg.value > 0, "You need to actually send ETH!");\n', '\t\t// Get the cost of the update\n', '\t\tupdateCost = getCost();\n', '\t\t// Make sure the amount of ETH sent matches the update cost\n', '\t\trequire(msg.value >= updateCost, "You didn\'t send enough wei, check getCost()");\n', '\t\t// Update the LUT, image URL, and increase the cos by 10%\n', '\t\tlastEpoch = now;\n', '\t\turlBillboard = newBillboardUrl;\t\t\n', '\t\tupdateCost = updateCost * markup / 100;\n', '\t\t\n', '\t\tperformDonation(msg.value);\n', '\t}\n', '\t\n', '\t// Update the message displayed under the billboard\t\n', '\tfunction updateLcdMessage(string memory newLcdMessage) public payable {\n', '\t    require(bytes(newLcdMessage).length != 0, "LCD message cannot be blank");\n', '\t\trequire(msg.value > 0, "You need to actually send ETH!");\t\t\t\t\n', '\t\trequire(msg.value >= minCost/2, "You didn\'t send enough wei, cost=mincost/2");\n', '\t\tlcdMessage = newLcdMessage;\t\t\n', '\t\tperformDonation(msg.value);\t\t\n', '\t}\n', '\t\n', '\t// Owner Only - Change the Developer payout address\n', '\tfunction setDevData(address payable newPayeeDev) public onlyOwner {\n', '\t\trequire(newPayeeDev != address(0), "Developer payout cannot be burned");\n', '\t\tpayeeDev = newPayeeDev;\n', '\t}\n', '\t\n', '\t// Owner Only - Change the Charity name, payout address and display icon\n', '\tfunction setCharityData(string memory newCharityName, address payable newPayeeCharity, string memory newCharityUrl) public onlyOwner {\n', '\t\trequire(bytes(newCharityName).length != 0, "Charity name cannot be blank");\n', '\t\trequire(bytes(newCharityUrl).length != 0, "Charity URL cannot be blank");\n', '\t\trequire(newPayeeCharity != address(0), "Charity payout cannot be burned! Are you crazy?!");\n', '\t\tnameCharity = newCharityName;\n', '\t\tpayeeCharity = newPayeeCharity;\n', '\t\turlCharity = newCharityUrl;\n', '\t}\n', '\n', '\t// Owner Only - Change the minimum cost to set the billboard, as well as the markup and split parameters\n', '\tfunction setCostData(uint256 newMinCost, uint8 newMarkup, uint8 newSplit) public onlyOwner {\n', '\t    require(newMinCost != 0 && newMarkup != 0 && newSplit != 0, "All cost parameters must be > 0");\n', '\t\tminCost = newMinCost;\n', '\t\tmarkup = newMarkup;\n', '\t\tsplit = newSplit;\n', '\t}\n', '\t\n', '\t// Calculate the payment split and send it to the Dev and Charity\n', '\tfunction performDonation(uint256 v) private {\n', '\t\tuint256 devSplit = v * split / 100;\n', '\t\t// Send payouts to the developer and a charity\n', '\t\tpayeeDev.transfer(devSplit);\n', '\t\tpayeeCharity.transfer(msg.value-devSplit);\n', '\t}\n', '\t\n', '\t// Use this function when fetching the cost as it returns the calculated depreceated value\n', '\tfunction getCost() public view returns (uint256) {\n', '\t\t// Get number of days since last update\n', '\t\tuint256 updateDelta = (now - lastEpoch) / 1 days;\n', '\t\t// Over time the update cost will return to the minCost value\n', '\t\t// at a rate of 10% per day\tsince last update\n', '\t\tuint256 tmpCost = updateCost;\n', '\t\tfor(uint256 i = 0; i < updateDelta; i++)\n', '\t\t{\n', '\t\t\ttmpCost -= tmpCost * 10 / 100;\n', '\t\t\tif(tmpCost < minCost) {\n', '\t\t\t\ttmpCost = minCost;\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn tmpCost;\n', '\t}\n', '}']