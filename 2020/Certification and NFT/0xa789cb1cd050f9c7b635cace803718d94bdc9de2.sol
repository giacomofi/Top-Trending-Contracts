['/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' * \n', ' * NEXT GENERATION STAKING\n', ' * HOME https://e2xtoken.io\n', ' * \n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface TRC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {TRC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {TRC20-approve}.\n', ' */\n', 'contract ERC20 is Context, TRC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    // allocating 10 million tokens for xswap liquidity, promotions, airdrop and dev costs\n', '    uint256 private _totalSupply = 10000000 * (10 ** 8);\n', '\n', '    constructor() public {\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {TRC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {TRC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {TRC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev External function to destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     */\n', '    function burn(uint256 amount) external {\n', '        require(_balances[msg.sender] >= amount, "ERC20: not enough balance!");\n', '\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract GlobalsAndUtility is ERC20 {\n', '    /*  XfLobbyEnter\n', '    */\n', '    event XfLobbyEnter(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed entryIndex,\n', '        uint256 indexed rawAmount\n', '    );\n', '\n', '    /*  XfLobbyExit \n', '    */\n', '    event XfLobbyExit(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed entryIndex,\n', '        uint256 indexed xfAmount,\n', '        address indexed referrerAddr\n', '    );\n', '\n', '    /*  DailyDataUpdate\n', '    */\n', '    event DailyDataUpdate(\n', '        address indexed updaterAddr,\n', '        uint256 timestamp,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    );\n', '    \n', '    /*  StakeGoodAccounting\n', '    */\n', '    event StakeGoodAccounting(\n', '        uint40 indexed stakeId,\n', '        address indexed stakerAddr,\n', '        address indexed senderAddr,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 payout,\n', '        uint256 penalty\n', '    );\n', '\n', '    /*  StakeStart\n', '    */\n', '    event StakeStart(\n', '        uint40 indexed stakeId,\n', '        address indexed stakerAddr,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 stakedDays\n', '    );\t\n', '\n', '    /*  StakeEnd \n', '    */\n', '    event StakeEnd(\n', '        uint40 indexed stakeId,\n', '        uint40 prevUnlocked,\n', '        address indexed stakerAddr,\n', '        uint256 lockedDay,\n', '        uint256 servedDays,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 dividends,\n', '        uint256 payout,\n', '        uint256 penalty,\n', '        uint256 stakeReturn\n', '    );\n', '\n', '    /*  ShareRateChange \n', '    */\n', '    event ShareRateChange(\n', '        uint40 indexed stakeId,\n', '        uint256 timestamp,\n', '        uint256 newShareRate\n', '    );\n', '\t\n', '    /* ERC20 constants */\n', '    string public constant name = "E2X";\n', '    string public constant symbol = "E2X";\n', '    uint8 public constant decimals = 8;\n', '\n', '    /* Suns per Satoshi = 10,000 * 1e8 / 1e8 = 1e4 */\n', '    uint256 private constant SUNS_PER_E2X = 10 ** uint256(decimals); // 1e8\t\n', '\t\n', '    /* Number of words to hold 1 bit for each transform lobby day */\n', '    uint256 internal constant XF_LOBBY_DAY_WORDS = ((1 + (50 * 7)) + 255) >> 8;\t\n', '\n', '    /* T2X allocation share address */\n', '    address payable internal constant T2X_SHARE_ADDR = 0x769902b4cB2dfD79F2370555AD255Bf599bF7155;\n', '\n', '    uint8 internal LAST_FLUSHED_DAY = 1;\n', '\n', '    /* Start of claim phase */\n', '    uint256 internal constant PRE_CLAIM_DAYS = 1;\n', '    uint256 internal constant CLAIM_STARTING_AMOUNT = 5000000 * (10 ** 8);\n', '    uint256 internal constant CLAIM_LOWEST_AMOUNT = 1000000 * (10 ** 8);\n', '    uint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\n', '\n', '    /* Time of contract launch (30-10-2020 T00:00:00Z) */\n', '    uint256 internal constant LAUNCH_TIME = 1604016000;\n', '\n', '    /* Stake timing parameters */\n', '    uint256 internal constant MIN_STAKE_DAYS = 1;\n', '\n', '    uint256 internal constant MAX_STAKE_DAYS = 365;\n', '\n', '    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\n', '\n', '    uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\n', '    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\n', '\n', '    uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\n', '    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\n', '\n', '    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusSuns() */\n', '    uint256 private constant LPB_BONUS_PERCENT = 20;\n', '    uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\n', '    uint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\n', '    uint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\n', '\n', '    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusSuns() */\n', '    uint256 private constant BPB_BONUS_PERCENT = 10;\n', '    uint256 private constant BPB_MAX_E2X = 7 * 1e6;\n', '    uint256 internal constant BPB_MAX_SUNS = BPB_MAX_E2X * SUNS_PER_E2X;\n', '    uint256 internal constant BPB = BPB_MAX_SUNS * 100 / BPB_BONUS_PERCENT;\n', '\n', '    /* Share rate is scaled to increase precision */\n', '    uint256 internal constant SHARE_RATE_SCALE = 1e5;\n', '\n', '    /* Share rate max (after scaling) */\n', '    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\n', '    uint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\n', '\n', '    /* weekly staking bonus */\n', '    uint8 internal constant BONUS_DAY_SCALE = 2;\n', '\n', '    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\n', '    struct GlobalsCache {\n', '        uint256 _lockedSunsTotal;\n', '        uint256 _nextStakeSharesTotal;\n', '        uint256 _shareRate;\n', '        uint256 _stakePenaltyTotal;\n', '        uint256 _dailyDataCount;\n', '        uint256 _stakeSharesTotal;\n', '        uint40 _latestStakeId;\n', '        uint256 _currentDay;\n', '    }\n', '\n', '    struct GlobalsStore {\n', '        uint72 lockedSunsTotal;\n', '        uint72 nextStakeSharesTotal;\n', '        uint40 shareRate;\n', '        uint72 stakePenaltyTotal;\n', '        uint16 dailyDataCount;\n', '        uint72 stakeSharesTotal;\n', '        uint40 latestStakeId;\n', '    }\n', '\n', '    GlobalsStore public globals;\n', '\n', '    /* Daily data */\n', '    struct DailyDataStore {\n', '        uint72 dayPayoutTotal;\n', '        uint256 dayDividends;\n', '        uint72 dayStakeSharesTotal;\n', '    }\n', '\n', '    mapping(uint256 => DailyDataStore) public dailyData;\n', '\n', '    /* Stake expanded for memory (except _stakeId) and compact for storage */\n', '    struct StakeCache {\n', '        uint40 _stakeId;\n', '        uint256 _stakedSuns;\n', '        uint256 _stakeShares;\n', '        uint256 _lockedDay;\n', '        uint256 _stakedDays;\n', '        uint256 _unlockedDay;\n', '    }\n', '\n', '    struct StakeStore {\n', '        uint40 stakeId;\n', '        uint72 stakedSuns;\n', '        uint72 stakeShares;\n', '        uint16 lockedDay;\n', '        uint16 stakedDays;\n', '        uint16 unlockedDay;\n', '    }\n', '\n', '    mapping(address => StakeStore[]) public stakeLists;\n', '\n', '    /* Temporary state for calculating daily rounds */\n', '    struct DailyRoundState {\n', '        uint256 _allocSupplyCached;\n', '        uint256 _payoutTotal;\n', '    }\n', '\n', '    struct XfLobbyEntryStore {\n', '        uint96 rawAmount;\n', '        address referrerAddr;\n', '    }\n', '\n', '    struct XfLobbyQueueStore {\n', '        uint40 headIndex;\n', '        uint40 tailIndex;\n', '        mapping(uint256 => XfLobbyEntryStore) entries;\n', '    }\n', '\n', '    mapping(uint256 => uint256) public xfLobby;\n', '    mapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers;\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Optionally update daily data for a smaller\n', '     * range to reduce gas cost for a subsequent operation\n', '     * @param beforeDay Only update days before this day number (optional; 0 for current day)\n', '     */\n', '    function dailyDataUpdate(uint256 beforeDay)\n', '        external\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '\n', '        /* Skip pre-claim period */\n', '        require(g._currentDay > CLAIM_PHASE_START_DAY, "E2X: Too early");\n', '\n', '        if (beforeDay != 0) {\n', '            require(beforeDay <= g._currentDay, "E2X: beforeDay cannot be in the future");\n', '\n', '            _dailyDataUpdate(g, beforeDay, false);\n', '        } else {\n', '            /* Default to updating before current day */\n', '            _dailyDataUpdate(g, g._currentDay, false);\n', '        }\n', '\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\n', '     * a single call.\n', '     * @param beginDay First day of data range\n', '     * @param endDay Last day (non-inclusive) of data range\n', '     * @return array of day stake shares total\n', '     * @return array of day payout total\n', '     */\n', '    function dailyDataRange(uint256 beginDay, uint256 endDay)\n', '        external\n', '        view\n', '        returns (uint256[] memory _dayStakeSharesTotal, uint256[] memory _dayPayoutTotal, uint256[] memory _dayDividends)\n', '    {\n', '        require(beginDay < endDay && endDay <= globals.dailyDataCount, "E2X: range invalid");\n', '\n', '        _dayStakeSharesTotal = new uint256[](endDay - beginDay);\n', '        _dayPayoutTotal = new uint256[](endDay - beginDay);\n', '        _dayDividends = new uint256[](endDay - beginDay);\n', '\n', '        uint256 src = beginDay;\n', '        uint256 dst = 0;\n', '        do {\n', '            _dayStakeSharesTotal[dst] = uint256(dailyData[src].dayStakeSharesTotal);\n', '            _dayPayoutTotal[dst++] = uint256(dailyData[src].dayPayoutTotal);\n', '            _dayDividends[dst++] = dailyData[src].dayDividends;\n', '        } while (++src < endDay);\n', '\n', '        return (_dayStakeSharesTotal, _dayPayoutTotal, _dayDividends);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return most global info with a single call.\n', '     * Ugly implementation due to limitations of the standard ABI encoder.\n', '     * @return Fixed array of values\n', '     */\n', '    function globalInfo()\n', '        external\n', '        view\n', '        returns (uint256[10] memory)\n', '    {\n', '\n', '        return [\n', '            globals.lockedSunsTotal,\n', '            globals.nextStakeSharesTotal,\n', '            globals.shareRate,\n', '            globals.stakePenaltyTotal,\n', '            globals.dailyDataCount,\n', '            globals.stakeSharesTotal,\n', '            globals.latestStakeId,\n', '            block.timestamp,\n', '            totalSupply(),\n', '            xfLobby[_currentDay()]\n', '        ];\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\n', '     * staked Suns. allocatedSupply() includes both.\n', '     * @return Allocated Supply in Suns\n', '     */\n', '    function allocatedSupply()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupply() + globals.lockedSunsTotal;\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper for the current day number since launch time\n', '     * @return Current day number (zero-based)\n', '     */\n', '    function currentDay()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _currentDay();\n', '    }\n', '\n', '    function _currentDay()\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (block.timestamp < LAUNCH_TIME){\n', '             return 0;\n', '        }else{\n', '             return (block.timestamp - LAUNCH_TIME) / 1 days;\n', '        }\n', '    }\n', '\n', '    function _dailyDataUpdateAuto(GlobalsCache memory g)\n', '        internal\n', '    {\n', '        _dailyDataUpdate(g, g._currentDay, true);\n', '    }\n', '\n', '    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\n', '        internal\n', '        view\n', '    {\n', '        g._lockedSunsTotal = globals.lockedSunsTotal;\n', '        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\n', '        g._shareRate = globals.shareRate;\n', '        g._stakePenaltyTotal = globals.stakePenaltyTotal;\n', '        g._dailyDataCount = globals.dailyDataCount;\n', '        g._stakeSharesTotal = globals.stakeSharesTotal;\n', '        g._latestStakeId = globals.latestStakeId;\n', '        g._currentDay = _currentDay();\n', '\n', '        _globalsCacheSnapshot(g, gSnapshot);\n', '    }\n', '\n', '    function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot)\n', '        internal\n', '        pure\n', '    {\n', '        gSnapshot._lockedSunsTotal = g._lockedSunsTotal;\n', '        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\n', '        gSnapshot._shareRate = g._shareRate;\n', '        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\n', '        gSnapshot._dailyDataCount = g._dailyDataCount;\n', '        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\n', '        gSnapshot._latestStakeId = g._latestStakeId;\n', '    }\n', '\n', '    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\n', '        internal\n', '    {\n', '        if (g._lockedSunsTotal != gSnapshot._lockedSunsTotal\n', '            || g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal\n', '            || g._shareRate != gSnapshot._shareRate\n', '            || g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal) {\n', '            globals.lockedSunsTotal = uint72(g._lockedSunsTotal);\n', '            globals.nextStakeSharesTotal = uint72(g._nextStakeSharesTotal);\n', '            globals.shareRate = uint40(g._shareRate);\n', '            globals.stakePenaltyTotal = uint72(g._stakePenaltyTotal);\n', '        }\n', '        if (g._dailyDataCount != gSnapshot._dailyDataCount\n', '            || g._stakeSharesTotal != gSnapshot._stakeSharesTotal\n', '            || g._latestStakeId != gSnapshot._latestStakeId) {\n', '            globals.dailyDataCount = uint16(g._dailyDataCount);\n', '            globals.stakeSharesTotal = uint72(g._stakeSharesTotal);\n', '            globals.latestStakeId = g._latestStakeId;\n', '        }\n', '    }\n', '\n', '    function _stakeLoad(StakeStore storage stRef, uint40 stakeIdParam, StakeCache memory st)\n', '        internal\n', '        view\n', '    {\n', "        /* Ensure caller's stakeIndex is still current */\n", '        require(stakeIdParam == stRef.stakeId, "E2X: stakeIdParam not in stake");\n', '\n', '        st._stakeId = stRef.stakeId;\n', '        st._stakedSuns = stRef.stakedSuns;\n', '        st._stakeShares = stRef.stakeShares;\n', '        st._lockedDay = stRef.lockedDay;\n', '        st._stakedDays = stRef.stakedDays;\n', '        st._unlockedDay = stRef.unlockedDay;\n', '    }\n', '\n', '    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\n', '        internal\n', '    {\n', '        stRef.stakeId = st._stakeId;\n', '        stRef.stakedSuns = uint72(st._stakedSuns);\n', '        stRef.stakeShares = uint72(st._stakeShares);\n', '        stRef.lockedDay = uint16(st._lockedDay);\n', '        stRef.stakedDays = uint16(st._stakedDays);\n', '        stRef.unlockedDay = uint16(st._unlockedDay);\n', '    }\n', '\n', '    function _stakeAdd(\n', '        StakeStore[] storage stakeListRef,\n', '        uint40 newStakeId,\n', '        uint256 newStakedSuns,\n', '        uint256 newStakeShares,\n', '        uint256 newLockedDay,\n', '        uint256 newStakedDays\n', '    )\n', '        internal\n', '    {\n', '        stakeListRef.push(\n', '            StakeStore(\n', '                newStakeId,\n', '                uint72(newStakedSuns),\n', '                uint72(newStakeShares),\n', '                uint16(newLockedDay),\n', '                uint16(newStakedDays),\n', '                uint16(0) // unlockedDay\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Efficiently delete from an unordered array by moving the last element\n', '     * to the "hole" and reducing the array length. Can change the order of the list\n', '     * and invalidate previously held indexes.\n', '     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\n', '     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\n', '     * @param stakeIndex Index of the element to delete\n', '     */\n', '    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\n', '        internal\n', '    {\n', '        uint256 lastIndex = stakeListRef.length - 1;\n', '\n', '        /* Skip the copy if element to be removed is already the last element */\n', '        if (stakeIndex != lastIndex) {\n', '            /* Copy last element to the requested element\'s "hole" */\n', '            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\n', '        }\n', '\n', '        /*\n', '            Reduce the array length now that the array is contiguous.\n', "            Surprisingly, 'pop()' uses less gas than 'stakeListRef.length = lastIndex'\n", '        */\n', '        stakeListRef.pop();\n', '    }\n', '\n', '    /**\n', '     * @dev Estimate the stake payout for an incomplete day\n', '     * @param g Cache of stored globals\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @param day Day to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function _estimatePayoutRewardsDay(GlobalsCache memory g, uint256 stakeSharesParam, uint256 day)\n', '        internal\n', '        view\n', '        returns (uint256 payout)\n', '    {\n', '        /* Prevent updating state for this estimation */\n', '        GlobalsCache memory gTmp;\n', '        _globalsCacheSnapshot(g, gTmp);\n', '\n', '        DailyRoundState memory rs;\n', '        rs._allocSupplyCached = totalSupply() + g._lockedSunsTotal;\n', '\n', '        _dailyRoundCalc(gTmp, rs, day);\n', '\n', '        /* Stake is no longer locked so it must be added to total as if it were */\n', '        gTmp._stakeSharesTotal += stakeSharesParam;\n', '\n', '        payout = rs._payoutTotal * stakeSharesParam / gTmp._stakeSharesTotal;\n', '\n', '        return payout;\n', '    }\n', '\n', '    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\n', '        private\n', '        view\n', '    {\n', '        /*\n', '            Calculate payout round\n', '\n', '            Inflation of 5.42% inflation per 364 days             (approx 1 year)\n', '            dailyInterestRate   = exp(log(1 + 5.42%)  / 364) - 1\n', '                                = exp(log(1 + 0.0542) / 364) - 1\n', '                                = exp(log(1.0542) / 364) - 1\n', '                                = 0.0.00014523452066           (approx)\n', '\n', '            payout  = allocSupply * dailyInterestRate\n', '                    = allocSupply / (1 / dailyInterestRate)\n', '                    = allocSupply / (1 / 0.00014523452066)\n', '                    = allocSupply / 6885.4153644438375            (approx)\n', '                    = allocSupply * 50000 / 68854153             (* 50000/50000 for int precision)\n', '        */\n', '        \n', '        rs._payoutTotal = (rs._allocSupplyCached * 50000 / 68854153);\n', '\n', '        if (g._stakePenaltyTotal != 0) {\n', '            rs._payoutTotal += g._stakePenaltyTotal;\n', '            g._stakePenaltyTotal = 0;\n', '        }\n', '    }\n', '\n', '    function _dailyRoundCalcAndStore(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\n', '        private\n', '    {\n', '        _dailyRoundCalc(g, rs, day);\n', '\n', '        dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);\n', '        dailyData[day].dayDividends = xfLobby[day];\n', '        dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);\n', '    }\n', '\n', '    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay, bool isAutoUpdate)\n', '        private\n', '    {\n', '        if (g._dailyDataCount >= beforeDay) {\n', '            /* Already up-to-date */\n', '            return;\n', '        }\n', '\n', '        DailyRoundState memory rs;\n', '        rs._allocSupplyCached = totalSupply() + g._lockedSunsTotal;\n', '\n', '        uint256 day = g._dailyDataCount;\n', '\n', '        _dailyRoundCalcAndStore(g, rs, day);\n', '\n', '        /* Stakes started during this day are added to the total the next day */\n', '        if (g._nextStakeSharesTotal != 0) {\n', '            g._stakeSharesTotal += g._nextStakeSharesTotal;\n', '            g._nextStakeSharesTotal = 0;\n', '        }\n', '\n', '        while (++day < beforeDay) {\n', '            _dailyRoundCalcAndStore(g, rs, day);\n', '        }\n', '\n', '        emit DailyDataUpdate(\n', '            msg.sender,\n', '            block.timestamp,\n', '            g._dailyDataCount, \n', '            day\n', '        );\n', '        \n', '        g._dailyDataCount = day;\n', '    }\n', '}\n', '\n', 'contract StakeableToken is GlobalsAndUtility {\n', '    /**\n', '     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\n', '     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\n', '     * @param stakerAddr Address of staker\n', '     * @param stakeIndex Index of stake within stake list\n', "     * @param stakeIdParam The stake's id\n", '     */\n', '    function stakeGoodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam)\n', '        external\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '\n', '        /* require() is more informative than the default assert() */\n', '        require(stakeLists[stakerAddr].length != 0, "E2X: Empty stake list");\n', '        require(stakeIndex < stakeLists[stakerAddr].length, "E2X: stakeIndex invalid");\n', '\n', '        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\n', '\n', '        /* Get stake copy */\n', '        StakeCache memory st;\n', '        _stakeLoad(stRef, stakeIdParam, st);\n', '\n', '        /* Stake must have served full term */\n', '        require(g._currentDay >= st._lockedDay + st._stakedDays, "E2X: Stake not fully served");\n', '\n', '        /* Stake must still be locked */\n', '        require(st._unlockedDay == 0, "E2X: Stake already unlocked");\n', '\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '\n', '        /* Unlock the completed stake */\n', '        _stakeUnlock(g, st);\n', '\n', '        /* stakeReturn & dividends values are unused here */\n', '        (, uint256 payout, uint256 dividends, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(\n', '            g,\n', '            st,\n', '            st._stakedDays\n', '        );\n', '\n', '        emit StakeGoodAccounting(\n', '            stakeIdParam,\n', '            stakerAddr,\n', '            msg.sender,\n', '            st._stakedSuns,\n', '            st._stakeShares,\n', '            payout,\n', '            penalty\n', '        );\n', '\n', '        if (cappedPenalty != 0) {\n', '            g._stakePenaltyTotal += cappedPenalty;\n', '        }\n', '\n', '        /* st._unlockedDay has changed */\n', '        _stakeUpdate(stRef, st);\n', '\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\t\n', '    /**\n', '     * @dev PUBLIC FACING: Open a stake.\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function stakeStart(uint256 newStakedSuns, uint256 newStakedDays)\n', '        external\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '\n', '        /* Enforce the minimum stake time */\n', '        require(newStakedDays >= MIN_STAKE_DAYS, "E2X: newStakedDays lower than minimum");\n', '\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '\n', '        _stakeStart(g, newStakedSuns, newStakedDays);\n', '\n', '        /* Remove staked Suns from balance of staker */\n', '        _burn(msg.sender, newStakedSuns);\n', '\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\t\n', '    /**\n', '     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\n', '     * a stake id is used to reject stale indexes.\n', '     * @param stakeIndex Index of stake within stake list\n', "     * @param stakeIdParam The stake's id\n", '     */\n', '    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)\n', '        external\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '\n', '        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\n', '\n', '        /* require() is more informative than the default assert() */\n', '        require(stakeListRef.length != 0, "E2X: Empty stake list");\n', '        require(stakeIndex < stakeListRef.length, "E2X: stakeIndex invalid");\n', '\n', '        /* Get stake copy */\n', '        StakeCache memory st;\n', '        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\n', '\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '\n', '        uint256 servedDays = 0;\n', '\n', '        bool prevUnlocked = (st._unlockedDay != 0);\n', '        uint256 stakeReturn;\n', '        uint256 payout = 0;\n', '        uint256 dividends = 0;\n', '        uint256 penalty = 0;\n', '        uint256 cappedPenalty = 0;\n', '\n', '        if (g._currentDay >= st._lockedDay) {\n', '            if (prevUnlocked) {\n', '                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\n', '                servedDays = st._stakedDays;\n', '            } else {\n', '                _stakeUnlock(g, st);\n', '\n', '                servedDays = g._currentDay - st._lockedDay;\n', '                if (servedDays > st._stakedDays) {\n', '                    servedDays = st._stakedDays;\n', '                }\n', '            }\n', '\n', '            (stakeReturn, payout, dividends, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);\n', '\n', '            msg.sender.transfer(dividends);\n', '        } else {\n', "            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\n", '            g._nextStakeSharesTotal -= st._stakeShares;\n', '\n', '            stakeReturn = st._stakedSuns;\n', '        }\n', '\n', '        emit StakeEnd(\n', '            stakeIdParam, \n', '            prevUnlocked ? 1 : 0,\n', '            msg.sender,\n', '            st._lockedDay,\n', '            servedDays, \n', '            st._stakedSuns, \n', '            st._stakeShares, \n', '            dividends,\n', '            payout, \n', '            penalty,\n', '            stakeReturn\n', '        );\n', '\n', '        if (cappedPenalty != 0 && !prevUnlocked) {\n', '            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\n', '            g._stakePenaltyTotal += cappedPenalty;\n', '        }\n', '\n', '        /* Pay the stake return, if any, to the staker */\n', '        if (stakeReturn != 0) {\n', '            _mint(msg.sender, stakeReturn);\n', '        }\n', '        g._lockedSunsTotal -= st._stakedSuns;\n', '\n', '        _stakeRemove(stakeListRef, stakeIndex);\n', '\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Return the current stake count for a staker address\n', '     * @param stakerAddr Address of staker\n', '     */\n', '    function stakeCount(address stakerAddr)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return stakeLists[stakerAddr].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Open a stake.\n', '     * @param g Cache of stored globals\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function _stakeStart(\n', '        GlobalsCache memory g,\n', '        uint256 newStakedSuns,\n', '        uint256 newStakedDays\n', '    )\n', '        internal\n', '    {\n', '        /* Enforce the maximum stake time */\n', '        require(newStakedDays <= MAX_STAKE_DAYS, "E2X: newStakedDays higher than maximum");\n', '\n', '        uint256 bonusSuns = _stakeStartBonusSuns(newStakedSuns, newStakedDays);\n', '        uint256 newStakeShares = (newStakedSuns + bonusSuns) * SHARE_RATE_SCALE / g._shareRate;\n', '\n', '        /* Ensure newStakedSuns is enough for at least one stake share */\n', '        require(newStakeShares != 0, "E2X: newStakedSuns must be at least minimum shareRate");\n', '\n', '        /*\n', '            The stakeStart timestamp will always be part-way through the current\n', '            day, so it needs to be rounded-up to the next day to ensure all\n', '            stakes align with the same fixed calendar days. The current day is\n', '            already rounded-down, so rounded-up is current day + 1.\n', '        */\n', '        uint256 newLockedDay = g._currentDay + 1;\n', '\n', '        /* Create Stake */\n', '        uint40 newStakeId = ++g._latestStakeId;\n', '        _stakeAdd(\n', '            stakeLists[msg.sender],\n', '            newStakeId,\n', '            newStakedSuns,\n', '            newStakeShares,\n', '            newLockedDay,\n', '            newStakedDays\n', '        );\n', '\n', '        emit StakeStart(\n', '            newStakeId, \n', '            msg.sender,\n', '            newStakedSuns, \n', '            newStakeShares, \n', '            newStakedDays\n', '        );\n', '\n', '        /* Stake is added to total in the next round, not the current round */\n', '        g._nextStakeSharesTotal += newStakeShares;\n', '\n', '        /* Track total staked Suns for inflation calculations */\n', '        g._lockedSunsTotal += newStakedSuns;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total stake payout including rewards for a multi-day range\n', '     * @param g Cache of stored globals\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @param beginDay First day to calculate bonuses for\n', '     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function _calcPayoutRewards(\n', '        GlobalsCache memory g,\n', '        uint256 stakeSharesParam,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    )\n', '        private\n', '        view\n', '        returns (uint256 payout)\n', '    {\n', '        uint256 counter;\n', '\n', '        for (uint256 day = beginDay; day < endDay; day++) {\n', '            uint256 dayPayout;\n', '\n', '            dayPayout = dailyData[day].dayPayoutTotal * stakeSharesParam\n', '                / dailyData[day].dayStakeSharesTotal;\n', '\n', '            if (counter < 4) {\n', '                counter++;\n', '            } \n', '            /* Eligible to receive bonus */\n', '            else {\n', '                dayPayout = (dailyData[day].dayPayoutTotal * stakeSharesParam\n', '                / dailyData[day].dayStakeSharesTotal) * BONUS_DAY_SCALE;\n', '                counter = 0;\n', '            }\n', '\n', '            payout += dayPayout;\n', '        }\n', '\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates user dividends\n', '     * @param g Cache of stored globals\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @param beginDay First day to calculate bonuses for\n', '     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function _calcPayoutDividendsReward(\n', '        GlobalsCache memory g,\n', '        uint256 stakeSharesParam,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    )\n', '        private\n', '        view\n', '        returns (uint256 payout)\n', '    {\n', '\n', '        for (uint256 day = beginDay; day < endDay; day++) {\n', '            uint256 dayPayout;\n', '\n', "            /* user's share of 95% of the day's dividends */\n", '            dayPayout += ((dailyData[day].dayDividends * 90) / 100) * stakeSharesParam\n', '            / dailyData[day].dayStakeSharesTotal;\n', '\n', '            payout += dayPayout;\n', '        }\n', '\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate bonus Suns for a new stake, if any\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function _stakeStartBonusSuns(uint256 newStakedSuns, uint256 newStakedDays)\n', '        private\n', '        pure\n', '        returns (uint256 bonusSuns)\n', '    {\n', '        /*\n', '            LONGER PAYS BETTER:\n', '\n', '            If longer than 1 day stake is committed to, each extra day\n', '            gives bonus shares of approximately 0.0548%, which is approximately 20%\n', '            extra per year of increased stake length committed to, but capped to a\n', '            maximum of 200% extra.\n', '\n', '            extraDays       =  stakedDays - 1\n', '\n', '            longerBonus%    = (extraDays / 364) * 20%\n', '                            = (extraDays / 364) / 5\n', '                            =  extraDays / 1820\n', '                            =  extraDays / LPB\n', '\n', '            extraDays       =  longerBonus% * 1820\n', '            extraDaysMax    =  longerBonusMax% * 1820\n', '                            =  200% * 1820\n', '                            =  3640\n', '                            =  LPB_MAX_DAYS\n', '\n', '            BIGGER PAYS BETTER:\n', '\n', '            Bonus percentage scaled 0% to 10% for the first 7M E2X of stake.\n', '\n', '            biggerBonus%    = (cappedSuns /  BPB_MAX_SUNS) * 10%\n', '                            = (cappedSuns /  BPB_MAX_SUNS) / 10\n', '                            =  cappedSuns / (BPB_MAX_SUNS * 10)\n', '                            =  cappedSuns /  BPB\n', '\n', '            COMBINED:\n', '\n', '            combinedBonus%  =            longerBonus%  +  biggerBonus%\n', '\n', '                                      cappedExtraDays     cappedSuns\n', '                            =         ---------------  +  ------------\n', '                                            LPB               BPB\n', '\n', '                                cappedExtraDays * BPB     cappedSuns * LPB\n', '                            =   ---------------------  +  ------------------\n', '                                      LPB * BPB               LPB * BPB\n', '\n', '                                cappedExtraDays * BPB  +  cappedSuns * LPB\n', '                            =   --------------------------------------------\n', '                                                  LPB  *  BPB\n', '\n', '            bonusSuns     = suns * combinedBonus%\n', '                            = suns * (cappedExtraDays * BPB  +  cappedSuns * LPB) / (LPB * BPB)\n', '        */\n', '        uint256 cappedExtraDays = 0;\n', '\n', '        /* Must be more than 1 day for Longer-Pays-Better */\n', '        if (newStakedDays > 1) {\n', '            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;\n', '        }\n', '\n', '        uint256 cappedStakedSuns = newStakedSuns <= BPB_MAX_SUNS\n', '            ? newStakedSuns\n', '            : BPB_MAX_SUNS;\n', '\n', '        bonusSuns = cappedExtraDays * BPB + cappedStakedSuns * LPB;\n', '        bonusSuns = newStakedSuns * bonusSuns / (LPB * BPB);\n', '\n', '        return bonusSuns;\n', '    }\n', '\n', '    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\n', '        private\n', '        pure\n', '    {\n', '        g._stakeSharesTotal -= st._stakeShares;\n', '        st._unlockedDay = g._currentDay;\n', '    }\n', '\n', '    function _stakePerformance(GlobalsCache memory g, StakeCache memory st, uint256 servedDays)\n', '        private\n', '        view\n', '        returns (uint256 stakeReturn, uint256 payout, uint256 dividends, uint256 penalty, uint256 cappedPenalty)\n', '    {\n', '        if (servedDays < st._stakedDays) {\n', '            (payout, penalty) = _calcPayoutAndEarlyPenalty(\n', '                g,\n', '                st._lockedDay,\n', '                st._stakedDays,\n', '                servedDays,\n', '                st._stakeShares\n', '            );\n', '            stakeReturn = st._stakedSuns + payout;\n', '\n', '            dividends = _calcPayoutDividendsReward(\n', '                g,\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay + servedDays\n', '            );\n', '        } else {\n', '            // servedDays must == stakedDays here\n', '            payout = _calcPayoutRewards(\n', '                g,\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay + servedDays\n', '            );\n', '\n', '            dividends = _calcPayoutDividendsReward(\n', '                g,\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay + servedDays\n', '            );\n', '\n', '            stakeReturn = st._stakedSuns + payout;\n', '\n', '            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);\n', '        }\n', '        if (penalty != 0) {\n', '            if (penalty > stakeReturn) {\n', '                /* Cannot have a negative stake return */\n', '                cappedPenalty = stakeReturn;\n', '                stakeReturn = 0;\n', '            } else {\n', '                /* Remove penalty from the stake return */\n', '                cappedPenalty = penalty;\n', '                stakeReturn -= cappedPenalty;\n', '            }\n', '        }\n', '        return (stakeReturn, payout, dividends, penalty, cappedPenalty);\n', '    }\n', '\n', '    function _calcPayoutAndEarlyPenalty(\n', '        GlobalsCache memory g,\n', '        uint256 lockedDayParam,\n', '        uint256 stakedDaysParam,\n', '        uint256 servedDays,\n', '        uint256 stakeSharesParam\n', '    )\n', '        private\n', '        view\n', '        returns (uint256 payout, uint256 penalty)\n', '    {\n', '        uint256 servedEndDay = lockedDayParam + servedDays;\n', '\n', '        /* 50% of stakedDays (rounded up) with a minimum applied */\n', '        uint256 penaltyDays = (stakedDaysParam + 1) / 2;\n', '        if (penaltyDays < EARLY_PENALTY_MIN_DAYS) {\n', '            penaltyDays = EARLY_PENALTY_MIN_DAYS;\n', '        }\n', '\n', '        if (servedDays == 0) {\n', '            /* Fill penalty days with the estimated average payout */\n', '            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);\n', '            penalty = expected * penaltyDays;\n', '            return (payout, penalty); // Actual payout was 0\n', '        }\n', '\n', '        if (penaltyDays < servedDays) {\n', '            /*\n', '                Simplified explanation of intervals where end-day is non-inclusive:\n', '\n', '                penalty:    [lockedDay  ...  penaltyEndDay)\n', '                delta:                      [penaltyEndDay  ...  servedEndDay)\n', '                payout:     [lockedDay  .......................  servedEndDay)\n', '            */\n', '            uint256 penaltyEndDay = lockedDayParam + penaltyDays;\n', '            penalty = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, penaltyEndDay);\n', '\n', '            uint256 delta = _calcPayoutRewards(g, stakeSharesParam, penaltyEndDay, servedEndDay);\n', '            payout = penalty + delta;\n', '            return (payout, penalty);\n', '        }\n', '\n', '        /* penaltyDays >= servedDays  */\n', '        payout = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, servedEndDay);\n', '\n', '        if (penaltyDays == servedDays) {\n', '            penalty = payout;\n', '        } else {\n', '            /*\n', '                (penaltyDays > servedDays) means not enough days served, so fill the\n', '                penalty days with the average payout from only the days that were served.\n', '            */\n', '            penalty = payout * penaltyDays / servedDays;\n', '        }\n', '        return (payout, penalty);\n', '    }\n', '\n', '    function _calcLatePenalty(\n', '        uint256 lockedDayParam,\n', '        uint256 stakedDaysParam,\n', '        uint256 unlockedDayParam,\n', '        uint256 rawStakeReturn\n', '    )\n', '        private\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        /* Allow grace time before penalties accrue */\n', '        uint256 maxUnlockedDay = lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;\n', '        if (unlockedDayParam <= maxUnlockedDay) {\n', '            return 0;\n', '        }\n', '\n', '        /* Calculate penalty as a percentage of stake return based on time */\n', '        return rawStakeReturn * (unlockedDayParam - maxUnlockedDay) / LATE_PENALTY_SCALE_DAYS;\n', '    }\n', '\n', '}\n', '\n', 'contract TransformableToken is StakeableToken {\n', '    /**\n', '     * @dev PUBLIC FACING: Leave the transform lobby after the round is complete\n', '     * @param enterDay Day number when the member entered\n', '     * @param count Number of queued-enters to exit (optional; 0 for all)\n', '     */\n', '    function xfLobbyExit(uint256 enterDay, uint256 count)\n', '        external\n', '    {\n', '        require(enterDay < _currentDay(), "E2X: Round is not complete");\n', '\n', '        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\n', '\n', '        uint256 headIndex = qRef.headIndex;\n', '        uint256 endIndex;\n', '\n', '        if (count != 0) {\n', '            require(count <= qRef.tailIndex - headIndex, "E2X: count invalid");\n', '            endIndex = headIndex + count;\n', '        } else {\n', '            endIndex = qRef.tailIndex;\n', '            require(headIndex < endIndex, "E2X: count invalid");\n', '        }\n', '\n', '        uint256 waasLobby = _waasLobby(enterDay);\n', '        uint256 _xfLobby = xfLobby[enterDay];\n', '        uint256 totalXfAmount = 0;\n', '\n', '        do {\n', '            uint256 rawAmount = qRef.entries[headIndex].rawAmount;\n', '            address referrerAddr = qRef.entries[headIndex].referrerAddr;\n', '\n', '            delete qRef.entries[headIndex];\n', '\n', '            uint256 xfAmount = waasLobby * rawAmount / _xfLobby;\n', '\n', '            if (referrerAddr == address(0) || referrerAddr == msg.sender) {\n', '                /* No referrer or Self-referred */\n', '                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\n', '            } else {\n', '                /* Referral bonus of 5% of xfAmount to member */\n', '                uint256 referralBonusSuns = xfAmount / 20;\n', '\n', '                xfAmount += referralBonusSuns;\n', '\n', '                /* Then a cumulative referrer bonus of 10% to referrer */\n', '                uint256 referrerBonusSuns = xfAmount / 10;\n', '\n', '                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\n', '                _mint(referrerAddr, referrerBonusSuns);\n', '            }\n', '\n', '            totalXfAmount += xfAmount;\n', '        } while (++headIndex < endIndex);\n', '\n', '        qRef.headIndex = uint40(headIndex);\n', '\n', '        if (totalXfAmount != 0) {\n', '            _mint(msg.sender, totalXfAmount);\n', '        }\n', '    }\n', '\t\n', '    /**\n', '     * @dev PUBLIC FACING: Enter the auction lobby for the current round\n', '     * @param referrerAddr TRX address of referring user (optional; 0x0 for no referrer)\n', '     */\n', '    function xfLobbyEnter(address referrerAddr)\n', '        external\n', '        payable\n', '    {\n', '        uint256 rawAmount = msg.value;\n', '\t\t\n', '        uint256 enterDay = _currentDay();\n', '\n', '        require(rawAmount != 0, "E2X: Amount required");\n', '\n', '        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\n', '\n', '        uint256 entryIndex = qRef.tailIndex++;\n', '\n', '        qRef.entries[entryIndex] = XfLobbyEntryStore(uint96(rawAmount), referrerAddr);\n', '\n', '        xfLobby[enterDay] += rawAmount;\n', '\n', '        emit XfLobbyEnter(\n', '            block.timestamp, \n', '            enterDay, \n', '            entryIndex, \n', '            rawAmount\n', '        );\n', '    }\t\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return multiple values of xfLobby[] with\n', '     * a single call\n', '     * @param beginDay First day of data range\n', '     * @param endDay Last day (non-inclusive) of data range\n', '     * @return Fixed array of values\n', '     */\n', '    function xfLobbyRange(uint256 beginDay, uint256 endDay)\n', '        external\n', '        view\n', '        returns (uint256[] memory list)\n', '    {\n', '        require(\n', '            beginDay < endDay && endDay <= _currentDay(),\n', '            "E2X: invalid range"\n', '        );\n', '\n', '        list = new uint256[](endDay - beginDay);\n', '\n', '        uint256 src = beginDay;\n', '        uint256 dst = 0;\n', '        do {\n', '            list[dst++] = uint256(xfLobby[src++]);\n', '        } while (src < endDay);\n', '\n', '        return list;\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Release 5% dev share from daily dividends\n', '     */\n', '    function xfFlush()\n', '        external\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        \n', '        require(address(this).balance != 0, "E2X: No value");\n', '\n', '        require(LAST_FLUSHED_DAY < _currentDay(), "E2X: Invalid day");\n', '\n', '        _dailyDataUpdateAuto(g);\n', '\n', '        T2X_SHARE_ADDR.transfer((dailyData[LAST_FLUSHED_DAY].dayDividends * 10) / 100);\n', '\n', '        LAST_FLUSHED_DAY++;\n', '\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Return a current lobby member queue entry.\n', '     * Only needed due to limitations of the standard ABI encoder.\n', '     * @param memberAddr TRX address of the lobby member\n', '     * @param enterDay \n', '     * @param entryIndex \n', '     * @return 1: Raw amount that was entered with; 2: Referring TRX addr (optional; 0x0 for no referrer)\n', '     */\n', '    function xfLobbyEntry(address memberAddr, uint256 enterDay, uint256 entryIndex)\n', '        external\n', '        view\n', '        returns (uint256 rawAmount, address referrerAddr)\n', '    {\n', '        XfLobbyEntryStore storage entry = xfLobbyMembers[enterDay][memberAddr].entries[entryIndex];\n', '\n', '        require(entry.rawAmount != 0, "E2X: Param invalid");\n', '\n', '        return (entry.rawAmount, entry.referrerAddr);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Return the lobby days that a user is in with a single call\n', '     * @param memberAddr TRX address of the user\n', '     * @return Bit vector of lobby day numbers\n', '     */\n', '    function xfLobbyPendingDays(address memberAddr)\n', '        external\n', '        view\n', '        returns (uint256[XF_LOBBY_DAY_WORDS] memory words)\n', '    {\n', '        uint256 day = _currentDay() + 1;\n', '\n', '        while (day-- != 0) {\n', '            if (xfLobbyMembers[day][memberAddr].tailIndex > xfLobbyMembers[day][memberAddr].headIndex) {\n', '                words[day >> 8] |= 1 << (day & 255);\n', '            }\n', '        }\n', '\n', '        return words;\n', '    }\n', '    \n', '    function _waasLobby(uint256 enterDay)\n', '        private\n', '        returns (uint256 waasLobby)\n', '    {\n', '        /* 1342465753424 = ~ 4900000 * SUNS_PER_E2X / 365 */\n', '        if (enterDay > 0 && enterDay <= 365) {                                     \n', '            waasLobby = CLAIM_STARTING_AMOUNT - ((enterDay - 1) * 1342465753424);\n', '        } else {\n', '            waasLobby = CLAIM_LOWEST_AMOUNT;\n', '        }\n', '\n', '        return waasLobby;\n', '    }\n', '\n', '    function _emitXfLobbyExit(\n', '        uint256 enterDay,\n', '        uint256 entryIndex,\n', '        uint256 xfAmount,\n', '        address referrerAddr\n', '    )\n', '        private\n', '    {\n', '        emit XfLobbyExit(\n', '            block.timestamp, \n', '            enterDay,\n', '            entryIndex,\n', '            xfAmount,\n', '            referrerAddr\n', '        );\n', '    }\n', '}\n', '\n', 'contract E2X is TransformableToken {\n', '    constructor()\n', '        public\n', '    {\n', '        /* Initialize global shareRate to 1 */\n', '        globals.shareRate = uint40(1 * SHARE_RATE_SCALE);\n', '    }\n', '\n', '    /* Time of contract launch (30-11-2020 T00:00:00Z) */\n', '    uint256 internal constant LAUNCH_TIME = 1604016000;\n', '\t\n', '    function() external payable {}\n', '}']