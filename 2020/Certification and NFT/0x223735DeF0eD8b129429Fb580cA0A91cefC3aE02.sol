['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'interface DSPauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface VatAbstract {\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '}\n', '\n', 'interface MedianAbstract {\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\n', '    address constant MCD_VAT     = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '\n', '    address constant ETHBTC      = 0x81A679f98b63B3dDf2F17CB5619f4d6775b3c5ED;\n', '\n', '    address constant tBTC        = 0xA3F68d722FBa26173aB64697B4625d4aD0F4C818;\n', '    address constant tBTC_OLD    = 0x3b995E9f719Cb5F4b106F795B01760a11d083823;\n', '\n', '    // Decimals & precision\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    function execute() external {\n', '        /*** Risk Parameter Adjustments ***/\n', '\n', '        // Set the global debt ceiling to 823,000,000\n', '        // 763 (current DC) + 60 (USDC-A increase)\n', '        VatAbstract(MCD_VAT).file("Line", 823 * MILLION * RAD);\n', '\n', '        // Set the USDC-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 40 million\n', '        // New debt ceiling: 100 million\n', '        VatAbstract(MCD_VAT).file("USDC-A", "line", 100 * MILLION * RAD);\n', '\n', '        // https://forum.makerdao.com/t/mip10c9-subproposal-to-whitelist-new-tbtc-oracle-access/3805\n', '        // Whitelist tBTC address to read ETHBTC median\n', '        MedianAbstract(ETHBTC).kiss(tBTC);\n', '        // Remove previous tBTC address from ETHBTC median whitelist\n', '        MedianAbstract(ETHBTC).diss(tBTC_OLD);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/c6b12fcd90c6c59795fa34e3bd573f2d2d7eb832/governance/votes/Executive%20vote%20-%20September%2011%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-09-11 MakerDAO Executive Spell | Hash: 0x54ead845e3b3dda69b7b5eede7c0150cd37f68302b7379deba19cbaee56a1ca6";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']