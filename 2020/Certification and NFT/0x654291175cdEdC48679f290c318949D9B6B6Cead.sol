['// Sources flattened with buidler v1.4.3 https://buidler.dev\n', '\n', '// File @openzeppelin/contracts/GSN/Context.sol@v3.1.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/SafeMath.sol@v3.1.0\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/Ownable.sol@v3.1.0\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/Pausable.sol@v3.1.0\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/f1dt-ethereum-contracts/contracts/game/TimeTrialEliteLeague.sol@v0.4.0\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '/// Minimal transfers-only ERC20 interface\n', 'interface IERC20Transfers {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'struct ParticipantData {\n', '        uint256 timestamp;\n', '        uint256 amount;\n', '    }\n', '\n', '/**\n', ' * @title TimeTrialEliteLeague.\n', ' * Contract which manages the participation status of players to the elite tiers.\n', ' * Entering a tier requires the participant to escrow some ERC20 gaming token, which\n', ' * is given back to the participant when they leave the tier.\n', ' */\n', 'contract TimeTrialEliteLeague is Context, Pausable, Ownable {\n', '    using SafeMath for uint256;\n', '    /**\n', "     * Event emitted when a player's particiation in a tier is updated.\n", '     * @param participant The address of the participant.\n', '     * @param tierId The tier identifier.\n', '     * @param deposit Amount escrowed in tier. 0 means non participant.\n', '     */\n', '    event ParticipationUpdated(address participant, bytes32 tierId, uint256 deposit);\n', '\n', '    IERC20Transfers public immutable gamingToken;\n', '    uint256 public immutable lockingPeriod;\n', '    mapping(bytes32 => uint256) public tiers; // tierId => minimumAmountToEscrow\n', '    mapping(address => mapping(bytes32 => ParticipantData)) public participants; // participant => tierId => ParticipantData\n', '    /**\n', '     * @dev Reverts if `gamingToken_` is the zero address.\n', '     * @dev Reverts if `lockingPeriod` is zero.\n', '     * @dev Reverts if `tierIds` and `amounts` have different lengths.\n', '     * @dev Reverts if any element of `amounts` is zero.\n', '     * @param gamingToken_ An ERC20-compliant contract address.\n', '     * @param lockingPeriod_ The period that a participant needs to wait for leaving a tier after entering it.\n', '     * @param tierIds The identifiers of each supported tier.\n', '     * @param amounts The amounts of gaming token to escrow for participation, for each one of the `tierIds`.\n', '     */\n', '    constructor(\n', '        IERC20Transfers gamingToken_,\n', '        uint256 lockingPeriod_,\n', '        bytes32[] memory tierIds,\n', '        uint256[] memory amounts\n', '    ) public {\n', '        require(gamingToken_ != IERC20Transfers(0), "Leagues: zero address");\n', '        require(lockingPeriod_ != 0, "Leagues: zero lock");\n', '        gamingToken = gamingToken_;\n', '        lockingPeriod = lockingPeriod_;\n', '\n', '        uint256 length = tierIds.length;\n', '        require(length == amounts.length, "Leagues: inconsistent arrays");\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            uint256 amount = amounts[i];\n', '            require(amount != 0, "Leagues: zero amount");\n', '            tiers[tierIds[i]] = amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Updates amount staked for participant in tier\n', '     * @dev Reverts if `tierId` does not exist.  \n', '     * @dev Reverts if user is not in tier.     \n', '     * @dev Emits a ParticipationUpdated event.\n', '     * @dev An amount of ERC20 `gamingToken` is transferred from the sender to this contract.\n', '     * @param tierId The identifier of the tier to increase the deposit for.\n', '     * @param amount The amount to deposit.\n', '     */\n', '    function increaseDeposit(bytes32 tierId, uint256 amount) whenNotPaused public {\n', '        address sender = _msgSender();\n', '        require(tiers[tierId] != 0, "Leagues: tier not found");\n', '        ParticipantData memory pd = participants[sender][tierId];\n', '        require(pd.timestamp != 0, "Leagues: non participant");\n', '        uint256 newAmount = amount.add(pd.amount);\n', '        participants[sender][tierId] = ParticipantData(block.timestamp,newAmount);\n', '        require(\n', '            gamingToken.transferFrom(sender, address(this), amount),\n', '            "Leagues: transfer in failed"\n', '        );\n', '        emit ParticipationUpdated(sender, tierId, newAmount);\n', '    }\n', '\n', '    /**\n', '     * Enables the participation of a player in a tier. Requires the escrowing of an amount of gaming token.\n', '     * @dev Reverts if `tierId` does not exist.\n', "     * @dev Reverts if 'deposit' is less than minimumAmountToEscrow\n", '     * @dev Reverts if the sender is already participant in the tier.\n', '     * @dev Emits a ParticipationUpdated event.\n', '     * @dev An amount of ERC20 `gamingToken` is transferred from the sender to this contract.\n', '     * @param tierId The identifier of the tier to enter.\n', '     * @param deposit The amount to deposit.\n', '     */\n', '    function enterTier(bytes32 tierId, uint256 deposit) whenNotPaused public {\n', '        address sender = _msgSender();\n', '        uint256 minDeposit = tiers[tierId];\n', '        require(minDeposit != 0, "Leagues: tier not found");\n', '        require(minDeposit <= deposit, "Leagues: insufficient amount");\n', '        require(participants[sender][tierId].timestamp == 0, "Leagues: already participant");\n', '        participants[sender][tierId] = ParticipantData(block.timestamp,deposit);\n', '        require(\n', '            gamingToken.transferFrom(sender, address(this), deposit),\n', '            "Leagues: transfer in failed"\n', '        );\n', '        emit ParticipationUpdated(sender, tierId, deposit);\n', '    }\n', '\n', '    /**\n', '     * Disables the participation of a player in a tier. Releases the amount of gaming token escrowed for this tier.\n', '     * @dev Reverts if the sender is not a participant in the tier.\n', '     * @dev Reverts if the tier participation of the sender is still time-locked.\n', '     * @dev Emits a ParticipationUpdated event.\n', '     * @dev An amount of ERC20 `gamingToken` is transferred from this contract to the sender.\n', '     * @param tierId The identifier of the tier to exit.\n', '     */\n', '    function exitTier(bytes32 tierId) public {\n', '        address sender = _msgSender();\n', '        ParticipantData memory pd = participants[sender][tierId];\n', '        require(pd.timestamp != 0, "Leagues: non-participant");\n', '        \n', '        require(block.timestamp - pd.timestamp > lockingPeriod, "Leagues: time-locked");\n', '        participants[sender][tierId] = ParticipantData(0,0);\n', '        emit ParticipationUpdated(sender, tierId, 0);\n', '        require(\n', '            gamingToken.transfer(sender, pd.amount),\n', '            "Leagues: transfer out failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Gets the partricipation status of several tiers for a participant.\n', '     * @param participant The participant to check the status of.\n', '     * @param tierIds The tier identifiers to check.\n', '     * @return timestamps The enter timestamp for each of the the `tierIds`. Zero values mean non-participant.\n', '     */\n', '    function participantStatus(address participant, bytes32[] calldata tierIds)\n', '        external\n', '        view\n', '        returns (uint256[] memory timestamps)\n', '    {\n', '        uint256 length = tierIds.length;\n', '        timestamps = new uint256[](length);\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            timestamps[i] = participants[participant][tierIds[i]].timestamp;\n', '        }\n', '    }\n', '\n', '     /**\n', '     * Pauses the deposit operations.\n', '     * @dev Reverts if the sender is not the contract owner.\n', '     * @dev Reverts if the contract is paused already.\n', '     */\n', '    function pause() external onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * Unpauses the deposit operations.\n', '     * @dev Reverts if the sender is not the contract owner.\n', '     * @dev Reverts if the contract is not paused.\n', '     */\n', '    function unpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '}']