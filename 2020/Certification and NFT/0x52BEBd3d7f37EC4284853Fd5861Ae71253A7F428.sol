['pragma solidity >=0.4.24 <0.7.0;\n', '/*\n', ' * Origin Protocol\n', ' * https://originprotocol.com\n', ' *\n', ' * Released under the MIT license\n', ' * https://github.com/OriginProtocol\n', ' *\n', ' * Copyright 2019 Origin Protocol, Inc\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in\n', ' * all copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/timelock/MinuteTimelock.sol\n', '\n', "// Modeled off of Compound's Timelock\n", '//    https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol\n', 'contract MinuteTimelock is Initializable {\n', '    using SafeMath for uint256;\n', '\n', '    event NewAdmin(address indexed newAdmin);\n', '    event NewPendingAdmin(address indexed newPendingAdmin);\n', '    event NewDelay(uint256 indexed newDelay);\n', '    event CancelTransaction(\n', '        bytes32 indexed txHash,\n', '        address indexed target,\n', '        uint256 value,\n', '        string signature,\n', '        bytes data,\n', '        uint256 eta\n', '    );\n', '    event ExecuteTransaction(\n', '        bytes32 indexed txHash,\n', '        address indexed target,\n', '        uint256 value,\n', '        string signature,\n', '        bytes data,\n', '        uint256 eta\n', '    );\n', '    event QueueTransaction(\n', '        bytes32 indexed txHash,\n', '        address indexed target,\n', '        uint256 value,\n', '        string signature,\n', '        bytes data,\n', '        uint256 eta\n', '    );\n', '\n', '    uint256 public constant GRACE_PERIOD = 3 days;\n', '    uint256 public constant MINIMUM_DELAY = 1 minutes;\n', '    uint256 public constant MAXIMUM_DELAY = 2 days;\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    uint256 public delay;\n', '\n', '    mapping(bytes32 => bool) public queuedTransactions;\n', '\n', '    constructor(uint256 delay_) public {\n', '        require(\n', '            delay_ >= MINIMUM_DELAY,\n', '            "Timelock::constructor: Delay must exceed minimum delay."\n', '        );\n', '        require(\n', '            delay_ <= MAXIMUM_DELAY,\n', '            "Timelock::setDelay: Delay must not exceed maximum delay."\n', '        );\n', '\n', '        admin = msg.sender;\n', '        delay = delay_;\n', '    }\n', '\n', '    function initialize(address _admin) external initializer {\n', '        require(\n', '            msg.sender == admin,\n', '            "Timelock::initialize: Call must come from admin."\n', '        );\n', '        admin = _admin;\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    function setDelay(uint256 delay_) public {\n', '        require(\n', '            msg.sender == address(this),\n', '            "Timelock::setDelay: Call must come from Timelock."\n', '        );\n', '        require(\n', '            delay_ >= MINIMUM_DELAY,\n', '            "Timelock::setDelay: Delay must exceed minimum delay."\n', '        );\n', '        require(\n', '            delay_ <= MAXIMUM_DELAY,\n', '            "Timelock::setDelay: Delay must not exceed maximum delay."\n', '        );\n', '        delay = delay_;\n', '\n', '        emit NewDelay(delay);\n', '    }\n', '\n', '    function acceptAdmin() public {\n', '        require(\n', '            msg.sender == pendingAdmin,\n', '            "Timelock::acceptAdmin: Call must come from pendingAdmin."\n', '        );\n', '        admin = msg.sender;\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(admin);\n', '    }\n', '\n', '    function setPendingAdmin(address pendingAdmin_) public {\n', '        require(\n', '            msg.sender == address(this),\n', '            "Timelock::setPendingAdmin: Call must come from Timelock."\n', '        );\n', '        pendingAdmin = pendingAdmin_;\n', '\n', '        emit NewPendingAdmin(pendingAdmin);\n', '    }\n', '\n', '    function queueTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data,\n', '        uint256 eta\n', '    ) public returns (bytes32) {\n', '        require(\n', '            msg.sender == admin,\n', '            "Timelock::queueTransaction: Call must come from admin."\n', '        );\n', '        require(\n', '            eta >= getBlockTimestamp().add(delay),\n', '            "Timelock::queueTransaction: Estimated execution block must satisfy delay."\n', '        );\n', '\n', '        bytes32 txHash = keccak256(\n', '            abi.encode(target, value, signature, data, eta)\n', '        );\n', '        queuedTransactions[txHash] = true;\n', '\n', '        emit QueueTransaction(txHash, target, value, signature, data, eta);\n', '        return txHash;\n', '    }\n', '\n', '    function cancelTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data,\n', '        uint256 eta\n', '    ) public {\n', '        require(\n', '            msg.sender == admin,\n', '            "Timelock::cancelTransaction: Call must come from admin."\n', '        );\n', '\n', '        bytes32 txHash = keccak256(\n', '            abi.encode(target, value, signature, data, eta)\n', '        );\n', '        queuedTransactions[txHash] = false;\n', '\n', '        emit CancelTransaction(txHash, target, value, signature, data, eta);\n', '    }\n', '\n', '    function executeTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data,\n', '        uint256 eta\n', '    ) public payable returns (bytes memory) {\n', '        bytes32 txHash = keccak256(\n', '            abi.encode(target, value, signature, data, eta)\n', '        );\n', '        require(\n', '            queuedTransactions[txHash],\n', '            "Timelock::executeTransaction: Transaction hasn\'t been queued."\n', '        );\n', '        require(\n', '            getBlockTimestamp() >= eta,\n', '            "Timelock::executeTransaction: Transaction hasn\'t surpassed time lock."\n', '        );\n', '        require(\n', '            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\n', '            "Timelock::executeTransaction: Transaction is stale."\n', '        );\n', '\n', '        queuedTransactions[txHash] = false;\n', '\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(\n', '                bytes4(keccak256(bytes(signature))),\n', '                data\n', '            );\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call.value(value)(\n', '            callData\n', '        );\n', '        require(\n', '            success,\n', '            "Timelock::executeTransaction: Transaction execution reverted."\n', '        );\n', '\n', '        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n', '\n', '        return returnData;\n', '    }\n', '\n', '    function getBlockTimestamp() internal view returns (uint256) {\n', '        // solium-disable-next-line security/no-block-members\n', '        return block.timestamp;\n', '    }\n', '}']