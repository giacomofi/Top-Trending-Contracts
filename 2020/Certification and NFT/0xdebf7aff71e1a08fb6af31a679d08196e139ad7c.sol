['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IStableV2 {\n', '    // Stable balances management\n', '    function update() external;\n', '    // Management functions callable only be Milker\n', '    function shareMilk(address taker) external returns (uint256);\n', '    function bandits(uint256 amount) external returns (uint256, uint256, uint256);\n', '    // Contract getters\n', '    function milker() external view returns (address);\n', '    function token() external view returns (address);\n', '    function startTime() external view returns (uint256);\n', '    function stakerTokens(address staker) external view returns (uint256);\n', '    function stakerCorrection(address staker) external view returns (uint256);\n', '    function tokenSupply() external view returns (uint256);\n', '    function milkSupply() external view returns (uint256);\n', '    // MILK production related getters\n', '    function level() external view returns (uint256);\n', '    function levelProgress() external view returns (uint256);\n', '    function production() external view returns (uint256);\n', '    function produced() external view returns (uint256);\n', '    function distributed() external view returns (uint256);\n', '    function pending() external view returns (uint256);\n', '    function pendingTo(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IMilker is IERC20 {\n', '    // Token management accessed only from StableV2 contracts\n', '    function produceMilk(uint256 amount) external returns (uint256);\n', '    function takeMilk(address account) external returns (uint256);\n', '    // Primary MILK tokenomics events\n', '    function bandits(uint256 percent) external returns (uint256, uint256, uint256);\n', '    function sheriffsVaultCommission() external returns (uint256);\n', '    function sheriffsPotDistribution() external returns (uint256);\n', '    // Getters\n', '    function startTime() external view returns (uint256);\n', '    function isWhitelisted(address account) external view returns (bool);\n', '    function vaultOf(address account) external view returns (uint256);\n', '    function period() external view returns (uint256);\n', '    function periodProgress() external view returns (uint256);\n', '    function periodLength() external view returns (uint256);\n', '    function production() external view returns (uint256);\n', '    function producedTotal() external view returns (uint256);\n', '    function distributedTotal() external view returns (uint256);\n', '    function pendingTotal() external view returns (uint256);\n', '    function pendingTo(address account) external view returns (uint256);\n', '}\n', '\n', '// solium-disable security/no-block-members\n', '\n', 'contract StableV2 is Ownable, IStableV2 {\n', '    using SafeMath for uint256;\n', '\n', '    // Stable contains info related to each staker.\n', '    struct Staker {\n', '        uint256 amount;      // amount of tokens currently staked to the Stable\n', "        uint256 correction;  // value needed for correct calculation staker's share\n", '        uint256 banditsCorrection;\n', '        uint256 distributed; // amount of distributed MILK tokens\n', '    }\n', '\n', '    // Default deflationarity parameters.\n', '    uint256 private constant REDUCING_INTERVAL = 7 days; // 7 days is time between reductions\n', '    uint256 private constant REDUCING_FACTOR = 10;       // production is reduced by 10%\n', '\n', '    // MILK token contract.\n', '    IMilker private _milker;\n', '\n', '    // ERC20 token contract staking to the Stable.\n', '    IERC20 private _token;\n', '\n', '    // Stakers info by token holders.\n', '    mapping(address => Staker) private _stakers;\n', '\n', '    // Common variables configuring of the Stable.\n', '    uint256 private _startTime;\n', '\n', '    // Common variables describing current state of the Stable.\n', '    uint256 private _banditsCorrection = 1e18;\n', '    uint256 private _tokensPerShare;\n', '    uint256 private _distributed;\n', '    uint256 private _production;\n', '    uint256 private _produced;\n', '    uint256 private _lastUpdateTime;\n', '\n', '\n', '    // Events.\n', '    event Initialized(uint256 startTime, uint256 initialProduction);\n', '    event Bandits(\n', '        uint256 indexed percent,\n', '        uint256 totalAmount,\n', '        uint256 arrestedAmount,\n', '        uint256 burntAmount\n', '    );\n', '    event Staked(address indexed staker, uint256 amount);\n', '    event Claimed(address indexed staker, uint256 amount);\n', '\n', '\n', '    modifier onlyMilker() {\n', '        require(address(_milker) == _msgSender(), "StableV2: caller is not the Milker contract");\n', '        _;\n', '    }\n', '\n', '\n', '    constructor(address milker, address token) public {\n', '        require(address(milker) != address(0), "StableV2: Milker contract address cannot be empty");\n', '        require(address(token) != address(0), "StableV2: ERC20 token contract address cannot be empty");\n', '        _milker = IMilker(milker);\n', '        _token = IERC20(token);\n', '        transferOwnership(Ownable(milker).owner());\n', '    }\n', '\n', '    function initialize(uint256 startTime, uint256 initialProductionPerDay) external onlyOwner {\n', '        require(produced() == 0, "StableV2: already started");\n', '        _startTime = startTime;\n', '        _production = 7 * initialProductionPerDay;\n', '        _lastUpdateTime = _startTime;\n', '        emit Initialized(_startTime, _production);\n', '    }\n', '\n', '    function stake(uint256 amount) external {\n', '        address staker = msg.sender;\n', '        require(!_milker.isWhitelisted(staker), "StableV2: whitelisted MILK holders cannot stake tokens");\n', '\n', '        // Recalculate stable shares\n', '        update();\n', '\n', '        // Transfer pending tokens (if any) to the staker\n', '        _shareMilk(staker);\n', '\n', '        if (amount > 0) {\n', '            // Transfer staking tokens to the StableV2 contract\n', '            bool ok = _token.transferFrom(staker, address(this), amount);\n', '            require(ok, "StableV2: unable to transfer stake");\n', '            // Register staking tokens\n', '            _stakers[staker].amount = _stakers[staker].amount.add(amount);\n', '        }\n', '\n', "        // Adjust correction (staker's reward debt)\n", '        uint256 correction = _stakers[staker].amount.mul(_tokensPerShare).div(1e12);\n', '        _stakers[staker].correction = correction.mul(1e18).div(_banditsCorrection);\n', '        _stakers[staker].banditsCorrection = _banditsCorrection;\n', '\n', '        // Emit event to the logs so can be effectively used later\n', '        emit Staked(staker, amount);\n', '    }\n', '\n', '    function claim(uint256 amount) external {\n', '        address staker = msg.sender;\n', '        require(!_milker.isWhitelisted(staker), "StableV2: whitelisted MILK holders cannot claim tokens");\n', '\n', '        // Recalculate stable shares\n', '        update();\n', '\n', '        // Transfer pending tokens (if any) to the staker\n', '        _shareMilk(staker);\n', '\n', '        if (amount > 0) {\n', '            // Unregister claimed tokens\n', '            _stakers[staker].amount = _stakers[staker].amount.sub(amount);\n', '            // Transfer requested tokens from the StableV2 contract\n', '            bool ok = _token.transfer(staker, amount);\n', '            require(ok, "StableV2: unable to transfer stake");\n', '        }\n', '\n', "        // Adjust correction (staker's reward debt)\n", '        uint256 correction = _stakers[staker].amount.mul(_tokensPerShare).div(1e12);\n', '        _stakers[staker].correction = correction.mul(1e18).div(_banditsCorrection);\n', '        _stakers[staker].banditsCorrection = _banditsCorrection;\n', '\n', '        // Emit event to the logs so can be effectively used later\n', '        emit Claimed(staker, amount);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Updating stable state\n', '    ////////////////////////////////////////////////////////////////\n', '\n', "    // Updates stable's accumulative data until most recent block.\n", '    function update() public override {\n', '        if (block.timestamp <= _lastUpdateTime) {\n', '            return;\n', '        }\n', '        uint256 productionNew = production();\n', '        uint256 producedNew = produced();\n', '        if (producedNew <= _produced) {\n', '            _lastUpdateTime = block.timestamp;\n', '            return;\n', '        }\n', '        uint256 supply = tokenSupply();\n', '        if (supply == 0) {\n', '            (_production, _produced) = (productionNew, producedNew);\n', '            _lastUpdateTime = block.timestamp;\n', '            return;\n', '        }\n', '        // Produce MILK tokens to this contract\n', '        uint256 producedTotal = producedNew.sub(_produced);\n', '        uint256 producedToStable = _milker.produceMilk(producedTotal);\n', '        // Update stable share price\n', '        _tokensPerShare = _tokensPerShare.add(producedToStable.mul(1e12).div(supply));\n', '        // Update stable state\n', '        _production = productionNew;\n', '        _produced = producedNew;\n', '        _lastUpdateTime = block.timestamp;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Management functions callable only be Milker\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function shareMilk(address taker) public override onlyMilker returns (uint256) {\n', '        return _shareMilk(taker);\n', '    }\n', '\n', '    function bandits(uint256 percent) external override onlyMilker returns (\n', '        uint256 banditsAmount,\n', '        uint256 arrestedAmount,\n', '        uint256 burntAmount\n', '    ) {\n', '        // Recalculate stable shares\n', '        update();\n', '\n', '        // Ensure pending amount and total tokens staked are not zero\n', '        uint256 pendingAmount = milkSupply();\n', '        if (pendingAmount == 0) {\n', '            return (0, 0, 0);\n', '        }\n', '\n', '        // Calculate bandits amounts\n', '        banditsAmount = pendingAmount.mul(percent).div(100);\n', '        burntAmount = banditsAmount.div(10);\n', '        arrestedAmount = banditsAmount.sub(burntAmount);\n', '\n', "        // Transfer arrested MILK to the Sheriff's Vault\n", '        _safeTransferMilk(address(_milker), arrestedAmount);\n', '\n', '        // Decrease pending of each staker\n', '        _banditsCorrection = _banditsCorrection.sub(_banditsCorrection.mul(percent).div(100));\n', '        _tokensPerShare = _tokensPerShare.sub(_tokensPerShare.mul(percent).div(100));\n', '\n', '        // Emit event to the logs so can be effectively used later\n', '        emit Bandits(percent, banditsAmount, arrestedAmount, burntAmount);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Contract getters\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function milker() public view override returns (address) {\n', '        return address(_milker);\n', '    }\n', '\n', '    function token() public view override returns (address) {\n', '        return address(_token);\n', '    }\n', '\n', '    function startTime() public view override returns (uint256) {\n', '        return _startTime;\n', '    }\n', '\n', '    function stakerTokens(address staker) public view override returns (uint256) {\n', '        return _stakers[staker].amount;\n', '    }\n', '\n', '    function stakerCorrection(address staker) public view override returns (uint256) {\n', '        return _stakers[staker].correction;\n', '    }\n', '\n', '    function tokenSupply() public view override returns (uint256) {\n', '        return _token.balanceOf(address(this));\n', '    }\n', '\n', '    function milkSupply() public view override returns (uint256) {\n', '        return _milker.balanceOf(address(this));\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // MILK production related getters\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function level() public view override returns (uint256) {\n', '        if (_startTime == 0 || _startTime >= block.timestamp) {\n', '            return 0;\n', '        }\n', '        return (block.timestamp - _startTime) / REDUCING_INTERVAL;\n', '    }\n', '\n', '    function levelProgress() public view override returns (uint256) {\n', '        if (_startTime == 0 || _startTime >= block.timestamp) {\n', '            return 0;\n', '        }\n', '        uint256 d = block.timestamp - (_startTime + level() * REDUCING_INTERVAL);\n', '        return d * 10**18 / REDUCING_INTERVAL;\n', '    }\n', '\n', '    function production() public view override returns(uint256) {\n', '        if (_startTime == 0 || _startTime >= block.timestamp) {\n', '            return 0;\n', '        }\n', '        uint256 prod = _production;\n', '        uint256 lvlA = (_lastUpdateTime - _startTime) / REDUCING_INTERVAL;\n', '        uint256 lvlB = (block.timestamp - _startTime) / REDUCING_INTERVAL;\n', '        for (; lvlA < lvlB; lvlA++) {\n', '            prod -= prod / REDUCING_FACTOR;\n', '        }\n', '        return prod;\n', '    }\n', '\n', '    function produced() public view override returns(uint256) {\n', '        if (_startTime == 0 || _startTime >= block.timestamp) {\n', '            return 0;\n', '        }\n', '        uint256 lvlA = (_lastUpdateTime - _startTime) / REDUCING_INTERVAL;\n', '        uint256 lvlB = (block.timestamp - _startTime) / REDUCING_INTERVAL;\n', '        if (lvlA == lvlB) {\n', '            return _produced + (block.timestamp - _lastUpdateTime) * _production / REDUCING_INTERVAL;\n', '        }\n', '        uint256 amount = 0;\n', '        uint256 prod = _production;\n', '        // Count end of first level\n', '        amount += ((_startTime + (lvlA+1) * REDUCING_INTERVAL) - _lastUpdateTime) * prod / REDUCING_INTERVAL;\n', '        prod -= prod / REDUCING_FACTOR;\n', '        for (lvlA++; lvlA < lvlB; lvlA++) {\n', '            // Count full level\n', '            amount += prod;\n', '            prod -= prod / REDUCING_FACTOR;\n', '        }\n', '        // Count start of current level\n', '        amount += (block.timestamp - (_startTime + lvlB * REDUCING_INTERVAL)) * prod / REDUCING_INTERVAL;\n', '        return _produced + amount;\n', '    }\n', '\n', '    function distributed() public view override returns(uint256) {\n', '        return _distributed;\n', '    }\n', '\n', '    function pending() public view override returns(uint256) {\n', '        uint256 p = produced();\n', '        if (p <= _distributed) {\n', '            return 0;\n', '        }\n', '        return p.sub(_distributed);\n', '    }\n', '\n', '    function pendingTo(address account) public view override returns (uint256) {\n', '        uint256 added = produced().sub(_produced);\n', '        uint256 supply = tokenSupply();\n', '        uint256 tokensPerShare = _tokensPerShare;\n', '        if (added > 0 && supply > 0) {\n', '            tokensPerShare = tokensPerShare.add(added.sub(added.div(20)).mul(1e12).div(supply));\n', '        }\n', '        uint256 tokens = _stakers[account].amount.mul(tokensPerShare).div(1e12);\n', '        uint256 correction = _stakers[account].correction.mul(_banditsCorrection).div(1e18);\n', '        if (_banditsCorrection != _stakers[account].banditsCorrection) {\n', '            correction = correction.mul(_stakers[account].banditsCorrection).div(_banditsCorrection);\n', '        }\n', '        if (tokens <= correction) {\n', '            return 0;\n', '        }\n', '        return tokens.sub(correction);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Internal functions\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function _shareMilk(address taker) private returns (uint256 tokens) {\n', '\n', '        // Calculate pending tokens\n', '        Staker storage s = _stakers[taker];\n', '        uint256 pendingAmount = s.amount.mul(_tokensPerShare).div(1e12);\n', '        uint256 correction = s.correction.mul(_banditsCorrection).div(1e18);\n', '        if (_banditsCorrection != s.banditsCorrection) {\n', '            correction = correction.mul(s.banditsCorrection).div(_banditsCorrection);\n', '            s.banditsCorrection = _banditsCorrection;\n', '        }\n', '        if (pendingAmount > correction) {\n', '            uint256 balance = _milker.balanceOf(address(this));\n', '            pendingAmount = pendingAmount.sub(correction);\n', '            tokens = pendingAmount > balance ? balance : pendingAmount;\n', '            // Unregister sharing tokens\n', '            s.correction = correction.add(tokens).mul(1e18).div(_banditsCorrection);\n', '            s.banditsCorrection = _banditsCorrection;\n', '            _distributed = _distributed.add(tokens);\n', '            // Transfer MILK tokens from the StableV2 contract to the taker\n', '            _safeTransferMilk(taker, tokens);\n', '        }\n', '\n', '        return tokens;\n', '    }\n', '\n', '    function _safeTransferMilk(address to, uint256 amount) private {\n', '        uint256 balance = _milker.balanceOf(address(this));\n', '        uint256 tokens = amount > balance ? balance : amount;\n', '        if (tokens > 0) {\n', '            bool ok = _milker.transfer(to, tokens);\n', '            require(ok, "StableV2: unable to transfer MILK");\n', '        }\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // [TESTS] Test functions to check internal state\n', '    // TODO: Remove it since only for tests !!!\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function testProduction() public view returns (uint256) {\n', '        return _production;\n', '    }\n', '\n', '    function testProduced() public view returns (uint256) {\n', '        return _produced;\n', '    }\n', '\n', '    function testTokensPerShare() public view returns (uint256) {\n', '        return _tokensPerShare;\n', '    }\n', '\n', '    function testLastUpdateTime() public view returns (uint256) {\n', '        return _lastUpdateTime;\n', '    }\n', '}\n', '\n', '// solium-enable security/no-block-members']