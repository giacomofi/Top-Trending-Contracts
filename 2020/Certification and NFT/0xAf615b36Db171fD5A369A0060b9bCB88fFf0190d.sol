['pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TokenInterface {\n', '    function approve(address, uint256) external;\n', '    function transfer(address, uint) external;\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint id) external returns (uint num);\n', '    function setUint(uint id, uint val) external;\n', '}\n', '\n', 'interface EventInterface {\n', '    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n', '}\n', '\n', 'contract Stores {\n', '\n', '  /**\n', '   * @dev Return ethereum address\n', '   */\n', '  function getEthAddr() internal pure returns (address) {\n', '    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n', '  }\n', '\n', '  /**\n', '   * @dev Return memory variable address\n', '   */\n', '  function getMemoryAddr() internal pure returns (address) {\n', '    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n', '  }\n', '\n', '  /**\n', '   * @dev Return InstaEvent Address.\n', '   */\n', '  function getEventAddr() internal pure returns (address) {\n', '    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n', '  }\n', '\n', '  /**\n', '   * @dev Get Uint value from InstaMemory Contract.\n', '   */\n', '  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n', '  }\n', '\n', '  /**\n', '  * @dev Set Uint value in InstaMemory Contract.\n', '  */\n', '  function setUint(uint setId, uint val) virtual internal {\n', '    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n', '  }\n', '\n', '  /**\n', '  * @dev emit event on event contract\n', '  */\n', '  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\n', '    (uint model, uint id) = connectorID();\n', '    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n', '  }\n', '\n', '  /**\n', '  * @dev Connector Details.\n', '  */\n', '  function connectorID() public view returns(uint model, uint id) {\n', '    (model, id) = (1, 41);\n', '  }\n', '\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '  uint constant WAD = 10 ** 18;\n', '  uint constant RAY = 10 ** 27;\n', '\n', '  function add(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(x, y);\n', '  }\n', '\n', '  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n', '    z = SafeMath.sub(x, y);\n', '  }\n', '\n', '  function mul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.mul(x, y);\n', '  }\n', '\n', '  function div(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.div(x, y);\n', '  }\n', '\n', '  function wmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n', '  }\n', '\n', '  function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n', '  }\n', '\n', '  function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n', '  }\n', '\n', '  function rmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n', '  }\n', '\n', '}\n', '\n', 'interface IGauge {\n', '  function claim_rewards() external;\n', '  function deposit(uint256 value) external;\n', '  function withdraw(uint256 value) external;\n', '  function lp_token() external view returns(address token);\n', '  function rewarded_token() external view returns(address token);\n', '  function crv_token() external view returns(address token);\n', '  function balanceOf(address user) external view returns(uint256 amt);\n', '}\n', '\n', 'interface IMintor{\n', '  function mint(address gauge) external;\n', '}\n', '\n', 'interface ICurveGaugeMapping {\n', '\n', '  struct GaugeData {\n', '    address gaugeAddress;\n', '    bool rewardToken;\n', '  }\n', '\n', '  function gaugeMapping(bytes32) external view returns(GaugeData memory);\n', '}\n', '\n', 'contract GaugeHelper is DSMath, Stores{\n', '\n', '  function getCurveGaugeMappingAddr() internal virtual view returns (address){\n', '    return 0x1C800eF1bBfE3b458969226A96c56B92a069Cc92;\n', '  }\n', '\n', '  function getCurveMintorAddr() internal virtual view returns (address){\n', '    return 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n', '  }\n', '\n', '  /**\n', '   * @dev Convert String to bytes32.\n', '   */\n', '  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n', '    require(bytes(str).length != 0, "string-empty");\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      result := mload(add(str, 32))\n', '    }\n', '  }\n', '}\n', '\n', 'contract CurveGaugeEvent is GaugeHelper {\n', '  event LogDeposit(\n', '    string indexed gaugePoolName,\n', '    uint amount,\n', '    uint getId,\n', '    uint setId\n', '  );\n', '\n', '  event LogWithdraw(\n', '    string indexed gaugePoolName,\n', '    uint amount,\n', '    uint getId,\n', '    uint setId\n', '  );\n', '\n', '  event LogClaimedReward(\n', '    string indexed gaugePoolName,\n', '    uint amount,\n', '    uint rewardAmt,\n', '    uint setId,\n', '    uint setIdReward\n', '  );\n', '\n', '  function emitLogWithdraw(string memory gaugePoolName, uint _amt, uint getId, uint setId) internal {\n', '    emit LogWithdraw(gaugePoolName, _amt, getId, setId);\n', '    bytes32 _eventCodeWithdraw = keccak256("LogWithdraw(string,uint256,uint256,uint256)");\n', '    bytes memory _eventParamWithdraw = abi.encode(gaugePoolName, _amt, getId, setId);\n', '    emitEvent(_eventCodeWithdraw, _eventParamWithdraw);\n', '  }\n', '\n', '  function emitLogClaimedReward(string memory gaugePoolName, uint crvAmt, uint rewardAmt, uint setIdCrv, uint setIdReward) internal {\n', '    emit LogClaimedReward(gaugePoolName, crvAmt, rewardAmt, setIdCrv, setIdReward);\n', '    bytes32 _eventCode = keccak256("LogClaimedReward(string,uint256,uint256,uint256,uint256)");\n', '    bytes memory _eventParam = abi.encode(gaugePoolName, crvAmt, rewardAmt, setIdCrv, setIdReward);\n', '    emitEvent(_eventCode, _eventParam);\n', '  }\n', '}\n', '\n', 'contract CurveGauge is CurveGaugeEvent {\n', '  struct Balances{\n', '    uint intialCRVBal;\n', '    uint intialRewardBal;\n', '    uint finalCRVBal;\n', '    uint finalRewardBal;\n', '    uint crvRewardAmt;\n', '    uint rewardAmt;\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit Cruve LP Token.\n', '    * @param gaugePoolName Curve gauge pool name.\n', '    * @param amt deposit amount.\n', '    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '  */\n', '  function deposit(\n', '    string calldata gaugePoolName,\n', '    uint amt,\n', '    uint getId,\n', '    uint setId\n', '  ) external payable {\n', '    uint _amt = getUint(getId, amt);\n', '    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\n', '    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\n', '        bytes32(stringToBytes32(gaugePoolName)\n', '    ));\n', '    require(curveGaugeData.gaugeAddress != address(0), "wrong-gauge-pool-name");\n', '    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\n', '    TokenInterface lp_token = TokenInterface(address(gauge.lp_token()));\n', '\n', '    _amt = _amt == uint(-1) ? lp_token.balanceOf(address(this)) : _amt;\n', '    lp_token.approve(address(curveGaugeData.gaugeAddress), _amt);\n', '\n', '    gauge.deposit(_amt);\n', '\n', '    setUint(setId, _amt);\n', '\n', '    emit LogDeposit(gaugePoolName, _amt, getId, setId);\n', '    bytes32 _eventCode = keccak256("LogDeposit(string,uint256,uint256,uint256)");\n', '    bytes memory _eventParam = abi.encode(gaugePoolName, _amt, getId, setId);\n', '    emitEvent(_eventCode, _eventParam);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw LP Token and claim both CRV and Reward token.\n', '    * @param gaugePoolName gauge pool name.\n', '    * @param amt LP token amount.\n', '    * @param getId Get LP token amount at this ID from `InstaMemory` Contract.\n', '    * @param setId Set LP token amount at this ID in `InstaMemory` Contract.\n', '    * @param setIdCrv Set CRV token reward amount at this ID in `InstaMemory` Contract.\n', '    * @param setIdReward Set reward amount at this ID in `InstaMemory` Contract.\n', '  */\n', '  function withdraw(\n', '    string calldata gaugePoolName,\n', '    uint amt,\n', '    uint getId,\n', '    uint setId,\n', '    uint setIdCrv,\n', '    uint setIdReward\n', '  ) external payable {\n', '    uint _amt = getUint(getId, amt);\n', '    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\n', '    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\n', '      bytes32(stringToBytes32(gaugePoolName))\n', '    );\n', '    require(curveGaugeData.gaugeAddress != address(0), "wrong-gauge-pool-name");\n', '    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\n', '    TokenInterface crv_token = TokenInterface(address(gauge.crv_token()));\n', '    TokenInterface rewarded_token;\n', '    Balances memory balances;\n', '\n', '    _amt = _amt == uint(-1) ? gauge.balanceOf(address(this)) : _amt;\n', '    balances.intialCRVBal = crv_token.balanceOf(address(this));\n', '\n', '    if (curveGaugeData.rewardToken) {\n', '      rewarded_token = TokenInterface(address(gauge.rewarded_token()));\n', '      balances.intialRewardBal = rewarded_token.balanceOf(address(this));\n', '    }\n', '\n', '    IMintor(getCurveMintorAddr()).mint(curveGaugeData.gaugeAddress);\n', '    gauge.withdraw(_amt);\n', '\n', '    balances.finalCRVBal = crv_token.balanceOf(address(this));\n', '    balances.crvRewardAmt = sub(balances.finalCRVBal, balances.intialCRVBal);\n', '\n', '    setUint(setId, _amt);\n', '    setUint(setIdCrv, balances.crvRewardAmt);\n', '\n', '    if (curveGaugeData.rewardToken) {\n', '      balances.finalRewardBal = rewarded_token.balanceOf(address(this));\n', '      balances.rewardAmt = sub(balances.finalRewardBal, balances.intialRewardBal);\n', '      setUint(setIdReward, balances.rewardAmt);\n', '    }\n', '\n', '    emitLogWithdraw(gaugePoolName, _amt, getId, setId);\n', '    emitLogClaimedReward(gaugePoolName, balances.crvRewardAmt, balances.rewardAmt, setIdCrv, setIdReward);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim CRV Reward with Staked Reward token\n', '    * @param gaugePoolName gauge pool name.\n', '    * @param setId Set CRV reward amount at this ID in `InstaMemory` Contract.\n', '    * @param setIdReward Set token reward amount at this ID in `InstaMemory` Contract.\n', '  */\n', '  function claimReward(\n', '    string calldata gaugePoolName,\n', '    uint setId,\n', '    uint setIdReward\n', '  ) external payable {\n', '    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\n', '    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\n', '      bytes32(stringToBytes32(gaugePoolName))\n', '    );\n', '    require(curveGaugeData.gaugeAddress != address(0), "wrong-gauge-pool-name");\n', '    IMintor mintor = IMintor(getCurveMintorAddr());\n', '    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\n', '    TokenInterface crv_token = TokenInterface(address(gauge.crv_token()));\n', '    TokenInterface rewarded_token;\n', '    Balances memory balances;\n', '\n', '    if (curveGaugeData.rewardToken) {\n', '      rewarded_token = TokenInterface(address(gauge.rewarded_token()));\n', '      balances.intialRewardBal = rewarded_token.balanceOf(address(this));\n', '    }\n', '\n', '    balances.intialCRVBal = crv_token.balanceOf(address(this));\n', '\n', '    mintor.mint(curveGaugeData.gaugeAddress);\n', '\n', '    balances.finalCRVBal = crv_token.balanceOf(address(this));\n', '    balances.crvRewardAmt = sub(balances.finalCRVBal, balances.intialCRVBal);\n', '\n', '    setUint(setId, balances.crvRewardAmt);\n', '\n', '    if(curveGaugeData.rewardToken){\n', '      balances.finalRewardBal = rewarded_token.balanceOf(address(this));\n', '      balances.rewardAmt = sub(balances.finalRewardBal, balances.intialRewardBal);\n', '      setUint(setIdReward, balances.rewardAmt);\n', '    }\n', '\n', '    emitLogClaimedReward(gaugePoolName, balances.crvRewardAmt, balances.rewardAmt, setId, setIdReward);\n', '  }\n', '}\n', '\n', 'contract ConnectCurveGauge is CurveGauge {\n', '  string public name = "Curve-Gauge-v1.0";\n', '}']