['pragma solidity ^0.4.12;\n', ' \n', '\n', 'contract IMigrationContract {\n', '    function migrate(address addr, uint256 nas) returns (bool success);\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', ' \n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', ' \n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', ' \n', '}\n', ' \n', '\n', 'contract Token {\n', '    uint256 public totalSupply; //代币总量\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', ' \n', '\n', '//JGO代币合约\n', 'contract JGOToken is StandardToken, SafeMath {\n', '    string  public constant name = "Artificial Intelligence Coin";   //名称\n', '    string  public constant symbol = "AIC"; //符号\n', '    uint256 public constant decimals = 6;  //小数位\n', '    string  public version = "1.0";         //版本\n', ' \n', '    address public ethFundDeposit;          //ETH存放地址\n', '    address public newContractAddr;         //代币更新地址\n', ' \n', '    bool    public isFunding;               \n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingStopBlock;\n', ' \n', '    uint256 public currentSupply;            //代币供应量\n', '    uint256 public tokenRaised = 0;          //总售卖数量\n', '    uint256 public tokenMigrated = 0;        //已经交易量\n', '    uint256 public tokenExchangeRate = 100;  //自动兑换比例：1ETH = 100JGO\n', ' \n', '    event IncreaseSupply(uint256 _value);\n', '    event DecreaseSupply(uint256 _value);\n', '    event Migrate(address indexed _to, uint256 _value);\n', '    event IssueToken(address indexed _to, uint256 _value);      //公开发行售卖的token;\n', '    event AllocateToken(address indexed _to, uint256 _value);   //分配的私有交易token;\n', '\n', '    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n', '\n', '    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n', '        return _value * 10 ** decimals;\n', '    }\n', '\n', ' \n', ' \t//JGO合约初始化函数(合约所有人地址, 当前供应量, 代币总量)\n', '    function JGOToken(address _ethFundDeposit, uint256 _currentSupply, uint256 _totalSupply) {\n', '        ethFundDeposit = _ethFundDeposit;\n', ' \n', '        isFunding = false;                         \n', '        fundingStartBlock = 0;\n', '        fundingStopBlock = 0;\n', ' \n', '        currentSupply = formatDecimals(_currentSupply); //当前供应量\n', '        totalSupply = formatDecimals(_totalSupply);     //代币总量\n', '        balances[msg.sender] = totalSupply;\n', '        if(currentSupply > totalSupply) throw;\n', '    }\n', ' \n', '\n', ' \n', '    //设置token汇率\n', '    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n', '        if (_tokenExchangeRate == 0) throw;\n', '        if (_tokenExchangeRate == tokenExchangeRate) throw;\n', ' \n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', ' \n', '\n', '    //增发处理(供应量，代币总量)\n', '    function increaseSupply (uint256 _supplyValue, uint256 _totalValue) isOwner external {\n', '        uint256 supplyValue = formatDecimals(_supplyValue);\n', '        uint256 totalValue  = formatDecimals(_totalValue);\n', '\n', '        totalSupply = safeAdd(totalSupply, totalValue);       //增加代币总量\n', '        if(supplyValue + currentSupply > totalSupply) throw;  //数量检查\n', '        currentSupply = safeAdd(currentSupply, supplyValue);  //增加供应量\n', '        IncreaseSupply(supplyValue);\n', '    }\n', ' \n', '\n', '    //被盗处理\n', '    function decreaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        if (value + tokenRaised > currentSupply) throw;\n', ' \n', '        currentSupply = safeSubtract(currentSupply, value);\n', '        DecreaseSupply(value);\n', '    }\n', ' \n', '\n', '    //启动区块检测 异常的处理\n', '    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n', '        if (isFunding) throw;\n', '        if (_fundingStartBlock >= _fundingStopBlock) throw;\n', '        if (block.number >= _fundingStartBlock) throw;\n', ' \n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingStopBlock = _fundingStopBlock;\n', '        isFunding = true;\n', '    }\n', ' \n', '\n', '    //关闭区块异常处理\n', '    function stopFunding() isOwner external {\n', '        if (!isFunding) throw;\n', '        isFunding = false;\n', '    }\n', ' \n', '\n', '    //开发新合约来接收代币\n', '    function setMigrateContract(address _newContractAddr) isOwner external {\n', '        if (_newContractAddr == newContractAddr) throw;\n', '        newContractAddr = _newContractAddr;\n', '    }\n', ' \n', '\n', '    //修改合约所有者\n', '    function changeOwner(address _newFundDeposit) isOwner() external {\n', '        if (_newFundDeposit == address(0x0)) throw;\n', '        ethFundDeposit = _newFundDeposit;\n', '    }\n', ' \n', '\n', '    //转移代币到新合约\n', '    function migrate() external {\n', '        if(isFunding) throw;\n', '        if(newContractAddr == address(0x0)) throw;\n', ' \n', '        uint256 tokens = balances[msg.sender];\n', '        if (tokens == 0) throw;\n', ' \n', '        balances[msg.sender] = 0;\n', '        tokenMigrated = safeAdd(tokenMigrated, tokens);\n', ' \n', '        IMigrationContract newContract = IMigrationContract(newContractAddr);\n', '        if (!newContract.migrate(msg.sender, tokens)) throw;\n', ' \n', '        Migrate(msg.sender, tokens);\n', '    }\n', '\n', ' \n', '    //转账ETH到JGO团队\n', '    function transferETH() isOwner external {\n', '        if (this.balance == 0) throw;\n', '        if (!ethFundDeposit.send(this.balance)) throw;\n', '    }\n', '\n', ' \n', '    //将JGOToken分配到预处理地址\n', '    function allocateToken (address _addr, uint256 _eth) isOwner external {\n', '        if (_eth == 0) throw;\n', '        if (_addr == address(0x0)) throw;\n', ' \n', '        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n', '        if (tokens + tokenRaised > currentSupply) throw;\n', ' \n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[_addr] += tokens;\n', ' \n', '        AllocateToken(_addr, tokens);\n', '    }\n', ' \n', ' \n', '    //购买代币\n', '    function () payable {\n', '        if (!isFunding) throw;\n', '        if (msg.value == 0) throw;\n', ' \n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingStopBlock) throw;\n', ' \n', '        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n', '        if (tokens + tokenRaised > currentSupply) throw;\n', ' \n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[msg.sender] += tokens;\n', ' \n', '        IssueToken(msg.sender, tokens);\n', '    }\n', '}']