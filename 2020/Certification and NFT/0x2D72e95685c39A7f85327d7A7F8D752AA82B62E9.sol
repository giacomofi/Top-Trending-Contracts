['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'interface DSPauseAbstract {\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setDelay(uint256) external;\n', '    function plans(bytes32) external view returns (bool);\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function drop(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function can(address, address) external view returns (uint256);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function sin(address) external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function cage() external;\n', '    function slip(bytes32, address, int256) external;\n', '    function flux(bytes32, address, address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function fork(bytes32, address, address, int256, int256) external;\n', '    function grab(bytes32, address, address, address, int256, int256) external;\n', '    function heal(uint256) external;\n', '    function suck(address, address, uint256) external;\n', '    function fold(bytes32, address, int256) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/cat.sol\n', 'interface CatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function box() external view returns (uint256);\n', '    function litter() external view returns (uint256);\n', '    function ilks(bytes32) external view returns (address, uint256, uint256);\n', '    function live() external view returns (uint256);\n', '    function vat() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function bite(bytes32, address) external returns (uint256);\n', '    function claw(uint256) external;\n', '    function cage() external;\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/jug.sol\n', 'interface JugAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256);\n', '    function vat() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function base() external view returns (address);\n', '    function init(bytes32) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, address) external;\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/flip.sol\n', 'interface FlipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function beg() external view returns (uint256);\n', '    function ttl() external view returns (uint48);\n', '    function tau() external view returns (uint48);\n', '    function kicks() external view returns (uint256);\n', '    function file(bytes32, uint256) external;\n', '    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\n', '    function tick(uint256) external;\n', '    function tend(uint256, uint256, uint256) external;\n', '    function dent(uint256, uint256, uint256) external;\n', '    function deal(uint256) external;\n', '    function yank(uint256) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/spot.sol\n', 'interface SpotAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '    function vat() external view returns (address);\n', '    function par() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '    function cage() external;\n', '}\n', '\n', '// https://github.com/makerdao/osm\n', 'interface OsmAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function stopped() external view returns (uint256);\n', '    function src() external view returns (address);\n', '    function hop() external view returns (uint16);\n', '    function zzz() external view returns (uint64);\n', '    function cur() external view returns (uint128, uint128);\n', '    function nxt() external view returns (uint128, uint128);\n', '    function bud(address) external view returns (uint256);\n', '    function stop() external;\n', '    function start() external;\n', '    function change(address) external;\n', '    function step(uint16) external;\n', '    function void() external;\n', '    function pass() external view returns (bool);\n', '    function poke() external;\n', '    function peek() external view returns (bytes32, bool);\n', '    function peep() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', '// https://github.com/makerdao/osm-mom\n', 'interface OsmMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function osms(bytes32) external view returns (address);\n', '    function setOsm(bytes32, address) external;\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function stop(bytes32) external;\n', '}\n', '\n', '// https://github.com/makerdao/median\n', 'interface MedianAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function age() external view returns (uint32);\n', '    function wat() external view returns (bytes32);\n', '    function bar() external view returns (uint256);\n', '    function orcl(address) external view returns (uint256);\n', '    function bud(address) external view returns (uint256);\n', '    function slot(uint8) external view returns (address);\n', '    function read() external view returns (uint256);\n', '    function peek() external view returns (uint256, bool);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/join.sol\n', 'interface GemJoinAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function gem() external view returns (address);\n', '    function dec() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function cage() external;\n', '    function join(address, uint256) external;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', '// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\n', 'interface FlipperMomAbstract {\n', '    function owner() external returns (address);\n', '    function setOwner(address) external;\n', '    function authority() external returns (address);\n', '    function setAuthority(address) external;\n', '    function cat() external returns (address);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', '// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\n', 'interface IlkRegistryAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function ilkData(bytes32) external view returns (\n', '        uint256,\n', '        address,\n', '        address,\n', '        address,\n', '        address,\n', '        uint256,\n', '        string memory,\n', '        string memory\n', '    );\n', '    function ilks() external view returns (bytes32[] memory);\n', '    function ilks(uint) external view returns (bytes32);\n', '    function add(address) external;\n', '    function remove(bytes32) external;\n', '    function removeAuth(bytes32) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, string calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (bytes32[] memory);\n', '    function list(uint256, uint256) external view returns (bytes32[] memory);\n', '    function get(uint256) external view returns (bytes32);\n', '    function info(bytes32) external view returns (\n', '        string memory,\n', '        string memory,\n', '        uint256,\n', '        address,\n', '        address,\n', '        address,\n', '        address\n', '    );\n', '    function pos(bytes32) external view returns (uint256);\n', '    function gem(bytes32) external view returns (address);\n', '    function pip(bytes32) external view returns (address);\n', '    function join(bytes32) external view returns (address);\n', '    function flip(bytes32) external view returns (address);\n', '    function dec(bytes32) external view returns (uint256);\n', '    function symbol(bytes32) external view returns (string memory);\n', '    function name(bytes32) external view returns (string memory);\n', '}\n', '\n', 'contract ERC20 {\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.0/contracts.json\n', '    address constant MCD_VAT                = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address constant MCD_CAT                = 0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea;\n', '    address constant MCD_JUG                = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address constant MCD_SPOT               = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address constant MCD_END                = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\n', '    address constant FLIPPER_MOM            = 0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472;\n', '    address constant OSM_MOM                = 0x76416A4d5190d071bfed309861527431304aA14f;\n', '    address constant ILK_REGISTRY           = 0x8b4ce5DCbb01e0e1f0521cd8dCfb31B308E52c24;\n', '\n', '    address constant USDT                   = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address constant MCD_JOIN_USDT_A        = 0x0Ac6A1D74E84C2dF9063bDDc31699FF2a2BB22A2;\n', '    address constant MCD_FLIP_USDT_A        = 0x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26;\n', '    address constant PIP_USDT               = 0x7a5918670B0C390aD25f7beE908c1ACc2d314A3C;\n', '\n', '    address constant PAXUSD                 = 0x8E870D67F660D95d5be530380D0eC0bd388289E1;\n', '    address constant MCD_JOIN_PAXUSD_A      = 0x7e62B7E279DFC78DEB656E34D6a435cC08a44666;\n', '    address constant MCD_FLIP_PAXUSD_A      = 0x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7;\n', '    address constant PIP_PAXUSD             = 0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC;\n', '\n', '    // light feeds\n', '    //\n', '    // https://forum.makerdao.com/t/mip10c14-sp5-proposal-appoint-argent-as-a-light-feed/3015\n', '    address constant ARGENT                 = 0x130431b4560Cd1d74A990AE86C337a33171FF3c6;\n', '    // https://forum.makerdao.com/t/mip10c14-sp6-proposal-appoint-mycrypto-as-a-light-feed/3383\n', '    address constant MYCRYPTO               = 0x3CB645a8f10Fb7B0721eaBaE958F77a878441Cb9;\n', '\n', '    // Medianizers\n', '    address constant USDTUSD                = 0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A;\n', '    address constant MANAUSD                = 0x681c4F8f69cF68852BAd092086ffEaB31F5B812c;\n', '    address constant BATUSD                 = 0x18B4633D6E39870f398597f3c1bA8c4A41294966;\n', '    address constant BTCUSD                 = 0xe0F30cb149fAADC7247E953746Be9BbBB6B5751f;\n', '    address constant ETHBTC                 = 0x81A679f98b63B3dDf2F17CB5619f4d6775b3c5ED;\n', '    address constant ETHUSD                 = 0x64DE91F5A373Cd4c28de3600cB34C7C6cE410C85;\n', '    address constant KNCUSD                 = 0x83076a2F42dc1925537165045c9FDe9A4B71AD97;\n', '    address constant ZRXUSD                 = 0x956ecD6a9A9A0d84e8eB4e6BaaC09329E202E55e;\n', '\n', '    // Decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    uint256 constant TWO_PCT_RATE           = 1000000000627937192491029810;\n', '    uint256 constant FOUR_PCT_RATE          = 1000000001243680656318820312;\n', '    uint256 constant SIX_PCT_RATE           = 1000000001847694957439350562;\n', '    uint256 constant TEN_PCT_RATE           = 1000000003022265980097387650;\n', '    uint256 constant FOURTY_EIGHT_PCT_RATE  = 1000000012431573129530493155;\n', '\n', '    function execute() external {\n', '        /*** Risk Parameter Adjustments ***/\n', '\n', '        // set the global debt ceiling to 763,000,000\n', '        // 708 (current DC) + 40 (WBTC-A increase) + 10 (tether DC) + 5 (paxusd DC)\n', '        VatAbstract(MCD_VAT).file("Line", 763 * MILLION * RAD);\n', '\n', '        // Set the WBTC-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 80 million\n', '        // New debt ceiling: 120 million\n', '        VatAbstract(MCD_VAT).file("WBTC-A", "line", 120 * MILLION * RAD);\n', '\n', '        // Set the BAT-A stability fee\n', '        // Previous: 0%\n', '        // New: 2%\n', '        JugAbstract(MCD_JUG).drip("BAT-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("BAT-A", "duty", TWO_PCT_RATE);\n', '\n', '        // Set the USDC-A stability fee\n', '        // Previous: 0%\n', '        // New: 2%\n', '        JugAbstract(MCD_JUG).drip("USDC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-A", "duty", TWO_PCT_RATE);\n', '\n', '        // Set the USDC-B stability fee\n', '        // Previous: 44%\n', '        // New: 48%\n', '        JugAbstract(MCD_JUG).drip("USDC-B"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-B", "duty", FOURTY_EIGHT_PCT_RATE);\n', '\n', '        // Set the WBTC-A stability fee\n', '        // Previous: 0%\n', '        // New: 2%\n', '        JugAbstract(MCD_JUG).drip("WBTC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("WBTC-A", "duty", TWO_PCT_RATE);\n', '\n', '        // Set the KNC-A stability fee\n', '        // Previous: 0%\n', '        // New: 2%\n', '        JugAbstract(MCD_JUG).drip("KNC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("KNC-A", "duty", TWO_PCT_RATE);\n', '\n', '        // Set the ZRX-A stability fee\n', '        // Previous: 0%\n', '        // New: 2%\n', '        JugAbstract(MCD_JUG).drip("ZRX-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("ZRX-A", "duty", TWO_PCT_RATE);\n', '\n', '        // Set the MANA-A stability fee\n', '        // Previous: 6%\n', '        // New: 10%\n', '        JugAbstract(MCD_JUG).drip("MANA-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("MANA-A", "duty", TEN_PCT_RATE);\n', '\n', '        // argent address array\n', '        address[] memory argent = new address[](1);\n', '        argent[0] = ARGENT;\n', '\n', '        // mycrypto address array\n', '        address[] memory mycrypto = new address[](1);\n', '        mycrypto[0] = MYCRYPTO;\n', '\n', '        // Lift New Argent light feed\n', '        MedianAbstract(BATUSD).lift(argent);\n', '        MedianAbstract(BTCUSD).lift(argent);\n', '        MedianAbstract(ETHBTC).lift(argent);\n', '        MedianAbstract(ETHUSD).lift(argent);\n', '        MedianAbstract(KNCUSD).lift(argent);\n', '        MedianAbstract(ZRXUSD).lift(argent);\n', '        MedianAbstract(USDTUSD).lift(argent);\n', '        MedianAbstract(MANAUSD).lift(argent);\n', '\n', '        // Lift New MyCrypto light feed\n', '        MedianAbstract(BATUSD).lift(mycrypto);\n', '        MedianAbstract(BTCUSD).lift(mycrypto);\n', '        MedianAbstract(ETHBTC).lift(mycrypto);\n', '        MedianAbstract(ETHUSD).lift(mycrypto);\n', '        MedianAbstract(KNCUSD).lift(mycrypto);\n', '        MedianAbstract(ZRXUSD).lift(mycrypto);\n', '        MedianAbstract(USDTUSD).lift(mycrypto);\n', '        MedianAbstract(MANAUSD).lift(mycrypto);\n', '\n', '        ////////////////////////////////////////////////////////////////////////////////\n', '        // USDT-A collateral deploy\n', '\n', '        // Set ilk bytes32 variable\n', '        bytes32 ilkUSDTA = "USDT-A";\n', '\n', '        // Sanity checks\n', '        require(GemJoinAbstract(MCD_JOIN_USDT_A).vat() == MCD_VAT,                  "join-vat-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_USDT_A).ilk() == ilkUSDTA,                 "join-ilk-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_USDT_A).gem() == USDT,   \t                "join-gem-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_USDT_A).dec() == ERC20(USDT).decimals(),   "join-dec-not-match");\n', '        require(FlipAbstract(MCD_FLIP_USDT_A).vat()    == MCD_VAT,                  "flip-vat-not-match");\n', '        require(FlipAbstract(MCD_FLIP_USDT_A).ilk()    == ilkUSDTA,                 "flip-ilk-not-match");\n', '\n', '        // Set price feed for USDT-A\n', '        SpotAbstract(MCD_SPOT).file(ilkUSDTA, "pip", PIP_USDT);\n', '\n', '        // Set the USDT-A flipper in the cat\n', '        CatAbstract(MCD_CAT).file(ilkUSDTA, "flip", MCD_FLIP_USDT_A);\n', '\n', '        // Init USDT-A in Vat\n', '        VatAbstract(MCD_VAT).init(ilkUSDTA);\n', '        // Init USDT-A in Jug\n', '        JugAbstract(MCD_JUG).init(ilkUSDTA);\n', '\n', '        // Allow USDT-A Join to modify Vat registry\n', '        VatAbstract(MCD_VAT).rely(MCD_JOIN_USDT_A);\n', '\n', '        // Allow USDT-A Flipper on the Cat\n', '        CatAbstract(MCD_CAT).rely(MCD_FLIP_USDT_A);\n', '\n', '        // Allow cat to kick auctions in USDT-A Flipper\n', '        FlipAbstract(MCD_FLIP_USDT_A).rely(MCD_CAT);\n', '\n', '        // Allow End to yank auctions in USDT-A Flipper\n', '        FlipAbstract(MCD_FLIP_USDT_A).rely(MCD_END);\n', '\n', '        // Allow FlipperMom to access the USDT-A Flipper\n', '        FlipAbstract(MCD_FLIP_USDT_A).rely(FLIPPER_MOM);\n', '\n', '        // Update OSM\n', '        OsmAbstract(PIP_USDT).rely(OSM_MOM);\n', '        MedianAbstract(OsmAbstract(PIP_USDT).src()).kiss(PIP_USDT);\n', '        OsmAbstract(PIP_USDT).kiss(MCD_SPOT);\n', '        OsmAbstract(PIP_USDT).kiss(MCD_END);\n', '        OsmMomAbstract(OSM_MOM).setOsm(ilkUSDTA, PIP_USDT);\n', '\n', "        // since we're adding 2 collateral types in this spell, global line is at beginning\n", '        VatAbstract(MCD_VAT).file( ilkUSDTA, "line", 10 * MILLION * RAD   ); // 10m debt ceiling\n', '        VatAbstract(MCD_VAT).file( ilkUSDTA, "dust", 100 * RAD            ); // 100 Dai dust\n', '        CatAbstract(MCD_CAT).file( ilkUSDTA, "dunk", 50 * THOUSAND * RAD  ); // 50,000 dunk\n', '        CatAbstract(MCD_CAT).file( ilkUSDTA, "chop", 113 * WAD / 100      ); // 13% liq. penalty\n', '        JugAbstract(MCD_JUG).file( ilkUSDTA, "duty", SIX_PCT_RATE         ); // 6% stability fee\n', '\n', '        FlipAbstract(MCD_FLIP_USDT_A).file(  "beg" , 103 * WAD / 100      ); // 3% bid increase\n', '        FlipAbstract(MCD_FLIP_USDT_A).file(  "ttl" , 6 hours              ); // 6 hours ttl\n', '        FlipAbstract(MCD_FLIP_USDT_A).file(  "tau" , 6 hours              ); // 6 hours tau\n', '\n', '        SpotAbstract(MCD_SPOT).file(ilkUSDTA, "mat",  150 * RAY / 100     ); // 150% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke(ilkUSDTA);\n', '\n', '        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_USDT_A);\n', '\n', '        ////////////////////////////////////////////////////////////////////////////////\n', '        // PAXUSD-A collateral deploy\n', '        // Set ilk bytes32 variable\n', '        bytes32 ilkPAXUSDA = "PAXUSD-A";\n', '\n', '        // Sanity checks\n', '        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).vat() == MCD_VAT,                    "join-vat-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).ilk() == ilkPAXUSDA,                 "join-ilk-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).gem() == PAXUSD,                     "join-gem-not-match");\n', '        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).dec() == ERC20(PAXUSD).decimals(),   "join-dec-not-match");\n', '        require(FlipAbstract(MCD_FLIP_PAXUSD_A).vat()    == MCD_VAT,                    "flip-vat-not-match");\n', '        require(FlipAbstract(MCD_FLIP_PAXUSD_A).ilk()    == ilkPAXUSDA,                 "flip-ilk-not-match");\n', '\n', '        // Set price feed for PAXUSD-A\n', '        SpotAbstract(MCD_SPOT).file(ilkPAXUSDA, "pip", PIP_PAXUSD);\n', '\n', '        // Set the PAXUSD-A flipper in the cat\n', '        CatAbstract(MCD_CAT).file(ilkPAXUSDA, "flip", MCD_FLIP_PAXUSD_A);\n', '\n', '        // Init PAXUSD-A in Vat\n', '        VatAbstract(MCD_VAT).init(ilkPAXUSDA);\n', '        // Init PAXUSD-A in Jug\n', '        JugAbstract(MCD_JUG).init(ilkPAXUSDA);\n', '\n', '        // Allow PAXUSD-A Join to modify Vat registry\n', '        VatAbstract(MCD_VAT).rely(MCD_JOIN_PAXUSD_A);\n', '\n', '        // Allow PAXUSD-A Flipper on the Cat\n', '        CatAbstract(MCD_CAT).rely(MCD_FLIP_PAXUSD_A);\n', '\n', '        // Allow cat to kick auctions in PAXUSD-A Flipper\n', '        // NOTE: this will be reverse later in spell, and is done only for explicitness.\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(MCD_CAT);\n', '\n', '        // Allow End to yank auctions in PAXUSD-A Flipper\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(MCD_END);\n', '\n', '        // Allow FlipperMom to access the PAXUSD-A Flipper\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(FLIPPER_MOM);\n', '\n', '        // Consequently, deny PAXUSD-A Flipper\n', '        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_PAXUSD_A);\n', '\n', '        VatAbstract(MCD_VAT).file(ilkPAXUSDA,   "line"  , 5 * MILLION * RAD    ); // 5 MM debt ceiling\n', '        VatAbstract(MCD_VAT).file(ilkPAXUSDA,   "dust"  , 100 * RAD            ); // 100 Dai dust\n', '        CatAbstract(MCD_CAT).file(ilkPAXUSDA,   "dunk"  , 50 * THOUSAND * RAD  ); // 50,000 dunk\n', '        CatAbstract(MCD_CAT).file(ilkPAXUSDA,   "chop"  , 113 * WAD / 100      ); // 13% liq. penalty\n', '        JugAbstract(MCD_JUG).file(ilkPAXUSDA,   "duty"  , TWO_PCT_RATE         ); // 2% stability fee\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   "beg"   , 103 * WAD / 100      ); // 3% bid increase\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   "ttl"   , 6 hours              ); // 6 hours ttl\n', '        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   "tau"   , 6 hours              ); // 6 hours tau\n', '        SpotAbstract(MCD_SPOT).file(ilkPAXUSDA, "mat"   , 120 * RAY / 100      ); // 120% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke(ilkPAXUSDA);\n', '\n', '        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_PAXUSD_A);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/d8496d07a5eae08f2d1886f6bf4de1a813b4584d/governance/votes/Executive%20vote%20-%20September%204%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-09-04 MakerDAO Executive Spell | Hash: 0x3c35701633399b48090f4c805686ebeeebcc86f6d05b354531f3bd0059ee48dd";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    modifier officeHours {\n', '\n', '        // Available after 14:00 UTC (10:00 am EDT) 2020/09/08\n', '        require(now >= 1599573600);\n', '\n', '        uint day = (now / 1 days + 3) % 7;\n', '        require(day < 5, "Can only be cast on a weekday");\n', '        uint hour = now / 1 hours % 24;\n', '        require(hour >= 14 && hour < 21, "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() officeHours public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']