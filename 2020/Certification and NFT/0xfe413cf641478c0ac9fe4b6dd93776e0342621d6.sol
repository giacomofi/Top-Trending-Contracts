['// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(address(this), spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/interface/ISGN.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title SGN interface\n', ' */\n', 'interface ISGN {\n', '    // functions\n', '    function updateSidechainAddr(bytes calldata _sidechainAddr) external;\n', '\n', '    function subscribe(uint _amount) external;\n', '\n', '    function redeemReward(bytes calldata _rewardRequest) external;\n', '\n', '    // events\n', '    event UpdateSidechainAddr(address indexed candidate, bytes indexed oldSidechainAddr, bytes indexed newSidechainAddr);\n', '\n', '    event AddSubscriptionBalance(address indexed consumer, uint amount);\n', '\n', '    event RedeemReward(address indexed receiver, uint cumulativeMiningReward, uint serviceReward, uint servicePool);\n', '}\n', '\n', '// File: contracts/lib/interface/IDPoS.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title DPoS interface\n', ' */\n', 'interface IDPoS {\n', '    enum ValidatorChangeType { Add, Removal }\n', '\n', '    // functions\n', '    function contributeToMiningPool(uint _amount) external;\n', '\n', '    function redeemMiningReward(address _receiver, uint _cumulativeReward) external;\n', '\n', '    function registerSidechain(address _addr) external;\n', '\n', '    function initializeCandidate(uint _minSelfStake, uint _commissionRate, uint _rateLockEndTime) external;\n', '\n', '    function announceIncreaseCommissionRate(uint _newRate, uint _newLockEndTime) external;\n', '\n', '    function confirmIncreaseCommissionRate() external;\n', '\n', '    function nonIncreaseCommissionRate(uint _newRate, uint _newLockEndTime) external;\n', '\n', '    function updateMinSelfStake(uint256 _minSelfStake) external;\n', '\n', '    function delegate(address _candidateAddr, uint _amount) external;\n', '\n', '    function withdrawFromUnbondedCandidate(address _candidateAddr, uint _amount) external;\n', '\n', '    function intendWithdraw(address _candidateAddr, uint _amount) external;\n', '\n', '    function confirmWithdraw(address _candidateAddr) external;\n', '\n', '    function claimValidator() external;\n', '\n', '    function confirmUnbondedCandidate(address _candidateAddr) external;\n', '\n', '    function slash(bytes calldata _penaltyRequest) external;\n', '\n', '    function validateMultiSigMessage(bytes calldata _request) external returns(bool);\n', '\n', '    function isValidDPoS() external view returns (bool);\n', '\n', '    function isValidator(address _addr) external view returns (bool);\n', '\n', '    function getValidatorNum() external view returns (uint);\n', '\n', '    function getMinStakingPool() external view returns (uint);\n', '\n', '    function getCandidateInfo(address _candidateAddr) external view returns (bool, uint, uint, uint, uint, uint, uint);\n', '\n', '    function getDelegatorInfo(address _candidateAddr, address _delegatorAddr) external view returns (uint, uint, uint[] memory, uint[] memory);\n', '\n', '    function getMinQuorumStakingPool() external view returns(uint);\n', '\n', '    function getTotalValidatorStakingPool() external view returns(uint);\n', '\n', "    // TODO: interface can't be inherited, so VoteType is not declared here\n", '    // function voteParam(uint _proposalId, VoteType _vote) external;\n', '\n', '    // function confirmParamProposal(uint _proposalId) external;\n', '\n', '    // function voteSidechain(uint _proposalId, VoteType _vote) external;\n', '\n', '    // function confirmSidechainProposal(uint _proposalId) external;\n', '\n', '    // events\n', '    event InitializeCandidate(address indexed candidate, uint minSelfStake, uint commissionRate, uint rateLockEndTime);\n', '\n', '    event CommissionRateAnnouncement(address indexed candidate, uint announcedRate, uint announcedLockEndTime);\n', '\n', '    event UpdateCommissionRate(address indexed candidate, uint newRate, uint newLockEndTime);\n', '\n', '    event UpdateMinSelfStake(address indexed candidate, uint minSelfStake);\n', '\n', '    event Delegate(address indexed delegator, address indexed candidate, uint newStake, uint stakingPool);\n', '\n', '    event ValidatorChange(address indexed ethAddr, ValidatorChangeType indexed changeType);\n', '\n', '    event WithdrawFromUnbondedCandidate(address indexed delegator, address indexed candidate, uint amount);\n', '\n', '    event IntendWithdraw(address indexed delegator, address indexed candidate, uint withdrawAmount, uint proposedTime);\n', '\n', '    event ConfirmWithdraw(address indexed delegator, address indexed candidate, uint amount);\n', '\n', '    event Slash(address indexed validator, address indexed delegator, uint amount);\n', '\n', '    event UpdateDelegatedStake(address indexed delegator, address indexed candidate, uint delegatorStake, uint candidatePool);\n', '\n', '    event Compensate(address indexed indemnitee, uint amount);\n', '\n', '    event CandidateUnbonded(address indexed candidate);\n', '\n', '    event RedeemMiningReward(address indexed receiver, uint reward, uint miningPool);\n', '\n', '    event MiningPoolContribution(address indexed contributor, uint contribution, uint miningPoolSize);\n', '}\n', '\n', '// File: contracts/lib/data/Pb.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '// runtime proto sol library\n', 'library Pb {\n', '    enum WireType { Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32 }\n', '\n', '    struct Buffer {\n', "        uint idx;  // the start index of next read. when idx=b.length, we're done\n", '        bytes b;   // hold serialized proto msg, readonly\n', '    }\n', '\n', '    // create a new in-memory Buffer object from raw msg bytes\n', '    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n', '        buf.b = raw;\n', '        buf.idx = 0;\n', '    }\n', '\n', '    // whether there are unread bytes\n', '    function hasMore(Buffer memory buf) internal pure returns (bool) {\n', '        return buf.idx < buf.b.length;\n', '    }\n', '\n', '    // decode current field number and wiretype\n', '    function decKey(Buffer memory buf) internal pure returns (uint tag, WireType wiretype) {\n', '        uint v = decVarint(buf);\n', '        tag = v / 8;\n', '        wiretype = WireType(v & 7);\n', '    }\n', '\n', '    // count tag occurrences, return an array due to no memory map support\n', '\t// have to create array for (maxtag+1) size. cnts[tag] = occurrences\n', '\t// should keep buf.idx unchanged because this is only a count function\n', '    function cntTags(Buffer memory buf, uint maxtag) internal pure returns (uint[] memory cnts) {\n', '        uint originalIdx = buf.idx;\n', "        cnts = new uint[](maxtag+1);  // protobuf's tags are from 1 rather than 0\n", '        uint tag;\n', '        WireType wire;\n', '        while (hasMore(buf)) {\n', '            (tag, wire) = decKey(buf);\n', '            cnts[tag] += 1;\n', '            skipValue(buf, wire);\n', '        }\n', '        buf.idx = originalIdx;\n', '    }\n', '\n', '    // read varint from current buf idx, move buf.idx to next read, return the int value\n', '    function decVarint(Buffer memory buf) internal pure returns (uint v) {\n', '        bytes10 tmp;  // proto int is at most 10 bytes (7 bits can be used per byte)\n', '        bytes memory bb = buf.b;  // get buf.b mem addr to use in assembly\n', '        v = buf.idx;  // use v to save one additional uint variable\n', '        assembly {\n', '            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n', '        }\n', '        uint b; // store current byte content\n', '        v = 0; // reset to 0 for return value\n', '        for (uint i=0; i<10; i++) {\n', '            assembly {\n', "                b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra\n", '            }\n', '            v |= (b & 0x7F) << (i * 7);\n', '            if (b & 0x80 == 0) {\n', '                buf.idx += i + 1;\n', '                return v;\n', '            }\n', '        }\n', '        revert(); // i=10, invalid varint stream\n', '    }\n', '\n', '    // read length delimited field and return bytes\n', '    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        b = new bytes(len);\n', '        bytes memory bufB = buf.b;  // get buf.b mem addr to use in assembly\n', '        uint bStart;\n', '        uint bufBStart = buf.idx;\n', '        assembly {\n', '            bStart := add(b, 32)\n', '            bufBStart := add(add(bufB, 32), bufBStart)\n', '        }\n', '        for (uint i=0; i<len; i+=32) {\n', '            assembly{\n', '                mstore(add(bStart, i), mload(add(bufBStart, i)))\n', '            }\n', '        }\n', '        buf.idx = end;\n', '    }\n', '\n', '    // return packed ints\n', '    function decPacked(Buffer memory buf) internal pure returns (uint[] memory t) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        // array in memory must be init w/ known length\n', '        // so we have to create a tmp array w/ max possible len first\n', '        uint[] memory tmp = new uint[](len);\n', '        uint i; // count how many ints are there\n', '        while (buf.idx < end) {\n', '            tmp[i] = decVarint(buf);\n', '            i++;\n', '        }\n', '        t = new uint[](i); // init t with correct length\n', '        for (uint j=0; j<i; j++) {\n', '            t[j] = tmp[j];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    // move idx pass current value field, to beginning of next tag or msg end\n', '    function skipValue(Buffer memory buf, WireType wire) internal pure {\n', '        if (wire == WireType.Varint) { decVarint(buf); }\n', '        else if (wire == WireType.LengthDelim) {\n', '            uint len = decVarint(buf);\n', '            buf.idx += len; // skip len bytes value data\n', '            require(buf.idx <= buf.b.length);  // avoid overflow\n', '        } else { revert(); }  // unsupported wiretype\n', '    }\n', '\n', '    // type conversion help utils\n', '    function _bool(uint x) internal pure returns (bool v) {\n', '        return x != 0;\n', '    }\n', '\n', '    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n', "        require(b.length <= 32);  // b's length must be smaller than or equal to 32\n", '        assembly { v := mload(add(b, 32)) }  // load all 32bytes to v\n', '        v = v >> (8 * (32 - b.length));  // only first b.length is valid\n', '    }\n', '\n', '    function _address(bytes memory b) internal pure returns (address v) {\n', '        v = _addressPayable(b);\n', '    }\n', '\n', '    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n', '        require(b.length == 20);\n', '        //load 32bytes then shift right 12 bytes\n', '        assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }\n', '    }\n', '\n', '    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n', '        require(b.length == 32);\n', '        assembly { v := mload(add(b, 32)) }\n', '    }\n', '\n', '    // uint[] to uint8[]\n', '    function uint8s(uint[] memory arr) internal pure returns (uint8[] memory t) {\n', '        t = new uint8[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint8(arr[i]); }\n', '    }\n', '\n', '    function uint32s(uint[] memory arr) internal pure returns (uint32[] memory t) {\n', '        t = new uint32[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint32(arr[i]); }\n', '    }\n', '\n', '    function uint64s(uint[] memory arr) internal pure returns (uint64[] memory t) {\n', '        t = new uint64[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint64(arr[i]); }\n', '    }\n', '\n', '    function bools(uint[] memory arr) internal pure returns (bool[] memory t) {\n', '        t = new bool[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = arr[i]!=0; }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/data/PbSgn.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: sgn.proto\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'library PbSgn {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    struct MultiSigMessage {\n', '        bytes msg;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct MultiSigMessage\n', '\n', '    function decMultiSigMessage(bytes memory raw) internal pure returns (MultiSigMessage memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.msg = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder MultiSigMessage\n', '\n', '    struct PenaltyRequest {\n', '        bytes penalty;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct PenaltyRequest\n', '\n', '    function decPenaltyRequest(bytes memory raw) internal pure returns (PenaltyRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.penalty = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PenaltyRequest\n', '\n', '    struct RewardRequest {\n', '        bytes reward;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct RewardRequest\n', '\n', '    function decRewardRequest(bytes memory raw) internal pure returns (RewardRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.reward = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder RewardRequest\n', '\n', '    struct Penalty {\n', '        uint64 nonce;   // tag: 1\n', '        uint64 expireTime;   // tag: 2\n', '        address validatorAddress;   // tag: 3\n', '        AccountAmtPair[] penalizedDelegators;   // tag: 4\n', '        AccountAmtPair[] beneficiaries;   // tag: 5\n', '    } // end struct Penalty\n', '\n', '    function decPenalty(bytes memory raw) internal pure returns (Penalty memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(5);\n', '        m.penalizedDelegators = new AccountAmtPair[](cnts[4]);\n', '        cnts[4] = 0;  // reset counter for later use\n', '        m.beneficiaries = new AccountAmtPair[](cnts[5]);\n', '        cnts[5] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.nonce = uint64(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.expireTime = uint64(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.validatorAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.penalizedDelegators[cnts[4]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[4]++;\n', '            }\n', '            else if (tag == 5) {\n', '                m.beneficiaries[cnts[5]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[5]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder Penalty\n', '\n', '    struct AccountAmtPair {\n', '        address account;   // tag: 1\n', '        uint256 amt;   // tag: 2\n', '    } // end struct AccountAmtPair\n', '\n', '    function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.account = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amt = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder AccountAmtPair\n', '\n', '    struct Reward {\n', '        address receiver;   // tag: 1\n', '        uint256 cumulativeMiningReward;   // tag: 2\n', '        uint256 cumulativeServiceReward;   // tag: 3\n', '    } // end struct Reward\n', '\n', '    function decReward(bytes memory raw) internal pure returns (Reward memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.receiver = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.cumulativeMiningReward = Pb._uint256(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.cumulativeServiceReward = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder Reward\n', '\n', '}\n', '\n', '// File: contracts/lib/DPoSCommon.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title DPoS contract common Library\n', ' * @notice Common items used in DPoS contract\n', ' */\n', 'library DPoSCommon {\n', '    // Unbonded: not a validator and not responsible for previous validator behaviors if any.\n', '    //   Delegators now are free to withdraw stakes (directly).\n', '    // Bonded: active validator. Delegators have to wait for slashTimeout to withdraw stakes.\n', '    // Unbonding: transitional status from Bonded to Unbonded. Candidate has lost the right of\n', '    //   validator but is still responsible for any misbehaviour done during being validator.\n', "    //   Delegators should wait until candidate's unbondTime to freely withdraw stakes.\n", '    enum CandidateStatus { Unbonded, Bonded, Unbonding }\n', '}\n', '\n', '// File: contracts/SGN.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Sidechain contract of State Guardian Network\n', ' * @notice This contract implements the mainchain logic of Celer State Guardian Network sidechain\n', ' * @dev specs: https://www.celer.network/docs/celercore/sgn/sidechain.html#mainchain-contracts\n', ' */\n', 'contract SGN is ISGN, Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public celerToken;\n', '    IDPoS public dPoSContract;\n', '    mapping(address => uint256) public subscriptionDeposits;\n', '    uint256 public servicePool;\n', '    mapping(address => uint256) public redeemedServiceReward;\n', '    mapping(address => bytes) public sidechainAddrMap;\n', '\n', '    /**\n', '     * @notice Throws if SGN sidechain is not valid\n', "     * @dev Check this before sidechain's operations\n", '     */\n', '    modifier onlyValidSidechain() {\n', "        require(dPoSContract.isValidDPoS(), 'DPoS is not valid');\n", '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice SGN constructor\n', '     * @dev Need to deploy DPoS contract first before deploying SGN contract\n', '     * @param _celerTokenAddress address of Celer Token Contract\n', '     * @param _DPoSAddress address of DPoS Contract\n', '     */\n', '    constructor(address _celerTokenAddress, address _DPoSAddress) public {\n', '        celerToken = IERC20(_celerTokenAddress);\n', '        dPoSContract = IDPoS(_DPoSAddress);\n', '    }\n', '\n', '    /**\n', '     * @notice Owner drains one type of tokens when the contract is paused\n', '     * @dev This is for emergency situations.\n', '     * @param _amount drained token amount\n', '     */\n', '    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n', '        celerToken.safeTransfer(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Update sidechain address\n', '     * @dev Note that the "sidechain address" here means the address in the offchain sidechain system,\n', '         which is different from the sidechain contract address\n', '     * @param _sidechainAddr the new address in the offchain sidechain system\n', '     */\n', '    function updateSidechainAddr(bytes calldata _sidechainAddr) external {\n', '        address msgSender = msg.sender;\n', '\n', '        (bool initialized, , , uint256 status, , , ) = dPoSContract.getCandidateInfo(msgSender);\n', '        require(\n', '            status == uint256(DPoSCommon.CandidateStatus.Unbonded),\n', "            'msg.sender is not unbonded'\n", '        );\n', "        require(initialized, 'Candidate is not initialized');\n", '\n', '        bytes memory oldSidechainAddr = sidechainAddrMap[msgSender];\n', '        sidechainAddrMap[msgSender] = _sidechainAddr;\n', '\n', '        emit UpdateSidechainAddr(msgSender, oldSidechainAddr, _sidechainAddr);\n', '    }\n', '\n', '    /**\n', '     * @notice Subscribe the guardian service\n', '     * @param _amount subscription fee paid along this function call in CELR tokens\n', '     */\n', '    function subscribe(uint256 _amount) external whenNotPaused onlyValidSidechain {\n', '        address msgSender = msg.sender;\n', '\n', '        servicePool = servicePool.add(_amount);\n', '        subscriptionDeposits[msgSender] = subscriptionDeposits[msgSender].add(_amount);\n', '\n', '        celerToken.safeTransferFrom(msgSender, address(this), _amount);\n', '\n', '        emit AddSubscriptionBalance(msgSender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Redeem rewards\n', '     * @dev The rewards include both the service reward and mining reward\n', '     * @dev SGN contract acts as an interface for users to redeem mining rewards\n', '     * @param _rewardRequest reward request bytes coded in protobuf\n', '     */\n', '    function redeemReward(bytes calldata _rewardRequest) external whenNotPaused onlyValidSidechain {\n', '        require(\n', '            dPoSContract.validateMultiSigMessage(_rewardRequest),\n', "            'Validator sigs verification failed'\n", '        );\n', '\n', '        PbSgn.RewardRequest memory rewardRequest = PbSgn.decRewardRequest(_rewardRequest);\n', '        PbSgn.Reward memory reward = PbSgn.decReward(rewardRequest.reward);\n', '        uint256 newServiceReward = reward.cumulativeServiceReward.sub(\n', '            redeemedServiceReward[reward.receiver]\n', '        );\n', '\n', "        require(servicePool >= newServiceReward, 'Service pool is smaller than new service reward');\n", '        redeemedServiceReward[reward.receiver] = reward.cumulativeServiceReward;\n', '        servicePool = servicePool.sub(newServiceReward);\n', '\n', '        dPoSContract.redeemMiningReward(reward.receiver, reward.cumulativeMiningReward);\n', '        celerToken.safeTransfer(reward.receiver, newServiceReward);\n', '\n', '        emit RedeemReward(\n', '            reward.receiver,\n', '            reward.cumulativeMiningReward,\n', '            newServiceReward,\n', '            servicePool\n', '        );\n', '    }\n', '}']