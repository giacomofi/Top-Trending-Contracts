['// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\modules\\staking\\IERC900.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '/**\n', ' * @title ERC900 Simple Staking Interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IERC900 {\n', '  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '\n', '  function stake(uint256 amount, bytes calldata data) external;\n', '\n', '  function stakeFor(address user, uint256 amount, bytes calldata data) external;\n', '  function unstake(uint256 amount, bytes calldata data) external;\n', '  function totalStakedFor(address addr) external  view returns (uint256);\n', '  function totalStaked() external  view returns (uint256);\n', '  function token() external  view returns (address);\n', '  function supportsHistory() external  pure returns (bool);\n', '\n', '  // NOTE: Not implementing the optional functions\n', '  // function lastStakedFor(address addr) external  view returns (uint256);\n', '  // function totalStakedForAt(address addr, uint256 blockNumber) external  view returns (uint256);\n', '  // function totalStakedAt(uint256 blockNumber) external  view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\common\\Base.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Base is Initializable, Context, Ownable {\n', '    address constant  ZERO_ADDRESS = address(0);\n', '\n', '    function initialize() public initializer {\n', '        Ownable.initialize(_msgSender());\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\core\\ModuleNames.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '/**\n', ' * @dev List of module names\n', ' */\n', 'contract ModuleNames {\n', '    // Pool Modules\n', '    string internal constant MODULE_ACCESS            = "access";\n', '    string internal constant MODULE_SAVINGS           = "savings";\n', '    string internal constant MODULE_INVESTING         = "investing";\n', '    string internal constant MODULE_STAKING           = "staking";\n', '    string internal constant MODULE_DCA               = "dca";\n', '\n', '    // External Modules (used to store addresses of external contracts)\n', '    string internal constant CONTRACT_RAY             = "ray";\n', '}\n', '\n', '// File: contracts\\common\\Module.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Module is Base, ModuleNames {\n', '    event PoolAddressChanged(address newPool);\n', '    address public pool;\n', '\n', '    function initialize(address _pool) public initializer {\n', '        Base.initialize();\n', '        setPool(_pool);\n', '    }\n', '\n', '    function setPool(address _pool) public onlyOwner {\n', '        require(_pool != ZERO_ADDRESS, "Module: pool address can\'t be zero");\n', '        pool = _pool;\n', '        emit PoolAddressChanged(_pool);        \n', '    }\n', '\n', '    function getModuleAddress(string memory module) public view returns(address){\n', '        require(pool != ZERO_ADDRESS, "Module: no pool");\n', '        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature("get(string)", module));\n', '        \n', '        //Forward error from Pool contract\n', '        if (!success) assembly {\n', '            revert(add(result, 32), result)\n', '        }\n', '\n', '        address moduleAddress = abi.decode(result, (address));\n', '        // string memory error = string(abi.encodePacked("Module: requested module not found - ", module));\n', '        // require(moduleAddress != ZERO_ADDRESS, error);\n', '        require(moduleAddress != ZERO_ADDRESS, "Module: requested module not found");\n', '        return moduleAddress;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\CapperRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract CapperRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event CapperAdded(address indexed account);\n', '    event CapperRemoved(address indexed account);\n', '\n', '    Roles.Role private _cappers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isCapper(sender)) {\n', '            _addCapper(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyCapper() {\n', '        require(isCapper(_msgSender()), "CapperRole: caller does not have the Capper role");\n', '        _;\n', '    }\n', '\n', '    function isCapper(address account) public view returns (bool) {\n', '        return _cappers.has(account);\n', '    }\n', '\n', '    function addCapper(address account) public onlyCapper {\n', '        _addCapper(account);\n', '    }\n', '\n', '    function renounceCapper() public {\n', '        _removeCapper(_msgSender());\n', '    }\n', '\n', '    function _addCapper(address account) internal {\n', '        _cappers.add(account);\n', '        emit CapperAdded(account);\n', '    }\n', '\n', '    function _removeCapper(address account) internal {\n', '        _cappers.remove(account);\n', '        emit CapperRemoved(account);\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\modules\\staking\\StakingPool.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC900 Simple Staking Interface basic implementation\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'contract StakingPool is Module, IERC900, CapperRole  {\n', "  // @TODO: deploy this separately so we don't have to deploy it multiple times for each contract\n", '  using SafeMath for uint256;\n', '\n', '  // Token used for staking\n', '  ERC20 stakingToken;\n', '\n', '  // The default duration of stake lock-in (in seconds)\n', '  uint256 public defaultLockInDuration;\n', '\n', '  // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\n', '  //  both data structures are stored in a single mapping for a given addresses.\n', '  //\n', "  // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\n", '  //  if other users are staking on behalf of a given address.\n', '  mapping (address => StakeContract) public stakeHolders;\n', '\n', '  // Struct for personal stakes (i.e., stakes made by this address)\n', '  // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\n', '  // actualAmount - the amount of tokens in the stake\n', '  // stakedFor - the address the stake was staked for\n', '  struct Stake {\n', '    uint256 unlockedTimestamp;\n', '    uint256 actualAmount;\n', '    address stakedFor;\n', '  }\n', '\n', '  // Struct for all stake metadata at a particular address\n', '  // totalStakedFor - the number of tokens staked for this address\n', '  // personalStakeIndex - the index in the personalStakes array.\n', '  // personalStakes - append only array of stakes made by this address\n', '  // exists - whether or not there are stakes that involve this address\n', '  struct StakeContract {\n', '    uint256 totalStakedFor;\n', '\n', '    uint256 personalStakeIndex;\n', '\n', '    Stake[] personalStakes;\n', '\n', '    bool exists;\n', '  }\n', '\n', '  bool public userCapEnabled;\n', '\n', '  mapping(address => uint256) public userCap; //Limit of pool tokens which can be minted for a user during deposit\n', '\n', '  \n', '  uint256 public defaultUserCap;\n', '  bool public stakingCapEnabled;\n', '  uint256 public stakingCap;\n', '\n', '\n', '  bool public vipUserEnabled;\n', '  mapping(address => bool) public isVipUser;\n', '  \n', '\n', '\n', '  event VipUserEnabledChange(bool enabled);\n', '  event VipUserChanged(address indexed user, bool isVip);\n', '\n', '  event StakingCapChanged(uint256 newCap);\n', '  event StakingCapEnabledChange(bool enabled);\n', '\n', '  //global cap\n', '  event DefaultUserCapChanged(uint256 newCap);\n', '\n', '  event UserCapEnabledChange(bool enabled);\n', '\n', '  event UserCapChanged(address indexed user, uint256 newCap);\n', '  event Staked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\n', '  event Unstaked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\n', '  event setLockInDuration(uint256 defaultLockInDuration);\n', '\n', '  /**\n', '   * @dev Modifier that checks that this contract can transfer tokens from the\n', '   *  balance in the stakingToken contract for the given address.\n', '   * @dev This modifier also transfers the tokens.\n', '   * @param _address address to transfer tokens from\n', '   * @param _amount uint256 the number of tokens\n', '   */\n', '  modifier canStake(address _address, uint256 _amount) {\n', '    require(\n', '      stakingToken.transferFrom(_address, address(this), _amount),\n', '      "Stake required");\n', '\n', '    _;\n', '  }\n', '\n', '\n', '  modifier isUserCapEnabledForStakeFor(uint256 stake) {\n', '\n', '    if (stakingCapEnabled && !(vipUserEnabled && isVipUser[_msgSender()])) {\n', '        require((stakingCap > totalStaked() && (stakingCap-totalStaked() >= stake)), "StakingModule: stake exeeds staking cap");\n', '    }\n', '\n', '    if(userCapEnabled) {\n', '          uint256 cap = userCap[_msgSender()];\n', '          //check default user cap settings\n', '          if (defaultUserCap > 0) {\n', '              uint256 totalStaked = totalStakedFor(_msgSender());\n', '              //get new cap\n', '              if (defaultUserCap >= totalStaked) {\n', '                cap = defaultUserCap.sub(totalStaked);\n', '              } else {\n', '                 cap = 0;\n', '              }\n', '          }\n', '          \n', '          require(cap >= stake, "StakingModule: stake exeeds cap");\n', '          cap = cap.sub(stake);\n', '          userCap[_msgSender()] = cap;\n', '          emit UserCapChanged(_msgSender(), cap);  \n', '    }\n', '      \n', '    _;\n', '  }\n', '\n', '\n', '  modifier isUserCapEnabledForUnStakeFor(uint256 unStake) {\n', '     _;\n', '\n', '     if(userCapEnabled){\n', '        uint256 cap = userCap[_msgSender()];\n', '        cap = cap.add(unStake);\n', '\n', '        if (cap > defaultUserCap) {\n', '            cap = defaultUserCap;\n', '        }\n', '\n', '        userCap[_msgSender()] = cap;\n', '        emit UserCapChanged(_msgSender(), cap);\n', '     }\n', '  }\n', '\n', '  modifier checkUserCapDisabled() {\n', '    require(isUserCapEnabled() == false, "UserCapEnabled");\n', '    _;\n', '  }\n', '\n', '  modifier checkUserCapEnabled() {\n', '    require(isUserCapEnabled(), "UserCapDisabled");\n', '    _;\n', '  }\n', '\n', '  function initialize(address _pool, ERC20 _stakingToken, uint256 _defaultLockInDuration) public initializer {\n', '        stakingToken = _stakingToken;\n', '        defaultLockInDuration = _defaultLockInDuration;\n', '        Module.initialize(_pool);\n', '\n', '        CapperRole.initialize(_msgSender());\n', '  }\n', '\n', '  function setDefaultLockInDuration(uint256 _defaultLockInDuration) public onlyOwner {\n', '      defaultLockInDuration = _defaultLockInDuration;\n', '      emit setLockInDuration(_defaultLockInDuration);\n', '  }\n', '\n', '  function setUserCapEnabled(bool _userCapEnabled) public onlyCapper {\n', '      userCapEnabled = _userCapEnabled;\n', '      emit UserCapEnabledChange(userCapEnabled);\n', '  }\n', '\n', '  function setStakingCapEnabled(bool _stakingCapEnabled) public onlyCapper {\n', '      stakingCapEnabled= _stakingCapEnabled;\n', '      emit StakingCapEnabledChange(stakingCapEnabled);\n', '  }\n', '\n', '  function setDefaultUserCap(uint256 _newCap) public onlyCapper {\n', '      defaultUserCap = _newCap;\n', '      emit DefaultUserCapChanged(_newCap);\n', '  }\n', '\n', '  function setStakingCap(uint256 _newCap) public onlyCapper {\n', '      stakingCap = _newCap;\n', '      emit StakingCapChanged(_newCap);\n', '  }\n', '\n', '  function setUserCap(address user, uint256 cap) public onlyCapper {\n', '      userCap[user] = cap;\n', '      emit UserCapChanged(user, cap);\n', '  }\n', '\n', '  function setUserCap(address[] memory users, uint256[] memory caps) public onlyCapper {\n', '        require(users.length == caps.length, "SavingsModule: arrays length not match");\n', '        for(uint256 i=0;  i < users.length; i++) {\n', '            userCap[users[i]] = caps[i];\n', '            emit UserCapChanged(users[i], caps[i]);\n', '        }\n', '  }\n', '\n', '\n', '  function setVipUserEnabled(bool _vipUserEnabled) public onlyCapper {\n', '      vipUserEnabled = _vipUserEnabled;\n', '      emit VipUserEnabledChange(_vipUserEnabled);\n', '  }\n', '\n', '  function setVipUser(address user, bool isVip) public onlyCapper {\n', '      isVipUser[user] = isVip;\n', '      emit VipUserChanged(user, isVip);\n', '  }\n', '\n', '  function isUserCapEnabled() public view returns(bool) {\n', '    return userCapEnabled;\n', '  }\n', '\n', '\n', '  function iStakingCapEnabled() public view returns(bool) {\n', '    return stakingCapEnabled;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the timestamps for when active personal stakes for an address will unlock\n', '   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\n', '   * @param _address address that created the stakes\n', '   * @return uint256[] array of timestamps\n', '   */\n', '  function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {\n', '    uint256[] memory timestamps;\n', '    (timestamps,,) = getPersonalStakes(_address);\n', '\n', '    return timestamps;\n', '  }\n', '\n', '\n', '  \n', '\n', '  /**\n', '   * @dev Returns the stake actualAmount for active personal stakes for an address\n', '   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\n', '   * @param _address address that created the stakes\n', '   * @return uint256[] array of actualAmounts\n', '   */\n', '  function getPersonalStakeActualAmounts(address _address) external view returns (uint256[] memory) {\n', '    uint256[] memory actualAmounts;\n', '    (,actualAmounts,) = getPersonalStakes(_address);\n', '\n', '    return actualAmounts;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the addresses that each personal stake was created for by an address\n', '   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\n', '   * @param _address address that created the stakes\n', '   * @return address[] array of amounts\n', '   */\n', '  function getPersonalStakeForAddresses(address _address) external view returns (address[] memory) {\n', '    address[] memory stakedFor;\n', '    (,,stakedFor) = getPersonalStakes(_address);\n', '\n', '    return stakedFor;\n', '  }\n', '\n', '  /**\n', '   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\n', '   * @notice MUST trigger Staked event\n', '   * @param _amount uint256 the amount of tokens to stake\n', '   * @param _data bytes optional data to include in the Stake event\n', '   */\n', '  function stake(uint256 _amount, bytes memory _data) public isUserCapEnabledForStakeFor(_amount) {\n', '    createStake(\n', '      _msgSender(),\n', '      _amount,\n', '      defaultLockInDuration,\n', '      _data);\n', '  }\n', '\n', '  /**\n', '   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\n', '   * @notice MUST trigger Staked event\n', '   * @param _user address the address the tokens are staked for\n', '   * @param _amount uint256 the amount of tokens to stake\n', '   * @param _data bytes optional data to include in the Stake event\n', '   */\n', '  function stakeFor(address _user, uint256 _amount, bytes memory _data) public checkUserCapDisabled {\n', '    createStake(\n', '      _user,\n', '      _amount,\n', '      defaultLockInDuration,\n', '      _data);\n', '  }\n', '\n', '  /**\n', '   * @notice Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revert\n', '   * @notice MUST trigger Unstaked event\n', '   * @dev Unstaking tokens is an atomic operationвЂ”either all of the tokens in a stake, or none of the tokens.\n', '   * @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\n', '   *  transferred back to their account, and their personalStakeIndex will increment to the next active stake.\n', '   * @param _amount uint256 the amount of tokens to unstake\n', '   * @param _data bytes optional data to include in the Unstake event\n', '   */\n', '  function unstake(uint256 _amount, bytes memory _data) public {\n', '    withdrawStake(\n', '      _amount,\n', '      _data);\n', '  }\n', '\n', '  function unstakeAllUnlocked(bytes memory _data) public returns(uint256) {\n', '     uint256 unstakeAllAmount = 0;\n', '     uint256 personalStakeIndex = stakeHolders[_msgSender()].personalStakeIndex;\n', '\n', '     for(uint256 i=personalStakeIndex; i<stakeHolders[_msgSender()].personalStakes.length; i++) {\n', '       \n', '       if (stakeHolders[_msgSender()].personalStakes[i].unlockedTimestamp <= block.timestamp) {\n', '           unstakeAllAmount = unstakeAllAmount+stakeHolders[_msgSender()].personalStakes[i].actualAmount;\n', '           withdrawStake(stakeHolders[_msgSender()].personalStakes[i].actualAmount, _data);\n', '       }\n', '     }\n', '\n', '     return unstakeAllAmount;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the current total of tokens staked for an address\n', '   * @param _address address The address to query\n', '   * @return uint256 The number of tokens staked for the given address\n', '   */\n', '  function totalStakedFor(address _address) public view returns (uint256) {\n', '    return stakeHolders[_address].totalStakedFor;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the current total of tokens staked\n', '   * @return uint256 The number of tokens staked in the contract\n', '   */\n', '  function totalStaked() public view returns (uint256) {\n', '    return stakingToken.balanceOf(address(this));\n', '  }\n', '\n', '  /**\n', '   * @notice Address of the token being used by the staking interface\n', '   * @return address The address of the ERC20 token used for staking\n', '   */\n', '  function token() public view returns (address) {\n', '    return address(stakingToken);\n', '  }\n', '\n', '  /**\n', '   * @notice MUST return true if the optional history functions are implemented, otherwise false\n', "   * @dev Since we don't implement the optional interface, this always returns false\n", '   * @return bool Whether or not the optional history functions are implemented\n', '   */\n', '  function supportsHistory() public pure returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * @dev Helper function to get specific properties of all of the personal stakes created by an address\n', '   * @param _address address The address to query\n', '   * @return (uint256[], uint256[], address[])\n', '   *  timestamps array, actualAmounts array, stakedFor array\n', '   */\n', '  function getPersonalStakes(\n', '    address _address\n', '  )\n', '    public view\n', '    returns(uint256[] memory, uint256[] memory, address[] memory)\n', '  {\n', '    StakeContract storage stakeContract = stakeHolders[_address];\n', '\n', '    uint256 arraySize = stakeContract.personalStakes.length - stakeContract.personalStakeIndex;\n', '    uint256[] memory unlockedTimestamps = new uint256[](arraySize);\n', '    uint256[] memory actualAmounts = new uint256[](arraySize);\n', '    address[] memory stakedFor = new address[](arraySize);\n', '\n', '    for (uint256 i = stakeContract.personalStakeIndex; i < stakeContract.personalStakes.length; i++) {\n', '      uint256 index = i - stakeContract.personalStakeIndex;\n', '      unlockedTimestamps[index] = stakeContract.personalStakes[i].unlockedTimestamp;\n', '      actualAmounts[index] = stakeContract.personalStakes[i].actualAmount;\n', '      stakedFor[index] = stakeContract.personalStakes[i].stakedFor;\n', '    }\n', '\n', '    return (\n', '      unlockedTimestamps,\n', '      actualAmounts,\n', '      stakedFor\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Helper function to create stakes for a given address\n', '   * @param _address address The address the stake is being created for\n', '   * @param _amount uint256 The number of tokens being staked\n', '   * @param _lockInDuration uint256 The duration to lock the tokens for\n', '   * @param _data bytes optional data to include in the Stake event\n', '   */\n', '  function createStake(\n', '    address _address,\n', '    uint256 _amount,\n', '    uint256 _lockInDuration,\n', '    bytes memory _data)\n', '    internal\n', '    canStake(_msgSender(), _amount)\n', '  {\n', '    if (!stakeHolders[_msgSender()].exists) {\n', '      stakeHolders[_msgSender()].exists = true;\n', '    }\n', '\n', '    stakeHolders[_address].totalStakedFor = stakeHolders[_address].totalStakedFor.add(_amount);\n', '    stakeHolders[_msgSender()].personalStakes.push(\n', '      Stake(\n', '        block.timestamp.add(_lockInDuration),\n', '        _amount,\n', '        _address)\n', '      );\n', '\n', '    emit Staked(\n', '      _address,\n', '      _amount,\n', '      totalStakedFor(_address),\n', '      _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Helper function to withdraw stakes for the _msgSender()\n', '   * @param _amount uint256 The amount to withdraw. MUST match the stake amount for the\n', '   *  stake at personalStakeIndex.\n', '   * @param _data bytes optional data to include in the Unstake event\n', '   */\n', '  function withdrawStake(\n', '    uint256 _amount,\n', '    bytes memory _data)\n', '    internal isUserCapEnabledForUnStakeFor(_amount)\n', '  {\n', '    Stake storage personalStake = stakeHolders[_msgSender()].personalStakes[stakeHolders[_msgSender()].personalStakeIndex];\n', '\n', '    // Check that the current stake has unlocked & matches the unstake amount\n', '    require(\n', '      personalStake.unlockedTimestamp <= block.timestamp,\n', '      "The current stake hasn\'t unlocked yet");\n', '\n', '    require(\n', '      personalStake.actualAmount == _amount,\n', '      "The unstake amount does not match the current stake");\n', '\n', '    // Transfer the staked tokens from this contract back to the sender\n', '    // Notice that we are using transfer instead of transferFrom here, so\n', '    //  no approval is needed beforehand.\n', '    require(\n', '      stakingToken.transfer(_msgSender(), _amount),\n', '      "Unable to withdraw stake");\n', '\n', '    stakeHolders[personalStake.stakedFor].totalStakedFor = stakeHolders[personalStake.stakedFor]\n', '      .totalStakedFor.sub(personalStake.actualAmount);\n', '\n', '    personalStake.actualAmount = 0;\n', '    stakeHolders[_msgSender()].personalStakeIndex++;\n', '\n', '    emit Unstaked(\n', '      personalStake.stakedFor,\n', '      _amount,\n', '      totalStakedFor(personalStake.stakedFor),\n', '      _data);\n', '  }\n', '\n', '}']