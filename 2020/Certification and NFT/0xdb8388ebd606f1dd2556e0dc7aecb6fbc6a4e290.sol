['pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'abstract contract DSGuard {\n', '    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\n', '\n', '    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function permit(address src, address dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(address src, address dst, bytes32 sig) public virtual;\n', '}\n', '\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '} abstract contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n', '} contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '} abstract contract DSProxyInterface {\n', '\n', "    /// Truffle wont compile if this isn't commented\n", '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public virtual\n', '    //     payable\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public virtual payable returns (bool);\n', '\n', '    function owner() public virtual returns (address);\n', '} contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}\n', '\n', '/// @title Struct Data in a separate contract soit can be used in multiple places\n', 'contract StrategyData {\n', '\n', '    struct Trigger {\n', '        bytes32 id;\n', '        bytes data;\n', '    }\n', '\n', '    struct Action {\n', '        bytes32 id;\n', '        bytes data;\n', '    }\n', '\n', '    struct Strategy {\n', '        address user;\n', '        address proxy;\n', '        bool active;\n', '        uint[] triggerIds;\n', '        uint[] actionIds;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title Storage of actions and triggers which can be added/removed and modified\n', 'contract Subscriptions is StrategyData {\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    Strategy[] internal strategies;\n', '    Action[] internal actions;\n', '    Trigger[] internal triggers;\n', '\n', '    /// @notice Subscribes a new strategy for a user\n', '    /// @param _triggers Array of trigger data\n', '    /// @param _actions Array of action data\n', '    function subscribe(Trigger[] memory _triggers, Action[] memory _actions) public {\n', '        uint[] memory triggerIds = new uint[](_triggers.length);\n', '        uint[] memory actionsIds = new uint[](_actions.length);\n', '\n', '        // Populate triggers\n', '        for (uint i = 0; i < _triggers.length; ++i) {\n', '            triggers.push(Trigger({\n', '                id: _triggers[i].id,\n', '                data: _triggers[i].data\n', '            }));\n', '\n', '            triggerIds[i] = triggers.length - 1;\n', '        }\n', '\n', '        // Populate actions\n', '        for (uint i = 0; i < _actions.length; ++i) {\n', '            actions.push(Action({\n', '                id: _actions[i].id,\n', '                data: _actions[i].data\n', '            }));\n', '\n', '            actionsIds[i] = actions.length - 1;\n', '        }\n', '\n', '        strategies.push(Strategy({\n', '            user: getProxyOwner(msg.sender),\n', '            proxy: msg.sender,\n', '            active: true,\n', '            triggerIds: triggerIds,\n', '            actionIds: actionsIds\n', '        }));\n', '\n', '        logger.Log(address(this), msg.sender, "Subscribe", abi.encode(strategies.length - 1));\n', '    }\n', '\n', '    // TODO: what if we have more/less actions then in the original strategy?\n', '\n', '    /// @notice Update an existing strategy\n', '    /// @param _subId Subscription id\n', '    /// @param _triggers Array of trigger data\n', '    /// @param _actions Array of action data\n', '    function update(uint _subId, Trigger[] memory _triggers, Action[] memory _actions) public {\n', '        Strategy memory s = strategies[_subId];\n', '        require(s.user != address(0), "Strategy does not exist");\n', '        require(msg.sender == s.proxy, "Proxy not strategy owner");\n', '\n', '        // update triggers\n', '        for (uint i = 0; i < _triggers.length; ++i) {\n', '            triggers[s.triggerIds[i]] = Trigger({\n', '                id: _triggers[i].id,\n', '                data: _triggers[i].data\n', '            });\n', '        }\n', '\n', '        // update actions\n', '        for (uint i = 0; i < _actions.length; ++i) {\n', '            actions[s.actionIds[i]] = Action({\n', '                id: _actions[i].id,\n', '                data: _actions[i].data\n', '            });\n', '        }\n', '\n', '        logger.Log(address(this), msg.sender, "Update", abi.encode(_subId));\n', '    }\n', '\n', '    /// @notice Unsubscribe an existing strategy\n', '    /// @param _subId Subscription id\n', '    function unsubscribe(uint _subId) public {\n', '        Strategy memory s = strategies[_subId];\n', '        require(s.user != address(0), "Strategy does not exist");\n', '        require(msg.sender == s.proxy, "Proxy not strategy owner");\n', '\n', '        strategies[_subId].active = false;\n', '\n', '        logger.Log(address(this), msg.sender, "Unsubscribe", abi.encode(_subId));\n', '    }\n', '\n', '\n', '    function getProxyOwner(address _proxy) internal returns (address proxyOwner) {\n', '        proxyOwner = DSProxyInterface(_proxy).owner();\n', '        require(proxyOwner != address(0), "No proxy");\n', '    }\n', '\n', '    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\n', '\n', '    function getTrigger(uint _triggerId) public view returns (Trigger memory) {\n', '        return triggers[_triggerId];\n', '    }\n', '\n', '    function getAction(uint _actionId) public view returns (Action memory) {\n', '        return actions[_actionId];\n', '    }\n', '\n', '    function getStreategyCount() public view returns (uint) {\n', '        return strategies.length;\n', '    }\n', '\n', '    function getStrategy(uint _subId) public view returns (Strategy memory) {\n', '        return strategies[_subId];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title Handles auth and calls subscription contract\n', 'contract SubscriptionProxy is StrategyData {\n', '\n', '    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n', '\n', '    function subscribe(address _executorAddr, address _subAddr, Trigger[] memory _triggers, Action[] memory _actions) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        DSGuard guard = DSGuard(currAuthority);\n', '\n', '        if (currAuthority == address(0)) {\n', '            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n', '            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n', '        }\n', '\n', '        guard.permit(_executorAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '\n', '        Subscriptions(_subAddr).subscribe(_triggers, _actions);\n', '    }\n', '\n', '    function update(address _subAddr, uint _subId, Trigger[] memory _triggers, Action[] memory _actions) public {\n', '        Subscriptions(_subAddr).update(_subId, _triggers, _actions);\n', '    }\n', '\n', '    // TODO: should we remove permission if no more strategies left?\n', '    function unsubscribe(address _subAddr, uint _subId) public {\n', '        Subscriptions(_subAddr).unsubscribe(_subId);\n', '    }\n', '}']