['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/711/dependencies/IAgency.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IAgency {\n', '    function register(string calldata _input) external pure returns(bytes32);\n', '}\n', '\n', '// File: contracts/711/dependencies/IAgentRegistry.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IAgentRegistry {\n', '    function agents() external returns (uint256);\n', '    function register(string calldata _nameString) external payable;\n', '    function getAgentAddressById(uint256 _agentId) external view returns (address payable);\n', '    function getAgentAddressByName(bytes32 _agentName) external view returns (address payable);\n', '    function isAgent(address _agent) external view returns (bool);\n', '}\n', '\n', '// File: contracts/711/ADDRESSBOOK.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract ADDRESSBOOK {\n', '    address constant public FEE_APPROVER = 0x6C70d504932AA318f8070De13F3c4Ab69A87953f;\n', '    address payable constant public VAULT = 0xB1ff949285107B7b967c0d05886F2513488D0042;\n', '    address constant public REWARDS_DISTRIBUTOR = 0xB3c39777142320F7C5329bF87287A707C77266e3;\n', '    address constant public STAKING_CONTRACT = 0x29d44e1726e4368e5A7Abf4fbC481a874AebCf00;\n', '    address constant public ZAP = 0x0797778B9110D03FF64fF25192e2a980Bf4523b8;\n', '    address constant public TOKEN_ADDRESS_711 = 0x9d4709e7C38e7857636c342a37547E191125E028;\n', '    address constant public AGENT_REGISTRY = 0x35C9Dbd51D926838cAc8eB33ebDbEA5e2930b247;\n', '    address constant public UNISWAP_V2_PAIR_711_WETH = 0xF295b0fa1A89c8a06109fB2D2c860a96Fb39dca5;\n', '}\n', '\n', '// File: contracts/711/AgentRegistry.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', 'contract AgentRegistry is IAgentRegistry, ADDRESSBOOK {\n', '    using SafeMath for *;\n', '\n', '    struct Player {\n', '        uint256 id;             // agent id\n', '        bytes32 name;           // agent name\n', '        bool isAgent;           // referral activated\n', '    }\n', '\n', '    IAgency agency = IAgency(0x7Bc360ebD65eFa503FF189A0F81f61f85D310Ec3);\n', '    address payable public vault;\n', '    uint256 public agents;      // number of agent\n', '    // player data\n', '    mapping(address => Player) public player;       // player data\n', '    mapping(uint256 => address) public agentxID_;   // return agent address by id\n', '    mapping(bytes32 => address) public agentxName_; // return agent address by name\n', '\n', '    //******************\n', '    // MODIFIER\n', '    //******************\n', '    modifier isHuman() {\n', '        require(msg.sender == tx.origin, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        vault = VAULT;\n', '    }\n', '\n', '    /**\n', '     * @dev Register\n', '     * @notice Register a name by a human player\n', '     */\n', '    function register(string calldata _nameString)\n', '        external\n', '        payable\n', '        isHuman()\n', '    {\n', '        bytes32 _name = agency.register(_nameString);\n', '        address _agent = msg.sender;\n', '        require(msg.value >= 0.1 ether, "insufficient amount");\n', '        require(agentxName_[_name] == address(0), "name registered");\n', '\n', '        if(!player[_agent].isAgent){\n', '            agents += 1;\n', '            player[_agent].isAgent = true;\n', '            player[_agent].id = agents;\n', '            agentxID_[agents] = _agent;\n', '        }\n', '        // set name active for the player\n', '        player[_agent].name = _name;\n', '        agentxName_[_name] = _agent;\n', '        // transfer ether to vault\n', '        vault.transfer(msg.value);\n', '    }\n', '\n', '    function getAgentAddressById(uint256 _agentId) external view returns (address payable) {\n', '        return address(uint160(agentxID_[_agentId]));\n', '    }\n', '\n', '    function getAgentAddressByName(bytes32 _agentName) external view returns (address payable) {\n', '        return address(uint160(agentxName_[_agentName]));\n', '    }\n', '\n', '    function isAgent(address _agent) external view returns (bool) {\n', '        return player[_agent].isAgent;\n', '    }\n', '}']