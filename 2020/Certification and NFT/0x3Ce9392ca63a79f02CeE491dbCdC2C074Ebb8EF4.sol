['// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/IDerivativeSpecification.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Derivative Specification interface\n', '/// @notice Immutable collection of derivative attributes\n', "/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\n", 'interface IDerivativeSpecification {\n', '\n', '    /// @notice Proof of a derivative specification\n', '    /// @dev Verifies that contract is a derivative specification\n', '    /// @return true if contract is a derivative specification\n', '    function isDerivativeSpecification() external pure returns(bool);\n', '\n', '    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\n', '    /// between the start and the end of the Live period\n', '    /// @dev Should be resolved through OracleRegistry contract\n', '    /// @return oracle symbols\n', '    function oracleSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    /// finds the value closest to a given timestamp\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbols\n', '    function oracleIteratorSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Type of collateral that users submit to mint the derivative\n', '    /// @dev Should be resolved through CollateralTokenRegistry contract\n', '    /// @return collateral token symbol\n', '    function collateralTokenSymbol() external view returns (bytes32);\n', '\n', '    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\n', '    /// and the initial collateral split to the final collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split symbol\n', '    function collateralSplitSymbol() external view returns (bytes32);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Minting period.\n", '    /// @dev Set in seconds\n', '    /// @return minting period value\n', '    function mintingPeriod() external view returns (uint);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\n", '    /// @dev Set in seconds\n', '    /// @return live period value\n', '    function livePeriod() external view returns (uint);\n', '\n', '    /// @notice Parameter that determines starting nominal value of primary asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\n', '    /// @return primary nominal value\n', '    function primaryNominalValue() external view returns (uint);\n', '\n', '    /// @notice Parameter that determines starting nominal value of complement asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\n', '    /// @return complement nominal value\n', '    function complementNominalValue() external view returns (uint);\n', '\n', '    /// @notice Minting fee rate due to the author of the derivative specification.\n', '    /// @dev Percentage fee multiplied by 10 ^ 12\n', '    /// @return author fee\n', '    function authorFee() external view returns (uint);\n', '\n', '    /// @notice Symbol of the derivative\n', '    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\n', '    /// @return derivative specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Return optional long name of the derivative\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return long name\n', '    function name() external view returns (string memory);\n', '\n', '    /// @notice Optional URI to the derivative specs\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return URI to the derivative specs\n', '    function baseURI() external view returns (string memory);\n', '\n', '    /// @notice Derivative spec author\n', "    /// @dev Used to set and receive author's fee\n", '    /// @return address of the author\n', '    function author() external view returns (address);\n', '}\n', '\n', '// File: contracts/registries/IAddressRegistry.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IAddressRegistry {\n', '    function get(bytes32 _key) external view returns(address);\n', '    function set(bytes32 _key, address _value) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/EIP20NonStandardInterface.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title EIP20NonStandardInterface\n', '/// @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n', '/// See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', 'interface EIP20NonStandardInterface {\n', '    /// @notice Get the total number of tokens in circulation\n', '    /// @return The supply of tokens\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /// @notice Gets the balance of the specified address\n', '    /// @param owner The address from which the balance will be retrieved\n', '    /// @return balance The balance\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    //\n', '    // !!!!!!!!!!!!!!\n', '    // !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n', '    // !!!!!!!!!!!!!!\n', '    //\n', '\n', '    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '    /// @param dst The address of the destination account\n', '    /// @param amount The number of tokens to transfer\n', '    function transfer(address dst, uint256 amount) external;\n', '\n', '    //\n', '    // !!!!!!!!!!!!!!\n', '    // !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n', '    // !!!!!!!!!!!!!!\n', '    //\n', '\n', '    /// @notice Transfer `amount` tokens from `src` to `dst`\n', '    /// @param src The address of the source account\n', '    /// @param dst The address of the destination account\n', '    /// @param amount The number of tokens to transfer\n', '    function transferFrom(address src, address dst, uint256 amount) external;\n', '\n', '    /// @notice Approve `spender` to transfer up to `amount` from `src`\n', '    /// @dev This will overwrite the approval amount for `spender`\n', '    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '    /// @param spender The address of the account which may transfer tokens\n', '    /// @param amount The number of tokens that are approved\n', '    /// @return success Whether or not the approval succeeded\n', '    function approve(address spender, uint256 amount) external returns (bool success);\n', '\n', '    /// @notice Get the current allowance from `owner` for `spender`\n', '    /// @param owner The address of the account which owns the tokens to be spent\n', '    /// @param spender The address of the account which may transfer tokens\n', '    /// @return remaining The number of tokens allowed to be spent\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '}\n', '\n', '// File: contracts/collateralSplits/ICollateralSplit.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Collateral Split interface\n', '/// @notice Contains mathematical functions used to calculate relative claim\n', '/// on collateral of primary and complement assets after settlement.\n', '/// @dev Created independently from specification and published to the CollateralSplitRegistry\n', 'interface ICollateralSplit {\n', '\n', '    /// @notice Proof of collateral split contract\n', '    /// @dev Verifies that contract is a collateral split contract\n', '    /// @return true if contract is a collateral split contract\n', '    function isCollateralSplit() external pure returns(bool);\n', '\n', '    /// @notice Symbol of the collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', "    /// @notice Calcs primary asset class' share of collateral at settlement.\n", '    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\n', '    /// @param _underlyingStartRoundHints specify for each oracle round of the start of Live period\n', '    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\n', "    /// @return _split primary asset class' share of collateral at settlement\n", '    /// @return _underlyingStarts underlying values in the start of Live period\n', '    /// @return _underlyingEnds underlying values in the end of Live period\n', '    function split(\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        uint _liveTime,\n', '        uint _settleTime,\n', '        uint[] memory _underlyingStartRoundHints,\n', '        uint[] memory _underlyingEndRoundHints)\n', '    external view returns(uint _split, int[] memory _underlyingStarts, int[] memory _underlyingEnds);\n', '}\n', '\n', '// File: contracts/tokens/IERC20MintedBurnable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', 'interface IERC20MintedBurnable is IERC20 {\n', '    function mint(address to, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/tokens/ITokenBuilder.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', 'interface ITokenBuilder {\n', '    function isTokenBuilder() external pure returns(bool);\n', '    function buildTokens(IDerivativeSpecification derivative, uint settlement, address _collateralToken) external returns(IERC20MintedBurnable, IERC20MintedBurnable);\n', '}\n', '\n', '// File: contracts/IFeeLogger.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IFeeLogger {\n', '    function log(address _liquidityProvider, address _collateral, uint _protocolFee, address _author) external;\n', '}\n', '\n', '// File: contracts/IPausableVault.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IPausableVault {\n', '    function pause() external;\n', '    function unpause() external;\n', '}\n', '\n', '// File: contracts/IVaultBuilder.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', 'interface IVaultBuilder {\n', '    function buildVault(\n', '        uint _initializationTime,\n', '        uint _protocolFee,\n', '        address _feeWallet,\n', '        address _derivativeSpecification,\n', '        address _collateralToken,\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        address _collateralSplit,\n', '        address _tokenBuilder,\n', '        address _feeLogger,\n', '        uint _authorFeeLimit,\n', '        uint _settlementDelay\n', '    ) external returns(address);\n', '}\n', '\n', '// File: contracts/VaultFactory.sol\n', '\n', '// "SPDX-License-Identifier: GNU General Public License v3.0"\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Vault Factory implementation contract\n', '/// @notice Creates new vaults and registers them in internal storage\n', 'contract VaultFactory is OwnableUpgradeSafe {\n', '    address[] internal _vaults;\n', '\n', '    IAddressRegistry public derivativeSpecificationRegistry;\n', '    IAddressRegistry public oracleRegistry;\n', '    IAddressRegistry public collateralTokenRegistry;\n', '    IAddressRegistry public collateralSplitRegistry;\n', '    address public tokenBuilder;\n', '    address public feeLogger;\n', '\n', '    /// @notice protocol fee multiplied by 10 ^ 12\n', '    uint public protocolFee;\n', '    /// @notice protocol fee receiving wallet\n', '    address public feeWallet;\n', '    /// @notice author above limit fee multiplied by 10 ^ 12\n', '    uint public authorFeeLimit;\n', '\n', '    IVaultBuilder public vaultBuilder;\n', '    IAddressRegistry public oracleIteratorRegistry;\n', '\n', '    /// @notice redeem function can only be called after the end of the Live period + delay\n', '    uint public settlementDelay;\n', '\n', '    event VaultCreated(bytes32 indexed derivativeSymbol, address vault, address specification);\n', '\n', '    /// @notice Initializes vault factory contract storage\n', '    /// @dev Used only once when vault factory is created for the first time\n', '    function initialize(\n', '        address _derivativeSpecificationRegistry,\n', '        address _oracleRegistry,\n', '        address _oracleIteratorRegistry,\n', '        address _collateralTokenRegistry,\n', '        address _collateralSplitRegistry,\n', '        address _tokenBuilder,\n', '        address _feeLogger,\n', '        uint _protocolFee,\n', '        address _feeWallet,\n', '        uint _authorFeeLimit,\n', '        address _vaultBuilder,\n', '        uint _settlementDelay\n', '    ) external initializer {\n', '\n', '        __Ownable_init();\n', '\n', '        setDerivativeSpecificationRegistry(_derivativeSpecificationRegistry);\n', '        setOracleRegistry(_oracleRegistry);\n', '        setOracleIteratorRegistry(_oracleIteratorRegistry);\n', '        setCollateralTokenRegistry(_collateralTokenRegistry);\n', '        setCollateralSplitRegistry(_collateralSplitRegistry);\n', '\n', '        setTokenBuilder(_tokenBuilder);\n', '        setFeeLogger(_feeLogger);\n', '        setVaultBuilder(_vaultBuilder);\n', '\n', '        setSettlementDelay(_settlementDelay);\n', '\n', '        protocolFee = _protocolFee;\n', '        authorFeeLimit = _authorFeeLimit;\n', '\n', '        require(_feeWallet != address(0), "Fee wallet");\n', '        feeWallet = _feeWallet;\n', '    }\n', '\n', '    /// @notice Creates a new vault based on derivative specification symbol and initialization timestamp\n', '    /// @dev Initialization timestamp allows to target a specific start time for Live period\n', '    /// @param _derivativeSymbolHash a symbol hash which resolves to the derivative specification\n', '    /// @param _initializationTime vault initialization timestamp\n', '    function createVault(bytes32 _derivativeSymbolHash, uint _initializationTime) external {\n', '        IDerivativeSpecification derivativeSpecification = IDerivativeSpecification(\n', '            derivativeSpecificationRegistry.get(_derivativeSymbolHash));\n', '        require(address(derivativeSpecification) != address(0), "Specification is absent");\n', '\n', '        address collateralToken = collateralTokenRegistry.get(derivativeSpecification.collateralTokenSymbol());\n', '        address collateralSplit = collateralSplitRegistry.get(derivativeSpecification.collateralSplitSymbol());\n', '\n', '        bytes32[] memory oracleSymbols = derivativeSpecification.oracleSymbols();\n', '        bytes32[] memory oracleIteratorSymbols = derivativeSpecification.oracleIteratorSymbols();\n', '        require(oracleSymbols.length == oracleIteratorSymbols.length, "Oracles and iterators length");\n', '\n', '        address[] memory oracles = new address[](oracleSymbols.length);\n', '        address[] memory oracleIterators = new address[](oracleIteratorSymbols.length);\n', '        for(uint i = 0; i < oracleSymbols.length; i++) {\n', '            address oracle = oracleRegistry.get(oracleSymbols[i]);\n', '            require(address(oracle) != address(0), "Oracle is absent");\n', '            oracles[i] = oracle;\n', '\n', '            address oracleIterator = oracleIteratorRegistry.get(oracleIteratorSymbols[i]);\n', '            require(address(oracleIterator) != address(0), "OracleIterator is absent");\n', '            oracleIterators[i] = oracleIterator;\n', '        }\n', '\n', '        require(_initializationTime > 0, "Zero initialization time");\n', '\n', '        address vault = vaultBuilder.buildVault(\n', '            _initializationTime,\n', '            protocolFee,\n', '            feeWallet,\n', '            address(derivativeSpecification),\n', '            collateralToken,\n', '            oracles,\n', '            oracleIterators,\n', '            collateralSplit,\n', '            tokenBuilder,\n', '            feeLogger,\n', '            authorFeeLimit,\n', '            settlementDelay\n', '        );\n', '        emit VaultCreated(_derivativeSymbolHash, vault, address(derivativeSpecification));\n', '        _vaults.push(vault);\n', '    }\n', '\n', '    function setProtocolFee(uint _protocolFee) external onlyOwner {\n', '        protocolFee = _protocolFee;\n', '    }\n', '\n', '    function setAuthorFeeLimit(uint _authorFeeLimit) external onlyOwner {\n', '        authorFeeLimit = _authorFeeLimit;\n', '    }\n', '\n', '    function setTokenBuilder(address _tokenBuilder) public onlyOwner {\n', '        require(_tokenBuilder != address(0), "Token builder");\n', '        tokenBuilder = _tokenBuilder;\n', '    }\n', '\n', '    function setFeeLogger(address _feeLogger) public onlyOwner {\n', '        require(_feeLogger != address(0), "Fee logger");\n', '        feeLogger = _feeLogger;\n', '    }\n', '\n', '    function setVaultBuilder(address _vaultBuilder) public onlyOwner {\n', '        require(_vaultBuilder != address(0), "Vault builder");\n', '        vaultBuilder = IVaultBuilder(_vaultBuilder);\n', '    }\n', '\n', '    function setSettlementDelay(uint _settlementDelay) public onlyOwner {\n', '        settlementDelay = _settlementDelay;\n', '    }\n', '\n', '    function setDerivativeSpecificationRegistry(address _derivativeSpecificationRegistry) public onlyOwner {\n', '        require(_derivativeSpecificationRegistry != address(0), "Derivative specification registry");\n', '        derivativeSpecificationRegistry = IAddressRegistry(_derivativeSpecificationRegistry);\n', '    }\n', '\n', '    function setOracleRegistry(address _oracleRegistry) public onlyOwner {\n', '        require(_oracleRegistry != address(0), "Oracle registry");\n', '        oracleRegistry = IAddressRegistry(_oracleRegistry);\n', '    }\n', '\n', '    function setOracleIteratorRegistry(address _oracleIteratorRegistry) public onlyOwner {\n', '        require(_oracleIteratorRegistry != address(0), "Oracle iterator registry");\n', '        oracleIteratorRegistry = IAddressRegistry(_oracleIteratorRegistry);\n', '    }\n', '\n', '    function setCollateralTokenRegistry(address _collateralTokenRegistry) public onlyOwner {\n', '        require(_collateralTokenRegistry != address(0), "Collateral token registry");\n', '        collateralTokenRegistry = IAddressRegistry(_collateralTokenRegistry);\n', '    }\n', '\n', '    function setCollateralSplitRegistry(address _collateralSplitRegistry) public onlyOwner {\n', '        require(_collateralSplitRegistry != address(0), "Collateral split registry");\n', '        collateralSplitRegistry = IAddressRegistry(_collateralSplitRegistry);\n', '    }\n', '\n', '    function pauseVault(address _vault) public onlyOwner {\n', '        IPausableVault(_vault).pause();\n', '    }\n', '\n', '    function unpauseVault(address _vault) public onlyOwner {\n', '        IPausableVault(_vault).unpause();\n', '    }\n', '\n', '    function setDerivativeSpecification(bytes32 _key, address _value) external {\n', '        derivativeSpecificationRegistry.set(_key, _value);\n', '    }\n', '\n', '    function setOracle(bytes32 _key, address _value) external {\n', '        oracleRegistry.set(_key, _value);\n', '    }\n', '\n', '    function setOracleIterator(bytes32 _key, address _value) external {\n', '        oracleIteratorRegistry.set(_key, _value);\n', '    }\n', '\n', '    function setCollateralToken(bytes32 _key, address _value) external {\n', '        collateralTokenRegistry.set(_key, _value);\n', '    }\n', '\n', '    function setCollateralSplit(bytes32 _key, address _value) external {\n', '        collateralSplitRegistry.set(_key, _value);\n', '    }\n', '\n', '    /// @notice Returns vault based on internal index\n', '    /// @param _index internal vault index\n', '    /// @return vault address\n', '    function getVault(uint _index) external view returns(address) {\n', '        return _vaults[_index];\n', '    }\n', '\n', '    /// @notice Get last created vault index\n', '    /// @return last created vault index\n', '    function getLastVaultIndex() external view returns(uint) {\n', '        return _vaults.length - 1;\n', '    }\n', '\n', '    /// @notice Get all previously created vaults\n', '    /// @return all previously created vaults\n', '    function getAllVaults() external view returns(address[] memory) {\n', '        return _vaults;\n', '    }\n', '\n', '    uint256[47] private __gap;\n', '}']