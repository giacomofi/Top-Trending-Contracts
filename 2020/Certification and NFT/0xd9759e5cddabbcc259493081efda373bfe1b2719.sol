['pragma solidity 0.6.4;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract MiningReward is Initializable {\n', '    using SafeMath for uint256;\n', '\n', '    using SafeERC20 for IERC20;\n', '\n', '    bool internal _notEntered;\n', '\n', '    /// @notice 奖励代币地址\n', '    address public rewardToken;\n', '\n', '    /// @notice 管理员地址\n', '    address public admin;\n', '\n', '    /// @notice 预备管理员地址\n', '    address public proposedAdmin;\n', '\n', '    /// @notice 奖励设置时间\n', '    uint256 public datetime;\n', '\n', '    /// @notice 用户奖励信息\n', '    /// @param amount 用户可提取的奖励数量\n', '    struct Balance {\n', '        uint256 amount;\n', '    }\n', '\n', '    /// @notice 提币管理员地址\n', '    address public coinAdmin;\n', '\n', '    /// @notice 预备提币管理员地址\n', '    address public proposedCoinAdmin;\n', '\n', '    /// @notice 用户地址 => 用户奖励余额信息\n', '    mapping(address => Balance) public userBalance;\n', '\n', '    /// @notice 事件：设置预备管理员\n', '    /// @param admin 管理员地址\n', '    /// @param proposedAdmin 预备管理员地址\n', '    event ProposeAdmin(address admin, address proposedAdmin);\n', '\n', '    /// @notice 事件：Claim Admin\n', '    /// @param oldAdmin 旧管理员地址\n', '    /// @param newAdmin 新管理员地址\n', '    event ClaimAdmin(address oldAdmin, address newAdmin);\n', '\n', '    /// @notice 事件：管理员取出奖励代币（指定数量）\n', '    /// @param amount 数量\n', '    event WithdrawRewardWithAmount(uint256 amount);\n', '\n', '    /// @notice 事件：管理员取出奖励代币（全部取出）\n', '    /// @param amount 数量\n', '    event WithdrawReward(uint256 amount);\n', '\n', '    /// @notice 事件：管理员取出奖励代币（指定接收地址，全部取出）\n', '    /// @param addr 接收地址\n', '    /// @param amount 数量\n', '    event WithdrawRewardToAddress(address addr, uint256 amount);\n', '\n', '    /// @notice 事件：管理员取出奖励代币（指定接收地址，指定数量）\n', '    /// @param addr 接收地址\n', '    /// @param amount 数量\n', '    event WithdrawRewardToAddressWithAmount(address addr, uint256 amount);\n', '\n', '    /// @notice 事件：用户取出奖励\n', '    /// @param addr 用户地址\n', '    /// @param amount 数量\n', '    event ClaimReward(address addr, uint256 amount);\n', '\n', '    /// @notice 事件：设置奖励代币\n', '    /// @param oldToken 老地址\n', '    /// @param newToken 新地址\n', '    event SetRewardToken(address oldToken, address newToken);\n', '\n', '    /// @notice 事件：批量设置用户奖励\n', '    /// @param accounts 用户地址数组\n', '    /// @param amounts 奖励数量数组\n', '    /// @param datetime 时间戳\n', '    event BatchSet(address[] accounts, uint256[] amounts, uint256 datetime);\n', '\n', '    /// @notice 事件：单独设置用户的奖励数量（修正情况下使用）\n', '    /// @param account 用户地址\n', '    /// @param amount 奖励数量\n', '    event Set(address account, uint256 amount);\n', '\n', '    /// @notice 初始化函数\n', '    /// @param _admin 管理员地址\n', '    /// @param _rewardToken 奖励代币地址\n', '    function initialize(address _admin, address _coinAdmin, address _rewardToken)\n', '        public\n', '        initializer\n', '    {\n', '        admin = _admin;\n', '        coinAdmin = _coinAdmin;\n', '        rewardToken = _rewardToken;\n', '        _notEntered = true;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "Admin required");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCoinAdmin {\n', '        require(msg.sender == coinAdmin, "CoinAdmin required");\n', '        _;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_notEntered, "re-entered");\n', '        _notEntered = false;\n', '        _;\n', '        _notEntered = true;\n', '    }\n', '\n', '    /// @notice 设置奖励代币地址\n', '    /// @param _rewardToken 奖励代币地址\n', '    function setRewardToken(address _rewardToken) public onlyCoinAdmin {\n', '        address oldToken = rewardToken;\n', '        rewardToken = _rewardToken;\n', '\n', '        emit SetRewardToken(oldToken, rewardToken);\n', '    }\n', '\n', '    /// @notice 设置预备管理员地址\n', '    /// @param _proposedAdmin 预备管理员地址\n', '    function proposeAdmin(address _proposedAdmin) public onlyAdmin {\n', '        require(_proposedAdmin != address(0));\n', '        proposedAdmin = _proposedAdmin;\n', '\n', '        emit ProposeAdmin(admin, _proposedAdmin);\n', '    }\n', '\n', '    /// @notice 预备管理员 claim 权限\n', '    function claimAdmin() public {\n', '        require(msg.sender == proposedAdmin, "ProposedAdmin required");\n', '        address oldAdmin = admin;\n', '        admin = proposedAdmin;\n', '        proposedAdmin = address(0);\n', '\n', '        emit ClaimAdmin(oldAdmin, admin);\n', '    }\n', '\n', '    /// @notice 设置预备管理员地址\n', '    /// @param _proposedCoinAdmin 预备管理员地址\n', '    function proposeCoinAdmin(address _proposedCoinAdmin) public onlyCoinAdmin {\n', '        require(_proposedCoinAdmin != address(0));\n', '        proposedCoinAdmin = _proposedCoinAdmin;\n', '\n', '        // emit ProposeAdmin(admin, _proposedCoinAdmin);\n', '    }\n', '\n', '    /// @notice 预备管理员 claim 权限\n', '    function claimCoinAdmin() public {\n', '        require(msg.sender == proposedCoinAdmin, "proposedCoinAdmin required");\n', '        // address oldCoinAdmin = coinAdmin;\n', '        coinAdmin = proposedCoinAdmin;\n', '        proposedCoinAdmin = address(0);\n', '\n', '        // emit ClaimAdmin(oldAdmin, admin);\n', '    }\n', '\n', '    /// @notice 管理员取出奖励代币的数量（可指定数量）\n', '    /// @param amount 取出数量\n', '    function withdrawRewardWithAmount(uint256 amount) public onlyCoinAdmin {\n', '        require(\n', '            IERC20(rewardToken).balanceOf(address(this)) > 0,\n', '            "No reward left"\n', '        );\n', '        require(amount > 0, "Invalid amount");\n', '        IERC20(rewardToken).safeTransfer(admin, amount);\n', '\n', '        emit WithdrawRewardWithAmount(amount);\n', '    }\n', '\n', '    /// @notice 管理员取出奖励代币的数量（全部取出）\n', '    function withdrawReward() public onlyCoinAdmin {\n', '        require(\n', '            IERC20(rewardToken).balanceOf(address(this)) > 0,\n', '            "No reward left"\n', '        );\n', '        uint256 balance = checkRewardBalance();\n', '        IERC20(rewardToken).safeTransfer(admin, balance);\n', '\n', '        emit WithdrawReward(balance);\n', '    }\n', '\n', '    /// @notice 管理员取出奖励代币的数量（全部取出，指定接收地址）\n', '    /// @param addr 接收代币地址\n', '    function withdrawRewardToAddress(address addr) public onlyCoinAdmin {\n', '        require(\n', '            IERC20(rewardToken).balanceOf(address(this)) > 0,\n', '            "No reward left"\n', '        );\n', '        uint256 balance = checkRewardBalance();\n', '        IERC20(rewardToken).safeTransfer(addr, balance);\n', '\n', '        emit WithdrawRewardToAddress(addr, balance);\n', '    }\n', '\n', '    /// @notice 管理员取出奖励代币的数量（全部取出，指定接收地址，指定数量）\n', '    /// @param addr 接收代币地址\n', '    /// @param amount 取出数量\n', '    function withdrawRewardToAddressWithAmount(address addr, uint256 amount)\n', '        public\n', '        onlyCoinAdmin\n', '    {\n', '        require(\n', '            IERC20(rewardToken).balanceOf(address(this)) > 0,\n', '            "No reward left"\n', '        );\n', '        IERC20(rewardToken).safeTransfer(addr, amount);\n', '\n', '        emit WithdrawRewardToAddressWithAmount(addr, amount);\n', '    }\n', '\n', '    /// @notice 批量设置用户的奖励数量\n', '    /// @param accounts 用户地址数组\n', '    /// @param amount 奖励数量数组\n', '    /// @param _datetime 时间戳\n', '    function batchSet(\n', '        address[] calldata accounts,\n', '        uint256[] calldata amount,\n', '        uint256 _datetime\n', '    ) external onlyAdmin {\n', '        require(_datetime > datetime, "Invalid time");\n', '        uint256 userCount = accounts.length;\n', '        require(userCount == amount.length, "Invalid input");\n', '        for (uint256 i = 0; i < userCount; ++i) {\n', '            userBalance[accounts[i]].amount = userBalance[accounts[i]]\n', '                .amount\n', '                .add(amount[i]);\n', '        }\n', '        datetime = _datetime;\n', '\n', '        emit BatchSet(accounts, amount, _datetime);\n', '    }\n', '\n', '    /// @notice 单独设置用户的奖励数量（修正情况下使用）\n', '    /// @param account 用户地址\n', '    /// @param amount 奖励数量\n', '    function set(address account, uint256 amount) external onlyAdmin {\n', '        userBalance[account].amount = amount;\n', '\n', '        emit Set(account, amount);\n', '    }\n', '\n', '    /// @notice 用户取出自己的挖矿奖励\n', '    function claimReward() public nonReentrant {\n', '        uint256 claimAmount = userBalance[msg.sender].amount;\n', '        require(claimAmount > 0, "No reward");\n', '        require(\n', '            checkRewardBalance() >= claimAmount,\n', '            "Insufficient rewardToken"\n', '        );\n', '        userBalance[msg.sender].amount = 0;\n', '        IERC20(rewardToken).safeTransfer(msg.sender, claimAmount);\n', '\n', '        emit ClaimReward(msg.sender, claimAmount);\n', '    }\n', '\n', '    /// @notice 用户查看自己的可取资产\n', '    function checkBalance(address account) public view returns (uint256) {\n', '        return userBalance[account].amount;\n', '    }\n', '\n', '    /// @notice 查看当前奖励代币余额\n', '    function checkRewardBalance() public view returns (uint256) {\n', '        return IERC20(rewardToken).balanceOf(address(this));\n', '    }\n', '}']