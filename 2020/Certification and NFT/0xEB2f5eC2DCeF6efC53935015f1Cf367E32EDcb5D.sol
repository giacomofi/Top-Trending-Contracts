['pragma solidity 0.7.0;\n', '\n', '// SafeMath library provided by the OpenZeppelin Group on Github\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/* ERC20 Standards followed by OpenZeppelin Group libraries on Github */\n', '\n', 'interface IERC20 {\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function balanceOf(address who) external view returns (uint256);\n', '    \n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/* Staking process is followed according to the ERC900: Simple Staking Interface #900 issue on Github */\n', '\n', 'interface Staking {\n', '    \n', '    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    \n', '    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '\n', '    function stake(uint256 amount, bytes memory data) external returns (bool);\n', '    \n', '    function unstake(uint256 amount, bytes memory data) external returns (bool);\n', '    \n', '    function totalStakedFor(address addr) external view returns (uint256);\n', '    \n', '    function totalStaked() external view returns (uint256);\n', '    \n', '    function supportsHistory() external pure returns (bool);\n', '\n', '}\n', '\n', '/*PARAMORE Protocol being created with the help of the above interfaces for compatibility*/\n', '\n', 'contract PARAMORE is IERC20, Staking {\n', '    \n', '    /* Constant variables created for the ERC20 requirements*/\n', '    \n', '    string public constant name = "PARAMORE";\n', '    string public constant symbol = "PARA";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    //Burn address saved as constant for future burning processes\n', '    address public constant burnaddress = 0x0000000000000000000000000000000000000000;\n', '\n', '    mapping(address => uint256) balances; //PARA balance for all network participants\n', '    \n', '    mapping(address => uint256) stakedbalances; //PARA stake balance to lock stakes\n', '    \n', '    mapping(address => uint) staketimestamps; //PARA stake timestamp to record updates on staking for multipliers, this involves the idea that multipliers will reset upon staking\n', '\n', '    mapping(address => mapping (address => uint256)) allowed; //Approval array to record delegation of thrid-party accounts to handle transaction per allowance\n', '    \n', '    /* Total variables created to record information */\n', '    uint256 totalSupply_;\n', '    uint256 totalstaked = 0;\n', '    address theowner; //Owner address saved to recognise on future processes\n', '    \n', '    using SafeMath for uint256; //Important*** as this library provides security to handle maths without overflow attacks\n', '    \n', '    constructor() public {\n', '        totalSupply_ = 1000000000000000000000000;\n', '        balances[msg.sender] = totalSupply_;\n', '        theowner = msg.sender;\n', '        emit Transfer(msg.sender, msg.sender, totalSupply_);\n', '   } //Constructor stating the total supply as well as saving owner address and sending supply to owner address\n', '   \n', '   //Function to report on totalsupply following ERC20 Standard\n', '   function totalSupply() public override view returns (uint256) {\n', '       return totalSupply_;\n', '   }\n', '   \n', '   //Function to report on account balance following ERC20 Standard\n', '   function balanceOf(address tokenOwner) public override view returns (uint) {\n', '       return balances[tokenOwner];\n', '   }\n', '   \n', '   //Burn process is just a funtion to calculate burn amount depending on an amount of Tokens\n', '   function cutForBurn(uint256 a) public pure returns (uint256) {\n', '       uint256 c = a.div(20);\n', '       return c;\n', '   }\n', '   \n', '   //Straight forward transfer following ERC20 Standard\n', '   function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', "       require(numTokens <= balances[msg.sender], 'Amount exceeds balance.');\n", '       balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '       \n', '       balances[receiver] = balances[receiver].add(numTokens);\n', '       emit Transfer(msg.sender, receiver, numTokens);\n', '       return true;\n', '   }\n', '   \n', '   //Approve function following ERC20 Standard\n', '   function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', "       require(numTokens <= balances[msg.sender], 'Amount exceeds balance.');\n", '       allowed[msg.sender][delegate] = numTokens;\n', '       emit Approval(msg.sender, delegate, numTokens);\n', '       return true;\n', '   }\n', '   \n', '   //Allowance function to verify allowance allowed on delegate address following ERC20 Standard\n', '   function allowance(address owner, address delegate) public override view returns (uint) {\n', '       return allowed[owner][delegate];\n', '   }\n', '   \n', '   //The following function is added to mitigate ERC20 API: An Attack Vector on Approve/TransferFrom Methods\n', '   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', "       require(addedValue <= balances[msg.sender].sub(allowed[msg.sender][spender]), 'Amount exceeds balance.');\n", '       \n', '       allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '       \n', '       emit Approval(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\n', '       return true;\n', '   }\n', '   \n', '   //The following function is added to mitigate ERC20 API: An Attack Vector on Approve/TransferFrom Methods\n', '   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', "       require(subtractedValue <= allowed[msg.sender][spender], 'Amount exceeds balance.');\n", '       \n', '       allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\n', '       \n', '       emit Approval(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\n', '   }\n', '   \n', '   //Transfer For function for allowed accounts to allow tranfers\n', '   function transferFrom(address owner, address buyer, uint numTokens) public override returns (bool) {\n', "       require(numTokens <= balances[owner], 'Amount exceeds balance.');\n", "       require(numTokens <= allowed[owner][msg.sender], 'Amount exceeds allowance.');\n", '       \n', '       balances[owner] = balances[owner].sub(numTokens);\n', '       allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '       balances[buyer] = balances[buyer].add(numTokens);\n', '       return true;\n', '   }\n', '   \n', '   //Staking processes\n', '   \n', '   //Stake process created updating balances, stakebalances and also recording time on process run, the process will burn 5% of the amount\n', '   function stake(uint256 amount, bytes memory data) public override returns (bool) {\n', '       require(amount <= balances[msg.sender]);\n', '       require(amount < 20, "Amount to low to process");\n', '       balances[msg.sender] = balances[msg.sender].sub(amount);\n', '       \n', '       uint256 burned = cutForBurn(amount);\n', '       \n', '       totalSupply_ = totalSupply_.sub(burned);\n', '       \n', '       balances[burnaddress] = balances[burnaddress].add(burned);\n', '       \n', '       stakedbalances[msg.sender] = stakedbalances[msg.sender].add(amount.sub(burned));\n', '       totalstaked = totalstaked.add(amount.sub(burned));\n', '       \n', '       staketimestamps[msg.sender] = block.timestamp;\n', '       \n', '       emit Staked(msg.sender, amount.sub(burned), stakedbalances[msg.sender], data);\n', '       emit Transfer(msg.sender, msg.sender, amount.sub(burned));\n', '       emit Transfer(msg.sender, burnaddress, burned);\n', '       return true;\n', '   }\n', '   \n', '   //This function unstakes locked in amount and burns 5%, this also updates amounts on total supply\n', '   function unstake(uint256 amount, bytes memory data) public override returns (bool) {\n', '       require(amount <= stakedbalances[msg.sender]);\n', '       require(amount <= totalstaked);\n', '       require(amount < 20, "Amount to low to process");\n', '       stakedbalances[msg.sender] = stakedbalances[msg.sender].sub(amount);\n', '       totalstaked = totalstaked.sub(amount);\n', '       \n', '       uint256 burned = cutForBurn(amount);\n', '       \n', '       totalSupply_ = totalSupply_.sub(burned);\n', '       \n', '       balances[burnaddress] = balances[burnaddress].add(burned);\n', '       \n', '       balances[msg.sender] = balances[msg.sender].add(amount.sub(burned));\n', '       \n', '       emit Unstaked(msg.sender, amount.sub(burned), stakedbalances[msg.sender], data);\n', '       emit Transfer(msg.sender, msg.sender, amount.sub(burned));\n', '       emit Transfer(msg.sender, burnaddress, burned);\n', '       return true;\n', '   }\n', '   \n', '   //Function to return total staked on a single address\n', '   function totalStakedFor(address addr) public override view returns (uint256) {\n', '       return stakedbalances[addr];\n', '   }\n', '   \n', '   //Function to shows timestamp on stake processes\n', '   function stakeTimestampFor(address addr) public view returns (uint256) {\n', '       return staketimestamps[addr];\n', '   }\n', '   \n', '   //Function to find out time passed since last timestamp on address\n', '   function stakeTimeFor(address addr) public view returns (uint256) {\n', '       return block.timestamp.sub(staketimestamps[addr]);\n', '   }\n', '   \n', '   //Total staked on all addresses\n', '   function totalStaked() public override view returns (uint256) {\n', '       return totalstaked;\n', '   }\n', '   \n', '   //Support History variable to show support on optional stake details\n', '   function supportsHistory() public override pure returns (bool) {\n', '       return false;\n', '   }\n', '   \n', '}']