['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// \n', '// The MIT License (MIT)\n', '// Copyright (c) 2016-2020 zOS Global Limited\n', '// Permission is hereby granted, free of charge, to any person obtaining\n', '// a copy of this software and associated documentation files (the\n', '// "Software"), to deal in the Software without restriction, including\n', '// without limitation the rights to use, copy, modify, merge, publish,\n', '// distribute, sublicense, and/or sell copies of the Software, and to\n', '// permit persons to whom the Software is furnished to do so, subject to\n', '// the following conditions:\n', '// The above copyright notice and this permission notice shall be included\n', '// in all copies or substantial portions of the Software.\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', '// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', '// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', '// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', '// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', '// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', '// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', 'contract CentaurStakingV1 is Ownable {\n', '\n', '\tusing SafeMath for uint;\n', '\n', '\t// Events\n', '\tevent Deposit(uint256 _timestmap, address indexed _address, uint256 _amount);\n', '\tevent Withdraw(uint256 _timestamp, address indexed _address, uint256 _amount);\n', '\n', '\t// CNTR Token Contract & Funding Address\n', '\tIERC20 public tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);\n', '\taddress public fundingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;\n', '\n', '\t// Current rewardPercentage\n', '\tuint256 public currentRewardPercentage;\n', '\t\n', '\t// Initial & Final Reward Constants (100% => 10000)\n', '\tuint256 constant initialRewardPercentage = 1000; // 10%\n', '\tuint256 constant finalRewardPercetage = 500; // 5%\n', '\n', '\t// Rewards % decrement when TVL hits certain volume (100% => 10000)\n', '\tuint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume\n', '\tuint256 constant percentageDecrementPerCycle = 50; // 0.5%\n', '\n', '\t// Stake Lock Constants\n', '\tuint256 public constant stakeLockDuration = 30 days;\n', '\n', '\t// Stake tracking\n', '\tuint256 public stakeStartTimestamp;\n', '\tuint256 public stakeEndTimestamp;\n', '\n', '\tmapping(address => StakeInfo[]) stakeHolders;\n', '\n', '\tstruct StakeInfo {\n', '\t\tuint256 startTimestamp;\n', '\t\tuint256 amountStaked;\n', '\t\tuint256 rewardPercentage;\n', '\t\tbool withdrawn;\n', '\t}\n', '\n', '\t// Total Value Locked (TVL) Tracking\n', '\tuint256 public totalValueLocked;\n', '\n', '\t/**\n', '     * @dev Constructor\n', '     */\n', '\n', '\tconstructor() public {\n', '\t\tcurrentRewardPercentage = initialRewardPercentage;\n', '\t\tstakeStartTimestamp = block.timestamp + 7 days; // Stake event will start 7 days from deployment\n', '\t\tstakeEndTimestamp = stakeStartTimestamp + 30 days; // Stake event is going to run for 30 days\n', '\t}\n', '\n', '\t/**\n', '     * @dev Contract Modifiers\n', '     */\n', '\n', '\tfunction updateFundingAddress(address _address) public onlyOwner {\n', '\t\trequire(block.timestamp < stakeStartTimestamp);\n', '\n', '\t\tfundingAddress = _address;\n', '\t}\n', '\n', '\tfunction changeStartTimestamp(uint256 _timestamp) public onlyOwner {\n', '\t\trequire(block.timestamp < stakeStartTimestamp);\n', '\n', '\t\tstakeStartTimestamp = _timestamp;\n', '\t}\n', '\n', '\tfunction changeEndTimestamp(uint256 _timestamp) public onlyOwner {\n', '\t\trequire(block.timestamp < stakeEndTimestamp);\n', '\t\trequire(_timestamp > stakeStartTimestamp);\n', '\n', '\t\tstakeEndTimestamp = _timestamp;\n', '\t}\n', '\n', '\t/**\n', '     * @dev Stake functions\n', '     */\n', '\n', '    function deposit(uint256 _amount) public {\n', '    \trequire(block.timestamp > stakeStartTimestamp && block.timestamp < stakeEndTimestamp, "Contract is not accepting deposits at the moment");\n', '    \trequire(_amount > 0, "Amount has to be more than 0");\n', '    \trequire(stakeHolders[msg.sender].length < 1000, "Prevent Denial of Service");\n', '\n', '    \t// Transfers amount to contract\n', '    \trequire(tokenContract.transferFrom(msg.sender, address(this), _amount));\n', '\t\temit Deposit(block.timestamp, msg.sender, _amount);\n', '\n', '    \tuint256 stakeAmount = _amount;\n', '\t\tuint256 stakeRewards = 0;\n', '\n', '    \t// Check if deposit exceeds rewardDecrementCycle\n', '\t\twhile(stakeAmount >= amountToNextDecrement()) {\n', '\n', '\t\t\t// Variable cache\n', '\t\t\tuint256 amountToNextDecrement = amountToNextDecrement();\n', '\n', '\t\t\t// Add new stake\n', '\t    \tStakeInfo memory newStake;\n', '\t    \tnewStake.startTimestamp = block.timestamp;\n', '\t    \tnewStake.amountStaked = amountToNextDecrement;\n', '\t    \tnewStake.rewardPercentage = currentRewardPercentage;\n', '\n', '\t    \tstakeHolders[msg.sender].push(newStake);\n', '\n', '\t    \tstakeAmount = stakeAmount.sub(amountToNextDecrement);\n', '\t    \tstakeRewards = stakeRewards.add(amountToNextDecrement.mul(currentRewardPercentage).div(10000));\n', '\n', '\t\t\ttotalValueLocked = totalValueLocked.add(amountToNextDecrement);\n', '\n', '\t    \t// Reduce reward percentage if not at final\n', '    \t\tif (currentRewardPercentage > finalRewardPercetage) {\n', '    \t\t\tcurrentRewardPercentage = currentRewardPercentage.sub(percentageDecrementPerCycle);\n', '    \t\t}\n', '\t\t}\n', '\n', '\t\t// Deposit leftover stake\n', '\t\tif (stakeAmount > 0) {\n', '\t\t\t// Add new stake\n', '\t    \tStakeInfo memory newStake;\n', '\t    \tnewStake.startTimestamp = block.timestamp;\n', '\t    \tnewStake.amountStaked = stakeAmount;\n', '\t    \tnewStake.rewardPercentage = currentRewardPercentage;\n', '\n', '\t    \tstakeHolders[msg.sender].push(newStake);\n', '\n', '\t    \tstakeRewards = stakeRewards.add(stakeAmount.mul(currentRewardPercentage).div(10000));\n', '\n', '\t    \ttotalValueLocked = totalValueLocked.add(stakeAmount);\n', '\t\t}\n', '\n', '\t\t// Transfer stake rewards from funding address to contract\n', '    \trequire(tokenContract.transferFrom(fundingAddress, address(this), stakeRewards));\n', '\n', '    \t// Transfer total from contract to msg.sender\n', '    \trequire(tokenContract.transfer(msg.sender, stakeRewards));\n', '\n', '    }\n', '\n', '    function withdraw() public {\n', '    \t_withdraw(msg.sender);\n', '    }\n', '\n', '    function withdrawAddress(address _address) public onlyOwner {\n', '    \t_withdraw(_address);\n', '    }\n', '\n', '    function _withdraw(address _address) internal {\n', '    \tuint256 withdrawAmount = 0;\n', '\n', '    \tfor(uint256 i = 0; i < stakeHolders[_address].length; i++) {\n', '    \t\tStakeInfo storage stake = stakeHolders[_address][i];\n', '    \t\tif (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {\n', '\t    \t\twithdrawAmount = withdrawAmount.add(stake.amountStaked);\n', '\t    \t\tstake.withdrawn = true;\n', '    \t\t}\n', '    \t}\n', '\n', '    \trequire(withdrawAmount > 0, "No funds available for withdrawal");\n', '\n', '    \ttotalValueLocked = totalValueLocked.sub(withdrawAmount);\n', '\n', '    \trequire(tokenContract.transfer(_address, withdrawAmount));\n', '    \temit Withdraw(block.timestamp, _address, withdrawAmount);\n', '    }\n', '\n', '    function amountToNextDecrement() public view returns (uint256) {\n', '    \treturn rewardDecrementCycle.sub(totalValueLocked.mod(rewardDecrementCycle));\n', '    }\n', '\n', '    function amountAvailableForWithdrawal(address _address) public view returns (uint256) {\n', '    \tuint256 withdrawAmount = 0;\n', '\n', '    \tfor(uint256 i = 0; i < stakeHolders[_address].length; i++) {\n', '    \t\tStakeInfo storage stake = stakeHolders[_address][i];\n', '    \t\tif (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {\n', '\t    \t\twithdrawAmount = withdrawAmount.add(stake.amountStaked);\n', '    \t\t}\n', '    \t}\n', '\n', '    \treturn withdrawAmount;\n', '    }\n', '\n', '    function getStakes(address _address) public view returns(StakeInfo[] memory) {\n', '    \tStakeInfo[] memory stakes = new StakeInfo[](stakeHolders[_address].length);\n', '\n', '    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\n', '    \t\tStakeInfo storage stake = stakeHolders[_address][i];\n', '    \t\tstakes[i] = stake;\n', '    \t}\n', '\n', '    \treturn stakes;\n', '    }\n', '}']