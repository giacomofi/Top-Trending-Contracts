['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-21\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// https://docs.synthetix.io/contracts/SafeDecimalMath\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    /* Number of decimal places in the representations. */\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    /* The number representing 1.0. */\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    /* The number representing 1.0 for higher fidelity numbers. */\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    /**\n', '     * @return Provides an interface to UNIT.\n', '     */\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return Provides an interface to PRECISE_UNIT.\n', '     */\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n', '     * decimals.\n', '     *\n', '     * @dev A unit factor is divided out after the product of x and y is evaluated,\n', '     * so that product must be less than 2**256. As this is an integer division,\n', '     * the internal division always rounds down. This helps save on gas. Rounding\n', '     * is more expensive on gas.\n', '     */\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of the specified precision unit.\n', '     *\n', '     * @dev The operands should be in the form of a the specified unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a precise unit.\n', '     *\n', '     * @dev The operands should be in the precise unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a standard unit.\n', '     *\n', '     * @dev The operands should be in the standard unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is a high\n', '     * precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n', '     * this is an integer division, the result is always rounded down.\n', '     * This helps save on gas. Rounding is more expensive on gas.\n', '     */\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Reintroduce the UNIT factor that will be divided out by y. */\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * decimal in the precision unit specified in the parameter.\n', '     *\n', '     * @dev y is divided after the product of x and the specified precision unit\n', '     * is evaluated, so the product of x and the specified precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * standard precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and the standard precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * high precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the high precision unit\n', '     * is evaluated, so the product of x and the high precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a standard decimal representation to a high precision one.\n', '     */\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a high precision decimal to a standard decimal representation.\n', '     */\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function mint(address account, uint256 amount) public returns (bool);\n', '\n', '    function burn(uint256 amount) public returns (bool);\n', '}\n', '\n', '\n', 'contract ELLA_Presale is Ownable {\n', '    address private ELLACoinddress;\n', '    uint256 private price;\n', '    address private messenger;\n', '\n', '    using SafeMath for uint256;\n', 'using SafeDecimalMath for uint;\n', '    constructor(address _ELLACoinddress, uint256 _initialPrice) public {\n', '        ELLACoinddress = _ELLACoinddress;\n', '        price = _initialPrice;\n', '        emit Deployed(_initialPrice, _ELLACoinddress);\n', '    }\n', '\n', '    event bought(address _buyer, uint256 _paid, uint256 _given, uint _price);\n', '    event priceChanged(address initiator, uint256 _from, uint256 _to);\n', '    event messengerChanged(address _from, address _to);\n', '    event Deployed(uint256 _initialPrice, address _ELLACoinddress);\n', '    modifier onlyMessenger() {\n', '        require(msg.sender == messenger, "caller is not a messenger");\n', '        _;\n', '    }\n', '\n', '    function updatePrice(uint256 _price) public onlyMessenger {\n', '        uint256 currentprice = price;\n', '        price = _price;\n', '        emit priceChanged(msg.sender, currentprice, _price);\n', '    }\n', '\n', '    function setMessenger(address _messenger) public onlyOwner {\n', '        address currentMessenger = messenger;\n', '        messenger = _messenger;\n', '        emit messengerChanged(currentMessenger, _messenger);\n', '    }\n', '\n', '    function setELLACoin(address _ELLACoinddress) public onlyOwner {\n', '        ELLACoinddress = _ELLACoinddress;\n', '    }\n', '\n', '    function getPrice() public view returns (uint256 _price) {\n', '        return price;\n', '    }\n', '\n', '    function buyer() public payable {\n', '        require(msg.value > 0, "Invalid amount");\n', '        uint256 amount = msg.value; //.mul(10**18);\n', '        IERC20 ELLACoin = IERC20(ELLACoinddress);\n', '        uint256 amountToSend = amount.divideDecimal(price).multiplyDecimal(10**18);\n', '        require(\n', '            ELLACoin.transfer(msg.sender, amountToSend),\n', '            "Fail to send fund"\n', '        );\n', '        emit bought(msg.sender, msg.value, amountToSend, price);\n', '    }\n', '\n', '    function withdrawAllEtherByOwner() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function getContractEtherBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '}']