['interface PermittedAddressesInterface {\n', '  function permittedAddresses(address _address) external view returns(bool);\n', '  function addressesTypes(address _address) external view returns(string memory);\n', '  function isMatchTypes(address _address, uint256 addressType) external view returns(bool);\n', '}\n', 'interface SmartFundERC20LightFactoryInterface {\n', '  function createSmartFundLight(\n', '    address _owner,\n', '    string memory _name,\n', '    uint256 _successFee,\n', '    address _exchangePortalAddress,\n', '    address _permittedAddresses,\n', '    address _coinAddress,\n', '    address _fundValueOracle,\n', '    bool    _isRequireTradeVerification,\n', '    address _cotraderGlobalConfig\n', '  )\n', '  external\n', '  returns(address);\n', '}\n', 'interface SmartFundETHLightFactoryInterface {\n', '  function createSmartFundLight(\n', '    address _owner,\n', '    string  memory _name,\n', '    uint256 _successFee,\n', '    address _exchangePortalAddress,\n', '    address _permittedAddresses,\n', '    address _fundValueOracle,\n', '    bool    _isRequireTradeVerification,\n', '    address _cotraderGlobalConfig\n', '  )\n', '  external\n', '  returns(address);\n', '}\n', 'interface SmartFundERC20FactoryInterface {\n', '  function createSmartFund(\n', '    address _owner,\n', '    string memory _name,\n', '    uint256 _successFee,\n', '    address _exchangePortalAddress,\n', '    address _poolPortalAddress,\n', '    address _defiPortal,\n', '    address _permittedAddresses,\n', '    address _coinAddress,\n', '    address _fundValueOracle,\n', '    bool    _isRequireTradeVerification,\n', '    address _cotraderGlobalConfig\n', '  )\n', '  external\n', '  returns(address);\n', '}\n', 'interface SmartFundETHFactoryInterface {\n', '  function createSmartFund(\n', '    address _owner,\n', '    string  memory _name,\n', '    uint256 _successFee,\n', '    address _exchangePortalAddress,\n', '    address _poolPortalAddress,\n', '    address _defiPortal,\n', '    address _permittedAddresses,\n', '    address _fundValueOracle,\n', '    bool    _isRequireTradeVerification,\n', '    address _cotraderGlobalConfig\n', '  )\n', '  external\n', '  returns(address);\n', '}\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/*\n', '* The SmartFundRegistry is used to manage the creation and permissions of SmartFund contracts\n', '*/\n', 'contract SmartFundRegistry is Ownable {\n', '  address[] public smartFunds;\n', '\n', '  // The Smart Contract which stores the addresses of all the authorized address\n', '  PermittedAddressesInterface public permittedAddresses;\n', '\n', '  // Addresses of portals\n', '  address public poolPortalAddress;\n', '  address public exchangePortalAddress;\n', '  address public defiPortalAddress;\n', '\n', '  // Default maximum success fee is 3000/30%\n', '  uint256 public maximumSuccessFee = 3000;\n', '\n', '  // Address of stable coin can be set in constructor and changed via function\n', '  address public stableCoinAddress;\n', '\n', '  // Address of CoTrader coin be set in constructor\n', '  address public COTCoinAddress;\n', '\n', '  // Address of Oracle\n', '  address public oracleAddress;\n', '\n', '  // Address of Cotrader global config\n', '  address public cotraderGlobalConfig;\n', '\n', '  // Factories\n', '  SmartFundETHFactoryInterface public smartFundETHFactory;\n', '  SmartFundERC20FactoryInterface public smartFundERC20Factory;\n', '  SmartFundETHLightFactoryInterface public smartFundETHLightFactory;\n', '  SmartFundERC20LightFactoryInterface public smartFundERC20LightFactory;\n', '\n', '  // Enum for detect fund type in create fund function\n', '  // NOTE: You can add a new type at the end, but do not change this order\n', '  enum FundType { ETH, USD, COT }\n', '\n', '  event SmartFundAdded(address indexed smartFundAddress, address indexed owner);\n', '\n', '  /**\n', '  * @dev contructor\n', '  *\n', '  * @param _exchangePortalAddress        Address of the initial ExchangePortal contract\n', '  * @param _poolPortalAddress            Address of the initial PoolPortal contract\n', '  * @param _stableCoinAddress            Address of the stable coin\n', '  * @param _COTCoinAddress               Address of Cotrader coin\n', '  * @param _smartFundETHFactory          Address of smartFund ETH factory\n', '  * @param _smartFundERC20Factory        Address of smartFund USD factory\n', '  * @param _smartFundETHLightFactory     Address of smartFund ETH factory\n', '  * @param _smartFundERC20LightFactory   Address of smartFund USD factory\n', '  * @param _defiPortalAddress            Address of defiPortal contract\n', '  * @param _permittedAddresses           Address of permittedAddresses contract\n', '  * @param _oracleAddress                Address of fund value oracle contract\n', '  * @param _cotraderGlobalConfig         Address of CoTraderGlobalConfig contract\n', '  */\n', '  constructor(\n', '    address _exchangePortalAddress,\n', '    address _poolPortalAddress,\n', '    address _stableCoinAddress,\n', '    address _COTCoinAddress,\n', '    address _smartFundETHFactory,\n', '    address _smartFundERC20Factory,\n', '    address _smartFundETHLightFactory,\n', '    address _smartFundERC20LightFactory,\n', '    address _defiPortalAddress,\n', '    address _permittedAddresses,\n', '    address _oracleAddress,\n', '    address _cotraderGlobalConfig\n', '  ) public {\n', '    exchangePortalAddress = _exchangePortalAddress;\n', '    poolPortalAddress = _poolPortalAddress;\n', '    stableCoinAddress = _stableCoinAddress;\n', '    COTCoinAddress = _COTCoinAddress;\n', '    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\n', '    smartFundERC20Factory = SmartFundERC20FactoryInterface(_smartFundERC20Factory);\n', '    smartFundETHLightFactory = SmartFundETHLightFactoryInterface(_smartFundETHLightFactory);\n', '    smartFundERC20LightFactory = SmartFundERC20LightFactoryInterface(_smartFundERC20LightFactory);\n', '    defiPortalAddress = _defiPortalAddress;\n', '    permittedAddresses = PermittedAddressesInterface(_permittedAddresses);\n', '    oracleAddress = _oracleAddress;\n', '    cotraderGlobalConfig = _cotraderGlobalConfig;\n', '  }\n', '\n', '  /**\n', '  * @dev Creates a new Full SmartFund\n', '  *\n', '  * @param _name                        The name of the new fund\n', '  * @param _successFee                  The fund managers success fee\n', '  * @param _fundType                    Fund type enum number\n', '  * @param _isRequireTradeVerification  If true fund can buy only tokens,\n', '  *                                     which include in Merkle Three white list\n', '  */\n', '  function createSmartFund(\n', '    string memory _name,\n', '    uint256       _successFee,\n', '    uint256       _fundType,\n', '    bool          _isRequireTradeVerification\n', '  ) public {\n', '    // Require that the funds success fee be less than the maximum allowed amount\n', '    require(_successFee <= maximumSuccessFee);\n', '\n', '    address smartFund;\n', '\n', '    // ETH case\n', '    if(_fundType == uint256(FundType.ETH)){\n', '      // Create ETH Fund\n', '      smartFund = smartFundETHFactory.createSmartFund(\n', '        msg.sender,\n', '        _name,\n', '        _successFee, // manager and platform fee\n', '        exchangePortalAddress,\n', '        poolPortalAddress,\n', '        defiPortalAddress,\n', '        address(permittedAddresses),\n', '        oracleAddress,\n', '        _isRequireTradeVerification,\n', '        cotraderGlobalConfig\n', '      );\n', '\n', '    }\n', '    // ERC20 case\n', '    else{\n', '      address coinAddress = getERC20AddressByFundType(_fundType);\n', '      // Create ERC20 based fund\n', '      smartFund = smartFundERC20Factory.createSmartFund(\n', '        msg.sender,\n', '        _name,\n', '        _successFee, // manager and platform fee\n', '        exchangePortalAddress,\n', '        poolPortalAddress,\n', '        defiPortalAddress,\n', '        address(permittedAddresses),\n', '        coinAddress,\n', '        oracleAddress,\n', '        _isRequireTradeVerification,\n', '        cotraderGlobalConfig\n', '      );\n', '    }\n', '\n', '    smartFunds.push(smartFund);\n', '    emit SmartFundAdded(smartFund, msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Creates a new Light SmartFund\n', '  *\n', '  * @param _name                        The name of the new fund\n', '  * @param _successFee                  The fund managers success fee\n', '  * @param _fundType                    Fund type enum number\n', '  * @param _isRequireTradeVerification  If true fund can buy only tokens,\n', '  *                                     which include in Merkle Three white list\n', '  */\n', '  function createSmartFundLight(\n', '    string memory _name,\n', '    uint256       _successFee,\n', '    uint256       _fundType,\n', '    bool          _isRequireTradeVerification\n', '  ) public {\n', '    // Require that the funds success fee be less than the maximum allowed amount\n', '    require(_successFee <= maximumSuccessFee);\n', '\n', '    address smartFund;\n', '\n', '    // ETH case\n', '    if(_fundType == uint256(FundType.ETH)){\n', '      // Create ETH Fund\n', '      smartFund = smartFundETHLightFactory.createSmartFundLight(\n', '        msg.sender,\n', '        _name,\n', '        _successFee, // manager and platform fee\n', '        exchangePortalAddress,\n', '        address(permittedAddresses),\n', '        oracleAddress,\n', '        _isRequireTradeVerification,\n', '        cotraderGlobalConfig\n', '      );\n', '\n', '    }\n', '    // ERC20 case\n', '    else{\n', '      address coinAddress = getERC20AddressByFundType(_fundType);\n', '      // Create ERC20 based fund\n', '      smartFund = smartFundERC20LightFactory.createSmartFundLight(\n', '        msg.sender,\n', '        _name,\n', '        _successFee, // manager and platform fee\n', '        exchangePortalAddress,\n', '        address(permittedAddresses),\n', '        coinAddress,\n', '        oracleAddress,\n', '        _isRequireTradeVerification,\n', '        cotraderGlobalConfig\n', '      );\n', '    }\n', '\n', '    smartFunds.push(smartFund);\n', '    emit SmartFundAdded(smartFund, msg.sender);\n', '  }\n', '\n', '\n', '  function getERC20AddressByFundType(uint256 _fundType) private view returns(address coinAddress){\n', '    // Define coin address dependse of fund type\n', '    coinAddress = _fundType == uint256(FundType.USD)\n', '    ? stableCoinAddress\n', '    : COTCoinAddress;\n', '  }\n', '\n', '  function totalSmartFunds() public view returns (uint256) {\n', '    return smartFunds.length;\n', '  }\n', '\n', '  function getAllSmartFundAddresses() public view returns(address[] memory) {\n', '    address[] memory addresses = new address[](smartFunds.length);\n', '\n', '    for (uint i; i < smartFunds.length; i++) {\n', '      addresses[i] = address(smartFunds[i]);\n', '    }\n', '\n', '    return addresses;\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set a new default ExchangePortal address\n', '  *\n', '  * @param _newExchangePortalAddress    Address of the new exchange portal to be set\n', '  */\n', '  function setExchangePortalAddress(address _newExchangePortalAddress) external onlyOwner {\n', '    // Require that the new exchange portal is permitted by permittedAddresses\n', '    require(permittedAddresses.permittedAddresses(_newExchangePortalAddress));\n', '\n', '    exchangePortalAddress = _newExchangePortalAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set a new default Portal Portal address\n', '  *\n', '  * @param _poolPortalAddress    Address of the new pool portal to be set\n', '  */\n', '  function setPoolPortalAddress(address _poolPortalAddress) external onlyOwner {\n', '    // Require that the new pool portal is permitted by permittedAddresses\n', '    require(permittedAddresses.permittedAddresses(_poolPortalAddress));\n', '\n', '    poolPortalAddress = _poolPortalAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the fund manager to connect to a new permitted defi portal\n', '  *\n', '  * @param _newDefiPortalAddress    The address of the new permitted defi portal to use\n', '  */\n', '  function setDefiPortal(address _newDefiPortalAddress) public onlyOwner {\n', '    // Require that the new defi portal is permitted by permittedAddresses\n', '    require(permittedAddresses.permittedAddresses(_newDefiPortalAddress));\n', '\n', '    defiPortalAddress = _newDefiPortalAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set maximum success fee for all newly created SmartFunds\n', '  *\n', '  * @param _maximumSuccessFee    New maximum success fee\n', '  */\n', '  function setMaximumSuccessFee(uint256 _maximumSuccessFee) external onlyOwner {\n', '    maximumSuccessFee = _maximumSuccessFee;\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set new stableCoinAddress\n', '  *\n', '  * @param _stableCoinAddress    New stable address\n', '  */\n', '  function setStableCoinAddress(address _stableCoinAddress) external onlyOwner {\n', '    require(permittedAddresses.permittedAddresses(_stableCoinAddress));\n', '    stableCoinAddress = _stableCoinAddress;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Owner can set new smartFundETHFactory\n', '  *\n', '  * @param _smartFundETHFactory    address of ETH factory contract\n', '  */\n', '  function setNewSmartFundETHFactory(address _smartFundETHFactory) external onlyOwner {\n', '    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Owner can set new smartFundERC20Factory\n', '  *\n', '  * @param _smartFundERC20Factory    address of ERC20 factory contract\n', '  */\n', '  function setNewSmartFundERC20Factory(address _smartFundERC20Factory) external onlyOwner {\n', '    smartFundERC20Factory = SmartFundERC20FactoryInterface(_smartFundERC20Factory);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Owner can set new smartFundETHLightFactory\n', '  *\n', '  * @param _smartFundETHLightFactory    address of ETH factory contract\n', '  */\n', '  function setNewSmartFundETHLightFactory(address _smartFundETHLightFactory) external onlyOwner {\n', '      smartFundETHLightFactory = SmartFundETHLightFactoryInterface(_smartFundETHLightFactory);\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set new smartFundERC20LightFactory\n', '  *\n', '  * @param _smartFundERC20LightFactory    address of ERC20 factory contract\n', '  */\n', '  function setNewSmartFundERC20LightFactory(address _smartFundERC20LightFactory) external onlyOwner {\n', '    smartFundERC20LightFactory = SmartFundERC20LightFactoryInterface(_smartFundERC20LightFactory);\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can set new Oracle\n', '  *\n', '  * @param _oracleAddress    address of Oracle contract\n', '  */\n', '  function setNewOracle(address _oracleAddress) external onlyOwner {\n', '    oracleAddress = _oracleAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows withdarw tokens from this contract if someone will accidentally send tokens here\n', '  *\n', '  * @param _tokenAddress    Address of the token to be withdrawn\n', '  */\n', '  function withdrawTokens(address _tokenAddress) external onlyOwner {\n', '    IERC20 token = IERC20(_tokenAddress);\n', '    token.transfer(owner(), token.balanceOf(address(this)));\n', '  }\n', '\n', '  /**\n', '  * @dev Allows withdarw ETH from this contract if someone will accidentally send tokens here\n', '  */\n', '  function withdrawEther() external onlyOwner {\n', '    payable(owner()).transfer(address(this).balance);\n', '  }\n', '\n', '  // Fallback payable function in order to receive ether when fund manager withdraws their cut\n', '  fallback() external payable {}\n', '\n', '}']