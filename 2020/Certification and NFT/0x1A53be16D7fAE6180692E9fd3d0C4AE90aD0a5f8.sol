['pragma solidity 0.6.12;\n', '\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/*\n', ' * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library ABDKMath64x64 {\n', '  /**\n', '   * @dev Minimum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /**\n', '   * @dev Maximum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromInt (int256 x) internal pure returns (int128) {\n', '    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 64-bit integer number\n', '   * rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64-bit integer number\n', '   */\n', '  function toInt (int128 x) internal pure returns (int64) {\n', '    return int64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n', '   * number rounding down.  Revert on underflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return unsigned 64-bit integer number\n', '   */\n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n', '   * number rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 128.128-bin fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function from128x128 (int256 x) internal pure returns (int128) {\n', '    int256 result = x >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n', '   * number.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 128.128 fixed point number\n', '   */\n', '  function to128x128 (int128 x) internal pure returns (int256) {\n', '    return int256 (x) << 64;\n', '  }\n', '\n', '  /**\n', '   * Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x - y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sub (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) - y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function mul (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) * y >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n', '   * number and y is signed 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 256-bit integer number\n', '   */\n', '  function muli (int128 x, int256 y) internal pure returns (int256) {\n', '    if (x == MIN_64x64) {\n', '      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n', '        y <= 0x1000000000000000000000000000000000000000000000000);\n', '      return -y << 63;\n', '    } else {\n', '      bool negativeResult = false;\n', '      if (x < 0) {\n', '        x = -x;\n', '        negativeResult = true;\n', '      }\n', '      if (y < 0) {\n', '        y = -y; // We rely on overflow behavior here\n', '        negativeResult = !negativeResult;\n', '      }\n', '      uint256 absoluteResult = mulu (x, uint256 (y));\n', '      if (negativeResult) {\n', '        require (absoluteResult <=\n', '          0x8000000000000000000000000000000000000000000000000000000000000000);\n', '        return -int256 (absoluteResult); // We rely on overflow behavior here\n', '      } else {\n', '        require (absoluteResult <=\n', '          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '        return int256 (absoluteResult);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function div (int128 x, int128 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    int256 result = (int256 (x) << 64) / y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divi (int256 x, int256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '\n', '    bool negativeResult = false;\n', '    if (x < 0) {\n', '      x = -x; // We rely on overflow behavior here\n', '      negativeResult = true;\n', '    }\n', '    if (y < 0) {\n', '      y = -y; // We rely on overflow behavior here\n', '      negativeResult = !negativeResult;\n', '    }\n', '    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divu (uint256 x, uint256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    uint128 result = divuu (x, y);\n', '    require (result <= uint128 (MAX_64x64));\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate -x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function neg (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return -x;\n', '  }\n', '\n', '  /**\n', '   * Calculate |x|.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function abs (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return x < 0 ? -x : x;\n', '  }\n', '\n', '  /**\n', '   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function inv (int128 x) internal pure returns (int128) {\n', '    require (x != 0);\n', '    int256 result = int256 (0x100000000000000000000000000000000) / x;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function avg (int128 x, int128 y) internal pure returns (int128) {\n', '    return int128 ((int256 (x) + int256 (y)) >> 1);\n', '  }\n', '\n', '  /**\n', '   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n', '   * Revert on overflow or in case x * y is negative.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function gavg (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 m = int256 (x) * int256 (y);\n', '    require (m >= 0);\n', '    require (m <\n', '        0x4000000000000000000000000000000000000000000000000000000000000000);\n', '    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down.  Revert if x < 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sqrt (int128 x) internal pure returns (int128) {\n', '    require (x >= 0);\n', '    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\n', '  }\n', '\n', '  /**\n', '   * Calculate binary logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function log_2 (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    int256 msb = 0;\n', '    int256 xc = x;\n', '    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '    if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '    if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '    if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '    int256 result = msb - 64 << 64;\n', '    uint256 ux = uint256 (x) << 127 - msb;\n', '    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '      ux *= ux;\n', '      uint256 b = ux >> 255;\n', '      ux >>= 127 + b;\n', '      result += bit * int256 (b);\n', '    }\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function ln (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    return int128 (\n', '        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\n', '  }\n', '\n', '  /**\n', '   * Calculate binary exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp_2 (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    uint256 result = 0x80000000000000000000000000000000;\n', '\n', '    if (x & 0x8000000000000000 > 0)\n', '      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n', '    if (x & 0x4000000000000000 > 0)\n', '      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n', '    if (x & 0x2000000000000000 > 0)\n', '      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n', '    if (x & 0x1000000000000000 > 0)\n', '      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n', '    if (x & 0x800000000000000 > 0)\n', '      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n', '    if (x & 0x400000000000000 > 0)\n', '      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n', '    if (x & 0x200000000000000 > 0)\n', '      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n', '    if (x & 0x100000000000000 > 0)\n', '      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n', '    if (x & 0x80000000000000 > 0)\n', '      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n', '    if (x & 0x40000000000000 > 0)\n', '      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n', '    if (x & 0x20000000000000 > 0)\n', '      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n', '    if (x & 0x10000000000000 > 0)\n', '      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n', '    if (x & 0x8000000000000 > 0)\n', '      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n', '    if (x & 0x4000000000000 > 0)\n', '      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n', '    if (x & 0x2000000000000 > 0)\n', '      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n', '    if (x & 0x1000000000000 > 0)\n', '      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n', '    if (x & 0x800000000000 > 0)\n', '      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n', '    if (x & 0x400000000000 > 0)\n', '      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n', '    if (x & 0x200000000000 > 0)\n', '      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n', '    if (x & 0x100000000000 > 0)\n', '      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n', '    if (x & 0x80000000000 > 0)\n', '      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n', '    if (x & 0x40000000000 > 0)\n', '      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n', '    if (x & 0x20000000000 > 0)\n', '      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n', '    if (x & 0x10000000000 > 0)\n', '      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n', '    if (x & 0x8000000000 > 0)\n', '      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n', '    if (x & 0x4000000000 > 0)\n', '      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n', '    if (x & 0x2000000000 > 0)\n', '      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n', '    if (x & 0x1000000000 > 0)\n', '      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n', '    if (x & 0x800000000 > 0)\n', '      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n', '    if (x & 0x400000000 > 0)\n', '      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n', '    if (x & 0x200000000 > 0)\n', '      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n', '    if (x & 0x100000000 > 0)\n', '      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n', '    if (x & 0x80000000 > 0)\n', '      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n', '    if (x & 0x40000000 > 0)\n', '      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n', '    if (x & 0x20000000 > 0)\n', '      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n', '    if (x & 0x10000000 > 0)\n', '      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n', '    if (x & 0x8000000 > 0)\n', '      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n', '    if (x & 0x4000000 > 0)\n', '      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n', '    if (x & 0x2000000 > 0)\n', '      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n', '    if (x & 0x1000000 > 0)\n', '      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n', '    if (x & 0x800000 > 0)\n', '      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n', '    if (x & 0x400000 > 0)\n', '      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n', '    if (x & 0x200000 > 0)\n', '      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n', '    if (x & 0x100000 > 0)\n', '      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n', '    if (x & 0x80000 > 0)\n', '      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n', '    if (x & 0x40000 > 0)\n', '      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n', '    if (x & 0x20000 > 0)\n', '      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n', '    if (x & 0x10000 > 0)\n', '      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n', '    if (x & 0x8000 > 0)\n', '      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n', '    if (x & 0x4000 > 0)\n', '      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n', '    if (x & 0x2000 > 0)\n', '      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n', '    if (x & 0x1000 > 0)\n', '      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n', '    if (x & 0x800 > 0)\n', '      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n', '    if (x & 0x400 > 0)\n', '      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n', '    if (x & 0x200 > 0)\n', '      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n', '    if (x & 0x100 > 0)\n', '      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n', '    if (x & 0x80 > 0)\n', '      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n', '    if (x & 0x40 > 0)\n', '      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n', '    if (x & 0x20 > 0)\n', '      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n', '    if (x & 0x10 > 0)\n', '      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n', '    if (x & 0x8 > 0)\n', '      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n', '    if (x & 0x4 > 0)\n', '      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n', '    if (x & 0x2 > 0)\n', '      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n', '    if (x & 0x1 > 0)\n', '      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n', '\n', '    result >>= 63 - (x >> 64);\n', '    require (result <= uint256 (MAX_64x64));\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    return exp_2 (\n', '        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 64.64-bit fixed point number\n', '   */\n', '  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\n', '    require (y != 0);\n', '\n', '    uint256 result;\n', '\n', '    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '      result = (x << 64) / y;\n', '    else {\n', '      uint256 msb = 192;\n', '      uint256 xc = x >> 192;\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n', '      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 hi = result * (y >> 128);\n', '      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 xh = x >> 192;\n', '      uint256 xl = x << 64;\n', '\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '      lo = hi << 128;\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '\n', '      assert (xh == hi >> 128);\n', '\n', '      result += xl / y;\n', '    }\n', '\n', '    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= xe;\n', '      else x <<= -xe;\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= re;\n', '      else if (re < 0) result >>= -re;\n', '\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n', '   * number.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return unsigned 128-bit integer number\n', '   */\n', '  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\n', '    if (x == 0) return 0;\n', '    else {\n', '      require (r > 0);\n', '      while (true) {\n', '        uint256 rr = x / r;\n', '        if (r == rr || r + 1 == rr) return uint128 (r);\n', '        else if (r == rr + 1) return uint128 (rr);\n', '        r = r + rr + 1 >> 1;\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '// \n', 'interface INest_3_OfferPrice {\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    /**\n', '    * @dev Update and check the latest price\n', '    * @param tokenAddress Token address\n', '    * @return ethAmount ETH amount\n', '    * @return erc20Amount Erc20 amount\n', '    * @return blockNum Price block\n', '    */\n', '    function updateAndCheckPriceNow(address tokenAddress) external payable returns(uint256 ethAmount, uint256 erc20Amount, uint256 blockNum);\n', '\n', '    /**\n', '    * @dev Update and check the effective price list\n', '    * @param tokenAddress Token address\n', '    * @param num Number of prices to check\n', '    * @return uint256[] price list\n', '    */\n', '    function updateAndCheckPriceList(address tokenAddress, uint256 num) external payable returns (uint256[] memory);\n', '\n', '    // Activate the price checking function\n', '    function activation() external;\n', '\n', '    // Check the minimum ETH cost of obtaining the price\n', '    function checkPriceCostLeast(address tokenAddress) external view returns(uint256);\n', '\n', '    // Check the maximum ETH cost of obtaining the price\n', '    function checkPriceCostMost(address tokenAddress) external view returns(uint256);\n', '\n', '    // Check the cost of a single price data\n', '    function checkPriceCostSingle(address tokenAddress) external view returns(uint256);\n', '\n', '    // Check whether the price-checking functions can be called\n', '    function checkUseNestPrice(address target) external view returns (bool);\n', '\n', '    // Check whether the address is in the blocklist\n', '    function checkBlocklist(address add) external view returns(bool);\n', '\n', '    // Check the amount of NEST to destroy to call prices\n', '    function checkDestructionAmount() external view returns(uint256);\n', '\n', '    // Check the waiting time to start calling prices\n', '    function checkEffectTime() external view returns (uint256);\n', '}\n', '\n', '// \n', 'interface ICoFiXKTable {\n', '    function setK0(uint256 tIdx, uint256 sigmaIdx, int128 k0) external;\n', '    function setK0InBatch(uint256[] memory tIdxs, uint256[] memory sigmaIdxs, int128[] memory k0s) external;\n', '    function getK0(uint256 tIdx, uint256 sigmaIdx) external view returns (int128);\n', '}\n', '\n', '// \n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// \n', 'interface ICoFiXController {\n', '\n', '    event NewK(address token, int128 K, int128 sigma, uint256 T, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum, uint256 tIdx, uint256 sigmaIdx, int128 K0);\n', '    event NewGovernance(address _new);\n', '    event NewOracle(address _priceOracle);\n', '    event NewKTable(address _kTable);\n', '    event NewTimespan(uint256 _timeSpan);\n', '    event NewKRefreshInterval(uint256 _interval);\n', '    event NewKLimit(int128 maxK0);\n', '    event NewGamma(int128 _gamma);\n', '    event NewTheta(address token, uint32 theta);\n', '\n', '    function addCaller(address caller) external;\n', '\n', '    function queryOracle(address token, uint8 op, bytes memory data) external payable returns (uint256 k, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum, uint256 theta);\n', '}\n', '\n', '// \n', 'interface INest_3_VoteFactory {\n', '    // æ¥è¯¢å°å\n', '\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\n', '    // _offerPrice = Nest_3_OfferPrice(address(voteFactoryMap.checkAddress("nest.v3.offerPrice")));\n', '}\n', '\n', '// \n', 'interface ICoFiXERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    // function name() external pure returns (string memory);\n', '    // function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '// \n', 'interface ICoFiXPair is ICoFiXERC20 {\n', '\n', '    struct OraclePrice {\n', '        uint256 ethAmount;\n', '        uint256 erc20Amount;\n', '        uint256 blockNum;\n', '        uint256 K;\n', '        uint256 theta;\n', '    }\n', '\n', '    // All pairs: {ETH <-> ERC20 Token}\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, address outToken, uint outAmount, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amountIn,\n', '        uint amountOut,\n', '        address outToken,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\n', '\n', '    function mint(address to) external payable returns (uint liquidity, uint oracleFeeChange);\n', '    function burn(address outToken, address to) external payable returns (uint amountOut, uint oracleFeeChange);\n', '    function swapWithExact(address outToken, address to) external payable returns (uint amountIn, uint amountOut, uint oracleFeeChange, uint256[4] memory tradeInfo);\n', '    function swapForExact(address outToken, uint amountOutExact, address to) external payable returns (uint amountIn, uint amountOut, uint oracleFeeChange, uint256[4] memory tradeInfo);\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address, string memory, string memory) external;\n', '\n', '    /// @dev get Net Asset Value Per Share\n', '    /// @param  ethAmount ETH side of Oracle price {ETH <-> ERC20 Token}\n', '    /// @param  erc20Amount Token side of Oracle price {ETH <-> ERC20 Token}\n', '    /// @return navps The Net Asset Value Per Share (liquidity) represents\n', '    function getNAVPerShare(uint256 ethAmount, uint256 erc20Amount) external view returns (uint256 navps);\n', '}\n', '\n', '// \n', '// Controller contract to call NEST Oracle for prices, managed by governance\n', '// Governance role of this contract should be the `Timelock` contract, which is further managed by a multisig contract\n', 'contract CoFiXController is ICoFiXController {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum CoFiX_OP { QUERY, MINT, BURN, SWAP_WITH_EXACT, SWAP_FOR_EXACT } // operations in CoFiX\n', '\n', '    uint256 constant public AONE = 1 ether;\n', '    uint256 constant public K_BASE = 1E8;\n', '    uint256 constant public NAVPS_BASE = 1E18; // NAVPS (Net Asset Value Per Share), need accuracy\n', '    uint256 constant internal TIMESTAMP_MODULUS = 2**32;\n', '    int128 constant internal SIGMA_STEP = 0x346DC5D638865; // (0.00005*2**64).toString(16), 0.00005 as 64.64-bit fixed point\n', '    int128 constant internal ZERO_POINT_FIVE = 0x8000000000000000; // (0.5*2**64).toString(16)\n', '    uint256 constant internal K_EXPECTED_VALUE = 0.0025*1E8;\n', '    // impact cost params\n', '    uint256 constant internal C_BUYIN_ALPHA = 25700000000000; // Î±=2.570e-05*1e18\n', '    uint256 constant internal C_BUYIN_BETA = 854200000000; // Î²=8.542e-07*1e18\n', '    uint256 constant internal C_SELLOUT_ALPHA = 117100000000000; // Î±=-1.171e-04*1e18\n', '    uint256 constant internal C_SELLOUT_BETA = 838600000000; // Î²=8.386e-07*1e18\n', '\n', '    mapping(address => uint32[3]) internal KInfoMap; // gas saving, index [0] is k vlaue, index [1] is updatedAt, index [2] is theta\n', '    mapping(address => bool) public callerAllowed;\n', '\n', '    INest_3_VoteFactory public immutable voteFactory;\n', '\n', '    // managed by governance\n', '    address public governance;\n', '    address public immutable nestToken;\n', '    address public immutable factory;\n', '    address public kTable;\n', '    uint256 public timespan = 14;\n', '    uint256 public kRefreshInterval = 5 minutes;\n', '    uint256 public DESTRUCTION_AMOUNT = 0 ether; // from nest oracle\n', '    int128 public MAX_K0 = 0xCCCCCCCCCCCCD00; // (0.05*2**64).toString(16)\n', '    int128 public GAMMA = 0x8000000000000000; // (0.5*2**64).toString(16)\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance, "CoFiXCtrl: !governance");\n', '        _;\n', '    }\n', '\n', '    constructor(address _voteFactory, address _nest, address _factory, address _kTable) public {\n', '        governance = msg.sender;\n', '        voteFactory = INest_3_VoteFactory(address(_voteFactory));\n', '        nestToken = _nest;\n', '        factory = _factory;\n', '        kTable = _kTable;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    /* setters for protocol governance */\n', '    function setGovernance(address _new) external onlyGovernance {\n', '        governance = _new;\n', '        emit NewGovernance(_new);\n', '    }\n', '\n', '    function setKTable(address _kTable) external onlyGovernance {\n', '        kTable = _kTable;\n', '        emit NewKTable(_kTable);\n', '    }    \n', '\n', '    function setTimespan(uint256 _timeSpan) external onlyGovernance {\n', '        timespan = _timeSpan;\n', '        emit NewTimespan(_timeSpan);\n', '    }\n', '\n', '    function setKRefreshInterval(uint256 _interval) external onlyGovernance {\n', '        kRefreshInterval = _interval;\n', '        emit NewKRefreshInterval(_interval);\n', '    }\n', '\n', '    function setOracleDestructionAmount(uint256 _amount) external onlyGovernance {\n', '        DESTRUCTION_AMOUNT = _amount;\n', '    }\n', '\n', '    function setKLimit(int128 maxK0) external onlyGovernance {\n', '        MAX_K0 = maxK0;\n', '        emit NewKLimit(maxK0);\n', '    }\n', '\n', '    function setGamma(int128 _gamma) external onlyGovernance {\n', '        GAMMA = _gamma;\n', '        emit NewGamma(_gamma);\n', '    }\n', '    \n', '    function setTheta(address token, uint32 theta) external onlyGovernance {\n', '        KInfoMap[token][2] = theta;\n', '        emit NewTheta(token, theta);\n', '    }\n', '\n', '    // Activate on NEST Oracle, should not be called twice for the same nest oracle\n', '    function activate() external onlyGovernance {\n', '        // address token, address from, address to, uint value\n', '        TransferHelper.safeTransferFrom(nestToken, msg.sender, address(this), DESTRUCTION_AMOUNT);\n', '        address oracle = voteFactory.checkAddress("nest.v3.offerPrice");\n', '        // address token, address to, uint value\n', '        TransferHelper.safeApprove(nestToken, oracle, DESTRUCTION_AMOUNT);\n', '        INest_3_OfferPrice(oracle).activation(); // nest.transferFrom will be called\n', '        TransferHelper.safeApprove(nestToken, oracle, 0); // ensure safety\n', '    }\n', '\n', '    function addCaller(address caller) external override {\n', '        require(msg.sender == factory || msg.sender == governance, "CoFiXCtrl: only factory or gov");\n', '        callerAllowed[caller] = true;\n', '    }\n', '\n', '    // Calc variance of price and K in CoFiX is very expensive\n', '    // We use expected value of K based on statistical calculations here to save gas\n', '    // In the near future, NEST could provide the variance of price directly. We will adopt it then.\n', '    // We can make use of `data` bytes in the future\n', '    function queryOracle(address token, uint8 op, bytes memory data) external override payable returns (uint256 _k, uint256 _ethAmount, uint256 _erc20Amount, uint256 _blockNum, uint256 _theta) {\n', '        require(callerAllowed[msg.sender], "CoFiXCtrl: caller not allowed");\n', '        (_ethAmount, _erc20Amount, _blockNum) = getLatestPrice(token);\n', '        CoFiX_OP cop = CoFiX_OP(op);\n', '        uint256 impactCost;\n', '        if (cop == CoFiX_OP.SWAP_WITH_EXACT) {\n', '            impactCost = calcImpactCostFor_SWAP_WITH_EXACT(token, data, _ethAmount, _erc20Amount);\n', '        } else if (cop == CoFiX_OP.SWAP_FOR_EXACT) {\n', '            impactCost = calcImpactCostFor_SWAP_FOR_EXACT(token, data, _ethAmount, _erc20Amount);\n', '         } else if (cop == CoFiX_OP.BURN) {\n', '            impactCost = calcImpactCostFor_BURN(token, data, _ethAmount, _erc20Amount);\n', '        }\n', '        return (K_EXPECTED_VALUE.add(impactCost), _ethAmount, _erc20Amount, _blockNum, KInfoMap[token][2]);\n', '    }\n', '\n', '    function calcImpactCostFor_BURN(address token, bytes memory data, uint256 ethAmount, uint256 erc20Amount) public view returns (uint256 impactCost) {\n', '        // bytes memory data = abi.encode(msg.sender, outToken, to, liquidity);\n', '        (, address outToken, , uint256 liquidity) = abi.decode(data, (address, address, address, uint256));\n', '        // calc real vol by liquidity * np\n', '        uint256 navps = ICoFiXPair(msg.sender).getNAVPerShare(ethAmount, erc20Amount); // pair call controller, msg.sender is pair\n', '        uint256 vol = liquidity.mul(navps).div(NAVPS_BASE);\n', '        if (outToken != token) {\n', '            // buy in ETH, outToken is ETH\n', '            return impactCostForBuyInETH(vol);\n', '        }\n', '        // sell out liquidity, outToken is token, take this as sell out ETH and get token\n', '        return impactCostForSellOutETH(vol);\n', '    }\n', '\n', '    function calcImpactCostFor_SWAP_WITH_EXACT(address token, bytes memory data, uint256 ethAmount, uint256 erc20Amount) public pure returns (uint256 impactCost) {\n', '        (, address outToken, , uint256 amountIn) = abi.decode(data, (address, address, address, uint256));\n', '        if (outToken != token) {\n', '            // buy in ETH, outToken is ETH, amountIn is token\n', '            // convert to amountIn in ETH\n', '            uint256 vol = uint256(amountIn).mul(ethAmount).div(erc20Amount);\n', '            return impactCostForBuyInETH(vol);\n', '        }\n', '        // sell out ETH, amountIn is ETH\n', '        return impactCostForSellOutETH(amountIn);\n', '    }\n', '\n', '    function calcImpactCostFor_SWAP_FOR_EXACT(address token, bytes memory data, uint256 ethAmount, uint256 erc20Amount) public pure returns (uint256 impactCost) {\n', '        (, address outToken, uint256 amountOutExact,) = abi.decode(data, (address, address, uint256, address));\n', '        if (outToken != token) {\n', '            // buy in ETH, outToken is ETH, amountOutExact is ETH\n', '            return impactCostForBuyInETH(amountOutExact);\n', '        }\n', '        // sell out ETH, amountIn is ETH, amountOutExact is token\n', '        // convert to amountOutExact in ETH\n', '        uint256 vol = uint256(amountOutExact).mul(ethAmount).div(erc20Amount);\n', '        return impactCostForSellOutETH(vol);\n', '    }\n', '\n', '    // impact cost\n', '    // - C = 0, if VOL < 500\n', '    // - C = Î± + Î² * VOL, if VOL >= 500\n', '\n', '    // Î±=2.570e-05ï¼Î²=8.542e-07\n', '    function impactCostForBuyInETH(uint256 vol) public pure returns (uint256 impactCost) {\n', '        if (vol < 500 ether) {\n', '            return 0;\n', '        }\n', '        // return C_BUYIN_ALPHA.add(C_BUYIN_BETA.mul(vol).div(1e18)).mul(1e8).div(1e18);\n', '        return C_BUYIN_ALPHA.add(C_BUYIN_BETA.mul(vol).div(1e18)).div(1e10); // combine mul div\n', '    }\n', '\n', '    // Î±=-1.171e-04ï¼Î²=8.386e-07\n', '    function impactCostForSellOutETH(uint256 vol) public pure returns (uint256 impactCost) {\n', '        if (vol < 500 ether) {\n', '            return 0;\n', '        }\n', '        // return (C_SELLOUT_BETA.mul(vol).div(1e18)).sub(C_SELLOUT_ALPHA).mul(1e8).div(1e18);\n', '        return (C_SELLOUT_BETA.mul(vol).div(1e18)).sub(C_SELLOUT_ALPHA).div(1e10); // combine mul div\n', '    }\n', '\n', '    // // We can make use of `data` bytes in the future\n', '    // function queryOracle(address token, bytes memory /*data*/) external override payable returns (uint256 _k, uint256, uint256, uint256, uint256) {\n', '    //     require(callerAllowed[msg.sender], "CoFiXCtrl: caller not allowed");\n', '\n', '    //     uint256 _now = block.timestamp % TIMESTAMP_MODULUS; // 2106\n', '\n', '    //     {\n', '    //         uint256 _lastUpdate = KInfoMap[token][1];\n', '    //         if (_now >= _lastUpdate && _now.sub(_lastUpdate) <= kRefreshInterval) { // lastUpdate (2105) | 2106 | now (1)\n', '    //             return getLatestPrice(token);\n', '    //         }\n', '    //     }\n', '\n', '    //     uint256 _balanceBefore = address(this).balance;\n', '    //     // int128 K0; // K0AndK[0]\n', '    //     // int128 K; // K0AndK[1]\n', '    //     int128[2] memory K0AndK;\n', '    //     // OraclePrice memory _op;\n', '    //     uint256[7] memory _op;\n', '\n', '    //     int128 _variance;\n', '    //     // (_variance, _op.T, _op.ethAmount, _op.erc20Amount, _op.blockNum) = calcVariance(token);\n', '    //     (_variance, _op[0], _op[1], _op[2], _op[3]) = calcVariance(token);\n', '\n', '    //     {\n', '    //         // int128 _volatility = ABDKMath64x64.sqrt(_variance);\n', '    //         // int128 _sigma = ABDKMath64x64.div(_volatility, ABDKMath64x64.sqrt(ABDKMath64x64.fromUInt(timespan)));\n', '    //         int128 _sigma = ABDKMath64x64.sqrt(ABDKMath64x64.div(_variance, ABDKMath64x64.fromUInt(timespan))); // combined into one sqrt\n', '\n', '    //         // tIdx is _op[4]\n', '    //         // sigmaIdx is _op[5]\n', '    //         _op[4] = (_op[0].add(5)).div(10); // rounding to the nearest\n', '    //         _op[5] = ABDKMath64x64.toUInt(\n', '    //                     ABDKMath64x64.add(\n', '    //                         ABDKMath64x64.div(_sigma, SIGMA_STEP), // _sigma / 0.0001, e.g. (0.00098/0.0001)=9.799 => 9\n', '    //                         ZERO_POINT_FIVE // e.g. (0.00098/0.0001)+0.5=10.299 => 10\n', '    //                     )\n', '    //                 );\n', '    //         if (_op[5] > 0) {\n', '    //             _op[5] = _op[5].sub(1);\n', '    //         }\n', '\n', '    //         // getK0(uint256 tIdx, uint256 sigmaIdx)\n', '    //         // K0 is K0AndK[0]\n', '    //         K0AndK[0] = ICoFiXKTable(kTable).getK0(\n', '    //             _op[4], \n', '    //             _op[5]\n', '    //         );\n', '\n', '    //         // K = gamma * K0\n', '    //         K0AndK[1] = ABDKMath64x64.mul(GAMMA, K0AndK[0]);\n', '\n', '    //         emit NewK(token, K0AndK[1], _sigma, _op[0], _op[1], _op[2], _op[3], _op[4], _op[5], K0AndK[0]);\n', '    //     }\n', '\n', '    //     require(K0AndK[0] <= MAX_K0, "CoFiXCtrl: K0");\n', '\n', '    //     {\n', '    //         // we could decode data in the future to pay the fee change and mining award token directly to reduce call cost\n', '    //         // TransferHelper.safeTransferETH(payback, msg.value.sub(_balanceBefore.sub(address(this).balance)));\n', '    //         uint256 oracleFeeChange = msg.value.sub(_balanceBefore.sub(address(this).balance));\n', '    //         if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n', '    //         _k = ABDKMath64x64.toUInt(ABDKMath64x64.mul(K0AndK[1], ABDKMath64x64.fromUInt(K_BASE)));\n', '    //         _op[6] = KInfoMap[token][2]; // theta\n', '    //         KInfoMap[token][0] = uint32(_k); // k < MAX_K << uint32(-1)\n', '    //         KInfoMap[token][1] = uint32(_now); // 2106\n', '    //         return (_k, _op[1], _op[2], _op[3], _op[6]);\n', '    //     }\n', '    // }\n', '\n', '    // function getKInfo(address token) external view returns (uint32 k, uint32 updatedAt, uint32 theta) {\n', '    //     k = KInfoMap[token][0];\n', '    //     updatedAt = KInfoMap[token][1];\n', '    //     theta = KInfoMap[token][2];\n', '    // }\n', '\n', '    function getKInfo(address token) external view returns (uint32 k, uint32 updatedAt, uint32 theta) {\n', '        k = uint32(K_EXPECTED_VALUE);\n', '        updatedAt = uint32(block.timestamp);\n', '        theta = KInfoMap[token][2];\n', '    }\n', '\n', '    function getLatestPrice(address token) internal returns (uint256 _ethAmount, uint256 _erc20Amount, uint256 _blockNum) {\n', '        uint256 _balanceBefore = address(this).balance;\n', '        address oracle = voteFactory.checkAddress("nest.v3.offerPrice");\n', '        uint256[] memory _rawPriceList = INest_3_OfferPrice(oracle).updateAndCheckPriceList{value: msg.value}(token, 1);\n', '        require(_rawPriceList.length == 3, "CoFiXCtrl: bad price len");\n', '        // validate T\n', '        uint256 _T = block.number.sub(_rawPriceList[2]).mul(timespan);\n', '        require(_T < 900, "CoFiXCtrl: oralce price outdated");\n', '        uint256 oracleFeeChange = msg.value.sub(_balanceBefore.sub(address(this).balance));\n', '        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n', '        return (_rawPriceList[0], _rawPriceList[1], _rawPriceList[2]);\n', '        // return (K_EXPECTED_VALUE, _rawPriceList[0], _rawPriceList[1], _rawPriceList[2], KInfoMap[token][2]);\n', '    }\n', '\n', '    // calc Variance, a.k.a. sigma squared\n', '    function calcVariance(address token) internal returns (\n', '        int128 _variance,\n', '        uint256 _T,\n', '        uint256 _ethAmount,\n', '        uint256 _erc20Amount,\n', '        uint256 _blockNum\n', '    ) // keep these variables to make return values more clear\n', '    {\n', '        address oracle = voteFactory.checkAddress("nest.v3.offerPrice");\n', '        // query raw price list from nest oracle (newest to oldest)\n', '        uint256[] memory _rawPriceList = INest_3_OfferPrice(oracle).updateAndCheckPriceList{value: msg.value}(token, 50);\n', '        require(_rawPriceList.length == 150, "CoFiXCtrl: bad price len");\n', '        // calc P a.k.a. price from the raw price data (ethAmount, erc20Amount, blockNum)\n', '        uint256[] memory _prices = new uint256[](50);\n', '        for (uint256 i = 0; i < 50; i++) {\n', '            // 0..50 (newest to oldest), so _prices[0] is p49 (latest price), _prices[49] is p0 (base price)\n', '            _prices[i] = calcPrice(_rawPriceList[i*3], _rawPriceList[i*3+1]);\n', '        }\n', '\n', '        // calc x a.k.a. standardized sequence of differences (newest to oldest)\n', '        int128[] memory _stdSeq = new int128[](49);\n', '        for (uint256 i = 0; i < 49; i++) {\n', '            _stdSeq[i] = calcStdSeq(_prices[i], _prices[i+1], _prices[49], _rawPriceList[i*3+2], _rawPriceList[(i+1)*3+2]);\n', '        }\n', '\n', '        // Option 1: calc variance of x\n', '        // Option 2: calc mean value first and then calc variance\n', '        // Use option 1 for gas saving\n', '        int128 _sumSq; // sum of squares of x\n', '        int128 _sum; // sum of x\n', '        for (uint256 i = 0; i < 49; i++) {\n', '            _sumSq = ABDKMath64x64.add(ABDKMath64x64.pow(_stdSeq[i], 2), _sumSq);\n', '            _sum = ABDKMath64x64.add(_stdSeq[i], _sum);\n', '        }\n', '        _variance = ABDKMath64x64.sub(\n', '            ABDKMath64x64.div(\n', '                _sumSq,\n', '                ABDKMath64x64.fromUInt(49)\n', '            ),\n', '            ABDKMath64x64.div(\n', '                ABDKMath64x64.pow(_sum, 2),\n', '                ABDKMath64x64.fromUInt(49*49)\n', '            )\n', '        );\n', '        \n', '        _T = block.number.sub(_rawPriceList[2]).mul(timespan);\n', '        return (_variance, _T, _rawPriceList[0], _rawPriceList[1], _rawPriceList[2]);\n', '    }\n', '\n', '    function calcPrice(uint256 _ethAmount, uint256 _erc20Amount) internal pure returns (uint256) {\n', '        return AONE.mul(_erc20Amount).div(_ethAmount);\n', '    }\n', '\n', '    // diff ratio could be negative\n', '    // p2: P_{i}\n', '    // p1: P_{i-1}\n', '    // p0: P_{0}\n', '    function calcDiffRatio(uint256 p2, uint256 p1, uint256 p0) internal pure returns (int128) {\n', '        int128 _p2 = ABDKMath64x64.fromUInt(p2);\n', '        int128 _p1 = ABDKMath64x64.fromUInt(p1);\n', '        int128 _p0 = ABDKMath64x64.fromUInt(p0);\n', '        return ABDKMath64x64.div(ABDKMath64x64.sub(_p2, _p1), _p0);\n', '    }\n', '\n', '    // p2: P_{i}\n', '    // p1: P_{i-1}\n', '    // p0: P_{0}\n', '    // bn2: blocknum_{i}\n', '    // bn1: blocknum_{i-1}\n', '    function calcStdSeq(uint256 p2, uint256 p1, uint256 p0, uint256 bn2, uint256 bn1) internal pure returns (int128) {\n', '        return ABDKMath64x64.div(\n', '                calcDiffRatio(p2, p1, p0),\n', '                ABDKMath64x64.sqrt(\n', '                    ABDKMath64x64.fromUInt(bn2.sub(bn1)) // c must be larger than d\n', '                )\n', '            );\n', '    }\n', '}']