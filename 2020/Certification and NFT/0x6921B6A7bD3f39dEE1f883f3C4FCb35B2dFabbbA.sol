['// Keep4r Jobs V1 Beta ðŸš€\n', '// This fork of keep3r decouples the coin from the protocol, \n', '// disables governance bypassing, and has configurable bonding times.\n', '// \n', '// More information @ \n', '// - https://docs.kp4r.network/Jobs.html\n', '// Find a list of featured jobs @\n', '// - https://kp4r.network/#/jobs\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n', '// Subject to the MIT license.\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "add: +");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "sub: -");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "mul: *");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "div: /");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "mod: %");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call{value:amount}("");\n', '        require(success, "Address: reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: < 0");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: !contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: !succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface IKeep3rV1Helper {\n', '    function getQuoteLimit(uint gasUsed) external view returns (uint);\n', '}\n', '\n', '\n', 'contract KeeperV1Jobs is ReentrancyGuard {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @notice Keep3r Helper to set max prices for the ecosystem\n', '    IKeep3rV1Helper public KPRH;\n', '\n', '    IERC20 public kp4r;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '    bytes32 public immutable DOMAINSEPARATOR;\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint nonce,uint expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    /// @notice Submit a job\n', '    event SubmitJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Apply credit to a job\n', '    event ApplyCredit(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Remove credit for a job\n', '    event RemoveJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Unbond credit for a job\n', '    event UnbondJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\n', '\n', '    /// @notice Added a Job\n', '    event JobAdded(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Removed a job\n', '    event JobRemoved(address indexed job, uint block, address governance);\n', '\n', '    /// @notice Worked a job\n', '    event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block);\n', '\n', '    /// @notice Keeper bonding\n', '    event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);\n', '\n', '    /// @notice Keeper bonded\n', '    event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);\n', '\n', '    /// @notice Keeper unbonding\n', '    event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);\n', '\n', '    /// @notice Keeper unbound\n', '    event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);\n', '\n', '    /// @notice Keeper slashed\n', '    event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);\n', '\n', '    /// @notice Keeper disputed\n', '    event KeeperDispute(address indexed keeper, uint block);\n', '\n', '    /// @notice Keeper resolved\n', '    event KeeperResolved(address indexed keeper, uint block);\n', '\n', '    event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);\n', '\n', '    /// @notice 1 day to bond to become a keeper\n', '    uint public BOND = 1 days;\n', '    /// @notice 14 days to unbond to remove funds from being a keeper\n', '    uint public UNBOND = 14 days;\n', '\n', '    /// @notice direct liquidity fee 0.3%\n', '    uint public FEE = 30;\n', '    uint public BASE = 10000;\n', '\n', '    /// @notice address used for ETH transfers\n', '    address constant public ETH = address(0xE);\n', '\n', '    /// @notice tracks all current bondings (time)\n', '    mapping(address => mapping(address => uint)) public bondings;\n', '    /// @notice tracks all current unbondings (time)\n', '    mapping(address => mapping(address => uint)) public unbondings;\n', '    /// @notice allows for partial unbonding\n', '    mapping(address => mapping(address => uint)) public partialUnbonding;\n', '    /// @notice tracks all current pending bonds (amount)\n', '    mapping(address => mapping(address => uint)) public pendingbonds;\n', '    /// @notice tracks how much a keeper has bonded\n', '    mapping(address => mapping(address => uint)) public bonds;\n', "    /// @notice tracks underlying votes (that don't have bond)\n", '    mapping(address => uint) public votes;\n', '\n', '    /// @notice total bonded (totalSupply for bonds)\n', '    uint public totalBonded = 0;\n', '    /// @notice tracks when a keeper was first registered\n', '    mapping(address => uint) public firstSeen;\n', '\n', '    /// @notice tracks if a keeper has a pending dispute\n', '    mapping(address => bool) public disputes;\n', '\n', '    /// @notice tracks last job performed for a keeper\n', '    mapping(address => uint) public lastJob;\n', '    /// @notice tracks the total job executions for a keeper\n', '    mapping(address => uint) public workCompleted;\n', '    /// @notice list of all jobs registered for the keeper system\n', '    mapping(address => bool) public jobs;\n', '    /// @notice the current credit available for a job\n', '    mapping(address => mapping(address => uint)) public credits;\n', '\n', '    /// @notice the balances for the liquidity providers\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityProvided;\n', '    /// @notice liquidity unbonding days\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityUnbonding;\n', '    /// @notice liquidity unbonding amounts\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmountsUnbonding;\n', '    /// @notice job proposal delay\n', '    mapping(address => uint) public jobProposalDelay;\n', '    /// @notice liquidity apply date\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityApplied;\n', '    /// @notice liquidity amount to apply\n', '    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmount;\n', '\n', '    /// @notice list of all current keepers\n', '    mapping(address => bool) public keepers;\n', '    /// @notice blacklist of keepers not allowed to participate\n', '    mapping(address => bool) public blacklist;\n', '\n', '    /// @notice traversable array of keepers to make external management easier\n', '    address[] public keeperList;\n', '    /// @notice traversable array of jobs to make external management easier\n', '    address[] public jobList;\n', '\n', '    /// @notice governance address for the governance contract\n', '    address public governance;\n', '    address public pendingGovernance;\n', '\n', '    /// @notice the liquidity token supplied by users paying for jobs\n', '    mapping(address => bool) public liquidityAccepted;\n', '\n', '    address[] public liquidityPairs;\n', '\n', '    uint internal _gasUsed;\n', '\n', '    constructor(address _kp4r) public {\n', '        // Set governance for this token\n', '        kp4r = IERC20(_kp4r);\n', '        governance = msg.sender;\n', '        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes("Keep4r")), _getChainId(), address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice Add ETH credit to a job to be paid out for work\n', '     * @param job the job being credited\n', '     */\n', '    function addCreditETH(address job) external payable {\n', '        require(jobs[job], "addCreditETH: !job");\n', '        uint _fee = msg.value.mul(FEE).div(BASE);\n', '        credits[job][ETH] = credits[job][ETH].add(msg.value.sub(_fee));\n', '        payable(governance).transfer(_fee);\n', '\n', '        emit AddCredit(ETH, job, msg.sender, block.number, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @notice Add credit to a job to be paid out for work\n', '     * @param credit the credit being assigned to the job\n', '     * @param job the job being credited\n', '     * @param amount the amount of credit being added to the job\n', '     */\n', '    function addCredit(address credit, address job, uint amount) external nonReentrant {\n', '        require(jobs[job], "addCreditETH: !job");\n', '\n', '        uint _before = IERC20(credit).balanceOf(address(this));\n', '        IERC20(credit).safeTransferFrom(msg.sender, address(this), amount);\n', '        uint _received = IERC20(credit).balanceOf(address(this)).sub(_before);\n', '        uint _fee = _received.mul(FEE).div(BASE);\n', '        credits[job][credit] = credits[job][credit].add(_received.sub(_fee));\n', '        IERC20(credit).safeTransfer(governance, _fee);\n', '\n', '        emit AddCredit(credit, job, msg.sender, block.number, _received);\n', '    }\n', '\n', '    /**\n', '     * @notice Displays all accepted liquidity pairs\n', '     */\n', '    function pairs() external view returns (address[] memory) {\n', '        return liquidityPairs;\n', '    }\n', '\n', '    /**\n', '     * @notice Implemented by jobs to show that a keeper performed work\n', '     * @param keeper address of the keeper that performed the work\n', '     */\n', '    function worked(address keeper) external {\n', '        workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));\n', '    }\n', '\n', '    /**\n', '     * @notice Implemented by jobs to show that a keeper performed work\n', '     * @param keeper address of the keeper that performed the work\n', '     * @param amount the reward that should be allocated\n', '     */\n', '    function workReceipt(address keeper, uint amount) public {\n', '        require(jobs[msg.sender], "workReceipt: !job");\n', '        require(amount <= KPRH.getQuoteLimit(_gasUsed.sub(gasleft())), "workReceipt: max limit");\n', '        credits[msg.sender][address(this)] = credits[msg.sender][address(this)].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        _bond(address(this), keeper, amount);\n', '        workCompleted[keeper] = workCompleted[keeper].add(amount);\n', '        emit KeeperWorked(address(this), msg.sender, keeper, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice Implemented by jobs to show that a keeper performed work\n', '     * @param credit the asset being awarded to the keeper\n', '     * @param keeper address of the keeper that performed the work\n', '     * @param amount the reward that should be allocated\n', '     */\n', '    function receipt(address credit, address keeper, uint amount) external {\n', '        require(jobs[msg.sender], "receipt: !job");\n', '        credits[msg.sender][credit] = credits[msg.sender][credit].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        IERC20(credit).safeTransfer(keeper, amount);\n', '        emit KeeperWorked(credit, msg.sender, keeper, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice Implemented by jobs to show that a keeper performed work\n', '     * @param keeper address of the keeper that performed the work\n', '     * @param amount the amount of ETH sent to the keeper\n', '     */\n', '    function receiptETH(address keeper, uint amount) external {\n', '        require(jobs[msg.sender], "receipt: !job");\n', '        credits[msg.sender][ETH] = credits[msg.sender][ETH].sub(amount, "workReceipt: insuffient funds");\n', '        lastJob[keeper] = now;\n', '        payable(keeper).transfer(amount);\n', '        emit KeeperWorked(ETH, msg.sender, keeper, block.number);\n', '    }\n', '\n', '    function _bond(address bonding, address _from, uint _amount) internal {\n', '        bonds[_from][bonding] = bonds[_from][bonding].add(_amount);\n', '        if (bonding == address(this)) {\n', '            totalBonded = totalBonded.add(_amount);\n', '            // _moveDelegates(address(0), delegates[_from], _amount);\n', '        }\n', '    }\n', '\n', '    function _unbond(address bonding, address _from, uint _amount) internal {\n', '        bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);\n', '        if (bonding == address(this)) {\n', '            totalBonded = totalBonded.sub(_amount);\n', '            // _moveDelegates(delegates[_from], address(0), _amount);\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to add new job systems\n', '     * @param job address of the contract for which work should be performed\n', '     */\n', '    function addJob(address job) external {\n', '        require(msg.sender == governance, "addJob: !gov");\n', '        require(!jobs[job], "addJob: job known");\n', '        jobs[job] = true;\n', '        jobList.push(job);\n', '        emit JobAdded(job, block.number, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Full listing of all jobs ever added\n', '     * @return array blob\n', '     */\n', '    function getJobs() external view returns (address[] memory) {\n', '        return jobList;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to remove a job from the systems\n', '     * @param job address of the contract for which work should be performed\n', '     */\n', '    function removeJob(address job) external {\n', '        require(msg.sender == governance, "removeJob: !gov");\n', '        jobs[job] = false;\n', '        emit JobRemoved(job, block.number, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change the Keep3rHelper for max spend\n', '     * @param _kprh new helper address to set\n', '     */\n', '    function setKeep3rHelper(address _kprh) external {\n', '        require(msg.sender == governance, "setKeep3rHelper: !gov");\n', '       \n', '        KPRH = IKeep3rV1Helper(_kprh);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change governance (for future upgradability)\n', '     * @param _governance new governance address to set\n', '     */\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "setGovernance: !gov");\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "acceptGovernance: !pendingGov");\n', '        governance = pendingGovernance;\n', '    }\n', '\n', '    /**\n', '     * @notice confirms if the current keeper is registered, can be used for general (non critical) functions\n', '     * @param keeper the keeper being investigated\n', '     * @return true/false if the address is a keeper\n', '     */\n', '    function isKeeper(address keeper) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper];\n', '    }\n', '\n', '    /**\n', '     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\n', '     * @param keeper the keeper being investigated\n', '     * @param minBond the minimum requirement for the asset provided in bond\n', '     * @param earned the total funds earned in the keepers lifetime\n', '     * @param age the age of the keeper in the system\n', '     * @return true/false if the address is a keeper and has more than the bond\n', '     */\n', '    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper]\n', '                && bonds[keeper][address(this)].add(votes[keeper]) >= minBond\n', '                && workCompleted[keeper] >= earned\n', '                && now.sub(firstSeen[keeper]) >= age;\n', '    }\n', '\n', '    /**\n', '     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\n', '     * @param keeper the keeper being investigated\n', '     * @param bond the bound asset being evaluated\n', '     * @param minBond the minimum requirement for the asset provided in bond\n', '     * @param earned the total funds earned in the keepers lifetime\n', '     * @param age the age of the keeper in the system\n', '     * @return true/false if the address is a keeper and has more than the bond\n', '     */\n', '    function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {\n', '        _gasUsed = gasleft();\n', '        return keepers[keeper]\n', '                && bonds[keeper][bond] >= minBond\n', '                && workCompleted[keeper] >= earned\n', '                && now.sub(firstSeen[keeper]) >= age;\n', '    }\n', '\n', '    /**\n', '     * @notice begin the bonding process for a new keeper\n', '     * @param bonding the asset being bound\n', '     * @param amount the amount of bonding asset being bound\n', '     */\n', '    function bond(address bonding, uint amount) external nonReentrant {\n', '        require(!blacklist[msg.sender], "bond: blacklisted");\n', '        require(bonding != address(this), "cannot bond this");\n', '        bondings[msg.sender][bonding] = now.add(BOND);\n', '       \n', '        uint _before = IERC20(bonding).balanceOf(address(this));\n', '        IERC20(bonding).safeTransferFrom(msg.sender, address(this), amount);\n', '        amount = IERC20(bonding).balanceOf(address(this)).sub(_before);\n', '        \n', '        pendingbonds[msg.sender][bonding] = pendingbonds[msg.sender][bonding].add(amount);\n', '        emit KeeperBonding(msg.sender, block.number, bondings[msg.sender][bonding], amount);\n', '    }\n', '\n', '    /**\n', '     * @notice get full list of keepers in the system\n', '     */\n', '    function getKeepers() external view returns (address[] memory) {\n', '        return keeperList;\n', '    }\n', '\n', '    /**\n', '     * @notice allows a keeper to activate/register themselves after bonding\n', '     * @param bonding the asset being activated as bond collateral\n', '     */\n', '    function activate(address bonding) external {\n', '        require(!blacklist[msg.sender], "activate: blacklisted");\n', '        require(bondings[msg.sender][bonding] != 0 && bondings[msg.sender][bonding] < now, "connect yet activate bonding");\n', '        if (firstSeen[msg.sender] == 0) {\n', '          firstSeen[msg.sender] = now;\n', '          keeperList.push(msg.sender);\n', '          lastJob[msg.sender] = now;\n', '        }\n', '        keepers[msg.sender] = true;\n', '        _bond(bonding, msg.sender, pendingbonds[msg.sender][bonding]);\n', '        pendingbonds[msg.sender][bonding] = 0;\n', '        emit KeeperBonded(msg.sender, block.number, block.timestamp, bonds[msg.sender][bonding]);\n', '    }\n', '\n', '    /**\n', '     * @notice begin the unbonding process to stop being a keeper\n', '     * @param bonding the asset being unbound\n', '     * @param amount allows for partial unbonding\n', '     */\n', '    function unbond(address bonding, uint amount) external {\n', '        unbondings[msg.sender][bonding] = now.add(UNBOND);\n', '        _unbond(bonding, msg.sender, amount);\n', '        partialUnbonding[msg.sender][bonding] = partialUnbonding[msg.sender][bonding].add(amount);\n', '        emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender][bonding], amount);\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw funds after unbonding has finished\n', '     * @param bonding the asset to withdraw from the bonding pool\n', '     */\n', '    function withdraw(address bonding) external nonReentrant {\n', '        require(unbondings[msg.sender][bonding] != 0 && unbondings[msg.sender][bonding] < now, "withdraw: unbonding");\n', '        require(!disputes[msg.sender], "withdraw: disputes");\n', '\n', '        IERC20(bonding).safeTransfer(msg.sender, partialUnbonding[msg.sender][bonding]);\n', '        emit KeeperUnbound(msg.sender, block.number, block.timestamp, partialUnbonding[msg.sender][bonding]);\n', '        partialUnbonding[msg.sender][bonding] = 0;\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to create a dispute for a given keeper\n', '     * @param keeper the address in dispute\n', '     */\n', '    function dispute(address keeper) external {\n', '        require(msg.sender == governance, "dispute: !gov");\n', '        disputes[keeper] = true;\n', '        emit KeeperDispute(keeper, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to slash a keeper based on a dispute\n', '     * @param bonded the asset being slashed\n', '     * @param keeper the address being slashed\n', '     * @param amount the amount being slashed\n', '     */\n', '    function slash(address bonded, address keeper, uint amount) public nonReentrant {\n', '        require(msg.sender == governance, "slash: !gov");\n', '        IERC20(bonded).safeTransfer(governance, amount);\n', '        _unbond(bonded, keeper, amount);\n', '        disputes[keeper] = false;\n', '        emit KeeperSlashed(keeper, msg.sender, block.number, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice blacklists a keeper from participating in the network\n', '     * @param keeper the address being slashed\n', '     */\n', '    function revoke(address keeper) external {\n', '        require(msg.sender == governance, "slash: !gov");\n', '        keepers[keeper] = false;\n', '        blacklist[keeper] = true;\n', '        slash(address(this), keeper, bonds[keeper][address(this)]);\n', '    }\n', '\n', '    /**\n', '     * @notice allows governance to resolve a dispute on a keeper\n', '     * @param keeper the address cleared\n', '     */\n', '    function resolve(address keeper) external {\n', '        require(msg.sender == governance, "resolve: !gov");\n', '        disputes[keeper] = false;\n', '        emit KeeperResolved(keeper, block.number);\n', '    }\n', '    \n', '    function setBondingTimes(uint256 _BOND, uint256 _UNBOND) public {\n', '         require(msg.sender == governance, "setBondingTimes: !gov");\n', '         require(_UNBOND < 21 days, "unbond time too long");\n', '         UNBOND = _UNBOND;\n', '         BOND = _BOND;\n', '    }\n', '    \n', '    function setFees(uint256 _FEE) public {\n', '        require(msg.sender == governance, "setFee: !gov");\n', '        require(_FEE < 500, "fee to big");\n', '        FEE = _FEE;\n', '    }\n', '\n', '\n', '\n', '    function _getChainId() internal pure returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']