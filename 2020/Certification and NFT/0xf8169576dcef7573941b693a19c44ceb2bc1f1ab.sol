['/* Discussion:\n', ' * https://test.dfohub.eth?ensd=test.dfohub.eth\n', ' */\n', '/* Description:\n', ' * New Staking Transfer Functionality\n', ' */\n', 'pragma solidity ^0.7.1;\n', '\n', 'contract StakingTransferFunctionality {\n', '\n', '    string private _metadataLink;\n', '\n', '    constructor(string memory metadataLink) {\n', '        _metadataLink = metadataLink;\n', '    }\n', '\n', '    function getMetadataLink() public view returns(string memory) {\n', '        return _metadataLink;\n', '    }\n', '\n', '    function onStart(address, address) public {\n', '        IMVDProxy proxy = IMVDProxy(msg.sender);\n', '        IStateHolder stateHolder = IStateHolder(proxy.getStateHolderAddress());\n', '        stateHolder.setBool(_toStateHolderKey("staking.transfer.authorized", _toString(0x792BF16B9C6CaD4c180C0031F32c39EB51d6A290)), true);\n', '        stateHolder.setUint256("staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers[0].minCap", 100000000000000000000);\n', '        stateHolder.setUint256("staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers[0].hardCap", 100000000000000000000000);\n', '        stateHolder.setUint256("staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers.length", 1);\n', '    }\n', '\n', '    function onStop(address) public {\n', '    }\n', '\n', '    function stakingTransfer(address sender, uint256, uint256 value, address receiver) public {\n', '        IMVDProxy proxy = IMVDProxy(msg.sender);\n', '\n', '        require(IStateHolder(proxy.getStateHolderAddress()).getBool(_toStateHolderKey("staking.transfer.authorized", _toString(sender))), "Unauthorized action!");\n', '\n', '        proxy.transfer(receiver, value, proxy.getToken());\n', '    }\n', '\n', '    function _toStateHolderKey(string memory a, string memory b) private pure returns(string memory) {\n', '        return _toLowerCase(string(abi.encodePacked(a, ".", b)));\n', '    }\n', '\n', '    function _toString(address _addr) private pure returns(string memory) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '\n', '    function _toLowerCase(string memory str) private pure returns(string memory) {\n', '        bytes memory bStr = bytes(str);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\n', '        }\n', '        return string(bStr);\n', '    }\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getToken() external view returns(address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function transfer(address receiver, uint256 value, address token) external;\n', '    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getBool(string calldata varName) external view returns (bool);\n', '    function setBool(string calldata varName, bool val) external returns(bool);\n', '    function setUint256(string calldata varName, uint256 val) external returns(uint256);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', 'interface IERC20 {\n', '    function mint(uint256 amount) external;\n', '    function balanceOf(address account) external view returns (uint256);\n', '}']