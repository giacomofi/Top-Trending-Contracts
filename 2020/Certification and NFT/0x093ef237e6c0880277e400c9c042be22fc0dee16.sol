['pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable  {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface Token {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '}\n', '\n', '\n', 'contract Buy_LOL_Token is Ownable{\n', '    \n', '    using SafeMath for uint;\n', '\n', '    address public tokenAddr;\n', '    uint256 private ethAmount;\n', '    uint256 public tokenPriceEth = 10940000000000; \n', '    uint256 public tokenDecimal = 18;\n', '    uint256 public ethDecimal = 18;\n', '\n', '    event TokenTransfer(address beneficiary, uint amount);\n', '    \n', '    mapping (address => uint256) public balances;\n', '    mapping(address => uint256) public tokenExchanged;\n', '\n', '    constructor() public {\n', '        tokenAddr = 0x5978708d6ccE1CC9640Eed47422D64c91BbD5171;\n', '    }\n', '    \n', '    \n', '    \n', '    function() payable external {\n', '        ExchangeETHforToken(msg.sender, msg.value);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    }\n', '    \n', '    function ExchangeETHforToken(address _addr, uint256 _amount) private {\n', '        uint256 amount = _amount;\n', '        address userAdd = _addr;\n', '        \n', '        ethAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\n', '        require(Token(tokenAddr).balanceOf(address(this)) >= ethAmount, "There is low token balance in contract");\n', '        \n', '        require(Token(tokenAddr).transfer(userAdd, ethAmount));\n', '        emit TokenTransfer(userAdd, ethAmount);\n', '        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(ethAmount);\n', '        \n', '    }\n', '    \n', '    function ExchangeETHforTokenMannual() public payable {\n', '        uint256 amount = msg.value;\n', '        address userAdd = msg.sender;\n', '        \n', '        ethAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\n', '        require(Token(tokenAddr).balanceOf(address(this)) >= ethAmount, "There is low token balance in contract");\n', '        \n', '        require(Token(tokenAddr).transfer(userAdd, ethAmount));\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        emit TokenTransfer(userAdd, ethAmount);\n', '        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(ethAmount);\n', '        \n', '    }\n', '    \n', '    function updateTokenPrice(uint256 newTokenValue) public onlyOwner {\n', '        tokenPriceEth = newTokenValue;\n', '    }\n', '    \n', '    function updateTokenDecimal(uint256 newDecimal) public onlyOwner {\n', '        tokenDecimal = newDecimal;\n', '    }\n', '    \n', '    function updateTokenAddress(address newTokenAddr) public onlyOwner {\n', '        tokenAddr = newTokenAddr;\n', '    }\n', '\n', '    function withdrawTokens(address beneficiary) public onlyOwner {\n', '        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(address(this))));\n', '    }\n', '\n', '    function withdrawCrypto(address payable beneficiary) public onlyOwner {\n', '        beneficiary.transfer(address(this).balance);\n', '    }\n', '    function tokenBalance() public view returns (uint256){\n', '        return Token(tokenAddr).balanceOf(address(this));\n', '    }\n', '    function ethBalance() public view returns (uint256){\n', '        return address(this).balance;\n', '    }\n', '}']