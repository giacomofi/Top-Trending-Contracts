['pragma solidity ^0.5.0;\n', '\n', 'import "./IERC20.sol";\n', '\n', 'contract IOneSplitConsts {\n', '    // disableFlags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_KYBER + ...\n', '    uint256 public constant FLAG_DISABLE_UNISWAP = 0x01;\n', '    uint256 public constant FLAG_DISABLE_KYBER = 0x02;\n', '    uint256 public constant FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\n', '    uint256 public constant FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\n', '    uint256 public constant FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\n', '    uint256 public constant FLAG_DISABLE_BANCOR = 0x04;\n', '    uint256 public constant FLAG_DISABLE_OASIS = 0x08;\n', '    uint256 public constant FLAG_DISABLE_COMPOUND = 0x10;\n', '    uint256 public constant FLAG_DISABLE_FULCRUM = 0x20;\n', '    uint256 public constant FLAG_DISABLE_CHAI = 0x40;\n', '    uint256 public constant FLAG_DISABLE_AAVE = 0x80;\n', '    uint256 public constant FLAG_DISABLE_SMART_TOKEN = 0x100;\n', '    uint256 public constant FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Turned off by default\n', '    uint256 public constant FLAG_DISABLE_BDAI = 0x400;\n', '    uint256 public constant FLAG_DISABLE_IEARN = 0x800;\n', '    uint256 public constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\n', '    uint256 public constant FLAG_DISABLE_CURVE_USDT = 0x2000;\n', '    uint256 public constant FLAG_DISABLE_CURVE_Y = 0x4000;\n', '    uint256 public constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\n', '    uint256 public constant FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Turned off by default\n', '    uint256 public constant FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Turned off by default\n', '    uint256 public constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\n', '    uint256 public constant FLAG_DISABLE_WETH = 0x80000;\n', '    uint256 public constant FLAG_ENABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\n', '    uint256 public constant FLAG_ENABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\n', '    uint256 public constant FLAG_ENABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\n', '    uint256 public constant FLAG_DISABLE_IDLE = 0x800000;\n', '}\n', '\n', 'contract IOneSplit is IOneSplitConsts {\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] memory distribution,\n', '        uint256 disableFlags\n', '    ) public payable;\n', '}\n', '\n', 'contract IOneSplitMulti is IOneSplit {\n', '    function swapMulti(\n', '        IERC20[] memory tokens,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] memory distribution,\n', '        uint256[] memory flags\n', '    ) public payable;\n', '}']
['pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n']
['pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./DyDxFlashLoan.sol";\n', 'import "./IOneSplitMulti.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract DyDxFlashloanArbMulti is DyDxFlashLoan {\n', '    using SafeMath for uint256;\n', '    address arbOwner;\n', '    address constant OneSplitAddress =  0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e;\n', '    address constant RetAddress1 = 0xE365CEf2A7b4B0e4821453570De3A5D8149A32BE;//reward\n', '    address constant RetAddress2 = 0x37fb57eFFa51dDee798E948A05C6b3AC77846b70;//reward\n', '\n', '    constructor() public payable {\n', '        arbOwner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner () {\n', '        require(msg.sender == arbOwner, "fail 0");\n', '        _;\n', '    }\n', '\n', '    function () external payable {}\n', '\n', '    function getFlashloan(address _flashToken, uint256 _flashAmount, address _token, uint256 _returnAmount, uint256[] calldata _distribution, uint256 _flag) external onlyOwner {\n', '        bytes memory _data = abi.encode(_flashToken, _flashAmount, _token, _returnAmount, _distribution, _flag);\n', '        \n', '        flashloan(_flashToken, _flashAmount, _data); //callFunction\n', '    }\n', '    \n', '    function callFunction(address, Info calldata, bytes calldata _data) external onlyPool {\n', '        (address flashToken, uint256 flashAmount, address token, uint256 returnAmount, uint256[] memory distribution, uint256 flag)\n', '        = abi.decode(_data, (address, uint256, address, uint256, uint256[], uint256));\n', '        \n', '        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));\n', '        require(balanceAfter >= flashAmount, "fail 00");\n', '        \n', '        swap1(flashToken, token, flashAmount, returnAmount, distribution, flag);\n', '    }\n', '\n', '\n', '\n', '    function swap1(address from, address token, uint256 amountWei, uint256 returnAmount, uint256[] memory distribution, uint256 flag) internal {\n', '        IERC20 fromERC20 = IERC20(from);\n', '        IERC20 tokenERC20 = IERC20(token);\n', '        \n', '        require(fromERC20.approve(OneSplitAddress, amountWei.add(amountWei)), "fail 1");\n', '        require(tokenERC20.approve(OneSplitAddress, returnAmount.add(returnAmount)), "fail 2");\n', '        \n', '        IERC20[] memory tokensArray = new IERC20[](3);\n', '        tokensArray[0] = fromERC20;\n', '        tokensArray[1] = tokenERC20;\n', '        tokensArray[2] = fromERC20;\n', '        \n', '        uint256[] memory flagsArray = new uint256[](2);\n', '        flagsArray[0] = flag;\n', '        flagsArray[1] = flag;\n', '        \n', '        IOneSplitMulti(OneSplitAddress).swapMulti(tokensArray, amountWei, 0, distribution, flagsArray);\n', '        \n', '        uint256 retval = fromERC20.balanceOf(address(this));\n', '        require(retval > amountWei, "fail 3");\n', '        \n', '        uint256 divval = retval.sub(amountWei.add(1)).div(2);\n', '        fromERC20.transfer(RetAddress1, divval);\n', '        fromERC20.transfer(RetAddress2, divval);\n', '    }\n', '}']
['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./IERC20.sol";\n', '\n', 'interface Structs {\n', '    struct Val {\n', '        uint256 value;\n', '    }\n', '\n', '    enum ActionType {\n', '      Deposit,   // supply tokens\n', '      Withdraw,  // borrow tokens\n', '      Transfer,  // transfer balance between accounts\n', '      Buy,       // buy an amount of some token (externally)\n', '      Sell,      // sell an amount of some token (externally)\n', '      Trade,     // trade tokens against another account\n', '      Liquidate, // liquidate an undercollateralized or expiring account\n', '      Vaporize,  // use excess tokens to zero-out a completely negative account\n', '      Call       // send arbitrary data to an address\n', '    }\n', '\n', '    enum AssetDenomination {\n', '        Wei // the amount is denominated in wei\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta // the amount is given as a delta from the current value\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct Info {\n', '        address owner;  // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', 'contract DyDxPool is Structs {\n', '    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\n', '    function operate(Info[] memory, ActionArgs[] memory) public;\n', '}\n', '\n', 'contract DyDxFlashLoan is Structs {\n', '    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e); //this is dydx solo margin sc\n', '\n', '    // token address\n', '    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    mapping(address => uint256) public currencies;\n', '\n', '    constructor() public {\n', '        currencies[WETH] = 1;\n', '        currencies[SAI] = 2;\n', '        currencies[USDC] = 3;\n', '        currencies[DAI] = 4;\n', '    }\n', '\n', '    modifier onlyPool() {\n', '        require(\n', '            msg.sender == address(pool),\n', '            "FlashLoan: could be called by DyDx pool only"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function tokenToMarketId(address token) public view returns (uint256) {\n', '        uint256 marketId = currencies[token];\n', '        require(marketId != 0, "FlashLoan: Unsupported token");\n', '        return marketId - 1;\n', '    }\n', '\n', '    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\n', '    // token: erc20 token for flashloan from dydx\n', '    function flashloan(\n', '      address token,\n', '      uint256 amount,\n', '      bytes memory data\n', '    )\n', '        internal\n', '    {\n', '        // approve dydx solo pool\n', '        IERC20(token).approve(address(pool), amount + 1);\n', '\n', '        Info[] memory _infos = new Info[](1);\n', '        ActionArgs[] memory _args = new ActionArgs[](3);\n', '\n', '        _infos[0] = Info(address(this), 0);\n', '\n', '        AssetAmount memory _withdrawAmt = AssetAmount(\n', '            false,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount\n', '        );\n', '        ActionArgs memory _withdraw;\n', '        _withdraw.actionType = ActionType.Withdraw;\n', '        _withdraw.accountId = 0;\n', '        _withdraw.amount = _withdrawAmt;\n', '        _withdraw.primaryMarketId = tokenToMarketId(token);\n', '        _withdraw.otherAddress = address(this);\n', '\n', '        _args[0] = _withdraw;\n', '\n', '        ActionArgs memory _call;\n', '        _call.actionType = ActionType.Call;\n', '        _call.accountId = 0;\n', '        _call.otherAddress = address(this);\n', '        _call.data = data;\n', '\n', '        _args[1] = _call;\n', '\n', '        ActionArgs memory _deposit;\n', '        AssetAmount memory _depositAmt = AssetAmount(\n', '            true,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount + 1\n', '        );\n', '        _deposit.actionType = ActionType.Deposit;\n', '        _deposit.accountId = 0;\n', '        _deposit.amount = _depositAmt;\n', '        _deposit.primaryMarketId = tokenToMarketId(token);\n', '        _deposit.otherAddress = address(this);\n', '\n', '        _args[2] = _deposit;\n', '\n', '        pool.operate(_infos, _args);\n', '    }\n', '}']
