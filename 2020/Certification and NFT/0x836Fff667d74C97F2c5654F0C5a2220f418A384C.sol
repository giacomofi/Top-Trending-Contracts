['// Dependency file: contracts/interface/IERC20.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interface/ERC2917-Interface.sol\n', '\n', '// pragma solidity >=0.6.6;\n', "// import 'contracts/interface/IERC20.sol';\n", '\n', 'interface IERC2917 is IERC20 {\n', '\n', '    /// @dev This emit when interests amount per block is changed by the owner of the contract.\n', '    /// It emits with the old interests amount and the new interests amount.\n', '    event InterestsPerBlockChanged (uint oldValue, uint newValue);\n', '\n', "    /// @dev This emit when a users' productivity has changed\n", "    /// It emits with the user's address and the the value after the change.\n", '    event ProductivityIncreased (address indexed user, uint value);\n', '\n', "    /// @dev This emit when a users' productivity has changed\n", "    /// It emits with the user's address and the the value after the change.\n", '    event ProductivityDecreased (address indexed user, uint value);\n', '\n', '    \n', "    /// @dev Return the current contract's interests rate per block.\n", '    /// @return The amount of interests currently producing per each block.\n', '    function interestsPerBlock() external view returns (uint);\n', '\n', "    /// @notice Change the current contract's interests rate.\n", "    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\n", '    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestsPerBlockChanged event.\n', '    function changeInterestsPerBlock(uint value) external returns (bool);\n', '\n', '    /// @notice It will get the productivity of given user.\n', '    /// @dev it will return 0 if user has no productivity proved in the contract.\n', "    /// @return user's productivity and overall productivity.\n", '    function getProductivity(address user) external view returns (uint, uint);\n', '\n', "    /// @notice increase a user's productivity.\n", "    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n", '    /// @return true to confirm that the productivity added success.\n', '    function increaseProductivity(address user, uint value) external returns (uint);\n', '\n', "    /// @notice decrease a user's productivity.\n", "    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n", '    /// @return true to confirm that the productivity removed success.\n', '    function decreaseProductivity(address user, uint value) external returns (uint);\n', '\n', '    /// @notice take() will return the interests that callee will get at current block height.\n', '    /// @dev it will always calculated by block.number, so it will change when block height changes.\n', '    /// @return amount of the interests that user are able to mint() at current block height.\n', '    function take() external view returns (uint);\n', '\n', '    /// @notice similar to take(), but with the block height joined to calculate return.\n', '    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\n', '    /// @return amount of interests and the block height.\n', '    function takeWithBlock() external view returns (uint, uint);\n', '\n', '    /// @notice mint the avaiable interests to callee.\n', "    /// @dev once it mint, the amount of interests will transfer to callee's address.\n", '    /// @return the amount of interests minted.\n', '    function mint(address to) external returns (uint);\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/Upgradable.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'contract UpgradableProduct {\n', '    address public impl;\n', '\n', '    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\n', '\n', '    constructor() public {\n', '        impl = msg.sender;\n', '    }\n', '\n', '    modifier requireImpl() {\n', "        require(msg.sender == impl, 'FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function upgradeImpl(address _newImpl) public requireImpl {\n', "        require(_newImpl != address(0), 'INVALID_ADDRESS');\n", "        require(_newImpl != impl, 'NO_CHANGE');\n", '        address lastImpl = impl;\n', '        impl = _newImpl;\n', '        emit ImplChanged(lastImpl, _newImpl);\n', '    }\n', '}\n', '\n', 'contract UpgradableGovernance {\n', '    address public governor;\n', '\n', '    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\n', '\n', '    constructor() public {\n', '        governor = msg.sender;\n', '    }\n', '\n', '    modifier requireGovernor() {\n', "        require(msg.sender == governor, 'FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function upgradeGovernance(address _newGovernor) public requireGovernor {\n', "        require(_newGovernor != address(0), 'INVALID_ADDRESS');\n", "        require(_newGovernor != governor, 'NO_CHANGE');\n", '        address lastGovernor = governor;\n', '        governor = _newGovernor;\n', '        emit GovernorChanged(lastGovernor, _newGovernor);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Root file: contracts/WasabiToken.sol\n', '\n', 'pragma solidity >=0.6.6;\n', '\n', "// import 'contracts/interface/ERC2917-Interface.sol';\n", "// import 'contracts/libraries/Upgradable.sol';\n", "// import 'contracts/libraries/SafeMath.sol';\n", '\n', '/*\n', "    The Objective of ERC2917 Demo is to implement a decentralized staking mechanism, which calculates users' share\n", '    by accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\n', '\n', '        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\n', '       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\n', '       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\n', '\n', '*/\n', 'contract WasabiToken is IERC2917, UpgradableProduct, UpgradableGovernance {\n', '    using SafeMath for uint;\n', '\n', '    uint public mintCumulation;\n', '    uint public maxMintCumulation;\n', '\n', '    uint private unlocked = 1;\n', '    uint public wasabiPerBlock;\n', '\n', '    modifier lock() {\n', "        require(unlocked == 1, 'Locked');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    uint public nounce;\n', '\n', '    function incNounce() public {\n', '        nounce ++;\n', '    }\n', '\n', '    struct UserInfo {\n', '        uint amount;     // How many LP tokens the user has provided.\n', '        uint rewardDebt; // Reward debt. \n', '    }\n', '\n', '    mapping(address => UserInfo) public users;\n', '\n', '    // implementation of ERC20 interfaces.\n', '    string override public name;\n', '    string override public symbol;\n', '    uint8 override public decimals = 18;\n', '    uint override public totalSupply;\n', '\n', '    mapping(address => uint) override public balanceOf;\n', '    mapping(address => mapping(address => uint)) override public allowance;\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', "        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\n", '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        if (to == address(0)) { // burn\n', '            totalSupply = totalSupply.sub(value);\n', '        }\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external override returns (bool) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external override returns (bool) {\n', "        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\n", '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    // end of implementation of ERC20\n', '\n', '    // creation of the interests token.\n', '    constructor(uint _interestsRate, uint _maxMintCumulation) UpgradableProduct() UpgradableGovernance() public {\n', '        name        = "Wasabi Swap";\n', '        symbol      = "WASABI";\n', '        decimals    = 18;\n', '\n', '        wasabiPerBlock = _interestsRate;\n', '\n', '        maxMintCumulation = _maxMintCumulation;\n', '    }\n', '\n', '    // External function call\n', '    // This function adjust how many token will be produced by each block, eg:\n', '    // changeAmountPerBlock(100)\n', '    // will set the produce rate to 100/block.\n', '    function changeInterestsPerBlock(uint value) external override requireGovernor returns (bool) {\n', '        uint old = wasabiPerBlock;\n', "        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\n", '\n', '        wasabiPerBlock = value;\n', '\n', '        emit InterestsPerBlockChanged(old, value);\n', '        return true;\n', '    }\n', '\n', '    uint lastRewardBlock;\n', '    uint totalProductivity;\n', '    uint accAmountPerShare;\n', '\n', '        // Update reward variables of the given pool to be up-to-date.\n', '    function update() internal \n', '    {\n', '        if (block.number <= lastRewardBlock) {\n', '            return;\n', '        }\n', '\n', '        if (totalProductivity == 0) {\n', '            lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = block.number.sub(lastRewardBlock);\n', '        uint256 reward = multiplier.mul(wasabiPerBlock);\n', '        balanceOf[address(this)] = balanceOf[address(this)].add(reward);\n', '        totalSupply = totalSupply.add(reward);\n', '\n', '        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n', '        lastRewardBlock = block.number;\n', '    }\n', '\n', '    // External function call\n', "    // This function increase user's productivity and updates the global productivity.\n", "    // the users' actual share percentage will calculated by:\n", '    // Formula:     user_productivity / global_productivity\n', '    function increaseProductivity(address user, uint value) external override requireImpl returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '\n', "        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n", '\n', '        UserInfo storage userInfo = users[user];\n', '        update();\n', '        if (userInfo.amount > 0) {\n', '            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n', '            _transfer(address(this), user, pending);\n', '            mintCumulation = mintCumulation.add(pending);\n', '        }\n', '\n', '        totalProductivity = totalProductivity.add(value);\n', '\n', '        userInfo.amount = userInfo.amount.add(value);\n', '        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n', '        emit ProductivityIncreased(user, value);\n', '        return userInfo.amount;\n', '    }\n', '\n', '    // External function call \n', "    // This function will decreases user's productivity by value, and updates the global productivity\n", '    // it will record which block this is happenning and accumulates the area of (productivity * time)\n', '    function decreaseProductivity(address user, uint value) external override requireImpl returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '\n', "        require(value > 0, 'INSUFFICIENT_PRODUCTIVITY');\n", '        \n', '        UserInfo storage userInfo = users[user];\n', '        require(userInfo.amount >= value, "WASABI: FORBIDDEN");\n', '        update();\n', '        uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n', '        _transfer(address(this), user, pending);\n', '        mintCumulation = mintCumulation.add(pending);\n', '        userInfo.amount = userInfo.amount.sub(value);\n', '        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n', '        totalProductivity = totalProductivity.sub(value);\n', '\n', '        emit ProductivityDecreased(user, value);\n', '        return pending;\n', '    }\n', '\n', '    function take() external override view returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '\n', '        UserInfo storage userInfo = users[msg.sender];\n', '        uint _accAmountPerShare = accAmountPerShare;\n', '        // uint256 lpSupply = totalProductivity;\n', '        if (block.number > lastRewardBlock && totalProductivity != 0) {\n', '            uint multiplier = block.number.sub(lastRewardBlock);\n', '            uint reward = multiplier.mul(wasabiPerBlock);\n', '            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n', '        }\n', '        return userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n', '    }\n', '\n', '    function takeWithAddress(address user) external view returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '\n', '        UserInfo storage userInfo = users[user];\n', '        uint _accAmountPerShare = accAmountPerShare;\n', '        // uint256 lpSupply = totalProductivity;\n', '        if (block.number > lastRewardBlock && totalProductivity != 0) {\n', '            uint multiplier = block.number.sub(lastRewardBlock);\n', '            uint reward = multiplier.mul(wasabiPerBlock);\n', '            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n', '        }\n', '        return userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n', '    }\n', '\n', '    // Returns how much a user could earn plus the giving block number.\n', '    function takeWithBlock() external override view returns (uint, uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return (0, block.number);\n', '\n', '        UserInfo storage userInfo = users[msg.sender];\n', '        uint _accAmountPerShare = accAmountPerShare;\n', '        // uint256 lpSupply = totalProductivity;\n', '        if (block.number > lastRewardBlock && totalProductivity != 0) {\n', '            uint multiplier = block.number.sub(lastRewardBlock);\n', '            uint reward = multiplier.mul(wasabiPerBlock);\n', '            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n', '        }\n', '        return (userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt), block.number);\n', '    }\n', '\n', '\n', '    // External function call\n', '    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n', '    // Also it calculates global token supply from last time the user mint to this time.\n', '    function mint(address to) external override lock returns (uint) {\n', "        require(to != address(0), '');\n", '        return 0;\n', '    }\n', '\n', '    // Returns how many productivity a user has and global has.\n', '    function getProductivity(address user) external override view returns (uint, uint) {\n', '        return (users[user].amount, totalProductivity);\n', '    }\n', '\n', '    // Returns the current gorss product rate.\n', '    function interestsPerBlock() external override view returns (uint) {\n', '        return accAmountPerShare;\n', '    }\n', '}']