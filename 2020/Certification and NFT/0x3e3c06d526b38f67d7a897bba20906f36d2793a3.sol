['pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'interface IMerkleTreeTokensVerification {\n', '  function verify(\n', '    address _leaf,\n', '    bytes32 [] calldata proof,\n', '    uint256 [] calldata positions\n', '  )\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', 'interface ITokensTypeStorage {\n', '  function isRegistred(address _address) external view returns(bool);\n', '\n', '  function getType(address _address) external view returns(bytes32);\n', '\n', '  function isPermittedAddress(address _address) external view returns(bool);\n', '\n', '  function owner() external view returns(address);\n', '\n', '  function addNewTokenType(address _token, string calldata _type) external;\n', '\n', '  function setTokenTypeAsOwner(address _token, string calldata _type) external;\n', '}\n', '// Contains view methods for exchange\n', '// We have separated the methods for the fund and for the exchange because they contain different methods.\n', '\n', '\n', '\n', 'interface PoolPortalViewInterface {\n', '  function getDataForBuyingPool(IERC20 _poolToken, uint _type, uint256 _amount)\n', '    external\n', '    view\n', '    returns(\n', '      address[] memory connectorsAddress,\n', '      uint256[] memory connectorsAmount\n', '  );\n', '\n', '  function getBacorConverterAddressByRelay(address relay)\n', '  external\n', '  view\n', '  returns(address converter);\n', '\n', '  function getBancorConnectorsAmountByRelayAmount\n', '  (\n', '    uint256 _amount,\n', '    IERC20 _relay\n', '  )\n', '  external view returns(uint256 bancorAmount, uint256 connectorAmount);\n', '\n', '  function getBancorConnectorsByRelay(address relay)\n', '  external\n', '  view\n', '  returns(address[] memory connectorsAddress);\n', '\n', '  function getBancorRatio(address _from, address _to, uint256 _amount)\n', '  external\n', '  view\n', '  returns(uint256);\n', '\n', '  function getUniswapConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _exchange\n', '  )\n', '  external\n', '  view\n', '  returns(uint256 ethAmount, uint256 ercAmount);\n', '\n', '  function getUniswapV2ConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _exchange\n', '  )\n', '  external\n', '  view\n', '  returns(\n', '    uint256 tokenAmountOne,\n', '    uint256 tokenAmountTwo,\n', '    address tokenAddressOne,\n', '    address tokenAddressTwo\n', '  );\n', '\n', '  function getBalancerConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _pool\n', '  )\n', '  external\n', '  view\n', '  returns(\n', '    address[] memory tokens,\n', '    uint256[] memory tokensAmount\n', '  );\n', '\n', '  function getUniswapTokenAmountByETH(address _token, uint256 _amount)\n', '  external\n', '  view\n', '  returns(uint256);\n', '\n', '  function getTokenByUniswapExchange(address _exchange)\n', '  external\n', '  view\n', '  returns(address);\n', '}\n', 'interface DefiPortalInterface {\n', '  function callPayableProtocol(\n', '    address[] memory tokensToSend,\n', '    uint256[] memory amountsToSend,\n', '    bytes calldata _additionalData,\n', '    bytes32[] calldata _additionalArgs\n', '  )\n', '    external\n', '    payable\n', '    returns(\n', '      string memory eventType,\n', '      address[] memory tokensToReceive,\n', '      uint256[] memory amountsToReceive\n', '    );\n', '\n', '  function callNonPayableProtocol(\n', '    address[] memory tokensToSend,\n', '    uint256[] memory amountsToSend,\n', '    bytes calldata _additionalData,\n', '    bytes32[] calldata _additionalArgs\n', '  )\n', '    external\n', '    returns(\n', '      string memory eventType,\n', '      address[] memory tokensToReceive,\n', '      uint256[] memory amountsToReceive\n', '    );\n', '\n', '  function getValue(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '   external\n', '   view\n', '   returns(uint256);\n', '}\n', '\n', '\n', 'interface ExchangePortalInterface {\n', '  function trade(\n', '    IERC20 _source,\n', '    uint256 _sourceAmount,\n', '    IERC20 _destination,\n', '    uint256 _type,\n', '    bytes32[] calldata _proof,\n', '    uint256[] calldata _positions,\n', '    bytes calldata _additionalData,\n', '    bool _verifyDestanation\n', '  )\n', '    external\n', '    payable\n', '    returns (uint256);\n', '\n', '\n', '  function getValue(address _from, address _to, uint256 _amount) external view returns (uint256);\n', '\n', '  function getTotalValue(\n', '    address[] calldata _fromAddresses,\n', '    uint256[] calldata _amounts,\n', '    address _to\n', '    )\n', '    external\n', '    view\n', '   returns (uint256);\n', '}\n', '\n', '\n', 'interface IOneSplitAudit {\n', '  function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] calldata distribution,\n', '        uint256 disableFlags\n', '    ) external payable;\n', '\n', '  function getExpectedReturn(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 featureFlags // See contants in IOneSplit.sol\n', '    )\n', '      external\n', '      view\n', '      returns(\n', '          uint256 returnAmount,\n', '          uint256[] memory distribution\n', '      );\n', '}\n', '\n', '/*\n', '    Bancor Network interface\n', '*/\n', 'interface BancorNetworkInterface {\n', '   function getReturnByPath(\n', '     IERC20[] calldata _path,\n', '     uint256 _amount)\n', '     external\n', '     view\n', '     returns (uint256, uint256);\n', '\n', '    function convert(\n', '        IERC20[] calldata _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn\n', '    ) external payable returns (uint256);\n', '\n', '    function claimAndConvert(\n', '        IERC20[] calldata _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn\n', '    ) external returns (uint256);\n', '\n', '    function convertFor(\n', '        IERC20[] calldata _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for\n', '    ) external payable returns (uint256);\n', '\n', '    function claimAndConvertFor(\n', '        IERC20[] calldata _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for\n', '    ) external returns (uint256);\n', '\n', '    function conversionPath(\n', '        IERC20 _sourceToken,\n', '        IERC20 _targetToken\n', '    ) external view returns (address[] memory);\n', '}\n', '\n', '\n', 'interface IGetBancorData {\n', '  function getBancorContractAddresByName(string calldata _name) external view returns (address result);\n', '  function getBancorRatioForAssets(IERC20 _from, IERC20 _to, uint256 _amount) external view returns(uint256 result);\n', '  function getBancorPathForAssets(IERC20 _from, IERC20 _to) external view returns(address[] memory);\n', '}\n', '\n', '\n', '/*\n', '* This contract do swap for ERC20 via 1inch\n', '\n', '  Also this contract allow get ratio between crypto curency assets\n', '  Also get ratio for Bancor and Uniswap pools\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ExchangePortal is ExchangePortalInterface, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint public version = 4;\n', '\n', '  // Contract for handle tokens types\n', '  ITokensTypeStorage public tokensTypes;\n', '\n', '  // Contract for merkle tree white list verification\n', '  IMerkleTreeTokensVerification public merkleTreeWhiteList;\n', '\n', '  // 1INCH\n', '  IOneSplitAudit public oneInch;\n', '\n', '  // BANCOR\n', '  IGetBancorData public bancorData;\n', '\n', '  // CoTrader portals\n', '  PoolPortalViewInterface public poolPortal;\n', '  DefiPortalInterface public defiPortal;\n', '\n', '  // 1 inch flags\n', '  // By default support Bancor + Uniswap + Uniswap v2\n', '  uint256 oneInchFlags = 570425349;\n', '\n', '  // Enum\n', '  // NOTE: You can add a new type at the end, but DO NOT CHANGE this order,\n', '  // because order has dependency in other contracts like ConvertPortal\n', '  enum ExchangeType { Paraswap, Bancor, OneInch }\n', '\n', '  // This contract recognizes ETH by this address\n', '  IERC20 constant private ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '  // Trade event\n', '  event Trade(\n', '     address trader,\n', '     address src,\n', '     uint256 srcAmount,\n', '     address dest,\n', '     uint256 destReceived,\n', '     uint8 exchangeType\n', '  );\n', '\n', '  // black list for non trade able tokens\n', '  mapping (address => bool) disabledTokens;\n', '\n', '  // Modifier to check that trading this token is not disabled\n', '  modifier tokenEnabled(IERC20 _token) {\n', '    require(!disabledTokens[address(_token)]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev contructor\n', '  *\n', '  * @param _defiPortal             address of defiPortal contract\n', '  * @param _bancorData             address of GetBancorData helper\n', '  * @param _poolPortal             address of pool portal\n', '  * @param _oneInch                address of 1inch OneSplitAudit contract\n', '  * @param _tokensTypes            address of the ITokensTypeStorage\n', '  * @param _merkleTreeWhiteList    address of the IMerkleTreeWhiteList\n', '  */\n', '  constructor(\n', '    address _defiPortal,\n', '    address _bancorData,\n', '    address _poolPortal,\n', '    address _oneInch,\n', '    address _tokensTypes,\n', '    address _merkleTreeWhiteList\n', '    )\n', '    public\n', '  {\n', '    defiPortal = DefiPortalInterface(_defiPortal);\n', '    bancorData = IGetBancorData(_bancorData);\n', '    poolPortal = PoolPortalViewInterface(_poolPortal);\n', '    oneInch = IOneSplitAudit(_oneInch);\n', '    tokensTypes = ITokensTypeStorage(_tokensTypes);\n', '    merkleTreeWhiteList = IMerkleTreeTokensVerification(_merkleTreeWhiteList);\n', '  }\n', '\n', '\n', '  // EXCHANGE Functions\n', '\n', '  /**\n', '  * @dev Facilitates a trade for a SmartFund\n', '  *\n', '  * @param _source            ERC20 token to convert from\n', '  * @param _sourceAmount      Amount to convert from (in _source token)\n', '  * @param _destination       ERC20 token to convert to\n', '  * @param _type              The type of exchange to trade with\n', '  * @param _proof             Merkle tree proof (if not used just set [])\n', '  * @param _positions         Merkle tree positions (if not used just set [])\n', '  * @param _additionalData    For additional data (if not used just set 0x0)\n', '  * @param _verifyDestanation For additional check if token in list or not\n', '  *\n', '  * @return receivedAmount    The amount of _destination received from the trade\n', '  */\n', '  function trade(\n', '    IERC20 _source,\n', '    uint256 _sourceAmount,\n', '    IERC20 _destination,\n', '    uint256 _type,\n', '    bytes32[] calldata _proof,\n', '    uint256[] calldata _positions,\n', '    bytes calldata _additionalData,\n', '    bool _verifyDestanation\n', '  )\n', '    external\n', '    override\n', '    payable\n', '    tokenEnabled(_destination)\n', '    returns (uint256 receivedAmount)\n', '  {\n', '    // throw if destanation token not in white list\n', '    if(_verifyDestanation)\n', '      _verifyToken(address(_destination), _proof, _positions);\n', '\n', '    require(_source != _destination, "source can not be destination");\n', '\n', '    // check ETH payable case\n', '    if (_source == ETH_TOKEN_ADDRESS) {\n', '      require(msg.value == _sourceAmount);\n', '    } else {\n', '      require(msg.value == 0);\n', '    }\n', '\n', '    // SHOULD TRADE PARASWAP HERE\n', '    if (_type == uint(ExchangeType.Paraswap)) {\n', '      revert("PARASWAP not supported");\n', '    }\n', '    // SHOULD TRADE BANCOR HERE\n', '    else if (_type == uint(ExchangeType.Bancor)){\n', '      receivedAmount = _tradeViaBancorNewtork(\n', '          address(_source),\n', '          address(_destination),\n', '          _sourceAmount\n', '      );\n', '    }\n', '    // SHOULD TRADE 1INCH HERE\n', '    else if (_type == uint(ExchangeType.OneInch)){\n', '      receivedAmount = _tradeViaOneInch(\n', '          address(_source),\n', '          address(_destination),\n', '          _sourceAmount,\n', '          _additionalData\n', '      );\n', '    }\n', '\n', '    else {\n', '      // unknown exchange type\n', '      revert();\n', '    }\n', '\n', '    // Additional check\n', '    require(receivedAmount > 0, "received amount can not be zerro");\n', '\n', '    // Send destination\n', '    if (_destination == ETH_TOKEN_ADDRESS) {\n', '      (msg.sender).transfer(receivedAmount);\n', '    } else {\n', '      // transfer tokens received to sender\n', '      _destination.transfer(msg.sender, receivedAmount);\n', '    }\n', '\n', '    // Send remains\n', '    _sendRemains(_source, msg.sender);\n', '\n', '    // Trigger event\n', '    emit Trade(\n', '      msg.sender,\n', '      address(_source),\n', '      _sourceAmount,\n', '      address(_destination),\n', '      receivedAmount,\n', '      uint8(_type)\n', '    );\n', '  }\n', '\n', '  // Facilitates for send source remains\n', '  function _sendRemains(IERC20 _source, address _receiver) private {\n', '    // After the trade, any _source that exchangePortal holds will be sent back to msg.sender\n', '    uint256 endAmount = (_source == ETH_TOKEN_ADDRESS)\n', '    ? address(this).balance\n', '    : _source.balanceOf(address(this));\n', '\n', '    // Check if we hold a positive amount of _source\n', '    if (endAmount > 0) {\n', '      if (_source == ETH_TOKEN_ADDRESS) {\n', '        payable(_receiver).transfer(endAmount);\n', '      } else {\n', '        _source.transfer(_receiver, endAmount);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  // Facilitates for verify destanation token input (check if token in merkle list or not)\n', '  // revert transaction if token not in list\n', '  function _verifyToken(\n', '    address _destination,\n', '    bytes32 [] memory proof,\n', '    uint256 [] memory positions)\n', '    private\n', '    view\n', '  {\n', '    bool status = merkleTreeWhiteList.verify(_destination, proof, positions);\n', '\n', '    if(!status)\n', '      revert("Dest not in white list");\n', '  }\n', '\n', ' // Facilitates trade with 1inch\n', ' function _tradeViaOneInch(\n', '   address sourceToken,\n', '   address destinationToken,\n', '   uint256 sourceAmount,\n', '   bytes memory _additionalData\n', '   )\n', '   private\n', '   returns(uint256 destinationReceived)\n', ' {\n', '    (uint256 flags,\n', '     uint256[] memory _distribution) = abi.decode(_additionalData, (uint256, uint256[]));\n', '\n', '    if(IERC20(sourceToken) == ETH_TOKEN_ADDRESS) {\n', '      oneInch.swap.value(sourceAmount)(\n', '        IERC20(sourceToken),\n', '        IERC20(destinationToken),\n', '        sourceAmount,\n', '        1,\n', '        _distribution,\n', '        flags\n', '        );\n', '    } else {\n', '      _transferFromSenderAndApproveTo(IERC20(sourceToken), sourceAmount, address(oneInch));\n', '      oneInch.swap(\n', '        IERC20(sourceToken),\n', '        IERC20(destinationToken),\n', '        sourceAmount,\n', '        1,\n', '        _distribution,\n', '        flags\n', '        );\n', '    }\n', '\n', '    destinationReceived = tokenBalance(IERC20(destinationToken));\n', '    tokensTypes.addNewTokenType(destinationToken, "CRYPTOCURRENCY");\n', ' }\n', '\n', '\n', ' // Facilitates trade with Bancor\n', ' function _tradeViaBancorNewtork(\n', '   address sourceToken,\n', '   address destinationToken,\n', '   uint256 sourceAmount\n', '   )\n', '   private\n', '   returns(uint256 returnAmount)\n', ' {\n', '    // get latest bancor contracts\n', '    BancorNetworkInterface bancorNetwork = BancorNetworkInterface(\n', '      bancorData.getBancorContractAddresByName("BancorNetwork")\n', '    );\n', '\n', '    // Get Bancor tokens path\n', '    address[] memory path = bancorData.getBancorPathForAssets(IERC20(sourceToken), IERC20(destinationToken));\n', '\n', '    // Convert addresses to ERC20\n', '    IERC20[] memory pathInERC20 = new IERC20[](path.length);\n', '    for(uint i=0; i<path.length; i++){\n', '        pathInERC20[i] = IERC20(path[i]);\n', '    }\n', '\n', '    // trade\n', '    if (IERC20(sourceToken) == ETH_TOKEN_ADDRESS) {\n', '      returnAmount = bancorNetwork.convert.value(sourceAmount)(pathInERC20, sourceAmount, 1);\n', '    }\n', '    else {\n', '      _transferFromSenderAndApproveTo(IERC20(sourceToken), sourceAmount, address(bancorNetwork));\n', '      returnAmount = bancorNetwork.claimAndConvert(pathInERC20, sourceAmount, 1);\n', '    }\n', '\n', '    tokensTypes.addNewTokenType(destinationToken, "BANCOR_ASSET");\n', ' }\n', '\n', '\n', '  /**\n', '  * @dev Transfers tokens to this contract and approves them to another address\n', '  *\n', '  * @param _source          Token to transfer and approve\n', '  * @param _sourceAmount    The amount to transfer and approve (in _source token)\n', '  * @param _to              Address to approve to\n', '  */\n', '  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\n', '    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\n', '    // reset previos approve because some tokens require allowance 0\n', '    _source.approve(_to, 0);\n', '    // approve\n', '    _source.approve(_to, _sourceAmount);\n', '  }\n', '\n', '\n', '\n', '  // VIEW Functions\n', '\n', '  function tokenBalance(IERC20 _token) private view returns (uint256) {\n', '    if (_token == ETH_TOKEN_ADDRESS)\n', '      return address(this).balance;\n', '    return _token.balanceOf(address(this));\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the ratio by amount of token _from in token _to by totekn type\n', '  *\n', "  * @param _from      Address of token we're converting from\n", "  * @param _to        Address of token we're getting the value in\n", '  * @param _amount    The amount of _from\n', '  *\n', '  * @return best price from 1inch for ERC20, or ratio for Uniswap and Bancor pools\n', '  */\n', '  function getValue(address _from, address _to, uint256 _amount)\n', '    public\n', '    override\n', '    view\n', '    returns (uint256)\n', '  {\n', '    if(_amount > 0){\n', '      // get asset type\n', '      bytes32 assetType = tokensTypes.getType(_from);\n', '\n', '      // get value by asset type\n', '      if(assetType == bytes32("CRYPTOCURRENCY")){\n', '        return getValueViaDEXsAgregators(_from, _to, _amount);\n', '      }\n', '      else if (assetType == bytes32("BANCOR_ASSET")){\n', '        return getValueViaBancor(_from, _to, _amount);\n', '      }\n', '      else if (assetType == bytes32("UNISWAP_POOL")){\n', '        return getValueForUniswapPools(_from, _to, _amount);\n', '      }\n', '      else if (assetType == bytes32("UNISWAP_POOL_V2")){\n', '        return getValueForUniswapV2Pools(_from, _to, _amount);\n', '      }\n', '      else if (assetType == bytes32("BALANCER_POOL")){\n', '        return getValueForBalancerPool(_from, _to, _amount);\n', '      }\n', '      else{\n', '        // Unmarked type, try find value\n', '        return findValue(_from, _to, _amount);\n', '      }\n', '    }\n', '    else{\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev find the ratio by amount of token _from in token _to trying all available methods\n', '  *\n', "  * @param _from      Address of token we're converting from\n", "  * @param _to        Address of token we're getting the value in\n", '  * @param _amount    The amount of _from\n', '  *\n', '  * @return best price from 1inch for ERC20, or ratio for Uniswap and Bancor pools\n', '  */\n', '  function findValue(address _from, address _to, uint256 _amount) private view returns (uint256) {\n', '     if(_amount > 0){\n', '       // Check at first value from defi portal, maybe there are new defi protocols\n', '       // If defiValue return 0 continue check from another sources\n', '       uint256 defiValue = defiPortal.getValue(_from, _to, _amount);\n', '       if(defiValue > 0)\n', '          return defiValue;\n', '\n', '       // If 1inch return 0, check from Bancor network for ensure this is not a Bancor pool\n', '       uint256 oneInchResult = getValueViaDEXsAgregators(_from, _to, _amount);\n', '       if(oneInchResult > 0)\n', '         return oneInchResult;\n', '\n', '       // If Bancor return 0, check from Balancer network for ensure this is not Balancer asset\n', '       uint256 bancorResult = getValueViaBancor(_from, _to, _amount);\n', '       if(bancorResult > 0)\n', '          return bancorResult;\n', '\n', '       // If Balancer return 0, check from Uniswap pools for ensure this is not Uniswap pool\n', '       uint256 balancerResult = getValueForBalancerPool(_from, _to, _amount);\n', '       if(balancerResult > 0)\n', '          return balancerResult;\n', '\n', '       // If Uniswap return 0, check from Uniswap version 2 pools for ensure this is not Uniswap V2 pool\n', '       uint256 uniswapResult = getValueForUniswapPools(_from, _to, _amount);\n', '       if(uniswapResult > 0)\n', '          return uniswapResult;\n', '\n', '       // Uniswap V2 pools return 0 if these is not a Uniswap V2 pool\n', '       return getValueForUniswapV2Pools(_from, _to, _amount);\n', '     }\n', '     else{\n', '       return 0;\n', '     }\n', '  }\n', '\n', '\n', '  // helper for get value via 1inch\n', '  // in this interface can be added more DEXs aggregators\n', '  function getValueViaDEXsAgregators(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '  public view returns (uint256){\n', '    // if direction the same, just return amount\n', '    if(_from == _to)\n', '       return _amount;\n', '\n', '    // try get value via 1inch\n', '    if(_amount > 0){\n', '      // try get value from 1inch aggregator\n', '      return getValueViaOneInch(_from, _to, _amount);\n', '    }\n', '    else{\n', '      return 0;\n', '    }\n', '  }\n', '\n', '\n', '  // helper for get ratio between assets in 1inch aggregator\n', '  function getValueViaOneInch(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 value)\n', '  {\n', '    // if direction the same, just return amount\n', '    if(_from == _to)\n', '       return _amount;\n', '\n', '    // try get rate\n', '    try oneInch.getExpectedReturn(\n', '       IERC20(_from),\n', '       IERC20(_to),\n', '       _amount,\n', '       10,\n', '       oneInchFlags)\n', '      returns(uint256 returnAmount, uint256[] memory distribution)\n', '     {\n', '       value = returnAmount;\n', '     }\n', '     catch{\n', '       value = 0;\n', '     }\n', '  }\n', '\n', '\n', '  // helper for get ratio between assets in Bancor network\n', '  function getValueViaBancor(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 value)\n', '  {\n', '    // if direction the same, just return amount\n', '    if(_from == _to)\n', '       return _amount;\n', '\n', '    // try get rate\n', '    if(_amount > 0){\n', '      try poolPortal.getBancorRatio(_from, _to, _amount) returns(uint256 result){\n', '        value = result;\n', '      }catch{\n', '        value = 0;\n', '      }\n', '    }else{\n', '      return 0;\n', '    }\n', '  }\n', '\n', '\n', '  // helper for get value via Balancer\n', '  function getValueForBalancerPool(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 value)\n', '  {\n', '    // get value for each pool share\n', '    try poolPortal.getBalancerConnectorsAmountByPoolAmount(_amount, _from)\n', '    returns(\n', '      address[] memory tokens,\n', '      uint256[] memory tokensAmount\n', '    )\n', '    {\n', '     // convert and sum value via DEX aggregator\n', '     for(uint i = 0; i < tokens.length; i++){\n', '       value += getValueViaDEXsAgregators(tokens[i], _to, tokensAmount[i]);\n', '     }\n', '    }\n', '    catch{\n', '      value = 0;\n', '    }\n', '  }\n', '\n', '\n', '  // helper for get ratio between pools in Uniswap network\n', '  // _from - should be uniswap pool address\n', '  function getValueForUniswapPools(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    // get connectors amount\n', '    try poolPortal.getUniswapConnectorsAmountByPoolAmount(\n', '      _amount,\n', '      _from\n', '    ) returns (uint256 ethAmount, uint256 ercAmount)\n', '    {\n', '      // get ERC amount in ETH\n', '      address token = poolPortal.getTokenByUniswapExchange(_from);\n', '      uint256 ercAmountInETH = getValueViaDEXsAgregators(token, address(ETH_TOKEN_ADDRESS), ercAmount);\n', '      // sum ETH with ERC amount in ETH\n', '      uint256 totalETH = ethAmount.add(ercAmountInETH);\n', '\n', '      // if _to == ETH no need additional convert, just return ETH amount\n', '      if(_to == address(ETH_TOKEN_ADDRESS)){\n', '        return totalETH;\n', '      }\n', '      // convert ETH into _to asset via 1inch\n', '      else{\n', '        return getValueViaDEXsAgregators(address(ETH_TOKEN_ADDRESS), _to, totalETH);\n', '      }\n', '    }catch{\n', '      return 0;\n', '    }\n', '  }\n', '\n', '\n', '  // helper for get ratio between pools in Uniswap network version 2\n', '  // _from - should be uniswap pool address\n', '  function getValueForUniswapV2Pools(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    // get connectors amount by pool share\n', '    try poolPortal.getUniswapV2ConnectorsAmountByPoolAmount(\n', '      _amount,\n', '      _from\n', '    ) returns (\n', '      uint256 tokenAmountOne,\n', '      uint256 tokenAmountTwo,\n', '      address tokenAddressOne,\n', '      address tokenAddressTwo\n', '      )\n', '    {\n', '      // convert connectors amount via DEX aggregator\n', '      uint256 amountOne = getValueViaDEXsAgregators(tokenAddressOne, _to, tokenAmountOne);\n', '      uint256 amountTwo = getValueViaDEXsAgregators(tokenAddressTwo, _to, tokenAmountTwo);\n', '      // return value\n', '      return amountOne + amountTwo;\n', '    }catch{\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total value of array of tokens and amounts\n', '  *\n', "  * @param _fromAddresses    Addresses of all the tokens we're converting from\n", '  * @param _amounts          The amounts of all the tokens\n', "  * @param _to               The token who's value we're converting to\n", '  *\n', '  * @return The total value of _fromAddresses and _amounts in terms of _to\n', '  */\n', '  function getTotalValue(\n', '    address[] calldata _fromAddresses,\n', '    uint256[] calldata _amounts,\n', '    address _to)\n', '    external\n', '    override\n', '    view\n', '    returns (uint256)\n', '  {\n', '    uint256 sum = 0;\n', '    for (uint256 i = 0; i < _fromAddresses.length; i++) {\n', '      sum = sum.add(getValue(_fromAddresses[i], _to, _amounts[i]));\n', '    }\n', '    return sum;\n', '  }\n', '\n', '  // SETTERS Functions\n', '\n', '  /**\n', '  * @dev Allows the owner to disable/enable the buying of a token\n', '  *\n', '  * @param _token      Token address whos trading permission is to be set\n', '  * @param _enabled    New token permission\n', '  */\n', '  function setToken(address _token, bool _enabled) external onlyOwner {\n', '    disabledTokens[_token] = _enabled;\n', '  }\n', '\n', '  // owner can change oneInch\n', '  function setNewOneInch(address _oneInch) external onlyOwner {\n', '    oneInch = IOneSplitAudit(_oneInch);\n', '  }\n', '\n', '  // owner can set new pool portal\n', '  function setNewPoolPortal(address _poolPortal) external onlyOwner {\n', '    poolPortal = PoolPortalViewInterface(_poolPortal);\n', '  }\n', '\n', '  // owner can set new defi portal\n', '  function setNewDefiPortal(address _defiPortal) external onlyOwner {\n', '    defiPortal = DefiPortalInterface(_defiPortal);\n', '  }\n', '\n', '  // owner of portal can update 1 incg DEXs sources\n', '  function setOneInchFlags(uint256 _oneInchFlags) external onlyOwner {\n', '    oneInchFlags = _oneInchFlags;\n', '  }\n', '\n', '  // owner of portal can change getBancorData helper, for case if Bancor do some major updates\n', '  function setNewGetBancorData(address _bancorData) external onlyOwner {\n', '    bancorData = IGetBancorData(_bancorData);\n', '  }\n', '\n', '  // fallback payable function to receive ether from other contract addresses\n', '  fallback() external payable {}\n', '\n', '}']