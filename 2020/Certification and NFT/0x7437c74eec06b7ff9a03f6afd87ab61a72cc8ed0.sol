['pragma solidity 0.6.4;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', ' \n', 'contract Ownable is Context {\n', '    address private _governor;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _governor = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _governor;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_governor == _msgSender(), "Governance: caller is not the Governor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_governor, address(0));\n', '        _governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Governance: new Governor is the zero address");\n', '        emit OwnershipTransferred(_governor, newOwner);\n', '        _governor = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', 'contract Destructible {\n', '    address payable public grand_owner;\n', '\n', '    event GrandOwnershipTransferred(address indexed previous_owner, address indexed new_owner);\n', '\n', '    constructor() public {\n', '        grand_owner = msg.sender; //even after transfering ownership, the deployer will still be the grandowner\n', '    }\n', '\n', '    function transferGrandOwnership(address payable _to) external {\n', '        require(msg.sender == grand_owner, "Access denied (only grand owner)");\n', '        \n', '        grand_owner = _to;\n', '    }\n', '\n', '    function destruct() external {\n', '        require(msg.sender == grand_owner, "Access denied (only grand owner)");\n', '\n', '        selfdestruct(grand_owner);\n', '    }\n', '}\n', '\n', 'contract spartanx4 is Ownable, Destructible, Pausable {\n', '    \n', '    struct User {\n', '        uint256 cycle;\n', '        address upline;\n', '        uint256 referrals;\n', '        uint256 payouts;\n', '        uint256 direct_bonus;\n', '        uint256 pool_bonus;\n', '        uint256 match_bonus;\n', '        uint256 deposit_amount;\n', '        uint256 deposit_payouts;\n', '        uint40  deposit_time;\n', '        uint256 total_deposits;\n', '        uint256 total_payouts;\n', '        uint256 total_structure;\n', '    }\n', '\n', '    mapping(address => User) public users;\n', '\n', '    uint256[] public cycles;                        \n', '    uint8[] public ref_bonuses;                    \n', '\n', '    uint8[] public pool_bonuses;                   \n', '    uint40 public pool_last_draw = uint40(block.timestamp);\n', '    uint256 public pool_cycle;\n', '    uint256 public pool_balance;\n', '    mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;\n', '    mapping(uint8 => address) public pool_top;\n', '\n', '    uint256 public total_withdraw;\n', '    uint256 public total_participants;\n', '    \n', '    event Upline(address indexed addr, address indexed upline);\n', '    event NewDeposit(address indexed addr, uint256 amount);\n', '    event DirectPayout(address indexed addr, address indexed from, uint256 amount);\n', '    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\n', '    event PoolPayout(address indexed addr, uint256 amount);\n', '    event Withdraw(address indexed addr, uint256 amount);\n', '    event LimitReached(address indexed addr, uint256 amount);\n', '\n', '    constructor() public {\n', '        \n', '        ref_bonuses.push(20);\n', '        ref_bonuses.push(15);\n', '        ref_bonuses.push(10);\n', '        ref_bonuses.push(5);\n', '        ref_bonuses.push(3);\n', '        \n', '\n', '        pool_bonuses.push(40);\n', '        pool_bonuses.push(30);\n', '        pool_bonuses.push(20);\n', '        pool_bonuses.push(10);\n', '\n', '\n', '        cycles.push(5 ether);\n', '        cycles.push(20 ether);\n', '        cycles.push(50 ether);\n', '        cycles.push(100 ether);\n', '        \n', '    }\n', '\n', '    receive() payable external whenNotPaused {\n', '        _deposit(msg.sender, msg.value); \n', '    }\n', '\n', '\n', '    function _setUpline(address _addr, address _upline) public {\n', '        \n', '        if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time > 0 || _upline == owner())) {\n', '       \n', '            users[_addr].upline = _upline; \n', '            users[_upline].referrals++; \n', '\n', '            emit Upline(_addr, _upline);\n', '\n', '            for(uint8 i = 0; i < ref_bonuses.length; i++) {\n', '                \n', '                if(_upline == address(0)) break;\n', '\n', '                users[_upline].total_structure++;\n', '\n', '                _upline = users[_upline].upline;\n', '            }\n', '        }\n', '    }\n', '\n', '    \n', '\n', '    function _deposit(address _addr, uint256 _amount) private {\n', '        \n', '        \n', '        \n', '        require(users[_addr].upline != address(0) || _addr == owner(), "No upline, you need an upline"); \n', '        \n', '        if(users[_addr].deposit_time == 0) { total_participants += 1; }\n', '        \n', '        if(users[_addr].deposit_time > 0) { \n', '            users[_addr].cycle++;\n', '            \n', '            \n', '            \n', '            require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], "Bad amount");\n', '        }\n', '        else require(_amount >= 0.1 ether && _amount <= cycles[0], "Bad amount");\n', '        \n', '        users[_addr].payouts = 0;\n', '        users[_addr].deposit_amount = _amount;\n', '        users[_addr].deposit_payouts = 0;\n', '        users[_addr].deposit_time = uint40(block.timestamp);\n', '        users[_addr].total_deposits += _amount;\n', '        \n', '        emit NewDeposit(_addr, _amount);\n', '\n', '        if(users[_addr].upline != address(0)) { \n', '            \n', '            users[users[_addr].upline].direct_bonus += _amount / 10; \n', '            \n', '            emit DirectPayout(users[_addr].upline, _addr, _amount / 10);\n', '        }\n', '\n', '        _pollDeposits(_addr, _amount); \n', '\n', '        if(pool_last_draw + 24 hours < block.timestamp) { \n', '            _drawPool();\n', '        }\n', '\n', '        payable(owner()).transfer(_amount / 100);\n', '    }\n', '\n', '    function _pollDeposits(address _addr, uint256 _amount) private {\n', '        \n', '        pool_balance += _amount / 20;\n', '\n', '        address upline = users[_addr].upline;\n', '\n', '        if(upline == address(0)) return; \n', '        \n', '        pool_users_refs_deposits_sum[pool_cycle][upline] += _amount; \n', '        \n', '        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n', '            \n', '            if(pool_top[i] == upline) break;\n', '\n', '            if(pool_top[i] == address(0)) {  \n', '                pool_top[i] = upline;\n', '                break;\n', '            }\n', '\n', '           \n', '            if(pool_users_refs_deposits_sum[pool_cycle][upline] > pool_users_refs_deposits_sum[pool_cycle][pool_top[i]]) {\n', '                for(uint8 j = i + 1; j < pool_bonuses.length; j++) {\n', '                    \n', '                    \n', '                    if(pool_top[j] == upline) { //if it meets the same upline again, break out of the loop\n', '                        for(uint8 k = j; k <= pool_bonuses.length; k++) {\n', '                            pool_top[k] = pool_top[k + 1];\n', '                        }\n', '                        break;\n', '                    }\n', '                }\n', '\n', '                for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {\n', '                    pool_top[j] = pool_top[j - 1];\n', '                }\n', '\n', '                pool_top[i] = upline;\n', '\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _refPayout(address _addr, uint256 _amount) private {\n', '        address up = users[_addr].upline;\n', '\n', '        for(uint8 i = 0; i < ref_bonuses.length; i++) { \n', '            if(up == address(0)) break;\n', '            \n', '            if(users[up].referrals >= i + 1) {\n', '                uint256 bonus = _amount * ref_bonuses[i] / 100;\n', '                \n', '                users[up].match_bonus += bonus;\n', '\n', '                emit MatchPayout(up, _addr, bonus);\n', '            }\n', '\n', '            up = users[up].upline;\n', '        }\n', '    }\n', '\n', '    function _drawPool() private {\n', '        pool_last_draw = uint40(block.timestamp);\n', '        pool_cycle++; // increase pool_cycle by 1\n', '\n', '        uint256 draw_amount = pool_balance / 10; \n', '\n', '        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n', '            if(pool_top[i] == address(0)) break; \n', '            uint256 win = draw_amount * pool_bonuses[i] / 100; \n', '           \n', '            users[pool_top[i]].pool_bonus += win; \n', '            pool_balance -= win;\n', '\n', '            emit PoolPayout(pool_top[i], win);\n', '        }\n', '        \n', '        for(uint8 i = 0; i < pool_bonuses.length; i++) { \n', '        \n', '        \n', '            pool_top[i] = address(0);\n', '        }\n', '    }\n', '\n', '    function deposit(address _upline) payable external whenNotPaused {\n', '        _setUpline(msg.sender, _upline);\n', '        _deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function withdraw() external whenNotPaused {\n', '        \n', '        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\n', '        \n', '        require(users[msg.sender].payouts < max_payout, "users payouts completed");\n', '\n', '       \n', '        if(to_payout > 0) {\n', '            \n', '           \n', '            if(users[msg.sender].payouts + to_payout > max_payout) {\n', '                to_payout = max_payout - users[msg.sender].payouts;\n', '            }\n', '\n', '            users[msg.sender].deposit_payouts += to_payout;\n', '            users[msg.sender].payouts += to_payout;\n', '\n', '            _refPayout(msg.sender, to_payout); //this is matching bonus to referer\n', '        }\n', '        \n', '        // Direct Bonus payout\n', '        if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {\n', '            uint256 direct_bonus = users[msg.sender].direct_bonus;\n', '\n', '            if(users[msg.sender].payouts + direct_bonus > max_payout) {\n', '                direct_bonus = max_payout - users[msg.sender].payouts;\n', '            }\n', '\n', '            users[msg.sender].direct_bonus -= direct_bonus;\n', '            users[msg.sender].payouts += direct_bonus;\n', '            to_payout += direct_bonus;\n', '        }\n', '        \n', '        // Pool payout\n', '        if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {\n', '            uint256 pool_bonus = users[msg.sender].pool_bonus;\n', '\n', '            if(users[msg.sender].payouts + pool_bonus > max_payout) {\n', '                pool_bonus = max_payout - users[msg.sender].payouts;\n', '            }\n', '\n', '            users[msg.sender].pool_bonus -= pool_bonus;\n', '            users[msg.sender].payouts += pool_bonus;\n', '            to_payout += pool_bonus;\n', '        }\n', '\n', '        // Match payout\n', '        if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {\n', '            uint256 match_bonus = users[msg.sender].match_bonus;\n', '\n', '            if(users[msg.sender].payouts + match_bonus > max_payout) {\n', '                match_bonus = max_payout - users[msg.sender].payouts;\n', '            }\n', '\n', '            users[msg.sender].match_bonus -= match_bonus;\n', '            users[msg.sender].payouts += match_bonus;\n', '            to_payout += match_bonus;\n', '        }\n', '\n', '        require(to_payout > 0, "Zero payout");\n', '        \n', '        users[msg.sender].total_payouts += to_payout;\n', '        total_withdraw += to_payout;\n', '\n', '        payable(msg.sender).transfer(to_payout);\n', '\n', '        emit Withdraw(msg.sender, to_payout);\n', '\n', '        if(users[msg.sender].payouts >= max_payout) {\n', '            emit LimitReached(msg.sender, users[msg.sender].payouts);\n', '        }\n', '    }\n', '    \n', '    function drawPool() external onlyOwner {\n', '        _drawPool();\n', '    }\n', '    \n', '    function pause() external onlyOwner {\n', '        _pause();\n', '    }\n', '    \n', '    function unpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\n', '        \n', '         return _amount * 40 / 10;\n', '    }\n', '\n', '    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {\n', '        max_payout = this.maxPayoutOf(users[_addr].deposit_amount);\n', '\n', '        if(users[_addr].deposit_payouts < max_payout) { //if he has not gotten up to the max 400% yet on his deposit payout so far, let this line run\n', '            \n', '            \n', '            payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 50) - users[_addr].deposit_payouts;\n', '            \n', '            if(users[_addr].deposit_payouts + payout > max_payout) { \n', '                \n', '                payout = max_payout - users[_addr].deposit_payouts;\n', '            }\n', '        }\n', '    }\n', '    \n', '\n', '    /*\n', '        Only external call\n', '    */\n', '    function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {\n', '        return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);\n', '    }\n', '\n', '    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\n', '        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\n', '    }\n', '\n', '    function contractInfo() view external returns(uint256 _total_withdraw, uint40 _pool_last_draw, uint256 _pool_balance, uint256 _pool_lider) {\n', '        return (total_withdraw, pool_last_draw, pool_balance, pool_users_refs_deposits_sum[pool_cycle][pool_top[0]]);\n', '    }\n', '\n', '    function poolTopInfo() view external returns(address[4] memory addrs, uint256[4] memory deps) {\n', '        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n', '            if(pool_top[i] == address(0)) break;\n', '\n', '            addrs[i] = pool_top[i];\n', '            deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];\n', '        }\n', '    }\n', '}\n', '\n', 'contract Sync is spartanx4 {\n', '    bool public sync_close = false;\n', '\n', '  \n', '\n', '       function sync(address[] calldata _users, address[] calldata _uplines, uint256[] calldata _data) external onlyOwner {\n', '            require(!sync_close, "Sync already closed");\n', '    \n', '            for(uint256 i = 0; i <  _users.length; i++) {\n', '                address addr = _users[i];\n', '                uint256 q = i * 12;\n', '    \n', '    \n', '                if(users[addr].total_deposits == 0) {\n', '                    \n', '                    emit Upline(addr, _uplines[i]);\n', '                }\n', '    \n', '                users[addr].cycle = _data[q];\n', '                users[addr].upline = _uplines[i];\n', '                users[addr].referrals = _data[q + 1];\n', '                users[addr].payouts = _data[q + 2];\n', '                users[addr].direct_bonus = _data[q + 3];\n', '                users[addr].pool_bonus = _data[q + 4];\n', '                users[addr].match_bonus = _data[q + 5];\n', '                users[addr].deposit_amount = _data[q + 6];\n', '                users[addr].deposit_payouts = _data[q + 7];\n', '                users[addr].deposit_time = uint40(_data[q + 8]);\n', '                users[addr].total_deposits = _data[q + 9];\n', '                users[addr].total_payouts = _data[q + 10];\n', '                users[addr].total_structure = _data[q + 11];\n', '            }\n', '        }\n', '        \n', '        \n', '    \n', '\n', '    function syncGlobal(uint40 _pool_last_draw, uint256 _pool_cycle, uint256 _pool_balance, uint256 _total_withdraw, address[] calldata _pool_top) external onlyOwner {\n', '        require(!sync_close, "Sync already close");\n', '\n', '        pool_last_draw = _pool_last_draw;\n', '        pool_cycle = _pool_cycle;\n', '        pool_balance = _pool_balance;\n', '        total_withdraw = _total_withdraw;\n', '\n', '        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n', '            pool_top[i] = _pool_top[i];\n', '        }\n', '    }\n', '\n', '    function syncUp() external payable {}\n', '\n', '    function syncClose() external onlyOwner {\n', '        require(!sync_close, "Sync already close");\n', '\n', '        sync_close = true;\n', '    }\n', '    \n', '    \n', '}']