['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * SPDX-License-Identifier: <SPDX-License>\n', ' * @dev Implementation of the {ICXN} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {CXNPresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-CXN-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of CXN applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {ICXN-approve}.\n', ' */\n', '\n', '\n', 'contract CXN {\n', '    \n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    bool private _initialized;\n', '\n', '    uint256 private _burnRate; // 7%\n', '    uint256 private _forStakers; // 4%\n', '\n', '    uint256 private _burnRateStaker;\n', '    uint256 private _unstakeForStaker;\n', '\n', '    uint256 private _Burnt_Limit;\n', '    uint256 private _Min_Stake;\n', '\n', '    uint256 private _Scale;\n', '    \n', '\n', '    struct Party {\n', '\t\tbool elite;\n', '\t\tuint256 balance;\n', '\t\tuint256 staked;\n', '        uint256 payoutstake;\n', '\t\tmapping(address => uint256) allowance;\n', '\t}\n', '\n', '\tstruct Board {\n', '\t\tuint256 totalSupply;\n', '\t\tuint256 totalStaked;\n', '        uint256 totalBurnt;\n', '        uint256 retPerToken;\n', '\t\tmapping(address => Party) parties;\n', '\t\taddress owner;\n', '\t}\n', '\n', '    Board private _board;\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\n', '\tevent Eliters(address indexed Party, bool status);\n', '\tevent Stake(address indexed owner, uint256 tokens);\n', '\tevent UnStake(address indexed owner, uint256 tokens);\n', '    event StakeGain(address indexed owner, uint256 tokens);\n', '\tevent Burn(uint256 tokens);\n', '\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor () public {\n', '        \n', '        require(!_initialized);\n', '\n', '       _totalSupply = 3e26;\n', '       _name = "CXN Network";\n', '       _symbol = "CXN";\n', '       _decimals = 18;\n', '       _burnRate = 7;\n', '       _forStakers = 4;\n', '       _burnRateStaker = 5;\n', '       _unstakeForStaker= 3;\n', '       _Burnt_Limit=1e26;\n', '       _Scale = 2**64;\n', '       _Min_Stake= 1000;\n', '       \n', '        _board.owner = msg.sender;\n', '\t\t_board.totalSupply = _totalSupply;\n', '\t\t_board.parties[msg.sender].balance = _totalSupply;\n', '        _board.retPerToken = 0;\n', '\t\temit Transfer(address(0x0), msg.sender, _totalSupply);\n', '\t\teliters(msg.sender, true);\n', '\n', '        _initialized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {CXN} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {ICXN-balanceOf} and {ICXN-transfer}.\n', '     */\n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ICXN-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _board.totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ICXN-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _board.parties[account].balance;\n', '    }\n', '\n', '    function stakeOf(address account) public view returns (uint256) {\n', '        return _board.parties[account].staked;\n', '    }\n', '\n', '    function totalStake() public view returns (uint256) {\n', '        return _board.totalStaked;\n', '    }\n', '\n', '    function changeAdmin(address _to) external virtual{\n', '        require(msg.sender == _board.owner);\n', '        \n', '        \n', '        transfer(_to,_board.parties[msg.sender].balance);\n', '        eliters(_to,true);\n', '        \n', '        _board.owner = msg.sender;\n', '        \n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev See {ICXN-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ICXN-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) external view virtual returns (uint256) {\n', '        return _board.parties[owner].allowance[spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {ICXN-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) external virtual returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ICXN-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {CXN};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _board.parties[sender].allowance[msg.sender].sub(amount, "CXN: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ICXN-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n', '        _approve(msg.sender, spender, _board.parties[msg.sender].allowance[spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ICXN-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n', '        _approve(msg.sender, spender, _board.parties[msg.sender].allowance[spender].sub(subtractedValue, "CXN: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "CXN: transfer from the zero address");\n', '        require(recipient != address(0), "CXN: transfer to the zero address");\n', '        require(balanceOf(sender) >= amount);\n', '\n', '        _board.parties[sender].balance = _board.parties[sender].balance.sub(amount, "CXN: transfer amount exceeds balance");\n', '\n', '        uint256 toBurn = amount.mul(_burnRate).div(100);\n', '\n', '        if(_board.totalSupply < _Burnt_Limit || _board.parties[sender].elite){\n', '            toBurn = 0;\n', '        }\n', '        uint256 _transferred = amount.sub(toBurn);\n', '\n', '        _board.parties[recipient].balance = _board.parties[recipient].balance.add(_transferred);\n', '        \n', '        emit Transfer(sender,recipient,_transferred);\n', '\n', '        if(toBurn > 0){\n', '            if(_board.totalStaked > 0){\n', '                uint256 toDistribute = amount.mul(_forStakers).div(100);\n', '\n', '               _board.retPerToken = _board.retPerToken.add(toDistribute.mul(_Scale).div(_board.totalStaked));\n', '\n', '              toBurn = toBurn.sub(toDistribute);\n', '            }\n', '\n', '            _board.totalSupply = _board.totalSupply.sub(toBurn);\n', '            emit Transfer(sender, address(0x0), toBurn);\n', '\t\t\temit Burn(toBurn);\n', '        }\n', '\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "CXN: burn from the zero address");\n', '\n', '\n', '        _board.parties[account].balance = _board.parties[account].balance.sub(amount, "CXN: burn amount exceeds balance");\n', '        _board.totalSupply = _board.totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "CXN: approve from the zero address");\n', '        require(spender != address(0), "CXN: approve to the zero address");\n', '\n', '        _board.parties[owner].allowance[spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function eliters(address party, bool _status) public {\n', '\t\trequire(msg.sender == _board.owner);\n', '\t\t_board.parties[party].elite = _status;\n', '\t\temit Eliters(party, _status);\n', '\t}\n', '\n', '    function stake(uint256 amount) external virtual {\n', '        require(balanceOf(msg.sender) >= amount);\n', '        require(amount >= _Min_Stake);\n', '        \n', '        redeemGain();\n', '\n', '        _board.totalStaked = _board.totalStaked.add(amount);\n', '        _board.parties[msg.sender].balance = _board.parties[msg.sender].balance.sub(amount);\n', '        _board.parties[msg.sender].staked = _board.parties[msg.sender].staked.add(amount);\n', '        _board.parties[msg.sender].payoutstake = _board.retPerToken;\n', '        \n', '\n', '        emit Stake(msg.sender, amount);\n', '    }\n', '\n', '    function unStake(uint256 amount) external virtual {\n', '        require(_board.parties[msg.sender].staked >= amount);\n', '\n', '        uint256 toBurn = amount.mul(_burnRateStaker).div(100);\n', '\n', '        uint256 toStakers = amount.mul(_unstakeForStaker).div(100);\n', '        \n', '        uint256 stakeGainOfAmount = _stakeReturnOfAmount(msg.sender,amount);\n', '        \n', '        _board.parties[msg.sender].balance = _board.parties[msg.sender].balance.add(stakeGainOfAmount);\n', '        \n', '        \n', '        _board.totalStaked = _board.totalStaked.sub(amount);\n', '\n', '        _board.retPerToken = _board.retPerToken.add(toStakers.mul(_Scale).div(_board.totalStaked));\n', '        \n', '        uint256 toReturn = amount.sub(toBurn);\n', '        \n', '        _board.parties[msg.sender].balance = _board.parties[msg.sender].balance.add(toReturn);\n', '        _board.parties[msg.sender].staked = _board.parties[msg.sender].staked.sub(amount);\n', '        \n', '        emit UnStake(msg.sender, amount);\n', '    }\n', '\n', '    function redeemGain() public virtual returns(uint256){\n', '        uint256 ret = stakeReturnOf(msg.sender);\n', '\t\tif(ret == 0){\n', '\t\t    return 0;\n', '\t\t}\n', '\t\t\n', '\t\t_board.parties[msg.sender].payoutstake = _board.retPerToken;\n', '\t\t_board.parties[msg.sender].balance = _board.parties[msg.sender].balance.add(ret);\n', '\t\temit Transfer(address(this), msg.sender, ret);\n', '\t\temit StakeGain(msg.sender, ret);\n', '        return ret;\n', '    }\n', '\n', '    function stakeReturnOf(address sender) public view returns (uint256) {\n', '        uint256 profitReturnRate = _board.retPerToken.sub(_board.parties[sender].payoutstake);\n', '        return uint256(profitReturnRate.mul(_board.parties[sender].staked).div(_Scale));\n', '        \n', '\t}\n', '\t\n', '\tfunction _stakeReturnOfAmount(address sender, uint256 amount) internal view returns (uint256) {\n', '\t    uint256 profitReturnRate = _board.retPerToken.sub(_board.parties[sender].payoutstake);\n', '        return uint256(profitReturnRate.mul(amount).div(_Scale));\n', '\t}\n', '    \n', '\n', '    function partyDetails(address sender) external view returns (uint256 totalTokenSupply,uint256 totalStakes,uint256 balance,uint256 staked,uint256 stakeReturns){\n', '       return (totalSupply(),totalStake(), balanceOf(sender),stakeOf(sender),stakeReturnOf(sender));\n', '    }\n', '\n', '    function setMinStake(uint256 amount) external virtual returns(uint256) {\n', '         require(msg.sender == _board.owner);\n', '         require(amount > 0);\n', '         _Min_Stake = amount;\n', '         return _Min_Stake;\n', '    }\n', '\n', '    function minStake() public view returns(uint256) {\n', '        return _Min_Stake;\n', '    }\n', '\n', '    function burn(uint256 amount) external virtual{\n', '        require(amount <= _board.parties[msg.sender].balance);\n', '\n', '        _burn(msg.sender,amount);\n', '\n', '        emit Burn(amount);\n', '    }\n', '\n', '}']