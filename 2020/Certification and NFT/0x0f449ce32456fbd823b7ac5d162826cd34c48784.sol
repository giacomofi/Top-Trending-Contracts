['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'interface DSPauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.0.9/contracts.json\n', '    address constant MCD_VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '\n', '    function execute() external {\n', '\t\t// proving the Pause Proxy has access to the MCD core system at the execution time\n', '\t\trequire(VatAbstract(MCD_VAT).wards(address(this)) == 1, "no-access");\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/fc5bbefb3d304408f6261a8968b7b8b924b53b58/governance/votes/Executive%20vote%20-%20August%2024%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-08-24 MakerDAO August 2020 Governance Cycle Bundle | Hash: 0xa0d81d0896decfa0e74f1e4d353640d132953c373605e2fe22f1da23a7c3ed6c";\n', '\n', '    // MIP13c3-SP1 Declaration of Intent (Forward Guidance)\n', '    // https://raw.githubusercontent.com/makerdao/mips/30e57b376d239a948310a7ff316b1a659d73af02/MIP13/MIP13c3-Subproposals/MIP13c3-SP1.md\n', '\tstring constant public MIP13C3SP1 = "0xdc1d9ca6751a4f9e138a5852d1bc0372cd175a8007b9f0a05f8e4e8b4213c9a4";\n', '\n', '    // MIP0c13-SP1 Subproposal for Core Personnel Offboarding\n', '    // https://raw.githubusercontent.com/makerdao/mips/e5b3640087c7c8b5b04527a9562b99c291b17e9b/MIP0/MIP0c13-Subproposals/MIP0c13-SP1.md\n', '\tstring constant public MIP0C13SP1 = "0xf8c9b8e15faf490c1f6b4a3d089453d496f2a27a662a70114b446c76a629172e";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 4 days + 2 hours;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']