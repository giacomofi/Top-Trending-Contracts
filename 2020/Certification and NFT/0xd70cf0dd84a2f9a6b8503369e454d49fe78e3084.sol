['// File: contracts/external/govblocks-protocol/interfaces/IProposalCategory.sol\n', '\n', '/* Copyright (C) 2017 GovBlocks.io\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', 'contract IProposalCategory {\n', '\n', '    event Category(\n', '        uint indexed categoryId,\n', '        string categoryName,\n', '        string actionHash\n', '    );\n', '\n', '    mapping(uint256 => bytes) public categoryActionHashes;\n', '\n', '    /**\n', '    * @dev Adds new category\n', '    * @param _name Category name\n', '    * @param _memberRoleToVote Voting Layer sequence in which the voting has to be performed.\n', '    * @param _majorityVotePerc Majority Vote threshold for Each voting layer\n', '    * @param _quorumPerc minimum threshold percentage required in voting to calculate result\n', '    * @param _allowedToCreateProposal Member roles allowed to create the proposal\n', '    * @param _closingTime Vote closing time for Each voting layer\n', '    * @param _actionHash hash of details containing the action that has to be performed after proposal is accepted\n', '    * @param _contractAddress address of contract to call after proposal is accepted\n', '    * @param _contractName name of contract to be called after proposal is accepted\n', '    * @param _incentives rewards to distributed after proposal is accepted\n', '    * @param _functionHash function signature to be executed\n', '    */\n', '    function newCategory(\n', '        string calldata _name, \n', '        uint _memberRoleToVote,\n', '        uint _majorityVotePerc, \n', '        uint _quorumPerc,\n', '        uint[] calldata _allowedToCreateProposal,\n', '        uint _closingTime,\n', '        string calldata _actionHash,\n', '        address _contractAddress,\n', '        bytes2 _contractName,\n', '        uint[] calldata _incentives,\n', '        string calldata _functionHash\n', '    )\n', '        external;\n', '\n', '    /** @dev gets category details\n', '    */\n', '    function category(uint _categoryId)\n', '        external\n', '        view\n', '        returns(\n', '            uint categoryId,\n', '            uint memberRoleToVote,\n', '            uint majorityVotePerc,\n', '            uint quorumPerc,\n', '            uint[] memory allowedToCreateProposal,\n', '            uint closingTime,\n', '            uint minStake\n', '        );\n', '    \n', '    /**@dev gets category action details\n', '    */\n', '    function categoryAction(uint _categoryId)\n', '        external\n', '        view\n', '        returns(\n', '            uint categoryId,\n', '            address contractAddress,\n', '            bytes2 contractName,\n', '            uint defaultIncentive\n', '        );\n', '    \n', '    /** @dev Gets Total number of categories added till now\n', '    */\n', '    function totalCategories() external view returns(uint numberOfCategories);\n', '\n', '    /**\n', '     * @dev Gets the category acion details of a category id\n', '     * @param _categoryId is the category id in concern\n', '     * @return the category id\n', '     * @return the contract address\n', '     * @return the contract name\n', '     * @return the default incentive\n', '     * @return action function hash\n', '     */\n', '    function categoryActionDetails(uint256 _categoryId)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            address,\n', '            bytes2,\n', '            uint256,\n', '            bytes memory\n', '        );\n', '\n', '    /**\n', '    * @dev Updates category details\n', '    * @param _categoryId Category id that needs to be updated\n', '    * @param _name Category name\n', '    * @param _memberRoleToVote Voting Layer sequence in which the voting has to be performed.\n', '    * @param _allowedToCreateProposal Member roles allowed to create the proposal\n', '    * @param _majorityVotePerc Majority Vote threshold for Each voting layer\n', '    * @param _quorumPerc minimum threshold percentage required in voting to calculate result\n', '    * @param _closingTime Vote closing time for Each voting layer\n', '    * @param _actionHash hash of details containing the action that has to be performed after proposal is accepted\n', '    * @param _contractAddress address of contract to call after proposal is accepted\n', '    * @param _contractName name of contract to be called after proposal is accepted\n', '    * @param _incentives rewards to distributed after proposal is accepted\n', '    * @param _functionHash function signature to be executed\n', '    */\n', '    function editCategory(\n', '        uint _categoryId, \n', '        string calldata _name, \n', '        uint _memberRoleToVote, \n', '        uint _majorityVotePerc, \n', '        uint _quorumPerc,\n', '        uint[] calldata _allowedToCreateProposal,\n', '        uint _closingTime,\n', '        string calldata _actionHash,\n', '        address _contractAddress,\n', '        bytes2 _contractName,\n', '        uint[] calldata _incentives,\n', '        string calldata _functionHash\n', '    )\n', '        external;\n', '\n', '}\n', '\n', '// File: contracts/external/govblocks-protocol/interfaces/IMemberRoles.sol\n', '\n', '/* Copyright (C) 2017 GovBlocks.io\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', 'contract IMemberRoles {\n', '\n', '    event MemberRole(uint256 indexed roleId, bytes32 roleName, string roleDescription);\n', '    \n', '    enum Role {UnAssigned, AdvisoryBoard, TokenHolder, DisputeResolution}\n', '\n', '    function setInititorAddress(address _initiator) external;\n', '\n', '    /// @dev Adds new member role\n', '    /// @param _roleName New role name\n', '    /// @param _roleDescription New description hash\n', '    /// @param _authorized Authorized member against every role id\n', '    function addRole(bytes32 _roleName, string memory _roleDescription, address _authorized) public;\n', '\n', '    /// @dev Assign or Delete a member from specific role.\n', '    /// @param _memberAddress Address of Member\n', '    /// @param _roleId RoleId to update\n', '    /// @param _active active is set to be True if we want to assign this role to member, False otherwise!\n', '    function updateRole(address _memberAddress, uint _roleId, bool _active) public;\n', '\n', '    /// @dev Change Member Address who holds the authority to Add/Delete any member from specific role.\n', '    /// @param _roleId roleId to update its Authorized Address\n', '    /// @param _authorized New authorized address against role id\n', '    function changeAuthorized(uint _roleId, address _authorized) public;\n', '\n', '    /// @dev Return number of member roles\n', '    function totalRoles() public view returns(uint256);\n', '\n', '    /// @dev Gets the member addresses assigned by a specific role\n', '    /// @param _memberRoleId Member role id\n', '    /// @return roleId Role id\n', '    /// @return allMemberAddress Member addresses of specified role id\n', '    function members(uint _memberRoleId) public view returns(uint, address[] memory allMemberAddress);\n', '\n', "    /// @dev Gets all members' length\n", '    /// @param _memberRoleId Member role id\n', '    /// @return memberRoleData[_memberRoleId].memberAddress.length Member length\n', '    function numberOfMembers(uint _memberRoleId) public view returns(uint);\n', '    \n', '    /// @dev Return member address who holds the right to add/remove any member from specific role.\n', '    function authorized(uint _memberRoleId) public view returns(address);\n', '\n', '    /// @dev Get All role ids array that has been assigned to a member so far.\n', '    function roles(address _memberAddress) public view returns(uint[] memory assignedRoles);\n', '\n', '    /// @dev Returns true if the given role id is assigned to a member.\n', '    /// @param _memberAddress Address of member\n', "    /// @param _roleId Checks member's authenticity with the roleId.\n", '    /// i.e. Returns true if this roleId is assigned to member\n', '    function checkRole(address _memberAddress, uint _roleId) public view returns(bool);   \n', '}\n', '\n', '// File: contracts/external/proxy/Proxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function () external payable {\n', '        address _impl = implementation();\n', '        require(_impl != address(0));\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '            }\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function implementation() public view returns (address);\n', '}\n', '\n', '// File: contracts/external/proxy/UpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param implementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    // Storage position of the address of the current implementation\n', '    bytes32 private constant IMPLEMENTATION_POSITION = keccak256("org.govblocks.proxy.implementation");\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor() public {}\n', '\n', '    /**\n', '    * @dev Tells the address of the current implementation\n', '    * @return address of the current implementation\n', '    */\n', '    function implementation() public view returns (address impl) {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '            impl := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the current implementation\n', '    * @param _newImplementation address representing the new implementation to be set\n', '    */\n', '    function _setImplementation(address _newImplementation) internal {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '        sstore(position, _newImplementation)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Upgrades the implementation address\n', '    * @param _newImplementation representing the address of the new implementation to be set\n', '    */\n', '    function _upgradeTo(address _newImplementation) internal {\n', '        address currentImplementation = implementation();\n', '        require(currentImplementation != _newImplementation);\n', '        _setImplementation(_newImplementation);\n', '        emit Upgraded(_newImplementation);\n', '    }\n', '}\n', '\n', '// File: contracts/external/proxy/OwnedUpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '/**\n', ' * @title OwnedUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n', ' */\n', 'contract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    // Storage position of the owner of the contract\n', '    bytes32 private constant PROXY_OWNER_POSITION = keccak256("org.govblocks.proxy.owner");\n', '\n', '    /**\n', '    * @dev the constructor sets the original owner of the contract to the sender account.\n', '    */\n', '    constructor(address _implementation) public {\n', '        _setUpgradeabilityOwner(msg.sender);\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == proxyOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function proxyOwner() public view returns (address owner) {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            owner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n', '        require(_newOwner != address(0));\n', '        _setUpgradeabilityOwner(_newOwner);\n', '        emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n', '    * @param _implementation representing the address of the new implementation to be set.\n', '    */\n', '    function upgradeTo(address _implementation) public onlyProxyOwner {\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of the owner\n', '    */\n', '    function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            sstore(position, _newProxyOwner)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/external/govblocks-protocol/Governed.sol\n', '\n', '/* Copyright (C) 2017 GovBlocks.io\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', 'contract IMaster {\n', '    mapping(address => bool) public whitelistedSponsor;\n', '    function dAppToken() public view returns(address);\n', '    function isInternal(address _address) public view returns(bool);\n', '    function getLatestAddress(bytes2 _module) public view returns(address);\n', '    function isAuthorizedToGovern(address _toCheck) public view returns(bool);\n', '}\n', '\n', '\n', 'contract Governed {\n', '\n', '    address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract\n', '\n', '    /// @dev modifier that allows only the authorized addresses to execute the function\n', '    modifier onlyAuthorizedToGovern() {\n', '        IMaster ms = IMaster(masterAddress);\n', '        require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");\n', '        _;\n', '    }\n', '\n', '    /// @dev checks if an address is authorized to govern\n', '    function isAuthorizedToGovern(address _toCheck) public view returns(bool) {\n', '        IMaster ms = IMaster(masterAddress);\n', '        return (ms.getLatestAddress("GV") == _toCheck);\n', '    } \n', '\n', '}\n', '\n', '// File: contracts/interfaces/Iupgradable.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'contract Iupgradable {\n', '\n', '    /**\n', '     * @dev change master address\n', '     */\n', '    function setMasterAddress() public;\n', '}\n', '\n', '// File: contracts/ProposalCategory.sol\n', '\n', '/* Copyright (C) 2020 PlotX.io\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ProposalCategory is Governed, IProposalCategory, Iupgradable {\n', '    bool public constructorCheck;\n', '    IMemberRoles internal mr;\n', '\n', '    struct CategoryStruct {\n', '        uint256 memberRoleToVote;\n', '        uint256 majorityVotePerc;\n', '        uint256 quorumPerc;\n', '        uint256[] allowedToCreateProposal;\n', '        uint256 closingTime;\n', '        uint256 minStake;\n', '    }\n', '\n', '    struct CategoryAction {\n', '        uint256 defaultIncentive;\n', '        address contractAddress;\n', '        bytes2 contractName;\n', '    }\n', '\n', '    CategoryStruct[] internal allCategory;\n', '    mapping(uint256 => CategoryAction) internal categoryActionData;\n', '    mapping(uint256 => bytes) public categoryActionHashes;\n', '\n', '    bool public initiated;\n', '\n', '    /**\n', '     * @dev Initiates Default settings for Proposal Category contract (Adding default categories)\n', '     */\n', '    function proposalCategoryInitiate() external {\n', '        //solhint-disable-line\n', '        require(!initiated, "Category action hashes already updated");\n', '        initiated = true;\n', '\n', '        uint256 advisoryBoardRole = uint256(IMemberRoles.Role.AdvisoryBoard);\n', '        uint256 tokenHolder = uint256(IMemberRoles.Role.TokenHolder);\n', '        uint256 disputeResolutionBoard = uint256(IMemberRoles.Role.DisputeResolution);\n', '\n', '        _addInitialCategories("Uncategorized", "", "EX", "", 0, 0);\n', '        _addInitialCategories(\n', '            "Add new member role",\n', '            "QmQFnBep7AyMYU3LJDuHSpTYatnw65XjHzzirrghtZoR8U",\n', '            "MR",\n', '            "addRole(bytes32,string,address)",\n', '            50,\n', '            advisoryBoardRole\n', '        ); //1\n', '        _addInitialCategories(\n', '            "Update member role",\n', '            "QmXMzSViLBJ22P9oj51Zz7isKTRnXWPHZcQ5hzGvvWD3UV",\n', '            "MR",\n', '            "updateRole(address,uint256,bool)",\n', '            50,\n', '            advisoryBoardRole\n', '        ); // 2\n', '        _addInitialCategories(\n', '            "Add new category",\n', '            "QmaVtv7NDR36X2ZEBjCmh1ny4UXKYSHPMfg8peuPLnNc3f",\n', '            "PC",\n', '            "newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)",\n', '            50,\n', '            advisoryBoardRole\n', '        ); // 3\n', '        _addInitialCategories(\n', '            "Edit category",\n', '            "QmdmQhGo6hU5HzrNLuoyq2TUh1N3DQ7pT2SkPUhZvnsBYZ",\n', '            "PC",\n', '            "editCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)",\n', '            50,\n', '            advisoryBoardRole\n', '        ); //4\n', '        _addInitialCategories(\n', '            "Update Market Implementations",\n', '            "QmbyrHnGgTU9WWFq7DgtRTdpExLg9MqcFRYpWNpo7Ezjd5",\n', '            "PL",\n', '            "updateMarketImplementations(uint256[],address[])",\n', '            60,\n', '            tokenHolder\n', '        ); // 5\n', '        _addInitialCategories(\n', '            "Update contract\'s Implementation",\n', '            "QmesiuX929bJHmgH8E58L6FWPazcLdgcdjmFzinEdsMfre",\n', '            "PL",\n', '            "upgradeContractImplementation(address,address)",\n', '            60,\n', '            tokenHolder\n', '        ); // 6\n', '        _addInitialCategories(\n', '            "Upgrade multiple contract Implementations",\n', '            "QmcL1jUk7oda2cumSUTCrF6vTSeQN7qd1bYDFdz3v7BbUH",\n', '            "MS",\n', '            "upgradeMultipleImplementations(bytes2[],address[])",\n', '            50,\n', '            tokenHolder\n', '        ); // 7\n', '        _addInitialCategories(\n', '            "Update master Implementation",\n', '            "QmPrGbWA4cuWzZbc9ZmqFmSRSFJnp5sa747wKsJnQkkj4t",\n', '            "MS",\n', '            "upgradeTo(address)",\n', '            50,\n', '            tokenHolder\n', '        ); // 8\n', '        _addInitialCategories(\n', '            "Add new contract",\n', '            "QmXq5Jb4oeNzD2NHBLuWqy2m9J4N1KtkwyirBjkPBRNHii",\n', '            "MS",\n', '            "addNewContract(bytes2,address)",\n', '            50,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Raise Dispute",\n', '            "QmQLKazba2dL8nTtGaoon6DsPv5FcpKqWZPRdxLv2tfUQW",\n', '            "PL",\n', '            "resolveDispute(address,uint256)",\n', '            60,\n', '            disputeResolutionBoard\n', '        );\n', '        _addInitialCategories(\n', '            "Burn Dispute Resolution Member Tokens",\n', '            "QmTV2xSz5R5LVi9VozCyvNgnguq6xEsfVx7JaFbSatVVvQ",\n', '            "TC",\n', '            "burnLockedTokens(address,bytes32,uint256)",\n', '            60,\n', '            tokenHolder\n', '        ); //11\n', '        _addInitialCategories(\n', '            "Swap AB member",\n', '            "QmV5HJMmhkEiHWt5qdNp6AbCqcn9Lw9ASA9efHDKGm8mdh",\n', '            "MR",\n', '            "swapABMember(address,address)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Update governance parameters",\n', '            "QmTzKKxzpp1E4b8N3ch1kumetYRieEpN7ecTd3MNg4V1T9",\n', '            "GV",\n', '            "updateUintParameters(bytes8,uint256)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Update Token Controller parameters",\n', '            "QmdVH5FdXbiGbqsj17643KVEEBQ3ciBZnjn9Mj24ehsrGm",\n', '            "TC",\n', '            "updateUintParameters(bytes8,uint256)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Add new market type",\n', '            "QmPwAdEj6quzB65JWr6hDz6HrLtjTfbezwUiAe6mBq2sxY",\n', '            "PL",\n', '            "addNewMarketType(uint64,uint64,uint64)",\n', '            60,\n', '            tokenHolder\n', '        ); //15\n', '        _addInitialCategories(\n', '            "Add new market currency",\n', '            "QmTu2FnkqUWhhNbeQraSrtbdA4DfGLavTsLRKRCeLV51x1",\n', '            "PL",\n', '            "addNewMarketCurrency(address,uint64)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Pause Market Creation",\n', '            "QmamFs4k5ZbzajipsbWb4LCaKtyxDUwb9U5dYiNFqExb2W",\n', '            "PL",\n', '            "pauseMarketCreation()",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Resume Market Creation",\n', '            "QmZ9W1gHTJjSnt3ieiNv1Ux6ooX7ngU4Jrpvk3QiiBeP5r",\n', '            "PL",\n', '            "resumeMarketCreation()",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Transfer Market Registry Assets",\n', '            "QmeRCfGJuA6oTqY8a7nuVxdHih2SmZUTaZLVrttGv6yKy5",\n', '            "PL",\n', '            "transferAssets(address,address,uint256)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Update Market Uint parameters",\n', '            "QmXPXBkSKfidTgbDcRBLqokqAa9SU2wwErTyedPAZPfr5z",\n', '            "PL",\n', '            "updateUintParameters(bytes8,uint256)",\n', '            60,\n', '            tokenHolder\n', '        ); //20\n', '        _addInitialCategories(\n', '            "Update Market Address parameters",\n', '            "QmbbNRchZHMULBbKFT8qjCWgCRPa4qdkst8mE8A2Kffy7N",\n', '            "PL",\n', '            "updateConfigAddressParameters(bytes8,address)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Update Member roles parameters",\n', '            "QmcG8KXLMTDL5CtiKed12bJxE4ioL7Wn7oXLdW1zYWpf62",\n', '            "MR",\n', '            "updateUintParameters(bytes8,uint256)",\n', '            60,\n', '            tokenHolder\n', '        ); //22\n', '        _addInitialCategories(\n', '            "Whitelist Sponsor",\n', '            "QmRB2twfkzjox4ZAStnZTvtqr7Tr7ByGVdjTziWnpxXmWw",\n', '            "MS",\n', '            "whitelistSponsor(address)",\n', '            60,\n', '            tokenHolder\n', '        );\n', '        _addInitialCategories(\n', '            "Any other item",\n', '            "",\n', '            "EX",\n', '            "",\n', '            60,\n', '            tokenHolder\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets Total number of categories added till now\n', '     */\n', '    function totalCategories() external view returns (uint256) {\n', '        return allCategory.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets category details\n', '     */\n', '    function category(uint256 _categoryId)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256[] memory,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            _categoryId,\n', '            allCategory[_categoryId].memberRoleToVote,\n', '            allCategory[_categoryId].majorityVotePerc,\n', '            allCategory[_categoryId].quorumPerc,\n', '            allCategory[_categoryId].allowedToCreateProposal,\n', '            allCategory[_categoryId].closingTime,\n', '            allCategory[_categoryId].minStake\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the category action details\n', '     * @param _categoryId is the category id in concern\n', '     * @return the category id\n', '     * @return the contract address\n', '     * @return the contract name\n', '     * @return the default incentive\n', '     */\n', '    function categoryAction(uint256 _categoryId)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            address,\n', '            bytes2,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            _categoryId,\n', '            categoryActionData[_categoryId].contractAddress,\n', '            categoryActionData[_categoryId].contractName,\n', '            categoryActionData[_categoryId].defaultIncentive\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the category action details of a category id\n', '     * @param _categoryId is the category id in concern\n', '     * @return the category id\n', '     * @return the contract address\n', '     * @return the contract name\n', '     * @return the default incentive\n', '     * @return action function hash\n', '     */\n', '    function categoryActionDetails(uint256 _categoryId)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            address,\n', '            bytes2,\n', '            uint256,\n', '            bytes memory\n', '        )\n', '    {\n', '        return (\n', '            _categoryId,\n', '            categoryActionData[_categoryId].contractAddress,\n', '            categoryActionData[_categoryId].contractName,\n', '            categoryActionData[_categoryId].defaultIncentive,\n', '            categoryActionHashes[_categoryId]\n', '        );\n', '    }\n', '\n', '    /**\n', "     * @dev Changes the master address and update it's instance\n", '     */\n', '    function setMasterAddress() public {\n', '        OwnedUpgradeabilityProxy proxy = OwnedUpgradeabilityProxy(\n', '            address(uint160(address(this)))\n', '        );\n', '        require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");\n', '\n', '        require(masterAddress == address(0), "Master address already set");\n', '        masterAddress = msg.sender;\n', '        mr = IMemberRoles(IMaster(masterAddress).getLatestAddress("MR"));\n', '    }\n', '\n', '    /**\n', '     * @dev Adds new category\n', '     * @param _name Category name\n', '     * @param _memberRoleToVote Voting Layer sequence in which the voting has to be performed.\n', '     * @param _majorityVotePerc Majority Vote threshold for Each voting layer\n', '     * @param _quorumPerc minimum threshold percentage required in voting to calculate result\n', '     * @param _allowedToCreateProposal Member roles allowed to create the proposal\n', '     * @param _closingTime Vote closing time for Each voting layer\n', '     * @param _actionHash hash of details containing the action that has to be performed after proposal is accepted\n', '     * @param _contractAddress address of contract to call after proposal is accepted\n', '     * @param _contractName name of contract to be called after proposal is accepted\n', '     * @param _incentives rewards to distributed after proposal is accepted\n', '     * @param _functionHash function signature to be executed\n', '     */\n', '    function newCategory(\n', '        string memory _name,\n', '        uint256 _memberRoleToVote,\n', '        uint256 _majorityVotePerc,\n', '        uint256 _quorumPerc,\n', '        uint256[] memory _allowedToCreateProposal,\n', '        uint256 _closingTime,\n', '        string memory _actionHash,\n', '        address _contractAddress,\n', '        bytes2 _contractName,\n', '        uint256[] memory _incentives,\n', '        string memory _functionHash\n', '    ) public onlyAuthorizedToGovern {\n', '        require(\n', '            _quorumPerc <= 100 && _majorityVotePerc <= 100,\n', '            "Invalid percentage"\n', '        );\n', '\n', '        require(\n', '            (_contractName == "EX" && _contractAddress == address(0)) ||\n', '                bytes(_functionHash).length > 0,\n', '            "Wrong parameters passed"\n', '        );\n', '\n', '        _addCategory(\n', '            _name,\n', '            _memberRoleToVote,\n', '            _majorityVotePerc,\n', '            _quorumPerc,\n', '            _allowedToCreateProposal,\n', '            _closingTime,\n', '            _actionHash,\n', '            _contractAddress,\n', '            _contractName,\n', '            _incentives\n', '        );\n', '\n', '        bytes memory _encodedHash = abi.encodeWithSignature(_functionHash);\n', '        if (\n', '            bytes(_functionHash).length > 0 &&\n', '            _encodedHash.length == 4\n', '        ) {\n', '            if(keccak256(_encodedHash) == keccak256(abi.encodeWithSignature("resolveDispute(address,uint256)"))) {\n', '                require(_memberRoleToVote == uint256(IMemberRoles.Role.DisputeResolution));\n', '            }\n', '            categoryActionHashes[allCategory.length - 1] = _encodedHash;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Updates category details\n', '     * @param _categoryId Category id that needs to be updated\n', '     * @param _name Category name\n', '     * @param _memberRoleToVote Voting Layer sequence in which the voting has to be performed.\n', '     * @param _allowedToCreateProposal Member roles allowed to create the proposal\n', '     * @param _majorityVotePerc Majority Vote threshold for Each voting layer\n', '     * @param _quorumPerc minimum threshold percentage required in voting to calculate result\n', '     * @param _closingTime Vote closing time for Each voting layer\n', '     * @param _actionHash hash of details containing the action that has to be performed after proposal is accepted\n', '     * @param _contractAddress address of contract to call after proposal is accepted\n', '     * @param _contractName name of contract to be called after proposal is accepted\n', '     * @param _incentives rewards to distributed after proposal is accepted\n', '     * @param _functionHash function signature to be executed\n', '     */\n', '    function editCategory(\n', '        uint256 _categoryId,\n', '        string memory _name,\n', '        uint256 _memberRoleToVote,\n', '        uint256 _majorityVotePerc,\n', '        uint256 _quorumPerc,\n', '        uint256[] memory _allowedToCreateProposal,\n', '        uint256 _closingTime,\n', '        string memory _actionHash,\n', '        address _contractAddress,\n', '        bytes2 _contractName,\n', '        uint256[] memory _incentives,\n', '        string memory _functionHash\n', '    ) public onlyAuthorizedToGovern {\n', '        require(\n', '            _verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal),\n', '            "Invalid Role"\n', '        );\n', '\n', '        require(\n', '            _quorumPerc <= 100 && _majorityVotePerc <= 100,\n', '            "Invalid percentage"\n', '        );\n', '\n', '        require(\n', '            (_contractName == "EX" && _contractAddress == address(0)) ||\n', '                bytes(_functionHash).length > 0,\n', '            "Wrong parameters passed"\n', '        );\n', '\n', '        delete categoryActionHashes[_categoryId];\n', '        if (\n', '            bytes(_functionHash).length > 0 &&\n', '            abi.encodeWithSignature(_functionHash).length == 4\n', '        ) {\n', '            if(keccak256(abi.encodeWithSignature(_functionHash)) == keccak256(abi.encodeWithSignature("resolveDispute(address,uint256)"))) {\n', '                require(_memberRoleToVote == uint256(IMemberRoles.Role.DisputeResolution));\n', '            }\n', '            categoryActionHashes[_categoryId] = abi.encodeWithSignature(\n', '                _functionHash\n', '            );\n', '        }\n', '        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\n', '        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\n', '        allCategory[_categoryId].closingTime = _closingTime;\n', '        allCategory[_categoryId]\n', '            .allowedToCreateProposal = _allowedToCreateProposal;\n', '        allCategory[_categoryId].minStake = _incentives[0];\n', '        allCategory[_categoryId].quorumPerc = _quorumPerc;\n', '        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\n', '        categoryActionData[_categoryId].contractName = _contractName;\n', '        categoryActionData[_categoryId].contractAddress = _contractAddress;\n', '        emit Category(_categoryId, _name, _actionHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal call to add new category\n', '     * @param _name Category name\n', '     * @param _memberRoleToVote Voting Layer sequence in which the voting has to be performed.\n', '     * @param _majorityVotePerc Majority Vote threshold for Each voting layer\n', '     * @param _quorumPerc minimum threshold percentage required in voting to calculate result\n', '     * @param _allowedToCreateProposal Member roles allowed to create the proposal\n', '     * @param _closingTime Vote closing time for Each voting layer\n', '     * @param _actionHash hash of details containing the action that has to be performed after proposal is accepted\n', '     * @param _contractAddress address of contract to call after proposal is accepted\n', '     * @param _contractName name of contract to be called after proposal is accepted\n', '     * @param _incentives rewards to distributed after proposal is accepted\n', '     */\n', '    function _addCategory(\n', '        string memory _name,\n', '        uint256 _memberRoleToVote,\n', '        uint256 _majorityVotePerc,\n', '        uint256 _quorumPerc,\n', '        uint256[] memory _allowedToCreateProposal,\n', '        uint256 _closingTime,\n', '        string memory _actionHash,\n', '        address _contractAddress,\n', '        bytes2 _contractName,\n', '        uint256[] memory _incentives\n', '    ) internal {\n', '        require(\n', '            _verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal),\n', '            "Invalid Role"\n', '        );\n', '        allCategory.push(\n', '            CategoryStruct(\n', '                _memberRoleToVote,\n', '                _majorityVotePerc,\n', '                _quorumPerc,\n', '                _allowedToCreateProposal,\n', '                _closingTime,\n', '                _incentives[0]\n', '            )\n', '        );\n', '        uint256 categoryId = allCategory.length - 1;\n', '        categoryActionData[categoryId] = CategoryAction(\n', '            _incentives[1],\n', '            _contractAddress,\n', '            _contractName\n', '        );\n', '        emit Category(categoryId, _name, _actionHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal call to check if given roles are valid or not\n', '     */\n', '    function _verifyMemberRoles(\n', '        uint256 _memberRoleToVote,\n', '        uint256[] memory _allowedToCreateProposal\n', '    ) internal view returns (bool) {\n', '        uint256 totalRoles = mr.totalRoles();\n', '        if (_memberRoleToVote >= totalRoles) {\n', '            return false;\n', '        }\n', '        for (uint256 i = 0; i < _allowedToCreateProposal.length; i++) {\n', '            if (_allowedToCreateProposal[i] >= totalRoles) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev to add the initial categories\n', '     * @param _name is category name\n', '     * @param _actionHash hash of category action\n', '     * @param _contractName is the name of contract\n', '     * @param _majorityVotePerc percentage of majority vote\n', '     * @param _memberRoleToVote is the member role the category can vote on\n', '     */\n', '    function _addInitialCategories(\n', '        string memory _name,\n', '        string memory _solutionHash,\n', '        bytes2 _contractName,\n', '        string memory _actionHash,\n', '        uint256 _majorityVotePerc,\n', '        uint256 _memberRoleToVote\n', '    ) internal {\n', '        uint256[] memory allowedToCreateProposal = new uint256[](1);\n', '        uint256[] memory stakeIncentive = new uint256[](2);\n', '        uint256 closingTime = 3 days;\n', '        allowedToCreateProposal[0] = _memberRoleToVote;\n', '        stakeIncentive[0] = 0;\n', '        stakeIncentive[1] = 0;\n', '        if (_memberRoleToVote == uint256(IMemberRoles.Role.DisputeResolution)) {\n', '            stakeIncentive[1] = 100 ether;\n', '            allowedToCreateProposal[0] = uint256(IMemberRoles.Role.TokenHolder);\n', '            closingTime = 2 days;\n', '        }\n', '        if (bytes(_actionHash).length > 0) {\n', '            categoryActionHashes[allCategory.length] = abi.encodeWithSignature(\n', '                _actionHash\n', '            );\n', '        }\n', '        _addCategory(\n', '            _name,\n', '            _memberRoleToVote,\n', '            _majorityVotePerc,\n', '            10,\n', '            allowedToCreateProposal,\n', '            closingTime,\n', '            _solutionHash,\n', '            address(0),\n', '            _contractName,\n', '            stakeIncentive\n', '        );\n', '    }\n', '}']