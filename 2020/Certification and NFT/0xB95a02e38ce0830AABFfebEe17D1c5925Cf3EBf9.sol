['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/hardworkInterface/IStrategy.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IStrategy {\n', '    \n', '    function unsalvagableTokens(address tokens) external view returns (bool);\n', '    \n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function vault() external view returns (address);\n', '\n', '    function withdrawAllToVault() external;\n', '    function withdrawToVault(uint256 amount) external;\n', '\n', '    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\n', '\n', '    // should only be called by controller\n', '    function salvage(address recipient, address token, uint256 amount) external;\n', '\n', '    function doHardWork() external;\n', '    function depositArbCheck() external view returns(bool);\n', '}\n', '\n', '// File: contracts/Storage.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract Storage {\n', '\n', '  address public governance;\n', '  address public controller;\n', '\n', '  constructor() public {\n', '    governance = msg.sender;\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setGovernance(address _governance) public onlyGovernance {\n', '    require(_governance != address(0), "new governance shouldn\'t be empty");\n', '    governance = _governance;\n', '  }\n', '\n', '  function setController(address _controller) public onlyGovernance {\n', '    require(_controller != address(0), "new controller shouldn\'t be empty");\n', '    controller = _controller;\n', '  }\n', '\n', '  function isGovernance(address account) public view returns (bool) {\n', '    return account == governance;\n', '  }\n', '\n', '  function isController(address account) public view returns (bool) {\n', '    return account == controller;\n', '  }\n', '}\n', '\n', '// File: contracts/Governable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Governable {\n', '\n', '  Storage public store;\n', '\n', '  constructor(address _store) public {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(store.isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setStorage(address _store) public onlyGovernance {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  function governance() public view returns (address) {\n', '    return store.governance();\n', '  }\n', '}\n', '\n', '// File: contracts/Controllable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Controllable is Governable {\n', '\n', '  constructor(address _storage) Governable(_storage) public {\n', '  }\n', '\n', '  modifier onlyController() {\n', '    require(store.isController(msg.sender), "Not a controller");\n', '    _;\n', '  }\n', '\n', '  modifier onlyControllerOrGovernance(){\n', '    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\n', '      "The caller must be controller or governance");\n', '    _;\n', '  }\n', '\n', '  function controller() public view returns (address) {\n', '    return store.controller();\n', '  }\n', '}\n', '\n', '// File: contracts/hardworkInterface/IMigrator.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IMigrator {\n', '    function pullFromStrategy() external;\n', '}\n', '\n', '// File: contracts/hardworkInterface/IVault.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IVault {\n', '\n', '    function underlyingBalanceInVault() external view returns (uint256);\n', '    function underlyingBalanceWithInvestment() external view returns (uint256);\n', '\n', '    // function store() external view returns (address);\n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function strategy() external view returns (address);\n', '\n', '    function setStrategy(address _strategy) external;\n', '    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\n', '\n', '    function deposit(uint256 amountWei) external;\n', '    function depositFor(uint256 amountWei, address holder) external;\n', '\n', '    function withdrawAll() external;\n', '    function withdraw(uint256 numberOfShares) external;\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\n', '\n', '    // hard work should be callable only by the controller (by the hard worker) or by governance\n', '    function doHardWork() external;\n', '    function rebalance() external;\n', '}\n', '\n', '// File: contracts/strategies/VaultMigratorStrategy.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VaultMigratorStrategy is IStrategy, Controllable {\n', '  using SafeERC20 for IERC20;\n', '  using Address for address;\n', '  using SafeMath for uint256;\n', '\n', '  IERC20 public underlying;\n', '  IVault public vault;\n', '  address public newVault;\n', '  address public migrator;\n', '  mapping(address => bool) public unsalvagableTokens;\n', '\n', '  constructor(\n', '    address _storage,\n', '    address _underlying,\n', '    address _vault,\n', '    address _newVault\n', '  ) public\n', '  Controllable(_storage) {\n', '    require(_underlying != address(0), "_underlying cannot be empty");\n', '    require(_vault != address(0), "_vault cannot be empty");\n', '    require(_newVault != address(0), "_newVault cannot be empty");\n', '\n', '    require(IVault(_newVault).underlying() == _underlying, "underlying must match");\n', '\n', '    unsalvagableTokens[_underlying] = true;\n', '    underlying = IERC20(_underlying);\n', '    vault = IVault(_vault);\n', '    newVault = _newVault;\n', '  }\n', '\n', '  modifier restricted() {\n', '    require(msg.sender == address(vault) || msg.sender == address(controller()) || msg.sender == address(governance()),\n', '      "The sender has to be the controller or vault or governance");\n', '    _;\n', '  }\n', '\n', '  function depositArbCheck() public view returns(bool) {\n', '    return false; // disable deposits\n', '  }\n', '\n', '  modifier onlyVault() {\n', '    require(msg.sender == address(vault), "The caller must be the vault");\n', '    _;\n', '  }\n', '\n', '  /*\n', '  * Returns the total amount.\n', '  */\n', '  function investedUnderlyingBalance() view public returns (uint256) {\n', '    return underlying.balanceOf(address(this));\n', '  }\n', '\n', '  /*\n', '  * Invests all tokens that were accumulated so far\n', '  */\n', '  function investAllUnderlying() public {\n', '    // a no-op\n', '  }\n', '\n', '  function setMigrator(address _migrator) external onlyGovernance {\n', '    migrator = _migrator;\n', '  }\n', '\n', '  function rebalance() public {\n', '    // a no-op\n', '  }\n', '\n', '  /*\n', '  * withdraws to the vault (in case migration is aborted)\n', '  */\n', '  function withdrawAllToVault() external restricted {\n', '    uint256 balance = IERC20(underlying).balanceOf(address(this));\n', '    IERC20(underlying).safeTransfer(address(vault), balance);\n', '  }\n', '\n', '  /*\n', '  * Cashes some amount out and withdraws to the vault\n', '  */\n', '  function withdrawToVault(uint256 amountWei) external restricted {\n', '    revert("Withdraws through this strategy are disabled");\n', '  }\n', '\n', '  // initiates the migration. Assumes all underling balance is already\n', '  // in the strategy (transferred from the vault by doHardWork)\n', '  function migrateToNewVault() external onlyGovernance {\n', '    uint256 entireUnderlyingBalance = underlying.balanceOf(address(this));\n', '\n', '    uint256 newVaultBalanceBefore = underlying.balanceOf(newVault);\n', '    underlying.safeApprove(newVault, 0);\n', '    underlying.safeApprove(newVault, entireUnderlyingBalance);\n', '    IVault(newVault).deposit(entireUnderlyingBalance);\n', '    require(underlying.balanceOf(newVault).sub(newVaultBalanceBefore) == entireUnderlyingBalance, "underlying balance mismatch");\n', '\n', '    uint256 entireShareBalance = IERC20(newVault).balanceOf(address(this));\n', '\n', '    require(migrator != address(0), "Migrator not set!");\n', '    uint256 migratorBalanceBefore = IERC20(newVault).balanceOf(migrator);\n', '    IERC20(newVault).safeApprove(migrator, 0);\n', '    IERC20(newVault).safeApprove(migrator, entireShareBalance);\n', '    IMigrator(migrator).pullFromStrategy();\n', '    require(IERC20(newVault).balanceOf(migrator).sub(migratorBalanceBefore) == entireShareBalance, "share balance mismatch");\n', '  }\n', '\n', '  function doHardWork() external onlyVault {\n', '    // a no-op\n', '  }\n', '\n', '  // should only be called by controller\n', '  function salvage(address destination, address token, uint256 amount) external restricted {\n', '    require(!unsalvagableTokens[token], "token is defined as not salvageable");\n', '    IERC20(token).safeTransfer(destination, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/strategies/StableVaultMigrator.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StableVaultMigrator is Controllable {\n', '  using SafeERC20 for IERC20;\n', '  using Address for address;\n', '  using SafeMath for uint256;\n', '\n', '  constructor(\n', '    address _storage\n', '  ) public\n', '  Controllable(_storage) {\n', '  }\n', '\n', '  modifier restricted() {\n', '    require(msg.sender == address(controller()) || msg.sender == address(governance()),\n', '      "The sender has to be the controller or governance");\n', '    _;\n', '  }\n', '\n', '  function setStorageBack(address vault) internal {\n', '    address oldStorage = 0xc95CbE4ca30055c787CB784BE99D6a8494d0d197;\n', '    Governable(vault).setStorage(oldStorage);\n', '  }\n', '\n', '  function migrateInOneTx(\n', '    address _oldVault,\n', '    address _newVault,\n', '    address _migratorStrategy,\n', '    address _newStrategy,\n', '    address _poolAddress\n', '  ) external onlyGovernance {\n', '    require(_oldVault != address(0), "_oldVault cannot be empty");\n', '    require(_newVault != address(0), "_newVault cannot be empty");\n', '    require(_migratorStrategy != address(0), "_migratorStrategy cannot be empty");\n', '    require(_newStrategy != address(0), "_newStrategy cannot be empty");\n', '\n', '    IVault oldVault = IVault(_oldVault);\n', '    uint256 balanceInVault = oldVault.underlyingBalanceInVault();\n', '\n', '    IVault newVault = IVault(_newVault);\n', '    IStrategy newStrategy = IStrategy(_newStrategy);\n', '    VaultMigratorStrategy migratorStrategy = VaultMigratorStrategy(_migratorStrategy);\n', '\n', '    require(oldVault.underlying() == newVault.underlying(), "underlying must match (1)");\n', '    require(address(newVault.underlying()) == address(migratorStrategy.underlying()), "underlying must match (2)");\n', '    require(newVault.underlying() == newStrategy.underlying(), "underlying must match (3)");\n', '\n', '    // exit the strategy and enter the new vault with the migrator strategy\n', '    oldVault.setStrategy(address(migratorStrategy));\n', '    uint256 _toInvestDenominator = oldVault.underlyingBalanceWithInvestment();\n', '    oldVault.setVaultFractionToInvest(99999999999999999, 100000000000000000);\n', '    oldVault.doHardWork();\n', '    // settle the asset difference before migrating the assets\n', '    // we assume that the asset is present in this contract, otherwise the tx will fail\n', '    IERC20(oldVault.underlying()).safeTransfer(\n', '      address(migratorStrategy), IVault(oldVault).underlyingBalanceInVault()\n', '    );\n', '    migratorStrategy.setMigrator(_poolAddress);\n', '    migratorStrategy.migrateToNewVault();\n', '\n', '    // we need absolute numbers here to make the amount match, calculate before the call\n', '    uint256 _toInvestNumerator = _toInvestDenominator.sub(balanceInVault);\n', '    newVault.setVaultFractionToInvest(_toInvestNumerator, _toInvestDenominator);\n', '    // linking is done during the deployment\n', '    newVault.doHardWork();\n', '\n', '    // reset governance in both vaults\n', '    setStorageBack(_oldVault);\n', '    setStorageBack(_newVault);\n', '  }\n', '}']