['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract Lfnt {\n', '\n', '    string public constant name = "Love For Networks Token";\n', '    string public constant symbol = "LFNT";\n', '    uint8 public constant decimals = 6;  \n', '\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 totalSupply_;\n', '\n', '    constructor() {\n', '\t    totalSupply_ = 100000000000;\n', '\t    balances[msg.sender] = totalSupply_;\n', '    }  \n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\t    return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender] - numTokens;\n', '        balances[receiver] = balances[receiver] + numTokens;\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address delegate, uint numTokens) public returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[owner]);    \n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '    \n', '        balances[owner] = balances[owner] - numTokens;\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n', '        balances[buyer] = balances[buyer] + numTokens;\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '}']