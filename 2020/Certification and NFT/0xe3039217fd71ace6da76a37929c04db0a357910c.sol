['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', 'import "./SToken.sol";\n', 'import "./Governable.sol";\n', '\n', 'import "./TransferHelper.sol";\n', '\n', '\n', 'interface Minter {\n', '    event Minted(address indexed recipient, address reward_contract, uint minted);\n', '\n', '    function token() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function minted(address, address) external view returns (uint);\n', '    function allowed_to_mint_for(address, address) external view returns (bool);\n', '    \n', '    function mint(address gauge) external;\n', '    function mint_many(address[8] calldata gauges) external;\n', '    function mint_for(address gauge, address _for) external;\n', '    function toggle_approve_mint(address minting_user) external;\n', '}\n', '\n', 'interface LiquidityGauge {\n', '    event Deposit(address indexed provider, uint value);\n', '    event Withdraw(address indexed provider, uint value);\n', '    event UpdateLiquidityLimit(address user, uint original_balance, uint original_supply, uint working_balance, uint working_supply);\n', '\n', '    function user_checkpoint (address addr) external returns (bool);\n', '    function claimable_tokens(address addr) external view returns (uint);\n', '    function claimable_reward(address addr) external view returns (uint);\n', '    function integrate_checkpoint()         external view returns (uint);\n', '\n', '    function kick(address addr) external;\n', '    function set_approve_deposit(address addr, bool can_deposit) external;\n', '    function deposit(uint _value) external;\n', '    function deposit(uint _value, address addr) external;\n', '    function withdraw(uint _value) external;\n', '    function withdraw(uint _value, bool claim_rewards) external;\n', '    function claim_rewards() external;\n', '    function claim_rewards(address addr) external;\n', '\n', '    function minter()                       external view returns (address);\n', '    function crv_token()                    external view returns (address);\n', '    function lp_token()                     external view returns (address);\n', '    function controller()                   external view returns (address);\n', '    function voting_escrow()                external view returns (address);\n', '    function balanceOf(address)             external view returns (uint);\n', '    function totalSupply()                  external view returns (uint);\n', '    function future_epoch_time()            external view returns (uint);\n', '    function approved_to_deposit(address, address)   external view returns (bool);\n', '    function working_balances(address)      external view returns (uint);\n', '    function working_supply()               external view returns (uint);\n', '    function period()                       external view returns (int128);\n', '    function period_timestamp(uint)         external view returns (uint);\n', '    function integrate_inv_supply(uint)     external view returns (uint);\n', '    function integrate_inv_supply_of(address) external view returns (uint);\n', '    function integrate_checkpoint_of(address) external view returns (uint);\n', '    function integrate_fraction(address)    external view returns (uint);\n', '    function inflation_rate()               external view returns (uint);\n', '    function reward_contract()              external view returns (address);\n', '    function rewarded_token()               external view returns (address);\n', '    function reward_integral()              external view returns (uint);\n', '    function reward_integral_for(address)   external view returns (uint);\n', '    function rewards_for(address)           external view returns (uint);\n', '    function claimed_rewards_for(address)   external view returns (uint);\n', '}\n', '\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '    function rewardPerToken() external view returns (uint256);\n', '    function rewards(address account) external view returns (uint256);\n', '    function earned(address account) external view returns (uint256);\n', '    function getRewardForDuration() external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    // Mutative\n', '    function stake(uint256 amount) external;\n', '    function withdraw(uint256 amount) external;\n', '    function getReward() external;\n', '    function exit() external;\n', '    // Events\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '}\n', '\n', 'interface IStakingRewards2 is IStakingRewards {\n', '\tfunction totalMinted() external view returns (uint);\n', '\tfunction weightOfGauge(address gauge) external view returns (uint);\n', '\tfunction stakingPerLPT(address gauge) external view returns (uint);\n', '\t\n', '\tfunction stakeTimeOf(address account) external view returns (uint);\n', '\tfunction stakeAgeOf(address account) external view returns (uint);\n', '\tfunction factorOf(address account) external view returns (uint);\n', '\n', '\tfunction spendTimeOf(address account) external view returns (uint);\n', '\tfunction spendAgeOf(address account) external view returns (uint);\n', '\tfunction coinAgeOf(address account) external view returns (uint);\n', '\t\n', '    function spendCoinAge(address account, uint coinAge) external returns (uint);\n', '    \n', '    event SpentCoinAge(address indexed gauge, address indexed account, uint coinAge);\n', '}\n', '\n', 'contract SSimpleGauge is LiquidityGauge, Configurable {\n', '    using SafeMath for uint;\n', '    using TransferHelper for address;\n', '\n', '    address override public minter;\n', '    address override public crv_token;\n', '    address override public lp_token;\n', '    address override public controller;\n', '    address override public voting_escrow;\n', '    mapping(address => uint) override public balanceOf;\n', '    uint override public totalSupply;\n', '    uint override public future_epoch_time;\n', '    \n', '    // caller -> recipient -> can deposit?\n', '    mapping(address => mapping(address => bool)) override public approved_to_deposit;\n', '    \n', '    mapping(address => uint) override public working_balances;\n', '    uint override public working_supply;\n', '    \n', '    // The goal is to be able to calculate ∫(rate * balance / totalSupply dt) from 0 till checkpoint\n', '    // All values are kept in units of being multiplied by 1e18\n', '    int128 override public period;\n', '    uint256[100000000000000000000000000000] override public period_timestamp;\n', '    \n', '    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from 0 till checkpoint\n', '    uint256[100000000000000000000000000000] override public integrate_inv_supply;  // bump epoch when rate() changes\n', '    \n', '    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\n', '    mapping(address => uint) override public integrate_inv_supply_of;\n', '    mapping(address => uint) override public integrate_checkpoint_of;\n', '    \n', '    // ∫(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\n', '    // Units: rate * t = already number of coins per address to issue\n', '    mapping(address => uint) override public integrate_fraction;\n', '    \n', '    uint override public inflation_rate;\n', '    \n', '    // For tracking external rewards\n', '    address override public reward_contract;\n', '    address override public rewarded_token;\n', '    \n', '    uint override public reward_integral;\n', '    mapping(address => uint) override public reward_integral_for;\n', '    mapping(address => uint) override public rewards_for;\n', '    mapping(address => uint) override public claimed_rewards_for;\n', '    \n', '\n', '\tuint public span;\n', '\tuint public end;\n', '\n', '\tfunction initialize(address governor, address _minter, address _lp_token) public initializer {\n', '\t    super.initialize(governor);\n', '\t    \n', '\t    minter      = _minter;\n', '\t    crv_token   = Minter(_minter).token();\n', '\t    lp_token    = _lp_token;\n', '\t    IERC20(lp_token).totalSupply();          // just check\n', '\t}\n', '    \n', '    function setSpan(uint _span, bool isLinear) virtual external governance {\n', '        span = _span;\n', '        if(isLinear)\n', '            end = now + _span;\n', '        else\n', '            end = 0;\n', '    }\n', '    \n', '    function kick(address addr) virtual override external {\n', '        _checkpoint(addr, true);\n', '    }\n', '    \n', '    function set_approve_deposit(address addr, bool can_deposit) virtual override external {\n', '        approved_to_deposit[addr][msg.sender] = can_deposit;\n', '    }\n', '    \n', '    function deposit(uint amount) virtual override external {\n', '        deposit(amount, msg.sender);\n', '    }\n', '    function deposit(uint amount, address addr) virtual override public {\n', "        require(addr == msg.sender || approved_to_deposit[msg.sender][addr], 'Not approved');\n", '\n', '        _checkpoint(addr, true);\n', '        \n', '        _deposit(addr, amount);\n', '        \n', '        balanceOf[addr] = balanceOf[addr].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        \n', '        emit Deposit(addr, amount);\n', '    }\n', '    function _deposit(address addr, uint amount) virtual internal {\n', '        lp_token.safeTransferFrom(addr, address(this), amount);\n', '    }\n', '    \n', '    function withdraw() virtual  external {\n', '        withdraw(balanceOf[msg.sender], true);\n', '    }\n', '    function withdraw(uint amount) virtual override external {\n', '        withdraw(amount, true);\n', '    }\n', '    function withdraw(uint amount, bool claim_rewards) virtual override public {\n', '        _checkpoint(msg.sender, claim_rewards);\n', '        \n', '        totalSupply = totalSupply.sub(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        \n', '        _withdraw(msg.sender, amount);\n', '        \n', '        emit Withdraw(msg.sender, amount);\n', '    }\n', '    function _withdraw(address to, uint amount) virtual internal {\n', '        lp_token.safeTransfer(to, amount);\n', '    }\n', '    \n', '    function claimable_reward(address) virtual override public view returns (uint) {\n', '        return 0;\n', '    }\n', '\n', '    function claim_rewards() virtual override public {\n', '        return claim_rewards(msg.sender);\n', '    }\n', '    function claim_rewards(address) virtual override public {\n', '        return;\n', '    }\n', '    function _checkpoint_rewards(address, bool) virtual internal {\n', '        return;\n', '    }\n', '    \n', '    function claimable_tokens(address addr) virtual override public view returns (uint amount) {\n', '        if(span == 0 || totalSupply == 0)\n', '            return 0;\n', '        \n', '        amount = SMinter(minter).quotas(address(this));\n', '        amount = amount.mul(balanceOf[addr]).div(totalSupply);\n', '        \n', '        uint lasttime = integrate_checkpoint_of[addr];\n', '        if(end == 0) {                                                         // isNonLinear, endless\n', '            if(now.sub(lasttime) < span)\n', '                amount = amount.mul(now.sub(lasttime)).div(span);\n', '        }else if(now < end)\n', '            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\n', '        else if(lasttime >= end)\n', '            amount = 0;\n', '    }\n', '    \n', '    function _checkpoint(address addr, uint amount) virtual internal {\n', '        if(amount > 0) {\n', '            integrate_fraction[addr] = integrate_fraction[addr].add(amount);\n', '            \n', "            address teamAddr = address(config['teamAddr']);\n", "            uint teamRatio = config['teamRatio'];\n", '            if(teamAddr != address(0) && teamRatio != 0)\n', '                integrate_fraction[teamAddr] = integrate_fraction[teamAddr].add(amount.mul(teamRatio).div(1 ether));\n', '        }\n', '    }\n', '\n', '    function _checkpoint(address addr, bool _claim_rewards) virtual internal {\n', '        uint amount = claimable_tokens(addr);\n', '        _checkpoint(addr, amount);\n', '        _checkpoint_rewards(addr, _claim_rewards);\n', '    \n', '        integrate_checkpoint_of[addr] = now;\n', '    }\n', '    \n', '    function user_checkpoint(address addr) virtual override external returns (bool) {\n', '        _checkpoint(addr, true);\n', '        return true;\n', '    }\n', '\n', '    function integrate_checkpoint() override external view returns (uint) {\n', '        return now;\n', '    }\n', '} \n', '\n', 'contract SExactGauge is LiquidityGauge, Configurable {\n', '    using SafeMath for uint;\n', '    using TransferHelper for address;\n', '    \n', "    bytes32 internal constant _devAddr_         = 'devAddr';\n", "    bytes32 internal constant _devRatio_        = 'devRatio';\n", "    bytes32 internal constant _ecoAddr_         = 'ecoAddr';\n", "    bytes32 internal constant _ecoRatio_        = 'ecoRatio';\n", "    bytes32 internal constant _claim_rewards_   = 'claim_rewards';\n", '    \n', '    address override public minter;\n', '    address override public crv_token;\n', '    address override public lp_token;\n', '    address override public controller;\n', '    address override public voting_escrow;\n', '    mapping(address => uint) override public balanceOf;\n', '    uint override public totalSupply;\n', '    uint override public future_epoch_time;\n', '    \n', '    // caller -> recipient -> can deposit?\n', '    mapping(address => mapping(address => bool)) override public approved_to_deposit;\n', '    \n', '    mapping(address => uint) override public working_balances;\n', '    uint override public working_supply;\n', '    \n', '    // The goal is to be able to calculate ∫(rate * balance / totalSupply dt) from 0 till checkpoint\n', '    // All values are kept in units of being multiplied by 1e18\n', '    int128 override public period;\n', '    uint256[100000000000000000000000000000] override public period_timestamp;\n', '    \n', '    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from 0 till checkpoint\n', '    uint256[100000000000000000000000000000] override public integrate_inv_supply;  // bump epoch when rate() changes\n', '    \n', '    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\n', '    mapping(address => uint) override public integrate_inv_supply_of;\n', '    mapping(address => uint) override public integrate_checkpoint_of;\n', '    \n', '    // ∫(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\n', '    // Units: rate * t = already number of coins per address to issue\n', '    mapping(address => uint) override public integrate_fraction;\n', '    \n', '    uint override public inflation_rate;\n', '    \n', '    // For tracking external rewards\n', '    address override public reward_contract;\n', '    address override public rewarded_token;\n', '    \n', '    mapping(address => uint) public reward_integral_;                             // rewarded_token => reward_integral\n', '    mapping(address => mapping(address => uint)) public reward_integral_for_;     // recipient => rewarded_token => reward_integral_for\n', '    mapping(address => mapping(address => uint)) public rewards_for_; \n', '    mapping(address => mapping(address => uint)) public claimed_rewards_for_; \n', '\n', '\tuint public span;\n', '\tuint public end;\n', '\tmapping(address => uint) public sumMiningPerOf;\n', '\tuint public sumMiningPer;\n', '\tuint public bufReward;\n', '\tuint public lasttime;\n', '\t\n', '\tfunction initialize(address governor, address _minter, address _lp_token) public virtual initializer {\n', '\t    super.initialize(governor);\n', '\t    \n', '\t    minter      = _minter;\n', '\t    crv_token   = Minter(_minter).token();\n', '\t    lp_token    = _lp_token;\n', '\t    IERC20(lp_token).totalSupply();                 // just check\n', '\t}\n', '    \n', '    function setSpan(uint _span, bool isLinear) virtual external governance {\n', '        span = _span;\n', '        if(isLinear)\n', '            end = now + _span;\n', '        else\n', '            end = 0;\n', '            \n', '        if(lasttime == 0)\n', '            lasttime = now;\n', '    }\n', '    \n', '    function kick(address addr) virtual override external {\n', '        _checkpoint(addr, true);\n', '    }\n', '    \n', '    function set_approve_deposit(address addr, bool can_deposit) virtual override external {\n', '        approved_to_deposit[addr][msg.sender] = can_deposit;\n', '    }\n', '    \n', '    function deposit(uint amount) virtual override external {\n', '        deposit(amount, msg.sender);\n', '    }\n', '    function deposit(uint amount, address addr) virtual override public {\n', "        require(addr == msg.sender || approved_to_deposit[msg.sender][addr], 'Not approved');\n", '\n', '        _checkpoint(addr, config[_claim_rewards_] == 0 ? false : true);\n', '        \n', '        _deposit(addr, amount);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        \n', '        emit Deposit(msg.sender, amount);\n', '    }\n', '    function _deposit(address addr, uint amount) virtual internal {\n', '        lp_token.safeTransferFrom(addr, address(this), amount);\n', '    }\n', '    \n', '    function withdraw() virtual external {\n', '        withdraw(balanceOf[msg.sender]);\n', '    }\n', '    function withdraw(uint amount) virtual override public {\n', '        withdraw(amount, config[_claim_rewards_] == 0 ? false : true);\n', '    }\n', '    function withdraw(uint amount, bool _claim_rewards) virtual override public {\n', '        _checkpoint(msg.sender, _claim_rewards);\n', '        \n', '        totalSupply = totalSupply.sub(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        \n', '        _withdraw(msg.sender, amount);\n', '        \n', '        emit Withdraw(msg.sender, amount);\n', '    }\n', '    function _withdraw(address to, uint amount) virtual internal {\n', '        lp_token.safeTransfer(to, amount);\n', '    }\n', '    \n', '    function claimable_reward(address addr) virtual override public view returns (uint) {\n', '        addr;\n', '        return 0;\n', '    }\n', '\n', '    function claim_rewards() virtual override public {\n', '        return claim_rewards(msg.sender);\n', '    }\n', '    function claim_rewards(address) virtual override public {\n', '        return;\n', '    }\n', '    function _checkpoint_rewards(address, bool) virtual internal {\n', '        return;\n', '    }\n', '    \n', '    function claimable_tokens(address addr) virtual override public view returns (uint r) {\n', '        r = integrate_fraction[addr].sub(Minter(minter).minted(addr, address(this)));\n', '        r = r.add(_claimable_last(addr, claimableDelta(), sumMiningPer, sumMiningPerOf[addr]));\n', '    }\n', '    \n', '    function _claimable_last(address addr, uint delta, uint sumPer, uint lastSumPer) virtual internal view returns (uint amount) {\n', '        if(span == 0 || totalSupply == 0)\n', '            return 0;\n', '        \n', '        amount = sumPer.sub(lastSumPer);\n', '        amount = amount.add(delta.mul(1 ether).div(totalSupply));\n', '        amount = amount.mul(balanceOf[addr]).div(1 ether);\n', '    }\n', '    function claimableDelta() virtual internal view returns(uint amount) {\n', '        if(span == 0 || totalSupply == 0)\n', '            return 0;\n', '        \n', '        amount = SMinter(minter).quotas(address(this)).sub(bufReward);\n', '\n', '        if(end == 0) {                                                         // isNonLinear, endless\n', '            if(now.sub(lasttime) < span)\n', '                amount = amount.mul(now.sub(lasttime)).div(span);\n', '        }else if(now < end)\n', '            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\n', '        else if(lasttime >= end)\n', '            amount = 0;\n', '    }\n', '\n', '    function _checkpoint(address addr, uint amount) virtual internal {\n', '        if(amount > 0) {\n', '            integrate_fraction[addr] = integrate_fraction[addr].add(amount);\n', '            \n', '            addr = address(config[_devAddr_]);\n', '            uint ratio = config[_devRatio_];\n', '            if(addr != address(0) && ratio != 0)\n', '                integrate_fraction[addr] = integrate_fraction[addr].add(amount.mul(ratio).div(1 ether));\n', '\n', '            addr = address(config[_ecoAddr_]);\n', '            ratio = config[_ecoRatio_];\n', '            if(addr != address(0) && ratio != 0)\n', '                integrate_fraction[addr] = integrate_fraction[addr].add(amount.mul(ratio).div(1 ether));\n', '        }\n', '    }\n', '    \n', '    function _checkpoint(address addr, bool _claim_rewards) virtual internal {\n', '        if(span == 0 || totalSupply == 0)\n', '            return;\n', '        \n', '        uint delta = claimableDelta();\n', '        uint amount = _claimable_last(addr, delta, sumMiningPer, sumMiningPerOf[addr]);\n', '        \n', '        if(delta != amount)\n', '            bufReward = bufReward.add(delta).sub(amount);\n', '        if(delta > 0)\n', '            sumMiningPer = sumMiningPer.add(delta.mul(1 ether).div(totalSupply));\n', '        if(sumMiningPerOf[addr] != sumMiningPer)\n', '            sumMiningPerOf[addr] = sumMiningPer;\n', '        lasttime = now;\n', '\n', '        _checkpoint(addr, amount);\n', '        _checkpoint_rewards(addr, _claim_rewards);\n', '    }\n', '\n', '    function user_checkpoint(address addr) virtual override external returns (bool) {\n', '        _checkpoint(addr, config[_claim_rewards_] == 0 ? false : true);\n', '        return true;\n', '    }\n', '\n', '    function integrate_checkpoint() override external view returns (uint) {\n', '        return lasttime;\n', '    }\n', '    \n', '    function reward_integral() virtual override external view returns (uint) {\n', '        return reward_integral_[rewarded_token];\n', '    }\n', '    \n', '    function reward_integral_for(address addr) virtual override external view returns (uint) {\n', '        return reward_integral_for_[addr][rewarded_token];\n', '    }\n', '    \n', '    function rewards_for(address addr) virtual override external view returns (uint) {\n', '        return rewards_for_[addr][rewarded_token];\n', '    }\n', '    \n', '    function claimed_rewards_for(address addr) virtual override external view returns (uint) {\n', '        return claimed_rewards_for_[addr][rewarded_token];\n', '    }\n', '} \n', '\n', '\n', 'contract SNestGauge is SExactGauge {\n', '\taddress[] public rewards;\n', '\t//mapping(address => mapping(address =>uint)) internal sumRewardPerOf_;      // recipient => rewarded_token => can sumRewardPerOf            // obsolete, instead of reward_integral_\n', '\t//mapping(address => uint) internal sumRewardPer_;                           // rewarded_token => can sumRewardPerOf                         // obsolete, instead of reward_integral_for_\n', '\n', '\tfunction initialize(address governor, address _minter, address _lp_token, address _nestGauge, address[] memory _moreRewards) public initializer {\n', '\t    super.initialize(governor, _minter, _lp_token);\n', '\t    \n', '\t    reward_contract = _nestGauge;\n', '\t    rewarded_token  = LiquidityGauge(_nestGauge).crv_token();\n', '\t    rewards         = _moreRewards;\n', '\t    rewards.push(rewarded_token);\n', '\t    address rewarded_token2 = LiquidityGauge(_nestGauge).rewarded_token();\n', '\t    if(rewarded_token2 != address(0))\n', '    \t    rewards.push(rewarded_token2);\n', '\t    \n', '\t    LiquidityGauge(_nestGauge).integrate_checkpoint();      // just check\n', '\t    for(uint i=0; i<_moreRewards.length; i++)\n', '\t        IERC20(_moreRewards[i]).totalSupply();              // just check\n', '\t}\n', '    \n', '    function _deposit(address from, uint amount) virtual override internal {\n', '        super._deposit(from, amount);                           // lp_token.safeTransferFrom(from, address(this), amount);\n', '        lp_token.safeApprove(reward_contract, amount);\n', '        LiquidityGauge(reward_contract).deposit(amount);\n', '    }\n', '\n', '    function _withdraw(address to, uint amount) virtual override internal {\n', '        LiquidityGauge(reward_contract).withdraw(amount);\n', '        super._withdraw(to, amount);                            // lp_token.safeTransfer(to, amount);\n', '    }\n', '    \n', '    function claim_rewards(address to) virtual override public {\n', '        if(span == 0 || totalSupply == 0)\n', '            return;\n', '        \n', '        _checkpoint_rewards(to, true);\n', '        \n', '        for(uint i=0; i<rewards.length; i++) {\n', '            uint amount = rewards_for_[to][rewards[i]].sub(claimed_rewards_for_[to][rewards[i]]);\n', '            if(amount > 0) {\n', '                rewards[i].safeTransfer(to, amount);\n', '                claimed_rewards_for_[to][rewards[i]] = rewards_for_[to][rewards[i]];\n', '            }\n', '        }\n', '    }\n', '\n', '    function _checkpoint_rewards(address addr, bool _claim_rewards) virtual override internal {\n', '        if(span == 0 || totalSupply == 0)\n', '            return;\n', '        \n', '        uint[] memory drs = new uint[](rewards.length);\n', '        \n', '        if(_claim_rewards) {\n', '            for(uint i=0; i<drs.length; i++)\n', '                drs[i] = IERC20(rewards[i]).balanceOf(address(this));\n', '                \n', '            Minter(LiquidityGauge(reward_contract).minter()).mint(reward_contract);\n', '            LiquidityGauge(reward_contract).claim_rewards();\n', '            \n', '            for(uint i=0; i<drs.length; i++)\n', '                drs[i] = IERC20(rewards[i]).balanceOf(address(this)).sub(drs[i]);\n', '        }\n', '\n', '        for(uint i=0; i<drs.length; i++) {\n', '            uint amount = _claimable_last(addr, drs[i], reward_integral_[rewards[i]], reward_integral_for_[addr][rewards[i]]);\n', '            if(amount > 0)\n', '                rewards_for_[addr][rewards[i]] = rewards_for_[addr][rewards[i]].add(amount);\n', '            \n', '            if(drs[i] > 0)\n', '                reward_integral_[rewards[i]] = reward_integral_[rewards[i]].add(drs[i].mul(1 ether).div(totalSupply));\n', '            if(reward_integral_for_[addr][rewards[i]] != reward_integral_[rewards[i]])\n', '                reward_integral_for_[addr][rewards[i]] = reward_integral_[rewards[i]];\n', '        }\n', '    }\n', '\n', '    function claimable_reward(address addr) virtual override public view returns (uint r) {\n', '        //uint delta = LiquidityGauge(reward_contract).claimable_tokens(address(this));     // Error: Mutable call in static context\n', '        uint delta = LiquidityGauge(reward_contract).integrate_fraction(address(this)).sub(Minter(LiquidityGauge(reward_contract).minter()).minted(address(this), reward_contract));\n', '        r = _claimable_last(addr, delta, reward_integral_[rewarded_token], reward_integral_for_[addr][rewarded_token]);\n', '        r = r.add(rewards_for_[addr][rewarded_token].sub(claimed_rewards_for_[addr][rewarded_token]));\n', '    }\n', '    \n', '    function claimable_reward2(address addr) virtual public view returns (uint r) {\n', '        uint delta = LiquidityGauge(reward_contract).claimable_reward(address(this)).sub(LiquidityGauge(reward_contract).claimed_rewards_for(address(this)));\n', '        address reward2 = LiquidityGauge(reward_contract).rewarded_token();\n', '        r = _claimable_last(addr, delta, reward_integral_[reward2], reward_integral_for_[addr][reward2]);\n', '        r = r.add(rewards_for_[addr][reward2].sub(claimed_rewards_for_[addr][reward2]));\n', '    }    \n', '\n', '    function claimable_reward(address addr, address reward) virtual public view returns (uint r) {\n', '        r = _claimable_last(addr, 0, reward_integral_[reward], reward_integral_for_[addr][reward]);\n', '        r = r.add(rewards_for_[addr][reward].sub(claimed_rewards_for_[addr][reward]));\n', '    }\n', '    \n', '    function claimed_rewards_for2(address addr) virtual public view returns (uint) {\n', '        return claimed_rewards_for_[addr][LiquidityGauge(reward_contract).rewarded_token()];\n', '    }\n', '    \n', '    function rewards_for2(address addr) virtual public view returns (uint) {\n', '        return rewards_for_[addr][LiquidityGauge(reward_contract).rewarded_token()];\n', '    }\n', '    \n', '}\n', '\n', '\n', 'contract SMinter is Minter, Configurable {\n', '    using SafeMath for uint;\n', '    using Address for address payable;\n', '    using TransferHelper for address;\n', '    \n', "\tbytes32 internal constant _allowContract_   = 'allowContract';\n", "\tbytes32 internal constant _allowlist_       = 'allowlist';\n", "\tbytes32 internal constant _blocklist_       = 'blocklist';\n", '\n', '    address override public token;\n', '    address override public controller;\n', '    mapping(address => mapping(address => uint)) override public minted;                    // user => reward_contract => value\n', '    mapping(address => mapping(address => bool)) override public allowed_to_mint_for;       // minter => user => can mint?\n', '    mapping(address => uint) public quotas;                                                 // reward_contract => quota;\n', '\n', '    function initialize(address governor, address token_) public initializer {\n', '        super.initialize(governor);\n', '        token = token_;\n', '    }\n', '    \n', '    function setGaugeQuota(address gauge, uint quota) public governance {\n', '       quotas[gauge] = quota;\n', '    }\n', '    \n', '    function mint(address gauge) virtual override public {\n', '        mint_for(gauge, msg.sender);   \n', '    }\n', '    \n', '    function mint_many(address[8] calldata gauges) virtual override external {\n', '        for(uint i=0; i<gauges.length; i++)\n', '            mint(gauges[i]);\n', '    }\n', '    \n', '    function mint_many(address[] calldata gauges) virtual external {\n', '        for(uint i=0; i<gauges.length; i++)\n', '            mint(gauges[i]);\n', '    }\n', '    \n', '    function mint_for(address gauge, address _for) virtual override public {\n', "        require(_for == msg.sender || allowed_to_mint_for[msg.sender][_for], 'Not approved');\n", "        require(quotas[gauge] > 0, 'No quota');\n", '        \n', "        require(getConfig(_blocklist_, msg.sender) == 0, 'In blocklist');\n", '        bool isContract = msg.sender.isContract();\n', "        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, msg.sender) != 0, 'No allowContract');\n", '\n', '        LiquidityGauge(gauge).user_checkpoint(_for);\n', '        uint total_mint = LiquidityGauge(gauge).integrate_fraction(_for);\n', '        uint to_mint = total_mint.sub(minted[_for][gauge]);\n', '    \n', '        if(to_mint != 0) {\n', '            quotas[gauge] = quotas[gauge].sub(to_mint);\n', '            token.safeTransfer(_for, to_mint);\n', '            minted[_for][gauge] = total_mint;\n', '    \n', '            emit Minted(_for, gauge, total_mint);\n', '        }\n', '    }\n', '    \n', '    function toggle_approve_mint(address minting_user) virtual override external {\n', '        allowed_to_mint_for[minting_user][msg.sender] = !allowed_to_mint_for[minting_user][msg.sender];\n', '    }\n', '}\n', '\n', '/*\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '*/\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract when upgrade EVEN times.\n', '   */\n', '  modifier initializerEven() {\n', '    require(initializing || isConstructor() || initialized, "Contract instance has already been initialized EVEN times");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = false;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '\tfunction sqrt(uint x)public pure returns(uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) public _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '    uint256 public _totalSupply;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    \n', '}\n', '\n', '\n', 'contract SfgToken is ERC20 {\n', '\n', '\tconstructor(address SfgFarm) ERC20("Stable Finance Governance Token", "SFG") public {\n', '\t\tuint8 decimals = 18;\n', '\t\t_setupDecimals(decimals);\n', '\t\t\n', '\t\t_mint(SfgFarm,  21000000 * 10 ** uint256(decimals));       // 100%, 21000000\n', '\t}\n', '}\n', '\n', 'contract SfyToken is ERC20 {\n', '\n', '\tconstructor(address SfyFarm) ERC20("Stable Finance Yield Token", "SFY") public {\n', '\t\tuint8 decimals = 18;\n', '\t\t_setupDecimals(decimals);\n', '\t\t\n', '\t\t_mint(SfyFarm,  21000000 * 10 ** uint256(decimals));       // 100%, 21000000\n', '\t}\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', 'import "./SMinter.sol";\n', '\n', 'contract TurboGauge is SExactGauge {\n', '    address public staking;\n', '    mapping(address => uint) public lastTurboOf;\n', '    uint public lastTurboSupply;\n', '\n', '\tfunction initialize(address governor, address _minter, address _lp_token, address _staking) virtual public initializer {\n', '\t    super.initialize(governor, _minter, _lp_token);\n', '\t    staking = _staking;\n', '\t}\n', '    \n', '\tfunction ratioStaking(address addr) public view returns (uint r) {\n', '        r = IStakingRewards2(staking).balanceOf(addr);\n', '        r = r.mul(1 ether).div(IStakingRewards2(staking).stakingPerLPT(address(this)));\n', '        r = r.mul(1 ether).div(balanceOf[addr]);\n', '        if(now > lasttime)\n', '            r = r.mul(IStakingRewards2(staking).spendAgeOf(addr)).div(now.sub(lasttime));\n', '\t}\n', '\t\n', '\tfunction factorOf(address addr) public view returns (uint f) {\n', '\t    f = IStakingRewards2(staking).factorOf(addr);\n', '\t    uint r = ratioStaking(addr);\n', '\t    if(r < 1 ether)\n', '\t        f = f.sub(1 ether).mul(r).div(1 ether).add(1 ether);\n', '\t}\n', '\n', '    \n', '    function virtualBalanceOf(address addr) virtual public view returns (uint) {\n', '        if(span == 0 || totalSupply == 0)\n', '            return balanceOf[addr];\n', '        if(now == lasttime)\n', '            return balanceOf[addr].add(lastTurboOf[addr]);\n', '        return balanceOf[addr].mul(factorOf(addr)).div(1 ether);\n', '    }\n', '    \n', '    function virtualTotalSupply() virtual public view returns (uint) {\n', '        return totalSupply.add(lastTurboSupply);\n', '    }\n', '    \n', '    function _virtualTotalSupply(address addr, uint vbo) virtual internal view returns (uint) {\n', '        return virtualTotalSupply().add(vbo).sub(balanceOf[addr].add(lastTurboOf[addr]));\n', '    }\n', '    \n', '    function _virtual_claimable_last(uint delta, uint sumPer, uint lastSumPer, uint vbo, uint _vts) virtual internal view returns (uint amount) {\n', '        if(span == 0 || totalSupply == 0)\n', '            return 0;\n', '        \n', '        amount = sumPer.sub(lastSumPer);\n', '        amount = amount.add(delta.mul(1 ether).div(_vts));\n', '        amount = amount.mul(vbo).div(1 ether);\n', '    }\n', '\n', '    function _checkpoint(address addr, bool _claim_rewards) virtual override internal {\n', '        if(span == 0 || totalSupply == 0)\n', '            return;\n', '        \n', '        uint vbo = virtualBalanceOf(addr);\n', '        uint _vts = _virtualTotalSupply(addr, vbo);\n', '        \n', '        uint delta = claimableDelta();\n', '        uint amount = _virtual_claimable_last(delta, sumMiningPer, sumMiningPerOf[addr], vbo, _vts);\n', '        \n', '        if(delta != amount)\n', '            bufReward = bufReward.add(delta).sub(amount);\n', '        if(delta > 0)\n', '            sumMiningPer = sumMiningPer.add(delta.mul(1 ether).div(_vts));\n', '        if(sumMiningPerOf[addr] != sumMiningPer)\n', '            sumMiningPerOf[addr] = sumMiningPer;\n', '        if(lastTurboOf[addr] != vbo.sub(balanceOf[addr]))\n', '            lastTurboOf[addr] = vbo.sub(balanceOf[addr]);\n', '        if(lastTurboSupply != _vts.sub(totalSupply))\n', '            lastTurboSupply = _vts.sub(totalSupply);\n', '        if(now > lasttime) {\n', '            uint coinAge = balanceOf[addr].mul(IStakingRewards2(staking).stakingPerLPT(address(this)).div(1 ether).mul(now.sub(lasttime)));\n', '            IStakingRewards2(staking).spendCoinAge(addr, coinAge);\n', '        }\n', '        lasttime = now;\n', '\n', '        _checkpoint(addr, amount);\n', '        _checkpoint_rewards(addr, _claim_rewards);\n', '    }\n', '\n', '}\n', '\n', '\n']
