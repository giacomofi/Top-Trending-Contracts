['// File: localhost/internals/gasRefundable.sol\n', '\n', '/**\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', ' \n', '// SPDX-License-Identifier: GPLv3\n', '\n', 'pragma solidity ^0.6.11;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IGasToken {\n', '    function freeUpTo(uint256) external returns (uint256);\n', '}\n', '\n', 'contract GasRefundable {\n', '    /// @notice Emits the new gas token information when it is set.\n', '    event SetGasToken(address _gasTokenAddress, GasTokenParameters _gasTokenParameters);\n', '\n', '    struct GasTokenParameters {\n', '        uint256 freeCallGasCost;\n', '        uint256 gasRefundPerUnit;\n', '    }\n', '\n', '    /// @dev Address of the gas token used to refund gas (default: CHI).\n', '    IGasToken private _gasToken = IGasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '    /// @dev Gas token parameters parameters used in the gas refund calcualtion (default: CHI).\n', '    GasTokenParameters private _gasTokenParameters = GasTokenParameters({freeCallGasCost: 14154, gasRefundPerUnit: 41130});\n', '\n', '    /// @notice Refunds gas based on the amount of gas spent in the transaction and the gas token parameters.\n', '    modifier refundGas() {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '        _gasToken.freeUpTo((gasSpent + _gasTokenParameters.freeCallGasCost) / _gasTokenParameters.gasRefundPerUnit);\n', '    }\n', '\n', '    /// @param _gasTokenAddress Address of the gas token used to refund gas.\n', '    /// @param _parameters Gas cost of the gas token free method call and amount of gas refunded per unit of gas token.\n', '    function _setGasToken(address _gasTokenAddress, GasTokenParameters memory _parameters) internal {\n', '        require(_gasTokenAddress != address(0), "gas token address is 0x0");\n', '        require(_parameters.freeCallGasCost != 0, "free call gas cost is 0");\n', '        require(_parameters.gasRefundPerUnit != 0, "gas refund per unit is 0");\n', '        _gasToken = IGasToken(_gasTokenAddress);\n', '        _gasTokenParameters.freeCallGasCost = _parameters.freeCallGasCost;\n', '        _gasTokenParameters.gasRefundPerUnit = _parameters.gasRefundPerUnit;\n', '        emit SetGasToken(_gasTokenAddress, _parameters);\n', '    }\n', '\n', '    /// @return Address of the gas token used to refund gas.\n', '    function gasToken() external view returns (address) {\n', '        return address(_gasToken);\n', '    }\n', '\n', '    /// @return Gas cost of the gas token free method call/Amount of gas refunded per unit of gas token.\n', '    function gasTokenParameters() external view returns (GasTokenParameters memory) {\n', '        return _gasTokenParameters;\n', '    }\n', '}\n', '\n', '// File: localhost/interfaces/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '// File: localhost/externals/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '// File: localhost/externals/SafeERC20.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) internal {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '// File: localhost/externals/Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '// File: localhost/internals/transferrable.sol\n', '\n', '/**\n', ' *  Transferrable - The Consumer Contract Wallet\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', '\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', '\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '\n', '/// @title SafeTransfer, allowing contract to withdraw tokens accidentally sent to itself\n', 'contract Transferrable {\n', '    using Address for address payable;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @dev This function is used to move tokens sent accidentally to this contract method.\n', '    /// @dev The owner can chose the new destination address\n', "    /// @param _to is the recipient's address.\n", '    /// @param _asset is the address of an ERC20 token or 0x0 for ether.\n', '    /// @param _amount is the amount to be transferred in base units.\n', '    function _safeTransfer(\n', '        address payable _to,\n', '        address _asset,\n', '        uint256 _amount\n', '    ) internal {\n', '        // address(0) is used to denote ETH\n', '        if (_asset == address(0)) {\n', '            _to.sendValue(_amount);\n', '        } else {\n', '            IERC20(_asset).safeTransfer(_to, _amount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: localhost/externals/initializable.sol\n', '\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: localhost/internals/ownable.sol\n', '\n', '/**\n', ' *  Ownable - The Consumer Contract Wallet\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', '\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', '\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '/// @title Ownable has an owner address and provides basic authorization control functions.\n', '/// This contract is modified version of the MIT OpenZepplin Ownable contract\n', '/// This contract allows for the transferOwnership operation to be made impossible\n', '/// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', 'contract Ownable is Initializable {\n', '    event TransferredOwnership(address _from, address _to);\n', '    event LockedOwnership(address _locked);\n', '\n', '    address payable private _owner;\n', '    bool private _isTransferable;\n', '\n', '    /// @notice Reverts if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(_isOwner(msg.sender), "sender is not an owner");\n', '        _;\n', '    }\n', '\n', '    /// @notice Allows the current owner to transfer control of the contract to a new address.\n', '    /// @param _account address to transfer ownership to.\n', '    /// @param _transferable indicates whether to keep the ownership transferable.\n', '    function transferOwnership(address payable _account, bool _transferable) external onlyOwner {\n', '        // Require that the ownership is transferable.\n', '        require(_isTransferable, "ownership is not transferable");\n', '        // Require that the new owner is not the zero address.\n', '        require(_account != address(0), "owner cannot be set to zero address");\n', '        // Set the transferable flag to the value _transferable passed in.\n', '        _isTransferable = _transferable;\n', '        // Emit the LockedOwnership event if no longer transferable.\n', '        if (!_transferable) {\n', '            emit LockedOwnership(_account);\n', '        }\n', '        // Emit the ownership transfer event.\n', '        emit TransferredOwnership(_owner, _account);\n', '        // Set the owner to the provided address.\n', '        _owner = _account;\n', '    }\n', '\n', '    /// @notice check if the ownership is transferable.\n', '    /// @return true if the ownership is transferable.\n', '    function isTransferable() external view returns (bool) {\n', '        return _isTransferable;\n', '    }\n', '\n', '    /// @notice Allows the current owner to relinquish control of the contract.\n', '    /// @dev Renouncing to ownership will leave the contract without an owner and unusable.\n', '    /// @dev It will not be possible to call the functions with the `onlyOwner` modifier anymore.\n', '    function renounceOwnership() external onlyOwner {\n', '        // Require that the ownership is transferable.\n', '        require(_isTransferable, "ownership is not transferable");\n', '        // note that this could be terminal\n', '        _owner = address(0);\n', '\n', '        emit TransferredOwnership(_owner, address(0));\n', '    }\n', '\n', '    /// @notice Find out owner address\n', '    /// @return address of the owner.\n', '    function owner() public view returns (address payable) {\n', '        return _owner;\n', '    }\n', '\n', '    /// @notice Sets the original owner of the contract and whether or not it is one time transferable.\n', '    function _initializeOwnable(address payable _account, bool _transferable) internal initializer {\n', '        _owner = _account;\n', '        _isTransferable = _transferable;\n', '        // Emit the LockedOwnership event if no longer transferable.\n', '        if (!_isTransferable) {\n', '            emit LockedOwnership(_account);\n', '        }\n', '        emit TransferredOwnership(address(0), _account);\n', '    }\n', '\n', '    /// @notice Check if owner address\n', '    /// @return true if sender is the owner of the contract.\n', '    function _isOwner(address _address) internal view returns (bool) {\n', '        return _address == _owner;\n', '    }\n', '}\n', '\n', '// File: localhost/interfaces/IController.sol\n', '\n', '\n', '/// @title The IController interface provides access to the isController and isAdmin checks.\n', 'interface IController {\n', '    function isController(address) external view returns (bool);\n', '\n', '    function isAdmin(address) external view returns (bool);\n', '}\n', '// File: localhost/controller.sol\n', '\n', '/**\n', ' *  Controller - The Consumer Contract Wallet\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', '\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', '\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '\n', '/// @title Controller stores a list of controller addresses that can be used for authentication in other contracts.\n', '/// @notice The Controller implements a hierarchy of concepts, Owner, Admin, and the Controllers.\n', '/// @dev Owner can change the Admins\n', '/// @dev Admins and can the Controllers\n', '/// @dev Controllers are used by the application.\n', 'contract Controller is IController, Ownable, Transferrable {\n', '    event AddedController(address _sender, address _controller);\n', '    event RemovedController(address _sender, address _controller);\n', '\n', '    event AddedAdmin(address _sender, address _admin);\n', '    event RemovedAdmin(address _sender, address _admin);\n', '\n', '    event Claimed(address _to, address _asset, uint256 _amount);\n', '\n', '    event Stopped(address _sender);\n', '    event Started(address _sender);\n', '\n', '    mapping(address => bool) private _isAdmin;\n', '    uint256 private _adminCount;\n', '\n', '    mapping(address => bool) private _isController;\n', '    uint256 private _controllerCount;\n', '\n', '    bool private _stopped;\n', '\n', '    /// @notice Constructor initializes the owner with the provided address.\n', '    /// @param _ownerAddress_ address of the owner.\n', '    constructor(address payable _ownerAddress_) public {\n', '        _initializeOwnable(_ownerAddress_, false);\n', '    }\n', '\n', '    /// @notice Checks if message sender is an admin.\n', '    modifier onlyAdmin() {\n', '        require(_isAdmin[msg.sender], "sender is not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice Check if Owner or Admin\n', '    modifier onlyAdminOrOwner() {\n', '        require(_isOwner(msg.sender) || _isAdmin[msg.sender], "sender is not admin or owner");\n', '        _;\n', '    }\n', '\n', '    /// @notice Check if controller is stopped\n', '    modifier notStopped() {\n', '        require(!isStopped(), "controller is stopped");\n', '        _;\n', '    }\n', '\n', '    /// @notice Add a new admin to the list of admins.\n', '    /// @param _account address to add to the list of admins.\n', '    function addAdmin(address _account) external onlyOwner notStopped {\n', '        _addAdmin(_account);\n', '    }\n', '\n', '    /// @notice Remove a admin from the list of admins.\n', '    /// @param _account address to remove from the list of admins.\n', '    function removeAdmin(address _account) external onlyOwner {\n', '        _removeAdmin(_account);\n', '    }\n', '\n', '    /// @return the current number of admins.\n', '    function adminCount() external view returns (uint256) {\n', '        return _adminCount;\n', '    }\n', '\n', '    /// @notice Add a new controller to the list of controllers.\n', '    /// @param _account address to add to the list of controllers.\n', '    function addController(address _account) external onlyAdminOrOwner notStopped {\n', '        _addController(_account);\n', '    }\n', '\n', '    /// @notice Remove a controller from the list of controllers.\n', '    /// @param _account address to remove from the list of controllers.\n', '    function removeController(address _account) external onlyAdminOrOwner {\n', '        _removeController(_account);\n', '    }\n', '\n', '    /// @notice count the Controllers\n', '    /// @return the current number of controllers.\n', '    function controllerCount() external view returns (uint256) {\n', '        return _controllerCount;\n', '    }\n', '\n', '    /// @notice is an address an Admin?\n', '    /// @return true if the provided account is an admin.\n', '    function isAdmin(address _account) external override view notStopped returns (bool) {\n', '        return _isAdmin[_account];\n', '    }\n', '\n', '    /// @notice is an address a Controller?\n', '    /// @return true if the provided account is a controller.\n', '    function isController(address _account) external override view notStopped returns (bool) {\n', '        return _isController[_account];\n', '    }\n', '\n', '    /// @notice this function can be used to see if the controller has been stopped\n', '    /// @return true is the Controller has been stopped\n', '    function isStopped() public view returns (bool) {\n', '        return _stopped;\n', '    }\n', '\n', '    /// @notice Internal-only function that adds a new admin.\n', '    function _addAdmin(address _account) private {\n', '        require(!_isAdmin[_account], "provided account is already an admin");\n', '        require(!_isController[_account], "provided account is already a controller");\n', '        require(!_isOwner(_account), "provided account is already the owner");\n', '        require(_account != address(0), "provided account is the zero address");\n', '        _isAdmin[_account] = true;\n', '        _adminCount++;\n', '        emit AddedAdmin(msg.sender, _account);\n', '    }\n', '\n', '    /// @notice Internal-only function that removes an existing admin.\n', '    function _removeAdmin(address _account) private {\n', '        require(_isAdmin[_account], "provided account is not an admin");\n', '        _isAdmin[_account] = false;\n', '        _adminCount--;\n', '        emit RemovedAdmin(msg.sender, _account);\n', '    }\n', '\n', '    /// @notice Internal-only function that adds a new controller.\n', '    function _addController(address _account) private {\n', '        require(!_isAdmin[_account], "provided account is already an admin");\n', '        require(!_isController[_account], "provided account is already a controller");\n', '        require(!_isOwner(_account), "provided account is already the owner");\n', '        require(_account != address(0), "provided account is the zero address");\n', '        _isController[_account] = true;\n', '        _controllerCount++;\n', '        emit AddedController(msg.sender, _account);\n', '    }\n', '\n', '    /// @notice Internal-only function that removes an existing controller.\n', '    function _removeController(address _account) private {\n', '        require(_isController[_account], "provided account is not a controller");\n', '        _isController[_account] = false;\n', '        _controllerCount--;\n', '        emit RemovedController(msg.sender, _account);\n', '    }\n', '\n', '    /// @notice stop our controllers and admins from being useable\n', '    function stop() external onlyAdminOrOwner {\n', '        _stopped = true;\n', '        emit Stopped(msg.sender);\n', '    }\n', '\n', '    /// @notice start our controller again\n', '    function start() external onlyOwner {\n', '        _stopped = false;\n', '        emit Started(msg.sender);\n', '    }\n', '\n', '    //// @notice Withdraw tokens from the smart contract to the specified account.\n', '    function claim(\n', '        address payable _to,\n', '        address _asset,\n', '        uint256 _amount\n', '    ) external onlyAdmin notStopped {\n', '        _safeTransfer(_to, _asset, _amount);\n', '        emit Claimed(_to, _asset, _amount);\n', '    }\n', '}\n', '\n', '// File: localhost/interfaces/IPublicResolver.sol\n', '\n', '\n', '\n', 'interface IPublicResolver {\n', '\n', '    function addr(bytes32) external view returns (address);\n', '\n', '}\n', '\n', '// File: localhost/interfaces/IENS.sol\n', '\n', '\n', 'interface IENS {\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '\n', '\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n', '    function setResolver(bytes32 node, address resolver) external;\n', '    function setOwner(bytes32 node, address owner) external;\n', '    function setTTL(bytes32 node, uint64 ttl) external;\n', '    function owner(bytes32 node) external view returns (address);\n', '    function resolver(bytes32 node) external view returns (address);\n', '    function ttl(bytes32 node) external view returns (uint64);\n', '\n', '}\n', '\n', '\n', '// File: localhost/internals/ensResolvable.sol\n', '\n', '/**\n', ' *  ENSResolvable - The Consumer Contract Wallet\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', '\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', '\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '\n', '///@title ENSResolvable - Ethereum Name Service Resolver\n', '///@notice contract should be used to get an address for an ENS node\n', 'contract ENSResolvable is Initializable {\n', '    /// @dev Address of the ENS registry contract set to the default ENS registry address.\n', '    address private _ensRegistry = address(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\n', '\n', '    /// @notice Checks if the contract has been initialized succesfully i.e. the ENS registry has been set.\n', '    modifier initialized() {\n', '        require(_ensRegistry != address(0), "ENSResolvable not initialized");\n', '        _;\n', '    }\n', '\n', '    /// @return Current address of the ENS registry contract.\n', '    function ensRegistry() public view returns (address) {\n', '        return _ensRegistry;\n', '    }\n', '\n', '    /// @notice Helper function used to get the address of a node.\n', '    /// @param _node of the ENS entry that needs resolving.\n', '    /// @return The address of the resolved ENS node.\n', '    function _ensResolve(bytes32 _node) internal view initialized returns (address) {\n', '        return IPublicResolver(IENS(_ensRegistry).resolver(_node)).addr(_node);\n', '    }\n', '\n', '    /// @param _ensReg is the ENS registry used.\n', '    function _initializeENSResolvable(address _ensReg) internal initializer {\n', '        // Set ENS registry or use default\n', '        if (_ensReg != address(0)) {\n', '            _ensRegistry = _ensReg;\n', '        }\n', '    }\n', '}\n', '\n', '// File: localhost/internals/controllable.sol\n', '\n', '/**\n', ' *  Controllable - The Consumer Contract Wallet\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', '\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', '\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '\n', '/// @title Controllable implements access control functionality of the Controller found via ENS.\n', 'contract Controllable is ENSResolvable {\n', '    // Default values for mainnet ENS\n', '    // controller.tokencard.eth\n', '    bytes32 private constant _DEFAULT_CONTROLLER_NODE = 0x7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d5893697;\n', '\n', '    /// @dev Is the registered ENS node identifying the controller contract.\n', '    bytes32 private _controllerNode = _DEFAULT_CONTROLLER_NODE;\n', '\n', '    /// @notice Checks if message sender is a controller.\n', '    modifier onlyController() {\n', '        require(_isController(msg.sender), "sender is not a controller");\n', '        _;\n', '    }\n', '\n', '    /// @notice Checks if message sender is an admin.\n', '    modifier onlyAdmin() {\n', '        require(_isAdmin(msg.sender), "sender is not an admin");\n', '        _;\n', '    }\n', '\n', '    /// @return the controller node registered in ENS.\n', '    function controllerNode() public view returns (bytes32) {\n', '        return _controllerNode;\n', '    }\n', '\n', '    /// @notice Initializes the controller contract object.\n', '    /// @param _controllerNode_ is the ENS node of the Controller.\n', '    /// @dev pass in bytes32(0) to use the default, production node labels for ENS\n', '    function _initializeControllable(bytes32 _controllerNode_) internal initializer {\n', '        // Set controllerNode or use default\n', '        if (_controllerNode_ != bytes32(0)) {\n', '            _controllerNode = _controllerNode_;\n', '        }\n', '    }\n', '\n', '    /// @return true if the provided account is a controller.\n', '    function _isController(address _account) internal view returns (bool) {\n', '        return IController(_ensResolve(_controllerNode)).isController(_account);\n', '    }\n', '\n', '    /// @return true if the provided account is an admin.\n', '    function _isAdmin(address _account) internal view returns (bool) {\n', '        return IController(_ensResolve(_controllerNode)).isAdmin(_account);\n', '    }\n', '}\n', '\n', '// File: localhost/gasProxy.sol\n', '\n', '/**\n', ' *  Copyright (C) 2019 The Contract Wallet Company Limited\n', ' *\n', ' *  This program is free software: you can redistribute it and/or modify\n', ' *  it under the terms of the GNU General Public License as published by\n', ' *  the Free Software Foundation, either version 3 of the License, or\n', ' *  (at your option) any later version.\n', ' *  This program is distributed in the hope that it will be useful,\n', ' *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *  GNU General Public License for more details.\n', ' *  You should have received a copy of the GNU General Public License\n', ' *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', 'contract GasProxy is Controllable, GasRefundable {\n', '    /// @notice Emits the transaction executed by the controller.\n', '    event ExecutedTransaction(address _destination, uint256 _value, bytes _data, bytes _returnData);\n', '\n', '    /// @param _ens_ is the address of the ENS registry.\n', '    /// @param _controllerNode_ ENS node of the controller contract.\n', '    constructor(address _ens_, bytes32 _controllerNode_) public {\n', '        _initializeENSResolvable(_ens_);\n', '        _initializeControllable(_controllerNode_);\n', '    }\n', '\n', '    /// @param _gasTokenAddress Address of the gas token used to refund gas.\n', '    /// @param _parameters Gas cost of the gas token free method call and amount of gas refunded per unit of gas token.\n', '    function setGasToken(address _gasTokenAddress, GasTokenParameters calldata _parameters) external onlyAdmin {\n', '        _setGasToken(_gasTokenAddress, _parameters);\n', '    }\n', '\n', '    /// @notice Executes a controller operation and refunds gas using gas tokens.\n', '    /// @param _destination Destination address of the executed transaction.\n', '    /// @param _value Amount of ETH (wei) to be sent together with the transaction.\n', '    /// @param _data Data payload of the controller transaction.\n', '    function executeTransaction(\n', '        address _destination,\n', '        uint256 _value,\n', '        bytes calldata _data\n', '    ) external payable onlyController refundGas returns (bytes memory) {\n', '        (bool success, bytes memory returnData) = _destination.call{value: _value}(_data);\n', '        require(success, "external call failed");\n', '        emit ExecutedTransaction(_destination, _value, _data, returnData);\n', '        return returnData;\n', '    }\n', '}']