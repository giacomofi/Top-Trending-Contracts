['pragma solidity ^0.6.6;\n', '\n', 'abstract contract ERC20TokenObject {\n', '\n', '  function totalSupply() virtual public view returns (uint);\n', '  function balanceOf(address who) virtual public view returns (uint);\n', '  function transferFrom(address from, address to, uint256 value) virtual public returns (bool);\n', '  function transfer(address to, uint value) virtual public returns (bool);\n', '  function allowance(address owner_, address spender) virtual public view returns (uint);\n', '  function approve(address spender, uint value) virtual public returns (bool);\n', '  function increaseAllowance(address spender, uint addedValue) virtual public returns (bool);\n', '  function decreaseAllowance(address spender, uint subtractedValue) virtual public returns (bool);\n', '\n', '}\n', '\n', 'contract Swapper {\n', '    \n', '    address public _owner;\n', '    address public ERC20TokenAddress;\n', '    bool public presaleActive = true;\n', '    uint public weiHardcap = 250 * 1e18;\n', '    uint public weiRaised = 0;\n', '    ERC20TokenObject private ERC20Token;\n', '    \n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    event SetERC20TokenAddress(address);\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '    }\n', '    \n', '    function setERC20TokenAddress(address addr) onlyOwner public returns (bool) {\n', '        ERC20TokenAddress = addr;\n', '        ERC20Token = ERC20TokenObject(addr);\n', '        emit SetERC20TokenAddress(addr);\n', '        return true;\n', '    } \n', '    \n', '    function depositERC20Token(uint amount) public {\n', '        ERC20Token.transferFrom(msg.sender, address(this), amount);\n', '    }\n', '    \n', '    function swapETHForERC20Token() payable public returns (bool) {\n', '        uint amountERC20TokenToTransfer = msg.value * 2 / 125 / 1e9;\n', '        require(amountERC20TokenToTransfer > 0, "NOT_ENOUGH_ETH");\n', '        ERC20Token.transfer(msg.sender, amountERC20TokenToTransfer);\n', '        weiRaised = weiRaised + msg.value;\n', '        return true;\n', '    }\n', '    \n', '    function endPresale() onlyOwner public returns (bool) {\n', '        \n', '        ERC20Token.transfer(msg.sender, ERC20Token.balanceOf(address(this)));\n', '        payable(msg.sender).transfer(address(this).balance);\n', '        return true;\n', '        \n', '    }\n', '    \n', '}']