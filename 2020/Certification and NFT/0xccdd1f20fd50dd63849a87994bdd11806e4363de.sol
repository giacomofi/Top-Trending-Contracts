['// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Zapper\n', '///@notice This contract adds liquidity to Curve stablecoin and BTC liquidity pools in one transaction with ETH or ERC tokens.\n', '\n', '// File: Context.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '// File: OpenZepplinOwnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address payable public _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address payable msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address payable newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '// File: OpenZepplinSafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '// File: OpenZepplinIERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '// File: OpenZepplinReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'interface IUniswapRouter02 {\n', '    //get estimated amountOut\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    //token 2 token\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    //eth 2 token\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    //token 2 eth\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface ICurveSwap {\n', '    function coins(int128 arg0) external view returns (address);\n', '\n', '    function underlying_coins(int128 arg0) external view returns (address);\n', '\n', '    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '\n', '    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '\n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '}\n', '\n', 'interface yERC20 {\n', '    function deposit(uint256 _amount) external;\n', '}\n', '\n', 'interface IBalancer {\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint256 tokenAmountIn,\n', '        address tokenOut,\n', '        uint256 minAmountOut,\n', '        uint256 maxPrice\n', '    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'contract Curve_ZapIn_General_V1_9 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    bool public stopped = false;\n', '    uint16 public goodwill = 0;\n', '    address\n', '        public zgoodwillAddress = 0xE737b6AfEC2320f616297e59445b60a11e3eF75F;\n', '\n', '    IUniswapV2Factory\n', '        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '\n', '    IBalancer private BalWBTCPool = IBalancer(\n', '        0x1efF8aF5D577060BA4ac8A29A13525bb0Ee2A3D5\n', '    );\n', '\n', '    address\n', '        private constant wethToken = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    address\n', '        private constant wbtcToken = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n', '\n', '    address\n', '        public intermediateStable = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    struct Pool {\n', '        address swapAddress;\n', '        address tokenAddress;\n', '        address[4] poolTokens;\n', '        bool isMetaPool;\n', '    }\n', '\n', '    mapping(address => Pool) public curvePools;\n', '    mapping(address => address) private metaPools; //Token address => swap address\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function adds liquidity to a Curve pool with ETH or ERC20 tokens\n', '    @param toWhomToIssue The address to return the Curve LP tokens to\n', '    @param fromToken The ERC20 token used for investment (address(0x00) if ether)\n', '    @param swapAddress Curve swap address for the pool\n', '    @param incomingTokenQty The amount of fromToken to invest\n', '    @param minPoolTokens The minimum acceptable quantity of tokens to receive. Reverts otherwise\n', '    @return Amount of Curve LP tokens received\n', '     */\n', '    function ZapIn(\n', '        address toWhomToIssue,\n', '        address fromToken,\n', '        address swapAddress,\n', '        uint256 incomingTokenQty,\n', '        uint256 minPoolTokens\n', '    )\n', '        external\n', '        payable\n', '        stopInEmergency\n', '        nonReentrant\n', '        returns (uint256 crvTokensBought)\n', '    {\n', '        uint256 toInvest;\n', '        if (fromToken == address(0)) {\n', '            require(msg.value > 0, "Error: ETH not sent");\n', '            toInvest = msg.value;\n', '        } else {\n', '            require(msg.value == 0, "Error: ETH sent");\n', '            require(incomingTokenQty > 0, "Error: Invalid ERC amount");\n', '            IERC20(fromToken).safeTransferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                incomingTokenQty\n', '            );\n', '            toInvest = incomingTokenQty;\n', '        }\n', '        (bool isUnderlying, uint8 underlyingIndex) = _isUnderlyingToken(\n', '            swapAddress,\n', '            fromToken\n', '        );\n', '        if (isUnderlying) {\n', '            crvTokensBought = _enterCurve(\n', '                swapAddress,\n', '                toInvest,\n', '                underlyingIndex\n', '            );\n', '        } else {\n', '            (uint256 tokensBought, uint8 index) = _getIntermediate(\n', '                swapAddress,\n', '                fromToken,\n', '                toInvest\n', '            );\n', '            crvTokensBought = _enterCurve(swapAddress, tokensBought, index);\n', '        }\n', '        require(\n', '            crvTokensBought > minPoolTokens,\n', '            "Received less than minPoolTokens"\n', '        );\n', '\n', '        address poolTokenAddress = curvePools[swapAddress].tokenAddress;\n', '        uint256 goodwillPortion;\n', '        if (goodwill > 0) {\n', '            goodwillPortion = SafeMath.div(\n', '                SafeMath.mul(crvTokensBought, goodwill),\n', '                10000\n', '            );\n', '            IERC20(poolTokenAddress).safeTransfer(\n', '                zgoodwillAddress,\n', '                goodwillPortion\n', '            );\n', '        }\n', '        IERC20(poolTokenAddress).transfer(\n', '            toWhomToIssue,\n', '            SafeMath.sub(crvTokensBought, goodwillPortion)\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function swaps to an appropriate intermediate token to be used to add liquidity\n', '    @param swapAddress Curve swap address for the pool\n', '    @param fromToken The ERC20 token used for investment (address(0x00) if ether)\n', '    @param amount The amount of fromToken to invest\n', '    @return Amount of tokens (or LP) bought, token index for add_liquidity call\n', '     */\n', '    function _getIntermediate(\n', '        address swapAddress,\n', '        address fromToken,\n', '        uint256 amount\n', '    ) internal returns (uint256 tokensBought, uint8 index) {\n', '        Pool memory pool2Enter = curvePools[swapAddress];\n', '        address[4] memory poolTokens = pool2Enter.poolTokens;\n', '        if (pool2Enter.isMetaPool) {\n', '            for (uint8 i = 0; i < 4; i++) {\n', '                if (metaPools[poolTokens[i]] != address(0)) {\n', '                    address intermediateSwapAddress = metaPools[poolTokens[i]];\n', '                    (\n', '                        bool isUnderlying,\n', '                        uint8 underlyingIndex\n', '                    ) = _isUnderlyingToken(intermediateSwapAddress, fromToken);\n', '                    if (isUnderlying) {\n', '                        tokensBought = _enterCurve(\n', '                            intermediateSwapAddress,\n', '                            amount,\n', '                            underlyingIndex\n', '                        );\n', '                        return (tokensBought, i);\n', '                    }\n', '                    uint256 intermediateTokenBought;\n', '                    if (_isBtcPool(intermediateSwapAddress)) {\n', '                        intermediateTokenBought = _token2Token(\n', '                            fromToken,\n', '                            wbtcToken,\n', '                            amount\n', '                        );\n', '                        (, index) = _isUnderlyingToken(\n', '                            intermediateSwapAddress,\n', '                            wbtcToken\n', '                        );\n', '                    } else {\n', '                        intermediateTokenBought = _token2Token(\n', '                            fromToken,\n', '                            intermediateStable,\n', '                            amount\n', '                        );\n', '                        (, index) = _isUnderlyingToken(\n', '                            intermediateSwapAddress,\n', '                            intermediateStable\n', '                        );\n', '                    }\n', '                    tokensBought = _enterCurve(\n', '                        intermediateSwapAddress,\n', '                        intermediateTokenBought,\n', '                        index\n', '                    );\n', '                    return (tokensBought, i);\n', '                }\n', '            }\n', '        } else {\n', '            if (_isBtcPool(swapAddress)) {\n', '                tokensBought = _token2Token(fromToken, wbtcToken, amount);\n', '                (, index) = _isUnderlyingToken(swapAddress, wbtcToken);\n', '                return (tokensBought, index);\n', '            }\n', '            tokensBought = _token2Token(fromToken, intermediateStable, amount);\n', '            (, index) = _isUnderlyingToken(swapAddress, intermediateStable);\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to swap ETH/ERC20 <> ETH/ERC20\n', '    @param fromToken The token address to swap from. (0x00 for ETH)\n', '    @param toToken The token address to swap to. (0x00 for ETH)\n', '    @param tokens2Trade The amount of tokens to swap\n', '    @return tokenBought The quantity of tokens bought\n', '    */\n', '    function _token2Token(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 tokenBought) {\n', '        if (fromToken == address(0)) {\n', '            address[] memory path = new address[](2);\n', '            path[0] = wethToken;\n', '            path[1] = toToken;\n', '            tokenBought = uniswapRouter.swapExactETHForTokens.value(\n', '                tokens2Trade\n', '            )(1, path, address(this), deadline)[path.length - 1];\n', '        } else {\n', '            IERC20(fromToken).safeIncreaseAllowance(\n', '                address(uniswapRouter),\n', '                tokens2Trade\n', '            );\n', '            if (fromToken != wethToken) {\n', '                // check output via tokenA -> tokenB\n', '                address pairA = UniSwapV2FactoryAddress.getPair(\n', '                    fromToken,\n', '                    toToken\n', '                );\n', '                address[] memory pathA = new address[](2);\n', '                pathA[0] = fromToken;\n', '                pathA[1] = toToken;\n', '                uint256 amtA;\n', '                if (pairA != address(0)) {\n', '                    amtA = uniswapRouter.getAmountsOut(tokens2Trade, pathA)[1];\n', '                }\n', '\n', '                // check output via tokenA -> weth -> tokenB\n', '                address[] memory pathB = new address[](3);\n', '                pathB[0] = fromToken;\n', '                pathB[1] = wethToken;\n', '                pathB[2] = toToken;\n', '\n', '                uint256 amtB = uniswapRouter.getAmountsOut(\n', '                    tokens2Trade,\n', '                    pathB\n', '                )[2];\n', '\n', '                if (amtA >= amtB) {\n', '                    tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                        tokens2Trade,\n', '                        1,\n', '                        pathA,\n', '                        address(this),\n', '                        deadline\n', '                    )[pathA.length - 1];\n', '                } else {\n', '                    tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                        tokens2Trade,\n', '                        1,\n', '                        pathB,\n', '                        address(this),\n', '                        deadline\n', '                    )[pathB.length - 1];\n', '                }\n', '            } else {\n', '                address[] memory path = new address[](2);\n', '                path[0] = wethToken;\n', '                path[1] = toToken;\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    address(this),\n', '                    deadline\n', '                )[path.length - 1];\n', '            }\n', '        }\n', '        require(tokenBought > 0, "Error Swapping Tokens");\n', '    }\n', '\n', '    /**\n', '    @notice This function adds liquidity to a curve pool\n', '    @param swapAddress Curve swap address for the pool\n', '    @param amount The quantity of tokens being added as liquidity\n', '    @param index The token index for the add_liquidity call\n', '    @return tokenBought The quantity of curve LP tokens received\n', '    */\n', '    function _enterCurve(\n', '        address swapAddress,\n', '        uint256 amount,\n', '        uint8 index\n', '    ) internal returns (uint256 crvTokensBought) {\n', '        address tokenAddress = curvePools[swapAddress].tokenAddress;\n', '        uint256 iniTokenBal = IERC20(tokenAddress).balanceOf(address(this));\n', '        address entryToken = curvePools[swapAddress].poolTokens[index];\n', '        IERC20(entryToken).safeIncreaseAllowance(address(swapAddress), amount);\n', '        uint256 numTokens = _getNumTokens(swapAddress);\n', '        if (numTokens == 4) {\n', '            uint256[4] memory amounts;\n', '            amounts[index] = amount;\n', '            ICurveSwap(swapAddress).add_liquidity(amounts, 0);\n', '        } else if (numTokens == 3) {\n', '            uint256[3] memory amounts;\n', '            amounts[index] = amount;\n', '            ICurveSwap(swapAddress).add_liquidity(amounts, 0);\n', '        } else {\n', '            uint256[2] memory amounts;\n', '            amounts[index] = amount;\n', '            ICurveSwap(swapAddress).add_liquidity(amounts, 0);\n', '        }\n', '        crvTokensBought = (IERC20(tokenAddress).balanceOf(address(this))).sub(\n', '            iniTokenBal\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function checks if the curve pool contains WBTC\n', '    @param swapAddress Curve swap address for the pool\n', '    @return true if the pool contains WBTC, false otherwise\n', '    */\n', '    function _isBtcPool(address swapAddress) internal view returns (bool) {\n', '        address[4] memory poolTokens = getPoolTokens(swapAddress);\n', '        for (uint8 i = 0; i < 4; i++) {\n', '            if (poolTokens[i] == wbtcToken) return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _getNumTokens(address swapAddress)\n', '        internal\n', '        view\n', '        returns (uint256 numTokens)\n', '    {\n', '        address[4] memory poolTokens = getPoolTokens(swapAddress);\n', '        if (poolTokens[2] == address(0)) return 2;\n', '        if (poolTokens[3] == address(0)) return 3;\n', '        return 4;\n', '    }\n', '\n', '    function _isUnderlyingToken(\n', '        address swapAddress,\n', '        address fromTokenContractAddress\n', '    ) internal view returns (bool, uint8) {\n', '        address[4] memory poolTokens = getPoolTokens(swapAddress);\n', '        for (uint8 i = 0; i < 4; i++) {\n', '            if (poolTokens[i] == address(0)) return (false, 0);\n', '            if (poolTokens[i] == fromTokenContractAddress) return (true, i);\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function adds a new supported pool\n', '    @param swapAddress Curve swap address for the pool\n', '    @param tokenAddress Curve token address for the pool\n', '    @param poolTokens token (or LP) contract addresses of underlying tokens\n', '    @dev poolTokens should be unwrapped tokens (e.g. DAI not yDAI)\n', '    @dev poolTokens should use 0 address for pools with < 4 tokens\n', '    @param isMetaPool true if pool contains a curve LP token as a pool token\n', '    */\n', '    function addPool(\n', '        address swapAddress,\n', '        address tokenAddress,\n', '        address[4] calldata poolTokens,\n', '        bool isMetaPool\n', '    ) external onlyOwner {\n', '        require(\n', '            curvePools[swapAddress].swapAddress == address(0),\n', '            "Pool exists"\n', '        );\n', '        Pool memory newPool = Pool(\n', '            swapAddress,\n', '            tokenAddress,\n', '            poolTokens,\n', '            isMetaPool\n', '        );\n', '        curvePools[swapAddress] = newPool;\n', '        metaPools[tokenAddress] = swapAddress;\n', '    }\n', '\n', '    /**\n', '    @notice This function updates an existing supported pool\n', '    @param swapAddress Curve swap address for the pool\n', '    @param tokenAddress Curve token address for the pool\n', '    @param poolTokens token (or LP) contract addresses of underlying tokens\n', '    @dev poolTokens should be unwrapped tokens (e.g. DAI not yDAI)\n', '    @dev poolTokens should use 0 address for pools with < 4 tokens\n', '    @param isMetaPool true if pool contains a curve LP token as a pool token\n', '    */\n', '    function updatePool(\n', '        address swapAddress,\n', '        address tokenAddress,\n', '        address[4] calldata poolTokens,\n', '        bool isMetaPool\n', '    ) external onlyOwner {\n', '        require(\n', '            curvePools[swapAddress].swapAddress == swapAddress,\n', '            "Pool doesn\'t exist"\n', '        );\n', '        Pool storage pool2Update = curvePools[swapAddress];\n', '        pool2Update.tokenAddress = tokenAddress;\n', '        pool2Update.poolTokens = poolTokens;\n', '        pool2Update.isMetaPool = isMetaPool;\n', '        metaPools[tokenAddress] = swapAddress;\n', '    }\n', '\n', '    /**\n', '    @notice This function returns an array of underlying pool token addresses\n', '    @param swapAddress Curve swap address for the pool\n', '    @return returns a 4 element array containing the addresses of the pool tokens (0 address if pool contains < 4 tokens)\n', '    */\n', '    function getPoolTokens(address swapAddress)\n', '        public\n', '        view\n', '        returns (address[4] memory poolTokens)\n', '    {\n', '        poolTokens = curvePools[swapAddress].poolTokens;\n', '    }\n', '\n', '    function inCaseTokengetsStuck(IERC20 _TokenAddress) external onlyOwner {\n', '        uint256 qty = _TokenAddress.balanceOf(address(this));\n', '        IERC20(_TokenAddress).safeTransfer(_owner, qty);\n', '    }\n', '\n', '    function set_new_goodwill(uint16 _new_goodwill) external onlyOwner {\n', '        require(\n', '            _new_goodwill >= 0 && _new_goodwill < 10000,\n', '            "GoodWill Value not allowed"\n', '        );\n', '        goodwill = _new_goodwill;\n', '    }\n', '\n', '    function set_new_zgoodwillAddress(address _new_zgoodwillAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        zgoodwillAddress = _new_zgoodwillAddress;\n', '    }\n', '\n', '    function updateIntermediateStable(address newIntermediate)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            newIntermediate != intermediateStable,\n', '            "Already using this intermediate"\n', '        );\n', '        intermediateStable = newIntermediate;\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() external onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    // - to withdraw any ETH balance sitting in the contract\n', '    function withdraw() external onlyOwner {\n', '        _owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != tx.origin, "Do not send ETH directly");\n', '    }\n', '}']