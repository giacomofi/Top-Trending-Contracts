['// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/PaymentSplitter.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @title PaymentSplitter\n', ' * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n', ' * that the Ether will be split in this way, since it is handled transparently by the contract.\n', ' *\n', ' * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n', ' * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n', ' * an amount proportional to the percentage of total shares they were assigned.\n', ' *\n', ' * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n', ' * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n', ' * function.\n', ' */\n', 'contract PaymentSplitter is Context {\n', '    using SafeMath for uint256;\n', '\n', '    event PayeeAdded(address account, uint256 shares);\n', '    event PaymentReleased(address to, uint256 amount);\n', '    event PaymentReceived(address from, uint256 amount);\n', '\n', '    uint256 private _totalShares;\n', '    uint256 private _totalReleased;\n', '\n', '    mapping(address => uint256) private _shares;\n', '    mapping(address => uint256) private _released;\n', '    address[] private _payees;\n', '\n', '    /**\n', '     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n', '     * the matching position in the `shares` array.\n', '     *\n', '     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n', '     * duplicates in `payees`.\n', '     */\n', '    constructor (address[] memory payees, uint256[] memory shares) public payable {\n', '        // solhint-disable-next-line max-line-length\n', '        require(payees.length == shares.length, "PaymentSplitter: payees and shares length mismatch");\n', '        require(payees.length > 0, "PaymentSplitter: no payees");\n', '\n', '        for (uint256 i = 0; i < payees.length; i++) {\n', '            _addPayee(payees[i], shares[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n', "     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n", '     * reliability of the events, and not the actual splitting of Ether.\n', '     *\n', '     * To learn more about this see the Solidity documentation for\n', '     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n', '     * functions].\n', '     */\n', '    receive () external payable virtual {\n', '        emit PaymentReceived(_msgSender(), msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total shares held by payees.\n', '     */\n', '    function totalShares() public view returns (uint256) {\n', '        return _totalShares;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total amount of Ether already released.\n', '     */\n', '    function totalReleased() public view returns (uint256) {\n', '        return _totalReleased;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of shares held by an account.\n', '     */\n', '    function shares(address account) public view returns (uint256) {\n', '        return _shares[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of Ether already released to a payee.\n', '     */\n', '    function released(address account) public view returns (uint256) {\n', '        return _released[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the address of the payee number `index`.\n', '     */\n', '    function payee(uint256 index) public view returns (address) {\n', '        return _payees[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n', '     * total shares and their previous withdrawals.\n', '     */\n', '    function release(address payable account) public virtual {\n', '        require(_shares[account] > 0, "PaymentSplitter: account has no shares");\n', '\n', '        uint256 totalReceived = address(this).balance.add(_totalReleased);\n', '        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n', '\n', '        require(payment != 0, "PaymentSplitter: account is not due payment");\n', '\n', '        _released[account] = _released[account].add(payment);\n', '        _totalReleased = _totalReleased.add(payment);\n', '\n', '        account.transfer(payment);\n', '        emit PaymentReleased(account, payment);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new payee to the contract.\n', '     * @param account The address of the payee to add.\n', '     * @param shares_ The number of shares owned by the payee.\n', '     */\n', '    function _addPayee(address account, uint256 shares_) private {\n', '        require(account != address(0), "PaymentSplitter: account is the zero address");\n', '        require(shares_ > 0, "PaymentSplitter: shares are 0");\n', '        require(_shares[account] == 0, "PaymentSplitter: account already has shares");\n', '\n', '        _payees.push(account);\n', '        _shares[account] = shares_;\n', '        _totalShares = _totalShares.add(shares_);\n', '        emit PayeeAdded(account, shares_);\n', '    }\n', '}']