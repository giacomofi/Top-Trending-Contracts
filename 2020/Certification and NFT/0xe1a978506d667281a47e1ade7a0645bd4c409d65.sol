['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function allowed(address who) public view returns (bool) {\n', '        return owner() == who;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' */\n', 'contract ReentrancyGuard {\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', '/*\n', ' * @title IVotes\n', ' */\n', 'interface IVotes {\n', '    function isVoted(address _who) external view returns (bool);\n', '\n', '    function totalVotes() external view returns (uint);\n', '\n', '    function totalWeight() external view returns (uint);\n', '\n', '//    function deposit() external payable;\n', '    function withdraw() external;\n', '\n', '    function voteForRepublicans() external payable;\n', '\n', '    function voteForDemocrats() external payable;\n', '\n', '    // after 1 month contract can be destroyed\n', '    function destroyIt() external;\n', '\n', '    function democratsWon() external;\n', '\n', '    function republicansWon() external;\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '// Developed by Pironmind\n', '// https://t.me/pironmind\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./IVotes.sol";\n', 'import "./ReentrancyGuard.sol";\n', 'import "./Address.sol";\n', 'import "./IRandom.sol";\n', '\n', '/*\n', ' * @title AmericanVotes\n', ' * @dev Implements voting process along with vote delegation\n', ' */\n', 'contract AmericanVotes is IVotes, Ownable, ReentrancyGuard {\n', '    using Address for *;\n', '    using SafeMath for uint;\n', '\n', '    event EthereumDeposited(address voter, uint256 amount);\n', '    event LuckyBonusClaimed(address lacky, uint256 amount);\n', '    event TeamRewardClaimed(address teammate, uint256 amount);\n', '    event EthereumWithdrawn(address resipient, uint256 amount);\n', '    event DemocratsWon(bool x);\n', '\n', '    enum Consignmen { NONE, REPUBLICANS, DEMOCRATS }\n', '    enum State { NONE, CHANGE }\n', '\n', '    struct Voter {\n', '        uint weight; // balance\n', '        uint balance;\n', '        bool voted;  // if true, that person already voted\n', '        Consignmen voteType;\n', '        State state;\n', '        bool credited;\n', '    }\n', '\n', '    struct Proposal {\n', '        uint voteCount; // number of accumulated votes\n', '        uint voteWeight;\n', '        uint weightRepublicans;\n', '        uint weightDemocrats;\n', '        uint forRepublicans;\n', '        uint forDemocrats;\n', '        uint startDate;\n', '        uint endDate;\n', '        Consignmen winner;\n', '    }\n', '\n', '    Proposal public proposal;\n', '\n', '    mapping(address => Voter) public voters;\n', '\n', '    address[] public votersList;\n', '\n', '    uint256 private _minimumDeposit;\n', '\n', '    uint256 public serviceFee;\n', '\n', '    uint256 public luckyFee;\n', '\n', '    mapping (address => uint) public balances;\n', '\n', '    address public teamWallet;\n', '    IRandom public randomOracle;\n', '    address public luckyAddress = address(0);\n', '\n', '    /*\n', "     * @dev Create a new ballot to choose one of 'proposalNames'.\n", '     * @param proposalNames names of proposals\n', '     */\n', '    constructor(address _teamWallet, address _randomOracle, uint startDate, uint endDate) {\n', '        teamWallet = _teamWallet;\n', '        randomOracle = IRandom(_randomOracle);\n', '        proposal.startDate = startDate;\n', '        proposal.endDate = endDate;\n', '        serviceFee = 20; // %\n', '        luckyFee = 5; // %\n', '        _minimumDeposit = 1e17;\n', '    }\n', '\n', '    // @dev How much lucky guy get in random\n', '    function luckyBonus() public view returns (uint256) {\n', '        return balances[address(0)];\n', '    }\n', '\n', '    // @dev How much team get if anything will be okey\n', '    function teamReward() public view returns (uint256) {\n', '        return balances[teamWallet];\n', '    }\n', '\n', '    function isVoted(address _who) public override view returns (bool) {\n', '        return voters[_who].voted;\n', '    }\n', '\n', '\n', '    function totalVotes() public override view returns (uint) {\n', '        return proposal.voteCount;\n', '    }\n', '\n', '    function totalWeight() public override view returns (uint) {\n', '        return proposal.voteWeight;\n', '    }\n', '\n', '    function minimumDeposit() public view returns (uint) {\n', '        return _minimumDeposit;\n', '    }\n', '\n', '    // @dev _amount (wei)\n', '    function setMinimumDeposit(uint256 _amount) external onlyOwner {\n', '        require(_amount > 0, "Must be more then 0");\n', '\n', '        _minimumDeposit = _amount;\n', '    }\n', '\n', '    function _deposit() internal /*override*/ /*payable*/ /*nonReentrant*/ {\n', '        require(!Address.isContract(msg.sender), "Contract deposit not accepted");\n', '        require(msg.value >= minimumDeposit(), "Not enough balance for deposit");\n', '\n', '        uint _serviceShare = msg.value.mul(serviceFee).div(100);\n', '        uint _luckyShare = msg.value.mul(luckyFee).div(100);\n', '        balances[address(teamWallet)] = balances[address(teamWallet)]\n', '            .add(_serviceShare.sub(_luckyShare));\n', '        balances[address(luckyAddress)] = balances[address(luckyAddress)]\n', '            .add(_luckyShare);\n', '\n', '        voters[msg.sender].balance = voters[msg.sender].balance.add(msg.value.sub(_serviceShare));\n', '\n', '        emit EthereumDeposited(msg.sender, msg.value.sub(_serviceShare));\n', '        emit EthereumDeposited(teamWallet, _serviceShare.sub(_luckyShare));\n', '        emit EthereumDeposited(luckyAddress, _luckyShare);\n', '    }\n', '\n', '    function withdraw() public override onlyAfter afterWinnerSet {\n', '\n', '        // team wallet withdraw\n', '        if (msg.sender == address(teamWallet)) {\n', '            uint amount = balances[address(teamWallet)];\n', '            balances[address(teamWallet)] = balances[address(teamWallet)].sub(amount);\n', '            balances[address(teamWallet)] = 0;\n', '            payable(msg.sender).transfer(amount);\n', '            emit TeamRewardClaimed(address(teamWallet), amount);\n', '            return;\n', '        }\n', '\n', '        // lucky wallet withdraw\n', '        if (msg.sender == address(luckyAddress) && balances[address(luckyAddress)] > 0) {\n', '            uint amount = balances[address(luckyAddress)];\n', '            balances[address(luckyAddress)] = balances[address(luckyAddress)].sub(amount);\n', '            balances[address(luckyAddress)] = 0;\n', '            payable(msg.sender).transfer(amount);\n', '            emit LuckyBonusClaimed(address(luckyAddress), amount);\n', '            return;\n', '        }\n', '\n', '        // count withdraw\n', '        require(!voters[msg.sender].credited, "Balance counted");\n', '        require(voters[msg.sender].voteType == proposal.winner, "Only if winner");\n', '\n', '        voters[msg.sender].credited = true;\n', '\n', '        uint weight = voters[msg.sender].weight;\n', '        uint share = _countShare(proposal.weightDemocrats, proposal.weightRepublicans, weight);\n', '\n', '        voters[msg.sender].weight = voters[msg.sender].weight.sub(weight, "WSUB1");\n', '        voters[msg.sender].balance = voters[msg.sender].balance.add(weight).add(share);\n', '\n', '        uint _amount = voters[msg.sender].balance;\n', '        voters[msg.sender].balance = voters[msg.sender].balance.sub(_amount, "WSUB2");\n', '\n', '        payable(msg.sender).transfer(_amount);\n', '        emit EthereumWithdrawn(address(msg.sender), _amount);\n', '    }\n', '\n', '    function voteForRepublicans() public override payable nonReentrant {\n', '        _deposit();\n', '        _vote(Consignmen.REPUBLICANS, msg.sender);\n', '    }\n', '\n', '    function voteForDemocrats() public override payable nonReentrant {\n', '        _deposit();\n', '        _vote(Consignmen.DEMOCRATS, msg.sender);\n', '    }\n', '\n', '    // after 1 month contract can be destroyed\n', '    function destroyIt() public override onlyOwner {\n', '        require(block.timestamp > proposal.endDate.add(31 * 1 days));\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function democratsWon() public override onlyOwner onlyAfter winnerNotSet {\n', '        _setWinner(Consignmen.DEMOCRATS);\n', '        _selectLucky();\n', '        emit DemocratsWon(true);\n', '    }\n', '\n', '    function republicansWon() public override onlyOwner onlyAfter winnerNotSet {\n', '        _setWinner(Consignmen.REPUBLICANS);\n', '        _selectLucky();\n', '        emit DemocratsWon(false);\n', '    }\n', '\n', '    function _setWinner(Consignmen _winner) internal {\n', '        proposal.winner = _winner;\n', '    }\n', '\n', '    function _selectLucky() internal {\n', '        require(randomOracle.getNumber(0, uint(votersList.length).sub(1, "SL1")) >= 0, "Oracle connected");\n', '        uint luckyNum = randomOracle.getNumber(0, uint(votersList.length).sub(1, "SL1"));\n', '        luckyAddress = votersList[luckyNum];\n', '        uint luckyBank = balances[address(0)];\n', '        balances[address(0)] = balances[address(0)].sub(luckyBank);\n', '        balances[votersList[luckyNum]] = balances[votersList[luckyNum]].add(luckyBank);\n', '    }\n', '\n', '    function _vote(Consignmen _type, address voter)\n', '        internal\n', '        onlyDuring\n', '    {\n', '        Voter storage sender = voters[msg.sender];\n', '\n', '        if (sender.voteType != Consignmen.NONE) {\n', '            require(sender.voteType == _type, "Only for one candidate");\n', '        }\n', '\n', '        uint256 amount = sender.balance;\n', '        sender.balance = sender.balance.sub(amount);\n', '        sender.weight = sender.weight.add(amount);\n', '        sender.voteType = _type;\n', '\n', '        if (_type == Consignmen.DEMOCRATS) {\n', '            proposal.weightDemocrats = proposal.weightDemocrats.add(amount);\n', '        } else {\n', '            proposal.weightRepublicans = proposal.weightRepublicans.add(amount);\n', '        }\n', '\n', '        if (!sender.voted) {\n', '            proposal.voteCount++;\n', '            if (_type == Consignmen.DEMOCRATS) {\n', '                proposal.forDemocrats++;\n', '            } else {\n', '                proposal.forRepublicans++;\n', '            }\n', '            votersList.push(voter);\n', '        }\n', '\n', '        sender.voted = true;\n', '\n', '        proposal.voteWeight = proposal.voteWeight.add(amount);\n', '    }\n', '\n', '    function _countShare(uint256 share1, uint256 share2, uint256 userShare) public view returns(uint) {\n', '        if (proposal.winner == Consignmen.DEMOCRATS) {\n', '            return userShare.mul(share1).div(share2);\n', '        }\n', '        return userShare.mul(share2).div(share1);\n', '    }\n', '\n', '    modifier onlyDuring() {\n', '        require(\n', '            block.timestamp >= proposal.startDate &&\n', '            block.timestamp <= proposal.endDate,\n', '            "Voting not has not started or just ended yet"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfter() {\n', '        require(block.timestamp > proposal.endDate, "Voting in progress");\n', '        _;\n', '    }\n', '\n', '    modifier winnerNotSet() {\n', '        require(proposal.winner == Consignmen.NONE, "Only if no winner");\n', '        _;\n', '    }\n', '\n', '    modifier afterWinnerSet() {\n', '        require(proposal.winner != Consignmen.NONE, "Only after winner was set");\n', '        _;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['pragma solidity ^0.7.4;\n', '\n', '/*\n', '* @title IRandom contract interface.\n', '*/\n', 'interface IRandom {\n', '    // @notice get random number between min max values\n', '    function getNumber(uint min, uint max) external pure returns (uint256);\n', '}\n']
