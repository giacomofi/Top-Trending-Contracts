['pragma solidity ^0.5.16;\n', '\n', 'library Math {\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    \n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require( address(this).balance >= amount, "Address: insufficient balance" );\n', '\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require( success, "Address: unable to send value, recipient may have reverted" );\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function mint(address account, uint256 amount) external;\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval( address indexed owner, address indexed spender, uint256 value );\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer( IERC20 token, address to, uint256 value ) internal { callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) ); }\n', '\n', '    function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {\n', '        callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );\n', '    }\n', '\n', '    function safeApprove( IERC20 token, address spender, uint256 value ) internal {\n', '        require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );\n', '        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );\n', '    }\n', '\n', '    function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add( value );\n', '        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );\n', '    }\n', '\n', '    function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );\n', '        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor( string memory name, string memory symbol, uint8 decimals ) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '/**\n', ' * Vault Strategy Interface\n', ' */\n', 'interface IGOFStrategy {\n', '    function want() external view returns (address);\n', '    function deposit() external;\n', '    function withdraw(address) external;\n', '    function withdraw(uint) external;\n', '    function withdrawAll() external returns (uint);\n', '    function balanceOf() external view returns (uint);\n', '}\n', '\n', '/**\n', ' * \n', ' */\n', 'interface Converter {\n', '    function convert(address) external returns (uint);\n', '}\n', '\n', '/**\n', ' *\n', ' */\n', 'interface OneSplitAudit {\n', '    function swap(\n', '        address fromToken,\n', '        address destToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        uint256[] calldata distribution,\n', '        uint256 flags\n', '    )\n', '        external\n', '        payable\n', '        returns(uint256 returnAmount);\n', '    \n', '    function getExpectedReturn(\n', '        address fromToken,\n', '        address destToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 flags // See constants in IOneSplit.sol\n', '    )\n', '        external\n', '        view\n', '        returns(\n', '            uint256 returnAmount,\n', '            uint256[] memory distribution\n', '        );\n', '}\n', '\n', '/**\n', ' *  @dev\n', ' *  The controller of Strategy\n', ' *  Distribute different strategies according to different tokens\n', ' */\n', 'contract GOFStrategyControllerV2 {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    address public governance;\n', '    address public strategist;\n', '\n', '    address public onesplit;\n', '    address public rewards;\n', '    address public factory;\n', '    mapping(address => address) public vaults;\n', '    mapping(address => address) public strategies;\n', '    mapping(address => mapping(address => address)) public converters;\n', '    \n', '    mapping(address => mapping(address => bool)) public approvedStrategies;\n', '\n', '    uint public split = 500;\n', '    uint public constant max = 10000;\n', '    \n', '    constructor(address _rewards) public {\n', '        governance = tx.origin;\n', '        strategist = tx.origin;\n', '\n', '        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n', '        rewards = _rewards;\n', '    }\n', '    \n', '    function setFactory(address _factory) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        factory = _factory;\n', '    }\n', '    \n', '    function setSplit(uint _split) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        split = _split;\n', '    }\n', '    \n', '    function setOneSplit(address _onesplit) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        onesplit = _onesplit;\n', '    }\n', '    \n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setRewards(address _rewards) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        rewards = _rewards;\n', '    }\n', '    \n', '    function setVault(address _token, address _vault) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!strategist");\n', '        require(vaults[_token] == address(0), "Golff:vault");\n', '        vaults[_token] = _vault;\n', '    }\n', '    \n', '     function approveStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        approvedStrategies[_token][_strategy] = true;\n', '    }\n', '\n', '    function revokeStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == governance, "Golff:!governance");\n', '        approvedStrategies[_token][_strategy] = false;\n', '    }\n', '\n', '    function setConverter(address _input, address _output, address _converter) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!strategist");\n', '        converters[_input][_output] = _converter;\n', '    }\n', '    \n', '    function setStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!strategist");\n', '        require(approvedStrategies[_token][_strategy] == true, "Golff:!approved");\n', '        address _current = strategies[_token];\n', '        //之前存在策略,那就先把所有的资金提出来\n', '        if (_current != address(0)) {\n', '           IGOFStrategy(_current).withdrawAll();\n', '        }\n', '        strategies[_token] = _strategy;\n', '    }\n', '    \n', '    /**\n', '     * 获取收益\n', '     * @param _token staking token\n', '     * @param _amount staking amount\n', '     */\n', '    function earn(address _token, uint _amount) public {\n', '        address _strategy = strategies[_token]; //获取策略的合约地址\n', '        address _want = IGOFStrategy(_strategy).want();//策略需要的token地址\n', '        if (_want != _token) {//如果策略需要的和输入的不一样,需要先转换\n', '            address converter = converters[_token][_want];//转换器合约地址.\n', '            IERC20(_token).safeTransfer(converter, _amount);//给转换器打钱\n', '            _amount = Converter(converter).convert(_strategy);//执行转换...\n', '            IERC20(_want).safeTransfer(_strategy, _amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_strategy, _amount);\n', '        }\n', '        IGOFStrategy(_strategy).deposit();//存钱\n', '    }\n', '    \n', '    /**\n', '     * 获取token的余额\n', '     * @param _token staking token\n', '     */\n', '    function balanceOf(address _token) external view returns (uint) {\n', '        return IGOFStrategy(strategies[_token]).balanceOf();\n', '    }\n', '    \n', '    /**\n', '     * 提现全部\n', '     * @param _token staking token\n', '     */\n', '    function withdrawAll(address _token) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!governance");\n', '        IGOFStrategy(strategies[_token]).withdrawAll();\n', '    }\n', '    \n', '    /**\n', '     *\n', '     */\n', '    function inCaseTokensGetStuck(address _token, uint _amount) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!governance");\n', '        IERC20(_token).safeTransfer(governance, _amount);\n', '    }\n', '    \n', '    /**\n', '     *\n', '     */\n', '    function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {\n', '        uint _balance = IERC20(_token).balanceOf(_strategy);//获取策略器 某个代币的余额\n', '        address _want = IGOFStrategy(_strategy).want();//策略器需要的代币.\n', '        (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);\n', '    }\n', '    \n', '    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\n', '    function yearn(address _strategy, address _token, uint parts) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "Golff:!governance");\n', '        // This contract should never have value in it, but just incase since this is a public call\n', '        uint _before = IERC20(_token).balanceOf(address(this));\n', '        IGOFStrategy(_strategy).withdraw(_token);\n', '        uint _after =  IERC20(_token).balanceOf(address(this));\n', '        if (_after > _before) {\n', '            uint _amount = _after.sub(_before);\n', '            address _want = IGOFStrategy(_strategy).want();\n', '            uint[] memory _distribution;\n', '            uint _expected;\n', '            _before = IERC20(_want).balanceOf(address(this));\n', '            IERC20(_token).safeApprove(onesplit, 0);\n', '            IERC20(_token).safeApprove(onesplit, _amount);\n', '            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\n', '            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\n', '            _after = IERC20(_want).balanceOf(address(this));\n', '            if (_after > _before) {\n', '                _amount = _after.sub(_before);\n', '                uint _reward = _amount.mul(split).div(max);\n', '                earn(_want, _amount.sub(_reward));\n', '                IERC20(_want).safeTransfer(rewards, _reward);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * 提现\n', '     * @param _token token to ben withdraw\n', '     * @param _amount amount\n', '     */\n', '    function withdraw(address _token, uint _amount) public {\n', '        require(msg.sender == vaults[_token], "Golff:!vault");\n', '        IGOFStrategy(strategies[_token]).withdraw(_amount);\n', '    }\n', '}']