['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/IOneRouter.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'interface IOneRouterView {\n', '    struct Swap {\n', '        IERC20 destToken;\n', '        uint256 flags;\n', '        uint256 destTokenEthPriceTimesGasPrice;\n', '        address[] disabledDexes;\n', '    }\n', '\n', '    struct Path {\n', '        Swap[] swaps;\n', '    }\n', '\n', '    struct SwapResult {\n', '        uint256[] returnAmounts;\n', '        uint256[] estimateGasAmounts;\n', '        uint256[][] distributions;\n', '        address[][] dexes;\n', '    }\n', '\n', '    struct PathResult {\n', '        SwapResult[] swaps;\n', '    }\n', '\n', '    function getReturn(\n', '        IERC20 fromToken,\n', '        uint256[] calldata amounts,\n', '        Swap calldata swap\n', '    )\n', '        external\n', '        view\n', '        returns(\n', '            Path[] memory paths,\n', '            PathResult[] memory pathResults,\n', '            SwapResult memory splitResult\n', '        );\n', '\n', '    function getSwapReturn(\n', '        IERC20 fromToken,\n', '        uint256[] calldata amounts,\n', '        Swap calldata swap\n', '    )\n', '        external\n', '        view\n', '        returns(SwapResult memory result);\n', '\n', '    function getPathReturn(\n', '        IERC20 fromToken,\n', '        uint256[] calldata amounts,\n', '        Path calldata path\n', '    )\n', '        external\n', '        view\n', '        returns(PathResult memory result);\n', '\n', '    function getMultiPathReturn(\n', '        IERC20 fromToken,\n', '        uint256[] calldata amounts,\n', '        Path[] calldata paths\n', '    )\n', '        external\n', '        view\n', '        returns(\n', '            PathResult[] memory pathResults,\n', '            SwapResult memory splitResult\n', '        );\n', '}\n', '\n', '\n', 'abstract contract IOneRouter is IOneRouterView {\n', '    struct Referral {\n', '        address payable ref;\n', '        uint256 fee;\n', '    }\n', '\n', '    struct SwapInput {\n', '        IERC20 fromToken;\n', '        IERC20 destToken;\n', '        uint256 amount;\n', '        uint256 minReturn;\n', '        Referral referral;\n', '    }\n', '\n', '    struct SwapDistribution {\n', '        uint256[] weights;\n', '    }\n', '\n', '    struct PathDistribution {\n', '        SwapDistribution[] swapDistributions;\n', '    }\n', '\n', '    function makeSwap(\n', '        SwapInput calldata input,\n', '        Swap calldata swap,\n', '        SwapDistribution calldata swapDistribution\n', '    )\n', '        external\n', '        payable\n', '        virtual\n', '        returns(uint256 returnAmount);\n', '\n', '    function makePathSwap(\n', '        SwapInput calldata input,\n', '        Path calldata path,\n', '        PathDistribution calldata pathDistribution\n', '    )\n', '        external\n', '        payable\n', '        virtual\n', '        returns(uint256 returnAmount);\n', '\n', '    function makeMultiPathSwap(\n', '        SwapInput calldata input,\n', '        Path[] calldata paths,\n', '        PathDistribution[] calldata pathDistributions,\n', '        SwapDistribution calldata interPathsDistribution\n', '    )\n', '        external\n', '        payable\n', '        virtual\n', '        returns(uint256 returnAmount);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/UniERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'library UniERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    IERC20 public constant ZERO_ADDRESS = IERC20(0);\n', '\n', '    function isETH(IERC20 token) internal pure returns(bool) {\n', '        return (token == ZERO_ADDRESS || token == ETH_ADDRESS);\n', '    }\n', '\n', '    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return account.balance;\n', '        } else {\n', '            return token.balanceOf(account);\n', '        }\n', '    }\n', '\n', '    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                token.safeTransfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniTransferFromSender(IERC20 token, address payable target, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                require(msg.value >= amount, "UniERC20: not enough value");\n', '                target.transfer(amount);\n', '                if (msg.value > amount) {\n', '                    // Return remainder if exist\n', '                    msg.sender.transfer(msg.value.sub(amount));\n', '                }\n', '            } else {\n', '                token.safeTransferFrom(msg.sender, target, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniApprove(IERC20 token, address to, uint256 amount) internal {\n', '        if (!isETH(token)) {\n', '            if (amount == 0) {\n', '                token.safeApprove(to, 0);\n', '                return;\n', '            }\n', '\n', '            uint256 allowance = token.allowance(address(this), to);\n', '            if (allowance < amount) {\n', '                if (allowance > 0) {\n', '                    token.safeApprove(to, 0);\n', '                }\n', '                token.safeApprove(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniDecimals(IERC20 token) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return 18;\n', '        }\n', '\n', '        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\n', '            abi.encodeWithSignature("decimals()")\n', '        );\n', '        if (!success) {\n', '            (success, data) = address(token).staticcall{ gas: 20000 }(\n', '                abi.encodeWithSignature("DECIMALS()")\n', '            );\n', '        }\n', '\n', '        return success ? abi.decode(data, (uint8)) : 18;\n', '    }\n', '\n', '    function uniSymbol(IERC20 token) internal view returns(string memory) {\n', '        if (isETH(token)) {\n', '            return "ETH";\n', '        }\n', '\n', '        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\n', '            abi.encodeWithSignature("symbol()")\n', '        );\n', '        if (!success) {\n', '            (success, data) = address(token).staticcall{ gas: 20000 }(\n', '                abi.encodeWithSignature("SYMBOL()")\n', '            );\n', '        }\n', '\n', '        if (success && data.length >= 96) {\n', '            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\n', '            if (offset == 0x20 && len > 0 && len <= 256) {\n', '                return string(abi.decode(data, (bytes)));\n', '            }\n', '        }\n', '\n', '        if (success && data.length == 32) {\n', '            uint len = 0;\n', '            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\n', '                len++;\n', '            }\n', '\n', '            if (len > 0) {\n', '                bytes memory result = new bytes(len);\n', '                for (uint i = 0; i < len; i++) {\n', '                    result[i] = data[i];\n', '                }\n', '                return string(result);\n', '            }\n', '        }\n', '\n', '        return _toHex(address(token));\n', '    }\n', '\n', '    function _toHex(address account) private pure returns(string memory) {\n', '        return _toHex(abi.encodePacked(account));\n', '    }\n', '\n', '    function _toHex(bytes memory data) private pure returns(string memory) {\n', '        bytes memory str = new bytes(2 + data.length * 2);\n', '        str[0] = "0";\n', '        str[1] = "x";\n', '        uint j = 2;\n', '        for (uint i = 0; i < data.length; i++) {\n', '            uint a = uint8(data[i]) >> 4;\n', '            uint b = uint8(data[i]) & 0x0f;\n', '            str[j++] = byte(uint8(a + 48 + (a/10)*39));\n', '            str[j++] = byte(uint8(b + 48 + (b/10)*39));\n', '        }\n', '\n', '        return string(str);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IMooniswap.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IMooniswapRegistry {\n', '    function pools(IERC20 token1, IERC20 token2) external view returns(IMooniswap);\n', '    function isPool(address addr) external view returns(bool);\n', '}\n', '\n', '\n', 'interface IMooniswap {\n', '    function fee() external view returns (uint256);\n', '    function tokens(uint256 i) external view returns (IERC20);\n', '    function getBalanceForAddition(IERC20 token) external view returns(uint256);\n', '    function getBalanceForRemoval(IERC20 token) external view returns(uint256);\n', '    function getReturn(IERC20 fromToken, IERC20 destToken, uint256 amount) external view returns(uint256 returnAmount);\n', '\n', '    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable returns(uint256 fairSupply);\n', '    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\n', '    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 returnAmount);\n', '}\n', '\n', '// File: contracts/ISource.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface ISource {\n', '    function calculate(IERC20 fromToken, uint256[] calldata amounts, IOneRouterView.Swap calldata swap)\n', '        external view returns(uint256[] memory rets, address dex, uint256 gas);\n', '\n', '    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 flags) external;\n', '}\n', '\n', '// File: contracts/sources/MooniswapSource.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library MooniswapHelper {\n', '    using SafeMath for uint256;\n', '    using UniERC20 for IERC20;\n', '\n', '    IMooniswapRegistry constant public REGISTRY = IMooniswapRegistry(0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303);\n', '\n', '    function getReturn(\n', '        IMooniswap mooniswap,\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount\n', '    ) internal view returns(uint256 ret) {\n', '        uint256[] memory amounts = new uint256[](1);\n', '        amounts[0] = amount;\n', '        uint256[] memory rets = getReturns(mooniswap, fromToken, destToken, amounts);\n', '        if (rets.length > 0) {\n', '            return rets[0];\n', '        }\n', '    }\n', '\n', '    function getReturns(\n', '        IMooniswap mooniswap,\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256[] memory amounts\n', '    ) internal view returns(uint256[] memory rets) {\n', '        rets = new uint256[](amounts.length);\n', '\n', '        uint256 fee = mooniswap.fee();\n', '        uint256 fromBalance = mooniswap.getBalanceForAddition(fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken);\n', '        uint256 destBalance = mooniswap.getBalanceForRemoval(destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken);\n', '        if (fromBalance > 0 && destBalance > 0) {\n', '            for (uint i = 0; i < amounts.length; i++) {\n', '                uint256 amount = amounts[i].sub(amounts[i].mul(fee).div(1e18));\n', '                rets[i] = amount.mul(destBalance).div(\n', '                    fromBalance.add(amount)\n', '                );\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract MooniswapSourceView {\n', '    using SafeMath for uint256;\n', '    using UniERC20 for IERC20;\n', '    using MooniswapHelper for IMooniswap;\n', '\n', '    function _calculateMooniswap(IERC20 fromToken, uint256[] memory amounts, IOneRouterView.Swap memory swap) internal view returns(uint256[] memory rets, address dex, uint256 gas) {\n', '        IMooniswap mooniswap = MooniswapHelper.REGISTRY.pools(\n', '            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\n', '            swap.destToken.isETH() ? UniERC20.ZERO_ADDRESS : swap.destToken\n', '        );\n', '        if (mooniswap == IMooniswap(0)) {\n', '            return (new uint256[](0), address(0), 0);\n', '        }\n', '\n', '        for (uint t = 0; t < swap.disabledDexes.length; t++) {\n', '            if (swap.disabledDexes[t] == address(mooniswap)) {\n', '                return (new uint256[](0), address(0), 0);\n', '            }\n', '        }\n', '\n', '        rets = mooniswap.getReturns(fromToken, swap.destToken, amounts);\n', '        if (rets.length == 0 || rets[0] == 0) {\n', '            return (new uint256[](0), address(0), 0);\n', '        }\n', '\n', '        return (rets, address(mooniswap), (fromToken.isETH() || swap.destToken.isETH()) ? 80_000 : 110_000);\n', '    }\n', '}\n', '\n', '\n', 'contract MooniswapSourceSwap {\n', '    using UniERC20 for IERC20;\n', '\n', '    function _swapOnMooniswap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 /*flags*/) internal {\n', '        IMooniswap mooniswap = MooniswapHelper.REGISTRY.pools(\n', '            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\n', '            destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken\n', '        );\n', '\n', '        fromToken.uniApprove(address(mooniswap), amount);\n', '        mooniswap.swap{ value: fromToken.isETH() ? amount : 0 }(\n', '            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\n', '            destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken,\n', '            amount,\n', '            0,\n', '            0x68a17B587CAF4f9329f0e372e3A78D23A46De6b5\n', '        );\n', '    }\n', '}\n', '\n', '\n', 'contract MooniswapSourcePublic is ISource, MooniswapSourceView, MooniswapSourceSwap {\n', '    receive() external payable {\n', '        // solhint-disable-next-line avoid-tx-origin\n', '        require(msg.sender != tx.origin, "ETH deposit rejected");\n', '    }\n', '\n', '    function calculate(IERC20 fromToken, uint256[] memory amounts, IOneRouterView.Swap memory swap) public view override returns(uint256[] memory rets, address dex, uint256 gas) {\n', '        return _calculateMooniswap(fromToken, amounts, swap);\n', '    }\n', '\n', '    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 flags) public override {\n', '        return _swapOnMooniswap(fromToken, destToken, amount, flags);\n', '    }\n', '}\n', '\n', '// File: contracts/OneRouterConstants.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract OneRouterConstants {\n', '    uint256 constant internal _FLAG_DISABLE_ALL_SOURCES          = 0x100000000000000000000000000000000;\n', '    uint256 constant internal _FLAG_DISABLE_RECALCULATION        = 0x200000000000000000000000000000000;\n', '    uint256 constant internal _FLAG_ENABLE_CHI_BURN              = 0x400000000000000000000000000000000;\n', '    uint256 constant internal _FLAG_ENABLE_CHI_BURN_ORIGIN       = 0x800000000000000000000000000000000;\n', '    uint256 constant internal _FLAG_ENABLE_REFERRAL_GAS_DISCOUNT = 0x1000000000000000000000000000000000;\n', '\n', '\n', '    uint256 constant internal _FLAG_DISABLE_KYBER_ALL =\n', '        _FLAG_DISABLE_KYBER_1 +\n', '        _FLAG_DISABLE_KYBER_2 +\n', '        _FLAG_DISABLE_KYBER_3 +\n', '        _FLAG_DISABLE_KYBER_4;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_ALL =\n', '        _FLAG_DISABLE_CURVE_COMPOUND +\n', '        _FLAG_DISABLE_CURVE_USDT +\n', '        _FLAG_DISABLE_CURVE_Y +\n', '        _FLAG_DISABLE_CURVE_BINANCE +\n', '        _FLAG_DISABLE_CURVE_SYNTHETIX +\n', '        _FLAG_DISABLE_CURVE_PAX +\n', '        _FLAG_DISABLE_CURVE_RENBTC +\n', '        _FLAG_DISABLE_CURVE_TBTC +\n', '        _FLAG_DISABLE_CURVE_SBTC;\n', '    uint256 constant internal _FLAG_DISABLE_BALANCER_ALL =\n', '        _FLAG_DISABLE_BALANCER_1 +\n', '        _FLAG_DISABLE_BALANCER_2 +\n', '        _FLAG_DISABLE_BALANCER_3;\n', '    uint256 constant internal _FLAG_DISABLE_BANCOR_ALL =\n', '        _FLAG_DISABLE_BANCOR_1 +\n', '        _FLAG_DISABLE_BANCOR_2 +\n', '        _FLAG_DISABLE_BANCOR_3;\n', '\n', '    uint256 constant internal _FLAG_DISABLE_UNISWAP_V1      = 0x1;\n', '    uint256 constant internal _FLAG_DISABLE_UNISWAP_V2      = 0x2;\n', '    uint256 constant internal _FLAG_DISABLE_MOONISWAP       = 0x4;\n', '    uint256 constant internal _FLAG_DISABLE_KYBER_1         = 0x8;\n', '    uint256 constant internal _FLAG_DISABLE_KYBER_2         = 0x10;\n', '    uint256 constant internal _FLAG_DISABLE_KYBER_3         = 0x20;\n', '    uint256 constant internal _FLAG_DISABLE_KYBER_4         = 0x40;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_COMPOUND  = 0x80;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_USDT      = 0x100;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_Y         = 0x200;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_BINANCE   = 0x400;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_SYNTHETIX = 0x800;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_PAX       = 0x1000;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_RENBTC    = 0x2000;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_TBTC      = 0x4000;\n', '    uint256 constant internal _FLAG_DISABLE_CURVE_SBTC      = 0x8000;\n', '    uint256 constant internal _FLAG_DISABLE_BALANCER_1      = 0x10000;\n', '    uint256 constant internal _FLAG_DISABLE_BALANCER_2      = 0x20000;\n', '    uint256 constant internal _FLAG_DISABLE_BALANCER_3      = 0x40000;\n', '    uint256 constant internal _FLAG_DISABLE_BANCOR_1        = 0x80000;\n', '    uint256 constant internal _FLAG_DISABLE_BANCOR_2        = 0x100000;\n', '    uint256 constant internal _FLAG_DISABLE_BANCOR_3        = 0x200000;\n', '    uint256 constant internal _FLAG_DISABLE_OASIS           = 0x400000;\n', '    uint256 constant internal _FLAG_DISABLE_DFORCE_SWAP     = 0x800000;\n', '    uint256 constant internal _FLAG_DISABLE_SHELL           = 0x1000000;\n', '    uint256 constant internal _FLAG_DISABLE_MSTABLE_MUSD    = 0x2000000;\n', '    uint256 constant internal _FLAG_DISABLE_BLACK_HOLE_SWAP = 0x4000000;\n', '\n', '    IERC20 constant internal _DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    IERC20 constant internal _USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    IERC20 constant internal _USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    IERC20 constant internal _TUSD = IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\n', '    IERC20 constant internal _BUSD = IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\n', '    IERC20 constant internal _SUSD = IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\n', '    IERC20 constant internal _PAX = IERC20(0x8E870D67F660D95d5be530380D0eC0bd388289E1);\n', '    IERC20 constant internal _RENBTC = IERC20(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n', '    IERC20 constant internal _WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n', '    IERC20 constant internal _SBTC = IERC20(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6);\n', '    IERC20 constant internal _CHI = IERC20(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '}\n', '\n', '// File: contracts/OneRouterAudit.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IReferralGasSponsor {\n', '    function makeGasDiscount(\n', '        uint256 gasSpent,\n', '        uint256 returnAmount,\n', '        bytes calldata msgSenderCalldata\n', '    ) external;\n', '}\n', '\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\n', '}\n', '\n', '\n', 'contract OneRouterAudit is IOneRouter, OneRouterConstants, Ownable {\n', '    using UniERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    IOneRouter public oneRouterImpl;\n', '\n', '    modifier validateInput(SwapInput memory input) {\n', '        require(input.referral.fee <= 0.03e18, "OneRouter: fee out of range");\n', '        require(input.fromToken == input.destToken, "OneRouter: invalid input");\n', '        _;\n', '    }\n', '\n', '    constructor(IOneRouter oneRouter) public {\n', '        oneRouterImpl = oneRouter;\n', '    }\n', '\n', '    function setOneRouterImpl(IOneRouter oneRouter) public onlyOwner {\n', '        oneRouterImpl = oneRouter;\n', '    }\n', '\n', '    receive() external payable {\n', '        // solhint-disable-next-line avoid-tx-origin\n', '        require(msg.sender != tx.origin, "OneRouter: ETH deposit rejected");\n', '    }\n', '\n', '    // View methods\n', '\n', '    function getReturn(IERC20 fromToken, uint256[] memory amounts, Swap memory swap)\n', '        public\n', '        view\n', '        override\n', '        returns(\n', '            Path[] memory paths,\n', '            PathResult[] memory pathResults,\n', '            SwapResult memory splitResult\n', '        )\n', '    {\n', '        return oneRouterImpl.getReturn(fromToken, amounts, swap);\n', '    }\n', '\n', '    function getSwapReturn(IERC20 fromToken, uint256[] memory amounts, Swap memory swap)\n', '        public\n', '        view\n', '        override\n', '        returns(SwapResult memory result)\n', '    {\n', '        return oneRouterImpl.getSwapReturn(fromToken, amounts, swap);\n', '    }\n', '\n', '    function getPathReturn(IERC20 fromToken, uint256[] memory amounts, Path memory path)\n', '        public\n', '        view\n', '        override\n', '        returns(PathResult memory result)\n', '    {\n', '        return oneRouterImpl.getPathReturn(fromToken, amounts, path);\n', '    }\n', '\n', '    function getMultiPathReturn(IERC20 fromToken, uint256[] memory amounts, Path[] memory paths)\n', '        public\n', '        view\n', '        override\n', '        returns(\n', '            PathResult[] memory pathResults,\n', '            SwapResult memory splitResult\n', '        )\n', '    {\n', '        return oneRouterImpl.getMultiPathReturn(fromToken, amounts, paths);\n', '    }\n', '\n', '    // Swap methods\n', '\n', '    function makeSwap(\n', '        SwapInput memory input,\n', '        Swap memory swap,\n', '        SwapDistribution memory swapDistribution\n', '    )\n', '        public\n', '        payable\n', '        override\n', '        validateInput(input)\n', '        returns(uint256 returnAmount)\n', '    {\n', '        uint256 gasStart = gasleft();\n', '        _claimInput(input);\n', '        input.fromToken.uniApprove(address(oneRouterImpl), input.amount);\n', '        oneRouterImpl.makeSwap{ value: input.fromToken.isETH() ? input.amount : 0 }(input, swap, swapDistribution);\n', '        return _checkMinReturn(gasStart, input, swap.flags);\n', '    }\n', '\n', '    function makePathSwap(\n', '        SwapInput memory input,\n', '        Path memory path,\n', '        PathDistribution memory pathDistribution\n', '    )\n', '        public\n', '        payable\n', '        override\n', '        validateInput(input)\n', '        returns(uint256 returnAmount)\n', '    {\n', '        uint256 gasStart = gasleft();\n', '        _claimInput(input);\n', '        input.fromToken.uniApprove(address(oneRouterImpl), input.amount);\n', '        oneRouterImpl.makePathSwap{ value: input.fromToken.isETH() ? input.amount : 0 }(input, path, pathDistribution);\n', '        return _checkMinReturn(gasStart, input, path.swaps[0].flags);\n', '    }\n', '\n', '    function makeMultiPathSwap(\n', '        SwapInput memory input,\n', '        Path[] memory paths,\n', '        PathDistribution[] memory pathDistributions,\n', '        SwapDistribution memory interPathsDistribution\n', '    )\n', '        public\n', '        payable\n', '        override\n', '        validateInput(input)\n', '        returns(uint256 returnAmount)\n', '    {\n', '        uint256 gasStart = gasleft();\n', '        _claimInput(input);\n', '        input.fromToken.uniApprove(address(oneRouterImpl), input.amount);\n', '        oneRouterImpl.makeMultiPathSwap{ value: input.fromToken.isETH() ? input.amount : 0 }(input, paths, pathDistributions, interPathsDistribution);\n', '        return _checkMinReturn(gasStart, input, paths[0].swaps[0].flags);\n', '    }\n', '\n', '    // Internal methods\n', '\n', '    function _claimInput(SwapInput memory input) internal {\n', '        input.fromToken.uniTransferFromSender(address(this), input.amount);\n', '        input.amount = input.fromToken.uniBalanceOf(address(this));\n', '    }\n', '\n', '    function _checkMinReturn(uint256 gasStart, SwapInput memory input, uint256 flags) internal returns(uint256 returnAmount) {\n', '        uint256 remaining = input.fromToken.uniBalanceOf(address(this));\n', '        returnAmount = input.destToken.uniBalanceOf(address(this));\n', '        require(returnAmount >= input.minReturn, "OneRouter: less than minReturn");\n', '        input.fromToken.uniTransfer(msg.sender, remaining);\n', '        input.destToken.uniTransfer(input.referral.ref, returnAmount.mul(input.referral.fee).div(1e18));\n', '        input.destToken.uniTransfer(msg.sender, returnAmount.sub(returnAmount.mul(input.referral.fee).div(1e18)));\n', '\n', '        if ((flags & (_FLAG_ENABLE_CHI_BURN | _FLAG_ENABLE_CHI_BURN_ORIGIN)) > 0) {\n', '            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            _chiBurnOrSell(\n', '                ((flags & _FLAG_ENABLE_CHI_BURN_ORIGIN) > 0) ? tx.origin : msg.sender, // solhint-disable-line avoid-tx-origin\n', '                (gasSpent + 14154) / 41947\n', '            );\n', '        }\n', '        else if ((flags & _FLAG_ENABLE_REFERRAL_GAS_DISCOUNT) > 0) {\n', '            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            IReferralGasSponsor(input.referral.ref).makeGasDiscount(gasSpent, returnAmount, msg.data);\n', '        }\n', '    }\n', '\n', '    function _chiBurnOrSell(address payable sponsor, uint256 amount) internal {\n', '        IMooniswap exchange = IMooniswap(0x5B1fC2435B1f7C16c206e7968C0e8524eC29b786);\n', '        uint256 sellRefund = MooniswapHelper.getReturn(exchange, _CHI, UniERC20.ZERO_ADDRESS, amount);\n', '        uint256 burnRefund = amount.mul(18_000).mul(tx.gasprice);\n', '\n', '        if (sellRefund < burnRefund.add(tx.gasprice.mul(36_000))) {\n', '            IFreeFromUpTo(address(_CHI)).freeFromUpTo(sponsor, amount);\n', '        }\n', '        else {\n', '            _CHI.transferFrom(sponsor, address(exchange), amount);\n', '            exchange.swap(_CHI, UniERC20.ZERO_ADDRESS, amount, 0, 0x68a17B587CAF4f9329f0e372e3A78D23A46De6b5);\n', '            sponsor.transfer(address(this).balance);\n', '        }\n', '    }\n', '}']