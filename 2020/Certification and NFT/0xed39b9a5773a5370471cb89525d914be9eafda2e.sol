['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.5.0 <=0.7.0;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(\n', '            msg.sender == nominatedOwner,\n', '            "You must be nominated before you can accept ownership"\n', '        );\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(\n', '            msg.sender == owner,\n', '            "Only the contract owner may perform this action"\n', '        );\n', '        _;\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', 'contract WhiteList is Owned {\n', '    /// @notice Users with permissions\n', '    mapping(address => uint256) public whiter;\n', '\n', '    /// @notice Append address into whiteList successevent\n', '    event AppendWhiter(address adder);\n', '\n', '    /// @notice Remove address into whiteList successevent\n', '    event RemoveWhiter(address remover);\n', '\n', '    /**\n', '     * @notice Construct a new WhiteList, default owner in whiteList\n', '     */\n', '    constructor() internal {\n', '        appendWhiter(owner);\n', '    }\n', '\n', '    modifier onlyWhiter() {\n', '        require(isWhiter(), "WhiteList: msg.sender not in whilteList.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Only onwer can append address into whitelist\n', '     * @param account The address not added, can added to the whitelist\n', '     */\n', '    function appendWhiter(address account) public onlyOwner {\n', '        require(account != address(0), "WhiteList: address not zero");\n', '        require(\n', '            !isWhiter(account),\n', '            "WhiteListe: the account exsit whilteList yet"\n', '        );\n', '        whiter[account] = 1;\n', '        emit AppendWhiter(account);\n', '    }\n', '\n', '    /**\n', '     * @notice Only onwer can remove address into whitelist\n', '     * @param account The address in whitelist yet\n', '     */\n', '    function removeWhiter(address account) public onlyOwner {\n', '        require(\n', '            isWhiter(account),\n', '            "WhiteListe: the account not exist whilteList"\n', '        );\n', '        delete whiter[account];\n', '        emit RemoveWhiter(account);\n', '    }\n', '\n', '    /**\n', '     * @notice Check whether acccount in whitelist\n', '     * @param account Any address\n', '     */\n', '    function isWhiter(address account) public view returns (bool) {\n', '        return whiter[account] == 1;\n', '    }\n', '\n', '    /**\n', '     * @notice Check whether msg.sender in whitelist overrides.\n', '     */\n', '    function isWhiter() public view returns (bool) {\n', '        return isWhiter(msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'interface ITokenStake {\n', '    function updateIndex() external;\n', '}\n', '\n', 'contract Esm is Owned, WhiteList {\n', '    /// @notice Access stake pause\n', '    uint256 public stakeLive = 1;\n', '    /// @notice Access redeem pause\n', '    uint256 public redeemLive = 1;\n', '    /// @notice System closed time\n', '    uint256 public time;\n', '    /// @notice TokenStake for updating on closed\n', '    ITokenStake public tokenStake;\n', '\n', '    /// @notice System closed yet event\n', '    event ShutDown(uint256 blocknumber, uint256 time);\n', '\n', '    /**\n', '     * @notice Construct a new Esm\n', '     */\n', '    constructor() public Owned(msg.sender) {}\n', '\n', '    /**\n', '     * @notice Set with tokenStake\n', '     * @param _tokenStake Address of tokenStake\n', '     */\n', '    function setupTokenStake(address _tokenStake) public onlyWhiter {\n', '        tokenStake = ITokenStake(_tokenStake);\n', '    }\n', '\n', '    /**\n', '     * @notice Open stake, if stake pasued\n', '     */\n', '    function openStake() external onlyWhiter {\n', '        stakeLive = 1;\n', '    }\n', '\n', '    /**\n', '     * @notice Paused stake, if stake opened\n', '     */\n', '    function pauseStake() external onlyWhiter {\n', '        stakeLive = 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Open redeem, if redeem paused\n', '     */\n', '    function openRedeem() external onlyWhiter {\n', '        redeemLive = 1;\n', '    }\n', '\n', '    /**\n', '     * @notice Pause redeem, if redeem opened\n', '     */\n', '    function pauseRedeem() external onlyWhiter {\n', '        redeemLive = 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Status of staking\n', '     */\n', '    function isStakePaused() external view returns (bool) {\n', '        return stakeLive == 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Status of redeem\n', '     */\n', '    function isRedeemPaused() external view returns (bool) {\n', '        return redeemLive == 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Status of closing-sys\n', '     */\n', '    function isClosed() external view returns (bool) {\n', '        return time > 0;\n', '    }\n', '\n', '    /**\n', '     * @notice If anything error, project manager can shutdown it\n', '     *         anybody cant stake, but can redeem\n', '     */\n', '    function shutdown() external onlyWhiter {\n', '        require(time == 0, "System closed yet.");\n', '        tokenStake.updateIndex();\n', '        time = block.timestamp;\n', '        emit ShutDown(block.number, time);\n', '    }\n', '}']