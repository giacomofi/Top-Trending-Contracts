['/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/IPoolRestrictions.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IPoolRestrictions {\n', '    function getMaxTotalSupply(address _pool) external virtual view returns(uint256);\n', '    function isVotingSignatureAllowed(address _votingAddress, bytes4 _signature) external virtual view returns(bool);\n', '    function isWithoutFee(address _addr) external virtual view returns(bool);\n', '}\n', '\n', '// File: contracts/PoolRestrictions.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract PoolRestrictions is IPoolRestrictions, Ownable {\n', '\n', '  event SetTotalRestrictions(address indexed token, uint256 maxTotalSupply);\n', '  event SetSignatureAllowed(bytes4 indexed signature, bool allowed);\n', '  event SetSignatureAllowedForAddress(address indexed voting, bytes4 indexed signature, bool allowed, bool overrideAllowed);\n', '  event SetWithoutFee(address indexed addr, bool withoutFee);\n', '\n', '  struct TotalRestrictions {\n', '    uint256 maxTotalSupply;\n', '  }\n', '  // token => restrictions\n', '  mapping(address => TotalRestrictions) public totalRestrictions;\n', '\n', '  // signature => allowed\n', '  mapping(bytes4 => bool) public signaturesAllowed;\n', '\n', '  struct VotingSignature {\n', '    bool allowed;\n', '    bool overrideAllowed;\n', '  }\n', '  // votingAddress => signature => data\n', '  mapping(address => mapping(bytes4 => VotingSignature)) public votingSignatures;\n', '\n', '  mapping(address => bool) public withoutFeeAddresses;\n', '\n', '  constructor() public Ownable() {}\n', '\n', '  function setTotalRestrictions(address[] calldata _poolsList, uint256[] calldata _maxTotalSupplyList) external onlyOwner {\n', '    _setTotalRestrictions(_poolsList, _maxTotalSupplyList);\n', '  }\n', '\n', '  function setVotingSignatures(bytes4[] calldata _signatures, bool[] calldata _allowed) external onlyOwner {\n', '    _setVotingSignatures(_signatures, _allowed);\n', '  }\n', '\n', '  function setVotingSignaturesForAddress(address _votingAddress, bool _override, bytes4[] calldata _signatures, bool[] calldata _allowed) external onlyOwner {\n', '    _setVotingSignaturesForAddress(_votingAddress, _override, _signatures, _allowed);\n', '  }\n', '\n', '  function setWithoutFee(address[] calldata _addresses, bool _withoutFee) external onlyOwner {\n', '    uint len = _addresses.length;\n', '    for (uint i = 0; i < len; i++) {\n', '      withoutFeeAddresses[_addresses[i]] = _withoutFee;\n', '      emit SetWithoutFee(_addresses[i], _withoutFee);\n', '    }\n', '  }\n', '\n', '  function getMaxTotalSupply(address _poolAddress) external override view returns(uint256) {\n', '    return totalRestrictions[_poolAddress].maxTotalSupply;\n', '  }\n', '\n', '  function isVotingSignatureAllowed(address _votingAddress, bytes4 _signature) external override view returns(bool) {\n', '    if(votingSignatures[_votingAddress][_signature].overrideAllowed) {\n', '      return votingSignatures[_votingAddress][_signature].allowed;\n', '    } else {\n', '      return signaturesAllowed[_signature];\n', '    }\n', '  }\n', '\n', '  function isWithoutFee(address _address) external override view returns(bool) {\n', '    return withoutFeeAddresses[_address];\n', '  }\n', '\n', '  /*** Internal Functions ***/\n', '\n', '  function _setTotalRestrictions(address[] memory _poolsList, uint256[] memory _maxTotalSupplyList) internal {\n', '    uint256 len = _poolsList.length;\n', '    require(len == _maxTotalSupplyList.length , "Arrays lengths are not equals");\n', '\n', '    for(uint256 i = 0; i < len; i++) {\n', '      totalRestrictions[_poolsList[i]] = TotalRestrictions(_maxTotalSupplyList[i]);\n', '      emit SetTotalRestrictions(_poolsList[i], _maxTotalSupplyList[i]);\n', '    }\n', '  }\n', '\n', '  function _setVotingSignatures(bytes4[] memory _signatures, bool[] memory _allowed) internal {\n', '    uint256 len = _signatures.length;\n', '    require(len == _allowed.length , "Arrays lengths are not equals");\n', '\n', '    for(uint256 i = 0; i < len; i++) {\n', '      signaturesAllowed[_signatures[i]] = _allowed[i];\n', '      emit SetSignatureAllowed(_signatures[i], _allowed[i]);\n', '    }\n', '  }\n', '\n', '  function _setVotingSignaturesForAddress(address _votingAddress, bool _override, bytes4[] memory _signatures, bool[] memory _allowed) internal {\n', '    uint256 len = _signatures.length;\n', '    require(len == _allowed.length , "Arrays lengths are not equals");\n', '\n', '    for(uint256 i = 0; i < len; i++) {\n', '      votingSignatures[_votingAddress][_signatures[i]] = VotingSignature(_allowed[i], _override);\n', '      emit SetSignatureAllowedForAddress(_votingAddress, _signatures[i], _allowed[i], _override);\n', '    }\n', '  }\n', '}']