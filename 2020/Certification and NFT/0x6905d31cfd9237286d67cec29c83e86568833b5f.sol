['pragma solidity 0.6.8;\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two unsigned integers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint value) external  returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '  function approve(address spender, uint value) external returns (bool success);\n', '}\n', '\n', 'contract YFMSTokenSwap {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 public YFMSToken;\n', '  ERC20 public LUCRToken;\n', '\n', '  address public owner;\n', '\n', '  constructor(address yfms, address lucr) public {\n', '    owner = msg.sender;\n', '    YFMSToken = ERC20(yfms);\n', '    LUCRToken = ERC20(lucr);\n', '  }\n', '\n', '  function swap () public {\n', '    uint256 balance = YFMSToken.balanceOf(msg.sender);\n', '    require(balance > 0, "balance must be greater than 0");\n', '    require(YFMSToken.transferFrom(msg.sender, address(this), balance), "YFMS transfer failed");\n', '    require(LUCRToken.transferFrom(owner, msg.sender, balance), "LUCR transfer failed");\n', '  }\n', '\n', '  function withdrawYFMS () public {\n', '    require(msg.sender == owner);\n', '    YFMSToken.transfer(owner, YFMSToken.balanceOf(address(this)));\n', '  }\n', '}']