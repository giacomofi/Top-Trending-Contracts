['// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', '// pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuardUpgradeSafe is Initializable {\n', '    bool private _notEntered;\n', '\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '\n', '\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol";\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: contracts/BannedContractList.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol";\n', '\n', '/*\n', '    Approve and Ban Contracts to interact with pools.\n', '    (All contracts are approved by default, unless banned)\n', '*/\n', 'contract BannedContractList is Initializable, OwnableUpgradeSafe {\n', '    mapping(address => bool) banned;\n', '\n', '    function initialize() public initializer {\n', '        __Ownable_init();\n', '    }\n', '\n', '    function isApproved(address toCheck) external view returns (bool) {\n', '        return !banned[toCheck];\n', '    }\n', '\n', '    function isBanned(address toCheck) external view returns (bool) {\n', '        return banned[toCheck];\n', '    }\n', '\n', '    function approveContract(address toApprove) external onlyOwner {\n', '        banned[toApprove] = false;\n', '    }\n', '\n', '    function banContract(address toBan) external onlyOwner {\n', '        banned[toBan] = true;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/Defensible.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "contracts/BannedContractList.sol";\n', '\n', '/*\n', '    Prevent smart contracts from calling functions unless approved by the specified whitelist.\n', '*/\n', 'contract Defensible {\n', ' // Only smart contracts will be affected by this modifier\n', '  modifier defend(BannedContractList bannedContractList) {\n', '    require(\n', '      (msg.sender == tx.origin) || bannedContractList.isApproved(msg.sender),\n', '      "This smart contract has not been approved"\n', '    );\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IMiniMe.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'interface IMiniMe {\n', '    /* ========== STANDARD ERC20 ========== */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* ========== MINIME EXTENSIONS ========== */\n', '\n', '    function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\n', '    function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ISporeToken.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'interface ISporeToken {\n', '    /* ========== STANDARD ERC20 ========== */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* ========== EXTENSIONS ========== */\n', '\n', '    function burn(uint256 amount) external;\n', '\n', '    function mint(address to, uint256 amount) external;\n', '\n', '    function addInitialLiquidityTransferRights(address account) external;\n', '\n', '    function enableTransfers() external;\n', '\n', '    function addMinter(address account) external;\n', '\n', '    function removeMinter(address account) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IRateVoteable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'interface IRateVoteable {\n', '    function changeRate(uint256 percentage) external;\n', '}\n', '\n', '\n', '// Root file: contracts/RateVote.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol";\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol";\n', '\n', '// import "contracts/Defensible.sol";\n', '// import "contracts/interfaces/IMiniMe.sol";\n', '// import "contracts/interfaces/ISporeToken.sol";\n', '// import "contracts/interfaces/IRateVoteable.sol";\n', '// import "contracts/BannedContractList.sol";\n', '\n', '/*\n', '    Can be paused by the owner\n', '    The mushroomFactory must be set by the owner before mushrooms can be harvested (optionally), and can be modified to use new mushroom spawning logic\n', '*/\n', 'contract RateVote is ReentrancyGuardUpgradeSafe, Defensible {\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '    uint256 public constant MAX_PERCENTAGE = 100;\n', '    uint256 public votingEnabledTime;\n', '\n', '    mapping(address => uint256) lastVoted;\n', '\n', '    struct VoteEpoch {\n', '        uint256 startTime;\n', '        uint256 activeEpoch;\n', '        uint256 increaseVoteWeight;\n', '        uint256 decreaseVoteWeight;\n', '    }\n', '\n', '    VoteEpoch public voteEpoch;\n', '    uint256 public voteDuration;\n', '\n', '    IMiniMe public enokiToken;\n', '    IRateVoteable public pool;\n', '    BannedContractList public bannedContractList;\n', '\n', '    // In percentage: mul(X).div(100)\n', '    uint256 public decreaseRateMultiplier;\n', '    uint256 public increaseRateMultiplier;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    function initialize(\n', '        address _pool,\n', '        address _enokiToken,\n', '        uint256 _voteDuration,\n', '        uint256 _votingEnabledTime,\n', '        address _bannedContractList\n', '    ) public virtual initializer {\n', '        __ReentrancyGuard_init();\n', '\n', '        pool = IRateVoteable(_pool);\n', '\n', '        decreaseRateMultiplier = 50;\n', '        increaseRateMultiplier = 150;\n', '\n', '        votingEnabledTime = _votingEnabledTime;\n', '\n', '        voteDuration = _voteDuration;\n', '\n', '        enokiToken = IMiniMe(_enokiToken);\n', '\n', '        voteEpoch = VoteEpoch({\n', '            startTime: votingEnabledTime, \n', '            activeEpoch: 0, \n', '            increaseVoteWeight: 0, \n', '            decreaseVoteWeight: 0\n', '        });\n', '\n', '        bannedContractList = BannedContractList(_bannedContractList);\n', '    }\n', '\n', '    /*\n', '        Votes with a given nonce invalidate other votes with the same nonce\n', '        This ensures only one rate vote can pass for a given time period\n', '    */\n', '\n', '    function getVoteEpoch() external view returns (VoteEpoch memory) {\n', '        return voteEpoch;\n', '    }\n', '\n', '    /* === Actions === */\n', '\n', '    /// @notice Any user can vote once in a given voting epoch, with their balance at the start of the epoch\n', '    function vote(uint256 voteId) external nonReentrant defend(bannedContractList) {\n', '        require(now > votingEnabledTime, "Too early");\n', '        require(now <= voteEpoch.startTime.add(voteDuration), "Vote has ended");\n', '        require(lastVoted[msg.sender] < voteEpoch.activeEpoch, "Already voted");\n', '\n', '        uint256 userWeight = enokiToken.balanceOfAt(msg.sender, voteEpoch.startTime);\n', '\n', '        if (voteId == 0) {\n', '            // Decrease rate\n', '            voteEpoch.decreaseVoteWeight = voteEpoch.decreaseVoteWeight.add(userWeight);\n', '        } else if (voteId == 1) {\n', '            // Increase rate\n', '            voteEpoch.increaseVoteWeight = voteEpoch.increaseVoteWeight.add(userWeight);\n', '        } else {\n', '            revert("Invalid voteId");\n', '        }\n', '\n', '        lastVoted[msg.sender] = voteEpoch.activeEpoch;\n', '\n', '        emit Vote(msg.sender, voteEpoch.activeEpoch, userWeight, voteId);\n', '    }\n', '\n', '    /// @notice Once a vote has exceeded the duration, it can be resolved, implementing the decision and starting the next vote    \n', '    function resolveVote() external nonReentrant defend(bannedContractList) {\n', '        require(now >= voteEpoch.startTime.add(voteDuration), "Vote still active");\n', '        uint256 decision = 0;\n', '\n', '        if (voteEpoch.decreaseVoteWeight > voteEpoch.increaseVoteWeight) {\n', '            // Decrease wins\n', '            pool.changeRate(decreaseRateMultiplier);\n', '        } else if (voteEpoch.increaseVoteWeight > voteEpoch.decreaseVoteWeight) {\n', '            // Increase wins\n', '            pool.changeRate(increaseRateMultiplier);\n', '            decision = 1;\n', '        } else {\n', '            //else Tie, no rate change\n', '            decision = 2;\n', '        }\n', '\n', '        emit VoteResolved(voteEpoch.activeEpoch, decision);\n', '\n', '        voteEpoch.activeEpoch = voteEpoch.activeEpoch.add(1);\n', '        voteEpoch.decreaseVoteWeight = 0;\n', '        voteEpoch.increaseVoteWeight = 0;\n', '        voteEpoch.startTime = now;\n', '\n', '        emit VoteStarted(voteEpoch.activeEpoch, voteEpoch.startTime, voteEpoch.startTime.add(voteDuration));\n', '    }\n', '\n', '    /* ===Events=== */\n', '\n', '    event Vote(address indexed user, uint256 indexed epoch, uint256 weight, uint256 indexed vote);\n', '    event VoteResolved(uint256 indexed epoch, uint256 indexed decision);\n', '    event VoteStarted(uint256 indexed epoch, uint256 startTime, uint256 endTime);\n', '}']