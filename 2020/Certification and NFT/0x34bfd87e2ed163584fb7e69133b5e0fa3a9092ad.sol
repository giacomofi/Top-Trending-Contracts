['// File: contracts/IMultisigCarrier.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract IMultisigCarrier {\n', '\n', '    function approveFrom(\n', '        address caller,\n', '        address payable destination,\n', '        address currencyAddress,\n', '        uint256 amount\n', '    ) public returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/MultisigVault.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract MultisigVault {\n', '\n', '    address private _carrier;\n', '\n', '    constructor() public {\n', '        _carrier = msg.sender;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _carrier;\n', '    }\n', '\n', '    function approve(\n', '        address payable destination,\n', '        address currencyAddress,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        IMultisigCarrier multisigCarrier = IMultisigCarrier(_carrier);\n', '        return multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount);\n', '    }\n', '\n', '    function external_call(address destination, uint value, bytes memory data) public returns (bool) {\n', '        require(msg.sender == _carrier, "Ownable: caller is not the owner");\n', '\n', '        bool result;\n', '        assembly {\n', '            let dataLength := mload(data)\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\n', '                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                d,\n', '                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n', '                0,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    function () external payable {}\n', '}']