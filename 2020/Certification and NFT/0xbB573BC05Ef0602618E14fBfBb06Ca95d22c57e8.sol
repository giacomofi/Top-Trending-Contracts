['pragma solidity ^0.4.24;\n', '\n', '// submitted by @dev-xu\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// @title SafeMath: overflow/underflow checks\n', '// @notice Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '\n', '  // @notice Multiplies two numbers, throws on overflow.\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  // @notice Integer division of two numbers, truncating the quotient.\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  // @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  // @notice Adds two numbers, throws on overflow.\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  // @notice Returns fractional amount\n', '  function getFractionalAmount(uint256 _amount, uint256 _percentage)\n', '  internal\n', '  pure\n', '  returns (uint256) {\n', '    return div(mul(_amount, _percentage), 100);\n', '  }\n', '\n', '}\n', '\n', '// Database interface\n', 'interface DBInterface {\n', '\n', '  function setContractManager(address _contractManager)\n', '  external;\n', '\n', '    // --------------------Set Functions------------------------\n', '\n', '    function setAddress(bytes32 _key, address _value)\n', '    external;\n', '\n', '    function setUint(bytes32 _key, uint _value)\n', '    external;\n', '\n', '    function setString(bytes32 _key, string _value)\n', '    external;\n', '\n', '    function setBytes(bytes32 _key, bytes _value)\n', '    external;\n', '\n', '    function setBytes32(bytes32 _key, bytes32 _value)\n', '    external;\n', '\n', '    function setBool(bytes32 _key, bool _value)\n', '    external;\n', '\n', '    function setInt(bytes32 _key, int _value)\n', '    external;\n', '\n', '\n', '     // -------------- Deletion Functions ------------------\n', '\n', '    function deleteAddress(bytes32 _key)\n', '    external;\n', '\n', '    function deleteUint(bytes32 _key)\n', '    external;\n', '\n', '    function deleteString(bytes32 _key)\n', '    external;\n', '\n', '    function deleteBytes(bytes32 _key)\n', '    external;\n', '\n', '    function deleteBytes32(bytes32 _key)\n', '    external;\n', '\n', '    function deleteBool(bytes32 _key)\n', '    external;\n', '\n', '    function deleteInt(bytes32 _key)\n', '    external;\n', '\n', '    // ----------------Variable Getters---------------------\n', '\n', '    function uintStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (uint);\n', '\n', '    function stringStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (string);\n', '\n', '    function addressStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (address);\n', '\n', '    function bytesStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (bytes);\n', '\n', '    function bytes32Storage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (bytes32);\n', '\n', '    function boolStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (bool);\n', '\n', '    function intStorage(bytes32 _key)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', 'contract Events {\n', '  DBInterface public database;\n', '\n', '  constructor(address _database) public{\n', '    database = DBInterface(_database);\n', '  }\n', '\n', '  function message(string _message)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogEvent(_message, keccak256(abi.encodePacked(_message)), tx.origin);\n', '  }\n', '\n', '  function transaction(string _message, address _from, address _to, uint _amount, address _token)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogTransaction(_message, keccak256(abi.encodePacked(_message)), _from, _to, _amount, _token, tx.origin);\n', '  }\n', '\n', '  function registration(string _message, address _account)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogAddress(_message, keccak256(abi.encodePacked(_message)), _account, tx.origin);\n', '  }\n', '\n', '  function contractChange(string _message, address _account, string _name)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogContractChange(_message, keccak256(abi.encodePacked(_message)), _account, _name, tx.origin);\n', '  }\n', '\n', '  function asset(string _message, string _uri, address _assetAddress, address _manager)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogAsset(_message, keccak256(abi.encodePacked(_message)), _uri, keccak256(abi.encodePacked(_uri)), _assetAddress, _manager, tx.origin);\n', '  }\n', '\n', '  function escrow(string _message, address _assetAddress, bytes32 _escrowID, address _manager, uint _amount)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogEscrow(_message, keccak256(abi.encodePacked(_message)), _assetAddress, _escrowID, _manager, _amount, tx.origin);\n', '  }\n', '\n', '  function order(string _message, bytes32 _orderID, uint _amount, uint _price)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogOrder(_message, keccak256(abi.encodePacked(_message)), _orderID, _amount, _price, tx.origin);\n', '  }\n', '\n', '  function exchange(string _message, bytes32 _orderID, address _assetAddress, address _account)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogExchange(_message, keccak256(abi.encodePacked(_message)), _orderID, _assetAddress, _account, tx.origin);\n', '  }\n', '\n', '  function operator(string _message, bytes32 _id, string _name, string _ipfs, address _account)\n', '  external\n', '  onlyApprovedContract {\n', '      emit LogOperator(_message, keccak256(abi.encodePacked(_message)), _id, _name, _ipfs, _account, tx.origin);\n', '  }\n', '\n', '  function consensus(string _message, bytes32 _executionID, bytes32 _votesID, uint _votes, uint _tokens, uint _quorum)\n', '  external\n', '  onlyApprovedContract {\n', '    emit LogConsensus(_message, keccak256(abi.encodePacked(_message)), _executionID, _votesID, _votes, _tokens, _quorum, tx.origin);\n', '  }\n', '\n', '  //Generalized events\n', '  event LogEvent(string message, bytes32 indexed messageID, address indexed origin);\n', '  event LogTransaction(string message, bytes32 indexed messageID, address indexed from, address indexed to, uint amount, address token, address origin); //amount and token will be empty on some events\n', '  event LogAddress(string message, bytes32 indexed messageID, address indexed account, address indexed origin);\n', '  event LogContractChange(string message, bytes32 indexed messageID, address indexed account, string name, address indexed origin);\n', '  event LogAsset(string message, bytes32 indexed messageID, string uri, bytes32 indexed assetID, address asset, address manager, address indexed origin);\n', '  event LogEscrow(string message, bytes32 indexed messageID, address asset, bytes32  escrowID, address indexed manager, uint amount, address indexed origin);\n', '  event LogOrder(string message, bytes32 indexed messageID, bytes32 indexed orderID, uint amount, uint price, address indexed origin);\n', '  event LogExchange(string message, bytes32 indexed messageID, bytes32 orderID, address indexed asset, address account, address indexed origin);\n', '  event LogOperator(string message, bytes32 indexed messageID, bytes32 id, string name, string ipfs, address indexed account, address indexed origin);\n', '  event LogConsensus(string message, bytes32 indexed messageID, bytes32 executionID, bytes32 votesID, uint votes, uint tokens, uint quorum, address indexed origin);\n', '\n', '\n', '  // --------------------------------------------------------------------------------------\n', '  // Caller must be registered as a contract through ContractManager.sol\n', '  // --------------------------------------------------------------------------------------\n', '  modifier onlyApprovedContract() {\n', '      require(database.boolStorage(keccak256(abi.encodePacked("contract", msg.sender))));\n', '      _;\n', '  }\n', '\n', '}\n', '\n', '// @notice allows contract to call a basic withdraw() function taking no parameters on another contract\n', 'interface PullPayment {\n', '\n', '\tfunction withdraw()\texternal returns(bool);\n', '\n', '}\n', '\n', '// @title Non-Transferable ERC20 token contract with shared revenue distribution functionality.\n', '// @notice This token contract can receive payments in the fallback function and token owners can withdraw their share\n', '// @author Kyle Dewhurst, MyBit Foundation\n', '// Credit goes to Nick Johnson for the dividend token https://medium.com/@weka/dividend-bearing-tokens-on-ethereum-42d01c710657\n', 'contract StandardDistribution {\n', '  using SafeMath for uint;\n', '\n', '\n', '  uint public supply;\n', '  mapping (address => uint) internal balances;\n', '\n', '  string public tokenURI;                 // A reference to a URI containing further token information\n', '\n', '\n', '  // @notice Token Income Information\n', '  uint constant scalingFactor = 1e32;\n', '  uint public assetIncome;\n', '  uint public valuePerToken;\n', '\n', '  mapping (address => uint) public claimableIncome;\n', '  mapping (address => uint) public previousValuePerToken;\n', '\n', '\n', '  // @notice Updates claimableIncome, sends all wei to the token holder\n', '  function withdraw()\n', '  public\n', '  updateclaimableIncome(msg.sender)\n', '  returns (uint _amount) {\n', '      _amount = claimableIncome[msg.sender].div(scalingFactor);\n', '      delete claimableIncome[msg.sender];\n', '      msg.sender.transfer(_amount);\n', '      emit LogIncomeCollected(now, msg.sender, _amount);\n', '  }\n', '/*\n', '  // @notice allows beneficiaries to withdraw from contracts at different locations to be re-distributed here\n', '  // @dev can call withdraw() on any address if there are no parameters required. Fallback function will be triggered\n', '  // @param (address) _contractAddress = The address to call withdraw() on.\n', '  function getFunds(address _contractAddress)\n', '  external\n', '  returns (bool) {\n', '    PullPayment(_contractAddress).withdraw();\n', '    return true;\n', '  }\n', '\n', '*/\n', '  function issueDividends()\n', '  payable\n', '  public {\n', '      valuePerToken = valuePerToken.add(msg.value.mul(scalingFactor).div(supply));\n', '      assetIncome = assetIncome.add(msg.value);\n', '      emit LogIncomeReceived(msg.sender, msg.value);\n', '  }\n', '\n', '    // Fallback function: Accepts Ether and updates ledger (issues dividends)\n', '  function ()\n', '    payable\n', '    public {\n', '      valuePerToken = valuePerToken.add(msg.value.mul(scalingFactor).div(supply));\n', '      assetIncome = assetIncome.add(msg.value);\n', '      emit LogIncomeReceived(msg.sender, msg.value);\n', '  }\n', '\n', '  // ------------------------------------------------------------------------------------------------\n', '  //                                   View Functions\n', '  // ------------------------------------------------------------------------------------------------\n', '\n', '  // @notice Calculates how much value _user holds\n', '  function getTokenValue(address _user)\n', '  public\n', '  view\n', '  returns (uint) {\n', '      uint valuePerTokenDifference = valuePerToken.sub(previousValuePerToken[_user]);\n', '      return valuePerTokenDifference.mul(balances[_user]);\n', '  }\n', '\n', '  // @notice Calculates how much wei user is owed. (new income + claimableIncome) / 10**32\n', '  function getUnclaimedAmount(address _user)\n', '  public\n', '  view\n', '  returns (uint) {\n', '      return (getTokenValue(_user).add(claimableIncome[_user]).div(scalingFactor));\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return supply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------------------------------\n', '  //                                   Modifiers\n', '  // ------------------------------------------------------------------------------------------------\n', '\n', '  // Updates the amount owed to user while holding tokenSupply\n', '  // @dev must be called before transfering tokens\n', '  modifier updateclaimableIncome(address _user) {\n', '      claimableIncome[_user] = claimableIncome[_user].add(getTokenValue(_user));\n', '      previousValuePerToken[_user] = valuePerToken;\n', '      _;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------------------------------\n', '  //                                     Events\n', '  // ------------------------------------------------------------------------------------------------\n', '\n', '  event LogIncomeReceived(address indexed _sender, uint _paymentAmount);\n', '  event LogIncomeCollected(uint _block, address _address, uint _amount);\n', '\n', '}\n', '\n', '// @title Non-Transferable ERC20 token contract with shared revenue distribution functionality.\n', '// @notice This token contract can receive payments in the fallback function and token owners can withdraw their share\n', '// @author Kyle Dewhurst, MyBit Foundation\n', '// Credit goes to Nick Johnson for the dividend token https://medium.com/@weka/dividend-bearing-tokens-on-ethereum-42d01c710657\n', 'contract FixedDistribution is StandardDistribution {\n', '  using SafeMath for uint;\n', '\n', '  // @notice constructor: initialized\n', '  constructor(string _tokenURI, address[] _tokenHolders, uint[] _amount)\n', '  public {\n', '    require(_tokenHolders.length < 200 && _tokenHolders.length == _amount.length);\n', '    uint _totalSupply;\n', '    tokenURI = _tokenURI;\n', '    for (uint8 i = 0; i < _tokenHolders.length; i++) {\n', '      _totalSupply = _totalSupply.add(_amount[i]);\n', '      balances[_tokenHolders[i]] = balances[_tokenHolders[i]].add(_amount[i]);\n', '    }\n', '    supply = _totalSupply;\n', '  }\n', '}\n', '\n', 'interface MinterInterface {\n', '  function cloneToken(string _uri, address _erc20Address) external returns (address asset);\n', '\n', '  function mintAssetTokens(address _assetAddress, address _receiver, uint256 _amount) external returns (bool);\n', '\n', '  function changeTokenController(address _assetAddress, address _newController) external returns (bool);\n', '}\n', '\n', '// import "../access/ERC20Burner.sol";\n', '// @title An asset generator contract for onboarding existing real-world assets\n', '// @notice This contract creates ERC20 dividend tokens and give sthem to the _tokenHolders provided\n', '// @author Kyle Dewhurst, MyBit Foundation\n', 'contract AssetGenerator {\n', '  using SafeMath for uint256;\n', '\n', '  DBInterface private database;\n', '  Events private events;\n', '  MinterInterface private minter;\n', '\n', '\n', '  // @notice This contract\n', '  // @param: The address for the database contract used by this platform\n', '  constructor(address _database, address _events)\n', '  public{\n', '      database = DBInterface(_database);\n', '      events = Events(_events);\n', '      minter = MinterInterface(database.addressStorage(keccak256(abi.encodePacked("contract", "Minter"))));\n', '  }\n', '\n', '\n', '  // @notice users can on-board non-tradeable assets here\n', '  // @dev creates an ERC20 dividend token (tradeable) or distribution token (not-tradeable)\n', '  function createAsset(string _tokenURI, address[] _tokenHolders, uint[] _amount)\n', '  external\n', '  // burnRequired\n', '  returns (bool) {\n', '    require (_tokenHolders.length == _amount.length && _tokenHolders.length <= 100);\n', '    FixedDistribution assetInstance = new FixedDistribution(_tokenURI, _tokenHolders, _amount);\n', '    database.setAddress(keccak256(abi.encodePacked("asset.manager", address(assetInstance))), msg.sender);\n', "    events.asset('Asset created', _tokenURI, address(assetInstance), msg.sender);\n", '    return true;\n', '  }\n', '\n', '  // @notice users can on-board tradeable assets here\n', '  // @dev creates an ERC20 dividend token (tradeable) or\n', '  function createTradeableAsset(string _tokenURI, address[] _tokenHolders, uint[] _amount)\n', '  external\n', '  // burnRequired\n', '  returns (bool) {\n', '    require (_tokenHolders.length == _amount.length && _tokenHolders.length <= uint8(100));\n', '    address assetAddress = minter.cloneToken(_tokenURI, address(0));\n', '    for (uint8 i = 0; i < _tokenHolders.length; i++) {\n', '      minter.mintAssetTokens(assetAddress, _tokenHolders[i], _amount[i]);\n', '    }\n', '    database.setAddress(keccak256(abi.encodePacked("asset.manager", assetAddress)), msg.sender);\n', "    events.asset('Asset created', _tokenURI, assetAddress, msg.sender);\n", '    return true;\n', '  }\n', '\n', '  // @notice platform owners can destroy contract here\n', '  function destroy()\n', '  onlyOwner\n', '  external {\n', "    events.transaction('AssetGenerator destroyed', address(this), msg.sender, address(this).balance, address(0));\n", '    selfdestruct(msg.sender);\n', '  }\n', '\n', "  // @notice reverts if user hasn't approved burner to burn platform token\n", '  // modifier burnRequired {\n', '  //   ERC20Burner burner = ERC20Burner(database.addressStorage(keccak256(abi.encodePacked("contract", "ERC20Burner"))));\n', '  //   require(burner.burn(msg.sender, database.uintStorage(keccak256(abi.encodePacked(msg.sig, address(this))))));\n', '  //   _;\n', '  // }\n', '\n', '  // @notice Sender must be a registered owner\n', '  modifier onlyOwner {\n', '    require(database.boolStorage(keccak256(abi.encodePacked("owner", msg.sender))), "Not owner");\n', '    _;\n', '  }\n', '}']