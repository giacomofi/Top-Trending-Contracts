['/**\n', ' * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', 'contract IERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract IWethERC20 is IWeth, IERC20 {}\n', '\n', 'contract Constants {\n', '\n', '    uint256 internal constant WEI_PRECISION = 10**18;\n', '    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\n', '\n', '    uint256 internal constant DAYS_IN_A_YEAR = 365;\n', '    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\n', '\n', '    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\n', '    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\n', '}\n', '\n', '/**\n', ' * @dev Library for managing loan sets\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n', ' *\n', ' */\n', 'library EnumerableBytes32Set {\n', '\n', '    struct Bytes32Set {\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) index;\n', '        bytes32[] values;\n', '    }\n', '\n', '    /**\n', '     * @dev Add an address value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return addBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!contains(set, value)){\n', '            set.index[value] = set.values.push(value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes an address value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return removeBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (contains(set, value)){\n', '            uint256 toDeleteIndex = set.index[value] - 1;\n', '            uint256 lastIndex = set.values.length - 1;\n', '\n', "            // If the element we're deleting is the last one, we can just remove it without doing a swap\n", '            if (lastIndex != toDeleteIndex) {\n', '                bytes32 lastValue = set.values[lastIndex];\n', '\n', '                // Move the last value to the index where the deleted value is\n', '                set.values[toDeleteIndex] = lastValue;\n', '                // Update the index for the moved value\n', '                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            }\n', '\n', '            // Delete the index entry for the deleted value\n', '            delete set.index[value];\n', '\n', '            // Delete the old entry for the moved value\n', '            set.values.pop();\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function containsAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an array with all values in the set. O(N).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '\n', '     * WARNING: This function may run out of gas on large sets: use {length} and\n', '     * {get} instead in these cases.\n', '     */\n', '    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\n', '        internal\n', '        view\n', '        returns (bytes32[] memory output)\n', '    {\n', '        uint256 end = start + count;\n', '        require(end >= start, "addition overflow");\n', '        end = set.values.length < end ? set.values.length : end;\n', '        if (end == 0 || start >= end) {\n', '            return output;\n', '        }\n', '\n', '        output = new bytes32[](end-start);\n', '        for (uint256 i = start; i < end; i++) {\n', '            output[i-start] = set.values[i];\n', '        }\n', '        return output;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements on the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return set.values.length;\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function get(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return set.values[index];\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function getAddress(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        bytes32 value = set.values[index];\n', '        address addrvalue;\n', '        assembly {\n', '            addrvalue := value\n', '        }\n', '        return addrvalue;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n', '    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n', '    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n', '\n', '    /// @dev Constant for locked guard state\n', '    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one `nonReentrant` function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and an `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(reentrancyLock == REENTRANCY_GUARD_FREE, "nonReentrant");\n', '        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n', '        _;\n', '        reentrancyLock = REENTRANCY_GUARD_FREE;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "unauthorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return divCeil(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = ((a - 1) / b) + 1;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}\n', '\n', 'contract LoanStruct {\n', '    struct Loan {\n', '        bytes32 id;                 // id of the loan\n', '        bytes32 loanParamsId;       // the linked loan params id\n', '        bytes32 pendingTradesId;    // the linked pending trades id\n', '        uint256 principal;          // total borrowed amount outstanding\n', '        uint256 collateral;         // total collateral escrowed for the loan\n', '        uint256 startTimestamp;     // loan start time\n', '        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n', '        uint256 startMargin;        // initial margin when the loan opened\n', '        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\n', '        address borrower;           // borrower of this loan\n', '        address lender;             // lender of this loan\n', '        bool active;                // if false, the loan has been fully closed\n', '    }\n', '}\n', '\n', 'contract LoanParamsStruct {\n', '    struct LoanParams {\n', '        bytes32 id;                 // id of loan params object\n', "        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\n", '        address owner;              // owner of this object\n', '        address loanToken;          // the token being loaned\n', '        address collateralToken;    // the required collateral token\n', '        uint256 minInitialMargin;   // the minimum allowed initial margin\n', '        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\n', "        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term)\n", '    }\n', '}\n', '\n', 'contract OrderStruct {\n', '    struct Order {\n', '        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\n', '        uint256 interestRate;           // interest rate defined by the creator of this order\n', '        uint256 minLoanTerm;            // minimum loan term allowed\n', '        uint256 maxLoanTerm;            // maximum loan term allowed\n', '        uint256 createdTimestamp;       // timestamp when this order was created\n', '        uint256 expirationTimestamp;    // timestamp when this order expires\n', '    }\n', '}\n', '\n', 'contract LenderInterestStruct {\n', '    struct LenderInterest {\n', '        uint256 principalTotal;     // total borrowed amount outstanding of asset\n', '        uint256 owedPerDay;         // interest owed per day for all loans of asset\n', '        uint256 owedTotal;          // total interest owed for all loans of asset (assuming they go to full term)\n', '        uint256 paidTotal;          // total interest paid so far for asset\n', '        uint256 updatedTimestamp;   // last update\n', '    }\n', '}\n', '\n', 'contract LoanInterestStruct {\n', '    struct LoanInterest {\n', '        uint256 owedPerDay;         // interest owed per day for loan\n', '        uint256 depositTotal;       // total escrowed interest for loan\n', '        uint256 updatedTimestamp;   // last update\n', '    }\n', '}\n', '\n', 'contract Objects is\n', '    LoanStruct,\n', '    LoanParamsStruct,\n', '    OrderStruct,\n', '    LenderInterestStruct,\n', '    LoanInterestStruct\n', '{}\n', '\n', 'contract State is Constants, Objects, ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n', '\n', '    address public priceFeeds;                                                          // handles asset reference price lookups\n', '    address public swapsImpl;                                                           // handles asset swaps using dex liquidity\n', '\n', '    mapping (bytes4 => address) public logicTargets;                                    // implementations of protocol functions\n', '\n', '    mapping (bytes32 => Loan) public loans;                                             // loanId => Loan\n', '    mapping (bytes32 => LoanParams) public loanParams;                                  // loanParamsId => LoanParams\n', '\n', '    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                // lender => orderParamsId => Order\n', '    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;              // borrower => orderParamsId => Order\n', '\n', '    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;            // loanId => delegated => approved\n', '\n', '    // Interest\n', '    mapping (address => mapping (address => LenderInterest)) public lenderInterest;     // lender => loanToken => LenderInterest object\n', '    mapping (bytes32 => LoanInterest) public loanInterest;                              // loanId => LoanInterest object\n', '\n', '    // Internals\n', '    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                           // implementations set\n', '    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                            // active loans set\n', '\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;       // lender loans set\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;     // borrow loans set\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;    // user loan params set\n', '\n', '    address public feesController;                                                      // address controlling fee withdrawals\n', '\n', '    uint256 public lendingFeePercent = 10 ether; // 10% fee                             // fee taken from lender interest payments\n', '    mapping (address => uint256) public lendingFeeTokensHeld;                           // total interest fees received and not withdrawn per asset\n', '    mapping (address => uint256) public lendingFeeTokensPaid;                           // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n', '\n', '    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                         // fee paid for each trade\n', '    mapping (address => uint256) public tradingFeeTokensHeld;                           // total trading fees received and not withdrawn per asset\n', '    mapping (address => uint256) public tradingFeeTokensPaid;                           // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n', '\n', '    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                       // origination fee paid for each loan\n', '    mapping (address => uint256) public borrowingFeeTokensHeld;                         // total borrowing fees received and not withdrawn per asset\n', '    mapping (address => uint256) public borrowingFeeTokensPaid;                         // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n', '\n', '    uint256 public protocolTokenHeld;                                                   // current protocol token deposit balance\n', '    uint256 public protocolTokenPaid;                                                   // lifetime total payout of protocol token\n', '\n', '    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                     // fee share for affiliate program\n', '\n', '    mapping (address => uint256) public liquidationIncentivePercent;                    // percent discount on collateral for liquidators per collateral asset\n', '\n', '    mapping (address => address) public loanPoolToUnderlying;                           // loanPool => underlying\n', '    mapping (address => address) public underlyingToLoanPool;                           // underlying => loanPool\n', '    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                              // loan pools set\n', '\n', '    mapping (address => bool) public supportedTokens;                                   // supported tokens for swaps\n', '\n', '    uint256 public maxDisagreement = 5 ether;                                           // % disagreement between swap rate and reference rate\n', '\n', '    uint256 public sourceBufferPercent = 5 ether;                                       // used to estimate kyber swap source amount\n', '\n', '    uint256 public maxSwapSize = 1500 ether;                                            // maximum supported swap size in ETH\n', '\n', '\n', '    function _setTarget(\n', '        bytes4 sig,\n', '        address target)\n', '        internal\n', '    {\n', '        logicTargets[sig] = target;\n', '\n', '        if (target != address(0)) {\n', '            logicTargetsSet.addBytes32(bytes32(sig));\n', '        } else {\n', '            logicTargetsSet.removeBytes32(bytes32(sig));\n', '        }\n', '    }\n', '}\n', '\n', 'contract LoanSettingsEvents {\n', '\n', '    event LoanParamsSetup(\n', '        bytes32 indexed id,\n', '        address owner,\n', '        address indexed loanToken,\n', '        address indexed collateralToken,\n', '        uint256 minInitialMargin,\n', '        uint256 maintenanceMargin,\n', '        uint256 maxLoanTerm\n', '    );\n', '    event LoanParamsIdSetup(\n', '        bytes32 indexed id,\n', '        address indexed owner\n', '    );\n', '\n', '    event LoanParamsDisabled(\n', '        bytes32 indexed id,\n', '        address owner,\n', '        address indexed loanToken,\n', '        address indexed collateralToken,\n', '        uint256 minInitialMargin,\n', '        uint256 maintenanceMargin,\n', '        uint256 maxLoanTerm\n', '    );\n', '    event LoanParamsIdDisabled(\n', '        bytes32 indexed id,\n', '        address indexed owner\n', '    );\n', '}\n', '\n', 'contract LoanSettings is State, LoanSettingsEvents {\n', '\n', '    function initialize(\n', '        address target)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _setTarget(this.setupLoanParams.selector, target);\n', '        _setTarget(this.disableLoanParams.selector, target);\n', '        _setTarget(this.getLoanParams.selector, target);\n', '        _setTarget(this.getLoanParamsList.selector, target);\n', '        _setTarget(this.getTotalPrincipal.selector, target);\n', '    }\n', '\n', '    function setupLoanParams(\n', '        LoanParams[] calldata loanParamsList)\n', '        external\n', '        returns (bytes32[] memory loanParamsIdList)\n', '    {\n', '        loanParamsIdList = new bytes32[](loanParamsList.length);\n', '        for (uint256 i = 0; i < loanParamsList.length; i++) {\n', '            loanParamsIdList[i] = _setupLoanParams(loanParamsList[i]);\n', '        }\n', '    }\n', '\n', '    // Deactivates LoanParams for future loans. Active loans using it are unaffected.\n', '    function disableLoanParams(\n', '        bytes32[] calldata loanParamsIdList)\n', '        external\n', '    {\n', '        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n', '            require(msg.sender == loanParams[loanParamsIdList[i]].owner, "unauthorized owner");\n', '            loanParams[loanParamsIdList[i]].active = false;\n', '\n', '            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n', '            emit LoanParamsDisabled(\n', '                loanParamsLocal.id,\n', '                loanParamsLocal.owner,\n', '                loanParamsLocal.loanToken,\n', '                loanParamsLocal.collateralToken,\n', '                loanParamsLocal.minInitialMargin,\n', '                loanParamsLocal.maintenanceMargin,\n', '                loanParamsLocal.maxLoanTerm\n', '            );\n', '            emit LoanParamsIdDisabled(\n', '                loanParamsLocal.id,\n', '                loanParamsLocal.owner\n', '            );\n', '        }\n', '    }\n', '\n', '    function getLoanParams(\n', '        bytes32[] memory loanParamsIdList)\n', '        public\n', '        view\n', '        returns (LoanParams[] memory loanParamsList)\n', '    {\n', '        loanParamsList = new LoanParams[](loanParamsIdList.length);\n', '        uint256 itemCount;\n', '\n', '        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n', '            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n', '            if (loanParamsLocal.id == 0) {\n', '                continue;\n', '            }\n', '            loanParamsList[itemCount] = loanParamsLocal;\n', '            itemCount++;\n', '        }\n', '\n', '        if (itemCount < loanParamsList.length) {\n', '            assembly {\n', '                mstore(loanParamsList, itemCount)\n', '            }\n', '        }\n', '    }\n', '\n', '    function getLoanParamsList(\n', '        address owner,\n', '        uint256 start,\n', '        uint256 count)\n', '        external\n', '        view\n', '        returns (bytes32[] memory loanParamsList)\n', '    {\n', '        EnumerableBytes32Set.Bytes32Set storage set = userLoanParamSets[owner];\n', '        uint256 end = start.add(count).min256(set.length());\n', '        if (start >= end) {\n', '            return loanParamsList;\n', '        }\n', '        count = end-start;\n', '\n', '        loanParamsList = new bytes32[](count);\n', '        for (uint256 i = --end; i >= start; i--) {\n', '            loanParamsList[--count] = set.get(i);\n', '\n', '            if (i == 0) {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTotalPrincipal(\n', '        address lender,\n', '        address loanToken)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return lenderInterest[lender][loanToken].principalTotal;\n', '    }\n', '\n', '    function _setupLoanParams(\n', '        LoanParams memory loanParamsLocal)\n', '        internal\n', '        returns (bytes32)\n', '    {\n', '        bytes32 loanParamsId = keccak256(abi.encode(\n', '            loanParamsLocal.loanToken,\n', '            loanParamsLocal.collateralToken,\n', '            loanParamsLocal.minInitialMargin,\n', '            loanParamsLocal.maintenanceMargin,\n', '            loanParamsLocal.maxLoanTerm,\n', '            block.timestamp\n', '        ));\n', '        require(loanParams[loanParamsId].id == 0, "loanParams exists");\n', '\n', '        require(loanParamsLocal.loanToken != address(0) &&\n', '            loanParamsLocal.collateralToken != address(0) &&\n', '            loanParamsLocal.minInitialMargin > loanParamsLocal.maintenanceMargin &&\n', '            (loanParamsLocal.maxLoanTerm == 0 || loanParamsLocal.maxLoanTerm > 1 hours), // a defined maxLoanTerm has to be greater than one hour\n', '            "invalid params"\n', '        );\n', '\n', '        loanParamsLocal.id = loanParamsId;\n', '        loanParamsLocal.active = true;\n', '        loanParamsLocal.owner = msg.sender;\n', '\n', '        loanParams[loanParamsId] = loanParamsLocal;\n', '        userLoanParamSets[msg.sender].addBytes32(loanParamsId);\n', '\n', '        emit LoanParamsSetup(\n', '            loanParamsId,\n', '            loanParamsLocal.owner,\n', '            loanParamsLocal.loanToken,\n', '            loanParamsLocal.collateralToken,\n', '            loanParamsLocal.minInitialMargin,\n', '            loanParamsLocal.maintenanceMargin,\n', '            loanParamsLocal.maxLoanTerm\n', '        );\n', '        emit LoanParamsIdSetup(\n', '            loanParamsId,\n', '            loanParamsLocal.owner\n', '        );\n', '\n', '        return loanParamsId;\n', '    }\n', '}']