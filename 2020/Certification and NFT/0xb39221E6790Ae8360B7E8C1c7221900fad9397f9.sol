['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/pool/Math64x64.sol\n', '\n', '/*\n', ' *  Math 64.64 Smart Contract Library.  Copyright © 2019 by  Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library Math64x64 {\n', '  /**\n', '   * @dev Minimum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /**\n', '   * @dev Maximum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * @dev Convert signed 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromInt (int256 x) internal pure returns (int128) {\n', '    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * @dev Convert signed 64.64 fixed point number into signed 64-bit integer number\n', '   * rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64-bit integer number\n', '   */\n', '  function toInt (int128 x) internal pure returns (int64) {\n', '    return int64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * @dev Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * @dev Convert signed 64.64 fixed point number into unsigned 64-bit integer\n', '   * number rounding down.  Revert on underflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return unsigned 64-bit integer number\n', '   */\n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * @dev Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n', '   * number rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 128.128-bin fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function from128x128 (int256 x) internal pure returns (int128) {\n', '    int256 result = x >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Convert signed 64.64 fixed point number into signed 128.128 fixed point\n', '   * number.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 128.128 fixed point number\n', '   */\n', '  function to128x128 (int128 x) internal pure returns (int256) {\n', '    return int256 (x) << 64;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x - y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sub (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) - y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x * y rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function mul (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) * y >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n', '   * number and y is signed 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 256-bit integer number\n', '   */\n', '  function muli (int128 x, int256 y) internal pure returns (int256) {\n', '    if (x == MIN_64x64) {\n', '      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n', '        y <= 0x1000000000000000000000000000000000000000000000000);\n', '      return -y << 63;\n', '    } else {\n', '      bool negativeResult = false;\n', '      if (x < 0) {\n', '        x = -x;\n', '        negativeResult = true;\n', '      }\n', '      if (y < 0) {\n', '        y = -y; // We rely on overflow behavior here\n', '        negativeResult = !negativeResult;\n', '      }\n', '      uint256 absoluteResult = mulu (x, uint256 (y));\n', '      if (negativeResult) {\n', '        require (absoluteResult <=\n', '          0x8000000000000000000000000000000000000000000000000000000000000000);\n', '        return -int256 (absoluteResult); // We rely on overflow behavior here\n', '      } else {\n', '        require (absoluteResult <=\n', '          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '        return int256 (absoluteResult);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x / y rounding towards zero.  Revert on overflow or when y is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function div (int128 x, int128 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    int256 result = (int256 (x) << 64) / y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x / y rounding towards zero, where x and y are signed 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divi (int256 x, int256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '\n', '    bool negativeResult = false;\n', '    if (x < 0) {\n', '      x = -x; // We rely on overflow behavior here\n', '      negativeResult = true;\n', '    }\n', '    if (y < 0) {\n', '      y = -y; // We rely on overflow behavior here\n', '      negativeResult = !negativeResult;\n', '    }\n', '    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divu (uint256 x, uint256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    uint128 result = divuu (x, y);\n', '    require (result <= uint128 (MAX_64x64));\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate -x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function neg (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return -x;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate |x|.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function abs (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return x < 0 ? -x : x;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function inv (int128 x) internal pure returns (int128) {\n', '    require (x != 0);\n', '    int256 result = int256 (0x100000000000000000000000000000000) / x;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function avg (int128 x, int128 y) internal pure returns (int128) {\n', '    return int128 ((int256 (x) + int256 (y)) >> 1);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n', '   * Revert on overflow or in case x * y is negative.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function gavg (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 m = int256 (x) * int256 (y);\n', '    require (m >= 0);\n', '    require (m <\n', '        0x4000000000000000000000000000000000000000000000000000000000000000);\n', '    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate sqrt (x) rounding down.  Revert if x < 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sqrt (int128 x) internal pure returns (int128) {\n', '    require (x >= 0);\n', '    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate binary logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function log_2 (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    int256 msb = 0;\n', '    int256 xc = x;\n', '    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '    if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '    if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '    if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '    int256 result = msb - 64 << 64;\n', '    uint256 ux = uint256 (x) << 127 - msb;\n', '    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '      ux *= ux;\n', '      uint256 b = ux >> 255;\n', '      ux >>= 127 + b;\n', '      result += bit * int256 (b);\n', '    }\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate natural logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function ln (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    return int128 (\n', '        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate binary exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp_2 (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    uint256 result = 0x80000000000000000000000000000000;\n', '\n', '    if (x & 0x8000000000000000 > 0)\n', '      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n', '    if (x & 0x4000000000000000 > 0)\n', '      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n', '    if (x & 0x2000000000000000 > 0)\n', '      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n', '    if (x & 0x1000000000000000 > 0)\n', '      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n', '    if (x & 0x800000000000000 > 0)\n', '      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n', '    if (x & 0x400000000000000 > 0)\n', '      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n', '    if (x & 0x200000000000000 > 0)\n', '      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n', '    if (x & 0x100000000000000 > 0)\n', '      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n', '    if (x & 0x80000000000000 > 0)\n', '      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n', '    if (x & 0x40000000000000 > 0)\n', '      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n', '    if (x & 0x20000000000000 > 0)\n', '      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n', '    if (x & 0x10000000000000 > 0)\n', '      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n', '    if (x & 0x8000000000000 > 0)\n', '      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n', '    if (x & 0x4000000000000 > 0)\n', '      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n', '    if (x & 0x2000000000000 > 0)\n', '      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n', '    if (x & 0x1000000000000 > 0)\n', '      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n', '    if (x & 0x800000000000 > 0)\n', '      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n', '    if (x & 0x400000000000 > 0)\n', '      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n', '    if (x & 0x200000000000 > 0)\n', '      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n', '    if (x & 0x100000000000 > 0)\n', '      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n', '    if (x & 0x80000000000 > 0)\n', '      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n', '    if (x & 0x40000000000 > 0)\n', '      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n', '    if (x & 0x20000000000 > 0)\n', '      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n', '    if (x & 0x10000000000 > 0)\n', '      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n', '    if (x & 0x8000000000 > 0)\n', '      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n', '    if (x & 0x4000000000 > 0)\n', '      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n', '    if (x & 0x2000000000 > 0)\n', '      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n', '    if (x & 0x1000000000 > 0)\n', '      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n', '    if (x & 0x800000000 > 0)\n', '      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n', '    if (x & 0x400000000 > 0)\n', '      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n', '    if (x & 0x200000000 > 0)\n', '      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n', '    if (x & 0x100000000 > 0)\n', '      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n', '    if (x & 0x80000000 > 0)\n', '      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n', '    if (x & 0x40000000 > 0)\n', '      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n', '    if (x & 0x20000000 > 0)\n', '      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n', '    if (x & 0x10000000 > 0)\n', '      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n', '    if (x & 0x8000000 > 0)\n', '      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n', '    if (x & 0x4000000 > 0)\n', '      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n', '    if (x & 0x2000000 > 0)\n', '      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n', '    if (x & 0x1000000 > 0)\n', '      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n', '    if (x & 0x800000 > 0)\n', '      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n', '    if (x & 0x400000 > 0)\n', '      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n', '    if (x & 0x200000 > 0)\n', '      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n', '    if (x & 0x100000 > 0)\n', '      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n', '    if (x & 0x80000 > 0)\n', '      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n', '    if (x & 0x40000 > 0)\n', '      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n', '    if (x & 0x20000 > 0)\n', '      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n', '    if (x & 0x10000 > 0)\n', '      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n', '    if (x & 0x8000 > 0)\n', '      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n', '    if (x & 0x4000 > 0)\n', '      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n', '    if (x & 0x2000 > 0)\n', '      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n', '    if (x & 0x1000 > 0)\n', '      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n', '    if (x & 0x800 > 0)\n', '      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n', '    if (x & 0x400 > 0)\n', '      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n', '    if (x & 0x200 > 0)\n', '      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n', '    if (x & 0x100 > 0)\n', '      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n', '    if (x & 0x80 > 0)\n', '      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n', '    if (x & 0x40 > 0)\n', '      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n', '    if (x & 0x20 > 0)\n', '      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n', '    if (x & 0x10 > 0)\n', '      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n', '    if (x & 0x8 > 0)\n', '      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n', '    if (x & 0x4 > 0)\n', '      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n', '    if (x & 0x2 > 0)\n', '      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n', '    if (x & 0x1 > 0)\n', '      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n', '\n', '    result >>= 63 - (x >> 64);\n', '    require (result <= uint256 (MAX_64x64));\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate natural exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    return exp_2 (\n', '        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 64.64-bit fixed point number\n', '   */\n', '  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\n', '    require (y != 0);\n', '\n', '    uint256 result;\n', '\n', '    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '      result = (x << 64) / y;\n', '    else {\n', '      uint256 msb = 192;\n', '      uint256 xc = x >> 192;\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n', '      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 hi = result * (y >> 128);\n', '      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 xh = x >> 192;\n', '      uint256 xl = x << 64;\n', '\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '      lo = hi << 128;\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '\n', '      assert (xh == hi >> 128);\n', '\n', '      result += xl / y;\n', '    }\n', '\n', '    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= xe;\n', '      else x <<= -xe;\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= re;\n', '      else if (re < 0) result >>= -re;\n', '\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n', '   * number.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return unsigned 128-bit integer number\n', '   */\n', '  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\n', '    if (x == 0) return 0;\n', '    else {\n', '      require (r > 0);\n', '      while (true) {\n', '        uint256 rr = x / r;\n', '        if (r == rr || r + 1 == rr) return uint128 (r);\n', '        else if (r == rr + 1) return uint128 (rr);\n', '        r = r + rr + 1 >> 1;\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/pool/YieldMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * Ethereum smart contract library implementing Yield Math model.\n', ' */\n', 'library YieldMath {\n', '  /**\n', '   * Calculate the amount of fyDai a user would get for given amount of Dai.\n', '   *\n', '   * @param daiReserves Dai reserves amount\n', '   * @param fyDaiReserves fyDai reserves amount\n', '   * @param daiAmount Dai amount to be traded\n', '   * @param timeTillMaturity time till maturity in seconds\n', '   * @param k time till maturity coefficient, multiplied by 2^64\n', '   * @param g fee coefficient, multiplied by 2^64\n', '   * @return the amount of fyDai a user would get for given amount of Dai\n', '   */\n', '  function fyDaiOutForDaiIn (\n', '    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\n', '    uint128 timeTillMaturity, int128 k, int128 g)\n', '  internal pure returns (uint128) {\n', '    // t = k * timeTillMaturity\n', '    int128 t = Math64x64.mul (k, Math64x64.fromUInt (timeTillMaturity));\n', '\n', '    // a = (1 - gt)\n', '    int128 a = Math64x64.sub (0x10000000000000000, Math64x64.mul (g, t));\n', '    require (a > 0, "YieldMath: Too far from maturity");\n', '\n', '    // xdx = daiReserves + daiAmount\n', '    uint256 xdx = uint256 (daiReserves) + uint256 (daiAmount);\n', '    require (xdx < 0x100000000000000000000000000000000, "YieldMath: Too much Dai in");\n', '\n', '    uint256 sum =\n', '      pow (daiReserves, uint128 (a), 0x10000000000000000) +\n', '      pow (fyDaiReserves, uint128 (a), 0x10000000000000000) -\n', '      pow (uint128(xdx), uint128 (a), 0x10000000000000000);\n', '    require (sum < 0x100000000000000000000000000000000, "YieldMath: Insufficient fyDai reserves");\n', '\n', '    uint256 result = fyDaiReserves - pow (uint128 (sum), 0x10000000000000000, uint128 (a));\n', '    require (result < 0x100000000000000000000000000000000, "YieldMath: Rounding induced error");\n', '    result = result > 1e12 ? result - 1e12 : 0; // Substract error guard, flooring the result at zero\n', '\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate the amount of Dai a user would get for certain amount of fyDai.\n', '   *\n', '   * @param daiReserves Dai reserves amount\n', '   * @param fyDaiReserves fyDai reserves amount\n', '   * @param fyDaiAmount fyDai amount to be traded\n', '   * @param timeTillMaturity time till maturity in seconds\n', '   * @param k time till maturity coefficient, multiplied by 2^64\n', '   * @param g fee coefficient, multiplied by 2^64\n', '   * @return the amount of Dai a user would get for given amount of fyDai\n', '   */\n', '  function daiOutForFYDaiIn (\n', '    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\n', '    uint128 timeTillMaturity, int128 k, int128 g)\n', '  internal pure returns (uint128) {\n', '    // t = k * timeTillMaturity\n', '    int128 t = Math64x64.mul (k, Math64x64.fromUInt (timeTillMaturity));\n', '\n', '    // a = (1 - gt)\n', '    int128 a = Math64x64.sub (0x10000000000000000, Math64x64.mul (g, t));\n', '    require (a > 0, "YieldMath: Too far from maturity");\n', '\n', '    // ydy = fyDaiReserves + fyDaiAmount;\n', '    uint256 ydy = uint256 (fyDaiReserves) + uint256 (fyDaiAmount);\n', '    require (ydy < 0x100000000000000000000000000000000, "YieldMath: Too much fyDai in");\n', '\n', '    uint256 sum =\n', '      pow (uint128 (daiReserves), uint128 (a), 0x10000000000000000) -\n', '      pow (uint128 (ydy), uint128 (a), 0x10000000000000000) +\n', '      pow (fyDaiReserves, uint128 (a), 0x10000000000000000);\n', '    require (sum < 0x100000000000000000000000000000000, "YieldMath: Insufficient Dai reserves");\n', '\n', '    uint256 result =\n', '      daiReserves -\n', '      pow (uint128 (sum), 0x10000000000000000, uint128 (a));\n', '    require (result < 0x100000000000000000000000000000000, "YieldMath: Rounding induced error");\n', '    result = result > 1e12 ? result - 1e12 : 0; // Substract error guard, flooring the result at zero\n', '\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate the amount of fyDai a user could sell for given amount of Dai.\n', '   *\n', '   * @param daiReserves Dai reserves amount\n', '   * @param fyDaiReserves fyDai reserves amount\n', '   * @param daiAmount Dai amount to be traded\n', '   * @param timeTillMaturity time till maturity in seconds\n', '   * @param k time till maturity coefficient, multiplied by 2^64\n', '   * @param g fee coefficient, multiplied by 2^64\n', '   * @return the amount of fyDai a user could sell for given amount of Dai\n', '   */\n', '  function fyDaiInForDaiOut (\n', '    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\n', '    uint128 timeTillMaturity, int128 k, int128 g)\n', '  internal pure returns (uint128) {\n', '    // t = k * timeTillMaturity\n', '    int128 t = Math64x64.mul (k, Math64x64.fromUInt (timeTillMaturity));\n', '\n', '    // a = (1 - gt)\n', '    int128 a = Math64x64.sub (0x10000000000000000, Math64x64.mul (g, t));\n', '    require (a > 0, "YieldMath: Too far from maturity");\n', '\n', '    // xdx = daiReserves - daiAmount\n', '    uint256 xdx = uint256 (daiReserves) - uint256 (daiAmount);\n', '    require (xdx < 0x100000000000000000000000000000000, "YieldMath: Too much Dai out");\n', '\n', '    uint256 sum =\n', '      pow (uint128 (daiReserves), uint128 (a), 0x10000000000000000) +\n', '      pow (fyDaiReserves, uint128 (a), 0x10000000000000000) -\n', '      pow (uint128 (xdx), uint128 (a), 0x10000000000000000);\n', '    require (sum < 0x100000000000000000000000000000000, "YieldMath: Resulting fyDai reserves too high");\n', '\n', '    uint256 result = pow (uint128 (sum), 0x10000000000000000, uint128 (a)) - fyDaiReserves;\n', '    require (result < 0x100000000000000000000000000000000, "YieldMath: Rounding induced error");\n', '    result = result < type(uint128).max - 1e12 ? result + 1e12 : type(uint128).max; // Add error guard, ceiling the result at max\n', '\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate the amount of Dai a user would have to pay for certain amount of\n', '   * fyDai.\n', '   *\n', '   * @param daiReserves Dai reserves amount\n', '   * @param fyDaiReserves fyDai reserves amount\n', '   * @param fyDaiAmount fyDai amount to be traded\n', '   * @param timeTillMaturity time till maturity in seconds\n', '   * @param k time till maturity coefficient, multiplied by 2^64\n', '   * @param g fee coefficient, multiplied by 2^64\n', '   * @return the amount of Dai a user would have to pay for given amount of\n', '   *         fyDai\n', '   */\n', '  function daiInForFYDaiOut (\n', '    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\n', '    uint128 timeTillMaturity, int128 k, int128 g)\n', '  internal pure returns (uint128) {\n', '    // a = (1 - g * k * timeTillMaturity)\n', '    int128 a = Math64x64.sub (0x10000000000000000, Math64x64.mul (g, Math64x64.mul (k, Math64x64.fromUInt (timeTillMaturity))));\n', '    require (a > 0, "YieldMath: Too far from maturity");\n', '\n', '    // ydy = fyDaiReserves - fyDaiAmount;\n', '    uint256 ydy = uint256 (fyDaiReserves) - uint256 (fyDaiAmount);\n', '    require (ydy < 0x100000000000000000000000000000000, "YieldMath: Too much fyDai out");\n', '\n', '    uint256 sum =\n', '      pow (daiReserves, uint128 (a), 0x10000000000000000) +\n', '      pow (fyDaiReserves, uint128 (a), 0x10000000000000000) -\n', '      pow (uint128 (ydy), uint128 (a), 0x10000000000000000);\n', '    require (sum < 0x100000000000000000000000000000000, "YieldMath: Resulting Dai reserves too high");\n', '\n', '    uint256 result =\n', '      pow (uint128 (sum), 0x10000000000000000, uint128 (a)) -\n', '      daiReserves;\n', '    require (result < 0x100000000000000000000000000000000, "YieldMath: Rounding induced error");\n', '    result = result < type(uint128).max - 1e12 ? result + 1e12 : type(uint128).max; // Add error guard, ceiling the result at max\n', '    \n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Raise given number x into power specified as a simple fraction y/z and then\n', '   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\n', '   * Revert if z is zero, or if both x and y are zeros.\n', '   *\n', '   * @param x number to raise into given power y/z\n', '   * @param y numerator of the power to raise x into\n', '   * @param z denominator of the power to raise x into\n', '   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\n', '   */\n', '  function pow (uint128 x, uint128 y, uint128 z)\n', '  internal pure returns (uint256) {\n', '    require (z != 0);\n', '\n', '    if (x == 0) {\n', '      require (y != 0);\n', '      return 0;\n', '    } else {\n', '      uint256 l =\n', '        uint256 (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2 (x)) * y / z;\n', '      if (l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\n', '      else return uint256 (pow_2 (uint128 (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l)));\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\n', '   * in case x is zero.\n', '   *\n', '   * @param x number to calculate base 2 logarithm of\n', '   * @return base 2 logarithm of x, multiplied by 2^121\n', '   */\n', '  function log_2 (uint128 x)\n', '  internal pure returns (uint128) {\n', '    require (x != 0);\n', '\n', '    uint b = x;\n', '\n', '    uint l = 0xFE000000000000000000000000000000;\n', '\n', '    if (b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\n', '    if (b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\n', '    if (b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\n', '    if (b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\n', '    if (b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\n', '    if (b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\n', '    if (b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\n', '\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;}\n', '    /* Precision reduced to 64 bits\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\n', '    b = b * b >> 127; if (b >= 0x100000000000000000000000000000000) l |= 0x1;\n', '    */\n', '\n', '    return uint128 (l);\n', '  }\n', '\n', '  /**\n', '   * Calculate 2 raised into given power.\n', '   *\n', '   * @param x power to raise 2 into, multiplied by 2^121\n', '   * @return 2 raised into given power\n', '   */\n', '  function pow_2 (uint128 x)\n', '  internal pure returns (uint128) {\n', '    uint r = 0x80000000000000000000000000000000;\n', '    if (x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\n', '    if (x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\n', '    if (x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\n', '    if (x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\n', '    if (x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\n', '    if (x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\n', '    if (x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\n', '    if (x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\n', '    if (x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\n', '    if (x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\n', '    if (x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\n', '    if (x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\n', '    if (x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\n', '    if (x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\n', '    if (x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\n', '    if (x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\n', '    if (x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\n', '    if (x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\n', '    if (x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\n', '    if (x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\n', '    if (x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\n', '    if (x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\n', '    if (x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\n', '    if (x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\n', '    if (x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\n', '    if (x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\n', '    if (x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\n', '    if (x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\n', '    if (x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\n', '    if (x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\n', '    if (x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\n', '    if (x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\n', '    if (x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\n', '    if (x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\n', '    if (x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\n', '    if (x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\n', '    if (x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\n', '    if (x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\n', '    if (x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\n', '    if (x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\n', '    if (x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\n', '    if (x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\n', '    if (x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\n', '    if (x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\n', '    if (x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\n', '    if (x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\n', '    if (x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\n', '    if (x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\n', '    if (x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\n', '    if (x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\n', '    if (x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\n', '    if (x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\n', '    if (x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\n', '    if (x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\n', '    if (x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\n', '    if (x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\n', '    if (x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127;\n', '    /* Precision reduced to 64 bits\n', '    if (x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\n', '    if (x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\n', '    if (x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\n', '    if (x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\n', '    if (x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\n', '    if (x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\n', '    if (x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\n', '    if (x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\n', '    if (x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\n', '    if (x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\n', '    if (x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\n', '    if (x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\n', '    if (x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\n', '    if (x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\n', '    if (x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\n', '    if (x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\n', '    if (x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\n', '    if (x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\n', '    if (x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\n', '    if (x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\n', '    if (x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\n', '    if (x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\n', '    if (x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\n', '    if (x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\n', '    if (x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\n', '    if (x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\n', '    if (x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\n', '    if (x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\n', '    if (x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\n', '    if (x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\n', '    if (x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\n', '    if (x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\n', '    if (x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\n', '    if (x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\n', '    if (x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\n', '    if (x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\n', '    if (x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\n', '    if (x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\n', '    if (x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\n', '    if (x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\n', '    if (x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\n', '    if (x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\n', '    if (x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\n', '    if (x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\n', '    if (x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\n', '    if (x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\n', '    if (x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\n', '    if (x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\n', '    if (x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\n', '    if (x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\n', '    if (x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\n', '    if (x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\n', '    if (x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\n', '    if (x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\n', '    if (x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\n', '    if (x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\n', '    if (x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\n', '    if (x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\n', '    if (x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\n', '    if (x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\n', '    if (x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\n', '    if (x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\n', '    if (x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\n', '    if (x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127;\n', '    */\n', '\n', '    r >>= 127 - (x >> 121);\n', '\n', '    return uint128 (r);\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/IDelegable.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', 'interface IDelegable {\n', '    function addDelegate(address) external;\n', '    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\n', '}\n', '\n', '// File: contracts/helpers/Delegable.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '/// @dev Delegable enables users to delegate their account management to other users.\n', '/// Delegable implements addDelegateBySignature, to add delegates using a signature instead of a separate transaction.\n', 'contract Delegable is IDelegable {\n', '    event Delegate(address indexed user, address indexed delegate, bool enabled);\n', '\n', '    // keccak256("Signature(address user,address delegate,uint256 nonce,uint256 deadline)");\n', '    bytes32 public immutable SIGNATURE_TYPEHASH = 0x0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb7;\n', '    bytes32 public immutable DELEGABLE_DOMAIN;\n', '    mapping(address => uint) public signatureCount;\n', '\n', '    mapping(address => mapping(address => bool)) public delegated;\n', '\n', '    constructor () public {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '\n', '        DELEGABLE_DOMAIN = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", "                keccak256(bytes('Yield')),\n", "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /// @dev Require that msg.sender is the account holder or a delegate\n', '    modifier onlyHolderOrDelegate(address holder, string memory errorMessage) {\n', '        require(\n', '            msg.sender == holder || delegated[holder][msg.sender],\n', '            errorMessage\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Enable a delegate to act on the behalf of caller\n', '    function addDelegate(address delegate) public override {\n', '        _addDelegate(msg.sender, delegate);\n', '    }\n', '\n', '    /// @dev Stop a delegate from acting on the behalf of caller\n', '    function revokeDelegate(address delegate) public {\n', '        _revokeDelegate(msg.sender, delegate);\n', '    }\n', '\n', '    /// @dev Add a delegate through an encoded signature\n', '    function addDelegateBySignature(address user, address delegate, uint deadline, uint8 v, bytes32 r, bytes32 s) public override {\n', "        require(deadline >= block.timestamp, 'Delegable: Signature expired');\n", '\n', '        bytes32 hashStruct = keccak256(\n', '            abi.encode(\n', '                SIGNATURE_TYPEHASH,\n', '                user,\n', '                delegate,\n', '                signatureCount[user]++,\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DELEGABLE_DOMAIN,\n', '                hashStruct\n', '            )\n', '        );\n', '        address signer = ecrecover(digest, v, r, s);\n', '        require(\n', '            signer != address(0) && signer == user,\n', "            'Delegable: Invalid signature'\n", '        );\n', '\n', '        _addDelegate(user, delegate);\n', '    }\n', '\n', '    /// @dev Enable a delegate to act on the behalf of an user\n', '    function _addDelegate(address user, address delegate) internal {\n', '        require(!delegated[user][delegate], "Delegable: Already delegated");\n', '        delegated[user][delegate] = true;\n', '        emit Delegate(user, delegate, true);\n', '    }\n', '\n', '    /// @dev Stop a delegate from acting on the behalf of an user\n', '    function _revokeDelegate(address user, address delegate) internal {\n', '        require(delegated[user][delegate], "Delegable: Already undelegated");\n', '        delegated[user][delegate] = false;\n', '        emit Delegate(user, delegate, false);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC2612.sol\n', '\n', '// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC2612 standard as defined in the EIP.\n', ' *\n', " * Adds the {permit} method, which can be used to change one's\n", ' * {IERC20-allowance} without having to send a transaction, by signing a\n', ' * message. This allows users to spend tokens without having to hold Ether.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-2612.\n', ' */\n', 'interface IERC2612 {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/helpers/ERC20Permit.sol\n', '\n', '// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to use their tokens\n', ' * without sending any transactions by setting {IERC20-allowance} with a\n', ' * signature using the {permit} method, and then spend them via\n', ' * {IERC20-transferFrom}.\n', ' *\n', ' * The {permit} signature mechanism conforms to the {IERC2612} interface.\n', ' */\n', 'abstract contract ERC20Permit is ERC20, IERC2612 {\n', '    mapping (address => uint256) public override nonces;\n', '\n', '    bytes32 public immutable PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public immutable DOMAIN_SEPARATOR;\n', '\n', '    constructor(string memory name_, string memory symbol_) internal ERC20(name_, symbol_) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256(bytes(name_)),\n', '                keccak256(bytes("1")),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC2612-permit}.\n', '     *\n', '     * In cases where the free option is not a concern, deadline can simply be\n', '     * set to uint(-1), so it should be seen as an optional parameter\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '        require(deadline >= block.timestamp, "ERC20Permit: expired deadline");\n', '\n', '        bytes32 hashStruct = keccak256(\n', '            abi.encode(\n', '                PERMIT_TYPEHASH,\n', '                owner,\n', '                spender,\n', '                amount,\n', '                nonces[owner]++,\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                hashStruct\n', '            )\n', '        );\n', '\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(\n', '            signer != address(0) && signer == owner,\n', '            "ERC20Permit: invalid signature"\n', '        );\n', '\n', '        _approve(owner, spender, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IPot.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the pot contract from MakerDao\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\n', 'interface IPot {\n', '    function chi() external view returns (uint256);\n', '    function pie(address) external view returns (uint256); // Not a function, but a public variable.\n', '    function rho() external returns (uint256);\n', '    function drip() external returns (uint256);\n', '    function join(uint256) external;\n', '    function exit(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/IFYDai.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', 'interface IFYDai is IERC20, IERC2612 {\n', '    function isMature() external view returns(bool);\n', '    function maturity() external view returns(uint);\n', '    function chi0() external view returns(uint);\n', '    function rate0() external view returns(uint);\n', '    function chiGrowth() external view returns(uint);\n', '    function rateGrowth() external view returns(uint);\n', '    function mature() external;\n', '    function unlocked() external view returns (uint);\n', '    function mint(address, uint) external;\n', '    function burn(address, uint) external;\n', '    function flashMint(uint, bytes calldata) external;\n', '    function redeem(address, address, uint256) external returns (uint256);\n', '    // function transfer(address, uint) external returns (bool);\n', '    // function transferFrom(address, address, uint) external returns (bool);\n', '    // function approve(address, uint) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IPool.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', 'interface IPool is IDelegable, IERC20, IERC2612 {\n', '    function dai() external view returns(IERC20);\n', '    function fyDai() external view returns(IFYDai);\n', '    function getDaiReserves() external view returns(uint128);\n', '    function getFYDaiReserves() external view returns(uint128);\n', '    function sellDai(address from, address to, uint128 daiIn) external returns(uint128);\n', '    function buyDai(address from, address to, uint128 daiOut) external returns(uint128);\n', '    function sellFYDai(address from, address to, uint128 fyDaiIn) external returns(uint128);\n', '    function buyFYDai(address from, address to, uint128 fyDaiOut) external returns(uint128);\n', '    function sellDaiPreview(uint128 daiIn) external view returns(uint128);\n', '    function buyDaiPreview(uint128 daiOut) external view returns(uint128);\n', '    function sellFYDaiPreview(uint128 fyDaiIn) external view returns(uint128);\n', '    function buyFYDaiPreview(uint128 fyDaiOut) external view returns(uint128);\n', '    function mint(address from, address to, uint256 daiOffered) external returns (uint256);\n', '    function burn(address from, address to, uint256 tokensBurned) external returns (uint256, uint256);\n', '}\n', '\n', '// File: contracts/pool/Pool.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @dev The Pool contract exchanges Dai for fyDai at a price defined by a specific formula.\n', 'contract Pool is IPool, Delegable(), ERC20Permit {\n', '\n', '    event Trade(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens);\n', '    event Liquidity(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens, int256 poolTokens);\n', '\n', '    int128 constant public k = int128(uint256((1 << 64)) / 126144000); // 1 / Seconds in 4 years, in 64.64\n', '    int128 constant public g1 = int128(uint256((950 << 64)) / 1000); // To be used when selling Dai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\n', '    int128 constant public g2 = int128(uint256((1000 << 64)) / 950); // To be used when selling fyDai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\n', '    uint128 immutable public maturity;\n', '\n', '    IERC20 public override dai;\n', '    IFYDai public override fyDai;\n', '\n', '    constructor(address dai_, address fyDai_, string memory name_, string memory symbol_)\n', '        public\n', '        ERC20Permit(name_, symbol_)\n', '    {\n', '        dai = IERC20(dai_);\n', '        fyDai = IFYDai(fyDai_);\n', '\n', '        maturity = toUint128(fyDai.maturity());\n', '    }\n', '\n', '    /// @dev Trading can only be done before maturity\n', '    modifier beforeMaturity() {\n', '        require(\n', '            now < maturity,\n', '            "Pool: Too late"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Overflow-protected addition, from OpenZeppelin\n', '    function add(uint128 a, uint128 b)\n', '        internal pure returns (uint128)\n', '    {\n', '        uint128 c = a + b;\n', '        require(c >= a, "Pool: Dai reserves too high");\n', '\n', '        return c;\n', '    }\n', '\n', '    /// @dev Overflow-protected substraction, from OpenZeppelin\n', '    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n', '        require(b <= a, "Pool: fyDai reserves too low");\n', '        uint128 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /// @dev Safe casting from uint256 to uint128\n', '    function toUint128(uint256 x) internal pure returns(uint128) {\n', '        require(\n', '            x <= type(uint128).max,\n', '            "Pool: Cast overflow"\n', '        );\n', '        return uint128(x);\n', '    }\n', '\n', '    /// @dev Safe casting from uint256 to int256\n', '    function toInt256(uint256 x) internal pure returns(int256) {\n', '        require(\n', '            x <= uint256(type(int256).max),\n', '            "Pool: Cast overflow"\n', '        );\n', '        return int256(x);\n', '    }\n', '\n', '    /// @dev Mint initial liquidity tokens.\n', '    /// The liquidity provider needs to have called `dai.approve`\n', '    /// @param daiIn The initial Dai liquidity to provide.\n', '    function init(uint256 daiIn)\n', '        internal\n', '        beforeMaturity\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            totalSupply() == 0,\n', '            "Pool: Already initialized"\n', '        );\n', '        // no fyDai transferred, because initial fyDai deposit is entirely virtual\n', '        dai.transferFrom(msg.sender, address(this), daiIn);\n', '        _mint(msg.sender, daiIn);\n', '        emit Liquidity(maturity, msg.sender, msg.sender, -toInt256(daiIn), 0, toInt256(daiIn));\n', '\n', '        return daiIn;\n', '    }\n', '\n', '    /// @dev Mint liquidity tokens in exchange for adding dai and fyDai\n', '    /// The liquidity provider needs to have called `dai.approve` and `fyDai.approve`.\n', '    /// @param from Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the minted liquidity tokens.\n', '    /// @param daiOffered Amount of `dai` being invested, an appropriate amount of `fyDai` to be invested alongside will be calculated and taken by this function from the caller.\n', '    /// @return The amount of liquidity tokens minted.\n', '    function mint(address from, address to, uint256 daiOffered)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns (uint256)\n', '    {\n', '        uint256 supply = totalSupply();\n', '        if (supply == 0) return init(daiOffered);\n', '\n', '        uint256 daiReserves = dai.balanceOf(address(this));\n', '        // use the actual reserves rather than the virtual reserves\n', '        uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n', '        uint256 tokensMinted = supply.mul(daiOffered).div(daiReserves);\n', '        uint256 fyDaiRequired = fyDaiReserves.mul(tokensMinted).div(supply);\n', '\n', "        require(daiReserves.add(daiOffered) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\n", "        require(supply.add(fyDaiReserves.add(fyDaiRequired)) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\n", '\n', '        require(dai.transferFrom(from, address(this), daiOffered));\n', '        require(fyDai.transferFrom(from, address(this), fyDaiRequired));\n', '        _mint(to, tokensMinted);\n', '        emit Liquidity(maturity, from, to, -toInt256(daiOffered), -toInt256(fyDaiRequired), toInt256(tokensMinted));\n', '\n', '        return tokensMinted;\n', '    }\n', '\n', '    /// @dev Burn liquidity tokens in exchange for dai and fyDai.\n', '    /// The liquidity provider needs to have called `pool.approve`.\n', '    /// @param from Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the dai and fyDai.\n', '    /// @param tokensBurned Amount of liquidity tokens being burned.\n', '    /// @return The amount of reserve tokens returned (daiTokens, fyDaiTokens).\n', '    function burn(address from, address to, uint256 tokensBurned)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns (uint256, uint256)\n', '    {\n', '        uint256 supply = totalSupply();\n', '        uint256 daiReserves = dai.balanceOf(address(this));\n', '        // use the actual reserves rather than the virtual reserves\n', '        uint256 daiReturned;\n', '        uint256 fyDaiReturned;\n', '        { // avoiding stack too deep\n', '            uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n', '            daiReturned = tokensBurned.mul(daiReserves).div(supply);\n', '            fyDaiReturned = tokensBurned.mul(fyDaiReserves).div(supply);\n', '        }\n', '\n', '        _burn(from, tokensBurned);\n', '        dai.transfer(to, daiReturned);\n', '        fyDai.transfer(to, fyDaiReturned);\n', '        emit Liquidity(maturity, from, to, toInt256(daiReturned), toInt256(fyDaiReturned), -toInt256(tokensBurned));\n', '\n', '        return (daiReturned, fyDaiReturned);\n', '    }\n', '\n', '    /// @dev Sell Dai for fyDai\n', '    /// The trader needs to have called `dai.approve`\n', '    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the fyDai being bought\n', "    /// @param daiIn Amount of dai being sold that will be taken from the user's wallet\n", '    /// @return Amount of fyDai that will be deposited on `to` wallet\n', '    function sellDai(address from, address to, uint128 daiIn)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns(uint128)\n', '    {\n', '        uint128 fyDaiOut = sellDaiPreview(daiIn);\n', '\n', '        dai.transferFrom(from, address(this), daiIn);\n', '        fyDai.transfer(to, fyDaiOut);\n', '        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\n', '\n', '        return fyDaiOut;\n', '    }\n', '\n', '    /// @dev Returns how much fyDai would be obtained by selling `daiIn` dai\n', '    /// @param daiIn Amount of dai hypothetically sold.\n', '    /// @return Amount of fyDai hypothetically bought.\n', '    function sellDaiPreview(uint128 daiIn)\n', '        public view override\n', '        beforeMaturity\n', '        returns(uint128)\n', '    {\n', '        uint128 daiReserves = getDaiReserves();\n', '        uint128 fyDaiReserves = getFYDaiReserves();\n', '\n', '        uint128 fyDaiOut = YieldMath.fyDaiOutForDaiIn(\n', '            daiReserves,\n', '            fyDaiReserves,\n', '            daiIn,\n', "            toUint128(maturity - now), // This can't be called after maturity\n", '            k,\n', '            g1\n', '        );\n', '\n', '        require(\n', '            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\n', '            "Pool: fyDai reserves too low"\n', '        );\n', '\n', '        return fyDaiOut;\n', '    }\n', '\n', '    /// @dev Buy Dai for fyDai\n', '    /// The trader needs to have called `fyDai.approve`\n', '    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the dai being bought\n', '    /// @param daiOut Amount of dai being bought that will be deposited in `to` wallet\n', '    /// @return Amount of fyDai that will be taken from `from` wallet\n', '    function buyDai(address from, address to, uint128 daiOut)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns(uint128)\n', '    {\n', '        uint128 fyDaiIn = buyDaiPreview(daiOut);\n', '\n', '        fyDai.transferFrom(from, address(this), fyDaiIn);\n', '        dai.transfer(to, daiOut);\n', '        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\n', '\n', '        return fyDaiIn;\n', '    }\n', '\n', '    /// @dev Returns how much fyDai would be required to buy `daiOut` dai.\n', '    /// @param daiOut Amount of dai hypothetically desired.\n', '    /// @return Amount of fyDai hypothetically required.\n', '    function buyDaiPreview(uint128 daiOut)\n', '        public view override\n', '        beforeMaturity\n', '        returns(uint128)\n', '    {\n', '        return YieldMath.fyDaiInForDaiOut(\n', '            getDaiReserves(),\n', '            getFYDaiReserves(),\n', '            daiOut,\n', "            toUint128(maturity - now), // This can't be called after maturity\n", '            k,\n', '            g2\n', '        );\n', '    }\n', '\n', '    /// @dev Sell fyDai for Dai\n', '    /// The trader needs to have called `fyDai.approve`\n', '    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the dai being bought\n', "    /// @param fyDaiIn Amount of fyDai being sold that will be taken from the user's wallet\n", '    /// @return Amount of dai that will be deposited on `to` wallet\n', '    function sellFYDai(address from, address to, uint128 fyDaiIn)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns(uint128)\n', '    {\n', '        uint128 daiOut = sellFYDaiPreview(fyDaiIn);\n', '\n', '        fyDai.transferFrom(from, address(this), fyDaiIn);\n', '        dai.transfer(to, daiOut);\n', '        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\n', '\n', '        return daiOut;\n', '    }\n', '\n', '    /// @dev Returns how much dai would be obtained by selling `fyDaiIn` fyDai.\n', '    /// @param fyDaiIn Amount of fyDai hypothetically sold.\n', '    /// @return Amount of Dai hypothetically bought.\n', '    function sellFYDaiPreview(uint128 fyDaiIn)\n', '        public view override\n', '        beforeMaturity\n', '        returns(uint128)\n', '    {\n', '        return YieldMath.daiOutForFYDaiIn(\n', '            getDaiReserves(),\n', '            getFYDaiReserves(),\n', '            fyDaiIn,\n', "            toUint128(maturity - now), // This can't be called after maturity\n", '            k,\n', '            g2\n', '        );\n', '    }\n', '\n', '    /// @dev Buy fyDai for dai\n', '    /// The trader needs to have called `dai.approve`\n', '    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n', '    /// @param to Wallet receiving the fyDai being bought\n', '    /// @param fyDaiOut Amount of fyDai being bought that will be deposited in `to` wallet\n', '    /// @return Amount of dai that will be taken from `from` wallet\n', '    function buyFYDai(address from, address to, uint128 fyDaiOut)\n', '        external override\n', '        onlyHolderOrDelegate(from, "Pool: Only Holder Or Delegate")\n', '        returns(uint128)\n', '    {\n', '        uint128 daiIn = buyFYDaiPreview(fyDaiOut);\n', '\n', '        dai.transferFrom(from, address(this), daiIn);\n', '        fyDai.transfer(to, fyDaiOut);\n', '        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\n', '\n', '        return daiIn;\n', '    }\n', '\n', '\n', '    /// @dev Returns how much dai would be required to buy `fyDaiOut` fyDai.\n', '    /// @param fyDaiOut Amount of fyDai hypothetically desired.\n', '    /// @return Amount of Dai hypothetically required.\n', '    function buyFYDaiPreview(uint128 fyDaiOut)\n', '        public view override\n', '        beforeMaturity\n', '        returns(uint128)\n', '    {\n', '        uint128 daiReserves = getDaiReserves();\n', '        uint128 fyDaiReserves = getFYDaiReserves();\n', '\n', '        uint128 daiIn = YieldMath.daiInForFYDaiOut(\n', '            daiReserves,\n', '            fyDaiReserves,\n', '            fyDaiOut,\n', "            toUint128(maturity - now), // This can't be called after maturity\n", '            k,\n', '            g1\n', '        );\n', '\n', '        require(\n', '            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\n', '            "Pool: fyDai reserves too low"\n', '        );\n', '\n', '        return daiIn;\n', '    }\n', '\n', '    /// @dev Returns the "virtual" fyDai reserves\n', '    function getFYDaiReserves()\n', '        public view override\n', '        returns(uint128)\n', '    {\n', '        return toUint128(fyDai.balanceOf(address(this)).add(totalSupply()));\n', '    }\n', '\n', '    /// @dev Returns the Dai reserves\n', '    function getDaiReserves()\n', '        public view override\n', '        returns(uint128)\n', '    {\n', '        return toUint128(dai.balanceOf(address(this)));\n', '    }\n', '}']