['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract yAxisMetaVaultManager {\n', '    address public governance;\n', '\n', '    address public profitSharer;\n', '    address public yax; // YAX\n', '\n', '    mapping(address => bool) public vaults;\n', '    mapping(address => bool) public controllers;\n', '    mapping(address => bool) public strategies;\n', '\n', '    address public stakingPool = 0x362Db1c17db4C79B51Fe6aD2d73165b1fe9BaB4a; // this pool will be set up later, so at first we set it to treasury\n', '    address public treasuryWallet = 0x362Db1c17db4C79B51Fe6aD2d73165b1fe9BaB4a;\n', '    address public performanceReward = 0x5661bF295f48F499A70857E8A6450066a8D16400; // set to deploy wallet at start\n', '\n', '    /** The following fees are all mutable. They are updated by governance (community vote) with Timelock **/\n', '    uint256 public stakingPoolShareFee = 2000; // 20% of profit go back to staking pool\n', '    uint256 public gasFee = 100; // 1% of profit paid for deployment and execution (gas) fee\n', '    uint256 public insuranceFee = 0; // % of deposits go into an insurance fund (or auto-compounding if called by controller) in-case of negative profits to protect withdrawals\n', '    uint256 public withdrawalProtectionFee = 10; // % of withdrawal go back to vault (for auto-compounding) to protect withdrawals\n', '\n', '    constructor (address _yax) public {\n', '        yax = _yax;\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setProfitSharer(address _profitSharer) external {\n', '        require(msg.sender == governance, "!governance");\n', '        profitSharer = _profitSharer;\n', '    }\n', '\n', '    function setYax(address _yax) external {\n', '        require(msg.sender == governance, "!governance");\n', '        yax = _yax;\n', '    }\n', '\n', '    function setVaultStatus(address _vault, bool _status) external {\n', '        require(msg.sender == governance, "!governance");\n', '        vaults[_vault] = _status;\n', '    }\n', '\n', '    function setControllerStatus(address _controller, bool _status) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controllers[_controller] = _status;\n', '    }\n', '\n', '    function setStrategyStatus(address _strategy, bool _status) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategies[_strategy] = _status;\n', '    }\n', '\n', '    function setStakingPool(address _stakingPool) public {\n', '        require(msg.sender == governance, "!governance");\n', '        stakingPool = _stakingPool;\n', '    }\n', '\n', '    function setTreasuryWallet(address _treasuryWallet) public {\n', '        require(msg.sender == governance, "!governance");\n', '        treasuryWallet = _treasuryWallet;\n', '    }\n', '\n', '    function setPerformanceReward(address _performanceReward) public{\n', '        require(msg.sender == governance, "!governance");\n', '        performanceReward = _performanceReward;\n', '    }\n', '\n', '    function setStakingPoolShareFee(uint256 _stakingPoolShareFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_stakingPoolShareFee <= 5000, "_stakingPoolShareFee over 50%");\n', '        stakingPoolShareFee = _stakingPoolShareFee;\n', '    }\n', '\n', '    function setGasFee(uint256 _gasFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_gasFee <= 500, "_gasFee over 5%");\n', '        gasFee = _gasFee;\n', '    }\n', '\n', '    function setInsuranceFee(uint256 _insuranceFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_insuranceFee <= 100, "_insuranceFee over 1%");\n', '        insuranceFee = _insuranceFee;\n', '    }\n', '\n', '    function setWithdrawalProtectionFee(uint256 _withdrawalProtectionFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_withdrawalProtectionFee <= 100, "_withdrawalProtectionFee over 1%");\n', '        withdrawalProtectionFee = _withdrawalProtectionFee;\n', '    }\n', '\n', '    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.transfer(_to, _amount);\n', '    }\n', '}']