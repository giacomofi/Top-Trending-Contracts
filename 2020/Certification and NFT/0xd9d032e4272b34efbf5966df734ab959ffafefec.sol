['pragma solidity ^0.4.26;\n', 'contract SHRIMPTokenInterface {\n', '    function balanceOf(address who) external view returns(uint256);\n', '}\n', 'contract UNISWAPTokenInterface {\n', '    function balanceOf(address who) external view returns(uint256);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '\n', '\n', 'contract vote {\n', '    mapping(uint => uint) public event_start_time;\n', '    mapping(uint => uint) public event_end_time;\n', '    address public owner;\n', '    uint public now_id;\n', '    mapping (address => mapping (uint => bool)) public vote_content;\n', '    event Voter(uint indexed id,address voter);\n', '    event Purposal(uint indexed id, string content);\n', '    SHRIMPTokenInterface public zombie = SHRIMPTokenInterface(0xd55BD2C12B30075b325Bc35aEf0B46363B3818f8);\n', '    UNISWAPTokenInterface public uniswap = UNISWAPTokenInterface(0xC83E9d6bC93625863FFe8082c37bA6DA81399C47);\n', '    SHRIMPTokenInterface public shrimpZombie = SHRIMPTokenInterface(0xdcEe2dC9834dfbc7d24C57769ED51daf202a1b87);\n', '    UNISWAPTokenInterface public yfibpt = UNISWAPTokenInterface(0x1066a453127faD74d0aB1C981DffA56D76310517);\n', '    UNISWAPTokenInterface public crvbpt = UNISWAPTokenInterface(0xDA4B031B5ECE42ABB394A9d2130eAA958C2A8B38);\n', '\n', '    constructor()public{\n', '        owner = msg.sender;\n', '        now_id = 0;\n', '    }\n', '    function agree_vote(uint id)public{\n', '        // require(event_start_time[id] <= now && event_end_time[id] >= now);\n', '        vote_content[msg.sender][id] = true;\n', '        emit Voter(id,msg.sender);\n', '    }\n', '    function disagree_vote(uint id)public{\n', '        // require(event_start_time[id] <= now && event_end_time[id] >= now);\n', '        vote_content[msg.sender][id] = false;\n', '    }\n', '    function get_vote(uint id, address[] _owners)public view returns(uint tickets){\n', '        uint vote_count = 0;\n', '        address uniswapAddress = 0xC83E9d6bC93625863FFe8082c37bA6DA81399C47;\n', '        address yfiaddress = 0x1066a453127faD74d0aB1C981DffA56D76310517;\n', '        address crvaddress = 0xDA4B031B5ECE42ABB394A9d2130eAA958C2A8B38;\n', '        for (uint i=0; i<_owners.length; i++) {\n', '           if(vote_content[_owners[i]][id] == true){\n', '               vote_count+=zombie.balanceOf(_owners[i]);\n', '               vote_count+=(zombie.balanceOf(uniswapAddress)*uniswap.balanceOf(_owners[i])/uniswap.totalSupply());\n', '                vote_count+=shrimpZombie.balanceOf(_owners[i]);\n', '                vote_count+=(zombie.balanceOf(yfiaddress)*yfibpt.balanceOf(_owners[i])/yfibpt.totalSupply());\n', '                vote_count+=(zombie.balanceOf(crvaddress)*crvbpt.balanceOf(_owners[i])/crvbpt.totalSupply());\n', '           }\n', '        }\n', '        return vote_count;\n', '    }\n', '    function update_event_time(uint id, uint ev_time, uint ev_end_time)public{\n', '        require(msg.sender == owner);\n', '        event_start_time[id] = ev_time;\n', '        event_end_time[id] = ev_end_time;\n', '    }\n', '    function purpose(string content)public{\n', '        emit Purposal(now_id, content);\n', '        now_id ++;\n', '    }\n', '    function get_time()public view returns(uint timestamp){\n', '        return now;\n', '    }\n', '}']