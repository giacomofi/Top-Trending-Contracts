['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath96.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath96 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint96 a, uint256 b) internal pure returns (uint96) {\n', '        require(uint256(uint96(b)) == b, "SafeMath: addition overflow");\n', '        uint96 c = a + uint96(b);\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint96 a, uint256 b) internal pure returns (uint96) {\n', '        require(uint256(uint96(b)) == b, "SafeMath: subtraction overflow");\n', '        return sub(a, uint96(b), "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n', '        require(b <= a, errorMessage);\n', '        uint96 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IElections.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Elections contract interface\n', 'interface IElections {\n', '\t\n', '\t// Election state change events\n', '\tevent StakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 effectiveStake);\n', '\tevent GuardianStatusUpdated(address indexed guardian, bool readyToSync, bool readyForCommittee);\n', '\n', '\t// Vote out / Vote unready\n', '\tevent GuardianVotedUnready(address indexed guardian);\n', '\tevent VoteUnreadyCasted(address indexed voter, address indexed subject, uint256 expiration);\n', '\tevent GuardianVotedOut(address indexed guardian);\n', '\tevent VoteOutCasted(address indexed voter, address indexed subject);\n', '\n', '\t/*\n', '\t * External functions\n', '\t */\n', '\n', '    /// Notifies that the guardian is ready to sync with other nodes\n', "    /// @dev may be called with either the guardian address or the guardian's orbs address\n", '    /// @dev ready to sync state is not managed in the contract that only emits an event\n', '    /// @dev readyToSync clears the readyForCommittee state\n', '\tfunction readyToSync() external;\n', '\n', '    /// Notifies that the guardian is ready to join the committee\n', "    /// @dev may be called with either the guardian address or the guardian's orbs address\n", '    /// @dev a qualified guardian calling readyForCommittee is added to the committee\n', '\tfunction readyForCommittee() external;\n', '\n', '    /// Checks if a guardian is qualified to join the committee\n', '    /// @dev when true, calling readyForCommittee() will result in adding the guardian to the committee\n', '    /// @dev called periodically by guardians to check if they are qualified to join the committee\n', '    /// @param guardian is the guardian to check\n', '    /// @return canJoin indicating that the guardian can join the current committee\n', '\tfunction canJoinCommittee(address guardian) external view returns (bool);\n', '\n', '    /// Returns an address effective stake\n', '    /// The effective stake is derived from a guardian delegate stake and selfs stake  \n', "    /// @return effectiveStake is the guardian's effective stake\n", '\tfunction getEffectiveStake(address guardian) external view returns (uint effectiveStake);\n', '\n', "    /// Returns the current committee along with the guardians' Orbs address and IP\n", "    /// @return committee is a list of the committee members' guardian addresses\n", "    /// @return weights is a list of the committee members' weight (effective stake)\n", "    /// @return orbsAddrs is a list of the committee members' orbs address\n", '    /// @return certification is a list of bool indicating the committee members certification\n', "    /// @return ips is a list of the committee members' ip\n", '\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\n', '\n', '\t// Vote-unready\n', '\n', '    /// Casts an unready vote on a subject guardian\n', '    /// @dev Called by a guardian as part of the automatic vote-unready flow\n', '    /// @dev The transaction may be sent from the guardian or orbs address.\n', '    /// @param subject is the subject guardian to vote out\n', '    /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.\n', '\tfunction voteUnready(address subject, uint voteExpiration) external;\n', '\n', '    /// Returns the current vote unready vote for a voter and a subject pair\n', '    /// @param voter is the voting guardian address\n', '    /// @param subject is the subject guardian address\n', '    /// @return valid indicates whether there is a valid vote\n', '    /// @return expiration returns the votes expiration time\n', '\tfunction getVoteUnreadyVote(address voter, address subject) external view returns (bool valid, uint256 expiration);\n', '\n', '    /// Returns the current vote-unready status of a subject guardian.\n', '    /// @dev the committee and certification data is used to check the certified and committee threshold\n', '    /// @param subject is the subject guardian address\n', '    /// @return committee is a list of the current committee members\n', '    /// @return weights is a list of the current committee members weight\n', '    /// @return certification is a list of bool indicating the committee members certification\n', '    /// @return votes is a list of bool indicating the members that votes the subject unready\n', '    /// @return subjectInCommittee indicates that the subject is in the committee\n', '    /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee\n', '\tfunction getVoteUnreadyStatus(address subject) external view returns (\n', '\t\taddress[] memory committee,\n', '\t\tuint256[] memory weights,\n', '\t\tbool[] memory certification,\n', '\t\tbool[] memory votes,\n', '\t\tbool subjectInCommittee,\n', '\t\tbool subjectInCertifiedCommittee\n', '\t);\n', '\n', '\t// Vote-out\n', '\n', '    /// Casts a voteOut vote by the sender to the given address\n', '    /// @dev the transaction is sent from the guardian address\n', '    /// @param subject is the subject guardian address\n', '\tfunction voteOut(address subject) external;\n', '\n', '    /// Returns the subject address the addr has voted-out against\n', '    /// @param voter is the voting guardian address\n', '    /// @return subject is the subject the voter has voted out\n', '\tfunction getVoteOutVote(address voter) external view returns (address);\n', '\n', '    /// Returns the governance voteOut status of a guardian.\n', '    /// @dev A guardian is voted out if votedStake / totalDelegatedStake (in percent mille) > threshold\n', '    /// @param subject is the subject guardian address\n', '    /// @return votedOut indicates whether the subject was voted out\n', '    /// @return votedStake is the total stake voting against the subject\n', '    /// @return totalDelegatedStake is the total delegated stake\n', '\tfunction getVoteOutStatus(address subject) external view returns (bool votedOut, uint votedStake, uint totalDelegatedStake);\n', '\n', '\t/*\n', '\t * Notification functions from other PoS contracts\n', '\t */\n', '\n', '    /// Notifies a delegated stake change event\n', '    /// @dev Called by: delegation contract\n', '    /// @param delegate is the delegate to update\n', '    /// @param selfDelegatedStake is the delegate self stake (0 if not self-delegating)\n', '    /// @param delegatedStake is the delegate delegated stake (0 if not self-delegating)\n', '    /// @param totalDelegatedStake is the total delegated stake\n', '\tfunction delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationsContract onlyWhenActive */;\n', '\n', '    /// Notifies a new guardian was unregistered\n', '    /// @dev Called by: guardian registration contract\n', '    /// @dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee\n', '    /// @param guardian is the address of the guardian that unregistered\n', '\tfunction guardianUnregistered(address guardian) external /* onlyGuardiansRegistrationContract */;\n', '\n', '    /// Notifies on a guardian certification change\n', '    /// @dev Called by: guardian registration contract\n', '    /// @param guardian is the address of the guardian to update\n', '    /// @param isCertified indicates whether the guardian is certified\n', '\tfunction guardianCertificationChanged(address guardian, bool isCertified) external /* onlyCertificationContract */;\n', '\n', '\n', '\t/*\n', '     * Governance functions\n', '\t */\n', '\n', '\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\n', '\tevent VoteOutPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\n', '\tevent VoteUnreadyPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\n', '\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\n', '\n', '    /// Sets the minimum self stake requirement for the effective stake\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \n', '\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the minimum self-stake required for the effective stake\n', '    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille \n', '\tfunction getMinSelfStakePercentMille() external view returns (uint32);\n', '\n', '    /// Sets the vote-out threshold\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param voteOutPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\n', '\tfunction setVoteOutPercentMilleThreshold(uint32 voteOutPercentMilleThreshold) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the vote-out threshold\n', '    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\n', '\tfunction getVoteOutPercentMilleThreshold() external view returns (uint32);\n', '\n', '    /// Sets the vote-unready threshold\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\n', '\tfunction setVoteUnreadyPercentMilleThreshold(uint32 voteUnreadyPercentMilleThreshold) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the vote-unready threshold\n', '    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\n', '\tfunction getVoteUnreadyPercentMilleThreshold() external view returns (uint32);\n', '\n', "    /// Returns the contract's settings \n", '    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille\n', '    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\n', '    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\n', '\tfunction getSettings() external view returns (\n', '\t\tuint32 minSelfStakePercentMille,\n', '\t\tuint32 voteUnreadyPercentMilleThreshold,\n', '\t\tuint32 voteOutPercentMilleThreshold\n', '\t);\n', '\n', '    /// Initializes the ready for committee notification for the committee guardians\n', '    /// @dev governance function called only by the initialization admin during migration \n', '    /// @dev identical behaviour as if each guardian sent readyForCommittee() \n', '    /// @param guardians a list of guardians addresses to update\n', '\tfunction initReadyForCommittee(address[] calldata guardians) external /* onlyInitializationAdmin */;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IDelegations.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Delegations contract interface\n', 'interface IDelegations /* is IStakeChangeNotifier */ {\n', '\n', '    // Delegation state change events\n', '\tevent DelegatedStakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, address indexed delegator, uint256 delegatorContributedStake);\n', '\n', '    // Function calls\n', '\tevent Delegated(address indexed from, address indexed to);\n', '\n', '\t/*\n', '     * External functions\n', '     */\n', '\n', '    /// Delegate your stake\n', '    /// @dev updates the election contract on the changes in the delegated stake\n', "    /// @dev updates the rewards contract on the upcoming change in the delegator's delegation state\n", '    /// @param to is the address to delegate to\n', '\tfunction delegate(address to) external /* onlyWhenActive */;\n', '\n', '    /// Refresh the address stake for delegation power based on the staking contract\n', '    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\n', '    /// @dev refreshStake re-syncs the stake data with the staking contract\n', '    /// @param addr is the address to refresh its stake\n', '\tfunction refreshStake(address addr) external /* onlyWhenActive */;\n', '\n', '    /// Refresh the addresses stake for delegation power based on the staking contract\n', '    /// @dev Batched version of refreshStake\n', '    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\n', '    /// @dev refreshStakeBatch re-syncs the stake data with the staking contract\n', '    /// @param addrs is the list of addresses to refresh their stake\n', '\tfunction refreshStakeBatch(address[] calldata addrs) external /* onlyWhenActive */;\n', '\n', '    /// Returns the delegate address of the given address\n', '    /// @param addr is the address to query\n', '    /// @return delegation is the address the addr delegated to\n', '\tfunction getDelegation(address addr) external view returns (address);\n', '\n', '    /// Returns a delegator info\n', '    /// @param addr is the address to query\n', '    /// @return delegation is the address the addr delegated to\n', '    /// @return delegatorStake is the stake of the delegator as reflected in the delegation contract\n', '\tfunction getDelegationInfo(address addr) external view returns (address delegation, uint256 delegatorStake);\n', '\t\n', '    /// Returns the delegated stake of an addr \n', '    /// @dev an address that is not self delegating has a 0 delegated stake\n', '    /// @param addr is the address to query\n', '    /// @return delegatedStake is the address delegated stake\n', '\tfunction getDelegatedStake(address addr) external view returns (uint256);\n', '\n', '    /// Returns the total delegated stake\n', '    /// @dev delegatedStake - the total stake delegated to an address that is self delegating\n', '    /// @dev the delegated stake of a non self-delegated address is 0\n', '    /// @return totalDelegatedStake is the total delegatedStake of all the addresses\n', '\tfunction getTotalDelegatedStake() external view returns (uint256) ;\n', '\n', '\t/*\n', '\t * Governance functions\n', '\t */\n', '\n', '\tevent DelegationsImported(address[] from, address indexed to);\n', '\n', '\tevent DelegationInitialized(address indexed from, address indexed to);\n', '\n', '    /// Imports delegations during initial migration\n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev Does not update the Rewards or Election contracts\n', '    /// @dev assumes deactivated Rewards\n', '    /// @param from is a list of delegator addresses\n', '    /// @param to is the address the delegators delegate to\n', '\tfunction importDelegations(address[] calldata from, address to) external /* onlyMigrationManager onlyDuringDelegationImport */;\n', '\n', '    /// Initializes the delegation of an address during initial migration \n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev behaves identically to a delegate transaction sent by the delegator\n', '    /// @param from is the delegator addresses\n', '    /// @param to is the delegator delegates to\n', '\tfunction initDelegation(address from, address to) external /* onlyInitializationAdmin */;\n', '}\n', '\n', '// File: contracts/IStakeChangeNotifier.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title An interface for notifying of stake change events (e.g., stake, unstake, partial unstake, restate, etc.).\n', 'interface IStakeChangeNotifier {\n', '    /// @dev Notifies of stake change event.\n', '    /// @param _stakeOwner address The address of the subject stake owner.\n', '    /// @param _amount uint256 The difference in the total staked amount.\n', '    /// @param _sign bool The sign of the added (true) or subtracted (false) amount.\n', '    /// @param _updatedStake uint256 The updated total staked amount.\n', '    function stakeChange(address _stakeOwner, uint256 _amount, bool _sign, uint256 _updatedStake) external;\n', '\n', '    /// @dev Notifies of multiple stake change events.\n', '    /// @param _stakeOwners address[] The addresses of subject stake owners.\n', '    /// @param _amounts uint256[] The differences in total staked amounts.\n', '    /// @param _signs bool[] The signs of the added (true) or subtracted (false) amounts.\n', '    /// @param _updatedStakes uint256[] The updated total staked amounts.\n', '    function stakeChangeBatch(address[] calldata _stakeOwners, uint256[] calldata _amounts, bool[] calldata _signs,\n', '        uint256[] calldata _updatedStakes) external;\n', '\n', '    /// @dev Notifies of stake migration event.\n', '    /// @param _stakeOwner address The address of the subject stake owner.\n', '    /// @param _amount uint256 The migrated amount.\n', '    function stakeMigration(address _stakeOwner, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IStakingContractHandler.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Staking contract handler contract interface in addition to IStakeChangeNotifier\n', 'interface IStakingContractHandler {\n', '    event StakeChangeNotificationSkipped(address indexed stakeOwner);\n', '    event StakeChangeBatchNotificationSkipped(address[] stakeOwners);\n', '    event StakeMigrationNotificationSkipped(address indexed stakeOwner);\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the stake of the specified stake owner (excluding unstaked tokens).\n', '    /// @param stakeOwner address The address to check.\n', '    /// @return uint256 The total stake.\n', '    function getStakeBalanceOf(address stakeOwner) external view returns (uint256);\n', '\n', '    /// Returns the total amount staked tokens (excluding unstaked tokens).\n', '    /// @return uint256 is the total staked tokens of all stake owners.\n', '    function getTotalStakedTokens() external view returns (uint256);\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event NotifyDelegationsChanged(bool notifyDelegations);\n', '\n', '    /// Sets notifications to the delegation contract\n', '    /// @dev staking while notifications are disabled may lead to a discrepancy in the delegation data  \n', '    /// @dev governance function called only by the migration manager\n', '    /// @param notifyDelegations is a bool indicating whether to notify the delegation contract\n', '    function setNotifyDelegations(bool notifyDelegations) external; /* onlyMigrationManager */\n', '\n', '    /// Returns the notifications to the delegation contract status\n', '    /// @return notifyDelegations is a bool indicating whether notifications are enabled\n', '    function getNotifyDelegations() external view returns (bool);\n', '}\n', '\n', '// File: contracts/spec_interfaces/IStakingRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Staking rewards contract interface\n', 'interface IStakingRewards {\n', '\n', '    event DelegatorStakingRewardsAssigned(address indexed delegator, uint256 amount, uint256 totalAwarded, address guardian, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta);\n', '    event GuardianStakingRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta, uint256 stakingRewardsPerWeight, uint256 stakingRewardsPerWeightDelta);\n', '    event StakingRewardsClaimed(address indexed addr, uint256 claimedDelegatorRewards, uint256 claimedGuardianRewards, uint256 totalClaimedDelegatorRewards, uint256 totalClaimedGuardianRewards);\n', '    event StakingRewardsAllocated(uint256 allocatedRewards, uint256 stakingRewardsPerWeight);\n', '    event GuardianDelegatorsStakingRewardsPercentMilleUpdated(address indexed guardian, uint256 delegatorsStakingRewardsPercentMille);\n', '\n', '    /*\n', '     * External functions\n', '     */\n', '\n', '    /// Returns the current reward balance of the given address.\n', '    /// @dev calculates the up to date balances (differ from the state)\n', '    /// @param addr is the address to query\n', '    /// @return delegatorStakingRewardsBalance the rewards awarded to the guardian role\n', '    /// @return guardianStakingRewardsBalance the rewards awarded to the guardian role\n', '    function getStakingRewardsBalance(address addr) external view returns (uint256 delegatorStakingRewardsBalance, uint256 guardianStakingRewardsBalance);\n', '\n', '    /// Claims the staking rewards balance of an addr, staking the rewards\n', '    /// @dev Claimed rewards are staked in the staking contract using the distributeRewards interface\n', '    /// @dev includes the rewards for both the delegator and guardian roles\n', '    /// @dev calculates the up to date rewards prior to distribute them to the staking contract\n', '    /// @param addr is the address to claim rewards for\n', '    function claimStakingRewards(address addr) external;\n', '\n', '    /// Returns the current global staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @return stakingRewardsPerWeight is the potential reward per 1E18 (TOKEN_BASE) committee weight assigned to a guardian was in the committee from day zero\n', '    /// @return unclaimedStakingRewards is the of tokens that were assigned to participants and not claimed yet\n', '    function getStakingRewardsState() external view returns (\n', '        uint96 stakingRewardsPerWeight,\n', '        uint96 unclaimedStakingRewards\n', '    );\n', '\n', '    /// Returns the current guardian staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @dev notice that the guardian rewards are the rewards for the guardian role as guardian and do not include delegation rewards\n', "    /// @dev use getDelegatorStakingRewardsData to get the guardian's rewards as delegator\n", '    /// @param guardian is the guardian to query\n', '    /// @return balance is the staking rewards balance for the guardian role\n', '    /// @return claimed is the staking rewards for the guardian role that were claimed\n', "    /// @return delegatorRewardsPerToken is the potential reward per token (1E18 units) assigned to a guardian's delegator that delegated from day zero\n", '    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last guardian update\n', '    /// @return lastStakingRewardsPerWeight is the up to date stakingRewardsPerWeight used for the guardian state calculation\n', '    /// @return stakingRewardsPerWeightDelta is the increment in stakingRewardsPerWeight since the last guardian update\n', '    function getGuardianStakingRewardsData(address guardian) external view returns (\n', '        uint256 balance,\n', '        uint256 claimed,\n', '        uint256 delegatorRewardsPerToken,\n', '        uint256 delegatorRewardsPerTokenDelta,\n', '        uint256 lastStakingRewardsPerWeight,\n', '        uint256 stakingRewardsPerWeightDelta\n', '    );\n', '\n', '    /// Returns the current delegator staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @param delegator is the delegator to query\n', '    /// @return balance is the staking rewards balance for the delegator role\n', '    /// @return claimed is the staking rewards for the delegator role that were claimed\n', '    /// @return guardian is the guardian the delegator delegated to receiving a portion of the guardian staking rewards\n', '    /// @return lastDelegatorRewardsPerToken is the up to date delegatorRewardsPerToken used for the delegator state calculation\n', '    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last delegator update\n', '    function getDelegatorStakingRewardsData(address delegator) external view returns (\n', '        uint256 balance,\n', '        uint256 claimed,\n', '        address guardian,\n', '        uint256 lastDelegatorRewardsPerToken,\n', '        uint256 delegatorRewardsPerTokenDelta\n', '    );\n', '\n', '    /// Returns an estimation for the delegator and guardian staking rewards for a given duration\n', '    /// @dev the returned value is an estimation, assuming no change in the PoS state\n', '    /// @dev the period calculated for start from the current block time until the current time + duration.\n', '    /// @param addr is the address to estimate rewards for\n', '    /// @param duration is the duration to calculate for in seconds\n', '    /// @return estimatedDelegatorStakingRewards is the estimated reward for the delegator role\n', '    /// @return estimatedGuardianStakingRewards is the estimated reward for the guardian role\n', '    function estimateFutureRewards(address addr, uint256 duration) external view returns (\n', '        uint256 estimatedDelegatorStakingRewards,\n', '        uint256 estimatedGuardianStakingRewards\n', '    );\n', '\n', "    /// Sets the guardian's delegators staking reward portion\n", '    /// @dev by default uses the defaultDelegatorsStakingRewardsPercentMille\n', '    /// @param delegatorRewardsPercentMille is the delegators portion in percent-mille (0 - maxDelegatorsStakingRewardsPercentMille)\n', '    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external;\n', '\n', "    /// Returns a guardian's delegators staking reward portion\n", '    /// @dev If not explicitly set, returns the defaultDelegatorsStakingRewardsPercentMille\n', '    /// @return delegatorRewardsRatioPercentMille is the delegators portion in percent-mille\n', '    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external view returns (uint256 delegatorRewardsRatioPercentMille);\n', '\n', '    /// Returns the amount of ORBS tokens in the staking rewards wallet allocated to staking rewards\n', '    /// @dev The staking wallet balance must always larger than the allocated value\n', '    /// @return allocated is the amount of tokens allocated in the staking rewards wallet\n', '    function getStakingRewardsWalletAllocatedTokens() external view returns (uint256 allocated);\n', '\n', '    /// Returns the current annual staking reward rate\n', '    /// @dev calculated based on the current total committee weight\n', '    /// @return annualRate is the current staking reward rate in percent-mille\n', '    function getCurrentStakingRewardsRatePercentMille() external view returns (uint256 annualRate);\n', '\n', '    /// Notifies an expected change in the committee membership of the guardian\n', '    /// @dev Called only by: the Committee contract\n', '    /// @dev called upon expected change in the committee membership of the guardian\n', '    /// @dev triggers update of the global rewards state and the guardian rewards state\n', '    /// @dev updates the rewards state based on the committee state prior to the change\n', "    /// @param guardian is the guardian who's committee membership is updated\n", '    /// @param weight is the weight of the guardian prior to the change\n', '    /// @param totalCommitteeWeight is the total committee weight prior to the change\n', '    /// @param inCommittee indicates whether the guardian was in the committee prior to the change\n', '    /// @param inCommitteeAfter indicates whether the guardian is in the committee after the change\n', '    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external /* onlyCommitteeContract */;\n', '\n', '    /// Notifies an expected change in a delegator and his guardian delegation state\n', '    /// @dev Called only by: the Delegation contract\n', "    /// @dev called upon expected change in a delegator's delegation state\n", '    /// @dev triggers update of the global rewards state, the guardian rewards state and the delegator rewards state\n', "    /// @dev on delegation change, updates also the new guardian and the delegator's lastDelegatorRewardsPerToken accordingly\n", "    /// @param guardian is the delegator's guardian prior to the change\n", "    /// @param guardianDelegatedStake is the delegated stake of the delegator's guardian prior to the change\n", '    /// @param delegator is the delegator about to change delegation state\n', '    /// @param delegatorStake is the stake of the delegator\n', "    /// @param nextGuardian is the delegator's guardian after to the change\n", "    /// @param nextGuardianDelegatedStake is the delegated stake of the delegator's guardian after to the change\n", '    function delegationWillChange(address guardian, uint256 guardianDelegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external /* onlyDelegationsContract */;\n', '\n', '    /*\n', '     * Governance functions\n', '     */\n', '\n', '    event AnnualStakingRewardsRateChanged(uint256 annualRateInPercentMille, uint256 annualCap);\n', '    event DefaultDelegatorsStakingRewardsChanged(uint32 defaultDelegatorsStakingRewardsPercentMille);\n', '    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\n', '    event RewardDistributionActivated(uint256 startTime);\n', '    event RewardDistributionDeactivated();\n', '    event StakingRewardsBalanceMigrated(address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards, address toRewardsContract);\n', '    event StakingRewardsBalanceMigrationAccepted(address from, address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '\n', '    /// Activates staking rewards allocation\n', '    /// @dev governance function called only by the initialization admin\n', '    /// @dev On migrations, startTime should be set to the previous contract deactivation time\n', '    /// @param startTime sets the last assignment time\n', '    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n', '\n', '    /// Deactivates fees and bootstrap allocation\n', '    /// @dev governance function called only by the migration manager\n', '    /// @dev guardians updates remain active based on the current perMember value\n', '    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n', '    \n', '    /// Sets the default delegators staking reward portion\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille(0 - maxDelegatorsStakingRewardsPercentMille)\n', '    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the default delegators staking reward portion\n', '    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\n', '    function getDefaultDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n', '\n', '    /// Sets the maximum delegators staking reward portion\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille(0 - 100,000)\n', '    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the default delegators staking reward portion\n', '    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\n', '    function getMaxDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n', '\n', '    /// Sets the annual rate and cap for the staking reward\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param annualRateInPercentMille is the annual rate in percent-mille\n', '    /// @param annualCap is the annual staking rewards cap\n', '    function setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the annual staking reward rate\n', '    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\n', '    function getAnnualStakingRewardsRatePercentMille() external view returns (uint32);\n', '\n', '    /// Returns the annual staking rewards cap\n', '    /// @return annualStakingRewardsCap is the annual rate in percent-mille\n', '    function getAnnualStakingRewardsCap() external view returns (uint256);\n', '\n', '    /// Checks if rewards allocation is active\n', '    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\n', '    function isRewardAllocationActive() external view returns (bool);\n', '\n', "    /// Returns the contract's settings\n", '    /// @return annualStakingRewardsCap is the annual rate in percent-mille\n', '    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\n', '    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\n', '    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\n', '    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\n', '    function getSettings() external view returns (\n', '        uint annualStakingRewardsCap,\n', '        uint32 annualStakingRewardsRatePercentMille,\n', '        uint32 defaultDelegatorsStakingRewardsPercentMille,\n', '        uint32 maxDelegatorsStakingRewardsPercentMille,\n', '        bool rewardAllocationActive\n', '    );\n', '\n', '    /// Migrates the staking rewards balance of the given addresses to a new staking rewards contract\n', '    /// @dev The new rewards contract is determined according to the contracts registry\n', '    /// @dev No impact of the calling contract if the currently configured contract in the registry\n', '    /// @dev may be called also while the contract is locked\n', '    /// @param addrs is the list of addresses to migrate\n', '    function migrateRewardsBalance(address[] calldata addrs) external;\n', '\n', '    /// Accepts addresses balance migration from a previous rewards contract\n', '    /// @dev the function may be called by any caller that approves the amounts provided for transfer\n', '    /// @param addrs is the list migrated addresses\n', '    /// @param migratedGuardianStakingRewards is the list of received guardian rewards balance for each address\n', '    /// @param migratedDelegatorStakingRewards is the list of received delegator rewards balance for each address\n', '    /// @param totalAmount is the total amount of staking rewards migrated for all addresses in the list. Must match the sum of migratedGuardianStakingRewards and migratedDelegatorStakingRewards lists.\n', '    function acceptRewardsBalanceMigration(address[] calldata addrs, uint256[] calldata migratedGuardianStakingRewards, uint256[] calldata migratedDelegatorStakingRewards, uint256 totalAmount) external;\n', '\n', '    /// Performs emergency withdrawal of the contract balance\n', '    /// @dev called with a token to withdraw, should be called twice with the fees and bootstrap tokens\n', '    /// @dev governance function called only by the migration manager\n', '    /// @param erc20 is the ERC20 token to withdraw\n', '    function emergencyWithdraw(address erc20) external /* onlyMigrationManager */;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IManagedContract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title managed contract interface, used by the contracts registry to notify the contract on updates\n', 'interface IManagedContract /* is ILockable, IContractRegistryAccessor, Initializable */ {\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '    function refreshContracts() external;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IContractRegistry.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Contract registry contract interface\n', '/// @dev The contract registry holds Orbs PoS contracts and managers lists\n', '/// @dev The contract registry updates the managed contracts on changes in the contract list\n', '/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \n', '/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \n', '/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \n', 'interface IContractRegistry {\n', '\n', '\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\n', '\tevent ManagerChanged(string role, address newManager);\n', '\tevent ContractRegistryUpdated(address newContractRegistry);\n', '\n', '\t/*\n', '\t* External functions\n', '\t*/\n', '\n', '    /// Updates the contracts address and emits a corresponding event\n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '    /// @param contractName is the contract name, used to identify it\n', '    /// @param addr is the contract updated address\n', '    /// @param managedContract indicates whether the contract is managed by the registry and notified on changes\n', '\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\n', '\n', '    /// Returns the current address of the given contracts\n', '    /// @param contractName is the contract name, used to identify it\n', '    /// @return addr is the contract updated address\n', '\tfunction getContract(string calldata contractName) external view returns (address);\n', '\n', '    /// Returns the list of contract addresses managed by the registry\n', '    /// @dev Managed contracts are updated on changes in the registry contracts addresses \n', '    /// @return addrs is the list of managed contracts\n', '\tfunction getManagedContracts() external view returns (address[] memory);\n', '\n', '    /// Locks all the managed contracts \n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '    /// @dev When set all onlyWhenActive functions will revert\n', '\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\n', '\n', '    /// Unlocks all the managed contracts \n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\n', '\t\n', '    /// Updates a manager address and emits a corresponding event\n', '    /// @dev governance function called only by the registryAdmin\n', "    /// @dev the managers list is a flexible list of role to the manager's address\n", '    /// @param role is the managers\' role name, for example "functionalManager"\n', '    /// @param manager is the manager updated address\n', '\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\n', '\n', '    /// Returns the current address of the given manager\n', '    /// @param role is the manager name, used to identify it\n', '    /// @return addr is the manager updated address\n', '\tfunction getManager(string calldata role) external view returns (address);\n', '\n', '    /// Sets a new contract registry to migrate to\n', '    /// @dev governance function called only by the registryAdmin\n', '    /// @dev updates the registry address record in all the managed contracts\n', '    /// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\n', '    /// @param newRegistry is the new registry contract \n', '\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n', '\n', '    /// Returns the previous contract registry address \n', '    /// @dev used when the setting the contract as a new registry to assure a valid registry\n', '    /// @return previousContractRegistry is the previous contract registry\n', '\tfunction getPreviousContractRegistry() external view returns (address);\n', '}\n', '\n', '// File: contracts/spec_interfaces/IContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IContractRegistryAccessor {\n', '\n', '    /// Sets the contract registry address\n', '    /// @dev governance function called only by an admin\n', '    /// @param newRegistry is the new registry contract \n', '    function setContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n', '\n', '    /// Returns the contract registry address\n', '    /// @return contractRegistry is the contract registry address\n', '    function getContractRegistry() external view returns (IContractRegistry contractRegistry);\n', '\n', '    function setRegistryAdmin(address _registryAdmin) external /* onlyInitializationAdmin */;\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableRegistryManagement.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableRegistryManagement is Context {\n', '    address private _registryAdmin;\n', '    address private _pendingRegistryAdmin;\n', '\n', '    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _registryAdmin = msgSender;\n', '        emit RegistryManagementTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current registryAdmin.\n', '     */\n', '    function registryAdmin() public view returns (address) {\n', '        return _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the registryAdmin.\n', '     */\n', '    modifier onlyRegistryAdmin() {\n', '        require(isRegistryAdmin(), "WithClaimableRegistryManagement: caller is not the registryAdmin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current registryAdmin.\n', '     */\n', '    function isRegistryAdmin() public view returns (bool) {\n', '        return _msgSender() == _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without registryAdmin. It will not be possible to call\n', '     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\n', '     *\n', '     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\n', '     * thereby removing any functionality that is only available to the registryAdmin.\n', '     */\n', '    function renounceRegistryManagement() public onlyRegistryAdmin {\n', '        emit RegistryManagementTransferred(_registryAdmin, address(0));\n', '        _registryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\n', '     */\n', '    function _transferRegistryManagement(address newRegistryAdmin) internal {\n', '        require(newRegistryAdmin != address(0), "RegistryAdmin: new registryAdmin is the zero address");\n', '        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\n', '        _registryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingManager.\n', '     */\n', '    modifier onlyPendingRegistryAdmin() {\n', '        require(msg.sender == _pendingRegistryAdmin, "Caller is not the pending registryAdmin");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current registryAdmin to set the pendingManager address.\n', '     * @param newRegistryAdmin The address to transfer registryManagement to.\n', '     */\n', '    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\n', '        _pendingRegistryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\n', '     */\n', '    function claimRegistryManagement() external onlyPendingRegistryAdmin {\n', '        _transferRegistryManagement(_pendingRegistryAdmin);\n', '        _pendingRegistryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current pendingRegistryAdmin\n', '    */\n', '    function pendingRegistryAdmin() public view returns (address) {\n', '       return _pendingRegistryAdmin;  \n', '    }\n', '}\n', '\n', '// File: contracts/Initializable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Initializable {\n', '\n', '    address private _initializationAdmin;\n', '\n', '    event InitializationComplete();\n', '\n', '    /// Constructor\n', '    /// Sets the initializationAdmin to the contract deployer\n', '    /// The initialization admin may call any manager only function until initializationComplete\n', '    constructor() public{\n', '        _initializationAdmin = msg.sender;\n', '    }\n', '\n', '    modifier onlyInitializationAdmin() {\n', '        require(msg.sender == initializationAdmin(), "sender is not the initialization admin");\n', '\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the initializationAdmin address\n', '    function initializationAdmin() public view returns (address) {\n', '        return _initializationAdmin;\n', '    }\n', '\n', '    /// Finalizes the initialization and revokes the initializationAdmin role \n', '    function initializationComplete() external onlyInitializationAdmin {\n', '        _initializationAdmin = address(0);\n', '        emit InitializationComplete();\n', '    }\n', '\n', '    /// Checks if the initialization was completed\n', '    function isInitializationComplete() public view returns (bool) {\n', '        return _initializationAdmin == address(0);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract ContractRegistryAccessor is IContractRegistryAccessor, WithClaimableRegistryManagement, Initializable {\n', '\n', '    IContractRegistry private contractRegistry;\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\n', '        require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");\n', '        setContractRegistry(_contractRegistry);\n', '        _transferRegistryManagement(_registryAdmin);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(isAdmin(), "sender is not an admin (registryManger or initializationAdmin)");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyMigrationManager {\n', '        require(isMigrationManager(), "sender is not the migration manager");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyFunctionalManager {\n', '        require(isFunctionalManager(), "sender is not the functional manager");\n', '\n', '        _;\n', '    }\n', '\n', '    /// Checks whether the caller is Admin: either the contract registry, the registry admin, or the initialization admin\n', '    function isAdmin() internal view returns (bool) {\n', '        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\n', '    }\n', '\n', '    /// Checks whether the caller is a specific manager role or and Admin\n', '    /// @dev queries the registry contract for the up to date manager assignment\n', '    function isManager(string memory role) internal view returns (bool) {\n', '        IContractRegistry _contractRegistry = contractRegistry;\n', '        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\n', '    }\n', '\n', '    /// Checks whether the caller is the migration manager\n', '    function isMigrationManager() internal view returns (bool) {\n', "        return isManager('migrationManager');\n", '    }\n', '\n', '    /// Checks whether the caller is the functional manager\n', '    function isFunctionalManager() internal view returns (bool) {\n', "        return isManager('functionalManager');\n", '    }\n', '\n', '    /* \n', '     * Contract getters, return the address of a contract by calling the contract registry \n', '     */ \n', '\n', '    function getProtocolContract() internal view returns (address) {\n', '        return contractRegistry.getContract("protocol");\n', '    }\n', '\n', '    function getStakingRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewards");\n', '    }\n', '\n', '    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("feesAndBootstrapRewards");\n', '    }\n', '\n', '    function getCommitteeContract() internal view returns (address) {\n', '        return contractRegistry.getContract("committee");\n', '    }\n', '\n', '    function getElectionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("elections");\n', '    }\n', '\n', '    function getDelegationsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("delegations");\n', '    }\n', '\n', '    function getGuardiansRegistrationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("guardiansRegistration");\n', '    }\n', '\n', '    function getCertificationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("certification");\n', '    }\n', '\n', '    function getStakingContract() internal view returns (address) {\n', '        return contractRegistry.getContract("staking");\n', '    }\n', '\n', '    function getSubscriptionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("subscriptions");\n', '    }\n', '\n', '    function getStakingRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewardsWallet");\n', '    }\n', '\n', '    function getBootstrapRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("bootstrapRewardsWallet");\n', '    }\n', '\n', '    function getGeneralFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("generalFeesWallet");\n', '    }\n', '\n', '    function getCertifiedFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("certifiedFeesWallet");\n', '    }\n', '\n', '    function getStakingContractHandler() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingContractHandler");\n', '    }\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event ContractRegistryAddressUpdated(address addr);\n', '\n', '    /// Sets the contract registry address\n', '    /// @dev governance function called only by an admin\n', '    /// @param newContractRegistry is the new registry contract \n', '    function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {\n', '        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");\n', '        contractRegistry = newContractRegistry;\n', '        emit ContractRegistryAddressUpdated(address(newContractRegistry));\n', '    }\n', '\n', '    /// Returns the contract registry that the contract is set to use\n', '    /// @return contractRegistry is the registry contract address\n', '    function getContractRegistry() public override view returns (IContractRegistry) {\n', '        return contractRegistry;\n', '    }\n', '\n', '    function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {\n', '        _transferRegistryManagement(_registryAdmin);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/ILockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title lockable contract interface, allows to lock a contract\n', 'interface ILockable {\n', '\n', '    event Locked();\n', '    event Unlocked();\n', '\n', '    /// Locks the contract to external non-governance function calls\n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon locking all managed contracts\n', '    /// @dev getters and migration functions remain active also for locked contracts\n', '    /// @dev checked by the onlyWhenActive modifier\n', '    function lock() external /* onlyMigrationManager */;\n', '\n', '    /// Unlocks the contract \n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon unlocking all managed contracts\n', '    function unlock() external /* onlyMigrationManager */;\n', '\n', '    /// Returns the contract locking status\n', '    /// @return isLocked is a bool indicating the contract is locked \n', '    function isLocked() view external returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/Lockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/// @title lockable contract\n', 'contract Lockable is ILockable, ContractRegistryAccessor {\n', '\n', '    bool public locked;\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\n', '\n', '    /// Locks the contract to external non-governance function calls\n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon locking all managed contracts\n', '    /// @dev getters and migration functions remain active also for locked contracts\n', '    /// @dev checked by the onlyWhenActive modifier\n', '    function lock() external override onlyMigrationManager {\n', '        locked = true;\n', '        emit Locked();\n', '    }\n', '\n', '    /// Unlocks the contract \n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon unlocking all managed contracts\n', '    function unlock() external override onlyMigrationManager {\n', '        locked = false;\n', '        emit Unlocked();\n', '    }\n', '\n', '    /// Returns the contract locking status\n', '    /// @return isLocked is a bool indicating the contract is locked \n', '    function isLocked() external override view returns (bool) {\n', '        return locked;\n', '    }\n', '\n', '    modifier onlyWhenActive() {\n', '        require(!locked, "contract is locked for this operation");\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/ManagedContract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/// @title managed contract\n', 'contract ManagedContract is IManagedContract, Lockable {\n', '\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '    function refreshContracts() virtual override external {}\n', '\n', '}\n', '\n', '// File: contracts/Delegations.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Delegations contract\n', 'contract Delegations is IDelegations, IStakeChangeNotifier, ManagedContract {\n', '\tusing SafeMath for uint256;\n', '\tusing SafeMath96 for uint96;\n', '\n', '\taddress constant public VOID_ADDR = address(-1);\n', '\n', '\tstruct StakeOwnerData {\n', '\t\taddress delegation;\n', '\t\tuint96 stake;\n', '\t}\n', '\tmapping(address => StakeOwnerData) public stakeOwnersData;\n', '\tmapping(address => uint256) public uncappedDelegatedStake;\n', '\n', '\tuint256 totalDelegatedStake;\n', '\n', '\tstruct DelegateStatus {\n', '\t\taddress addr;\n', '\t\tuint256 uncappedDelegatedStake;\n', '\t\tbool isSelfDelegating;\n', '\t\tuint256 delegatedStake;\n', '\t\tuint96 selfDelegatedStake;\n', '\t}\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin) ManagedContract(_contractRegistry, _registryAdmin) public {\n', '\t\taddress VOID_ADDRESS_DUMMY_DELEGATION = address(-2);\n', '\t\tassert(VOID_ADDR != VOID_ADDRESS_DUMMY_DELEGATION && VOID_ADDR != address(0) && VOID_ADDRESS_DUMMY_DELEGATION != address(0));\n', '\t\tstakeOwnersData[VOID_ADDR].delegation = VOID_ADDRESS_DUMMY_DELEGATION;\n', '\t}\n', '\n', '\tmodifier onlyStakingContractHandler() {\n', '\t\trequire(msg.sender == address(stakingContractHandler), "caller is not the staking contract handler");\n', '\n', '\t\t_;\n', '\t}\n', '\n', '\t/*\n', '\t* External functions\n', '\t*/\n', '\n', '    /// Delegate your stake\n', '    /// @dev updates the election contract on the changes in the delegated stake\n', "    /// @dev updates the rewards contract on the upcoming change in the delegator's delegation state\n", '    /// @param to is the address to delegate to\n', '\tfunction delegate(address to) external override onlyWhenActive {\n', '\t\tdelegateFrom(msg.sender, to);\n', '\t}\n', '\n', '    /// Refresh the address stake for delegation power based on the staking contract\n', '    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\n', '    /// @dev refreshStake re-syncs the stake data with the staking contract\n', '    /// @param addr is the address to refresh its stake\n', '\tfunction refreshStake(address addr) external override onlyWhenActive {\n', '\t\t_stakeChange(addr, stakingContractHandler.getStakeBalanceOf(addr));\n', '\t}\n', '\n', '    /// Refresh the addresses stake for delegation power based on the staking contract\n', '    /// @dev Batched version of refreshStake\n', '    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\n', '    /// @dev refreshStakeBatch re-syncs the stake data with the staking contract\n', '    /// @param addrs is the list of addresses to refresh their stake\n', '\tfunction refreshStakeBatch(address[] calldata addrs) external override onlyWhenActive {\n', '\t\tfor (uint i = 0; i < addrs.length; i++) {\n', '\t\t\t_stakeChange(addrs[i], stakingContractHandler.getStakeBalanceOf(addrs[i]));\n', '\t\t}\n', '\t}\n', '\n', '    /// Returns the delegate address of the given address\n', '    /// @param addr is the address to query\n', '    /// @return delegation is the address the addr delegated to\n', '\tfunction getDelegation(address addr) external override view returns (address) {\n', '\t\treturn getStakeOwnerData(addr).delegation;\n', '\t}\n', '\n', '    /// Returns a delegator info\n', '    /// @param addr is the address to query\n', '    /// @return delegation is the address the addr delegated to\n', '    /// @return delegatorStake is the stake of the delegator as reflected in the delegation contract\n', '\tfunction getDelegationInfo(address addr) external override view returns (address delegation, uint256 delegatorStake) {\n', '\t\tStakeOwnerData memory data = getStakeOwnerData(addr);\n', '\t\treturn (data.delegation, data.stake);\n', '\t}\n', '\n', '    /// Returns the delegated stake of an addr \n', '    /// @dev an address that is not self delegating has a 0 delegated stake\n', '    /// @param addr is the address to query\n', '    /// @return delegatedStake is the address delegated stake\n', '\tfunction getDelegatedStake(address addr) external override view returns (uint256) {\n', '\t\treturn getDelegateStatus(addr).delegatedStake;\n', '\t}\n', '\n', '    /// Returns the total delegated stake\n', '    /// @dev delegatedStake - the total stake delegated to an address that is self delegating\n', '    /// @dev the delegated stake of a non self-delegated address is 0\n', '    /// @return totalDelegatedStake is the total delegatedStake of all the addresses\n', '\tfunction getTotalDelegatedStake() external override view returns (uint256) {\n', '\t\treturn totalDelegatedStake;\n', '\t}\n', '\n', '\t/*\n', '\t* Notifications from staking contract (IStakeChangeNotifier)\n', '\t*/\n', '\n', '    /// Notifies of stake change event.\n', '    /// @param _stakeOwner is the address of the subject stake owner.\n', '    /// @param _updatedStake is the updated total staked amount.\n', '\tfunction stakeChange(address _stakeOwner, uint256, bool, uint256 _updatedStake) external override onlyStakingContractHandler onlyWhenActive {\n', '\t\t_stakeChange(_stakeOwner, _updatedStake);\n', '\t}\n', '\n', '    /// Notifies of multiple stake change events.\n', '    /// @param _stakeOwners is the addresses of subject stake owners.\n', '    /// @param _amounts is the differences in total staked amounts.\n', '    /// @param _signs is the signs of the added (true) or subtracted (false) amounts.\n', '    /// @param _updatedStakes is the updated total staked amounts.\n', '\tfunction stakeChangeBatch(address[] calldata _stakeOwners, uint256[] calldata _amounts, bool[] calldata _signs, uint256[] calldata _updatedStakes) external override onlyStakingContractHandler onlyWhenActive {\n', '\t\tuint batchLength = _stakeOwners.length;\n', '\t\trequire(batchLength == _amounts.length, "_stakeOwners, _amounts - array length mismatch");\n', '\t\trequire(batchLength == _signs.length, "_stakeOwners, _signs - array length mismatch");\n', '\t\trequire(batchLength == _updatedStakes.length, "_stakeOwners, _updatedStakes - array length mismatch");\n', '\n', '\t\tfor (uint i = 0; i < _stakeOwners.length; i++) {\n', '\t\t\t_stakeChange(_stakeOwners[i], _updatedStakes[i]);\n', '\t\t}\n', '\t}\n', '\n', '    /// Notifies of stake migration event.\n', '    /// @dev Empty function. A staking contract migration may be handled in the future in the StakingContractHandler \n', '    /// @param _stakeOwner address The address of the subject stake owner.\n', '    /// @param _amount uint256 The migrated amount.\n', '\tfunction stakeMigration(address _stakeOwner, uint256 _amount) external override onlyStakingContractHandler onlyWhenActive {}\n', '\n', '\t/*\n', '\t* Governance functions\n', '\t*/\n', '\n', '    /// Imports delegations during initial migration\n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev Does not update the Rewards or Election contracts\n', '    /// @dev assumes deactivated Rewards\n', '    /// @param from is a list of delegator addresses\n', '    /// @param to is the address the delegators delegate to\n', '\tfunction importDelegations(address[] calldata from, address to) external override onlyInitializationAdmin {\n', '\t\trequire(to != address(0), "to must be a non zero address");\n', '\t\trequire(from.length > 0, "from array must contain at least one address");\n', '\t\t(uint96 stakingRewardsPerWeight, ) = stakingRewardsContract.getStakingRewardsState();\n', '\t\trequire(stakingRewardsPerWeight == 0, "no rewards may be allocated prior to importing delegations");\n', '\n', '\t\tuint256 uncappedDelegatedStakeDelta = 0;\n', '\t\tStakeOwnerData memory data;\n', '\t\tuint256 newTotalDelegatedStake = totalDelegatedStake;\n', '\t\tDelegateStatus memory delegateStatus = getDelegateStatus(to);\n', '\t\tIStakingContractHandler _stakingContractHandler = stakingContractHandler;\n', '\t\tuint256 delegatorUncapped;\n', '\t\tuint256[] memory delegatorsStakes = new uint256[](from.length);\n', '\t\tfor (uint i = 0; i < from.length; i++) {\n', '\t\t\tdata = stakeOwnersData[from[i]];\n', '\t\t\trequire(data.delegation == address(0), "import allowed only for uninitialized accounts. existing delegation detected");\n', '\t\t\trequire(from[i] != to, "import cannot be used for self-delegation (already self delegated)");\n', '\t\t\trequire(data.stake == 0 , "import allowed only for uninitialized accounts. existing stake detected");\n', '\n', '\t\t\t// from[i] stops being self delegating. any uncappedDelegatedStake it has now stops being counted towards totalDelegatedStake\n', '\t\t\tdelegatorUncapped = uncappedDelegatedStake[from[i]];\n', '\t\t\tif (delegatorUncapped > 0) {\n', '\t\t\t\tnewTotalDelegatedStake = newTotalDelegatedStake.sub(delegatorUncapped);\n', '\t\t\t\temit DelegatedStakeChanged(\n', '\t\t\t\t\tfrom[i],\n', '\t\t\t\t\t0,\n', '\t\t\t\t\t0,\n', '\t\t\t\t\tfrom[i],\n', '\t\t\t\t\t0\n', '\t\t\t\t);\n', '\t\t\t}\n', '\n', '\t\t\t// update state\n', '\t\t\tdata.delegation = to;\n', '\t\t\tdata.stake = uint96(_stakingContractHandler.getStakeBalanceOf(from[i]));\n', '\t\t\tstakeOwnersData[from[i]] = data;\n', '\n', '\t\t\tuncappedDelegatedStakeDelta = uncappedDelegatedStakeDelta.add(data.stake);\n', '\n', '\t\t\t// store individual stake for event\n', '\t\t\tdelegatorsStakes[i] = data.stake;\n', '\n', '\t\t\temit Delegated(from[i], to);\n', '\n', '\t\t\temit DelegatedStakeChanged(\n', '\t\t\t\tto,\n', '\t\t\t\tdelegateStatus.selfDelegatedStake,\n', '\t\t\t\tdelegateStatus.isSelfDelegating ? delegateStatus.delegatedStake.add(uncappedDelegatedStakeDelta) : 0,\n', '\t\t\t\tfrom[i],\n', '\t\t\t\tdata.stake\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\t// update totals\n', '\t\tuncappedDelegatedStake[to] = uncappedDelegatedStake[to].add(uncappedDelegatedStakeDelta);\n', '\n', '\t\tif (delegateStatus.isSelfDelegating) {\n', '\t\t\tnewTotalDelegatedStake = newTotalDelegatedStake.add(uncappedDelegatedStakeDelta);\n', '\t\t}\n', '\t\ttotalDelegatedStake = newTotalDelegatedStake;\n', '\n', '\t\t// emit events\n', '\t\temit DelegationsImported(from, to);\n', '\t}\n', '\n', '    /// Initializes the delegation of an address during initial migration \n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev behaves identically to a delegate transaction sent by the delegator\n', '    /// @param from is the delegator addresses\n', '    /// @param to is the delegator delegates to\n', '\tfunction initDelegation(address from, address to) external override onlyInitializationAdmin {\n', '\t\tdelegateFrom(from, to);\n', '\t\temit DelegationInitialized(from, to);\n', '\t}\n', '\n', '\t/*\n', '\t* Private functions\n', '\t*/\n', '\n', '    /// Generates and returns an internal memory structure with a Delegate status\n', '    /// @dev updated based on the up to date state\n', '    /// @dev status.addr is the queried address\n', '    /// @dev status.uncappedDelegatedStake is the amount delegated to address including self-delegated stake\n', '    /// @dev status.isSelfDelegating indicates whether the address is self-delegated\n', '    /// @dev status.selfDelegatedStake if the addr is self-delegated is  the addr self stake. 0 if not self-delegated\n', '    /// @dev status.delegatedStake if the addr is self-delegated is the mount delegated to address. 0 if not self-delegated\n', '\tfunction getDelegateStatus(address addr) private view returns (DelegateStatus memory status) {\n', '\t\tStakeOwnerData memory data = getStakeOwnerData(addr);\n', '\n', '\t\tstatus.addr = addr;\n', '\t\tstatus.uncappedDelegatedStake = uncappedDelegatedStake[addr];\n', '\t\tstatus.isSelfDelegating = data.delegation == addr;\n', '\t\tstatus.selfDelegatedStake = status.isSelfDelegating ? data.stake : 0;\n', '\t\tstatus.delegatedStake = status.isSelfDelegating ? status.uncappedDelegatedStake : 0;\n', '\n', '\t\treturn status;\n', '\t}\n', '\n', '    /// Returns an address stake and delegation data. \n', '    /// @dev implicitly self-delegated addresses (delegation = 0) return delegation to the address\n', '\tfunction getStakeOwnerData(address addr) private view returns (StakeOwnerData memory data) {\n', '\t\tdata = stakeOwnersData[addr];\n', '\t\tdata.delegation = (data.delegation == address(0)) ? addr : data.delegation;\n', '\t\treturn data;\n', '\t}\n', '\n', '\tstruct DelegateFromVars {\n', '\t\tDelegateStatus prevDelegateStatusBefore;\n', '\t\tDelegateStatus newDelegateStatusBefore;\n', '\t\tDelegateStatus prevDelegateStatusAfter;\n', '\t\tDelegateStatus newDelegateStatusAfter;\n', '\t}\n', '\n', '    /// Handles a delegation change\n', '    /// @dev notifies the rewards contract on the expected change (with data prior to the change)\n', '    /// @dev updates the impacted delegates delegated stake and the total stake\n', '    /// @dev notifies the election contract on changes in the impacted delegates delegated stake\n', '    /// @param from is the delegator address \n', '    /// @param to is the delegate address\n', '\tfunction delegateFrom(address from, address to) private {\n', '\t\trequire(to != address(0), "cannot delegate to a zero address");\n', '\n', '\t\tDelegateFromVars memory vars;\n', '\n', '\t\tStakeOwnerData memory delegatorData = getStakeOwnerData(from);\n', '\t\taddress prevDelegate = delegatorData.delegation;\n', '\n', "\t\tif (to == prevDelegate) return; // Delegation hasn't changed\n", '\n', '\t\t// Optimization - no need for the full flow in the case of a zero staked delegator with no delegations\n', '\t\tif (delegatorData.stake == 0 && uncappedDelegatedStake[from] == 0) {\n', '\t\t\tstakeOwnersData[from].delegation = to;\n', '\t\t\temit Delegated(from, to);\n', '\t\t\treturn;\n', '\t\t}\n', '\n', '\t\tvars.prevDelegateStatusBefore = getDelegateStatus(prevDelegate);\n', '\t\tvars.newDelegateStatusBefore = getDelegateStatus(to);\n', '\n', '\t\tstakingRewardsContract.delegationWillChange(prevDelegate, vars.prevDelegateStatusBefore.delegatedStake, from, delegatorData.stake, to, vars.newDelegateStatusBefore.delegatedStake);\n', '\n', '\t\tstakeOwnersData[from].delegation = to;\n', '\n', '\t\tuint256 delegatorStake = delegatorData.stake;\n', '\n', '\t\tuncappedDelegatedStake[prevDelegate] = vars.prevDelegateStatusBefore.uncappedDelegatedStake.sub(delegatorStake);\n', '\t\tuncappedDelegatedStake[to] = vars.newDelegateStatusBefore.uncappedDelegatedStake.add(delegatorStake);\n', '\n', '\t\tvars.prevDelegateStatusAfter = getDelegateStatus(prevDelegate);\n', '\t\tvars.newDelegateStatusAfter = getDelegateStatus(to);\n', '\n', '\t\tuint256 _totalDelegatedStake = totalDelegatedStake.sub(\n', '\t\t\tvars.prevDelegateStatusBefore.delegatedStake\n', '\t\t).add(\n', '\t\t\tvars.prevDelegateStatusAfter.delegatedStake\n', '\t\t).sub(\n', '\t\t\tvars.newDelegateStatusBefore.delegatedStake\n', '\t\t).add(\n', '\t\t\tvars.newDelegateStatusAfter.delegatedStake\n', '\t\t);\n', '\n', '\t\ttotalDelegatedStake = _totalDelegatedStake;\n', '\n', '\t\temit Delegated(from, to);\n', '\n', '\t\tIElections _electionsContract = electionsContract;\n', '\n', '\t\tif (vars.prevDelegateStatusBefore.delegatedStake != vars.prevDelegateStatusAfter.delegatedStake) {\n', '\t\t\t_electionsContract.delegatedStakeChange(\n', '\t\t\t\tprevDelegate,\n', '\t\t\t\tvars.prevDelegateStatusAfter.selfDelegatedStake,\n', '\t\t\t\tvars.prevDelegateStatusAfter.delegatedStake,\n', '\t\t\t\t_totalDelegatedStake\n', '\t\t\t);\n', '\n', '\t\t\temit DelegatedStakeChanged(\n', '\t\t\t\tprevDelegate,\n', '\t\t\t\tvars.prevDelegateStatusAfter.selfDelegatedStake,\n', '\t\t\t\tvars.prevDelegateStatusAfter.delegatedStake,\n', '\t\t\t\tfrom,\n', '\t\t\t\t0\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\tif (vars.newDelegateStatusBefore.delegatedStake != vars.newDelegateStatusAfter.delegatedStake) {\n', '\t\t\t_electionsContract.delegatedStakeChange(\n', '\t\t\t\tto,\n', '\t\t\t\tvars.newDelegateStatusAfter.selfDelegatedStake,\n', '\t\t\t\tvars.newDelegateStatusAfter.delegatedStake,\n', '\t\t\t\t_totalDelegatedStake\n', '\t\t\t);\n', '\n', '\t\t\temit DelegatedStakeChanged(\n', '\t\t\t\tto,\n', '\t\t\t\tvars.newDelegateStatusAfter.selfDelegatedStake,\n', '\t\t\t\tvars.newDelegateStatusAfter.delegatedStake,\n', '\t\t\t\tfrom,\n', '\t\t\t\tdelegatorStake\n', '\t\t\t);\n', '\t\t}\n', '\t}\n', '\n', '    /// Handles a change in a stake owner stake\n', '    /// @dev notifies the rewards contract on the expected change (with data prior to the change)\n', '    /// @dev updates the impacted delegate delegated stake and the total stake\n', '    /// @dev notifies the election contract on changes in the impacted delegate delegated stake\n', '    /// @param _stakeOwner is the stake owner\n', '    /// @param _updatedStake is the stake owner stake after the change\n', '\tfunction _stakeChange(address _stakeOwner, uint256 _updatedStake) private {\n', '\t\tStakeOwnerData memory stakeOwnerDataBefore = getStakeOwnerData(_stakeOwner);\n', '\t\tDelegateStatus memory delegateStatusBefore = getDelegateStatus(stakeOwnerDataBefore.delegation);\n', '\n', '\t\tuint256 prevUncappedStake = delegateStatusBefore.uncappedDelegatedStake;\n', '\t\tuint256 newUncappedStake = prevUncappedStake.sub(stakeOwnerDataBefore.stake).add(_updatedStake);\n', '\n', '\t\tstakingRewardsContract.delegationWillChange(stakeOwnerDataBefore.delegation, delegateStatusBefore.delegatedStake, _stakeOwner, stakeOwnerDataBefore.stake, stakeOwnerDataBefore.delegation, delegateStatusBefore.delegatedStake);\n', '\n', '\t\tuncappedDelegatedStake[stakeOwnerDataBefore.delegation] = newUncappedStake;\n', '\n', '\t\trequire(uint256(uint96(_updatedStake)) == _updatedStake, "Delegations::updatedStakes value too big (>96 bits)");\n', '\t\tstakeOwnersData[_stakeOwner].stake = uint96(_updatedStake);\n', '\n', '\t\tuint256 _totalDelegatedStake = totalDelegatedStake;\n', '\t\tif (delegateStatusBefore.isSelfDelegating) {\n', '\t\t\t_totalDelegatedStake = _totalDelegatedStake.sub(stakeOwnerDataBefore.stake).add(_updatedStake);\n', '\t\t\ttotalDelegatedStake = _totalDelegatedStake;\n', '\t\t}\n', '\n', '\t\tDelegateStatus memory delegateStatusAfter = getDelegateStatus(stakeOwnerDataBefore.delegation);\n', '\n', '\t\telectionsContract.delegatedStakeChange(\n', '\t\t\tstakeOwnerDataBefore.delegation,\n', '\t\t\tdelegateStatusAfter.selfDelegatedStake,\n', '\t\t\tdelegateStatusAfter.delegatedStake,\n', '\t\t\t_totalDelegatedStake\n', '\t\t);\n', '\n', '\t\tif (_updatedStake != stakeOwnerDataBefore.stake) {\n', '\t\t\temit DelegatedStakeChanged(\n', '\t\t\t\tstakeOwnerDataBefore.delegation,\n', '\t\t\t\tdelegateStatusAfter.selfDelegatedStake,\n', '\t\t\t\tdelegateStatusAfter.delegatedStake,\n', '\t\t\t\t_stakeOwner,\n', '\t\t\t\t_updatedStake\n', '\t\t\t);\n', '\t\t}\n', '\t}\n', '\n', '\t/*\n', '     * Contracts topology / registry interface\n', '     */\n', '\n', '\tIElections electionsContract;\n', '\tIStakingRewards stakingRewardsContract;\n', '\tIStakingContractHandler stakingContractHandler;\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '\tfunction refreshContracts() external override {\n', '\t\telectionsContract = IElections(getElectionsContract());\n', '\t\tstakingContractHandler = IStakingContractHandler(getStakingContractHandler());\n', '\t\tstakingRewardsContract = IStakingRewards(getStakingRewardsContract());\n', '\t}\n', '\n', '}']