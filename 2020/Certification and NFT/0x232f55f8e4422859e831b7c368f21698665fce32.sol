['pragma solidity 0.6.6;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', 'interface Aggregator {\n', '    function latestAnswer() external view returns(uint256);\n', '    function latestTimestamp() external view returns(uint256);\n', '}\n', '\n', '\n', 'contract OracleResolver {\n', '    using Address for address;\n', '\n', '    Aggregator aggr;\n', '\n', '    uint256 internal constant expiration = 3 hours;\n', '\n', '    constructor() public {\n', '        if (address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419).isContract()) {\n', '            // mainnet\n', '            aggr = Aggregator(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '        } else revert();\n', '    }\n', '\n', '    function ethUsdPrice() public view returns (uint256) {\n', '        require(now < aggr.latestTimestamp() + expiration, "Oracle data are outdated");\n', '        return aggr.latestAnswer() / 1000;\n', '    }\n', '}']