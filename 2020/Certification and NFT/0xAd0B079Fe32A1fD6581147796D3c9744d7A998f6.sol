['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/hardworkInterface/IVault.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'interface IVault {\n', '    // the IERC20 part is the share\n', '\n', '    function underlyingBalanceInVault() external view returns (uint256);\n', '    function underlyingBalanceWithInvestment() external view returns (uint256);\n', '\n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function strategy() external view returns (address);\n', '\n', '    function setStrategy(address _strategy) external;\n', '    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\n', '\n', '    function deposit(uint256 amountWei) external;\n', '    function depositFor(uint256 amountWei, address holder) external;\n', '\n', '    function withdrawAll() external;\n', '    function withdraw(uint256 numberOfShares) external;\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\n', '\n', '    // hard work should be callable only by the controller (by the hard worker) or by governance\n', '    function doHardWork() external;\n', '    function rebalance() external;\n', '}\n', '\n', '// File: contracts/Storage.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract Storage {\n', '\n', '  address public governance;\n', '  address public controller;\n', '\n', '  constructor() public {\n', '    governance = msg.sender;\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setGovernance(address _governance) public onlyGovernance {\n', '    require(_governance != address(0), "new governance shouldn\'t be empty");\n', '    governance = _governance;\n', '  }\n', '\n', '  function setController(address _controller) public onlyGovernance {\n', '    require(_controller != address(0), "new controller shouldn\'t be empty");\n', '    controller = _controller;\n', '  }\n', '\n', '  function isGovernance(address account) public view returns (bool) {\n', '    return account == governance;\n', '  }\n', '\n', '  function isController(address account) public view returns (bool) {\n', '    return account == controller;\n', '  }\n', '}\n', '\n', '// File: contracts/Governable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Governable {\n', '\n', '  Storage public store;\n', '\n', '  constructor(address _store) public {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(store.isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setStorage(address _store) public onlyGovernance {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  function governance() public view returns (address) {\n', '    return store.governance();\n', '  }\n', '}\n', '\n', '// File: contracts/Controllable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Controllable is Governable {\n', '\n', '  constructor(address _storage) Governable(_storage) public {\n', '  }\n', '\n', '  modifier onlyController() {\n', '    require(store.isController(msg.sender), "Not a controller");\n', '    _;\n', '  }\n', '\n', '  modifier onlyControllerOrGovernance(){\n', '    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\n', '      "The caller must be controller or governance");\n', '    _;\n', '  }\n', '\n', '  function controller() public view returns (address) {\n', '    return store.controller();\n', '  }\n', '}\n', '\n', '// File: contracts/StrategySwitchHelper.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', 'contract StrategySwitchHelper is Controllable {\n', '\n', '  constructor(address _storage)\n', '  Controllable(_storage) public {}\n', '\n', '  /**\n', '    This contract is used to do withdraw and reinvest atomically to prevent arbitrage. \n', '  */\n', '  function setStrategyDoHardWork(address vault, address newStrategy) external onlyGovernance {\n', '    IVault(vault).setStrategy(newStrategy);\n', '    IVault(vault).doHardWork();\n', '  }\n', '\n', '}']