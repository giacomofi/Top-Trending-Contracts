['pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '  abstract contract ILendingPool {\n', '    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\n', '    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\n', '\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\n', '\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\n', '\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\n', '\tfunction swapBorrowRateMode(address _reserve) external virtual;\n', '    function getReserves() external virtual view returns(address[] memory);\n', '\n', '    /// @param _reserve underlying token address\n', '    function getReserveData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidity,               // reserve total liquidity\n', '            uint256 availableLiquidity,           // reserve available liquidity for borrowing\n', '            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\n', '            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\n', '            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\n', '            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\n', '            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\n', '            uint256 averageStableBorrowRate,      // current average stable borrow rate\n', '            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\n', '            uint256 liquidityIndex,               // cumulative liquidity index\n', '            uint256 variableBorrowIndex,          // cumulative variable borrow index\n', '            address aTokenAddress,                // aTokens contract address for the specific _reserve\n', '            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\n', '        );\n', '\n', '    /// @param _user users address\n', '    function getUserAccountData(address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\n', '            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\n', '            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\n', '            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\n', '            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\n', '            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\n', '            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\n', '            uint256 healthFactor                  // user current Health Factor\n', '    );    \n', '\n', '    /// @param _reserve underlying token address\n', '    /// @param _user users address\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,         // user current reserve aToken balance\n', '            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\n', '            uint256 principalBorrowBalance,       // user balance of borrowed asset\n', '            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\n', '            uint256 borrowRate,                   // user current borrow rate APY\n', '            uint256 liquidityRate,                // user current earn rate on _reserve\n', '            uint256 originationFee,               // user outstanding loan origination fee\n', '            uint256 variableBorrowIndex,          // user variable cumulative index\n', '            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\n', "            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\n", '    );\n', '\n', '    function getReserveConfigurationData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            address rateStrategyAddress,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive\n', '    );\n', '\n', '    // ------------------ LendingPoolCoreData ------------------------\n', '    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\n', '    function getReserveConfiguration(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (uint256, uint256, uint256, bool);\n', '    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    function getReserveCurrentLiquidityRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentVariableBorrowRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentStableBorrowRate(address _reserve) \n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveAvailableLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalBorrowsVariable(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    // ---------------- LendingPoolDataProvider ---------------------\n', '    function calculateUserGlobalData(address _user)\n', '        public virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityBalanceETH,\n', '            uint256 totalCollateralBalanceETH,\n', '            uint256 totalBorrowBalanceETH,\n', '            uint256 totalFeesETH,\n', '            uint256 currentLtv,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 healthFactor,\n', '            bool healthFactorBelowThreshold\n', '        );\n', '}  interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  abstract contract CTokenInterface is ERC20 {\n', '    function mint(uint256 mintAmount) external virtual returns (uint256);\n', '\n', '    // function mint() external virtual payable;\n', '\n', '    function accrueInterest() public virtual returns (uint);\n', '\n', '    function redeem(uint256 redeemTokens) external virtual returns (uint256);\n', '\n', '    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n', '\n', '    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrow() external virtual payable;\n', '\n', '    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrowBehalf(address borrower) external virtual payable;\n', '\n', '    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n', '        external virtual\n', '        returns (uint256);\n', '\n', '    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\n', '\n', '    function exchangeRateCurrent() external virtual returns (uint256);\n', '\n', '    function supplyRatePerBlock() external virtual returns (uint256);\n', '\n', '    function borrowRatePerBlock() external virtual returns (uint256);\n', '\n', '    function totalReserves() external virtual returns (uint256);\n', '\n', '    function reserveFactorMantissa() external virtual returns (uint256);\n', '\n', '    function borrowBalanceCurrent(address account) external virtual returns (uint256);\n', '\n', '    function totalBorrowsCurrent() external virtual returns (uint256);\n', '\n', '    function getCash() external virtual returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n', '\n', '    function underlying() external virtual returns (address);\n', '\n', '    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\n', '}  abstract contract ILoanShifter {\n', '    function getLoanAmount(uint, address) public virtual returns (uint);\n', '    function getUnderlyingAsset(address _addr) public view virtual returns (address);\n', '}  abstract contract DSProxyInterface {\n', '\n', "    /// Truffle wont compile if this isn't commented\n", '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public virtual\n', '    //     payable\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public virtual payable returns (bool);\n', '\n', '    function owner() public virtual returns (address);\n', '}  abstract contract Vat {\n', '\n', '    struct Urn {\n', '        uint256 ink;   // Locked Collateral  [wad]\n', '        uint256 art;   // Normalised Debt    [wad]\n', '    }\n', '\n', '    struct Ilk {\n', '        uint256 Art;   // Total Normalised Debt     [wad]\n', '        uint256 rate;  // Accumulated Rates         [ray]\n', '        uint256 spot;  // Price with Safety Margin  [ray]\n', '        uint256 line;  // Debt Ceiling              [rad]\n', '        uint256 dust;  // Urn Debt Floor            [rad]\n', '    }\n', '\n', '    mapping (bytes32 => mapping (address => Urn )) public urns;\n', '    mapping (bytes32 => Ilk)                       public ilks;\n', '    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n', '\n', '    function can(address, address) virtual public view returns (uint);\n', '    function dai(address) virtual public view returns (uint);\n', '    function frob(bytes32, address, address, address, int, int) virtual public;\n', '    function hope(address) virtual public;\n', '    function move(address, address, uint) virtual public;\n', '    function fork(bytes32, address, address, int, int) virtual public;\n', '}  abstract contract Manager {\n', '    function last(address) virtual public returns (uint);\n', '    function cdpCan(address, uint, address) virtual public view returns (uint);\n', '    function ilks(uint) virtual public view returns (bytes32);\n', '    function owns(uint) virtual public view returns (address);\n', '    function urns(uint) virtual public view returns (address);\n', '    function vat() virtual public view returns (address);\n', '    function open(bytes32, address) virtual public returns (uint);\n', '    function give(uint, address) virtual public;\n', '    function cdpAllow(uint, address, uint) virtual public;\n', '    function urnAllow(address, uint) virtual public;\n', '    function frob(uint, int, int) virtual public;\n', '    function flux(uint, address, uint) virtual public;\n', '    function move(uint, address, uint) virtual public;\n', '    function exit(address, uint, address, uint) virtual public;\n', '    function quit(uint, address) virtual public;\n', '    function enter(address, uint) virtual public;\n', '    function shift(uint, uint) virtual public;\n', '}  abstract contract IMCDSubscriptions {\n', '    function unsubscribe(uint256 _cdpId) external virtual ;\n', '    function subscribersPos(uint256 _cdpId) external virtual returns (uint256, bool);\n', '}  abstract contract ICompoundSubscriptions {\n', '    function unsubscribe() external virtual ;\n', '}  library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '}  abstract contract DSGuard {\n', '    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\n', '\n', '    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function permit(address src, address dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(address src, address dst, bytes32 sig) public virtual;\n', '}\n', '\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '}  abstract contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n', '}  contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}  contract ProxyPermission {\n', '    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n', '\n', '    /// @notice Called in the context of DSProxy to authorize an address\n', '    /// @param _contractAddr Address which will be authorized\n', '    function givePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        DSGuard guard = DSGuard(currAuthority);\n', '\n', '        if (currAuthority == address(0)) {\n', '            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n', '            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n', '        }\n', '\n', '        guard.permit(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    /// @notice Called in the context of DSProxy to remove authority of an address\n', '    /// @param _contractAddr Auth address which will be removed from authority list\n', '    function removePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        \n', "        // if there is no authority, that means that contract doesn't have permission\n", '        if (currAuthority == address(0)) {\n', '            return;\n', '        }\n', '\n', '        DSGuard guard = DSGuard(currAuthority);\n', '        guard.forbid(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    function proxyOwner() internal returns(address) {\n', '        return DSAuth(address(this)).owner();\n', '    } \n', '}  contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}  abstract contract TokenInterface {\n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(address, address, uint256) public virtual returns (bool);\n', '\n', '    function deposit() public virtual payable;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  interface ExchangeInterfaceV2 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount) external payable returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount) external payable returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\n', '}  contract ZrxAllowlist is AdminAuth {\n', '\n', '    mapping (address => bool) public zrxAllowlist;\n', '    mapping(address => bool) private nonPayableAddrs;\n', '\n', '    constructor() public {\n', '        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\n', '        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\n', '        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n', '        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '\n', '        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '    }\n', '\n', '    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n', '        zrxAllowlist[_zrxAddr] = _state;\n', '    }\n', '\n', '    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n', '        return zrxAllowlist[_zrxAddr];\n', '    }\n', '\n', '    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = true;\n', '\t}\n', '\n', '\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = false;\n', '\t}\n', '\n', '\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\n', '\t\treturn nonPayableAddrs[_addr];\n', '\t}\n', '}  contract Discount {\n', '    address public owner;\n', '    mapping(address => CustomServiceFee) public serviceFees;\n', '\n', '    uint256 constant MAX_SERVICE_FEE = 400;\n', '\n', '    struct CustomServiceFee {\n', '        bool active;\n', '        uint256 amount;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isCustomFeeSet(address _user) public view returns (bool) {\n', '        return serviceFees[_user].active;\n', '    }\n', '\n', '    function getCustomServiceFee(address _user) public view returns (uint256) {\n', '        return serviceFees[_user].amount;\n', '    }\n', '\n', '    function setServiceFee(address _user, uint256 _fee) public {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n', '    }\n', '\n', '    function disableServiceFee(address _user) public {\n', '        require(msg.sender == owner, "Only owner");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n', '    }\n', '}  contract SaverExchangeHelper {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n', '\n', '    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n', '    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n', '\n', '\n', '    function getDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == KYBER_ETH_ADDRESS) return 18;\n', '\n', '        return ERC20(_token).decimals();\n', '    }\n', '\n', '    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n', '        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n', '            balance = address(this).balance;\n', '        } else {\n', '            balance = ERC20(_tokenAddr).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function approve0xProxy(address _tokenAddr, uint _amount) internal {\n', '        if (_tokenAddr != KYBER_ETH_ADDRESS) {\n', '            ERC20(_tokenAddr).safeApprove(address(ERC20_PROXY_0X), _amount);\n', '        }\n', '    }\n', '\n', '    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n', '        // send back any leftover ether or tokens\n', '        if (address(this).balance > 0) {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '\n', '        if (getBalance(_srcAddr) > 0) {\n', '            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n', '        }\n', '\n', '        if (getBalance(_destAddr) > 0) {\n', '            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n', '        }\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '}  contract SaverExchangeRegistry is AdminAuth {\n', '\n', '\tmapping(address => bool) private wrappers;\n', '\n', '\tconstructor() public {\n', '\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\n', '\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\n', '\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\n', '\t}\n', '\n', '\tfunction addWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = true;\n', '\t}\n', '\n', '\tfunction removeWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = false;\n', '\t}\n', '\n', '\tfunction isWrapper(address _wrapper) public view returns(bool) {\n', '\t\treturn wrappers[_wrapper];\n', '\t}\n', '} \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SaverExchangeCore is SaverExchangeHelper, DSMath {\n', '\n', '    // first is empty to keep the legacy order in place\n', '    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n', '\n', '    enum ActionType { SELL, BUY }\n', '\n', '    struct ExchangeData {\n', '        address srcAddr;\n', '        address destAddr;\n', '        uint srcAmount;\n', '        uint destAmount;\n', '        uint minPrice;\n', '        address wrapper;\n', '        address exchangeAddr;\n', '        bytes callData;\n', '        uint256 price0x;\n', '    }\n', '\n', '    /// @notice Internal method that preforms a sell on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and destAmount\n', '    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '        uint tokensLeft = exData.srcAmount;\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(WETH_ADDRESS).deposit.value(exData.srcAmount)();\n', '        }\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.price0x > 0) {\n', '            approve0xProxy(exData.srcAddr, exData.srcAmount);\n', '\n', '            uint ethAmount = getProtocolFee(exData.srcAddr, exData.srcAmount);\n', '            (success, swapedTokens, tokensLeft) = takeOrder(exData, ethAmount, ActionType.SELL);\n', '\n', '            if (success) {\n', '                wrapper = exData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.SELL);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), "Final amount isn\'t correct");\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(WETH_ADDRESS) > 0) {\n', '            TokenInterface(WETH_ADDRESS).withdraw(\n', '                TokenInterface(WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        return (wrapper, swapedTokens);\n', '    }\n', '\n', '    /// @notice Internal method that preforms a buy on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and srcAmount\n', '    function _buy(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '\n', '        require(exData.destAmount != 0, "Dest amount must be specified");\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(WETH_ADDRESS).deposit.value(exData.srcAmount)();\n', '        }\n', '\n', '        if (exData.price0x > 0) {\n', '            approve0xProxy(exData.srcAddr, exData.srcAmount);\n', '\n', '            uint ethAmount = getProtocolFee(exData.srcAddr, exData.srcAmount);\n', '            (success, swapedTokens,) = takeOrder(exData, ethAmount, ActionType.BUY);\n', '\n', '            if (success) {\n', '                wrapper = exData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.BUY);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        require(getBalance(exData.destAddr) >= exData.destAmount, "Final amount isn\'t correct");\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(WETH_ADDRESS) > 0) {\n', '            TokenInterface(WETH_ADDRESS).withdraw(\n', '                TokenInterface(WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        return (wrapper, getBalance(exData.destAddr));\n', '    }\n', '\n', '    /// @notice Takes order from 0x and returns bool indicating if it is successful\n', '    /// @param _exData Exchange data\n', '    /// @param _ethAmount Ether fee needed for 0x order\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        uint256 _ethAmount,\n', '        ActionType _type\n', '    ) private returns (bool success, uint256, uint256) {\n', '\n', '        // write in the exact amount we are selling/buing in an order\n', '        if (_type == ActionType.SELL) {\n', '            writeUint256(_exData.callData, 36, _exData.srcAmount);\n', '        } else {\n', '            writeUint256(_exData.callData, 36, _exData.destAmount);\n', '        }\n', '\n', '        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isNonPayableAddr(_exData.exchangeAddr)) {\n', '            _ethAmount = 0;\n', '        }\n', '\n', '        uint256 tokensBefore = getBalance(_exData.destAddr);\n', '\n', '        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.exchangeAddr)) {\n', '            (success, ) = _exData.exchangeAddr.call{value: _ethAmount}(_exData.callData);\n', '        } else {\n', '            success = false;\n', '        }\n', '\n', '        uint256 tokensSwaped = 0;\n', '        uint256 tokensLeft = _exData.srcAmount;\n', '\n', '        if (success) {\n', '            // check to see if any _src tokens are left over after exchange\n', '            tokensLeft = getBalance(_exData.srcAddr);\n', '\n', '            // convert weth -> eth if needed\n', '            if (_exData.destAddr == KYBER_ETH_ADDRESS) {\n', '                TokenInterface(WETH_ADDRESS).withdraw(\n', '                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\n', '                );\n', '            }\n', '\n', '            // get the current balance of the swaped tokens\n', '            tokensSwaped = getBalance(_exData.destAddr) - tokensBefore;\n', '        }\n', '\n', '        return (success, tokensSwaped, tokensLeft);\n', '    }\n', '\n', '    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n', '    /// @param _exData Exchange data struct\n', '    /// @param _type Type of action SELL|BUY\n', '    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n', '    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\n', '        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), "Wrapper is not valid");\n', '\n', '        uint ethValue = 0;\n', '\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n', '\n', '        if (_type == ActionType.SELL) {\n', '            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\n', '                    sell{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.srcAmount);\n', '        } else {\n', '            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\n', '                    buy{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.destAmount);\n', '        }\n', '    }\n', '\n', '    function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n', '        if (_b.length < _index + 32) {\n', '            revert("Incorrent lengt while writting bytes32");\n', '        }\n', '\n', '        bytes32 input = bytes32(_input);\n', '\n', '        _index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(_b, _index), input)\n', '        }\n', '    }\n', '\n', '    /// @notice Converts Kybers Eth address -> Weth\n', '    /// @param _src Input address\n', '    function ethToWethAddr(address _src) internal pure returns (address) {\n', '        return _src == KYBER_ETH_ADDRESS ? WETH_ADDRESS : _src;\n', '    }\n', '\n', '    /// @notice Calculates protocol fee\n', '    /// @param _srcAddr selling token address (if eth should be WETH)\n', '    /// @param _srcAmount amount we are selling\n', '    function getProtocolFee(address _srcAddr, uint256 _srcAmount) internal view returns(uint256) {\n', '        // if we are not selling ETH msg value is always the protocol fee\n', '        if (_srcAddr != WETH_ADDRESS) return address(this).balance;\n', '\n', '        // if msg value is larger than srcAmount, that means that msg value is protocol fee + srcAmount, so we subsctract srcAmount from msg value\n', '        // we have an edge case here when protocol fee is higher than selling amount\n', '        if (address(this).balance > _srcAmount) return address(this).balance - _srcAmount;\n', '\n', "        // if msg value is lower than src amount, that means that srcAmount isn't included in msg value, so we return msg value\n", '        return address(this).balance;\n', '    }\n', '\n', '    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n', '        // splitting in two different bytes and encoding all because of stack too deep in decoding part\n', '\n', '        bytes memory part1 = abi.encode(\n', '            _exData.srcAddr,\n', '            _exData.destAddr,\n', '            _exData.srcAmount,\n', '            _exData.destAmount\n', '        );\n', '\n', '        bytes memory part2 = abi.encode(\n', '            _exData.minPrice,\n', '            _exData.wrapper,\n', '            _exData.exchangeAddr,\n', '            _exData.callData,\n', '            _exData.price0x\n', '        );\n', '\n', '\n', '        return abi.encode(part1, part2);\n', '    }\n', '\n', '    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n', '        (\n', '            bytes memory part1,\n', '            bytes memory part2\n', '        ) = abi.decode(_data, (bytes,bytes));\n', '\n', '        (\n', '            _exData.srcAddr,\n', '            _exData.destAddr,\n', '            _exData.srcAmount,\n', '            _exData.destAmount\n', '        ) = abi.decode(part1, (address,address,uint256,uint256));\n', '\n', '        (\n', '            _exData.minPrice,\n', '            _exData.wrapper,\n', '            _exData.exchangeAddr,\n', '            _exData.callData,\n', '            _exData.price0x\n', '        )\n', '        = abi.decode(part2, (uint256,address,address,bytes,uint256));\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external virtual payable {}\n', '}  contract ShifterRegistry is AdminAuth {\n', '    mapping (string => address) public contractAddresses;\n', '    bool public finalized;\n', '\n', '    function changeContractAddr(string memory _contractName, address _protoAddr) public onlyOwner {\n', '        require(!finalized);\n', '        contractAddresses[_contractName] = _protoAddr;\n', '    }\n', '\n', '    function lock() public onlyOwner {\n', '        finalized = true;\n', '    }\n', '\n', '    function getAddr(string memory _contractName) public view returns (address contractAddr) {\n', '        contractAddr = contractAddresses[_contractName];\n', '\n', '        require(contractAddr != address(0), "No contract address registred");\n', '    }\n', '\n', '}  abstract contract GasTokenInterface is ERC20 {\n', '    function free(uint256 value) public virtual returns (bool success);\n', '\n', '    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n', '\n', '    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n', '\n', '    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n', '}  contract GasBurner {\n', '    // solhint-disable-next-line const-name-snakecase\n', '    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n', '\n', '    modifier burnGas(uint _amount) {\n', '        if (gasToken.balanceOf(address(this)) >= _amount) {\n', '            gasToken.free(_amount);\n', '        }\n', '\n', '        _;\n', '    }\n', '}  contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title LoanShifterTaker Entry point for using the shifting operation\n', 'contract LoanShifterTaker is AdminAuth, ProxyPermission, GasBurner {\n', '\n', '    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n', '\n', '    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '\n', '    address public constant MCD_SUB_ADDRESS = 0xC45d4f6B6bf41b6EdAA58B01c4298B8d9078269a;\n', '    address public constant COMPOUND_SUB_ADDRESS = 0x52015EFFD577E08f498a0CCc11905925D58D6207;\n', '\n', '    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n', '\n', '    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\n', '\n', '    Manager public constant manager = Manager(MANAGER_ADDRESS);\n', '    ShifterRegistry public constant shifterRegistry = ShifterRegistry(0x597C52281b31B9d949a9D8fEbA08F7A2530a965e);\n', '\n', '    enum Protocols { MCD, COMPOUND }\n', '    enum SwapType { NO_SWAP, COLL_SWAP, DEBT_SWAP }\n', '    enum Unsub { NO_UNSUB, FIRST_UNSUB, SECOND_UNSUB, BOTH_UNSUB }\n', '\n', '    struct LoanShiftData {\n', '        Protocols fromProtocol;\n', '        Protocols toProtocol;\n', '        SwapType swapType;\n', '        Unsub unsub;\n', '        bool wholeDebt;\n', '        uint collAmount;\n', '        uint debtAmount;\n', '        address debtAddr1;\n', '        address debtAddr2;\n', '        address addrLoan1;\n', '        address addrLoan2;\n', '        uint id1;\n', '        uint id2;\n', '    }\n', '\n', '    /// @notice Main entry point, it will move or transform a loan\n', '    /// @dev Called through DSProxy\n', '    function moveLoan(\n', '        SaverExchangeCore.ExchangeData memory _exchangeData,\n', '        LoanShiftData memory _loanShift\n', '    ) public payable burnGas(20) {\n', '        if (_isSameTypeVaults(_loanShift)) {\n', '            _forkVault(_loanShift);\n', '            logEvent(_exchangeData, _loanShift);\n', '            return;\n', '        }\n', '\n', '        _callCloseAndOpen(_exchangeData, _loanShift);\n', '    }\n', '\n', '    //////////////////////// INTERNAL FUNCTIONS //////////////////////////\n', '\n', '    function _callCloseAndOpen(\n', '        SaverExchangeCore.ExchangeData memory _exchangeData,\n', '        LoanShiftData memory _loanShift\n', '    ) internal {\n', '        address protoAddr = shifterRegistry.getAddr(getNameByProtocol(uint8(_loanShift.fromProtocol)));\n', '\n', '        if (_loanShift.wholeDebt) {\n', '            _loanShift.debtAmount = ILoanShifter(protoAddr).getLoanAmount(_loanShift.id1, _loanShift.debtAddr1);\n', '        }\n', '\n', '        (\n', '            uint[8] memory numData,\n', '            address[8] memory addrData,\n', '            uint8[3] memory enumData,\n', '            bytes memory callData\n', '        )\n', '        = _packData(_loanShift, _exchangeData);\n', '\n', '        // encode data\n', '        bytes memory paramsData = abi.encode(numData, addrData, enumData, callData, address(this));\n', '\n', '        address payable loanShifterReceiverAddr = payable(shifterRegistry.getAddr("LOAN_SHIFTER_RECEIVER"));\n', '\n', '        loanShifterReceiverAddr.transfer(address(this).balance);\n', '\n', '        // call FL\n', '        givePermission(loanShifterReceiverAddr);\n', '\n', '        lendingPool.flashLoan(loanShifterReceiverAddr,\n', '           getLoanAddr(_loanShift.debtAddr1, _loanShift.fromProtocol), _loanShift.debtAmount, paramsData);\n', '\n', '        removePermission(loanShifterReceiverAddr);\n', '\n', '        unsubFromAutomation(\n', '            _loanShift.unsub,\n', '            _loanShift.id1,\n', '            _loanShift.id2,\n', '            _loanShift.fromProtocol,\n', '            _loanShift.toProtocol\n', '        );\n', '\n', '        logEvent(_exchangeData, _loanShift);\n', '    }\n', '\n', '    function _forkVault(LoanShiftData memory _loanShift) internal {\n', '        // Create new Vault to move to\n', '        if (_loanShift.id2 == 0) {\n', '            _loanShift.id2 = manager.open(manager.ilks(_loanShift.id1), address(this));\n', '        }\n', '\n', '        if (_loanShift.wholeDebt) {\n', '            manager.shift(_loanShift.id1, _loanShift.id2);\n', '        }\n', '    }\n', '\n', '    function _isSameTypeVaults(LoanShiftData memory _loanShift) internal pure returns (bool) {\n', '        return _loanShift.fromProtocol == Protocols.MCD && _loanShift.toProtocol == Protocols.MCD\n', '                && _loanShift.addrLoan1 == _loanShift.addrLoan2;\n', '    }\n', '\n', '    function getNameByProtocol(uint8 _proto) internal pure returns (string memory) {\n', '        if (_proto == 0) {\n', '            return "MCD_SHIFTER";\n', '        } else if (_proto == 1) {\n', '            return "COMP_SHIFTER";\n', '        }\n', '    }\n', '\n', '    function getLoanAddr(address _address, Protocols _fromProtocol) internal returns (address) {\n', '        if (_fromProtocol == Protocols.COMPOUND) {\n', '            return CTokenInterface(_address).underlying();\n', '        } else if (_fromProtocol == Protocols.MCD) {\n', '            return DAI_ADDRESS;\n', '        } else {\n', '            return address(0);\n', '        }\n', '    }\n', '\n', '    function logEvent(\n', '        SaverExchangeCore.ExchangeData memory _exchangeData,\n', '        LoanShiftData memory _loanShift\n', '    ) internal {\n', '        address srcAddr = _exchangeData.srcAddr;\n', '        address destAddr = _exchangeData.destAddr;\n', '\n', '        uint collAmount = _exchangeData.srcAmount;\n', '        uint debtAmount = _exchangeData.destAmount;\n', '\n', '        if (_loanShift.swapType == SwapType.NO_SWAP) {\n', '            srcAddr = _loanShift.addrLoan1;\n', '            destAddr = _loanShift.debtAddr1;\n', '\n', '            collAmount = _loanShift.collAmount;\n', '            debtAmount = _loanShift.debtAmount;\n', '        }\n', '\n', '        DefisaverLogger(DEFISAVER_LOGGER)\n', '            .Log(address(this), msg.sender, "LoanShifter",\n', '            abi.encode(\n', '            _loanShift.fromProtocol,\n', '            _loanShift.toProtocol,\n', '            _loanShift.swapType,\n', '            srcAddr,\n', '            destAddr,\n', '            collAmount,\n', '            debtAmount\n', '        ));\n', '    }\n', '\n', '    function unsubFromAutomation(Unsub _unsub, uint _cdp1, uint _cdp2, Protocols _from, Protocols _to) internal {\n', '        if (_unsub != Unsub.NO_UNSUB) {\n', '            if (_unsub == Unsub.FIRST_UNSUB || _unsub == Unsub.BOTH_UNSUB) {\n', '                unsubscribe(_cdp1, _from);\n', '            }\n', '\n', '            if (_unsub == Unsub.SECOND_UNSUB || _unsub == Unsub.BOTH_UNSUB) {\n', '                unsubscribe(_cdp2, _to);\n', '            }\n', '        }\n', '    }\n', '\n', '    function unsubscribe(uint _cdpId, Protocols _protocol) internal {\n', '        if (_cdpId != 0 && _protocol == Protocols.MCD) {\n', '            IMCDSubscriptions(MCD_SUB_ADDRESS).unsubscribe(_cdpId);\n', '        }\n', '\n', '        if (_protocol == Protocols.COMPOUND) {\n', '            ICompoundSubscriptions(COMPOUND_SUB_ADDRESS).unsubscribe();\n', '        }\n', '    }\n', '\n', '    function _packData(\n', '        LoanShiftData memory _loanShift,\n', '        SaverExchangeCore.ExchangeData memory exchangeData\n', '    ) internal pure returns (uint[8] memory numData, address[8] memory addrData, uint8[3] memory enumData, bytes memory callData) {\n', '\n', '        numData = [\n', '            _loanShift.collAmount,\n', '            _loanShift.debtAmount,\n', '            _loanShift.id1,\n', '            _loanShift.id2,\n', '            exchangeData.srcAmount,\n', '            exchangeData.destAmount,\n', '            exchangeData.minPrice,\n', '            exchangeData.price0x\n', '        ];\n', '\n', '        addrData = [\n', '            _loanShift.addrLoan1,\n', '            _loanShift.addrLoan2,\n', '            _loanShift.debtAddr1,\n', '            _loanShift.debtAddr2,\n', '            exchangeData.srcAddr,\n', '            exchangeData.destAddr,\n', '            exchangeData.exchangeAddr,\n', '            exchangeData.wrapper\n', '        ];\n', '\n', '        enumData = [\n', '            uint8(_loanShift.fromProtocol),\n', '            uint8(_loanShift.toProtocol),\n', '            uint8(_loanShift.swapType)\n', '        ];\n', '\n', '        callData = exchangeData.callData;\n', '    }\n', '\n', '}']