['pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library BytesLib {\n', '    function concat(\n', '        bytes memory _preBytes,\n', '        bytes memory _postBytes\n', '    )\n', '    internal\n', '    pure\n', '    returns (bytes memory)\n', '    {\n', '        bytes memory tempBytes;\n', '\n', '        assembly {\n', '        // Get a location of some free memory and store it in tempBytes as\n', '        // Solidity does for memory variables.\n', '            tempBytes := mload(0x40)\n', '\n', '        // Store the length of the first bytes array at the beginning of\n', '        // the memory for tempBytes.\n', '            let length := mload(_preBytes)\n', '            mstore(tempBytes, length)\n', '\n', '        // Maintain a memory counter for the current write location in the\n', '        // temp bytes array by adding the 32 bytes for the array length to\n', '        // the starting location.\n', '            let mc := add(tempBytes, 0x20)\n', '        // Stop copying when the memory counter reaches the length of the\n', '        // first bytes array.\n', '            let end := add(mc, length)\n', '\n', '            for {\n', '            // Initialize a copy counter to the start of the _preBytes data,\n', '            // 32 bytes into its memory.\n', '                let cc := add(_preBytes, 0x20)\n', '            } lt(mc, end) {\n', '            // Increase both counters by 32 bytes each iteration.\n', '                mc := add(mc, 0x20)\n', '                cc := add(cc, 0x20)\n', '            } {\n', '            // Write the _preBytes data into the tempBytes memory 32 bytes\n', '            // at a time.\n', '                mstore(mc, mload(cc))\n', '            }\n', '\n', '        // Add the length of _postBytes to the current length of tempBytes\n', '        // and store it as the new length in the first 32 bytes of the\n', '        // tempBytes memory.\n', '            length := mload(_postBytes)\n', '            mstore(tempBytes, add(length, mload(tempBytes)))\n', '\n', '        // Move the memory counter back from a multiple of 0x20 to the\n', '        // actual end of the _preBytes data.\n', '            mc := end\n', '        // Stop copying when the memory counter reaches the new combined\n', '        // length of the arrays.\n', '            end := add(mc, length)\n', '\n', '            for {\n', '                let cc := add(_postBytes, 0x20)\n', '            } lt(mc, end) {\n', '                mc := add(mc, 0x20)\n', '                cc := add(cc, 0x20)\n', '            } {\n', '                mstore(mc, mload(cc))\n', '            }\n', '\n', '        // Update the free-memory pointer by padding our last write location\n', '        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n', '        // next 32 byte block, then round down to the nearest multiple of\n', '        // 32. If the sum of the length of the two arrays is zero then add\n', '        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n', '            mstore(0x40, and(\n', '            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n', '            not(31) // Round down to the nearest 32 bytes.\n', '            ))\n', '        }\n', '\n', '        return tempBytes;\n', '    }\n', '\n', '    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n', '        assembly {\n', '        // Read the first 32 bytes of _preBytes storage, which is the length\n', "        // of the array. (We don't need to use the offset into the slot\n", '        // because arrays use the entire slot.)\n', '            let fslot := sload(_preBytes_slot)\n', '        // Arrays of 31 bytes or less have an even value in their slot,\n', '        // while longer arrays have an odd value. The actual length is\n', '        // the slot divided by two for odd values, and the lowest order\n', '        // byte divided by two for even values.\n', '        // If the slot is even, bitwise and the slot with 255 and divide by\n', '        // two to get the length. If the slot is odd, bitwise and the slot\n', '        // with -1 and divide by two.\n', '            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n', '            let mlength := mload(_postBytes)\n', '            let newlength := add(slength, mlength)\n', '        // slength can contain both the length and contents of the array\n', "        // if length < 32 bytes so let's prepare for that\n", '        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n', '            switch add(lt(slength, 32), lt(newlength, 32))\n', '            case 2 {\n', '            // Since the new array still fits in the slot, we just need to\n', '            // update the contents of the slot.\n', '            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n', '                sstore(\n', '                _preBytes_slot,\n', '                // all the modifications to the slot are inside this\n', '                // next block\n', '                add(\n', '                // we can just add to the slot contents because the\n', '                // bytes we want to change are the LSBs\n', '                fslot,\n', '                add(\n', '                mul(\n', '                div(\n', '                // load the bytes from memory\n', '                mload(add(_postBytes, 0x20)),\n', '                // zero all bytes to the right\n', '                exp(0x100, sub(32, mlength))\n', '                ),\n', '                // and now shift left the number of bytes to\n', '                // leave space for the length in the slot\n', '                exp(0x100, sub(32, newlength))\n', '                ),\n', '                // increase length by the double of the memory\n', '                // bytes length\n', '                mul(mlength, 2)\n', '                )\n', '                )\n', '                )\n', '            }\n', '            case 1 {\n', '            // The stored value fits in the slot, but the combined value\n', '            // will exceed it.\n', '            // get the keccak hash to get the contents of the array\n', '                mstore(0x0, _preBytes_slot)\n', '                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n', '\n', '            // save new length\n', '                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n', '\n', '            // The contents of the _postBytes array start 32 bytes into\n', '            // the structure. Our first read should obtain the `submod`\n', '            // bytes that can fit into the unused space in the last word\n', '            // of the stored array. To get this, we read 32 bytes starting\n', '            // from `submod`, so the data we read overlaps with the array\n', '            // contents by `submod` bytes. Masking the lowest-order\n', '            // `submod` bytes allows us to add that value directly to the\n', '            // stored value.\n', '\n', '                let submod := sub(32, slength)\n', '                let mc := add(_postBytes, submod)\n', '                let end := add(_postBytes, mlength)\n', '                let mask := sub(exp(0x100, submod), 1)\n', '\n', '                sstore(\n', '                sc,\n', '                add(\n', '                and(\n', '                fslot,\n', '                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n', '                ),\n', '                and(mload(mc), mask)\n', '                )\n', '                )\n', '\n', '                for {\n', '                    mc := add(mc, 0x20)\n', '                    sc := add(sc, 1)\n', '                } lt(mc, end) {\n', '                    sc := add(sc, 1)\n', '                    mc := add(mc, 0x20)\n', '                } {\n', '                    sstore(sc, mload(mc))\n', '                }\n', '\n', '                mask := exp(0x100, sub(mc, end))\n', '\n', '                sstore(sc, mul(div(mload(mc), mask), mask))\n', '            }\n', '            default {\n', '            // get the keccak hash to get the contents of the array\n', '                mstore(0x0, _preBytes_slot)\n', '            // Start copying to the last used word of the stored array.\n', '                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n', '\n', '            // save new length\n', '                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n', '\n', '            // Copy over the first `submod` bytes of the new data as in\n', '            // case 1 above.\n', '                let slengthmod := mod(slength, 32)\n', '                let mlengthmod := mod(mlength, 32)\n', '                let submod := sub(32, slengthmod)\n', '                let mc := add(_postBytes, submod)\n', '                let end := add(_postBytes, mlength)\n', '                let mask := sub(exp(0x100, submod), 1)\n', '\n', '                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n', '\n', '                for {\n', '                    sc := add(sc, 1)\n', '                    mc := add(mc, 0x20)\n', '                } lt(mc, end) {\n', '                    sc := add(sc, 1)\n', '                    mc := add(mc, 0x20)\n', '                } {\n', '                    sstore(sc, mload(mc))\n', '                }\n', '\n', '                mask := exp(0x100, sub(mc, end))\n', '\n', '                sstore(sc, mul(div(mload(mc), mask), mask))\n', '            }\n', '        }\n', '    }\n', '\n', '    function slice(\n', '        bytes memory _bytes,\n', '        uint _start,\n', '        uint _length\n', '    )\n', '    internal\n', '    pure\n', '    returns (bytes memory)\n', '    {\n', '        require(_bytes.length >= (_start + _length));\n', '\n', '        bytes memory tempBytes;\n', '\n', '        assembly {\n', '            switch iszero(_length)\n', '            case 0 {\n', '            // Get a location of some free memory and store it in tempBytes as\n', '            // Solidity does for memory variables.\n', '                tempBytes := mload(0x40)\n', '\n', '            // The first word of the slice result is potentially a partial\n', '            // word read from the original array. To read it, we calculate\n', '            // the length of that partial word and start copying that many\n', '            // bytes into the array. The first word we copy will start with\n', "            // data we don't care about, but the last `lengthmod` bytes will\n", '            // land at the beginning of the contents of the new array. When\n', "            // we're done copying, we overwrite the full first word with\n", '            // the actual length of the slice.\n', '                let lengthmod := and(_length, 31)\n', '\n', '            // The multiplication in the next line is necessary\n', '            // because when slicing multiples of 32 bytes (lengthmod == 0)\n', "            // the following copy loop was copying the origin's length\n", '            // and then ending prematurely not copying everything it should.\n', '                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n', '                let end := add(mc, _length)\n', '\n', '                for {\n', '                // The multiplication in the next line has the same exact purpose\n', '                // as the one above.\n', '                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n', '                } lt(mc, end) {\n', '                    mc := add(mc, 0x20)\n', '                    cc := add(cc, 0x20)\n', '                } {\n', '                    mstore(mc, mload(cc))\n', '                }\n', '\n', '                mstore(tempBytes, _length)\n', '\n', '            //update free-memory pointer\n', '            //allocating the array padded to 32 bytes like the compiler does now\n', '                mstore(0x40, and(add(mc, 31), not(31)))\n', '            }\n', "            //if we want a zero-length slice let's just return a zero-length array\n", '            default {\n', '                tempBytes := mload(0x40)\n', '\n', '                mstore(0x40, add(tempBytes, 0x20))\n', '            }\n', '        }\n', '\n', '        return tempBytes;\n', '    }\n', '\n', '    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\n', '        require(_bytes.length >= (_start + 20));\n', '        address tempAddress;\n', '\n', '        assembly {\n', '            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n', '        }\n', '\n', '        return tempAddress;\n', '    }\n', '\n', '    function toUint8(bytes memory _bytes, uint _start) internal  pure returns (uint8) {\n', '        require(_bytes.length >= (_start + 1));\n', '        uint8 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x1), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint16(bytes memory _bytes, uint _start) internal  pure returns (uint16) {\n', '        require(_bytes.length >= (_start + 2));\n', '        uint16 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x2), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint32(bytes memory _bytes, uint _start) internal  pure returns (uint32) {\n', '        require(_bytes.length >= (_start + 4));\n', '        uint32 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x4), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint64(bytes memory _bytes, uint _start) internal  pure returns (uint64) {\n', '        require(_bytes.length >= (_start + 8));\n', '        uint64 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x8), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint96(bytes memory _bytes, uint _start) internal  pure returns (uint96) {\n', '        require(_bytes.length >= (_start + 12));\n', '        uint96 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0xc), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint128(bytes memory _bytes, uint _start) internal  pure returns (uint128) {\n', '        require(_bytes.length >= (_start + 16));\n', '        uint128 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x10), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\n', '        require(_bytes.length >= (_start + 32));\n', '        uint256 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x20), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '\n', '    function toBytes32(bytes memory _bytes, uint _start) internal  pure returns (bytes32) {\n', '        require(_bytes.length >= (_start + 32));\n', '        bytes32 tempBytes32;\n', '\n', '        assembly {\n', '            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n', '        }\n', '\n', '        return tempBytes32;\n', '    }\n', '\n', '    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n', '        bool success = true;\n', '\n', '        assembly {\n', '            let length := mload(_preBytes)\n', '\n', "        // if lengths don't match the arrays are not equal\n", '            switch eq(length, mload(_postBytes))\n', '            case 1 {\n', "            // cb is a circuit breaker in the for loop since there's\n", '            //  no said feature for inline assembly loops\n', "            // cb = 1 - don't breaker\n", '            // cb = 0 - break\n', '                let cb := 1\n', '\n', '                let mc := add(_preBytes, 0x20)\n', '                let end := add(mc, length)\n', '\n', '                for {\n', '                    let cc := add(_postBytes, 0x20)\n', '                // the next line is the loop condition:\n', '                // while(uint(mc < end) + cb == 2)\n', '                } eq(add(lt(mc, end), cb), 2) {\n', '                    mc := add(mc, 0x20)\n', '                    cc := add(cc, 0x20)\n', '                } {\n', '                // if any of these checks fails then arrays are not equal\n', '                    if iszero(eq(mload(mc), mload(cc))) {\n', '                    // unsuccess:\n', '                        success := 0\n', '                        cb := 0\n', '                    }\n', '                }\n', '            }\n', '            default {\n', '            // unsuccess:\n', '                success := 0\n', '            }\n', '        }\n', '\n', '        return success;\n', '    }\n', '\n', '    function equalStorage(\n', '        bytes storage _preBytes,\n', '        bytes memory _postBytes\n', '    )\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        bool success = true;\n', '\n', '        assembly {\n', '        // we know _preBytes_offset is 0\n', '            let fslot := sload(_preBytes_slot)\n', '        // Decode the length of the stored array like in concatStorage().\n', '            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n', '            let mlength := mload(_postBytes)\n', '\n', "        // if lengths don't match the arrays are not equal\n", '            switch eq(slength, mlength)\n', '            case 1 {\n', '            // slength can contain both the length and contents of the array\n', "            // if length < 32 bytes so let's prepare for that\n", '            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n', '                if iszero(iszero(slength)) {\n', '                    switch lt(slength, 32)\n', '                    case 1 {\n', '                    // blank the last byte which is the length\n', '                        fslot := mul(div(fslot, 0x100), 0x100)\n', '\n', '                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n', '                        // unsuccess:\n', '                            success := 0\n', '                        }\n', '                    }\n', '                    default {\n', "                    // cb is a circuit breaker in the for loop since there's\n", '                    //  no said feature for inline assembly loops\n', "                    // cb = 1 - don't breaker\n", '                    // cb = 0 - break\n', '                        let cb := 1\n', '\n', '                    // get the keccak hash to get the contents of the array\n', '                        mstore(0x0, _preBytes_slot)\n', '                        let sc := keccak256(0x0, 0x20)\n', '\n', '                        let mc := add(_postBytes, 0x20)\n', '                        let end := add(mc, mlength)\n', '\n', '                    // the next line is the loop condition:\n', '                    // while(uint(mc < end) + cb == 2)\n', '                        for {} eq(add(lt(mc, end), cb), 2) {\n', '                            sc := add(sc, 1)\n', '                            mc := add(mc, 0x20)\n', '                        } {\n', '                            if iszero(eq(sload(sc), mload(mc))) {\n', '                            // unsuccess:\n', '                                success := 0\n', '                                cb := 0\n', '                            }\n', '                        }\n', '                    }\n', '                }\n', '            }\n', '            default {\n', '            // unsuccess:\n', '                success := 0\n', '            }\n', '        }\n', '\n', '        return success;\n', '    }\n', '}\n', '\n', 'interface IERC20Minter {\n', '    function mint(address to, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '    function replaceMinter(address newMinter) external;\n', '}\n', '\n', 'contract NerveMultiSigWalletII {\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using BytesLib for bytes;\n', '\n', '    modifier isOwner{\n', '        require(owner == msg.sender, "Only owner can execute it");\n', '        _;\n', '    }\n', '    modifier isManager{\n', '        require(managers[msg.sender] == 1, "Only manager can execute it");\n', '        _;\n', '    }\n', '    bool public upgrade = false;\n', '    address public upgradeContractAddress = address(0);\n', '    // 最大管理员数量\n', '    uint public max_managers = 15;\n', '    // 最小签名比例 66%\n', '    uint public rate = 66;\n', '    // 签名字节长度\n', '    uint public signatureLength = 65;\n', '    // 比例分母\n', '    uint constant DENOMINATOR = 100;\n', '    // 当前合约版本\n', '    uint8 constant VERSION = 2;\n', '    // 当前交易的最小签名数量\n', '    uint8 public current_min_signatures;\n', '    address public owner;\n', '    mapping(address => uint8) private seedManagers;\n', '    address[] private seedManagerArray;\n', '    mapping(address => uint8) private managers;\n', '    address[] private managerArray;\n', '    mapping(bytes32 => uint8) private completedKeccak256s;\n', '    mapping(string => uint8) private completedTxs;\n', '    mapping(address => uint8) private minterERC20s;\n', '\n', '    constructor(address[] memory _managers) public{\n', '        require(_managers.length <= max_managers, "Exceeded the maximum number of managers");\n', '        owner = msg.sender;\n', '        managerArray = _managers;\n', '        for (uint8 i = 0; i < managerArray.length; i++) {\n', '            managers[managerArray[i]] = 1;\n', '            seedManagers[managerArray[i]] = 1;\n', '            seedManagerArray.push(managerArray[i]);\n', '        }\n', '        require(managers[owner] == 0, "Contract creator cannot act as manager");\n', '        // 设置当前交易的最小签名数量\n', '        current_min_signatures = calMinSignatures(managerArray.length);\n', '    }\n', '    function() external payable {\n', '        emit DepositFunds(msg.sender, msg.value);\n', '    }\n', '\n', '    function createOrSignWithdraw(string memory txKey, address payable to, uint256 amount, bool isERC20, address ERC20, bytes memory signatures) public isManager {\n', '        require(bytes(txKey).length == 64, "Fixed length of txKey: 64");\n', '        require(to != address(0), "Withdraw: transfer to the zero address");\n', '        require(amount > 0, "Withdrawal amount must be greater than 0");\n', '        // 校验已经完成的交易\n', '        require(completedTxs[txKey] == 0, "Transaction has been completed");\n', '        // 校验提现金额\n', '        if (isERC20) {\n', '            validateTransferERC20(ERC20, to, amount);\n', '        } else {\n', '            require(address(this).balance >= amount, "This contract address does not have sufficient balance of ether");\n', '        }\n', '        bytes32 vHash = keccak256(abi.encodePacked(txKey, to, amount, isERC20, ERC20, VERSION));\n', '        // 校验请求重复性\n', '        require(completedKeccak256s[vHash] == 0, "Invalid signatures");\n', '        // 校验签名\n', '        require(validSignature(vHash, signatures), "Valid signatures fail");\n', '        // 执行转账\n', '        if (isERC20) {\n', '            transferERC20(ERC20, to, amount);\n', '        } else {\n', '            // 实际到账\n', '            require(address(this).balance >= amount, "This contract address does not have sufficient balance of ether");\n', '            to.transfer(amount);\n', '            emit TransferFunds(to, amount);\n', '        }\n', '        // 保存交易数据\n', '        completeTx(txKey, vHash, 1);\n', '        emit TxWithdrawCompleted(txKey);\n', '    }\n', '\n', '\n', '    function createOrSignManagerChange(string memory txKey, address[] memory adds, address[] memory removes, uint8 count, bytes memory signatures) public isManager {\n', '        require(bytes(txKey).length == 64, "Fixed length of txKey: 64");\n', '        require(adds.length > 0 || removes.length > 0, "There are no managers joining or exiting");\n', '        // 校验已经完成的交易\n', '        require(completedTxs[txKey] == 0, "Transaction has been completed");\n', '        preValidateAddsAndRemoves(adds, removes);\n', '        bytes32 vHash = keccak256(abi.encodePacked(txKey, adds, count, removes, VERSION));\n', '        // 校验请求重复性\n', '        require(completedKeccak256s[vHash] == 0, "Invalid signatures");\n', '        // 校验签名\n', '        require(validSignature(vHash, signatures), "Valid signatures fail");\n', '        // 变更管理员\n', '        removeManager(removes);\n', '        addManager(adds);\n', '        // 更新当前交易的最小签名数\n', '        current_min_signatures = calMinSignatures(managerArray.length);\n', '        // 保存交易数据\n', '        completeTx(txKey, vHash, 1);\n', '        // add event\n', '        emit TxManagerChangeCompleted(txKey);\n', '    }\n', '\n', '    function createOrSignUpgrade(string memory txKey, address upgradeContract, bytes memory signatures) public isManager {\n', '        require(bytes(txKey).length == 64, "Fixed length of txKey: 64");\n', '        // 校验已经完成的交易\n', '        require(completedTxs[txKey] == 0, "Transaction has been completed");\n', '        require(!upgrade, "It has been upgraded");\n', '        require(upgradeContract.isContract(), "The address is not a contract address");\n', '        // 校验\n', '        bytes32 vHash = keccak256(abi.encodePacked(txKey, upgradeContract, VERSION));\n', '        // 校验请求重复性\n', '        require(completedKeccak256s[vHash] == 0, "Invalid signatures");\n', '        // 校验签名\n', '        require(validSignature(vHash, signatures), "Valid signatures fail");\n', '        // 变更可升级\n', '        upgrade = true;\n', '        upgradeContractAddress = upgradeContract;\n', '        // 保存交易数据\n', '        completeTx(txKey, vHash, 1);\n', '        // add event\n', '        emit TxUpgradeCompleted(txKey);\n', '    }\n', '\n', '    function validSignature(bytes32 hash, bytes memory signatures) internal view returns (bool) {\n', '        require(signatures.length <= 975, "Max length of signatures: 975");\n', '        // 获取签名列表对应的有效管理员,如果存在错误的签名、或者不是管理员的签名，就失败\n', '        uint sManagersCount = getManagerFromSignatures(hash, signatures);\n', '        // 判断最小签名数量\n', '        return sManagersCount >= current_min_signatures;\n', '    }\n', '\n', '    function getManagerFromSignatures(bytes32 hash, bytes memory signatures) internal view returns (uint){\n', '        uint signCount = 0;\n', '        uint times = signatures.length.div(signatureLength);\n', '        address[] memory result = new address[](times);\n', '        uint k = 0;\n', '        uint8 j = 0;\n', '        for (uint i = 0; i < times; i++) {\n', '            bytes memory sign = signatures.slice(k, signatureLength);\n', '            address mAddress = ecrecovery(hash, sign);\n', '            require(mAddress != address(0), "Signatures error");\n', '            // 管理计数\n', '            if (managers[mAddress] == 1) {\n', '                signCount++;\n', '                result[j++] = mAddress;\n', '            }\n', '            k += signatureLength;\n', '        }\n', '        // 验证地址重复性\n', '        bool suc = repeatability(result);\n', '        delete result;\n', '        require(suc, "Signatures duplicate");\n', '        return signCount;\n', '    }\n', '\n', '    function validateRepeatability(address currentAddress, address[] memory list) internal pure returns (bool) {\n', '        address tempAddress;\n', '        for (uint i = 0; i < list.length; i++) {\n', '            tempAddress = list[i];\n', '            if (tempAddress == address(0)) {\n', '                break;\n', '            }\n', '            if (tempAddress == currentAddress) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function repeatability(address[] memory list) internal pure returns (bool) {\n', '        for (uint i = 0; i < list.length; i++) {\n', '            address address1 = list[i];\n', '            if (address1 == address(0)) {\n', '                break;\n', '            }\n', '            for (uint j = i + 1; j < list.length; j++) {\n', '                address address2 = list[j];\n', '                if (address2 == address(0)) {\n', '                    break;\n', '                }\n', '                if (address1 == address2) {\n', '                    return false;\n', '                }\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function ecrecovery(bytes32 hash, bytes memory sig) internal view returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '        if (sig.length != signatureLength) {\n', '            return address(0);\n', '        }\n', '        assembly {\n', '            r := mload(add(sig, 32))\n', '            s := mload(add(sig, 64))\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '        // https://github.com/ethereum/go-ethereum/issues/2053\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '        if (v != 27 && v != 28) {\n', '            return address(0);\n', '        }\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    function preValidateAddsAndRemoves(address[] memory adds, address[] memory removes) internal view {\n', '        // 校验adds\n', '        uint addLen = adds.length;\n', '        for (uint i = 0; i < addLen; i++) {\n', '            address add = adds[i];\n', '            require(add != address(0), "ERROR: Detected zero address in adds");\n', '            require(managers[add] == 0, "The address list that is being added already exists as a manager");\n', '        }\n', '        require(repeatability(adds), "Duplicate parameters for the address to join");\n', '        // 校验合约创建者不能被添加\n', '        require(validateRepeatability(owner, adds), "Contract creator cannot act as manager");\n', '        // 校验removes\n', '        require(repeatability(removes), "Duplicate parameters for the address to exit");\n', '        uint removeLen = removes.length;\n', '        for (uint i = 0; i < removeLen; i++) {\n', '            address remove = removes[i];\n', '            require(seedManagers[remove] == 0, "Can\'t exit seed manager");\n', '            require(managers[remove] == 1, "There are addresses in the exiting address list that are not manager");\n', '        }\n', '        require(managerArray.length + adds.length - removes.length <= max_managers, "Exceeded the maximum number of managers");\n', '    }\n', '\n', '    /*\n', '     根据 `当前有效管理员数量` 和 `最小签名比例` 计算最小签名数量，向上取整\n', '    */\n', '    function calMinSignatures(uint managerCounts) internal view returns (uint8) {\n', '        require(managerCounts > 0, "Manager Can\'t empty.");\n', '        uint numerator = rate * managerCounts + DENOMINATOR - 1;\n', '        return uint8(numerator / DENOMINATOR);\n', '    }\n', '    function removeManager(address[] memory removes) internal {\n', '        if (removes.length == 0) {\n', '            return;\n', '        }\n', '        for (uint i = 0; i < removes.length; i++) {\n', '            delete managers[removes[i]];\n', '        }\n', '        // 遍历修改前管理员列表\n', '        for (uint i = 0; i < managerArray.length; i++) {\n', '            if (managers[managerArray[i]] == 0) {\n', '                delete managerArray[i];\n', '            }\n', '        }\n', '        uint tempIndex = 0x10;\n', '        for (uint i = 0; i<managerArray.length; i++) {\n', '            address temp = managerArray[i];\n', '            if (temp == address(0)) {\n', '                if (tempIndex == 0x10) tempIndex = i;\n', '                continue;\n', '            } else if (tempIndex != 0x10) {\n', '                managerArray[tempIndex] = temp;\n', '                tempIndex++;\n', '            }\n', '        }\n', '        managerArray.length -= removes.length;\n', '    }\n', '    function addManager(address[] memory adds) internal {\n', '        if (adds.length == 0) {\n', '            return;\n', '        }\n', '        for (uint i = 0; i < adds.length; i++) {\n', '            address add = adds[i];\n', '            if(managers[add] == 0) {\n', '                managers[add] = 1;\n', '                managerArray.push(add);\n', '            }\n', '        }\n', '    }\n', '    function completeTx(string memory txKey, bytes32 keccak256Hash, uint8 e) internal {\n', '        completedTxs[txKey] = e;\n', '        completedKeccak256s[keccak256Hash] = e;\n', '    }\n', '    function validateTransferERC20(address ERC20, address to, uint256 amount) internal view {\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(address(this) != ERC20, "Do nothing by yourself");\n', '        require(ERC20.isContract(), "The address is not a contract address");\n', '        if (isMinterERC20(ERC20)) {\n', '            // 定制ERC20验证结束\n', '            return;\n', '        }\n', '        IERC20 token = IERC20(ERC20);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(balance >= amount, "No enough balance of token");\n', '    }\n', '    function transferERC20(address ERC20, address to, uint256 amount) internal {\n', '        if (isMinterERC20(ERC20)) {\n', '            // 定制的ERC20，跨链转入以太坊网络即增发\n', '            IERC20Minter minterToken = IERC20Minter(ERC20);\n', '            minterToken.mint(to, amount);\n', '            return;\n', '        }\n', '        IERC20 token = IERC20(ERC20);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(balance >= amount, "No enough balance of token");\n', '        token.safeTransfer(to, amount);\n', '    }\n', '    function closeUpgrade() public isOwner {\n', '        require(upgrade, "Denied");\n', '        upgrade = false;\n', '    }\n', '    function upgradeContractS1() public isOwner {\n', '        require(upgrade, "Denied");\n', '        require(upgradeContractAddress != address(0), "ERROR: transfer to the zero address");\n', '        address(uint160(upgradeContractAddress)).transfer(address(this).balance);\n', '    }\n', '    function upgradeContractS2(address ERC20) public isOwner {\n', '        require(upgrade, "Denied");\n', '        require(upgradeContractAddress != address(0), "ERROR: transfer to the zero address");\n', '        require(address(this) != ERC20, "Do nothing by yourself");\n', '        require(ERC20.isContract(), "The address is not a contract address");\n', '        IERC20 token = IERC20(ERC20);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(balance >= 0, "No enough balance of token");\n', '        token.safeTransfer(upgradeContractAddress, balance);\n', '        if (isMinterERC20(ERC20)) {\n', '            // 定制的ERC20，转移增发销毁权限到新多签合约\n', '            IERC20Minter minterToken = IERC20Minter(ERC20);\n', '            minterToken.replaceMinter(upgradeContractAddress);\n', '        }\n', '    }\n', '\n', '    // 是否定制的ERC20\n', '    function isMinterERC20(address ERC20) public view returns (bool) {\n', '        return minterERC20s[ERC20] > 0;\n', '    }\n', '\n', '    // 登记定制的ERC20\n', '    function registerMinterERC20(address ERC20) public isOwner {\n', '        require(address(this) != ERC20, "Do nothing by yourself");\n', '        require(ERC20.isContract(), "The address is not a contract address");\n', '        require(!isMinterERC20(ERC20), "This address has already been registered");\n', '        minterERC20s[ERC20] = 1;\n', '    }\n', '\n', '    // 取消登记定制的ERC20\n', '    function unregisterMinterERC20(address ERC20) public isOwner {\n', '        require(isMinterERC20(ERC20), "This address is not registered");\n', '        delete minterERC20s[ERC20];\n', '    }\n', '\n', '    // 从eth网络跨链转出资产(ETH or ERC20)\n', '    function crossOut(string memory to, uint256 amount, address ERC20) public payable returns (bool) {\n', '        address from = msg.sender;\n', '        require(amount > 0, "ERROR: Zero amount");\n', '        if (ERC20 != address(0)) {\n', '            require(msg.value == 0, "ERC20: Does not accept Ethereum Coin");\n', '            require(ERC20.isContract(), "The address is not a contract address");\n', '            IERC20 token = IERC20(ERC20);\n', '            uint256 allowance = token.allowance(from, address(this));\n', '            require(allowance >= amount, "No enough amount for authorization");\n', '            uint256 fromBalance = token.balanceOf(from);\n', '            require(fromBalance >= amount, "No enough balance of the token");\n', '            token.safeTransferFrom(from, address(this), amount);\n', '            if (isMinterERC20(ERC20)) {\n', '                // 定制的ERC20，从以太坊网络跨链转出token即销毁\n', '                IERC20Minter minterToken = IERC20Minter(ERC20);\n', '                minterToken.burn(amount);\n', '            }\n', '        } else {\n', '            require(msg.value == amount, "Inconsistency Ethereum amount");\n', '        }\n', '        emit CrossOutFunds(from, to, amount, ERC20);\n', '        return true;\n', '    }\n', '\n', '    function isCompletedTx(string memory txKey) public view returns (bool){\n', '        return completedTxs[txKey] > 0;\n', '    }\n', '    function ifManager(address _manager) public view returns (bool) {\n', '        return managers[_manager] == 1;\n', '    }\n', '    function allManagers() public view returns (address[] memory) {\n', '        return managerArray;\n', '    }\n', '    event DepositFunds(address from, uint amount);\n', '    event CrossOutFunds(address from, string to, uint amount, address ERC20);\n', '    event TransferFunds(address to, uint amount);\n', '    event TxWithdrawCompleted(string txKey);\n', '    event TxManagerChangeCompleted(string txKey);\n', '    event TxUpgradeCompleted(string txKey);\n', '}']