['// SPDX-License-Identifier: MIT\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity 0.6.4;\n', '\n', 'interface IInterestRateModel {\n', '    function utilizationRate(\n', '        uint256 cash,\n', '        uint256 borrows,\n', '        uint256 reserves\n', '    ) external pure returns (uint256);\n', '\n', '    function getBorrowRate(\n', '        uint256 cash,\n', '        uint256 borrows,\n', '        uint256 reserves\n', '    ) external view returns (uint256);\n', '\n', '    function getSupplyRate(\n', '        uint256 cash,\n', '        uint256 borrows,\n', '        uint256 reserves,\n', '        uint256 reserveFactorMantissa\n', '    ) external view returns (uint256);\n', '\n', '    function APR(\n', '        uint256 cash,\n', '        uint256 borrows,\n', '        uint256 reserves\n', '    ) external view returns (uint256);\n', '\n', '    function APY(\n', '        uint256 cash,\n', '        uint256 borrows,\n', '        uint256 reserves,\n', '        uint256 reserveFactorMantissa\n', '    ) external view returns (uint256);\n', '}\n', '\n', 'interface IBankController {\n', '    function getCashPrior(address underlying) external view returns (uint256);\n', '\n', '    function getCashAfter(address underlying, uint256 msgValue)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getFTokeAddress(address underlying)\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function transferToUser(\n', '        address token,\n', '        address payable user,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function transferIn(\n', '        address account,\n', '        address underlying,\n', '        uint256 amount\n', '    ) external payable;\n', '\n', '    function borrowCheck(\n', '        address account,\n', '        address underlying,\n', '        address fToken,\n', '        uint256 borrowAmount\n', '    ) external;\n', '\n', '    function repayCheck(address underlying) external;\n', '\n', '    function rewardForByType(\n', '        address account,\n', '        uint256 gasSpend,\n', '        uint256 gasPrice,\n', '        uint256 rewardType\n', '    ) external;\n', '\n', '    function liquidateBorrowCheck(\n', '        address fTokenBorrowed,\n', '        address fTokenCollateral,\n', '        address borrower,\n', '        address liquidator,\n', '        uint256 repayAmount\n', '    ) external;\n', '\n', '    function liquidateTokens(\n', '        address fTokenBorrowed,\n', '        address fTokenCollateral,\n', '        uint256 actualRepayAmount\n', '    ) external view returns (uint256);\n', '\n', '    function withdrawCheck(\n', '        address fToken,\n', '        address withdrawer,\n', '        uint256 withdrawTokens\n', '    ) external view returns (uint256);\n', '\n', '    function transferCheck(\n', '        address fToken,\n', '        address src,\n', '        address dst,\n', '        uint256 transferTokens\n', '    ) external;\n', '\n', '    function marketsContains(address fToken) external view returns (bool);\n', '\n', '    function seizeCheck(address cTokenCollateral, address cTokenBorrowed)\n', '        external;\n', '\n', '    function mintCheck(address underlying, address minter) external;\n', '\n', '    function addReserves(address underlying, uint256 addAmount)\n', '        external\n', '        payable;\n', '\n', '    function reduceReserves(\n', '        address underlying,\n', '        address payable account,\n', '        uint256 reduceAmount\n', '    ) external;\n', '\n', '    function calcMaxBorrowAmount(address user, address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calcMaxWithdrawAmount(address user, address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calcMaxCashOutAmount(address user, address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calcMaxBorrowAmountWithRatio(address user, address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferEthGasCost() external view returns (uint256);\n', '\n', '    function isFTokenValid(address fToken) external view returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a < b) {\n', '            return b - a;\n', '        }\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract Exponential {\n', '    uint256 constant expScale = 1e18;\n', '    uint256 constant doubleScale = 1e36;\n', '    uint256 constant halfExpScale = expScale / 2;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    function getExp(uint256 num, uint256 denom)\n', '        public\n', '        pure\n', '        returns (uint256 rational)\n', '    {\n', '        rational = num.mul(expScale).div(denom);\n', '    }\n', '\n', '    function getDiv(uint256 num, uint256 denom)\n', '        public\n', '        pure\n', '        returns (uint256 rational)\n', '    {\n', '        rational = num.mul(expScale).div(denom);\n', '    }\n', '\n', '    function addExp(uint256 a, uint256 b) public pure returns (uint256 result) {\n', '        result = a.add(b);\n', '    }\n', '\n', '    function subExp(uint256 a, uint256 b) public pure returns (uint256 result) {\n', '        result = a.sub(b);\n', '    }\n', '\n', '    function mulExp(uint256 a, uint256 b) public pure returns (uint256) {\n', '        uint256 doubleScaledProduct = a.mul(b);\n', '\n', '        uint256 doubleScaledProductWithHalfScale = halfExpScale.add(\n', '            doubleScaledProduct\n', '        );\n', '\n', '        return doubleScaledProductWithHalfScale.div(expScale);\n', '    }\n', '\n', '    function divExp(uint256 a, uint256 b) public pure returns (uint256) {\n', '        return getDiv(a, b);\n', '    }\n', '\n', '    function mulExp3(\n', '        uint256 a,\n', '        uint256 b,\n', '        uint256 c\n', '    ) public pure returns (uint256) {\n', '        return mulExp(mulExp(a, b), c);\n', '    }\n', '\n', '    function mulScalar(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256 scaled)\n', '    {\n', '        scaled = a.mul(scalar);\n', '    }\n', '\n', '    function mulScalarTruncate(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 product = mulScalar(a, scalar);\n', '        return truncate(product);\n', '    }\n', '\n', '    function mulScalarTruncateAddUInt(\n', '        uint256 a,\n', '        uint256 scalar,\n', '        uint256 addend\n', '    ) public pure returns (uint256) {\n', '        uint256 product = mulScalar(a, scalar);\n', '        return truncate(product).add(addend);\n', '    }\n', '\n', '    function divScalarByExpTruncate(uint256 scalar, uint256 divisor)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 fraction = divScalarByExp(scalar, divisor);\n', '        return truncate(fraction);\n', '    }\n', '\n', '    function divScalarByExp(uint256 scalar, uint256 divisor)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 numerator = expScale.mul(scalar);\n', '        return getExp(numerator, divisor);\n', '    }\n', '\n', '    function divScalar(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a.div(scalar);\n', '    }\n', '\n', '    function truncate(uint256 exp) public pure returns (uint256) {\n', '        return exp.div(expScale);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'library EthAddressLib {\n', '    /**\n', '     * @dev returns the address used within the protocol to identify ETH\n', '     * @return the address assigned to ETH\n', '     */\n', '    function ethAddress() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    }\n', '}\n', '\n', 'interface IFToken is IERC20 {\n', '    function mint(address user, uint256 amount) external returns (bytes memory);\n', '\n', '    function borrow(address borrower, uint256 borrowAmount)\n', '        external\n', '        returns (bytes memory);\n', '\n', '    function withdraw(\n', '        address payable withdrawer,\n', '        uint256 withdrawTokensIn,\n', '        uint256 withdrawAmountIn\n', '    ) external returns (uint256, bytes memory);\n', '\n', '    function underlying() external view returns (address);\n', '\n', '    function accrueInterest() external;\n', '\n', '    function getAccountState(address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function MonitorEventCallback(\n', '        address who,\n', '        bytes32 funcName,\n', '        bytes calldata payload\n', '    ) external;\n', '\n', '    //用户存借取还操作后的兑换率\n', '    function exchangeRateCurrent() external view returns (uint256 exchangeRate);\n', '\n', '    function repay(address borrower, uint256 repayAmount)\n', '        external\n', '        returns (uint256, bytes memory);\n', '\n', '    function borrowBalanceStored(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function exchangeRateStored() external view returns (uint256 exchangeRate);\n', '\n', '    function liquidateBorrow(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        address fTokenCollateral\n', '    ) external returns (bytes memory);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '\n', '    function _reduceReserves(uint256 reduceAmount) external;\n', '\n', '    function _addReservesFresh(uint256 addAmount) external;\n', '\n', '    function cancellingOut(address striker)\n', '        external\n', '        returns (bool strikeOk, bytes memory strikeLog);\n', '\n', '    function APR() external view returns (uint256);\n', '\n', '    function APY() external view returns (uint256);\n', '\n', '    function calcBalanceOfUnderlying(address owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function borrowSafeRatio() external view returns (uint256);\n', '\n', '    function tokenCash(address token, address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getBorrowRate() external view returns (uint256);\n', '\n', '    function addTotalCash(uint256 _addAmount) external;\n', '    function subTotalCash(uint256 _subAmount) external;\n', '\n', '    function totalCash() external view returns (uint256);\n', '}\n', '\n', 'interface IBank {\n', '    function MonitorEventCallback(bytes32 funcName, bytes calldata payload)\n', '        external;\n', '\n', '    function deposit(address token, uint256 amount) external payable;\n', '\n', '    function borrow(address token, uint256 amount) external;\n', '\n', '    function withdraw(address underlying, uint256 withdrawTokens) external;\n', '\n', '    function withdrawUnderlying(address underlying, uint256 amount) external;\n', '\n', '    function repay(address token, uint256 amount) external payable;\n', '\n', '    function liquidateBorrow(\n', '        address borrower,\n', '        address underlyingBorrow,\n', '        address underlyingCollateral,\n', '        uint256 repayAmount\n', '    ) external payable;\n', '\n', '    function tokenIn(address token, uint256 amountIn) external payable;\n', '\n', '    function tokenOut(address token, uint256 amountOut) external;\n', '\n', '    function cancellingOut(address token) external;\n', '\n', '    function paused() external view returns (bool);\n', '}\n', '\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(\n', '            initializing || isConstructor() || !initialized,\n', '            "Contract instance has already been initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract FToken is Exponential, Initializable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    mapping(address => mapping(address => uint256)) internal transferAllowances;\n', '\n', '    uint256 public initialExchangeRate;\n', '\n', '    address public admin;\n', '\n', '    uint256 public totalBorrows;\n', '\n', '    uint256 public totalReserves;\n', '\n', '    uint256 public reserveFactor;\n', '\n', '    uint256 public borrowIndex;\n', '\n', '    uint256 internal constant borrowRateMax = 0.0005e16;\n', '\n', '    uint256 public accrualBlockNumber;\n', '\n', '    IInterestRateModel public interestRateModel;\n', '\n', '    // 该 fToken 所代表的原生代币\n', '    address public underlying;\n', '\n', '    mapping(address => uint256) public accountTokens;\n', '\n', '    IBankController public controller;\n', '\n', '    uint256 public borrowSafeRatio;\n', '\n', '    address public bank; // bank主合约入口地址\n', '\n', '    bool internal _notEntered;\n', '\n', '    uint256 public constant ONE = 1e18;\n', '\n', '    // 借款人账户\n', '    struct BorrowSnapshot {\n', '        uint256 principal;\n', '        uint256 interestIndex;\n', '    }\n', '\n', '    mapping(address => BorrowSnapshot) public accountBorrows;\n', '    uint256 public totalCash;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    function initialize(\n', '        uint256 _initialExchangeRate,\n', '        address _controller,\n', '        address _initialInterestRateModel,\n', '        address _underlying,\n', '        address _bank,\n', '        uint256 _borrowSafeRatio,\n', '        string memory _name,\n', '        string memory _symbol,\n', '        uint8 _decimals\n', '    ) public initializer {\n', '        initialExchangeRate = _initialExchangeRate;\n', '        controller = IBankController(_controller);\n', '        interestRateModel = IInterestRateModel(_initialInterestRateModel);\n', '        admin = msg.sender;\n', '        underlying = _underlying;\n', '        borrowSafeRatio = _borrowSafeRatio;\n', '        accrualBlockNumber = getBlockNumber();\n', '        borrowIndex = ONE;\n', '        bank = _bank;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        _notEntered = true;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "require admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyBank {\n', '        require(msg.sender == bank, "require admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == address(controller), "require controller");\n', '        _;\n', '    }\n', '\n', '    modifier onlyRestricted {\n', '        require(\n', '            msg.sender == admin ||\n', '                msg.sender == bank ||\n', '                msg.sender == address(controller) ||\n', '                controller.marketsContains(msg.sender),\n', '            "only restricted user"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyBankComponent {\n', '        require(\n', '            msg.sender == bank ||\n', '                msg.sender == address(controller) ||\n', '                msg.sender == address(this) ||\n', '                controller.marketsContains(msg.sender),\n', '            "only bank component"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier whenUnpaused {\n', '        require(!IBank(bank).paused(), "System paused");\n', '        _;\n', '    }\n', '\n', '    function _setController(address _controller) external onlyAdmin {\n', '        controller = IBankController(_controller);\n', '    }\n', '\n', '    function tokenCash(address token, address account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            token != EthAddressLib.ethAddress()\n', '                ? IERC20(token).balanceOf(account)\n', '                : address(account).balance;\n', '    }\n', '\n', '    struct TransferLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_transferred;\n', '        uint256 account_balance;\n', '        address payee_address;\n', '        uint256 payee_balance;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     */\n', '    function transfer(address dst, uint256 amount)\n', '        external\n', '        nonReentrant\n', '        returns (bool)\n', '    {\n', '        // spender - src - dst\n', '        transferTokens(msg.sender, msg.sender, dst, amount);\n', '\n', '        TransferLogStruct memory tls = TransferLogStruct(\n', '            msg.sender,\n', '            underlying,\n', '            address(this),\n', '            amount,\n', '            balanceOf(msg.sender),\n', '            dst,\n', '            balanceOf(dst),\n', '            tokenCash(underlying, address(controller))\n', '        );\n', '\n', '        IBank(bank).MonitorEventCallback("Transfer", abi.encode(tls));\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     */\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 amount\n', '    ) external nonReentrant returns (bool) {\n', '        // spender - src - dst\n', '        transferTokens(msg.sender, src, dst, amount);\n', '\n', '        TransferLogStruct memory tls = TransferLogStruct(\n', '            msg.sender,\n', '            underlying,\n', '            address(this),\n', '            amount,\n', '            balanceOf(msg.sender),\n', '            dst,\n', '            balanceOf(dst),\n', '            tokenCash(underlying, address(controller))\n', '        );\n', '\n', '        IBank(bank).MonitorEventCallback("TransferFrom", abi.encode(tls));\n', '\n', '        return true;\n', '    }\n', '\n', '    // tokens -> 转账的 fToken 的数量\n', '    function transferTokens(\n', '        address spender,\n', '        address src,\n', '        address dst,\n', '        uint256 tokens\n', '    ) internal whenUnpaused returns (bool) {\n', '        //accrueInterest();\n', '        controller.transferCheck(address(this), src, dst, tokens);\n', '\n', '        require(src != dst, "Cannot transfer to self");\n', '\n', '        uint256 startingAllowance = 0;\n', '        if (spender == src) {\n', '            startingAllowance = uint256(-1);\n', '        } else {\n', '            startingAllowance = transferAllowances[src][spender];\n', '        }\n', '\n', '        uint256 allowanceNew = startingAllowance.sub(tokens);\n', '\n', '        accountTokens[src] = accountTokens[src].sub(tokens);\n', '        accountTokens[dst] = accountTokens[dst].add(tokens);\n', '\n', '        if (startingAllowance != uint256(-1)) {\n', '            transferAllowances[src][spender] = allowanceNew;\n', '        }\n', '\n', '        emit Transfer(src, dst, tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (-1 means infinite)\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        address src = msg.sender;\n', '        transferAllowances[src][spender] = amount;\n', '        emit Approval(src, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the current allowance from `owner` for `spender`\n', '     * @param owner The address of the account which owns the tokens to be spent\n', '     * @param spender The address of the account which may transfer tokens\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return transferAllowances[owner][spender];\n', '    }\n', '\n', '    struct MintLocals {\n', '        uint256 exchangeRate;\n', '        uint256 mintTokens;\n', '        uint256 totalSupplyNew;\n', '        uint256 accountTokensNew;\n', '        uint256 actualMintAmount;\n', '    }\n', '\n', '    struct DepositLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_deposited;\n', '        uint256 underlying_deposited;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_balance;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    // 存款记账\n', '    function mint(address user, uint256 amount)\n', '        external\n', '        onlyBank\n', '        nonReentrant\n', '        returns (bytes memory)\n', '    {\n', '        accrueInterest();\n', '        return mintInternal(user, amount);\n', '    }\n', '\n', '    // 存款记账\n', '    function mintInternal(address user, uint256 amount)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        MintLocals memory tmp;\n', '        controller.mintCheck(underlying, user);\n', '        tmp.exchangeRate = exchangeRateStored();\n', '        tmp.mintTokens = divScalarByExpTruncate(amount, tmp.exchangeRate);\n', '        tmp.totalSupplyNew = addExp(totalSupply, tmp.mintTokens);\n', '        tmp.accountTokensNew = addExp(accountTokens[user], tmp.mintTokens);\n', '        totalSupply = tmp.totalSupplyNew;\n', '        accountTokens[user] = tmp.accountTokensNew;\n', '\n', '        uint256 preCalcTokenCash = tokenCash(underlying, address(controller))\n', '            .add(amount);\n', '\n', '        DepositLogStruct memory dls = DepositLogStruct(\n', '            user,\n', '            underlying,\n', '            address(this),\n', '            tmp.mintTokens,\n', '            amount,\n', '            exchangeRateAfter(amount), //cheque_token_value, 存之后的交换率（预判）\n', '            interestRateModel.getBorrowRate(\n', '                preCalcTokenCash,\n', '                totalBorrows,\n', '                totalReserves\n', '            ), //loan_interest_rate 借款利率,存之后的价款利率\n', '            tokenCash(address(this), user),\n', '            preCalcTokenCash\n', '        );\n', '\n', '        emit Transfer(address(0), user, tmp.mintTokens);\n', '\n', '        return abi.encode(dls);\n', '    }\n', '\n', '    struct BorrowLocals {\n', '        uint256 accountBorrows;\n', '        uint256 accountBorrowsNew;\n', '        uint256 totalBorrowsNew;\n', '    }\n', '\n', '    struct BorrowLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_borrowed;\n', '        uint256 interest_accrued;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_debt;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    // 用户借钱\n', '    function borrow(address payable borrower, uint256 borrowAmount)\n', '        external\n', '        onlyBank\n', '        nonReentrant\n', '        returns (bytes memory)\n', '    {\n', '        accrueInterest();\n', '        return borrowInternal(borrower, borrowAmount);\n', '    }\n', '\n', '    // 用户借钱\n', '    function borrowInternal(address payable borrower, uint256 borrowAmount)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        controller.borrowCheck(\n', '            borrower,\n', '            underlying,\n', '            address(this),\n', '            mulScalarTruncate(borrowAmount, borrowSafeRatio)\n', '        );\n', '\n', '        require(\n', '            controller.getCashPrior(underlying) >= borrowAmount,\n', '            "Insufficient balance"\n', '        );\n', '\n', '        BorrowLocals memory tmp;\n', '        uint256 lastPrincipal = accountBorrows[borrower].principal;\n', '        tmp.accountBorrows = borrowBalanceStoredInternal(borrower);\n', '        tmp.accountBorrowsNew = addExp(tmp.accountBorrows, borrowAmount);\n', '        tmp.totalBorrowsNew = addExp(totalBorrows, borrowAmount);\n', '\n', '        accountBorrows[borrower].principal = tmp.accountBorrowsNew;\n', '        accountBorrows[borrower].interestIndex = borrowIndex;\n', '        totalBorrows = tmp.totalBorrowsNew;\n', '\n', '        controller.transferToUser(underlying, borrower, borrowAmount);\n', '        subTotalCash(borrowAmount);\n', '\n', '        BorrowLogStruct memory bls = BorrowLogStruct(\n', '            borrower,\n', '            underlying,\n', '            address(this),\n', '            borrowAmount,\n', '            SafeMath.abs(tmp.accountBorrows, lastPrincipal),\n', '            exchangeRateStored(),\n', '            getBorrowRate(),\n', '            accountBorrows[borrower].principal,\n', '            tokenCash(underlying, address(controller))\n', '        );\n', '\n', '        return abi.encode(bls);\n', '    }\n', '\n', '    struct RepayLocals {\n', '        uint256 repayAmount;\n', '        uint256 borrowerIndex;\n', '        uint256 accountBorrows;\n', '        uint256 accountBorrowsNew;\n', '        uint256 totalBorrowsNew;\n', '        uint256 actualRepayAmount;\n', '    }\n', '\n', '    // 计算兑换率\n', '    function exchangeRateStored() public view returns (uint256 exchangeRate) {\n', '        return calcExchangeRate(totalBorrows, totalReserves);\n', '    }\n', '\n', '    function calcExchangeRate(uint256 _totalBorrows, uint256 _totalReserves)\n', '        public\n', '        view\n', '        returns (uint256 exchangeRate)\n', '    {\n', '        uint256 _totalSupply = totalSupply;\n', '        if (_totalSupply == 0) {\n', '            return initialExchangeRate;\n', '        } else {\n', '            /*\n', '             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n', '             */\n', '            uint256 totalCash = controller.getCashPrior(underlying);\n', '            uint256 cashPlusBorrowsMinusReserves = subExp(\n', '                addExp(totalCash, _totalBorrows),\n', '                _totalReserves\n', '            );\n', '            exchangeRate = getDiv(cashPlusBorrowsMinusReserves, _totalSupply);\n', '        }\n', '    }\n', '\n', '    // 计算兑换率(预判)，在实际转账之前调用，只是用于发事件，用户后端审计\n', '    function exchangeRateAfter(uint256 transferInAmout)\n', '        public\n', '        view\n', '        returns (uint256 exchangeRate)\n', '    {\n', '        uint256 _totalSupply = totalSupply;\n', '        if (_totalSupply == 0) {\n', '            // 如果市场是初始化状态，那么返回初始兑换率\n', '            return initialExchangeRate;\n', '        } else {\n', '            /*\n', '             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n', '             */\n', '            uint256 totalCash = controller.getCashAfter(\n', '                underlying,\n', '                transferInAmout\n', '            );\n', '            uint256 cashPlusBorrowsMinusReserves = subExp(\n', '                addExp(totalCash, totalBorrows),\n', '                totalReserves\n', '            );\n', '            exchangeRate = getDiv(cashPlusBorrowsMinusReserves, _totalSupply);\n', '        }\n', '    }\n', '\n', '    function balanceOfUnderlying(address owner) external returns (uint256) {\n', '        // 获取利率\n', '        uint256 exchangeRate = exchangeRateCurrent();\n', '        // 利率乘余额\n', '        uint256 balance = mulScalarTruncate(exchangeRate, accountTokens[owner]);\n', '        return balance;\n', '    }\n', '\n', '    function calcBalanceOfUnderlying(address owner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        (, , uint256 _totalBorrows, uint256 _trotalReserves) = peekInterest();\n', '\n', '        uint256 _exchangeRate = calcExchangeRate(\n', '            _totalBorrows,\n', '            _trotalReserves\n', '        );\n', '        // 利率乘余额\n', '        uint256 balance = mulScalarTruncate(\n', '            _exchangeRate,\n', '            accountTokens[owner]\n', '        );\n', '        return balance;\n', '    }\n', '\n', '    function exchangeRateCurrent() public nonReentrant returns (uint256) {\n', '        accrueInterest();\n', '        return exchangeRateStored();\n', '    }\n', '\n', '    // 获取账户信息\n', '    function getAccountState(address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 fTokenBalance = accountTokens[account];\n', '        uint256 borrowBalance = borrowBalanceStoredInternal(account);\n', '        uint256 exchangeRate = exchangeRateStored();\n', '\n', '        return (fTokenBalance, borrowBalance, exchangeRate);\n', '    }\n', '\n', '    struct WithdrawLocals {\n', '        uint256 exchangeRate;\n', '        uint256 withdrawTokens;\n', '        uint256 withdrawAmount;\n', '        uint256 totalSupplyNew;\n', '        uint256 accountTokensNew;\n', '    }\n', '\n', '    struct WithdrawLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_withdrawed;\n', '        uint256 underlying_withdrawed;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_balance;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    // todo onlyController\n', '    function withdraw(\n', '        address payable withdrawer,\n', '        uint256 withdrawTokensIn,\n', '        uint256 withdrawAmountIn\n', '    ) external onlyBank nonReentrant returns (uint256, bytes memory) {\n', '        accrueInterest();\n', '        return withdrawInternal(withdrawer, withdrawTokensIn, withdrawAmountIn);\n', '    }\n', '\n', '    function withdrawInternal(\n', '        address payable withdrawer,\n', '        uint256 withdrawTokensIn,\n', '        uint256 withdrawAmountIn\n', '    ) internal returns (uint256, bytes memory) {\n', '        // 一个是想要兑换 cTokens 的数量，一个是想要兑换 asset 的数量，必须有一个是 0\n', '        require(\n', '            withdrawTokensIn == 0 || withdrawAmountIn == 0,\n', '            "withdraw parameter not valid"\n', '        );\n', '        WithdrawLocals memory tmp;\n', '\n', '        tmp.exchangeRate = exchangeRateStored();\n', '\n', '        if (withdrawTokensIn > 0) {\n', '            tmp.withdrawTokens = withdrawTokensIn;\n', '            tmp.withdrawAmount = mulScalarTruncate(\n', '                tmp.exchangeRate,\n', '                withdrawTokensIn\n', '            );\n', '        } else {\n', '            tmp.withdrawTokens = divScalarByExpTruncate(\n', '                withdrawAmountIn,\n', '                tmp.exchangeRate\n', '            );\n', '            tmp.withdrawAmount = withdrawAmountIn;\n', '        }\n', '\n', '        controller.withdrawCheck(address(this), withdrawer, tmp.withdrawTokens);\n', '\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '\n', '        tmp.totalSupplyNew = totalSupply.sub(tmp.withdrawTokens);\n', '        tmp.accountTokensNew = accountTokens[withdrawer].sub(\n', '            tmp.withdrawTokens\n', '        );\n', '\n', '        require(\n', '            controller.getCashPrior(underlying) >= tmp.withdrawAmount,\n', '            "Insufficient money"\n', '        );\n', '\n', '        controller.transferToUser(underlying, withdrawer, tmp.withdrawAmount);\n', '        subTotalCash(tmp.withdrawAmount);\n', '\n', '        totalSupply = tmp.totalSupplyNew;\n', '        accountTokens[withdrawer] = tmp.accountTokensNew;\n', '\n', '        WithdrawLogStruct memory wls = WithdrawLogStruct(\n', '            withdrawer,\n', '            underlying,\n', '            address(this),\n', '            tmp.withdrawTokens,\n', '            tmp.withdrawAmount,\n', '            exchangeRateStored(),\n', '            getBorrowRate(),\n', '            tokenCash(address(this), withdrawer),\n', '            tokenCash(underlying, address(controller))\n', '        );\n', '\n', '        emit Transfer(withdrawer, address(0), tmp.withdrawTokens);\n', '\n', '        return (tmp.withdrawAmount, abi.encode(wls));\n', '    }\n', '\n', '    function strikeWithdrawInternal(\n', '        address withdrawer,\n', '        uint256 withdrawTokensIn,\n', '        uint256 withdrawAmountIn\n', '    ) internal returns (uint256, bytes memory) {\n', '        // 一个是想要兑换 cTokens 的数量，一个是想要兑换 asset 的数量，必须有一个是 0\n', '        require(\n', '            withdrawTokensIn == 0 || withdrawAmountIn == 0,\n', '            "withdraw parameter not valid"\n', '        );\n', '        WithdrawLocals memory tmp;\n', '\n', '        tmp.exchangeRate = exchangeRateStored();\n', '\n', '        if (withdrawTokensIn > 0) {\n', '            tmp.withdrawTokens = withdrawTokensIn;\n', '            tmp.withdrawAmount = mulScalarTruncate(\n', '                tmp.exchangeRate,\n', '                withdrawTokensIn\n', '            );\n', '        } else {\n', '            tmp.withdrawTokens = divScalarByExpTruncate(\n', '                withdrawAmountIn,\n', '                tmp.exchangeRate\n', '            );\n', '            tmp.withdrawAmount = withdrawAmountIn;\n', '        }\n', '\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '\n', '        tmp.totalSupplyNew = totalSupply.sub(tmp.withdrawTokens);\n', '        tmp.accountTokensNew = accountTokens[withdrawer].sub(\n', '            tmp.withdrawTokens\n', '        );\n', '\n', '        totalSupply = tmp.totalSupplyNew;\n', '        accountTokens[withdrawer] = tmp.accountTokensNew;\n', '\n', '        uint256 preCalcTokenCash = tokenCash(underlying, address(controller))\n', '            .add(tmp.withdrawAmount);\n', '\n', '        WithdrawLogStruct memory wls = WithdrawLogStruct(\n', '            withdrawer,\n', '            underlying,\n', '            address(this),\n', '            tmp.withdrawTokens,\n', '            tmp.withdrawAmount,\n', '            exchangeRateStored(),\n', '            interestRateModel.getBorrowRate(\n', '                preCalcTokenCash,\n', '                totalBorrows,\n', '                totalReserves\n', '            ),\n', '            tokenCash(address(this), withdrawer),\n', '            preCalcTokenCash\n', '        );\n', '\n', '        emit Transfer(withdrawer, address(0), tmp.withdrawTokens);\n', '\n', '        return (tmp.withdrawAmount, abi.encode(wls));\n', '    }\n', '\n', '    // 更新利息\n', '    function accrueInterest() public onlyRestricted {\n', '        uint256 currentBlockNumber = getBlockNumber();\n', '        uint256 accrualBlockNumberPrior = accrualBlockNumber;\n', '\n', '        // 太短 零利息\n', '        if (accrualBlockNumberPrior == currentBlockNumber) {\n', '            return;\n', '        }\n', '\n', '        uint256 cashPrior = controller.getCashPrior(underlying);\n', '        uint256 borrowsPrior = totalBorrows;\n', '        uint256 reservesPrior = totalReserves;\n', '        uint256 borrowIndexPrior = borrowIndex;\n', '\n', '        // // 计算借贷利率\n', '        uint256 borrowRate = interestRateModel.getBorrowRate(\n', '            cashPrior,\n', '            borrowsPrior,\n', '            reservesPrior\n', '        );\n', '        // // 不能超过最大利率\n', '        require(borrowRate <= borrowRateMax, "borrow rate is too high");\n', '\n', '        // // 计算块差\n', '        uint256 blockDelta = currentBlockNumber.sub(accrualBlockNumberPrior);\n', '\n', '        /*\n', '         *  simpleInterestFactor = borrowRate * blockDelta\n', '         *  interestAccumulated = simpleInterestFactor * totalBorrows\n', '         *  totalBorrowsNew = interestAccumulated + totalBorrows\n', '         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n', '         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n', '         */\n', '\n', '        uint256 simpleInterestFactor;\n', '        uint256 interestAccumulated;\n', '        uint256 totalBorrowsNew;\n', '        uint256 totalReservesNew;\n', '        uint256 borrowIndexNew;\n', '\n', '        simpleInterestFactor = mulScalar(borrowRate, blockDelta);\n', '\n', '        interestAccumulated = divExp(\n', '            mulExp(simpleInterestFactor, borrowsPrior),\n', '            expScale\n', '        );\n', '\n', '        totalBorrowsNew = addExp(interestAccumulated, borrowsPrior);\n', '\n', '        totalReservesNew = addExp(\n', '            divExp(mulExp(reserveFactor, interestAccumulated), expScale),\n', '            reservesPrior\n', '        );\n', '\n', '        borrowIndexNew = addExp(\n', '            divExp(mulExp(simpleInterestFactor, borrowIndexPrior), expScale),\n', '            borrowIndexPrior\n', '        );\n', '\n', '        accrualBlockNumber = currentBlockNumber;\n', '        borrowIndex = borrowIndexNew;\n', '        totalBorrows = totalBorrowsNew;\n', '        totalReserves = totalReservesNew;\n', '\n', '        borrowRate = interestRateModel.getBorrowRate(\n', '            cashPrior,\n', '            totalBorrows,\n', '            totalReserves\n', '        );\n', '        // 不能超过最大利率\n', '        require(borrowRate <= borrowRateMax, "borrow rate is too high");\n', '    }\n', '\n', '    function peekInterest()\n', '        public\n', '        view\n', '        returns (\n', '            uint256 _accrualBlockNumber,\n', '            uint256 _borrowIndex,\n', '            uint256 _totalBorrows,\n', '            uint256 _totalReserves\n', '        )\n', '    {\n', '        _accrualBlockNumber = getBlockNumber();\n', '        uint256 accrualBlockNumberPrior = accrualBlockNumber;\n', '\n', '        // 太短 零利息\n', '        if (accrualBlockNumberPrior == _accrualBlockNumber) {\n', '            return (\n', '                accrualBlockNumber,\n', '                borrowIndex,\n', '                totalBorrows,\n', '                totalReserves\n', '            );\n', '        }\n', '\n', '        uint256 cashPrior = controller.getCashPrior(underlying);\n', '        uint256 borrowsPrior = totalBorrows;\n', '        uint256 reservesPrior = totalReserves;\n', '        uint256 borrowIndexPrior = borrowIndex;\n', '\n', '        // // 计算借贷利率\n', '        uint256 borrowRate = interestRateModel.getBorrowRate(\n', '            cashPrior,\n', '            borrowsPrior,\n', '            reservesPrior\n', '        );\n', '        // // 不能超过最大利率\n', '        require(borrowRate <= borrowRateMax, "borrow rate is too high");\n', '\n', '        // // 计算块差\n', '        uint256 blockDelta = _accrualBlockNumber.sub(accrualBlockNumberPrior);\n', '\n', '        /*\n', '         *  simpleInterestFactor = borrowRate * blockDelta\n', '         *  interestAccumulated = simpleInterestFactor * totalBorrows\n', '         *  totalBorrowsNew = interestAccumulated + totalBorrows\n', '         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n', '         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n', '         */\n', '\n', '        uint256 simpleInterestFactor;\n', '        uint256 interestAccumulated;\n', '        uint256 totalBorrowsNew;\n', '        uint256 totalReservesNew;\n', '        uint256 borrowIndexNew;\n', '\n', '        simpleInterestFactor = mulScalar(borrowRate, blockDelta);\n', '\n', '        interestAccumulated = divExp(\n', '            mulExp(simpleInterestFactor, borrowsPrior),\n', '            expScale\n', '        );\n', '\n', '        totalBorrowsNew = addExp(interestAccumulated, borrowsPrior);\n', '\n', '        totalReservesNew = addExp(\n', '            divExp(mulExp(reserveFactor, interestAccumulated), expScale),\n', '            reservesPrior\n', '        );\n', '\n', '        borrowIndexNew = addExp(\n', '            divExp(mulExp(simpleInterestFactor, borrowIndexPrior), expScale),\n', '            borrowIndexPrior\n', '        );\n', '\n', '        _borrowIndex = borrowIndexNew;\n', '        _totalBorrows = totalBorrowsNew;\n', '        _totalReserves = totalReservesNew;\n', '\n', '        borrowRate = interestRateModel.getBorrowRate(\n', '            cashPrior,\n', '            totalBorrows,\n', '            totalReserves\n', '        );\n', '        // 不能超过最大利率\n', '        require(borrowRate <= borrowRateMax, "borrow rate is too high");\n', '    }\n', '\n', '    function borrowBalanceCurrent(address account)\n', '        external\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        accrueInterest();\n', '        BorrowSnapshot memory borrowSnapshot = accountBorrows[account];\n', '        require(borrowSnapshot.interestIndex <= borrowIndex, "borrowIndex error");\n', '\n', '        return borrowBalanceStoredInternal(account);\n', '    }\n', '\n', '    function borrowBalanceStoredInternal(address user)\n', '        internal\n', '        view\n', '        returns (uint256 result)\n', '    {\n', '        // 借贷数量\n', '        BorrowSnapshot memory borrowSnapshot = accountBorrows[user];\n', '\n', '        if (borrowSnapshot.principal == 0) {\n', '            return 0;\n', '        }\n', '\n', '        result = mulExp(borrowSnapshot.principal, divExp(borrowIndex, borrowSnapshot.interestIndex));\n', '    }\n', '\n', '    function _setReserveFactorFresh(uint256 newReserveFactor)\n', '        external\n', '        onlyAdmin\n', '        nonReentrant\n', '    {\n', '        accrueInterest();\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        reserveFactor = newReserveFactor;\n', '    }\n', '\n', '    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        accrueInterest();\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        interestRateModel = newInterestRateModel;\n', '    }\n', '\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    function repay(address borrower, uint256 repayAmount)\n', '        external\n', '        onlyBank\n', '        nonReentrant\n', '        returns (uint256, bytes memory)\n', '    {\n', '        accrueInterest();\n', '        return repayInternal(borrower, repayAmount);\n', '    }\n', '\n', '    struct RepayLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_repayed;\n', '        uint256 interest_accrued;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_debt;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    function repayInternal(address borrower, uint256 repayAmount)\n', '        internal\n', '        returns (uint256, bytes memory)\n', '    {\n', '        controller.repayCheck(underlying);\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '\n', '        RepayLocals memory tmp;\n', '        uint256 lastPrincipal = accountBorrows[borrower].principal;\n', '        tmp.borrowerIndex = accountBorrows[borrower].interestIndex;\n', '        tmp.accountBorrows = borrowBalanceStoredInternal(borrower);\n', '\n', '        // -1 表示还最大\n', '        if (repayAmount == uint256(-1)) {\n', '            tmp.repayAmount = tmp.accountBorrows;\n', '        } else {\n', '            tmp.repayAmount = repayAmount;\n', '        }\n', '\n', '        tmp.accountBorrowsNew = tmp.accountBorrows.sub(tmp.repayAmount);\n', '        if (totalBorrows < tmp.repayAmount) {\n', '            tmp.totalBorrowsNew = 0;\n', '        } else {\n', '            tmp.totalBorrowsNew = totalBorrows.sub(tmp.repayAmount);\n', '        }\n', '\n', '        accountBorrows[borrower].principal = tmp.accountBorrowsNew;\n', '        accountBorrows[borrower].interestIndex = borrowIndex;\n', '        totalBorrows = tmp.totalBorrowsNew;\n', '\n', '        uint256 preCalcTokenCash = tokenCash(underlying, address(controller))\n', '            .add(tmp.repayAmount);\n', '\n', '        RepayLogStruct memory rls = RepayLogStruct(\n', '            borrower,\n', '            underlying,\n', '            address(this),\n', '            tmp.repayAmount,\n', '            SafeMath.abs(tmp.accountBorrows, lastPrincipal),\n', '            exchangeRateAfter(tmp.repayAmount), //repay之后的交换率\n', '            interestRateModel.getBorrowRate(\n', '                preCalcTokenCash,\n', '                totalBorrows,\n', '                totalReserves\n', '            ), //repay之后的借款利率\n', '            accountBorrows[borrower].principal,\n', '            preCalcTokenCash\n', '        );\n', '\n', '        return (tmp.repayAmount, abi.encode(rls));\n', '    }\n', '\n', '    function borrowBalanceStored(address account)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return borrowBalanceStoredInternal(account);\n', '    }\n', '\n', '    struct LiquidateBorrowLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 debt_written_off;\n', '        uint256 interest_accrued;\n', '        address debtor_address;\n', '        uint256 collateral_purchased;\n', '        address collateral_cheque_token_address;\n', '        uint256 debtor_balance;\n', '        uint256 debt_remaining;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_balance;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    function liquidateBorrow(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        FToken fTokenCollateral\n', '    ) public onlyBank nonReentrant returns (bytes memory) {\n', '        require(\n', '            controller.isFTokenValid(address(this)) &&\n', '                controller.isFTokenValid(address(fTokenCollateral)),\n', '            "Market not listed"\n', '        );\n', '        accrueInterest();\n', '        fTokenCollateral.accrueInterest();\n', '        uint256 lastPrincipal = accountBorrows[borrower].principal;\n', '        uint256 newPrincipal = borrowBalanceStoredInternal(borrower);\n', '\n', '        controller.liquidateBorrowCheck(\n', '            address(this),\n', '            address(fTokenCollateral),\n', '            borrower,\n', '            liquidator,\n', '            repayAmount\n', '        );\n', '\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        require(\n', '            fTokenCollateral.accrualBlockNumber() == getBlockNumber(),\n', '            "Blocknumber fails"\n', '        );\n', '\n', '        // 还钱\n', '        (uint256 actualRepayAmount, ) = repayInternal(borrower, repayAmount);\n', '\n', '        // 计算清算的质押物数量（fToken数量）\n', '        uint256 seizeTokens = controller.liquidateTokens(\n', '            address(this),\n', '            address(fTokenCollateral),\n', '            actualRepayAmount\n', '        );\n', '\n', '        // 借款人得要有这么多余额才行\n', '        require(\n', '            fTokenCollateral.balanceOf(borrower) >= seizeTokens,\n', '            "Seize too much"\n', '        );\n', '\n', '        if (address(fTokenCollateral) == address(this)) {\n', '            seizeInternal(address(this), liquidator, borrower, seizeTokens);\n', '        } else {\n', '            fTokenCollateral.seize(liquidator, borrower, seizeTokens);\n', '        }\n', '\n', '        uint256 preCalcTokenCash = tokenCash(underlying, address(controller))\n', '            .add(actualRepayAmount);\n', '\n', '        LiquidateBorrowLogStruct memory lbls = LiquidateBorrowLogStruct(\n', '            liquidator,\n', '            underlying,\n', '            address(this),\n', '            actualRepayAmount,\n', '            SafeMath.abs(newPrincipal, lastPrincipal),\n', '            borrower,\n', '            seizeTokens,\n', '            address(fTokenCollateral),\n', '            tokenCash(address(fTokenCollateral), borrower),\n', '            accountBorrows[borrower].principal, //debt_remaining\n', '            exchangeRateAfter(actualRepayAmount),\n', '            interestRateModel.getBorrowRate(\n', '                preCalcTokenCash,\n', '                totalBorrows,\n', '                totalReserves\n', '            ),\n', '            tokenCash(address(fTokenCollateral), liquidator),\n', '            preCalcTokenCash\n', '        );\n', '\n', '        return abi.encode(lbls);\n', '    }\n', '\n', '    function seize(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 seizeTokens\n', '    ) external nonReentrant {\n', '        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n', '    }\n', '\n', '    struct CallingOutLogStruct {\n', '        address user_address;\n', '        address token_address;\n', '        address cheque_token_address;\n', '        uint256 amount_wiped_out;\n', '        uint256 debt_cancelled_out;\n', '        uint256 interest_accrued;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 account_balance;\n', '        uint256 account_debt;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    //冲账处理\n', '    function cancellingOut(address striker)\n', '        public\n', '        onlyBank\n', '        nonReentrant\n', '        returns (bool strikeOk, bytes memory strikeLog)\n', '    {\n', '        // 需要冲账时，计算利息\n', '        if (\n', '            borrowBalanceStoredInternal(striker) > 0 && balanceOf(striker) > 0\n', '        ) {\n', '            accrueInterest();\n', '            uint256 lastPrincipal = accountBorrows[striker].principal;\n', '            uint256 curBorrowBalance = borrowBalanceStoredInternal(striker);\n', '            uint256 userSupplyBalance = calcBalanceOfUnderlying(striker);\n', '            uint256 lastFtokenBalance = balanceOf(striker);\n', '            uint256 actualRepayAmount;\n', '            bytes memory repayLog;\n', '            uint256 withdrawAmount;\n', '            bytes memory withdrawLog;\n', '            // 有借款和存款(fToken)\n', '            if (curBorrowBalance > 0 && userSupplyBalance > 0) {\n', '                //无实际转账的赎回（冲账赎回）\n', '                if (userSupplyBalance > curBorrowBalance) {\n', '                    (withdrawAmount, withdrawLog) = strikeWithdrawInternal(\n', '                        striker,\n', '                        0,\n', '                        curBorrowBalance\n', '                    );\n', '                } else {\n', '                    (withdrawAmount, withdrawLog) = strikeWithdrawInternal(\n', '                        striker,\n', '                        balanceOf(striker),\n', '                        0\n', '                    );\n', '                }\n', '\n', '                (actualRepayAmount, repayLog) = repayInternal(\n', '                    striker,\n', '                    withdrawAmount\n', '                );\n', '\n', '                CallingOutLogStruct memory cols;\n', '\n', '                cols.user_address = striker;\n', '                cols.token_address = underlying;\n', '                cols.cheque_token_address = address(this);\n', '                cols.amount_wiped_out = SafeMath.abs(\n', '                    lastFtokenBalance,\n', '                    balanceOf(striker)\n', '                );\n', '                cols.debt_cancelled_out = actualRepayAmount;\n', '                cols.interest_accrued = SafeMath.abs(\n', '                    curBorrowBalance,\n', '                    lastPrincipal\n', '                );\n', '                cols.cheque_token_value = exchangeRateStored();\n', '                cols.loan_interest_rate = interestRateModel.getBorrowRate(\n', '                    tokenCash(underlying, address(controller)),\n', '                    totalBorrows,\n', '                    totalReserves\n', '                );\n', '                cols.account_balance = tokenCash(address(this), striker);\n', '                cols.account_debt = accountBorrows[striker].principal;\n', '                cols.global_token_reserved = tokenCash(\n', '                    underlying,\n', '                    address(controller)\n', '                );\n', '\n', '                strikeLog = abi.encode(cols);\n', '\n', '                strikeOk = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return accountTokens[owner];\n', '    }\n', '\n', '    function _setBorrowSafeRatio(uint256 _borrowSafeRatio) public onlyAdmin {\n', '        borrowSafeRatio = _borrowSafeRatio;\n', '    }\n', '\n', '    function seizeInternal(\n', '        address seizerToken,\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 seizeTokens\n', '    ) internal {\n', '        require(borrower != liquidator, "Liquidator cannot be borrower");\n', '        controller.seizeCheck(msg.sender, seizerToken);\n', '\n', '        accountTokens[borrower] = accountTokens[borrower].sub(seizeTokens);\n', '        accountTokens[liquidator] = accountTokens[liquidator].add(seizeTokens);\n', '\n', '        emit Transfer(borrower, liquidator, seizeTokens);\n', '    }\n', '\n', '    // onlyController\n', '    function _reduceReserves(uint256 reduceAmount) external onlyController {\n', '        accrueInterest();\n', '\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        require(\n', '            controller.getCashPrior(underlying) >= reduceAmount,\n', '            "Insufficient cash"\n', '        );\n', '        require(totalReserves >= reduceAmount, "Insufficient reserves");\n', '\n', '        totalReserves = SafeMath.sub(\n', '            totalReserves,\n', '            reduceAmount,\n', '            "reduce reserves underflow"\n', '        );\n', '    }\n', '\n', '    function _addReservesFresh(uint256 addAmount) external onlyController {\n', '        accrueInterest();\n', '\n', '        require(accrualBlockNumber == getBlockNumber(), "Blocknumber fails");\n', '        totalReserves = SafeMath.add(totalReserves, addAmount);\n', '    }\n', '\n', '    function addTotalCash(uint256 _addAmount) public onlyBankComponent {\n', '        totalCash = totalCash.add(_addAmount);\n', '    }\n', '\n', '    function subTotalCash(uint256 _subAmount) public onlyBankComponent {\n', '        totalCash = totalCash.sub(_subAmount);\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_notEntered, "re-entered");\n', '        _notEntered = false;\n', '        _;\n', '        _notEntered = true;\n', '    }\n', '\n', '    // 借款年利率\n', '    function APR() public view returns (uint256) {\n', '        uint256 cash = tokenCash(underlying, address(controller));\n', '        return interestRateModel.APR(cash, totalBorrows, totalReserves);\n', '    }\n', '\n', '    // 存款年利率\n', '    function APY() external view returns (uint256) {\n', '        uint256 cash = tokenCash(underlying, address(controller));\n', '        return\n', '            interestRateModel.APY(\n', '                cash,\n', '                totalBorrows,\n', '                totalReserves,\n', '                reserveFactor\n', '            );\n', '    }\n', '\n', '    // 借款年利率\n', '    function getBorrowRate() public view returns (uint256) {\n', '        uint256 cash = tokenCash(underlying, address(controller));\n', '        return\n', '            interestRateModel.getBorrowRate(cash, totalBorrows, totalReserves);\n', '    }\n', '\n', '    // 存款年利率\n', '    function getSupplyRate() public view returns (uint256) {\n', '        uint256 cash = tokenCash(underlying, address(controller));\n', '        return\n', '            interestRateModel.getSupplyRate(\n', '                cash,\n', '                totalBorrows,\n', '                totalReserves,\n', '                reserveFactor\n', '            );\n', '    }\n', '}']