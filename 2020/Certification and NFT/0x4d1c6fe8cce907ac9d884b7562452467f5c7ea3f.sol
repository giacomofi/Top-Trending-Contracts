['// File: contracts/TokenInterface.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'interface TokenInterface{\n', '    function burnFrom(address _from, uint _amount) external;\n', '    function mintTo(address _to, uint _amount) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/AccessControl.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/TokenStaking.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '// Author: Matt Hooft \n', '// https://github.com/Civitas-Fundamenta\n', '// mhooft@fundamenta.network\n', '\n', '// A simple token Staking Contract that uses a configurable `stakeCap` to limit inflation.\n', '// Employs the use of Role Based Access Control (RBAC) so allow outside accounts and contracts\n', '// to interact with it securely allowing for future extensibility.\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Staking is AccessControl {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    TokenInterface private fundamenta;  \n', '    \n', '    /**\n', '     * @dev Smart Contract uses Role Based Access Control to \n', '     * \n', '     * alllow for secure access as well as enabling the ability \n', '     *\n', '     * for other contracts such as oracles to interact with ifundamenta.\n', '     */\n', '\n', '    //-------RBAC---------------------------\n', '\n', '    bytes32 public constant _STAKING = keccak256("_STAKING");\n', '    bytes32 public constant _RESCUE = keccak256("_RESCUE");\n', '    bytes32 public constant _ADMIN = keccak256("_ADMIN");\n', '\n', '    //-------Staking Vars-------------------\n', '    \n', '    uint public stakeCalc;\n', '    uint public stakeCap;\n', '    uint public rewardsWindow;\n', '    uint public stakeLockMultiplier;\n', '    bool public stakingOff;\n', '    bool public paused;\n', '    bool public emergencyWDoff;\n', '    \n', '    //--------Staking mapping/Arrays----------\n', '\n', '    address[] internal stakeholders;\n', '    mapping(address => uint) internal stakes;\n', '    mapping(address => uint) internal rewards;\n', '    mapping(address => uint) internal lastWithdraw;\n', '    \n', '    //----------Events----------------------\n', '    \n', '    event StakeCreated(address _stakeholder, uint _stakes, uint _blockHeight);\n', '    event StakeRemoved(address _stakeholder, uint _stakes, uint rewards, uint _blockHeight);\n', '    event RewardsWithdrawn(address _stakeholder, uint _rewards, uint blockHeight);\n', '    event TokensRescued (address _pebcak, address _ERC20, uint _ERC20Amount, uint _blockHeightRescued);\n', '    event ETHRescued (address _pebcak, uint _ETHAmount, uint _blockHeightRescued);\n', '\n', '    //-------Constructor----------------------\n', '\n', '    constructor(){\n', '        stakingOff = true;\n', '        emergencyWDoff = true;\n', '        stakeCalc = 500;\n', '        stakeCap = 3e22;\n', '        rewardsWindow = 6500;\n', '        stakeLockMultiplier = 2;\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '    }\n', '\n', '    //-------Set Token Address----------------\n', '    \n', '    function setAddress(TokenInterface _token) public {\n', '        require(hasRole(_ADMIN, msg.sender));\n', '        fundamenta = _token;\n', '    }\n', '    \n', '    //-------Modifiers--------------------------\n', '\n', '    modifier pause() {\n', '        require(!paused, "TokenStaking: Contract is Paused");\n', '        _;\n', '    }\n', '\n', '    modifier stakeToggle() {\n', '        require(!stakingOff, "TokenStaking: Staking is not currently active");\n', '        _;\n', '    }\n', '    \n', '    modifier emergency() {\n', '        require(!emergencyWDoff, "TokenStaking: Emergency Withdraw is not enabled");\n', '        _;\n', '    }\n', '\n', '    //--------Staking Functions-------------------\n', '\n', '    /**\n', '     * @dev allows a user to create a staking positon. Users will\n', '     * \n', '     * not be allowed to stake more than the `stakeCap` which is \n', '     *\n', '     * a settable variable by Admins/Contrcats with the `_STAKING` \n', '     * \n', '     * Role.\n', '     */\n', '\n', '    function createStake(uint _stake) public pause stakeToggle {\n', '        lastWithdraw[msg.sender] = block.number;\n', '        rewards[msg.sender] = rewards[msg.sender].add(rewardsAccrued());\n', '        if(stakes[msg.sender] == 0) addStakeholder(msg.sender);\n', '        stakes[msg.sender] = stakes[msg.sender].add(_stake);\n', '        fundamenta.mintTo(msg.sender, rewardsAccrued());\n', '        fundamenta.burnFrom(msg.sender, _stake);\n', '        require(stakes[msg.sender] <= stakeCap, "TokenStaking: Can\'t Stake More than allowed moneybags"); \n', '        lastWithdraw[msg.sender] = block.number;\n', '        emit StakeCreated(msg.sender, _stake, block.number);\n', '    }\n', '    \n', '    /**\n', '     * @dev removes a users staked positon if the required lock\n', '     * \n', '     * window is satisfied. Also pays out any `_rewardsAccrued` to\n', '     *\n', '     * the user if any rewards are pending.\n', '     */\n', '    \n', '    function removeStake(uint _stake) public pause {\n', '        uint unlockWindow = rewardsWindow.mul(stakeLockMultiplier);\n', '        require(block.number >= lastWithdraw[msg.sender].add(unlockWindow), "TokenStaking: FMTA has not been staked for long enough");\n', '        rewards[msg.sender] = rewards[msg.sender].add(rewardsAccrued());\n', '        if(stakes[msg.sender] == 0 && _stake != 0 ) {\n', '            revert("TokenStaking: You don\'t have any tokens staked");\n', '        }else if (stakes[msg.sender] != 0 && _stake != 0) {\n', '            fundamenta.mintTo(msg.sender, rewardsAccrued());\n', '            fundamenta.mintTo(msg.sender, _stake);\n', '            stakes[msg.sender] = stakes[msg.sender].sub(_stake);\n', '            lastWithdraw[msg.sender] = block.number;\n', '        }else if (stakes[msg.sender] == 0) {\n', '            fundamenta.mintTo(msg.sender, rewardsAccrued());\n', '            fundamenta.mintTo(msg.sender, _stake);\n', '            stakes[msg.sender] = stakes[msg.sender].sub(_stake);\n', '            removeStakeholder(msg.sender);\n', '            lastWithdraw[msg.sender] = block.number;\n', '        }\n', '        emit StakeRemoved(msg.sender, _stake, rewardsAccrued(), block.number);\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev returns the amount of rewards a user as accrued.\n', '     */\n', '    \n', '    function rewardsAccrued() public view returns (uint) {\n', '        uint _rewardsAccrued;\n', '        uint multiplier;\n', '        multiplier = block.number.sub(lastWithdraw[msg.sender]).div(rewardsWindow);\n', '        _rewardsAccrued = calculateReward(msg.sender).mul(multiplier);\n', '        return _rewardsAccrued;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev allows user to withrdraw any pending rewards as\n', '     * \n', '     * long as the `rewardsWindow` is satisfied.\n', '     */\n', '     \n', '    function withdrawReward() public pause stakeToggle {\n', '        rewards[msg.sender] = rewards[msg.sender].add(rewardsAccrued());\n', '        if(lastWithdraw[msg.sender] == 0) {\n', '           revert("TokenStaking: You cannot withdraw if you hve never staked");\n', '        } else if (lastWithdraw[msg.sender] != 0){\n', '            require(block.number > lastWithdraw[msg.sender].add(rewardsWindow), "TokenStaking: It hasn\'t been enough time since your last withdrawl");\n', '            fundamenta.mintTo(msg.sender, rewardsAccrued());\n', '            lastWithdraw[msg.sender] = block.number;\n', '            emit RewardsWithdrawn(msg.sender, rewardsAccrued(), block.number);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev allows user to withrdraw any pending rewards and\n', '     * \n', '     * staking position if `emergencyWDoff` is false enabling \n', '     * \n', '     * emergency withdraw situtaions when staking is off and \n', '     * \n', '     * the contract is paused.  This will likely never be used.\n', '     */\n', '    \n', '    function emergencyWithdrawRewardAndStakes() public emergency {\n', '        rewards[msg.sender] = rewards[msg.sender].add(rewardsAccrued());\n', '        fundamenta.mintTo(msg.sender, rewardsAccrued());\n', '        fundamenta.mintTo(msg.sender, stakes[msg.sender]);\n', '        stakes[msg.sender] = stakes[msg.sender].sub(stakes[msg.sender]);\n', '        removeStakeholder(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev returns a users `lastWithdraw` which is the last block\n', '     * \n', '     * height that the user last withdrew rewards.\n', '     */\n', '    \n', '    function lastWdHeight() public view returns (uint) {\n', '        return lastWithdraw[msg.sender];\n', '    }\n', '    \n', '    /**\n', '     * @dev returns to the user the amount of blocks that they must\n', '     * \n', '     * have their stake locked before they are able to unstake their\n', '     * \n', '     * positon.\n', '     */\n', '    \n', '    function stakeUnlockWindow() external view returns (uint) {\n', '        uint unlockWindow = rewardsWindow.mul(stakeLockMultiplier);\n', '        uint stakeWindow = lastWithdraw[msg.sender].add(unlockWindow);\n', '        return stakeWindow;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows admin with the `_STAKING` role to set the \n', '     * \n', '     * `stakeMultiplier` which is used in the calculation that\n', '     *\n', '     * determines how long a user must have a staked positon \n', '     * \n', '     * before they are able to unstake said positon.\n', '     */\n', '    \n', '    function setStakeMultiplier(uint _newMultiplier) public pause stakeToggle {\n', '        require(hasRole(_STAKING, msg.sender));\n', '        stakeLockMultiplier = _newMultiplier;\n', '    }\n', '    \n', '    /**\n', '     * @dev returns a users staked position.\n', '     */\n', '    \n', '    function stakeOf (address _stakeholder) public view returns(uint) {\n', '        return stakes[_stakeholder];\n', '    }\n', '    \n', '    /**\n', '     * @dev returns the total amount of FMTA that has been \n', '     * \n', '     * placed in staking postions by users.\n', '     */\n', '    \n', '    function totalStakes() public view returns(uint) {\n', '        uint _totalStakes = 0;\n', '        for (uint s = 0; s < stakeholders.length; s += 1) {\n', '            _totalStakes = _totalStakes.add(stakes[stakeholders[s]]);\n', '        }\n', '        \n', '        return _totalStakes;\n', '    }\n', '    \n', '    /**\n', '     * @dev returns if an account is a stakeholder and holds\n', '     * \n', '     * a staked position.\n', '     */\n', '\n', '    function isStakeholder(address _address) public view returns(bool, uint) {\n', '        for (uint s = 0; s < stakeholders.length; s += 1) {\n', '            if (_address == stakeholders[s]) return (true, s);\n', '        }\n', '        \n', '        return (false, 0);\n', '    }\n', '    \n', '    /**\n', '     * @dev internal function that adds accounts as stakeholders.\n', '     */\n', '    \n', '    function addStakeholder(address _stakeholder) internal pause stakeToggle {\n', '        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\n', '        if(!_isStakeholder) stakeholders.push(_stakeholder);\n', '    }\n', '    \n', '    /**\n', '     * @dev internal function that removes accounts as stakeholders.\n', '     */\n', '    \n', '    function removeStakeholder(address _stakeholder) internal {\n', '        (bool _isStakeholder, uint s) = isStakeholder(_stakeholder);\n', '        if(_isStakeholder){\n', '            stakeholders[s] = stakeholders[stakeholders.length - 1];\n', '            stakeholders.pop();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev returns an accounts total rewards paid over the\n', '     * \n', '     * Staking Contracts lifetime.\n', '     */\n', '    \n', '    function totalRewardsOf(address _stakeholder) external view returns(uint) {\n', '        return rewards[_stakeholder];\n', '    }\n', '    \n', '    /**\n', '     * @dev returns the amount of total rewards paid to all\n', '     * \n', '     * accounts over the Staking Contracts lifetime.\n', '     */\n', '    \n', '    function totalRewardsPaid() external view returns(uint) {\n', '        uint _totalRewards = 0;\n', '        for (uint s = 0; s < stakeholders.length; s += 1){\n', '            _totalRewards = _totalRewards.add(rewards[stakeholders[s]]);\n', '        }\n', '        \n', '        return _totalRewards;\n', '    }\n', '    \n', '     /**\n', '     * @dev allows admin with the `_STAKING` role to set the\n', '     * \n', '     * Staking Contracts `stakeCalc` which is the divisor used\n', '     * \n', '     * in `calculateReward` to determine the reward during each \n', '     * \n', '     * `rewardsWindow`.\n', '     */\n', '    \n', '    function setStakeCalc(uint _stakeCalc) external pause stakeToggle {\n', '        require(hasRole(_STAKING, msg.sender));\n', '        stakeCalc = _stakeCalc;\n', '    }\n', '    \n', '     /**\n', '     * @dev allows admin with the `_STAKING` role to set the\n', '     * \n', '     * Staking Contracts `stakeCap` which determines how many\n', '     * \n', '     * tokens total can be staked per accounfundamenta.\n', '     */\n', '    \n', '    function setStakeCap(uint _stakeCap) external pause stakeToggle {\n', '        require(hasRole(_STAKING, msg.sender));\n', '        stakeCap = _stakeCap;\n', '    }\n', '    \n', '     /**\n', '     * @dev allows admin with the `_STAKING` role to set the\n', '     * \n', '     * Staking Contracts `stakeOff` bool to true ot false \n', '     * \n', '     * effecively turning staking on or off. The only function \n', '     * \n', '     * that is not effected is removng stake \n', '     */\n', '    \n', '    function stakeOff(bool _stakingOff) public {\n', '        require(hasRole(_STAKING, msg.sender));\n', '        stakingOff = _stakingOff;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows admin with the `_STAKING` role to set the\n', '     * \n', '     * Staking Contracts `rewardsWindow` which determines how\n', '     * \n', '     * long a user must wait before they can with draw in the \n', '     * \n', '     * form of a number of blocks that must pass since the users\n', '     * \n', '     * `lastWithdraw`.\n', '     */\n', '    \n', '    function setRewardsWindow(uint _newWindow) external pause stakeToggle {\n', '        require(hasRole(_STAKING, msg.sender));\n', '        rewardsWindow = _newWindow;\n', '    }\n', '    \n', '    /**\n', '     * @dev simple function help track and calculate the rewards\n', '     * \n', '     * accrued between rewards windows. it uses `stakeCalc` which\n', '     * \n', '     * is settable by admins with the `_STAKING` role.\n', '     */\n', '    \n', '    function calculateReward(address _stakeholder) public view returns(uint) {\n', '        return stakes[_stakeholder] / stakeCalc;\n', '    }\n', '    \n', '    /**\n', '     * @dev turns on the emergencyWD function which is used for \n', '     * \n', '     * when the staking contract is paused or stopped for some\n', '     * \n', '     * unforseeable reason and we still need to let users withdraw.\n', '     */\n', '    \n', '    function setEmergencyWDoff(bool _emergencyWD) external {\n', '        require(hasRole(_ADMIN, msg.sender));\n', '        emergencyWDoff = _emergencyWD;\n', '    }\n', '    \n', '\n', '    //----------Pause----------------------\n', '\n', '    /**\n', '     * @dev pauses the Smart Contract.\n', '     */\n', '\n', '    function setPaused(bool _paused) external {\n', '        require(hasRole(_ADMIN, msg.sender));\n', '        paused = _paused;\n', '    }\n', '    \n', '    //----Emergency PEBCAK Functions-------\n', '    \n', '    function mistakenERC20DepositRescue(address _ERC20, address _pebcak, uint _ERC20Amount) public {\n', '        require(hasRole(_RESCUE, msg.sender),"TokenStaking: Message Sender must be _RESCUE");\n', '        IERC20(_ERC20).safeTransfer(_pebcak, _ERC20Amount);\n', '        emit TokensRescued (_pebcak, _ERC20, _ERC20Amount, block.number);\n', '    }\n', '\n', '    function mistakenDepositRescue(address payable _pebcak, uint _etherAmount) public {\n', '        require(hasRole(_RESCUE, msg.sender),"TokenStaking: Message Sender must be _RESCUE");\n', '        _pebcak.transfer(_etherAmount);\n', '        emit ETHRescued (_pebcak, _etherAmount, block.number);\n', '    }\n', '\n', '}']