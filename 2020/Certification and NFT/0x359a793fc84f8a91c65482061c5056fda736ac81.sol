['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.4;\n', '/**\n', 'Sc dev\n', 't.me/bolpol\n', '*/\n', '\n', '/**\n', '    @title ERC20 interface (short version)\n', '*/\n', 'interface ERC20 {\n', '    function balanceOf(address tokenOwner) external returns (uint balance);\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', '/**\n', '    @title Owned - ownership\n', '*/\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', '    @title Airdropper - using for package token transfer\n', '*/\n', 'contract Airdropper is Owned {\n', '    ERC20 public token;\n', '    \n', '    event Airdropped(bool indexed ok);\n', '    event Destroyed(uint indexed time);\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param tokenAddress Address of the token contract.\n', '     */\n', '    constructor(address tokenAddress) {\n', '        token = ERC20(tokenAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Airdrop.\n', '     * @ !important Before using, send needed token amount to this contract\n', '     */\n', '    function airdrop(address[] memory dests, uint[] memory values) public onlyOwner {\n', '        // This simple validation will catch most mistakes without consuming\n', '        // too much gas.\n', '        require(dests.length == values.length);\n', '\n', '        for (uint256 i = 0; i < dests.length; i++) {\n', '            token.transfer(dests[i], values[i]);\n', '        }\n', '        \n', '        emit Airdropped(true);\n', '    }\n', '\n', '    /**\n', '     * @dev Return all tokens back to owner, in case any were accidentally\n', '     *   transferred to this contract.\n', '     */\n', '    function returnTokens() public onlyOwner returns(bool) {\n', '        return token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy this contract and recover any ether to the owner.\n', '     */\n', '    function destroy() public onlyOwner {\n', '        if(returnTokens()) {\n', '            emit Destroyed(block.timestamp);\n', '            selfdestruct(msg.sender);\n', '        }\n', '    }\n', '}']