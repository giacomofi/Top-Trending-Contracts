['pragma solidity ^0.5.16;\n', '\n', '//Slightly modified SafeMath library - includes a min and max function, removes useless div function\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function add(int256 a, int256 b) internal pure returns (int256 c) {\n', '        if (b > 0) {\n', '            c = a + b;\n', '            assert(c >= a);\n', '        } else {\n', '            c = a + b;\n', '            assert(c <= a);\n', '        }\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a : b;\n', '    }\n', '\n', '    function max(int256 a, int256 b) internal pure returns (uint256) {\n', '        return a > b ? uint256(a) : uint256(b);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n', '        if (b > 0) {\n', '            c = a - b;\n', '            assert(c <= a);\n', '        } else {\n', '            c = a - b;\n', '            assert(c >= a);\n', '        }\n', '\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Tellor Oracle Storage Library\n', ' * @dev Contains all the variables/structs used by Tellor\n', ' */\n', '\n', 'library TellorStorage {\n', '    //Internal struct for use in proof-of-work submission\n', '    struct Details {\n', '        uint256 value;\n', '        address miner;\n', '    }\n', '\n', '    struct Dispute {\n', '        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\n', '        int256 tally; //current tally of votes for - against measure\n', '        bool executed; //is the dispute settled\n', '        bool disputeVotePassed; //did the vote pass?\n', '        bool isPropFork; //true for fork proposal NEW\n', "        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\n", "        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\n", '        address proposedForkAddress; //new fork address (if fork proposal)\n', '        mapping(bytes32 => uint256) disputeUintVars;\n', '        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\n', '        //e.g. TellorStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256("requestId")]\n', '        //These are the variables saved in this mapping:\n', '        // uint keccak256("requestId");//apiID of disputed value\n', '        // uint keccak256("timestamp");//timestamp of distputed value\n', '        // uint keccak256("value"); //the value being disputed\n', '        // uint keccak256("minExecutionDate");//7 days from when dispute initialized\n', '        // uint keccak256("numberOfVotes");//the number of parties who have voted on the measure\n', '        // uint keccak256("blockNumber");// the blocknumber for which votes will be calculated from\n', '        // uint keccak256("minerSlot"); //index in dispute array\n', '        // uint keccak256("fee"); //fee paid corresponding to dispute\n', '        mapping(address => bool) voted; //mapping of address to whether or not they voted\n', '    }\n', '\n', '    struct StakeInfo {\n', '        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute 4=ReadyForUnlocking 5=Unlocked\n', '        uint256 startDate; //stake start date\n', '    }\n', '\n', '    //Internal struct to allow balances to be queried by blocknumber for voting purposes\n', '    struct Checkpoint {\n', '        uint128 fromBlock; // fromBlock is the block number that the value was generated from\n', '        uint128 value; // value is the amount of tokens at a specific block number\n', '    }\n', '\n', '    struct Request {\n', '        string queryString; //id to string api\n', '        string dataSymbol; //short name for api request\n', '        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\n', '        uint256[] requestTimestamps; //array of all newValueTimestamps requested\n', '        mapping(bytes32 => uint256) apiUintVars;\n', '        //Each of the variables below is saved in the mapping apiUintVars for each api request\n', '        //e.g. requestDetails[_requestId].apiUintVars[keccak256("totalTip")]\n', '        //These are the variables saved in this mapping:\n', '        // uint keccak256("granularity"); //multiplier for miners\n', '        // uint keccak256("requestQPosition"); //index in requestQ\n', '        // uint keccak256("totalTip");//bonus portion of payout\n', '        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\n', '        //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\n', '        mapping(uint256 => uint256) finalValues;\n', '        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\n', '        mapping(uint256 => address[5]) minersByValue;\n', '        mapping(uint256 => uint256[5]) valuesByTimestamp;\n', '    }\n', '\n', '    struct TellorStorageStruct {\n', '        bytes32 currentChallenge; //current challenge to be solved\n', '        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\n', '        uint256[] newValueTimestamps; //array of all timestamps requested\n', '        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\n', '        mapping(bytes32 => address) addressVars;\n', '        //Address fields in the Tellor contract are saved the addressVars mapping\n', '        //e.g. addressVars[keccak256("tellorContract")] = address\n', '        //These are the variables saved in this mapping:\n', '        // address keccak256("tellorContract");//Tellor address\n', '        // address  keccak256("_owner");//Tellor Owner address\n', '        // address  keccak256("_deity");//Tellor Owner that can do things at will\n', '        // address  keccak256("pending_owner"); // The proposed new owner\n', '        mapping(bytes32 => uint256) uintVars;\n', '        //uint fields in the Tellor contract are saved the uintVars mapping\n', '        //e.g. uintVars[keccak256("decimals")] = uint\n', '        //These are the variables saved in this mapping:\n', '        // keccak256("decimals");    //18 decimal standard ERC20\n', '        // keccak256("disputeFee");//cost to dispute a mined value\n', '        // keccak256("disputeCount");//totalHistoricalDisputes\n', '        // keccak256("total_supply"); //total_supply of the token in circulation\n', '        // keccak256("stakeAmount");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\n', '        // keccak256("stakerCount"); //number of parties currently staked\n', '        // keccak256("timeOfLastNewValue"); // time of last challenge solved\n', '        // keccak256("difficulty"); // Difficulty of current block\n', '        // keccak256("currentTotalTips"); //value of highest api/timestamp PayoutPool\n', '        // keccak256("currentRequestId"); //API being mined--updates with the ApiOnQ Id\n', '        // keccak256("requestCount"); // total number of requests through the system\n', '        // keccak256("slotProgress");//Number of miners who have mined this value so far\n', '        // keccak256("miningReward");//Mining Reward in PoWo tokens given to all miners per value\n', '        // keccak256("timeTarget"); //The time between blocks (mined Oracle values)\n', '        // keccak256("_tblock"); //\n', '        // keccak256("runningTips"); // VAriable to track running tips\n', '        // keccak256("currentReward"); // The current reward\n', '        // keccak256("devShare"); // The amount directed towards th devShare\n', '        // keccak256("currentTotalTips"); //\n', '        //This is a boolean that tells you if a given challenge has been completed by a given miner\n', '        mapping(bytes32 => mapping(address => bool)) minersByChallenge;\n', '        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\n', '        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\n', '        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\n', '        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\n', '        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\n', '        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\n', '        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\n', '        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\n', '        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '/**\n', '* @title Tellor Transfer\n', '* @dev Contains the methods related to transfers and ERC20. Tellor.sol and TellorGetters.sol\n', "* reference this library for function's logic.\n", '*/\n', 'library TellorTransfer {\n', '    using SafeMath for uint256;\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value); //ERC20 Approval event\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); //ERC20 Transfer Event\n', '\n', '    bytes32 public constant stakeAmount = 0x7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2; //keccak256("stakeAmount")\n', '\n', '    /*Functions*/\n', '\n', '    /**\n', '    * @dev Allows for a transfer of tokens to _to\n', '    * @param _to The address to send tokens to\n', '    * @param _amount The amount of tokens to send\n', '    * @return true if transfer is successful\n', '    */\n', '    function transfer(TellorStorage.TellorStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\n', '        doTransfer(self, msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Send _amount tokens to _to from _from on the condition it\n', '    * is approved by _from\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _amount The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function transferFrom(TellorStorage.TellorStorageStruct storage self, address _from, address _to, uint256 _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(self.allowed[_from][msg.sender] >= _amount, "Allowance is wrong");\n', '        self.allowed[_from][msg.sender] -= _amount;\n', '        doTransfer(self, _from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev This function approves a _spender an _amount of tokens to use\n', '    * @param _spender address\n', '    * @param _amount amount the spender is being approved for\n', '    * @return true if spender appproved successfully\n', '    */\n', '    function approve(TellorStorage.TellorStorageStruct storage self, address _spender, uint256 _amount) public returns (bool) {\n', '        require(_spender != address(0), "Spender is 0-address");\n', '        require(self.allowed[msg.sender][_spender] == 0 || _amount == 0, "Spender is already approved");\n', '        self.allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @param _user address of party with the balance\n', '    * @param _spender address of spender of parties said balance\n', '    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\n', '    */\n', '    function allowance(TellorStorage.TellorStorageStruct storage self, address _user, address _spender) public view returns (uint256) {\n', '        return self.allowed[_user][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Completes POWO transfers by updating the balances on the current block number\n', '    * @param _from address to transfer from\n', '    * @param _to addres to transfer to\n', '    * @param _amount to transfer\n', '    */\n', '    function doTransfer(TellorStorage.TellorStorageStruct storage self, address _from, address _to, uint256 _amount) public {\n', '        require(_amount != 0, "Tried to send non-positive amount");\n', '        require(_to != address(0), "Receiver is 0 address");\n', '        require(allowedToTrade(self, _from, _amount), "Should have sufficient balance to trade");\n', '        uint256 previousBalance = balanceOf(self, _from);\n', '        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\n', '        previousBalance = balanceOf(self,_to);\n', '        require(previousBalance + _amount >= previousBalance, "Overflow happened"); // Check for overflow\n', '        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets balance of owner specified\n', '    * @param _user is the owner address used to look up the balance\n', '    * @return Returns the balance associated with the passed in _user\n', '    */\n', '    function balanceOf(TellorStorage.TellorStorageStruct storage self, address _user) public view returns (uint256) {\n', '        return balanceOfAt(self, _user, block.number);\n', '    }\n', '\n', '    /**\n', '    * @dev Queries the balance of _user at a specific _blockNumber\n', '    * @param _user The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at _blockNumber specified\n', '    */\n', '    function balanceOfAt(TellorStorage.TellorStorageStruct storage self, address _user, uint256 _blockNumber) public view returns (uint256) {\n', '        TellorStorage.Checkpoint[] storage checkpoints = self.balances[_user];\n', '        if (checkpoints.length == 0|| checkpoints[0].fromBlock > _blockNumber) {\n', '            return 0;\n', '        } else {\n', '            if (_blockNumber >= checkpoints[checkpoints.length - 1].fromBlock) return checkpoints[checkpoints.length - 1].value;\n', '            // Binary search of the value in the array\n', '            uint256 min = 0;\n', '            uint256 max = checkpoints.length - 2;\n', '            while (max > min) {\n', '                uint256 mid = (max + min + 1) / 2;\n', '                if  (checkpoints[mid].fromBlock ==_blockNumber){\n', '                    return checkpoints[mid].value;\n', '                }else if(checkpoints[mid].fromBlock < _blockNumber) {\n', '                    min = mid;\n', '                } else {\n', '                    max = mid - 1;\n', '                }\n', '            }\n', '            return checkpoints[min].value;\n', '        }\n', '    }\n', '    /**\n', '    * @dev This function returns whether or not a given user is allowed to trade a given amount\n', '    * and removing the staked amount from their balance if they are staked\n', '    * @param _user address of user\n', '    * @param _amount to check if the user can spend\n', '    * @return true if they are allowed to spend the amount being checked\n', '    */\n', '    function allowedToTrade(TellorStorage.TellorStorageStruct storage self, address _user, uint256 _amount) public view returns (bool) { \n', '        if (self.stakerDetails[_user].currentStatus != 0 && self.stakerDetails[_user].currentStatus < 5) {\n', '            //Subtracts the stakeAmount from balance if the _user is staked\n', '            if (balanceOf(self, _user)- self.uintVars[stakeAmount] >= _amount) {\n', '                return true;\n', '            }\n', '            return false;\n', '        } \n', '        return (balanceOf(self, _user) >= _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Updates balance for from and to on the current block number via doTransfer\n', '    * @param checkpoints gets the mapping for the balances[owner]\n', '    * @param _value is the new balance\n', '    */\n', '    function updateBalanceAtNow(TellorStorage.Checkpoint[] storage checkpoints, uint256 _value) public {\n', '        if (checkpoints.length == 0 || checkpoints[checkpoints.length - 1].fromBlock != block.number) {\n', '           checkpoints.push(TellorStorage.Checkpoint({\n', '                fromBlock : uint128(block.number),\n', '                value : uint128(_value)\n', '            }));\n', '        } else {\n', '            TellorStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '}']