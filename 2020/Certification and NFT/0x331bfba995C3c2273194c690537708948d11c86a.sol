['pragma solidity ^0.5.9;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface ITransferProvider {\n', '  event TransferApproved(address indexed from, address indexed to, uint256 value);\n', '  event TransferDeclined(address indexed from, address indexed to, uint256 value);\n', '\n', '  /* function approve transfer upon its own rules and return true or false */\n', '  function approveTransfer(address _from, address _to, uint256 _value, address _spender) external returns(bool);\n', '\n', '  /* function to inform provider about transfer on admin behalf to take it into providers account */\n', '  function considerTransfer(address _from, address _to, uint256 _value) external returns(bool);\n', '}\n', '\n', 'contract vnxDCR is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //-----------------------------------------------------------------------------------\n', '    // Variables, Instances, Mappings\n', '    //-----------------------------------------------------------------------------------\n', '    uint256 constant BULK_LENGTH = 50;\n', '    uint256 private _totalSupplyAmount;\n', '    uint8 public decimals; // ERC20 standard, usually used 18 inline with Ethereum\n', '\n', '    string public name; // the name of the token -- ERC20 standard\n', '    string public symbol; // ticker of the token -- ERC20 standard\n', '\n', '    ITransferProvider private _transferProvider;\n', '\n', '    bool public isClosed;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    //-----------------------------------------------------------------------------------\n', '    // Smart contract Constructor\n', '    //-----------------------------------------------------------------------------------\n', '    /**\n', '        IMPORTANT : totalTokenAmount is in integer tokens without consideration "decimals" property\n', '                    The value param to transfer functions, etc is taking into account "decimals" property!!\n', '        According to standard emits the event Transfer(0, initOwner, supply)\n', '     */\n', '    constructor(address _initTransferProvider, uint256 _totalTokenAmount,\n', '             string memory _name, string memory _symbol, uint8 _decimals) public\n', '    {\n', '        require(_initTransferProvider != address(0), "Initial transfer provider should not be zero");\n', '        require(_totalTokenAmount > 0, "Total TokenAmount should be larger than zero");\n', '        require(bytes(_symbol).length > 0, "Symbol should not be empty string");\n', '        require(bytes(_name).length > 0, "Name should not be empty string");\n', '\n', '        _transferProvider = ITransferProvider(_initTransferProvider);\n', '        _totalSupplyAmount = _totalTokenAmount.mul(10**uint(_decimals));\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        _transferProvider.considerTransfer(address(0), msg.sender, _totalSupplyAmount);\n', '        _balances[msg.sender] = _totalSupplyAmount;\n', '        emit Transfer(address(0), msg.sender, _totalSupplyAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupplyAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) external view returns (uint256) {\n', '        // In case owner is not exist in the list the mapping return 0 automatically\n', '        return _balances[owner];     \n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------\n', '    // Transact Functions\n', '    //-----------------------------------------------------------------------------------\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    // Transfer is standard ERC20 Event issued by transfer function\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _from The address to transfer from.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_from != address(0), "Wrong from address");\n', '        require(_to != address(0), "Wrong to address");\n', '        require(_value > 0, "Value should be greater than zero");\n', '        require(isClosed == false, "Token is closed");\n', '\n', '        return _doTransfer(_from, _to, _value);\n', '    }\n', '\n', '    event BatchTransferComplete(uint256 indexed batchId, uint8 count);\n', '\n', '    /**\n', '    * @dev Transfers token to/from a specified addresses listed in the arrays. The size of arrays chould be not more than BULK_LENGTH\n', "    * @param _batchId The unique ID of the bulk which is calculated on the client side (by the admin) as a hash of some bulk bids' data\n", '    * @param _from The array of addresses to transfer from.\n', '    * @param _to The array of addresses to transfer to.\n', '    * @param _value The array of amounts to be transferred.\n', '    */\n', '    function transferBatch(uint256 _batchId, address[] calldata _from,\n', '            address[] calldata _to, uint256[] calldata _value) external onlyOwner returns (bool)\n', '    {\n', '        uint8 _procCount = 0;\n', '        require(isClosed == false, "The token is closed");\n', '        require(_from.length <= BULK_LENGTH, "The length of array is more than BULK_LENGTH");\n', '        require(_from.length == _to.length && _from.length == _value.length, "The length of param arrays should be the same");\n', '\n', '        for (uint j = 0; j < _from.length; j++ ) {\n', '            if (_doTransfer(_from[j], _to[j], _value[j])) {\n', '                _procCount++;\n', '            }\n', '        }\n', '\n', '        emit BatchTransferComplete(_batchId, _procCount);\n', '        return _procCount > 0;\n', '    }\n', '\n', '    function _doTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_value > 0, "Value should be positive non-zero integer");\n', '        require(_value <= _balances[_from], "Not enough balance on source account");\n', '\n', '        _balances[_from] = _balances[_from].sub( _value );\n', '        _balances[_to] = _balances[_to].add( _value );\n', '\n', '        require(_transferProvider.approveTransfer(_from, _to, _value, msg.sender), "Transfer was declined by transfer provider");\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     * caller must be owner\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '\t \n', '    function burn(uint256 amount) external onlyOwner {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "DCR: burn amount exceeds balance");\n', '        _totalSupplyAmount = _totalSupplyAmount.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    event TokenClosed();\n', '\n', '    function closeToken() external onlyOwner returns (bool) {\n', '        require(isClosed == false, "Token is already closed");\n', '\n', '        isClosed = true; //_isClosed;\n', '        emit TokenClosed();\n', '        return true;\n', '    }\n', '\n', '    event TransferProviderChanged(address indexed _newProvider);\n', '\n', '    function changeTransferProvider(address _provider) external onlyOwner returns(bool) {\n', '     \t_transferProvider = ITransferProvider(_provider);\n', '\n', '        emit TransferProviderChanged(_provider);\n', '        return true;\n', '    }\n', '}']