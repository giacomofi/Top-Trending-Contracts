['pragma solidity 0.5.17;\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address payable private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    function owner() public view returns (address payable) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    function _transferOwnership(address payable newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/// @notice The contract that holds the retirement yeld funds and distributes them\n', 'contract RetirementYeldTreasury is Ownable {\n', '  using SafeMath for uint256;\n', '  IERC20 yeld;\n', '  uint256 public constant timeBetweenRedeems = 1 days;\n', '\n', '\tstruct Stake {\n', '\t\tuint256 timestamp;\n', '    uint256 yeldBalance;\n', '\t}\n', '\n', '\tmapping(address => Stake) public stakes;\n', '\tuint256 public totalStaked;\n', '\n', '  // Fallback function to receive payments\n', '  function () external payable {}\n', '\n', '  // To set the YELD contract address\n', '  constructor (address _yeld) public {\n', '    yeld = IERC20(_yeld);\n', '  }\n', '\n', '  function addETH() public payable {}\n', '\n', '\t/// Stake yeld. Whenever you do so, the stake timestamp is restarted if you had any previous stakes\n', '\tfunction stakeYeld(uint256 _amount) public {\n', '\t\tyeld.transferFrom(msg.sender, address(this), _amount);\n', '\t\tstakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.add(_amount));\n', '\t\ttotalStaked = totalStaked.add(_amount);\n', '\t}\n', '\n', '\tfunction unstake(uint256 _amount) public {\n', '\t\tuint256 balanceToSend = stakes[msg.sender].yeldBalance;\n', '\t\trequire(balanceToSend > 0 && _amount > 0, "You can\'t unstake less than zero");\n', '\t\trequire(_amount <= balanceToSend, "You can\'t withdraw more than your balance");\n', '\t\tstakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.sub(_amount));\n', '\t\ttotalStaked = totalStaked.sub(_amount);\n', '\t\tyeld.transfer(msg.sender, balanceToSend);\n', '\t}\n', '\n', '  /// Checks how much YELD the user currently has and sends him some eth based on that\n', '  function redeemETH() public {\n', "    require(now >= stakes[msg.sender].timestamp + timeBetweenRedeems, 'You must wait at least a day after the snapshot to redeem your earnings');\n", '    // Calculate his holdings % in 1 per 10^18% instead of 1 per 100%\n', '    uint256 burnedTokens = yeld.balanceOf(address(0));\n', '    uint256 userPercentage = stakes[msg.sender].yeldBalance.mul(1e18).div(yeld.totalSupply().sub(burnedTokens));\n', '    uint256 earnings = address(this).balance.mul(userPercentage).div(1e16);\n', '    stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance);\n', '    msg.sender.transfer(earnings);\n', '  }\n', '\n', '  function setYeld(address _yeld) public onlyOwner {\n', '    yeld = IERC20(_yeld);\n', '  }\n', '\n', '\tfunction extractETHIfStuck() public onlyOwner {\n', '    owner().transfer(address(this).balance);\n', '  }\n', '\n', '  function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {\n', '    IERC20(_token).transfer(msg.sender, _amount);\n', '  }\n', '}']