['// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '        /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Set Protocol\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '}\n', '// Dependency file: contracts/interfaces/IOracleAdapter.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title IOracleAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for calling an oracle adapter.\n', ' */\n', 'interface IOracleAdapter {\n', '\n', '    /**\n', '     * Function for retrieving a price that requires sourcing data from outside protocols to calculate.\n', '     *\n', '     * @param  _assetOne    First asset in pair\n', '     * @param  _assetTwo    Second asset in pair\n', '     * @return                  Boolean indicating if oracle exists\n', '     * @return              Current price of asset represented in uint256\n', '     */\n', '    function getPrice(address _assetOne, address _assetTwo) external view returns (bool, uint256);\n', '}\n', '// Dependency file: contracts/interfaces/IOracle.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title IOracle\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with any external Oracle that returns uint256 or\n', ' * an adapting contract that converts oracle output to uint256\n', ' */\n', 'interface IOracle {\n', '    /**\n', '     * @return  Current price of asset represented in uint256, typically a preciseUnit where 10^18 = 1.\n', '     */\n', '    function read() external view returns (uint256);\n', '}\n', '// Dependency file: contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addSet(address _setToken) external;\n', '    function feeRecipient() external view returns(address);\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isSet(address _setToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function resourceId(uint256 _id) external view returns(address);\n', '}\n', '// Dependency file: contracts/lib/AddressArrayUtils.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AddressArrayUtils\n', ' * @author Set Protocol\n', ' *\n', ' * Utility functions to handle Address Arrays\n', ' */\n', 'library AddressArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (uint256(-1), false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(address[] memory A, address a) internal pure returns (bool) {\n', '        (, bool isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurrence of a duplicate\n', '    */\n', '    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n', '        require(A.length > 0, "A is empty");\n', '\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            address current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove     \n', '     * @return Returns the array with the object removed.\n', '     */\n', '    function remove(address[] memory A, address a)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            (address[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * @param A The input array to search\n', '    * @param index The index to remove\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(address[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (address[] memory, address)\n', '    {\n', '        uint256 length = A.length;\n', '        require(index < A.length, "Index must be < A length");\n', '        address[] memory newAddresses = new address[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newAddresses[j - 1] = A[j];\n', '        }\n', '        return (newAddresses, A[index]);\n', '    }\n', '}\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '// import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '// import { AddressArrayUtils } from "../lib/AddressArrayUtils.sol";\n', '// import { IController } from "../interfaces/IController.sol";\n', '// import { IOracle } from "../interfaces/IOracle.sol";\n', '// import { IOracleAdapter } from "../interfaces/IOracleAdapter.sol";\n', '// import { PreciseUnitMath } from "../lib/PreciseUnitMath.sol";\n', '\n', '\n', '/**\n', ' * @title PriceOracle\n', ' * @author Set Protocol\n', ' *\n', ' * Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle,\n', ' * calculated using common asset pairs, or uses external data to calculate price.\n', ' * Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\n', ' */\n', 'contract PriceOracle is Ownable {\n', '    using PreciseUnitMath for uint256;\n', '    using AddressArrayUtils for address[];\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event PairAdded(address indexed _assetOne, address indexed _assetTwo, address _oracle);\n', '    event PairRemoved(address indexed _assetOne, address indexed _assetTwo, address _oracle);\n', '    event PairEdited(address indexed _assetOne, address indexed _assetTwo, address _newOracle);\n', '    event AdapterAdded(address _adapter);\n', '    event AdapterRemoved(address _adapter);\n', '    event MasterQuoteAssetEdited(address _newMasterQuote);\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of the Controller contract\n', '    IController public controller;\n', '\n', '    // Mapping between assetA/assetB and its associated Price Oracle\n', '    // Asset 1 -> Asset 2 -> IOracle Interface\n', '    mapping(address => mapping(address => IOracle)) public oracles;\n', '\n', '    // Token address of the bridge asset that prices are derived from if the specified pair price is missing\n', '    address public masterQuoteAsset;\n', '\n', '    // List of IOracleAdapters used to return prices of third party protocols (e.g. Uniswap, Compound, Balancer)\n', '    address[] public adapters;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables and map asset pairs to their oracles\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     * @param _masterQuoteAsset       Address of asset that can be used to link unrelated asset pairs\n', '     * @param _adapters               List of adapters used to price assets created by other protocols\n', '     * @param _assetOnes              List of first asset in pair, index i maps to same index in assetTwos and oracles\n', '     * @param _assetTwos              List of second asset in pair, index i maps to same index in assetOnes and oracles\n', '     * @param _oracles                List of oracles, index i maps to same index in assetOnes and assetTwos\n', '     */\n', '    constructor(\n', '        IController _controller,\n', '        address _masterQuoteAsset,\n', '        address[] memory _adapters,\n', '        address[] memory _assetOnes,\n', '        address[] memory _assetTwos,\n', '        IOracle[] memory _oracles\n', '    )\n', '        public\n', '    {\n', '        controller = _controller;\n', '        masterQuoteAsset = _masterQuoteAsset;\n', '        adapters = _adapters;\n', '        require(\n', '            _assetOnes.length == _assetTwos.length && _assetTwos.length == _oracles.length,\n', '            "Array lengths do not match."\n', '        );\n', '\n', '        for (uint256 i = 0; i < _assetOnes.length; i++) {\n', '            oracles[_assetOnes[i]][_assetTwos[i]] = _oracles[i];\n', '        }\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:\n', '     *  1) Check to see if a direct or inverse oracle of the pair exists,\n', '     *  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC\n', '     *     could be used to calculate BTC/USDC).\n', '     *  3) If not, check oracle adapters in case one or more of the assets needs external protocol data\n', '     *     to price.\n', '     *  4) If all steps fail, revert.\n', '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     * @return                  Price of asset pair to 18 decimals of precision\n', '     */\n', '    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256) {\n', '        require(\n', '            controller.isSystemContract(msg.sender),\n', '            "PriceOracle.getPrice: Caller must be system contract."\n', '        );\n', '\n', '        bool priceFound;\n', '        uint256 price;\n', '\n', '        (priceFound, price) = _getDirectOrInversePrice(_assetOne, _assetTwo);\n', '\n', '        if (!priceFound) {\n', '            (priceFound, price) = _getPriceFromMasterQuote(_assetOne, _assetTwo);\n', '        }\n', '\n', '        if (!priceFound) {\n', '            (priceFound, price) = _getPriceFromAdapters(_assetOne, _assetTwo);\n', '        }\n', '\n', '        require(priceFound, "PriceOracle.getPrice: Price not found.");\n', '\n', '        return price;\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE FUNCTION: Add new asset pair oracle.\n', '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', "     * @param _oracle           Address of asset pair's oracle\n", '     */\n', '    function addPair(address _assetOne, address _assetTwo, IOracle _oracle) external onlyOwner {\n', '        require(\n', '            address(oracles[_assetOne][_assetTwo]) == address(0),\n', '            "PriceOracle.addPair: Pair already exists."\n', '        );\n', '        oracles[_assetOne][_assetTwo] = _oracle;\n', '\n', '        emit PairAdded(_assetOne, _assetTwo, address(_oracle));\n', '    }\n', '\n', '    /**\n', "     * GOVERNANCE FUNCTION: Edit an existing asset pair's oracle.\n", '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', "     * @param _oracle           Address of asset pair's new oracle\n", '     */\n', '    function editPair(address _assetOne, address _assetTwo, IOracle _oracle) external onlyOwner {\n', '        require(\n', '            address(oracles[_assetOne][_assetTwo]) != address(0),\n', '            "PriceOracle.editPair: Pair doesn\'t exist."\n', '        );\n', '        oracles[_assetOne][_assetTwo] = _oracle;\n', '\n', '        emit PairEdited(_assetOne, _assetTwo, address(_oracle));\n', '    }\n', '\n', '    /**\n', "     * GOVERNANCE FUNCTION: Remove asset pair's oracle.\n", '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     */\n', '    function removePair(address _assetOne, address _assetTwo) external onlyOwner {\n', '        require(\n', '            address(oracles[_assetOne][_assetTwo]) != address(0),\n', '            "PriceOracle.removePair: Pair doesn\'t exist."\n', '        );\n', '        IOracle oldOracle = oracles[_assetOne][_assetTwo];\n', '        delete oracles[_assetOne][_assetTwo];\n', '\n', '        emit PairRemoved(_assetOne, _assetTwo, address(oldOracle));\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE FUNCTION: Add new oracle adapter.\n', '     *\n', '     * @param _adapter         Address of new adapter\n', '     */\n', '    function addAdapter(address _adapter) external onlyOwner {\n', '        require(\n', '            !adapters.contains(_adapter),\n', '            "PriceOracle.addAdapter: Adapter already exists."\n', '        );\n', '        adapters.push(_adapter);\n', '\n', '        emit AdapterAdded(_adapter);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE FUNCTION: Remove oracle adapter.\n', '     *\n', '     * @param _adapter         Address of adapter to remove\n', '     */\n', '    function removeAdapter(address _adapter) external onlyOwner {\n', '        require(\n', '            adapters.contains(_adapter),\n', '            "PriceOracle.removeAdapter: Adapter does not exist."\n', '        );\n', '        adapters = adapters.remove(_adapter);\n', '\n', '        emit AdapterRemoved(_adapter);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE FUNCTION: Change the master quote asset.\n', '     *\n', '     * @param _newMasterQuoteAsset         New address of master quote asset\n', '     */\n', '    function editMasterQuoteAsset(address _newMasterQuoteAsset) external onlyOwner {\n', '        masterQuoteAsset = _newMasterQuoteAsset;\n', '\n', '        emit MasterQuoteAssetEdited(_newMasterQuoteAsset);\n', '    }\n', '\n', '    /* ============ External View Functions ============ */\n', '\n', '    /**\n', '     * Returns an array of adapters\n', '     */\n', '    function getAdapters() external view returns (address[] memory) {\n', '        return adapters;\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Check if direct or inverse oracle exists. If so return that price along with boolean indicating\n', "     * it exists. Otherwise return boolean indicating oracle doesn't exist.\n", '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     * @return bool             Boolean indicating if oracle exists\n', '     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\n', '     */\n', '    function _getDirectOrInversePrice(\n', '        address _assetOne,\n', '        address _assetTwo\n', '    )\n', '        internal\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        IOracle directOracle = oracles[_assetOne][_assetTwo];\n', '        bool hasDirectOracle = address(directOracle) != address(0);\n', '\n', '        // Check asset1 -> asset 2. If exists, then return value\n', '        if (hasDirectOracle) {\n', '            return (true, directOracle.read());\n', '        }\n', '\n', '        IOracle inverseOracle = oracles[_assetTwo][_assetOne];\n', '        bool hasInverseOracle = address(inverseOracle) != address(0);\n', '\n', '        // If not, check asset 2 -> asset 1. If exists, then return 1 / asset1 -> asset2\n', '        if (hasInverseOracle) {\n', '            return (true, _calculateInversePrice(inverseOracle));\n', '        }\n', '\n', '        return (false, 0);\n', '    }\n', '\n', '    /**\n', "     * Try to calculate asset pair price by getting each asset in the pair's price relative to master\n", '     * quote asset. Both prices must exist otherwise function returns false and no price.\n', '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     * @return bool             Boolean indicating if oracle exists\n', '     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\n', '     */\n', '    function _getPriceFromMasterQuote(\n', '        address _assetOne,\n', '        address _assetTwo\n', '    )\n', '        internal\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        (\n', '            bool priceFoundOne,\n', '            uint256 assetOnePrice\n', '        ) = _getDirectOrInversePrice(_assetOne, masterQuoteAsset);\n', '\n', '        (\n', '            bool priceFoundTwo,\n', '            uint256 assetTwoPrice\n', '        ) = _getDirectOrInversePrice(_assetTwo, masterQuoteAsset);\n', '\n', '        if (priceFoundOne && priceFoundTwo) {\n', '            return (true, assetOnePrice.preciseDiv(assetTwoPrice));\n', '        }\n', '\n', '        return (false, 0);\n', '    }\n', '\n', '    /**\n', '     * Scan adapters to see if one or more of the assets needs external protocol data to be priced. If\n', '     * does not exist return false and no price.\n', '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     * @return bool             Boolean indicating if oracle exists\n', '     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\n', '     */\n', '    function _getPriceFromAdapters(\n', '        address _assetOne,\n', '        address _assetTwo\n', '    )\n', '        internal\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        for (uint256 i = 0; i < adapters.length; i++) {\n', '            (\n', '                bool priceFound,\n', '                uint256 price\n', '            ) = IOracleAdapter(adapters[i]).getPrice(_assetOne, _assetTwo);\n', '\n', '            if (priceFound) {\n', '                return (priceFound, price);\n', '            }\n', '        }\n', '\n', '        return (false, 0);\n', '    }\n', '\n', '    /**\n', '     * Calculate inverse price of passed oracle. The inverse price is 1 (or 1e18) / inverse price\n', '     *\n', '     * @param _inverseOracle        Address of oracle to invert\n', '     * @return uint256              Inverted price of asset pair to 18 decimal precision\n', '     */\n', '    function _calculateInversePrice(IOracle _inverseOracle) internal view returns(uint256) {\n', '        uint256 inverseValue = _inverseOracle.read();\n', '\n', '        return PreciseUnitMath.preciseUnit().preciseDiv(inverseValue);\n', '    }\n', '}']