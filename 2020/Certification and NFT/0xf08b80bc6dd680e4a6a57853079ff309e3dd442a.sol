['pragma solidity ^0.6.0; abstract contract Gem {\n', '    function dec() virtual public returns (uint);\n', '    function gem() virtual public returns (Gem);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public returns (bool);\n', '    function transferFrom(address, address, uint) virtual public returns (bool);\n', '    function deposit() virtual public payable;\n', '    function withdraw(uint) virtual public;\n', '    function allowance(address, address) virtual public returns (uint);\n', '} abstract contract Join {\n', '    bytes32 public ilk;\n', '\n', '    function dec() virtual public view returns (uint);\n', '    function gem() virtual public view returns (Gem);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '} interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '} abstract contract Vat {\n', '\n', '    struct Urn {\n', '        uint256 ink;   // Locked Collateral  [wad]\n', '        uint256 art;   // Normalised Debt    [wad]\n', '    }\n', '\n', '    struct Ilk {\n', '        uint256 Art;   // Total Normalised Debt     [wad]\n', '        uint256 rate;  // Accumulated Rates         [ray]\n', '        uint256 spot;  // Price with Safety Margin  [ray]\n', '        uint256 line;  // Debt Ceiling              [rad]\n', '        uint256 dust;  // Urn Debt Floor            [rad]\n', '    }\n', '\n', '    mapping (bytes32 => mapping (address => Urn )) public urns;\n', '    mapping (bytes32 => Ilk)                       public ilks;\n', '    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n', '\n', '    function can(address, address) virtual public view returns (uint);\n', '    function dai(address) virtual public view returns (uint);\n', '    function frob(bytes32, address, address, address, int, int) virtual public;\n', '    function hope(address) virtual public;\n', '    function move(address, address, uint) virtual public;\n', '    function fork(bytes32, address, address, int, int) virtual public;\n', '} abstract contract Flipper {\n', '    function bids(uint _bidId) public virtual returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n', '    function tend(uint id, uint lot, uint bid) virtual external;\n', '    function dent(uint id, uint lot, uint bid) virtual external;\n', '    function deal(uint id) virtual external;\n', '} contract BidProxy {\n', '\n', '    address public constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n', '\n', '    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '\n', '    function daiBid(uint _bidId, uint _amount, address _flipper) public {\n', '        uint tendAmount = _amount * (10 ** 27);\n', '\n', '        joinDai(_amount);\n', '\n', '        (, uint lot, , , , , , ) = Flipper(_flipper).bids(_bidId);\n', '\n', '        Vat(VAT_ADDRESS).hope(_flipper);\n', '\n', '        Flipper(_flipper).tend(_bidId, lot, tendAmount);\n', '    }\n', '\n', '    function collateralBid(uint _bidId, uint _amount, address _flipper) public {\n', '        (uint bid, , , , , , , ) = Flipper(_flipper).bids(_bidId);\n', '\n', '        joinDai(bid / (10**27));\n', '\n', '        Vat(VAT_ADDRESS).hope(_flipper);\n', '\n', '        Flipper(_flipper).dent(_bidId, _amount, bid);\n', '    }\n', '\n', '    function closeBid(uint _bidId, address _flipper, address _joinAddr) public {\n', '        bytes32 ilk = Join(_joinAddr).ilk();\n', '\n', '        Flipper(_flipper).deal(_bidId);\n', '        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this));\n', '\n', '        Vat(VAT_ADDRESS).hope(_joinAddr);\n', '        Gem(_joinAddr).exit(msg.sender, amount);\n', '    }\n', '\n', '    function exitCollateral(address _joinAddr) public {\n', '        bytes32 ilk = Join(_joinAddr).ilk();\n', '\n', '        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this));\n', '\n', '        Vat(VAT_ADDRESS).hope(_joinAddr);\n', '        Gem(_joinAddr).exit(msg.sender, amount);\n', '    }\n', '\n', '    function exitDai() public {\n', '        uint amount = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\n', '\n', '        Vat(VAT_ADDRESS).hope(DAI_JOIN);\n', '        Gem(DAI_JOIN).exit(msg.sender, amount);\n', '    }\n', '\n', '    function withdrawToken(address _token) public {\n', '        uint balance = ERC20(_token).balanceOf(address(this));\n', '        ERC20(_token).transfer(msg.sender, balance);\n', '    }\n', '\n', '    function withdrawEth() public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    function joinDai(uint _amount) internal {\n', '        uint amountInVat = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\n', '\n', '        if (_amount > amountInVat) {\n', '            uint amountDiff = (_amount - amountInVat) + 1;\n', '\n', '            ERC20(DAI_ADDRESS).transferFrom(msg.sender, address(this), amountDiff);\n', '            ERC20(DAI_ADDRESS).approve(DAI_JOIN, amountDiff);\n', '            Join(DAI_JOIN).join(address(this), amountDiff);\n', '        }\n', '    }\n', '}']