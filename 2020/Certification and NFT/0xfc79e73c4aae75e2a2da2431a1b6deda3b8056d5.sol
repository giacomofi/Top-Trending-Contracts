['pragma solidity >=0.4.21 <0.6.0;\n', '//\n', 'interface ERC20 {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface TokenVoluntaryUpgrade {\n', '    function setUpgradeContract(address _upgradeContractAddress) external returns(bool);\n', '    function burnAfterUpgrade(uint256 value) external returns (bool success);\n', '    event UpgradeContractChange(address owner, address indexed _exchangeContractAddress);\n', '    event UpgradeBurn(address indexed _exchangeContract, uint256 _value);\n', '}\n', '//\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        //\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function uintSub(uint a, uint b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', '// b7d60f2f9a849c5c2d59e24062f9c09f3390487a\n', '// with some minor changes\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Only owner can do that");\n', '        _;\n', '    }\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "newOwner parameter must be set");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '//\n', '//\n', 'contract GreenPowerPlantToken is Ownable, TokenVoluntaryUpgrade  {\n', '    string  internal _name              = "Green Power Plant";\n', '    string  internal _symbol            = "GPP";\n', '    string  internal _standard          = "ERC20";\n', '    uint8   internal _decimals          = 18;\n', '    uint     internal _totalSupply      = 80000 * 1 ether;\n', '    //\n', '    string  internal _trustedIPNS       = "";\n', '    //\n', '    address internal _upgradeContract   = address(0);\n', '    //\n', '    mapping(address => uint256)                     internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    //\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '    //\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '    //\n', '    event UpgradeContractChange(\n', '        address owner,\n', '        address indexed _exchangeContractAddress\n', '    );\n', '    //\n', '    event UpgradeBurn(\n', '        address indexed _upgradeContract,\n', '        uint256 _value\n', '    );\n', '    //\n', '    constructor () public Ownable() {\n', '        balances[msg.sender] = totalSupply();\n', '    }\n', '    // Try to prevent sending ETH to SmartContract by mistake.\n', '    function () external payable  {\n', '        revert("This SmartContract is not payable");\n', '    }\n', '    //\n', '    // Getters and Setters\n', '    //\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    //\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    //\n', '    function standard() public view returns (string memory) {\n', '        return _standard;\n', '    }\n', '    //\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    //\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    //\n', '    // Contract common functions\n', '    //\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        //\n', '        require(_to != address(0), "\'_to\' address has to be set");\n', '        require(_value <= balances[msg.sender], "Insufficient balance");\n', '        //\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        //\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    //\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (_spender != address(0), "_spender address has to be set");\n', '        require (_value > 0, "\'_value\' parameter has to greater than 0");\n', '        //\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    //\n', '    function safeApprove(address _spender, uint256 _currentValue, uint256 _value)  public returns (bool success) {\n', '        // If current allowance for _spender is equal to _currentValue, then\n', '        // overwrite it with _value and return true, otherwise return false.\n', '        if (allowed[msg.sender][_spender] == _currentValue) return approve(_spender, _value);\n', '        return false;\n', '    }\n', '    //\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        //\n', '        require(_from != address(0), "\'_from\' address has to be set");\n', '        require(_to != address(0), "\'_to\' address has to be set");\n', '        require(_value <= balances[_from], "Insufficient balance");\n', '        require(_value <= allowed[_from][msg.sender], "Insufficient allowance");\n', '        //\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        //\n', '        emit Transfer(_from, _to, _value);\n', '        //\n', '        return true;\n', '    }\n', '    //\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    //\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    // Voluntary token upgrade logic\n', '    //\n', '    /**\n', '     * @dev Gets trusted IPNS address\n', '     */\n', '    function trustedIPNS() public view returns(string memory) {\n', '        return  _trustedIPNS;\n', '    }\n', '\n', '    function setTrustedIPNS(string memory _trustedIPNSparam) public onlyOwner returns(bool) {\n', '        _trustedIPNS = _trustedIPNSparam;\n', '        return true;\n', '    }\n', '    //\n', '    /** \n', '     * @dev Gets SmartContract that could upgrade Tokens - empty == no upgrade\n', '     */\n', '    function upgradeContract() public view returns(address) {\n', '        return _upgradeContract;\n', '    }\n', '    //\n', '    /** \n', '     * @dev Sets SmartContract that could upgrade Tokens to a new version in a future\n', '     */\n', '    function setUpgradeContract(address _upgradeContractAddress) public onlyOwner returns(bool) {\n', '        _upgradeContract = _upgradeContractAddress;\n', '        emit UpgradeContractChange(msg.sender, _upgradeContract);\n', '        //\n', '        return true;\n', '    }\n', '    function burnAfterUpgrade(uint256 _value) public returns (bool success) {\n', '        require(_upgradeContract != address(0), "upgradeContract is not set");\n', '        require(msg.sender == _upgradeContract, "only upgradeContract can execute token burning");\n', '        require(_value <= balances[msg.sender], "Insufficient balance");\n', '        //\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender],_value);\n', '        emit UpgradeBurn(msg.sender, _value);\n', '        //\n', '        return true;\n', '    }\n', '    //\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '}']