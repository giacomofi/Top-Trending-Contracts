['pragma solidity 0.5.16;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'library BasisPoints {\n', '    using SafeMath for uint;\n', '\n', '    uint constant private BASIS_POINTS = 10000;\n', '\n', '    function mulBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        return amt.mul(bp).div(BASIS_POINTS);\n', '    }\n', '\n', '    function divBP(uint amt, uint bp) internal pure returns (uint) {\n', '        require(bp > 0, "Cannot divide by zero.");\n', '        if (amt == 0) return 0;\n', '        return amt.mul(BASIS_POINTS).div(bp);\n', '    }\n', '\n', '    function addBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.add(mulBP(amt, bp));\n', '    }\n', '\n', '    function subBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.sub(mulBP(amt, bp));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', 'contract PauserRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isPauser(sender)) {\n', '            _addPauser(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(_msgSender());\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Initializable, Context, PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        PauserRole.initialize(sender);\n', '\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard is Initializable {\n', '    // counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    function initialize() public initializer {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '    function WETH() external view returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'contract LidSimplifiedPresaleTimer is Initializable, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public startTime;\n', '    uint public endTime;\n', '    uint public hardCapTimer;\n', '    uint public softCap;\n', '    address public presale;\n', '\n', '    function initialize(\n', '        uint _startTime,\n', '        uint _hardCapTimer,\n', '        uint _softCap,\n', '        address _presale,\n', '        address owner\n', '    ) external initializer {\n', '        Ownable.initialize(msg.sender);\n', '        startTime = _startTime;\n', '        hardCapTimer = _hardCapTimer;\n', '        softCap = _softCap;\n', '        presale = _presale;\n', '        //Due to issue in oz testing suite, the msg.sender might not be owner\n', '        _transferOwnership(owner);\n', '    }\n', '\n', '    function setStartTime(uint time) external onlyOwner {\n', '        startTime = time;\n', '    }\n', '\n', '    function setEndTime(uint time) external onlyOwner {\n', '        endTime = time;\n', '    }\n', '\n', '    function updateSoftCap(uint valueWei) external onlyOwner {\n', '        softCap = valueWei;\n', '    }\n', '\n', '    function updateEndTime() external returns (uint) {\n', '        if (endTime != 0) return endTime;\n', '        if (presale.balance >= softCap) {\n', '            endTime = now.add(hardCapTimer);\n', '            return endTime;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function isStarted() external view returns (bool) {\n', '        return (startTime != 0 && now > startTime);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LidSimplifiedPresaleRedeemer is Initializable, Ownable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint public redeemBP;\n', '    uint public redeemInterval;\n', '\n', '    uint[] public bonusRangeStart;\n', '    uint[] public bonusRangeBP;\n', '    uint public currentBonusIndex;\n', '\n', '    uint public totalShares;\n', '    uint public totalDepositors;\n', '    mapping(address => uint) public accountDeposits;\n', '    mapping(address => uint) public accountShares;\n', '    mapping(address => uint) public accountClaimedTokens;\n', '\n', '    address private presale;\n', '\n', '    modifier onlyPresaleContract {\n', '        require(msg.sender == presale, "Only callable by presale contract.");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        uint _redeemBP,\n', '        uint _redeemInterval,\n', '        uint[] calldata _bonusRangeStart,\n', '        uint[] calldata _bonusRangeBP,\n', '        address _presale,\n', '        address owner\n', '    ) external initializer {\n', '        Ownable.initialize(msg.sender);\n', '\n', '        redeemBP = _redeemBP;\n', '        redeemInterval = _redeemInterval;\n', '        presale = _presale;\n', '\n', '        require(\n', '            _bonusRangeStart.length == _bonusRangeBP.length,\n', '            "Must have equal values for bonus range start and BP"\n', '        );\n', '        require(_bonusRangeStart.length <= 10, "Cannot have more than 10 items in bonusRange");\n', '        for (uint i = 0; i < _bonusRangeStart.length; ++i) {\n', '            bonusRangeStart.push(_bonusRangeStart[i]);\n', '        }\n', '        for (uint i = 0; i < _bonusRangeBP.length; ++i) {\n', '            bonusRangeBP.push(_bonusRangeBP[i]);\n', '        }\n', '\n', '        //Due to issue in oz testing suite, the msg.sender might not be owner\n', '        _transferOwnership(owner);\n', '    }\n', '\n', '    function setClaimed(address account, uint amount) external onlyPresaleContract {\n', '        accountClaimedTokens[account] = accountClaimedTokens[account].add(amount);\n', '    }\n', '\n', '    function setDeposit(address account, uint deposit, uint postDepositEth) external onlyPresaleContract {\n', '        if (accountDeposits[account] == 0) totalDepositors = totalDepositors.add(1);\n', '        accountDeposits[account] = accountDeposits[account].add(deposit);\n', '        uint sharesToAdd;\n', '        if (currentBonusIndex.add(1) >= bonusRangeBP.length) {\n', '            //final bonus rate\n', '            sharesToAdd = deposit.addBP(bonusRangeBP[currentBonusIndex]);\n', '        } else if (postDepositEth < bonusRangeStart[currentBonusIndex.add(1)]) {\n', '            //Purchase doesnt push to next start\n', '            sharesToAdd = deposit.addBP(bonusRangeBP[currentBonusIndex]);\n', '        } else {\n', '            //purchase straddles next start\n', '            uint previousBonusBP = bonusRangeBP[currentBonusIndex];\n', '            uint newBonusBP = bonusRangeBP[currentBonusIndex.add(1)];\n', '            uint newBonusDeposit = postDepositEth.sub(bonusRangeStart[currentBonusIndex.add(1)]);\n', '            uint previousBonusDeposit = deposit.sub(newBonusDeposit);\n', '            sharesToAdd = newBonusDeposit.addBP(newBonusBP).add(\n', '                previousBonusDeposit.addBP(previousBonusBP));\n', '            currentBonusIndex = currentBonusIndex.add(1);\n', '        }\n', '        accountShares[account] = accountShares[account].add(sharesToAdd);\n', '        totalShares = totalShares.add(sharesToAdd);\n', '    }\n', '\n', '    function updateBonus(\n', '        uint[] calldata _bonusRangeStart,\n', '        uint[] calldata _bonusRangeBP\n', '    ) external onlyOwner {\n', '        require(\n', '            _bonusRangeStart.length == _bonusRangeBP.length,\n', '            "Must have equal values for bonus range start and BP"\n', '        );\n', '        require(_bonusRangeStart.length <= 10, "Cannot have more than 10 items in bonusRange");\n', '        for (uint i = 0; i < _bonusRangeStart.length; ++i) {\n', '            bonusRangeStart.push(_bonusRangeStart[i]);\n', '        }\n', '        for (uint i = 0; i < _bonusRangeBP.length; ++i) {\n', '            bonusRangeBP.push(_bonusRangeBP[i]);\n', '        }\n', '    }\n', '\n', '    function calculateRatePerEth(uint totalPresaleTokens, uint depositEth, uint hardCap) external view returns (uint) {\n', '\n', '        uint tokensPerEtherShare = totalPresaleTokens\n', '        .mul(1 ether)\n', '        .div(\n', '            getMaxShares(hardCap)\n', '        );\n', '\n', '        uint bp;\n', '        if (depositEth >= bonusRangeStart[bonusRangeStart.length.sub(1)]) {\n', '            bp = bonusRangeBP[bonusRangeBP.length.sub(1)];\n', '        } else {\n', '            for (uint i = 1; i < bonusRangeStart.length; ++i) {\n', '                if (bp == 0) {\n', '                    if (depositEth < bonusRangeStart[i]) {\n', '                        bp = bonusRangeBP[i.sub(1)];\n', '                    }\n', '                }\n', '            }\n', '        }\n', '        return tokensPerEtherShare.addBP(bp);\n', '    }\n', '\n', '    function calculateReedemable(\n', '        address account,\n', '        uint finalEndTime,\n', '        uint totalPresaleTokens\n', '    ) external view returns (uint) {\n', '        if (finalEndTime == 0) return 0;\n', '        if (finalEndTime >= now) return 0;\n', '        uint earnedTokens = accountShares[account].mul(totalPresaleTokens).div(totalShares);\n', '        uint claimedTokens = accountClaimedTokens[account];\n', '        uint cycles = now.sub(finalEndTime).div(redeemInterval).add(1);\n', '        uint totalRedeemable = earnedTokens.mulBP(redeemBP).mul(cycles);\n', '        uint claimable;\n', '        if (totalRedeemable >= earnedTokens) {\n', '            claimable = earnedTokens.sub(claimedTokens);\n', '        } else {\n', '            claimable = totalRedeemable.sub(claimedTokens);\n', '        }\n', '        return claimable;\n', '    }\n', '\n', '    function getMaxShares(uint hardCap) public view returns (uint) {\n', '        uint maxShares;\n', '        for (uint i = 0; i < bonusRangeStart.length; ++i) {\n', '            uint amt;\n', '            if (i < bonusRangeStart.length.sub(1)) {\n', '                amt = bonusRangeStart[i.add(1)].sub(bonusRangeStart[i]);\n', '            } else {\n', '                amt = hardCap.sub(bonusRangeStart[i]);\n', '            }\n', '            maxShares = maxShares.add(amt.addBP(bonusRangeBP[i]));\n', '        }\n', '        return maxShares;\n', '    }\n', '}\n', '\n', '\n', 'interface IStakeHandler {\n', '    function handleStake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\n', '    function handleUnstake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\n', '}\n', '\n', '\n', 'interface ILidCertifiableToken {\n', '    function activateTransfers() external;\n', '    function activateTax() external;\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '    function addMinter(address account) external;\n', '    function renounceMinter() external;\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function isMinter(address account) external view returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract LidStaking is Initializable, Ownable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint256 constant internal DISTRIBUTION_MULTIPLIER = 2 ** 64;\n', '\n', '    uint public stakingTaxBP;\n', '    uint public unstakingTaxBP;\n', '    ILidCertifiableToken private lidToken;\n', '\n', '    mapping(address => uint) public stakeValue;\n', '    mapping(address => int) public stakerPayouts;\n', '\n', '\n', '    uint public totalDistributions;\n', '    uint public totalStaked;\n', '    uint public totalStakers;\n', '    uint public profitPerShare;\n', '    uint private emptyStakeTokens; //These are tokens given to the contract when there are no stakers.\n', '\n', '    IStakeHandler[] public stakeHandlers;\n', '    uint public startTime;\n', '\n', '    uint public registrationFeeWithReferrer;\n', '    uint public registrationFeeWithoutReferrer;\n', '    mapping(address => uint) public accountReferrals;\n', '    mapping(address => bool) public stakerIsRegistered;\n', '\n', '    event OnDistribute(address sender, uint amountSent);\n', '    event OnStake(address sender, uint amount, uint tax);\n', '    event OnUnstake(address sender, uint amount, uint tax);\n', '    event OnReinvest(address sender, uint amount, uint tax);\n', '    event OnWithdraw(address sender, uint amount);\n', '\n', '    modifier onlyLidToken {\n', '        require(msg.sender == address(lidToken), "Can only be called by LidToken contract.");\n', '        _;\n', '    }\n', '\n', '    modifier whenStakingActive {\n', '        require(startTime != 0 && now > startTime, "Staking not yet started.");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        uint _stakingTaxBP,\n', '        uint _ustakingTaxBP,\n', '        uint _registrationFeeWithReferrer,\n', '        uint _registrationFeeWithoutReferrer,\n', '        address owner,\n', '        ILidCertifiableToken _lidToken\n', '    ) external initializer {\n', '        Ownable.initialize(msg.sender);\n', '        stakingTaxBP = _stakingTaxBP;\n', '        unstakingTaxBP = _ustakingTaxBP;\n', '        lidToken = _lidToken;\n', '        registrationFeeWithReferrer = _registrationFeeWithReferrer;\n', '        registrationFeeWithoutReferrer = _registrationFeeWithoutReferrer;\n', '        //Due to issue in oz testing suite, the msg.sender might not be owner\n', '        _transferOwnership(owner);\n', '    }\n', '\n', '    function registerAndStake(uint amount) public {\n', '        registerAndStake(amount, address(0x0));\n', '    }\n', '\n', '    function registerAndStake(uint amount, address referrer) public whenStakingActive {\n', '        require(!stakerIsRegistered[msg.sender], "Staker must not be registered");\n', '        require(lidToken.balanceOf(msg.sender) >= amount, "Must have enough balance to stake amount");\n', '        uint finalAmount;\n', '        if(address(0x0) == referrer) {\n', '            //No referrer\n', '            require(amount >= registrationFeeWithoutReferrer, "Must send at least enough LID to pay registration fee.");\n', '            distribute(registrationFeeWithoutReferrer);\n', '            finalAmount = amount.sub(registrationFeeWithoutReferrer);\n', '        } else {\n', '            //has referrer\n', '            require(amount >= registrationFeeWithReferrer, "Must send at least enough LID to pay registration fee.");\n', '            require(lidToken.transferFrom(msg.sender, referrer, registrationFeeWithReferrer), "Stake failed due to failed referral transfer.");\n', '            accountReferrals[referrer] = accountReferrals[referrer].add(1);\n', '            finalAmount = amount.sub(registrationFeeWithReferrer);\n', '        }\n', '        stakerIsRegistered[msg.sender] = true;\n', '        stake(finalAmount);\n', '    }\n', '\n', '    function stake(uint amount) public whenStakingActive {\n', '        require(stakerIsRegistered[msg.sender] == true, "Must be registered to stake.");\n', '        require(amount >= 1e18, "Must stake at least one LID.");\n', '        require(lidToken.balanceOf(msg.sender) >= amount, "Cannot stake more LID than you hold unstaked.");\n', '        if (stakeValue[msg.sender] == 0) totalStakers = totalStakers.add(1);\n', '        uint tax = _addStake(amount);\n', '        require(lidToken.transferFrom(msg.sender, address(this), amount), "Stake failed due to failed transfer.");\n', '        emit OnStake(msg.sender, amount, tax);\n', '    }\n', '\n', '    function unstake(uint amount) external whenStakingActive {\n', '        require(amount >= 1e18, "Must unstake at least one LID.");\n', '        require(stakeValue[msg.sender] >= amount, "Cannot unstake more LID than you have staked.");\n', '        //must withdraw all dividends, to prevent overflows\n', '        withdraw(dividendsOf(msg.sender));\n', '        if (stakeValue[msg.sender] == amount) totalStakers = totalStakers.sub(1);\n', '        totalStaked = totalStaked.sub(amount);\n', '        stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount);\n', '\n', '        uint tax = findTaxAmount(amount, unstakingTaxBP);\n', '        uint earnings = amount.sub(tax);\n', '        _increaseProfitPerShare(tax);\n', '        stakerPayouts[msg.sender] = uintToInt(profitPerShare.mul(stakeValue[msg.sender]));\n', '\n', '        for (uint i=0; i < stakeHandlers.length; i++) {\n', '            stakeHandlers[i].handleUnstake(msg.sender, amount, stakeValue[msg.sender]);\n', '        }\n', '\n', '        require(lidToken.transferFrom(address(this), msg.sender, earnings), "Unstake failed due to failed transfer.");\n', '        emit OnUnstake(msg.sender, amount, tax);\n', '    }\n', '\n', '    function withdraw(uint amount) public whenStakingActive {\n', '        require(dividendsOf(msg.sender) >= amount, "Cannot withdraw more dividends than you have earned.");\n', '        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(amount.mul(DISTRIBUTION_MULTIPLIER));\n', '        lidToken.transfer(msg.sender, amount);\n', '        emit OnWithdraw(msg.sender, amount);\n', '    }\n', '\n', '    function reinvest(uint amount) external whenStakingActive {\n', '        require(dividendsOf(msg.sender) >= amount, "Cannot reinvest more dividends than you have earned.");\n', '        uint payout = amount.mul(DISTRIBUTION_MULTIPLIER);\n', '        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\n', '        uint tax = _addStake(amount);\n', '        emit OnReinvest(msg.sender, amount, tax);\n', '    }\n', '\n', '    function distribute(uint amount) public {\n', '        require(lidToken.balanceOf(msg.sender) >= amount, "Cannot distribute more LID than you hold unstaked.");\n', '        totalDistributions = totalDistributions.add(amount);\n', '        _increaseProfitPerShare(amount);\n', '        require(\n', '            lidToken.transferFrom(msg.sender, address(this), amount),\n', '            "Distribution failed due to failed transfer."\n', '        );\n', '        emit OnDistribute(msg.sender, amount);\n', '    }\n', '\n', '    function handleTaxDistribution(uint amount) external onlyLidToken {\n', '        totalDistributions = totalDistributions.add(amount);\n', '        _increaseProfitPerShare(amount);\n', '        emit OnDistribute(msg.sender, amount);\n', '    }\n', '\n', '    function dividendsOf(address staker) public view returns (uint) {\n', '        int divPayout = uintToInt(profitPerShare.mul(stakeValue[staker]));\n', '        require(divPayout >= stakerPayouts[staker], "dividend calc overflow");\n', '        return uint(divPayout - stakerPayouts[staker])\n', '            .div(DISTRIBUTION_MULTIPLIER);\n', '    }\n', '\n', '    function findTaxAmount(uint value, uint taxBP) public pure returns (uint) {\n', '        return value.mulBP(taxBP);\n', '    }\n', '\n', '    function numberStakeHandlersRegistered() external view returns (uint) {\n', '        return stakeHandlers.length;\n', '    }\n', '\n', '    function registerStakeHandler(IStakeHandler sc) external onlyOwner {\n', '        stakeHandlers.push(sc);\n', '    }\n', '\n', '    function unregisterStakeHandler(uint index) external onlyOwner {\n', '        IStakeHandler sc = stakeHandlers[stakeHandlers.length-1];\n', '        stakeHandlers.pop();\n', '        stakeHandlers[index] = sc;\n', '    }\n', '\n', '    function setStakingBP(uint valueBP) external onlyOwner {\n', '        require(valueBP < 10000, "Tax connot be over 100% (10000 BP)");\n', '        stakingTaxBP = valueBP;\n', '    }\n', '\n', '    function setUnstakingBP(uint valueBP) external onlyOwner {\n', '        require(valueBP < 10000, "Tax connot be over 100% (10000 BP)");\n', '        unstakingTaxBP = valueBP;\n', '    }\n', '\n', '    function setStartTime(uint _startTime) external onlyOwner {\n', '        startTime = _startTime;\n', '    }\n', '\n', '    function setRegistrationFees(uint valueWithReferrer, uint valueWithoutReferrer) external onlyOwner {\n', '        registrationFeeWithReferrer = valueWithReferrer;\n', '        registrationFeeWithoutReferrer = valueWithoutReferrer;\n', '    }\n', '\n', '    function uintToInt(uint val) internal pure returns (int) {\n', '        if (val >= uint(-1).div(2)) {\n', '            require(false, "Overflow. Cannot convert uint to int.");\n', '        } else {\n', '            return int(val);\n', '        }\n', '    }\n', '\n', '    function _addStake(uint amount) internal returns (uint tax) {\n', '        tax = findTaxAmount(amount, stakingTaxBP);\n', '        uint stakeAmount = amount.sub(tax);\n', '        totalStaked = totalStaked.add(stakeAmount);\n', '        stakeValue[msg.sender] = stakeValue[msg.sender].add(stakeAmount);\n', '        for (uint i=0; i < stakeHandlers.length; i++) {\n', '            stakeHandlers[i].handleStake(msg.sender, stakeAmount, stakeValue[msg.sender]);\n', '        }\n', '        uint payout = profitPerShare.mul(stakeAmount);\n', '        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\n', '        _increaseProfitPerShare(tax);\n', '    }\n', '\n', '    function _increaseProfitPerShare(uint amount) internal {\n', '        if (totalStaked != 0) {\n', '            if (emptyStakeTokens != 0) {\n', '                amount = amount.add(emptyStakeTokens);\n', '                emptyStakeTokens = 0;\n', '            }\n', '            profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked));\n', '        } else {\n', '            emptyStakeTokens = emptyStakeTokens.add(amount);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LidSimplifiedPresaleAccess is Initializable {\n', '    using SafeMath for uint;\n', '    LidStaking private staking;\n', '\n', '    uint[5] private cutoffs;\n', '\n', '    function initialize(LidStaking _staking) external initializer {\n', '        staking = _staking;\n', '        //Precalculated\n', '        cutoffs = [\n', '            500000 ether,\n', '            100000 ether,\n', '            50000 ether,\n', '            25000 ether,\n', '            1 ether\n', '        ];\n', '    }\n', '\n', '    function getAccessTime(address account, uint startTime) external view returns (uint accessTime) {\n', '        uint stakeValue = staking.stakeValue(account);\n', '        if (stakeValue == 0) return startTime.add(15 minutes);\n', '        if (stakeValue >= cutoffs[0]) return startTime;\n', '        uint i=0;\n', '        uint stake2 = cutoffs[0];\n', '        while (stake2 > stakeValue && i < cutoffs.length) {\n', '            i++;\n', '            stake2 = cutoffs[i];\n', '        }\n', '        return startTime.add(i.mul(3 minutes));\n', '    }\n', '}\n', '\n', '\n', 'contract LidSimplifiedPresale is Initializable, Ownable, ReentrancyGuard, Pausable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint public maxBuyPerAddress;\n', '\n', '    uint public referralBP;\n', '\n', '    uint public uniswapEthBP;\n', '    uint public lidEthBP;\n', '\n', '    uint public uniswapTokenBP;\n', '    uint public presaleTokenBP;\n', '    address[] public tokenPools;\n', '    uint[] public tokenPoolBPs;\n', '\n', '    uint public hardcap;\n', '    uint public totalTokens;\n', '\n', '    bool public hasSentToUniswap;\n', '    bool public hasIssuedTokens;\n', '\n', '    uint public finalEndTime;\n', '    uint public finalEth;\n', '\n', '    IERC20 private token;\n', '    IUniswapV2Router01 private uniswapRouter;\n', '    LidSimplifiedPresaleTimer private timer;\n', '    LidSimplifiedPresaleRedeemer private redeemer;\n', '    LidSimplifiedPresaleAccess private access;\n', '    address payable private lidFund;\n', '\n', '    mapping(address => uint) public accountEthDeposit;\n', '    mapping(address => uint) public earnedReferrals;\n', '\n', '    mapping(address => uint) public referralCounts;\n', '\n', '    mapping(address => uint) public refundedEth;\n', '\n', '    bool public isRefunding;\n', '\n', '    modifier whenPresaleActive {\n', '        require(timer.isStarted(), "Presale not yet started.");\n', '        require(!isPresaleEnded(), "Presale has ended.");\n', '        _;\n', '    }\n', '\n', '    modifier whenPresaleFinished {\n', '        require(timer.isStarted(), "Presale not yet started.");\n', '        require(isPresaleEnded(), "Presale has not yet ended.");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        uint _maxBuyPerAddress,\n', '        uint _uniswapEthBP,\n', '        uint _lidEthBP,\n', '        uint _referralBP,\n', '        uint _hardcap,\n', '        address owner,\n', '        LidSimplifiedPresaleTimer _timer,\n', '        LidSimplifiedPresaleRedeemer _redeemer,\n', '        LidSimplifiedPresaleAccess _access,\n', '        IERC20 _token,\n', '        IUniswapV2Router01 _uniswapRouter,\n', '        address payable _lidFund\n', '    ) external initializer {\n', '        Ownable.initialize(msg.sender);\n', '        Pausable.initialize(msg.sender);\n', '        ReentrancyGuard.initialize();\n', '\n', '        token = _token;\n', '        timer = _timer;\n', '        redeemer = _redeemer;\n', '        access = _access;\n', '        lidFund = _lidFund;\n', '\n', '        maxBuyPerAddress = _maxBuyPerAddress;\n', '\n', '        uniswapEthBP = _uniswapEthBP;\n', '        lidEthBP = _lidEthBP;\n', '\n', '        referralBP = _referralBP;\n', '        hardcap = _hardcap;\n', '\n', '        uniswapRouter = _uniswapRouter;\n', '        totalTokens = token.totalSupply();\n', '        token.approve(address(uniswapRouter), token.totalSupply());\n', '\n', '        //Due to issue in oz testing suite, the msg.sender might not be owner\n', '        _transferOwnership(owner);\n', '    }\n', '\n', '    function deposit() external payable whenNotPaused {\n', '        deposit(address(0x0));\n', '    }\n', '\n', '    function setTokenPools(\n', '        uint _uniswapTokenBP,\n', '        uint _presaleTokenBP,\n', '        address[] calldata _tokenPools,\n', '        uint[] calldata _tokenPoolBPs\n', '    ) external onlyOwner whenNotPaused {\n', '        require(_tokenPools.length == _tokenPoolBPs.length, "Must have exactly one tokenPool addresses for each BP.");\n', '        delete tokenPools;\n', '        delete tokenPoolBPs;\n', '        uniswapTokenBP = _uniswapTokenBP;\n', '        presaleTokenBP = _presaleTokenBP;\n', '        for (uint i = 0; i < _tokenPools.length; ++i) {\n', '            tokenPools.push(_tokenPools[i]);\n', '        }\n', '        uint totalTokenPoolBPs = uniswapTokenBP.add(presaleTokenBP);\n', '        for (uint i = 0; i < _tokenPoolBPs.length; ++i) {\n', '            tokenPoolBPs.push(_tokenPoolBPs[i]);\n', '            totalTokenPoolBPs = totalTokenPoolBPs.add(_tokenPoolBPs[i]);\n', '        }\n', '        require(totalTokenPoolBPs == 10000, "Must allocate exactly 100% (10000 BP) of tokens to pools");\n', '    }\n', '\n', '    function sendToUniswap() external whenPresaleFinished nonReentrant whenNotPaused {\n', '        require(msg.sender == tx.origin, "Sender must be origin - no contract calls.");\n', '        require(tokenPools.length > 0, "Must have set token pools");\n', '        require(!hasSentToUniswap, "Has already sent to Uniswap.");\n', '        finalEndTime = now;\n', '        finalEth = address(this).balance;\n', '        hasSentToUniswap = true;\n', '        uint uniswapTokens = totalTokens.mulBP(uniswapTokenBP);\n', '        uint uniswapEth = finalEth.mulBP(uniswapEthBP);\n', '        uniswapRouter.addLiquidityETH.value(uniswapEth)(\n', '            address(token),\n', '            uniswapTokens,\n', '            uniswapTokens,\n', '            uniswapEth,\n', '            address(0x000000000000000000000000000000000000dEaD),\n', '            now\n', '        );\n', '    }\n', '\n', '    function issueTokens() external whenPresaleFinished whenNotPaused {\n', '        require(hasSentToUniswap, "Has not yet sent to Uniswap.");\n', '        require(!hasIssuedTokens, "Has already issued tokens.");\n', '        hasIssuedTokens = true;\n', '        uint last = tokenPools.length.sub(1);\n', '        for (uint i = 0; i < last; ++i) {\n', '            token.transfer(\n', '                tokenPools[i],\n', '                totalTokens.mulBP(tokenPoolBPs[i])\n', '            );\n', '        }\n', '        // in case rounding error, send all to final\n', '        token.transfer(\n', '            tokenPools[last],\n', '            totalTokens.mulBP(tokenPoolBPs[last])\n', '        );\n', '    }\n', '\n', '    function releaseEthToAddress(address payable receiver, uint amount) external onlyOwner whenNotPaused returns(uint) {\n', '        require(hasSentToUniswap, "Has not yet sent to Uniswap.");\n', '        receiver.transfer(amount);\n', '    }\n', '\n', '    function redeem() external whenPresaleFinished whenNotPaused {\n', '        require(hasSentToUniswap, "Must have sent to Uniswap before any redeems.");\n', '        uint claimable = redeemer.calculateReedemable(msg.sender, finalEndTime, totalTokens.mulBP(presaleTokenBP));\n', '        redeemer.setClaimed(msg.sender, claimable);\n', '        token.transfer(msg.sender, claimable);\n', '    }\n', '\n', '    function startRefund() external onlyOwner {\n', '        //TODO: Automatically start refund after timer is passed for softcap reach\n', '        pause();\n', '        isRefunding = true;\n', '    }\n', '\n', '    function topUpRefundFund() external payable onlyOwner {\n', '\n', '    }\n', '\n', '    function claimRefund(address payable account) external whenPaused {\n', '        require(isRefunding, "Refunds not active");\n', '        uint refundAmt = getRefundableEth(account);\n', '        require(refundAmt > 0, "Nothing to refund");\n', '        refundedEth[account] = refundedEth[account].add(refundAmt);\n', '        account.transfer(refundAmt);\n', '    }\n', '\n', '    function updateHardcap(uint valueWei) external onlyOwner {\n', '        hardcap = valueWei;\n', '    }\n', '\n', '    function updateMaxBuy(uint valueWei) external onlyOwner {\n', '        maxBuyPerAddress = valueWei;\n', '    }\n', '\n', '    function deposit(address payable referrer) public payable nonReentrant whenNotPaused {\n', '        require(timer.isStarted(), "Presale not yet started.");\n', '        require(now >= access.getAccessTime(msg.sender, timer.startTime()), "Time must be at least access time.");\n', '        require(msg.sender != referrer, "Sender cannot be referrer.");\n', '        require(address(this).balance.sub(msg.value) <= hardcap, "Cannot deposit more than hardcap.");\n', '        require(!hasSentToUniswap, "Presale Ended, Uniswap has been called.");\n', '        uint endTime = timer.updateEndTime();\n', '        require(!(now > endTime && endTime != 0), "Presale Ended, time over limit.");\n', '        require(\n', '            redeemer.accountDeposits(msg.sender).add(msg.value) <= maxBuyPerAddress,\n', '            "Deposit exceeds max buy per address."\n', '        );\n', '\n', '        uint fee = msg.value.mulBP(referralBP);\n', '        uint depositEther = msg.value;\n', '        uint excess = 0;\n', '\n', '        //Remove fee and refund eth in case final purchase needed to end sale without dust errors\n', '        if (address(this).balance > hardcap) {\n', '            fee = 0;\n', '            excess = address(this).balance.sub(hardcap);\n', '            depositEther = depositEther.sub(excess);\n', '        }\n', '\n', '        redeemer.setDeposit(msg.sender, depositEther.sub(fee), address(this).balance.sub(fee));\n', '\n', '        if (excess == 0) {\n', '            if (referrer != address(0x0) && referrer != msg.sender) {\n', '                earnedReferrals[referrer] = earnedReferrals[referrer].add(fee);\n', '                referralCounts[referrer] = referralCounts[referrer].add(1);\n', '                referrer.transfer(fee);\n', '            } else {\n', '                lidFund.transfer(fee);\n', '            }\n', '        } else {\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '\n', '    function getRefundableEth(address account) public view returns (uint) {\n', '        if (!isRefunding) return 0;\n', '        //TODO: use account eth deposits insted once switched to referral withdraw pattern\n', '        return redeemer.accountDeposits(account)\n', '            .divBP(10000 - referralBP)\n', '            .sub(refundedEth[account]);\n', '    }\n', '\n', '    function isPresaleEnded() public view returns (bool) {\n', '        uint endTime =  timer.endTime();\n', '        if (hasSentToUniswap) return true;\n', '        return (\n', '            (address(this).balance >= hardcap) ||\n', '            (timer.isStarted() && (now > endTime && endTime != 0))\n', '        );\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LidTimeLock is Initializable, Ownable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint public releaseInterval;\n', '    uint public releaseStart;\n', '    uint public releaseBP;\n', '\n', '    uint public startingTokens;\n', '    uint public claimedTokens;\n', '\n', '    IERC20 private token;\n', '\n', '    address releaseWallet;\n', '    \n', '    LidSimplifiedPresale private presale;\n', '\n', '    modifier onlyAfterStart {\n', '        uint finalEndTime = presale.finalEndTime();\n', '        require(finalEndTime != 0 && now > finalEndTime, "Has not yet started.");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        uint _releaseInterval,\n', '        uint _releaseBP,\n', '        address owner,\n', '        IERC20 _token,\n', '        LidSimplifiedPresale _presale,\n', '        address _releaseWallet\n', '    ) external initializer {\n', '        releaseInterval = _releaseInterval;\n', '        releaseBP = _releaseBP;\n', '        token = _token;\n', '        presale = _presale;\n', '        releaseWallet = _releaseWallet;\n', '\n', '        Ownable.initialize(msg.sender);\n', '\n', '        //Due to issue in oz testing suite, the msg.sender might not be owner\n', '        _transferOwnership(owner);\n', '    }\n', '\n', '    function claimToken() external onlyAfterStart {\n', '        startingTokens = token.balanceOf(address(this)).add(claimedTokens);\n', '        uint cycle = getCurrentCycleCount();\n', '        uint totalClaimAmount = cycle.mul(startingTokens.mulBP(releaseBP));\n', '        uint toClaim = totalClaimAmount.sub(claimedTokens);\n', '        if (token.balanceOf(address(this)) < toClaim) toClaim = token.balanceOf(address(this));\n', '        claimedTokens = claimedTokens.add(toClaim);\n', '        token.transfer(releaseWallet, toClaim);\n', '    }\n', '\n', '    function reset(\n', '        uint _releaseInterval,\n', '        uint _releaseBP,\n', '        LidSimplifiedPresale _presale,\n', '        address _releaseWallet\n', '    ) external onlyOwner {\n', '        releaseInterval = _releaseInterval;\n', '        releaseBP = _releaseBP;\n', '        presale = _presale;\n', '        releaseWallet = _releaseWallet;\n', '    }\n', '\n', '    function setPresale(\n', '        LidSimplifiedPresale _presale\n', '    ) external onlyOwner {\n', '        presale = _presale;\n', '    }\n', '\n', '    function getCurrentCycleCount() public view returns (uint) {\n', '        uint finalEndTime = presale.finalEndTime();\n', '        if (now <= finalEndTime || finalEndTime == 0) return 0;\n', '        return now.sub(finalEndTime).div(releaseInterval).add(1);\n', '    }\n', '\n', '}']