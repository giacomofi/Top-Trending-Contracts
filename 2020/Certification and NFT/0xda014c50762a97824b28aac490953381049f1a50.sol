['pragma solidity 0.5.17;\n', '\n', 'interface IYeldContract {\n', '  function rebalance() external;\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address payable private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    function owner() public view returns (address payable) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    function _transferOwnership(address payable newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract YeldOracle is Ownable {\n', '  address public yDAI;\n', '  address public yTether;\n', '  address public yTrueUSD;\n', '  address public yUSDC;\n', '\n', '  function () external payable {}\n', '\n', '  constructor (address _yDAI, address _yTether, address _yTrueUSD, address _yUSDC) public {\n', '    yDAI = _yDAI;\n', '    yTether = _yTether;\n', '    yTrueUSD = _yTrueUSD;\n', '    yUSDC = _yUSDC;\n', '    rebalance();\n', '  }\n', '\n', '  function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {\n', '    IERC20(_token).transfer(msg.sender, _amount);\n', '  }\n', '\n', '  function extractETHIfStuck() public onlyOwner {\n', '    owner().transfer(address(this).balance);\n', '  }\n', '\n', '  function setyDAI(address _contract) public onlyOwner {\n', '    yDAI = _contract;\n', '  }\n', '\n', '  function setyTether(address _contract) public onlyOwner {\n', '    yTether = _contract;\n', '  }\n', '\n', '  function setyTrueUSD(address _contract) public onlyOwner {\n', '    yTrueUSD = _contract;\n', '  }\n', '\n', '  function setyUSDC(address _contract) public onlyOwner {\n', '    yUSDC = _contract;\n', '  }\n', '\n', '  function rebalance() public {\n', '    IYeldContract(yDAI).rebalance();\n', '    IYeldContract(yTether).rebalance();\n', '    IYeldContract(yTrueUSD).rebalance();\n', '    IYeldContract(yUSDC).rebalance();\n', '  }\n', '}']