['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-15\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/roles/Ownable.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() external view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() external virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal virtual {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/compliance/ICompliance.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'interface ICompliance {\n', '\n', '    /**\n', '    *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\n', '    *  the event is emitted by the Compliance constructor and by the addTokenAgent function\n', '    *  `_agentAddress` is the address of the Agent to add\n', '    */\n', '    event TokenAgentAdded(address _agentAddress);\n', '\n', '    /**\n', '    *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\n', '    *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\n', '    *  `_agentAddress` is the address of the Agent to remove\n', '    */\n', '    event TokenAgentRemoved(address _agentAddress);\n', '\n', '    /**\n', '    *  this event is emitted when a token has been bound to the compliance contract\n', '    *  the event is emitted by the bindToken function\n', '    *  `_token` is the address of the token to bind\n', '    */\n', '    event TokenBound(address _token);\n', '\n', '    /**\n', '    *  this event is emitted when a token has been unbound from the compliance contract\n', '    *  the event is emitted by the unbindToken function\n', '    *  `_token` is the address of the token to unbind\n', '    */\n', '    event TokenUnbound(address _token);\n', '\n', '    /**\n', '    *  @dev Returns true if the Address is in the list of token agents\n', '    *  @param _agentAddress address of this agent\n', '    */\n', '    function isTokenAgent(address _agentAddress) external view returns (bool);\n', '\n', '    /**\n', '    *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\n', '    *  @param _token address of the token\n', '    */\n', '    function isTokenBound(address _token) external view returns (bool);\n', '\n', '    /**\n', '     *  @dev adds an agent to the list of token agents\n', '     *  @param _agentAddress address of the agent to be added\n', '     *  Emits a TokenAgentAdded event\n', '     */\n', '    function addTokenAgent(address _agentAddress) external;\n', '\n', '    /**\n', '    *  @dev remove Agent from the list of token agents\n', '    *  @param _agentAddress address of the agent to be removed (must be added first)\n', '    *  Emits a TokenAgentRemoved event\n', '    */\n', '    function removeTokenAgent(address _agentAddress) external;\n', '\n', '    /**\n', '     *  @dev binds a token to the compliance contract\n', '     *  @param _token address of the token to bind\n', '     *  Emits a TokenBound event\n', '     */\n', '    function bindToken(address _token) external;\n', '\n', '    /**\n', '    *  @dev unbinds a token from the compliance contract\n', '    *  @param _token address of the token to unbind\n', '    *  Emits a TokenUnbound event\n', '    */\n', '    function unbindToken(address _token) external;\n', '\n', '\n', '   /**\n', '    *  @dev checks that the transfer is compliant.\n', '    *  default compliance always returns true\n', '    *  READ ONLY FUNCTION, this function cannot be used to increment\n', '    *  counters, emit events, ...\n', '    *  @param _from The address of the sender\n', '    *  @param _to The address of the receiver\n', '    *  @param _amount The amount of tokens involved in the transfer\n', '    */\n', '    function canTransfer(address _from, address _to, uint256 _amount) external view returns (bool);\n', '\n', '   /**\n', '    *  @dev function called whenever tokens are transferred\n', '    *  from one wallet to another\n', '    *  this function can update state variables in the compliance contract\n', '    *  these state variables being used by `canTransfer` to decide if a transfer\n', '    *  is compliant or not depending on the values stored in these state variables and on\n', '    *  the parameters of the compliance smart contract\n', '    *  @param _from The address of the sender\n', '    *  @param _to The address of the receiver\n', '    *  @param _amount The amount of tokens involved in the transfer\n', '    */\n', '    function transferred(address _from, address _to, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev function called whenever tokens are created\n', '    *  on a wallet\n', '    *  this function can update state variables in the compliance contract\n', '    *  these state variables being used by `canTransfer` to decide if a transfer\n', '    *  is compliant or not depending on the values stored in these state variables and on\n', '    *  the parameters of the compliance smart contract\n', '    *  @param _to The address of the receiver\n', '    *  @param _amount The amount of tokens involved in the transfer\n', '    */\n', '    function created(address _to, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev function called whenever tokens are destroyed\n', '    *  this function can update state variables in the compliance contract\n', '    *  these state variables being used by `canTransfer` to decide if a transfer\n', '    *  is compliant or not depending on the values stored in these state variables and on\n', '    *  the parameters of the compliance smart contract\n', '    *  @param _from The address of the receiver\n', '    *  @param _amount The amount of tokens involved in the transfer\n', '    */\n', '    function destroyed(address _from, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev function used to transfer the ownership of the compliance contract\n', '    *  to a new owner, giving him access to the `OnlyOwner` functions implemented on the contract\n', '    *  @param newOwner The address of the new owner of the compliance contract\n', '    *  This function can only be called by the owner of the compliance contract\n', '    *  emits an `OwnershipTransferred` event\n', '    */\n', '    function transferOwnershipOnComplianceContract(address newOwner) external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @onchain-id/solidity/contracts/IERC734.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Interface of the ERC734 (Key Holder) standard as defined in the EIP.\n', ' */\n', 'interface IERC734 {\n', '    /**\n', '     * @dev Definition of the structure of a Key.\n', '     *\n', '     * Specification: Keys are cryptographic public keys, or contract addresses associated with this identity.\n', '     * The structure should be as follows:\n', '     *   - key: A public key owned by this identity\n', '     *      - purposes: uint256[] Array of the key purposes, like 1 = MANAGEMENT, 2 = EXECUTION\n', '     *      - keyType: The type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\n', '     *      - key: bytes32 The public key. // Its the Keccak256 hash of the key\n', '     */\n', '    struct Key {\n', '        uint256[] purposes;\n', '        uint256 keyType;\n', '        bytes32 key;\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when an execution request was approved.\n', '     *\n', '     * Specification: MUST be triggered when approve was successfully called.\n', '     */\n', '    event Approved(uint256 indexed executionId, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when an execute operation was approved and successfully performed.\n', '     *\n', '     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n', '     */\n', '    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n', '\n', '    /**\n', '     * @dev Emitted when an execution request was performed via `execute`.\n', '     *\n', '     * Specification: MUST be triggered when execute was successfully called.\n', '     */\n', '    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n', '\n', '    /**\n', '     * @dev Emitted when a key was added to the Identity.\n', '     *\n', '     * Specification: MUST be triggered when addKey was successfully called.\n', '     */\n', '    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n', '\n', '    /**\n', '     * @dev Emitted when a key was removed from the Identity.\n', '     *\n', '     * Specification: MUST be triggered when removeKey was successfully called.\n', '     */\n', '    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n', '\n', '    /**\n', '     * @dev Emitted when the list of required keys to perform an action was updated.\n', '     *\n', '     * Specification: MUST be triggered when changeKeysRequired was successfully called.\n', '     */\n', '    event KeysRequiredChanged(uint256 purpose, uint256 number);\n', '\n', '\n', '    /**\n', '     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n', '     *\n', '     * Triggers Event: `KeyAdded`\n', '     *\n', "     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\n", '     */\n', '    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n', '\n', '    /**\n', '    * @dev Approves an execution or claim addition.\n', '    *\n', '    * Triggers Event: `Approved`, `Executed`\n', '    *\n', '    * Specification:\n', '    * This SHOULD require n of m approvals of keys purpose 1, if the _to of the execution is the identity contract itself, to successfully approve an execution.\n', '    * And COULD require n of m approvals of keys purpose 2, if the _to of the execution is another contract, to successfully approve an execution.\n', '    */\n', '    function approve(uint256 _id, bool _approve) external returns (bool success);\n', '\n', '    /**\n', '     * @dev Passes an execution instruction to an ERC725 identity.\n', '     *\n', '     * Triggers Event: `ExecutionRequested`, `Executed`\n', '     *\n', '     * Specification:\n', '     * SHOULD require approve to be called with one or more keys of purpose 1 or 2 to approve this execution.\n', '     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n', '     */\n', '    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n', '\n', '    /**\n', '     * @dev Returns the full key data, if present in the identity.\n', '     */\n', '    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n', '\n', '    /**\n', '     * @dev Returns the list of purposes associated with a key.\n', '     */\n', '    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\n', '\n', '    /**\n', '     * @dev Returns an array of public key bytes32 held by this identity.\n', '     */\n', '    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n', '\n', '    /**\n', '     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n', '     */\n', '    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n', '\n', '    /**\n', '     * @dev Removes _purpose for _key from the identity.\n', '     *\n', '     * Triggers Event: `KeyRemoved`\n', '     *\n', "     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\n", '     */\n', '    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n', '}\n', '\n', '// File: @onchain-id/solidity/contracts/IERC735.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n', ' */\n', 'interface IERC735 {\n', '\n', '    /**\n', '     * @dev Emitted when a claim request was performed.\n', '     *\n', '     * Specification: Is not clear\n', '     */\n', '    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n', '\n', '    /**\n', '     * @dev Emitted when a claim was added.\n', '     *\n', '     * Specification: MUST be triggered when a claim was successfully added.\n', '     */\n', '    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n', '\n', '    /**\n', '     * @dev Emitted when a claim was removed.\n', '     *\n', '     * Specification: MUST be triggered when removeClaim was successfully called.\n', '     */\n', '    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n', '\n', '    /**\n', '     * @dev Emitted when a claim was changed.\n', '     *\n', '     * Specification: MUST be triggered when changeClaim was successfully called.\n', '     */\n', '    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n', '\n', '    /**\n', '     * @dev Definition of the structure of a Claim.\n', '     *\n', '     * Specification: Claims are information an issuer has about the identity holder.\n', '     * The structure should be as follows:\n', '     *   - claim: A claim published for the Identity.\n', '     *      - topic: A uint256 number which represents the topic of the claim. (e.g. 1 biometric, 2 residence (ToBeDefined: number schemes, sub topics based on number ranges??))\n', '     *      - scheme : The scheme with which this claim SHOULD be verified or how it should be processed. Its a uint256 for different schemes. E.g. could 3 mean contract verification, where the data will be call data, and the issuer a contract address to call (ToBeDefined). Those can also mean different key types e.g. 1 = ECDSA, 2 = RSA, etc. (ToBeDefined)\n', '     *      - issuer: The issuers identity contract address, or the address used to sign the above signature. If an identity contract, it should hold the key with which the above message was signed, if the key is not present anymore, the claim SHOULD be treated as invalid. The issuer can also be a contract address itself, at which the claim can be verified using the call data.\n', '     *      - signature: Signature which is the proof that the claim issuer issued a claim of topic for this identity. it MUST be a signed message of the following structure: `keccak256(abi.encode(identityHolder_address, topic, data))`\n', '     *      - data: The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.\n', '     *      - uri: The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.\n', '     */\n', '    struct Claim {\n', '        uint256 topic;\n', '        uint256 scheme;\n', '        address issuer;\n', '        bytes signature;\n', '        bytes data;\n', '        string uri;\n', '    }\n', '\n', '    /**\n', '     * @dev Get a claim by its ID.\n', '     *\n', '     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n', '     */\n', '    function getClaim(bytes32 _claimId) external view returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\n', '\n', '    /**\n', '     * @dev Returns an array of claim IDs by topic.\n', '     */\n', '    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\n', '\n', '    /**\n', '     * @dev Add or update a claim.\n', '     *\n', '     * Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged`\n', '     *\n', '     * Specification: Requests the ADDITION or the CHANGE of a claim from an issuer.\n', '     * Claims can requested to be added by anybody, including the claim holder itself (self issued).\n', '     *\n', '     * _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n', '     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n', '     *\n', '     * This COULD implement an approval process for pending claims, or add them right away.\n', '     * MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.\n', '     */\n', '    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes calldata _signature, bytes calldata _data, string calldata _uri) external returns (bytes32 claimRequestId);\n', '\n', '    /**\n', '     * @dev Removes a claim.\n', '     *\n', '     * Triggers Event: `ClaimRemoved`\n', '     *\n', '     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n', '     */\n', '    function removeClaim(bytes32 _claimId) external returns (bool success);\n', '}\n', '\n', '// File: @onchain-id/solidity/contracts/IIdentity.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', 'interface IIdentity is IERC734, IERC735 {}\n', '\n', '// File: @onchain-id/solidity/contracts/IClaimIssuer.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'interface IClaimIssuer is IIdentity {\n', '    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n', '    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\n', '    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n', '    function isClaimValid(IIdentity _identity, uint256 claimTopic, bytes calldata sig, bytes calldata data) external view returns (bool);\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/registry/ITrustedIssuersRegistry.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'interface ITrustedIssuersRegistry {\n', '\n', '   /**\n', '    *  this event is emitted when a trusted issuer is added in the registry.\n', '    *  the event is emitted by the addTrustedIssuer function\n', "    *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n", '    *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n', '    */\n', '    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint[] claimTopics);\n', '\n', '   /**\n', '    *  this event is emitted when a trusted issuer is removed from the registry.\n', '    *  the event is emitted by the removeTrustedIssuer function\n', "    *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n", '    */\n', '    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\n', '\n', '   /**\n', '    *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\n', '    *  the event is emitted by the updateIssuerClaimTopics function\n', "    *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n", '    *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n', '    */\n', '    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint[] claimTopics);\n', '\n', '   /**\n', '    *  @dev registers a ClaimIssuer contract as trusted claim issuer.\n', "    *  Requires that a ClaimIssuer contract doesn't already exist\n", '    *  Requires that the claimTopics set is not empty\n', '    *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\n', '    *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n', '    *  This function can only be called by the owner of the Trusted Issuers Registry contract\n', '    *  emits a `TrustedIssuerAdded` event\n', '    */\n', '    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint[] calldata _claimTopics) external;\n', '\n', '   /**\n', '    *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\n', '    *  Requires that the claim issuer contract to be registered first\n', '    *  @param _trustedIssuer the claim issuer to remove.\n', '    *  This function can only be called by the owner of the Trusted Issuers Registry contract\n', '    *  emits a `TrustedIssuerRemoved` event\n', '    */\n', '    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\n', '\n', '   /**\n', '    *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\n', '    *  Requires that this ClaimIssuer contract already exists in the registry\n', '    *  Requires that the provided claimTopics set is not empty\n', '    *  @param _trustedIssuer the claim issuer to update.\n', '    *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n', '    *  This function can only be called by the owner of the Trusted Issuers Registry contract\n', '    *  emits a `ClaimTopicsUpdated` event\n', '    */\n', '    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint[] calldata _claimTopics) external;\n', '\n', '   /**\n', '    *  @dev Function for getting all the trusted claim issuers stored.\n', '    *  @return array of all claim issuers registered.\n', '    */\n', '    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\n', '\n', '   /**\n', '    *  @dev Checks if the ClaimIssuer contract is trusted\n', '    *  @param _issuer the address of the ClaimIssuer contract\n', '    *  @return true if the issuer is trusted, false otherwise.\n', '    */\n', '    function isTrustedIssuer(address _issuer) external view returns(bool);\n', '\n', '   /**\n', '    *  @dev Function for getting all the claim topic of trusted claim issuer\n', '    *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\n', '    *  @param _trustedIssuer the trusted issuer concerned.\n', '    *  @return The set of claim topics that the trusted issuer is allowed to emit\n', '    */\n', '    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns(uint[] memory);\n', '\n', '   /**\n', '    *  @dev Function for checking if the trusted claim issuer is allowed\n', '    *  to emit a certain claim topic\n', "    *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\n", '    *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n', '    *  @return true if the issuer is trusted for this claim topic.\n', '    */\n', '    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\n', '\n', '   /**\n', '    *  @dev Transfers the Ownership of TrustedIssuersRegistry to a new Owner.\n', '    *  @param _newOwner The new owner of this contract.\n', '    *  This function can only be called by the owner of the Trusted Issuers Registry contract\n', '    *  emits an `OwnershipTransferred` event\n', '    */\n', '    function transferOwnershipOnIssuersRegistryContract(address _newOwner) external;\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/registry/IClaimTopicsRegistry.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'interface IClaimTopicsRegistry {\n', '\n', '   /**\n', '    *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n', "    *  the event is emitted by the 'addClaimTopic' function\n", '    *  `claimTopic` is the required claim added to the Claim Topics Registry\n', '    */\n', '    event ClaimTopicAdded(uint256 indexed claimTopic);\n', '\n', '   /**\n', '    *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n', "    *  the event is emitted by the 'removeClaimTopic' function\n", '    *  `claimTopic` is the required claim removed from the Claim Topics Registry\n', '    */\n', '    event ClaimTopicRemoved(uint256 indexed claimTopic);\n', '\n', '   /**\n', '    * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\n', '    * Only owner can call.\n', '    * emits `ClaimTopicAdded` event\n', '    * @param _claimTopic The claim topic index\n', '    */\n', '    function addClaimTopic(uint256 _claimTopic) external;\n', '\n', '   /**\n', '    *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\n', '    *  Only owner can call.\n', '    *  emits `ClaimTopicRemoved` event\n', '    *  @param _claimTopic The claim topic index\n', '    */\n', '    function removeClaimTopic(uint256 _claimTopic) external;\n', '\n', '   /**\n', '    *  @dev Get the trusted claim topics for the security token\n', '    *  @return Array of trusted claim topics\n', '    */\n', '    function getClaimTopics() external view returns (uint256[] memory);\n', '\n', '   /**\n', '    *  @dev Transfers the Ownership of ClaimTopics to a new Owner.\n', '    *  Only owner can call.\n', '    *  @param _newOwner The new owner of this contract.\n', '    */\n', '    function transferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external;\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/registry/IIdentityRegistryStorage.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'interface IIdentityRegistryStorage {\n', '\n', '   /**\n', '    *  this event is emitted when an Identity is registered into the storage contract.\n', "    *  the event is emitted by the 'registerIdentity' function\n", "    *  `investorAddress` is the address of the investor's wallet\n", '    *  `identity` is the address of the Identity smart contract (onchainID)\n', '    */\n', '    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity is removed from the storage contract.\n', "    *  the event is emitted by the 'deleteIdentity' function\n", "    *  `investorAddress` is the address of the investor's wallet\n", '    *  `identity` is the address of the Identity smart contract (onchainID)\n', '    */\n', '    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity has been updated\n', "    *  the event is emitted by the 'updateIdentity' function\n", "    *  `oldIdentity` is the old Identity contract's address to update\n", "    *  `newIdentity` is the new Identity contract's\n", '    */\n', '    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\n', '\n', '   /**\n', "    *  this event is emitted when an Identity's country has been updated\n", "    *  the event is emitted by the 'updateCountry' function\n", '    *  `investorAddress` is the address on which the country has been updated\n', '    *  `country` is the numeric code (ISO 3166-1) of the new country\n', '    */\n', '    event CountryModified(address indexed investorAddress, uint16 indexed country);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity Registry is bound to the storage contract\n', "    *  the event is emitted by the 'addIdentityRegistry' function\n", '    *  `identityRegistry` is the address of the identity registry added\n', '    */\n', '    event IdentityRegistryBound(address indexed identityRegistry);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity Registry is unbound from the storage contract\n', "    *  the event is emitted by the 'removeIdentityRegistry' function\n", '    *  `identityRegistry` is the address of the identity registry removed\n', '    */\n', '    event IdentityRegistryUnbound(address indexed identityRegistry);\n', '\n', '   /**\n', '    *  @dev Returns the identity registries linked to the storage contract\n', '    */\n', '    function linkedIdentityRegistries() external view returns (address[] memory);\n', '\n', '   /**\n', '    *  @dev Returns the onchainID of an investor.\n', '    *  @param _userAddress The wallet of the investor\n', '    */\n', '    function storedIdentity(address _userAddress) external view returns (IIdentity);\n', '\n', '   /**\n', '    *  @dev Returns the country code of an investor.\n', '    *  @param _userAddress The wallet of the investor\n', '    */\n', '    function storedInvestorCountry(address _userAddress) external view returns (uint16);\n', '\n', '   /**\n', '    *  @dev adds an identity contract corresponding to a user address in the storage.\n', "    *  Requires that the user doesn't have an identity contract already registered.\n", '    *  This function can only be called by an address set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', "    *  @param _identity The address of the user's identity contract\n", '    *  @param _country The country of the investor\n', '    *  emits `IdentityStored` event\n', '    */\n', '    function addIdentityToStorage(address _userAddress, IIdentity _identity, uint16 _country) external;\n', '\n', '   /**\n', '    *  @dev Removes an user from the storage.\n', '    *  Requires that the user have an identity contract already deployed that will be deleted.\n', '    *  This function can only be called by an address set as agent of the smart contract\n', '    *  @param _userAddress The address of the user to be removed\n', '    *  emits `IdentityUnstored` event\n', '    */\n', '    function removeIdentityFromStorage(address _userAddress) external;\n', '\n', '   /**\n', '    *  @dev Updates the country corresponding to a user address.\n', '    *  Requires that the user should have an identity contract already deployed that will be replaced.\n', '    *  This function can only be called by an address set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', '    *  @param _country The new country of the user\n', '    *  emits `CountryModified` event\n', '    */\n', '    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\n', '\n', '   /**\n', '    *  @dev Updates an identity contract corresponding to a user address.\n', '    *  Requires that the user address should be the owner of the identity contract.\n', '    *  Requires that the user should have an identity contract already deployed that will be replaced.\n', '    *  This function can only be called by an address set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', "    *  @param _identity The address of the user's new identity contract\n", '    *  emits `IdentityModified` event\n', '    */\n', '    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\n', '\n', '   /**\n', '    *  @notice Transfers the Ownership of the Identity Registry Storage to a new Owner.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  @param _newOwner The new owner of this contract.\n', '    */\n', '    function transferOwnershipOnIdentityRegistryStorage(address _newOwner) external;\n', '\n', '   /**\n', '    *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n', '    *  @param _identityRegistry The identity registry address to add.\n', '    */\n', '    function bindIdentityRegistry(address _identityRegistry) external;\n', '\n', '   /**\n', '    *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n', '    *  @param _identityRegistry The identity registry address to remove.\n', '    */\n', '    function unbindIdentityRegistry(address _identityRegistry) external;\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/registry/IIdentityRegistry.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IIdentityRegistry {\n', '\n', '   /**\n', '    *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n', '    *  the event is emitted by the IdentityRegistry constructor\n', '    *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n', '    */\n', '    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\n', '\n', '   /**\n', '    *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n', '    *  the event is emitted by the IdentityRegistry constructor\n', '    *  `identityStorage` is the address of the Identity Registry Storage contract\n', '    */\n', '    event IdentityStorageSet(address indexed identityStorage);\n', '\n', '   /**\n', '    *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n', '    *  the event is emitted by the IdentityRegistry constructor\n', '    *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\n', '    */\n', '    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity is registered into the Identity Registry.\n', "    *  the event is emitted by the 'registerIdentity' function\n", "    *  `investorAddress` is the address of the investor's wallet\n", '    *  `identity` is the address of the Identity smart contract (onchainID)\n', '    */\n', '    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity is removed from the Identity Registry.\n', "    *  the event is emitted by the 'deleteIdentity' function\n", "    *  `investorAddress` is the address of the investor's wallet\n", '    *  `identity` is the address of the Identity smart contract (onchainID)\n', '    */\n', '    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\n', '\n', '   /**\n', '    *  this event is emitted when an Identity has been updated\n', "    *  the event is emitted by the 'updateIdentity' function\n", "    *  `oldIdentity` is the old Identity contract's address to update\n", "    *  `newIdentity` is the new Identity contract's\n", '    */\n', '    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\n', '\n', '   /**\n', "    *  this event is emitted when an Identity's country has been updated\n", "    *  the event is emitted by the 'updateCountry' function\n", '    *  `investorAddress` is the address on which the country has been updated\n', '    *  `country` is the numeric code (ISO 3166-1) of the new country\n', '    */\n', '    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\n', '\n', '   /**\n', '    *  @dev Register an identity contract corresponding to a user address.\n', "    *  Requires that the user doesn't have an identity contract already registered.\n", '    *  This function can only be called by a wallet set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', "    *  @param _identity The address of the user's identity contract\n", '    *  @param _country The country of the investor\n', '    *  emits `IdentityRegistered` event\n', '    */\n', '    function registerIdentity(address _userAddress, IIdentity _identity, uint16 _country) external;\n', '\n', '   /**\n', '    *  @dev Removes an user from the identity registry.\n', '    *  Requires that the user have an identity contract already deployed that will be deleted.\n', '    *  This function can only be called by a wallet set as agent of the smart contract\n', '    *  @param _userAddress The address of the user to be removed\n', '    *  emits `IdentityRemoved` event\n', '    */\n', '    function deleteIdentity(address _userAddress) external;\n', '\n', '   /**\n', '    *  @dev Replace the actual identityRegistryStorage contract with a new one.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n', '    *  emits `IdentityStorageSet` event\n', '    */\n', '    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\n', '\n', '   /**\n', '    *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n', '    *  emits `ClaimTopicsRegistrySet` event\n', '    */\n', '    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\n', '\n', '   /**\n', '    *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n', '    *  emits `TrustedIssuersRegistrySet` event\n', '    */\n', '    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\n', '\n', '   /**\n', '    *  @dev Updates the country corresponding to a user address.\n', '    *  Requires that the user should have an identity contract already deployed that will be replaced.\n', '    *  This function can only be called by a wallet set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', '    *  @param _country The new country of the user\n', '    *  emits `CountryUpdated` event\n', '    */\n', '    function updateCountry(address _userAddress, uint16 _country) external;\n', '\n', '   /**\n', '    *  @dev Updates an identity contract corresponding to a user address.\n', '    *  Requires that the user address should be the owner of the identity contract.\n', '    *  Requires that the user should have an identity contract already deployed that will be replaced.\n', '    *  This function can only be called by a wallet set as agent of the smart contract\n', '    *  @param _userAddress The address of the user\n', "    *  @param _identity The address of the user's new identity contract\n", '    *  emits `IdentityUpdated` event\n', '    */\n', '    function updateIdentity(address _userAddress, IIdentity _identity) external;\n', '\n', '   /**\n', '    *  @dev function allowing to register identities in batch\n', '    *  This function can only be called by a wallet set as agent of the smart contract\n', '    *  Requires that none of the users has an identity contract already registered.\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _userAddresses The addresses of the users\n', '    *  @param _identities The addresses of the corresponding identity contracts\n', '    *  @param _countries The countries of the corresponding investors\n', '    *  emits _userAddresses.length `IdentityRegistered` events\n', '    */\n', '    function batchRegisterIdentity(address[] calldata _userAddresses, IIdentity[] calldata _identities, uint16[] calldata _countries) external;\n', '\n', '   /**\n', '    *  @dev This functions checks whether a wallet has its Identity registered or not\n', '    *  in the Identity Registry.\n', '    *  @param _userAddress The address of the user to be checked.\n', "    *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n", '    */\n', '    function contains(address _userAddress) external view returns (bool);\n', '\n', '   /**\n', '    *  @dev This functions checks whether an identity contract\n', '    *  corresponding to the provided user address has the required claims or not based\n', '    *  on the data fetched from trusted issuers registry and from the claim topics registry\n', '    *  @param _userAddress The address of the user to be verified.\n', "    *  @return 'True' if the address is verified, 'false' if not.\n", '    */\n', '    function isVerified(address _userAddress) external view returns (bool);\n', '\n', '   /**\n', '    *  @dev Returns the onchainID of an investor.\n', '    *  @param _userAddress The wallet of the investor\n', '    */\n', '    function identity(address _userAddress) external view returns (IIdentity);\n', '\n', '   /**\n', '    *  @dev Returns the country code of an investor.\n', '    *  @param _userAddress The wallet of the investor\n', '    */\n', '    function investorCountry(address _userAddress) external view returns (uint16);\n', '\n', '   /**\n', '    *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n', '    */\n', '    function identityStorage() external view returns (IIdentityRegistryStorage);\n', '\n', '   /**\n', '    *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\n', '    */\n', '    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\n', '\n', '   /**\n', '    *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n', '    */\n', '    function topicsRegistry() external view returns (IClaimTopicsRegistry);\n', '\n', '   /**\n', '    *  @notice Transfers the Ownership of the Identity Registry to a new Owner.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', '    *  @param _newOwner The new owner of this contract.\n', '    */\n', '    function transferOwnershipOnIdentityRegistryContract(address _newOwner) external;\n', '\n', '   /**\n', '    *  @notice Adds an address as _agent of the Identity Registry Contract.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', "    *  @param _agent The _agent's address to add.\n", '    */\n', '    function addAgentOnIdentityRegistryContract(address _agent) external;\n', '\n', '   /**\n', '    *  @notice Removes an address from being _agent of the Identity Registry Contract.\n', '    *  This function can only be called by the wallet set as owner of the smart contract\n', "    *  @param _agent The _agent's address to remove.\n", '    */\n', '    function removeAgentOnIdentityRegistryContract(address _agent) external;\n', '}\n', '\n', '// File: @tokenysolutions/t-rex/contracts/token/IToken.sol\n', '\n', '/**\n', ' *     NOTICE\n', ' *\n', ' *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n', ' *     If you choose to receive it under the GPL v.3 license, the following applies:\n', ' *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n', ' *\n', ' *     Copyright (C) 2019, Tokeny s√†rl.\n', ' *\n', ' *     This program is free software: you can redistribute it and/or modify\n', ' *     it under the terms of the GNU General Public License as published by\n', ' *     the Free Software Foundation, either version 3 of the License, or\n', ' *     (at your option) any later version.\n', ' *\n', ' *     This program is distributed in the hope that it will be useful,\n', ' *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' *     GNU General Public License for more details.\n', ' *\n', ' *     You should have received a copy of the GNU General Public License\n', ' *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', '///interface\n', 'interface IToken is IERC20 {\n', '\n', '   /**\n', '    *  this event is emitted when the token information is updated.\n', '    *  the event is emitted by the token constructor and by the setTokenInformation function\n', '    *  `_newName` is the name of the token\n', '    *  `_newSymbol` is the symbol of the token\n', '    *  `_newDecimals` is the decimals of the token\n', '    *  `_newVersion` is the version of the token, current version is 3.0\n', '    *  `_newOnchainID` is the address of the onchainID of the token\n', '    */\n', '    event UpdatedTokenInformation(string _newName, string _newSymbol, uint8 _newDecimals, string _newVersion, address _newOnchainID);\n', '\n', '   /**\n', '    *  this event is emitted when the IdentityRegistry has been set for the token\n', '    *  the event is emitted by the token constructor and by the setIdentityRegistry function\n', '    *  `_identityRegistry` is the address of the Identity Registry of the token\n', '    */\n', '    event IdentityRegistryAdded(address indexed _identityRegistry);\n', '\n', '   /**\n', '    *  this event is emitted when the Compliance has been set for the token\n', '    *  the event is emitted by the token constructor and by the setCompliance function\n', '    *  `_compliance` is the address of the Compliance contract of the token\n', '    */\n', '    event ComplianceAdded(address indexed _compliance);\n', '\n', '   /**\n', '    *  this event is emitted when an investor successfully recovers his tokens\n', '    *  the event is emitted by the recoveryAddress function\n', '    *  `_lostWallet` is the address of the wallet that the investor lost access to\n', '    *  `_newWallet` is the address of the wallet that the investor provided for the recovery\n', '    *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\n', '    */\n', '    event RecoverySuccess(address _lostWallet, address _newWallet, address _investorOnchainID);\n', '\n', '   /**\n', '    *  this event is emitted when the wallet of an investor is frozen or unfrozen\n', '    *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n', '    *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n', '    *  `_isFrozen` is the freezing status of the wallet\n', '    *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n', '    *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n', '    *  `_owner` is the address of the agent who called the function to freeze the wallet\n', '    */\n', '    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\n', '\n', '   /**\n', '    *  this event is emitted when a certain amount of tokens is frozen on a wallet\n', '    *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n', '    *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n', '    *  `_amount` is the amount of tokens that are frozen\n', '    */\n', '    event TokensFrozen(address indexed _userAddress, uint256 _amount);\n', '\n', '   /**\n', '    *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n', '    *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n', '    *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n', '    *  `_amount` is the amount of tokens that are unfrozen\n', '    */\n', '    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\n', '\n', '   /**\n', '    *  this event is emitted when the token is paused\n', '    *  the event is emitted by the pause function\n', '    *  `_userAddress` is the address of the wallet that called the pause function\n', '    */\n', '    event Paused(address _userAddress);\n', '\n', '   /**\n', '    *  this event is emitted when the token is unpaused\n', '    *  the event is emitted by the unpause function\n', '    *  `_userAddress` is the address of the wallet that called the unpause function\n', '    */\n', '    event Unpaused(address _userAddress);\n', '\n', '   /**\n', '    * @dev Returns the number of decimals used to get its user representation.\n', '    * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '    * be displayed to a user as `5,05` (`505 / 1 ** 2`).\n', '    *\n', '    * Tokens usually opt for a value of 18, imitating the relationship between\n', '    * Ether and Wei.\n', '    *\n', '    * NOTE: This information is only used for _display_ purposes: it in\n', '    * no way affects any of the arithmetic of the contract, including\n', '    * balanceOf() and transfer().\n', '    */\n', '    function decimals() external view returns (uint8);\n', '\n', '   /**\n', '    * @dev Returns the name of the token.\n', '    */\n', '    function name() external view returns (string memory);\n', '\n', '   /**\n', '    * @dev Returns the address of the onchainID of the token.\n', '    * the onchainID of the token gives all the information available\n', '    * about the token and is managed by the token issuer or his agent.\n', '    */\n', '    function onchainID() external view returns (address);\n', '\n', '   /**\n', '    * @dev Returns the symbol of the token, usually a shorter version of the\n', '    * name.\n', '    */\n', '    function symbol() external view returns (string memory);\n', '\n', '   /**\n', '    * @dev Returns the TREX version of the token.\n', '    * current version is 3.0.0\n', '    */\n', '    function version() external view returns (string memory);\n', '\n', '   /**\n', '    *  @dev Returns the Identity Registry linked to the token\n', '    */\n', '    function identityRegistry() external view returns (IIdentityRegistry);\n', '\n', '   /**\n', '    *  @dev Returns the Compliance contract linked to the token\n', '    */\n', '    function compliance() external view returns (ICompliance);\n', '\n', '   /**\n', '    * @dev Returns true if the contract is paused, and false otherwise.\n', '    */\n', '    function paused() external view returns (bool);\n', '\n', '   /**\n', '    *  @dev Returns the freezing status of a wallet\n', '    *  if isFrozen returns `true` the wallet is frozen\n', '    *  if isFrozen returns `false` the wallet is not frozen\n', "    *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n", '    *  a partial freeze or the whole token could be blocked by pause\n', '    *  @param _userAddress the address of the wallet on which isFrozen is called\n', '    */\n', '    function isFrozen(address _userAddress) external view returns (bool);\n', '\n', '   /**\n', '    *  @dev Returns the amount of tokens that are partially frozen on a wallet\n', '    *  the amount of frozen tokens is always <= to the total balance of the wallet\n', '    *  @param _userAddress the address of the wallet on which getFrozenTokens is called\n', '    */\n', '    function getFrozenTokens(address _userAddress) external view returns (uint256);\n', '\n', '   /**\n', '    *  @dev sets the token name\n', '    *  @param _name the name of token to set\n', '    *  Only the owner of the token smart contract can call this function\n', '    *  emits a `UpdatedTokenInformation` event\n', '    */\n', '    function setName(string calldata _name) external;\n', '\n', '   /**\n', '    *  @dev sets the token symbol\n', '    *  @param _symbol the token symbol to set\n', '    *  Only the owner of the token smart contract can call this function\n', '    *  emits a `UpdatedTokenInformation` event\n', '    */\n', '    function setSymbol(string calldata _symbol) external;\n', '\n', '   /**\n', '    *  @dev sets the onchain ID of the token\n', '    *  @param _onchainID the address of the onchain ID to set\n', '    *  Only the owner of the token smart contract can call this function\n', '    *  emits a `UpdatedTokenInformation` event\n', '    */\n', '    function setOnchainID(address _onchainID) external;\n', '\n', '   /**\n', '    *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `Paused` event\n', '    */\n', '    function pause() external;\n', '\n', '   /**\n', '    *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n', '    *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits an `Unpaused` event\n', '    */\n', '    function unpause() external;\n', '\n', '   /**\n', '    *  @dev sets an address frozen status for this token.\n', '    *  @param _userAddress The address for which to update frozen status\n', '    *  @param _freeze Frozen status of the address\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits an `AddressFrozen` event\n', '    */\n', '    function setAddressFrozen(address _userAddress, bool _freeze) external;\n', '\n', '   /**\n', '    *  @dev freezes token amount specified for given address.\n', '    *  @param _userAddress The address for which to update frozen tokens\n', '    *  @param _amount Amount of Tokens to be frozen\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `TokensFrozen` event\n', '    */\n', '    function freezePartialTokens(address _userAddress, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev unfreezes token amount specified for given address\n', '    *  @param _userAddress The address for which to update frozen tokens\n', '    *  @param _amount Amount of Tokens to be unfrozen\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `TokensUnfrozen` event\n', '    */\n', '    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev sets the Identity Registry for the token\n', '    *  @param _identityRegistry the address of the Identity Registry to set\n', '    *  Only the owner of the token smart contract can call this function\n', '    *  emits an `IdentityRegistryAdded` event\n', '    */\n', '    function setIdentityRegistry(address _identityRegistry) external;\n', '\n', '   /**\n', '    *  @dev sets the compliance contract of the token\n', '    *  @param _compliance the address of the compliance contract to set\n', '    *  Only the owner of the token smart contract can call this function\n', '    *  emits a `ComplianceAdded` event\n', '    */\n', '    function setCompliance(address _compliance) external;\n', '\n', '   /**\n', '    *  @dev force a transfer of tokens between 2 whitelisted wallets\n', '    *  In case the `from` address has not enough free tokens (unfrozen tokens)\n', '    *  but has a total balance higher or equal to the `amount`\n', '    *  the amount of frozen tokens is reduced in order to have enough free tokens\n', '    *  to proceed the transfer, in such a case, the remaining balance on the `from`\n', '    *  account is 100% composed of frozen tokens post-transfer.\n', '    *  Require that the `to` address is a verified address,\n', '    *  @param _from The address of the sender\n', '    *  @param _to The address of the receiver\n', '    *  @param _amount The number of tokens to transfer\n', '    *  @return `true` if successful and revert if unsuccessful\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n', '    *  emits a `Transfer` event\n', '    */\n', '    function forcedTransfer(address _from, address _to, uint256 _amount) external returns (bool);\n', '\n', '   /**\n', '    *  @dev mint tokens on a wallet\n', '    *  Improved version of default mint method. Tokens can be minted\n', '    *  to an address if only it is a verified address as per the security token.\n', '    *  @param _to Address to mint the tokens to.\n', '    *  @param _amount Amount of tokens to mint.\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `Transfer` event\n', '    */\n', '    function mint(address _to, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev burn tokens on a wallet\n', '    *  In case the `account` address has not enough free tokens (unfrozen tokens)\n', '    *  but has a total balance higher or equal to the `value` amount\n', '    *  the amount of frozen tokens is reduced in order to have enough free tokens\n', '    *  to proceed the burn, in such a case, the remaining balance on the `account`\n', '    *  is 100% composed of frozen tokens post-transaction.\n', '    *  @param _userAddress Address to burn the tokens from.\n', '    *  @param _amount Amount of tokens to burn.\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n', '    *  emits a `Transfer` event\n', '    */\n', '    function burn(address _userAddress, uint256 _amount) external;\n', '\n', '   /**\n', '    *  @dev recovery function used to force transfer tokens from a\n', '    *  lost wallet to a new wallet for an investor.\n', '    *  @param _lostWallet the wallet that the investor lost\n', '    *  @param _newWallet the newly provided wallet on which tokens have to be transferred\n', '    *  @param _investorOnchainID the onchainID of the investor asking for a recovery\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n', '    *  emits a `Transfer` event if the recovery process is successful\n', '    *  emits a `RecoverySuccess` event if the recovery process is successful\n', '    *  emits a `RecoveryFails` event if the recovery process fails\n', '    */\n', '    function recoveryAddress(address _lostWallet, address _newWallet, address _investorOnchainID) external returns (bool);\n', '\n', '   /**\n', '    *  @dev function allowing to issue transfers in batch\n', '    *  Require that the msg.sender and `to` addresses are not frozen.\n', '    *  Require that the total value should not exceed available balance.\n', '    *  Require that the `to` addresses are all verified addresses,\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _toList The addresses of the receivers\n', '    *  @param _amounts The number of tokens to transfer to the corresponding receiver\n', '    *  emits _toList.length `Transfer` events\n', '    */\n', '    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev function allowing to issue forced transfers in batch\n', '    *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n', '    *  Require that the `_toList` addresses are all verified addresses\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _fromList The addresses of the senders\n', '    *  @param _toList The addresses of the receivers\n', '    *  @param _amounts The number of tokens to transfer to the corresponding receiver\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n', '    *  emits _fromList.length `Transfer` events\n', '    */\n', '    function batchForcedTransfer(address[] calldata _fromList, address[] calldata _toList, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev function allowing to mint tokens in batch\n', '    *  Require that the `_toList` addresses are all verified addresses\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _toList The addresses of the receivers\n', '    *  @param _amounts The number of tokens to mint to the corresponding receiver\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits _toList.length `Transfer` events\n', '    */\n', '    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev function allowing to burn tokens in batch\n', '    *  Require that the `_userAddresses` addresses are all verified addresses\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _userAddresses The addresses of the wallets concerned by the burn\n', '    *  @param _amounts The number of tokens to burn from the corresponding wallets\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits _userAddresses.length `Transfer` events\n', '    */\n', '    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev function allowing to set frozen addresses in batch\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _userAddresses The addresses for which to update frozen status\n', '    *  @param _freeze Frozen status of the corresponding address\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits _userAddresses.length `AddressFrozen` events\n', '    */\n', '    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\n', '\n', '   /**\n', '    *  @dev function allowing to freeze tokens partially in batch\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _userAddresses The addresses on which tokens need to be frozen\n', '    *  @param _amounts the amount of tokens to freeze on the corresponding address\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits _userAddresses.length `TokensFrozen` events\n', '    */\n', '    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev function allowing to unfreeze tokens partially in batch\n', '    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n', '    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION\n', '    *  @param _userAddresses The addresses on which tokens need to be unfrozen\n', '    *  @param _amounts the amount of tokens to unfreeze on the corresponding address\n', '    *  This function can only be called by a wallet set as agent of the token\n', '    *  emits _userAddresses.length `TokensUnfrozen` events\n', '    */\n', '    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n', '\n', '   /**\n', '    *  @dev transfers the ownership of the token smart contract\n', '    *  @param _newOwner the address of the new token smart contract owner\n', '    *  This function can only be called by the owner of the token\n', '    *  emits an `OwnershipTransferred` event\n', '    */\n', '    function transferOwnershipOnTokenContract(address _newOwner) external;\n', '\n', '   /**\n', '    *  @dev adds an agent to the token smart contract\n', '    *  @param _agent the address of the new agent of the token smart contract\n', '    *  This function can only be called by the owner of the token\n', '    *  emits an `AgentAdded` event\n', '    */\n', '    function addAgentOnTokenContract(address _agent) external;\n', '\n', '   /**\n', '    *  @dev remove an agent from the token smart contract\n', '    *  @param _agent the address of the agent to remove\n', '    *  This function can only be called by the owner of the token\n', '    *  emits an `AgentRemoved` event\n', '    */\n', '    function removeAgentOnTokenContract(address _agent) external;\n', '\n', '}\n', '\n', '// File: contracts/compliance/BasicCompliance.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', 'abstract contract BasicCompliance is Ownable, ICompliance {\n', '\n', '    /// Mapping between agents and their statuses\n', '    mapping(address => bool) private _tokenAgentsList;\n', '\n', '    /// Mapping of tokens linked to the compliance contract\n', '    IToken _tokenBound;\n', '\n', '    /**\n', '     * @dev Throws if called by any address that is not a token bound to the compliance.\n', '     */\n', '    modifier onlyToken() {\n', '        require(isToken(), "error : this address is not a token bound to the compliance contract");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n', '    *  @param _userAddress Address of the wallet\n', '    */\n', '    function _getIdentity(address _userAddress) internal view returns (address) {\n', '        return address(_tokenBound.identityRegistry().identity(_userAddress));\n', '    }\n', '\n', '    function _getCountry(address _userAddress) internal view returns (uint16) {\n', '        return _tokenBound.identityRegistry().investorCountry(_userAddress);\n', '    }\n', '\n', '    /**\n', '    *  @dev See {ICompliance-isTokenAgent}.\n', '    */\n', '    function isTokenAgent(address _agentAddress) public override view returns (bool) {\n', '        if (!_tokenAgentsList[_agentAddress]) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *  @dev See {ICompliance-isTokenBound}.\n', '    */\n', '    function isTokenBound(address _token) public override view returns (bool) {\n', '        if (_token != address(_tokenBound)){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *  @dev See {ICompliance-addTokenAgent}.\n', '     */\n', '    function addTokenAgent(address _agentAddress) external override onlyOwner {\n', '        require(!_tokenAgentsList[_agentAddress], "This Agent is already registered");\n', '        _tokenAgentsList[_agentAddress] = true;\n', '        emit TokenAgentAdded(_agentAddress);\n', '    }\n', '\n', '    /**\n', '    *  @dev See {ICompliance-isTokenAgent}.\n', '    */\n', '    function removeTokenAgent(address _agentAddress) external override onlyOwner {\n', '        require(_tokenAgentsList[_agentAddress], "This Agent is not registered yet");\n', '        _tokenAgentsList[_agentAddress] = false;\n', '        emit TokenAgentRemoved(_agentAddress);\n', '    }\n', '\n', '    /**\n', '     *  @dev See {ICompliance-bindToken}.\n', '     */\n', '    function bindToken(address _token) external override onlyOwner {\n', '        require(_token != address(_tokenBound), "This token is already bound");\n', '        _tokenBound = IToken(_token);\n', '        emit TokenBound(_token);\n', '    }\n', '\n', '    /**\n', '    *  @dev See {ICompliance-unbindToken}.\n', '    */\n', '    function unbindToken(address _token) external override onlyOwner {\n', '        require(_token == address(_tokenBound), "This token is not bound yet");\n', '        delete _tokenBound;\n', '        emit TokenUnbound(_token);\n', '    }\n', '\n', '    /**\n', '    *  @dev Returns true if the sender corresponds to a token that is bound with the Compliance contract\n', '    */\n', '    function isToken() internal view returns (bool) {\n', '        return isTokenBound(msg.sender);\n', '    }\n', '\n', '    /**\n', '    *  @dev See {ICompliance-transferOwnershipOnComplianceContract}.\n', '    */\n', '    function transferOwnershipOnComplianceContract(address newOwner) external override onlyOwner {\n', '        transferOwnership(newOwner);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/features/CountryRestrictions.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'abstract contract CountryRestrictions is BasicCompliance {\n', '\n', '    /**\n', '     *  this event is emitted whenever a Country has been restricted.\n', "     *  the event is emitted by 'addCountryRestriction' and 'batchRestrictCountries' functions.\n", '     *  `_country` is the numeric ISO 3166-1 of the restricted country.\n', '     */\n', '    event AddedRestrictedCountry(uint16 _country);\n', '\n', '    /**\n', '     *  this event is emitted whenever a Country has been unrestricted.\n', "     *  the event is emitted by 'removeCountryRestriction' and 'batchUnrestrictCountries' functions.\n", '     *  `_country` is the numeric ISO 3166-1 of the unrestricted country.\n', '     */\n', '    event RemovedRestrictedCountry(uint16 _country);\n', '\n', '    /// Mapping between country and their restriction status\n', '    mapping(uint16 => bool) private _restrictedCountries;\n', '\n', '    /**\n', '    *  @dev Returns true if country is Restricted\n', '    *  @param _country, numeric ISO 3166-1 standard of the country to be checked\n', '    */\n', '    function isCountryRestricted(uint16 _country) public view returns (bool) {\n', '        return (_restrictedCountries[_country]);\n', '    }\n', '\n', '    /**\n', '    *  @dev Adds country restriction.\n', '    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n', '    *  @param _country Country to be restricted, should be expressed by following numeric ISO 3166-1 standard\n', '    *  Only the owner of the Compliance smart contract can call this function\n', '    *  emits an `AddedRestrictedCountry` event\n', '    */\n', '    function addCountryRestriction(uint16 _country) external onlyOwner {\n', '        _restrictedCountries[_country] = true;\n', '        emit AddedRestrictedCountry(_country);\n', '    }\n', '\n', '    /**\n', '     *  @dev Removes country restriction.\n', '     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n', '     *  @param _country Country to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n', '     *  Only the owner of the Compliance smart contract can call this function\n', '     *  emits an `RemovedRestrictedCountry` event\n', '     */\n', '    function removeCountryRestriction(uint16 _country) external onlyOwner {\n', '        _restrictedCountries[_country] = false;\n', '        emit RemovedRestrictedCountry(_country);\n', '    }\n', '\n', '    /**\n', '    *  @dev Adds countries restriction in batch.\n', '    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n', '    *  @param _countries Countries to be restricted, should be expressed by following numeric ISO 3166-1 standard\n', '    *  Only the owner of the Compliance smart contract can call this function\n', '    *  emits an `AddedRestrictedCountry` event\n', '    */\n', '    function batchRestrictCountries(uint16[] calldata _countries) external onlyOwner {\n', '        for (uint i = 0; i < _countries.length; i++) {\n', '            _restrictedCountries[_countries[i]] = true;\n', '            emit AddedRestrictedCountry(_countries[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  @dev Removes countries restriction in batch.\n', '     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n', '     *  @param _countries Countries to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n', '     *  Only the owner of the Compliance smart contract can call this function\n', '     *  emits an `RemovedRestrictedCountry` event\n', '     */\n', '    function batchUnrestrictCountries(uint16[] calldata _countries) external onlyOwner {\n', '        for (uint i = 0; i < _countries.length; i++) {\n', '            _restrictedCountries[_countries[i]] = false;\n', '            emit RemovedRestrictedCountry(_countries[i]);\n', '        }\n', '    }\n', '\n', '    function transferActionOnCountryRestrictions(address _from, address _to, uint256 _value) internal {}\n', '\n', '    function creationActionOnCountryRestrictions(address _to, uint256 _value) internal {}\n', '\n', '    function destructionActionOnCountryRestrictions(address _from, uint256 _value) internal {}\n', '\n', '\n', '    function complianceCheckOnCountryRestrictions (address _from, address _to, uint256 _value)\n', '    internal view returns (bool) {\n', '        uint16 receiverCountry = _getCountry(_to);\n', '        address senderIdentity = _getIdentity(_from);\n', '        if (isCountryRestricted(receiverCountry)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/features/SupplyLimit.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'abstract contract SupplyLimit is BasicCompliance {\n', '\n', '    /**\n', '     *  this event is emitted when the supply limit has been set.\n', '     *  `_limit` is the max amount of tokens in circulation.\n', '     */\n', '    event SupplyLimitSet(uint256 _limit);\n', '\n', '    uint256 public supplyLimit;\n', '\n', '    /**\n', '     *  @dev sets supply limit.\n', '     *  Supply limit has to be smaller or equal to the actual supply.\n', '     *  @param _limit max amount of tokens to be created\n', '     *  Only the owner of the Compliance smart contract can call this function\n', '     *  emits an `SupplyLimitSet` event\n', '     */\n', '    function setSupplyLimit(uint256 _limit) external onlyOwner {\n', '        supplyLimit = _limit;\n', '        emit SupplyLimitSet(_limit);\n', '    }\n', '\n', '\n', '    function transferActionOnSupplyLimit(address _from, address _to, uint256 _value) internal {}\n', '\n', '    function creationActionOnSupplyLimit(address _to, uint256 _value) internal {\n', '        require(_tokenBound.totalSupply() <= supplyLimit, "cannot mint more tokens");\n', '    }\n', '\n', '    function destructionActionOnSupplyLimit(address _from, uint256 _value) internal {}\n', '\n', '\n', '    function complianceCheckOnSupplyLimit (address _from, address _to, uint256 _value)\n', '    internal view returns (bool) {\n', '        uint ActualSupply = _tokenBound.totalSupply();\n', '        if (isTokenAgent(_from) && (ActualSupply + _value) > supplyLimit) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/compliance/custom_contracts/DX1SCompliance.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', 'contract DX1SCompliance is CountryRestrictions, SupplyLimit {\n', '\n', '    /**\n', '    *  @dev See {ICompliance-transferred}.\n', '    */\n', '    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n', '        transferActionOnCountryRestrictions(_from, _to, _value);\n', '        transferActionOnSupplyLimit(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     *  @dev See {ICompliance-created}.\n', '     */\n', '    function created(address _to, uint256 _value) external onlyToken override {\n', '        creationActionOnCountryRestrictions(_to, _value);\n', '        creationActionOnSupplyLimit(_to, _value);\n', '    }\n', '\n', '    /**\n', '     *  @dev See {ICompliance-destroyed}.\n', '     */\n', '    function destroyed(address _from, uint256 _value) external onlyToken override {\n', '        destructionActionOnCountryRestrictions(_from, _value);\n', '        destructionActionOnSupplyLimit(_from, _value);\n', '    }\n', '\n', '    /**\n', '     *  @dev See {ICompliance-canTransfer}.\n', '     */\n', '    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n', '        if (\n', '        !complianceCheckOnSupplyLimit(_from, _to, _value)\n', '        ||\n', '        !complianceCheckOnCountryRestrictions(_from, _to, _value)\n', '        ){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}']