['/**\n', ' * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "unauthorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return divCeil(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = ((a - 1) / b) + 1;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', 'contract IERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract IWethERC20 is IWeth, IERC20 {}\n', '\n', 'contract Constants {\n', '\n', '    uint256 internal constant WEI_PRECISION = 10**18;\n', '    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\n', '\n', '    uint256 internal constant DAYS_IN_A_YEAR = 365;\n', '    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\n', '\n', '    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\n', '    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\n', '}\n', '\n', 'interface IPriceFeedsExt {\n', '  function latestAnswer() external view returns (int256);\n', '}\n', '\n', 'contract PriceFeeds is Constants, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // address(1) is used as a stand-in for the non-existent token representing the fast-gas price on Chainlink\n', '    address internal constant FASTGAS_PRICEFEED_ADDRESS = address(1);\n', '\n', '    event GlobalPricingPaused(\n', '        address indexed sender,\n', '        bool isPaused\n', '    );\n', '\n', '    mapping (address => IPriceFeedsExt) public pricesFeeds;     // token => pricefeed\n', '    mapping (address => uint256) public decimals;               // decimals of supported tokens\n', '\n', '    bool public globalPricingPaused = false;\n', '\n', '    constructor()\n', '        public\n', '    {\n', '        // set decimals for ether\n', '        decimals[address(wethToken)] = 18;\n', '    }\n', '\n', '    function queryRate(\n', '        address sourceToken,\n', '        address destToken)\n', '        public\n', '        view\n', '        returns (uint256 rate, uint256 precision)\n', '    {\n', '        require(!globalPricingPaused, "pricing is paused");\n', '        return _queryRate(\n', '            sourceToken,\n', '            destToken\n', '        );\n', '    }\n', '\n', '    function queryPrecision(\n', '        address sourceToken,\n', '        address destToken)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return sourceToken != destToken ?\n', '            _getDecimalPrecision(sourceToken, destToken) :\n', '            WEI_PRECISION;\n', '    }\n', '\n', '    //// NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly. ///\n', '    function queryReturn(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount)\n', '        public\n', '        view\n', '        returns (uint256 destAmount)\n', '    {\n', '        if (globalPricingPaused) {\n', '            return 0;\n', '        }\n', '        (uint256 rate, uint256 precision) = _queryRate(\n', '            sourceToken,\n', '            destToken\n', '        );\n', '\n', '        destAmount = sourceAmount\n', '            .mul(rate)\n', '            .div(precision);\n', '    }\n', '\n', '    function checkPriceDisagreement(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount,\n', '        uint256 destAmount,\n', '        uint256 maxSlippage)\n', '        public\n', '        view\n', '        returns (uint256 sourceToDestSwapRate)\n', '    {\n', '        require(!globalPricingPaused, "pricing is paused");\n', '        (uint256 rate, uint256 precision) = _queryRate(\n', '            sourceToken,\n', '            destToken\n', '        );\n', '\n', '        sourceToDestSwapRate = destAmount\n', '            .mul(precision)\n', '            .div(sourceAmount);\n', '\n', '        uint256 spreadValue = sourceToDestSwapRate > rate ?\n', '            sourceToDestSwapRate - rate :\n', '            rate - sourceToDestSwapRate;\n', '\n', '        if (spreadValue != 0) {\n', '            spreadValue = spreadValue\n', '                .mul(WEI_PERCENT_PRECISION)\n', '                .div(sourceToDestSwapRate);\n', '\n', '            require(\n', '                spreadValue <= maxSlippage,\n', '                "price disagreement"\n', '            );\n', '        }\n', '    }\n', '\n', '    function amountInEth(\n', '        address tokenAddress,\n', '        uint256 amount)\n', '        public\n', '        view\n', '        returns (uint256 ethAmount)\n', '    {\n', '        if (tokenAddress == address(wethToken)) {\n', '            ethAmount = amount;\n', '        } else {\n', '            (uint toEthRate, uint256 toEthPrecision) = queryRate(\n', '                tokenAddress,\n', '                address(wethToken)\n', '            );\n', '            ethAmount = amount\n', '                .mul(toEthRate)\n', '                .div(toEthPrecision);\n', '        }\n', '    }\n', '\n', '    function getMaxDrawdown(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 margin)\n', '        public\n', '        view\n', '        returns (uint256 maxDrawdown)\n', '    {\n', '        uint256 loanToCollateralAmount;\n', '        if (collateralToken == loanToken) {\n', '            loanToCollateralAmount = loanAmount;\n', '        } else {\n', '            (uint256 rate, uint256 precision) = queryRate(\n', '                loanToken,\n', '                collateralToken\n', '            );\n', '            loanToCollateralAmount = loanAmount\n', '                .mul(rate)\n', '                .div(precision);\n', '        }\n', '\n', '        uint256 combined = loanToCollateralAmount\n', '            .add(\n', '                loanToCollateralAmount\n', '                    .mul(margin)\n', '                    .div(WEI_PERCENT_PRECISION)\n', '                );\n', '\n', '        maxDrawdown = collateralAmount > combined ?\n', '            collateralAmount - combined :\n', '            0;\n', '    }\n', '\n', '    function getCurrentMarginAndCollateralSize(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        public\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralInEthAmount)\n', '    {\n', '        (currentMargin,) = getCurrentMargin(\n', '            loanToken,\n', '            collateralToken,\n', '            loanAmount,\n', '            collateralAmount\n', '        );\n', '\n', '        collateralInEthAmount = amountInEth(\n', '            collateralToken,\n', '            collateralAmount\n', '        );\n', '    }\n', '\n', '    function getCurrentMargin(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        public\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralToLoanRate)\n', '    {\n', '        uint256 collateralToLoanAmount;\n', '        if (collateralToken == loanToken) {\n', '            collateralToLoanAmount = collateralAmount;\n', '            collateralToLoanRate = WEI_PRECISION;\n', '        } else {\n', '            uint256 collateralToLoanPrecision;\n', '            (collateralToLoanRate, collateralToLoanPrecision) = queryRate(\n', '                collateralToken,\n', '                loanToken\n', '            );\n', '\n', '            collateralToLoanRate = collateralToLoanRate\n', '                .mul(WEI_PRECISION)\n', '                .div(collateralToLoanPrecision);\n', '\n', '            collateralToLoanAmount = collateralAmount\n', '                .mul(collateralToLoanRate)\n', '                .div(WEI_PRECISION);\n', '        }\n', '\n', '        if (loanAmount != 0 && collateralToLoanAmount >= loanAmount) {\n', '            currentMargin = collateralToLoanAmount\n', '                .sub(loanAmount)\n', '                .mul(WEI_PERCENT_PRECISION)\n', '                .div(loanAmount);\n', '        }\n', '    }\n', '\n', '    function shouldLiquidate(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 maintenanceMargin)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        (uint256 currentMargin,) = getCurrentMargin(\n', '            loanToken,\n', '            collateralToken,\n', '            loanAmount,\n', '            collateralAmount\n', '        );\n', '\n', '        return currentMargin <= maintenanceMargin;\n', '    }\n', '\n', '    function getFastGasPrice(\n', '        address payToken)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 gasPrice = _getFastGasPrice();\n', '        if (payToken != address(wethToken) && payToken != address(0)) {\n', '            require(!globalPricingPaused, "pricing is paused");\n', '            (uint256 rate, uint256 precision) = _queryRate(\n', '                address(wethToken),\n', '                payToken\n', '            );\n', '            gasPrice = gasPrice\n', '                .mul(rate)\n', '                .div(precision);\n', '        }\n', '        return gasPrice;\n', '    }\n', '\n', '\n', '    /*\n', '    * Owner functions\n', '    */\n', '\n', '    function setPriceFeed(\n', '        address[] calldata tokens,\n', '        IPriceFeedsExt[] calldata feeds)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(tokens.length == feeds.length, "count mismatch");\n', '\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            pricesFeeds[tokens[i]] = feeds[i];\n', '        }\n', '    }\n', '\n', '    function setDecimals(\n', '        IERC20[] calldata tokens)\n', '        external\n', '        onlyOwner\n', '    {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            decimals[address(tokens[i])] = tokens[i].decimals();\n', '        }\n', '    }\n', '\n', '    function setGlobalPricingPaused(\n', '        bool isPaused)\n', '        external\n', '        onlyOwner\n', '    {\n', '        globalPricingPaused = isPaused;\n', '\n', '        emit GlobalPricingPaused(\n', '            msg.sender,\n', '            isPaused\n', '        );\n', '    }\n', '\n', '    /*\n', '    * Internal functions\n', '    */\n', '\n', '    function _queryRate(\n', '        address sourceToken,\n', '        address destToken)\n', '        internal\n', '        view\n', '        returns (uint256 rate, uint256 precision)\n', '    {\n', '        if (sourceToken != destToken) {\n', '            uint256 sourceRate = _queryRateCall(sourceToken);\n', '            uint256 destRate = _queryRateCall(destToken);\n', '\n', '            rate = sourceRate\n', '                .mul(WEI_PRECISION)\n', '                .div(destRate);\n', '\n', '            precision = _getDecimalPrecision(sourceToken, destToken);\n', '        } else {\n', '            rate = WEI_PRECISION;\n', '            precision = WEI_PRECISION;\n', '        }\n', '    }\n', '\n', '    function _queryRateCall(\n', '        address token)\n', '        internal\n', '        view\n', '        returns (uint256 rate)\n', '    {\n', '        if (token != address(wethToken)) {\n', '            IPriceFeedsExt _Feed = pricesFeeds[token];\n', '            require(address(_Feed) != address(0), "unsupported price feed");\n', '            rate = uint256(_Feed.latestAnswer());\n', '            require(rate != 0 && (rate >> 128) == 0, "price error");\n', '        } else {\n', '            rate = WEI_PRECISION;\n', '        }\n', '    }\n', '\n', '    function _getDecimalPrecision(\n', '        address sourceToken,\n', '        address destToken)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        if (sourceToken == destToken) {\n', '            return WEI_PRECISION;\n', '        } else {\n', '            uint256 sourceTokenDecimals = decimals[sourceToken];\n', '            if (sourceTokenDecimals == 0)\n', '                sourceTokenDecimals = IERC20(sourceToken).decimals();\n', '\n', '            uint256 destTokenDecimals = decimals[destToken];\n', '            if (destTokenDecimals == 0)\n', '                destTokenDecimals = IERC20(destToken).decimals();\n', '\n', '            if (destTokenDecimals >= sourceTokenDecimals)\n', '                return 10**(SafeMath.sub(18, destTokenDecimals-sourceTokenDecimals));\n', '            else\n', '                return 10**(SafeMath.add(18, sourceTokenDecimals-destTokenDecimals));\n', '        }\n', '    }\n', '\n', '    function _getFastGasPrice()\n', '        internal\n', '        view\n', '        returns (uint256 gasPrice)\n', '    {\n', '        gasPrice = uint256(pricesFeeds[FASTGAS_PRICEFEED_ADDRESS].latestAnswer());\n', '        require(gasPrice != 0 && (gasPrice >> 128) == 0, "gas price error");\n', '    }\n', '}']