['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath96.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath96 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint96 a, uint256 b) internal pure returns (uint96) {\n', '        require(uint256(uint96(b)) == b, "SafeMath: addition overflow");\n', '        uint96 c = a + uint96(b);\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint96 a, uint256 b) internal pure returns (uint96) {\n', '        require(uint256(uint96(b)) == b, "SafeMath: subtraction overflow");\n', '        return sub(a, uint96(b), "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n', '        require(b <= a, errorMessage);\n', '        uint96 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/spec_interfaces/ICommittee.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Committee contract interface\n', 'interface ICommittee {\n', '\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\n', '\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\n', '\n', '\t// No external functions\n', '\n', '\t/*\n', '     * External functions\n', '     */\n', '\n', '\t/// Notifies a weight change of a member\n', '\t/// @dev Called only by: Elections contract\n', '\t/// @param addr is the committee member address\n', '\t/// @param weight is the updated weight of the committee member\n', '\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\n', '\n', '\t/// Notifies a change in the certification of a member\n', '\t/// @dev Called only by: Elections contract\n', '\t/// @param addr is the committee member address\n', '\t/// @param isCertified is the updated certification state of the member\n', '\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\n', '\n', '\t/// Notifies a member removal for example due to voteOut / voteUnready\n', '\t/// @dev Called only by: Elections contract\n', '\t/// @param memberRemoved is the removed committee member address\n', '\t/// @return memberRemoved indicates whether the member was removed from the committee\n', '\t/// @return removedMemberWeight indicates the removed member weight\n', '\t/// @return removedMemberCertified indicates whether the member was in the certified committee\n', '\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified)/* onlyElectionContract */;\n', '\n', '\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\n', '\t/// The new member will be added only if it is qualified to join the committee \n', '\t/// @dev Called only by: Elections contract\n', '\t/// @param addr is the added committee member address\n', '\t/// @return memberAdded bool indicates whether the member was addded\n', '\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\n', '\n', '\t/// Checks if addMember() would add a the member to the committee (qualified to join)\n', '\t/// @param addr is the candidate committee member address\n', '\t/// @param weight is the candidate committee member weight\n', '\t/// @return wouldAddMember bool indicates whether the member will be addded\n', '\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\n', '\n', '\t/// Returns the committee members and their weights\n', '\t/// @return addrs is the committee members list\n', '\t/// @return weights is an array of uint, indicating committee members list weight\n', '\t/// @return certification is an array of bool, indicating the committee members certification status\n', '\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\n', '\n', '\t/// Returns the currently appointed committee data\n', '\t/// @return generalCommitteeSize is the number of members in the committee\n', '\t/// @return certifiedCommitteeSize is the number of certified members in the committee\n', '\t/// @return totalWeight is the total effective stake / weight of the committee\n', '\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight);\n', '\n', '\t/// Returns a committee member data\n', '\t/// @param addr is the committee member address\n', '\t/// @return inCommittee indicates whether the queried address is a member in the committee\n', '\t/// @return weight is the committee member weight\n', '\t/// @return isCertified indicates whether the committee member is certified\n', '\t/// @return totalCommitteeWeight is the total weight of the committee.\n', '\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\n', '\n', '\t/// Emits a CommitteeSnapshot events with current committee info\n', '\t/// @dev a CommitteeSnapshot is useful on contracts migration or to remove the need to track past events.\n', '\tfunction emitCommitteeSnapshot() external;\n', '\n', '\t/*\n', '\t * Governance functions\n', '\t */\n', '\n', '\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\n', '\n', '\t/// Sets the maximum number of committee members\n', '\t/// @dev governance function called only by the functional manager\n', '\t/// @dev when reducing the number of members, the bottom ones are removed from the committee\n', '\t/// @param maxCommitteeSize is the maximum number of committee members \n', '\tfunction setMaxCommitteeSize(uint8 maxCommitteeSize) external /* onlyFunctionalManager onlyWhenActive */;\n', '\n', '\t/// Returns the maximum number of committee members\n', '\t/// @return maxCommitteeSize is the maximum number of committee members \n', '\tfunction getMaxCommitteeSize() external view returns (uint8);\n', '\t\n', '\t/// Imports the committee members from a previous committee contract during migration\n', '\t/// @dev initialization function called only by the initializationManager\n', '\t/// @dev does not update the reward contract to avoid incorrect notifications \n', '\t/// @param previousCommitteeContract is the address of the previous committee contract\n', '\tfunction importMembers(ICommittee previousCommitteeContract) external /* onlyInitializationAdmin */;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IProtocolWallet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @title Protocol Wallet interface\n', 'interface IProtocolWallet {\n', '    event FundsAddedToPool(uint256 added, uint256 total);\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the address of the underlying staked token\n', '    /// @return balance is the wallet balance\n', '    function getBalance() external view returns (uint256 balance);\n', '\n', '    /// Transfers the given amount of orbs tokens form the sender to this contract an updates the pool\n', '    /// @dev assumes the caller approved the amount prior to calling\n', '    /// @param amount is the amount to add to the wallet\n', '    function topUp(uint256 amount) external;\n', '\n', "    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\n", '    /// @dev may only be called by the wallet client\n', '    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\n', "    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\n", '    /// @param amount is the amount to withdraw\n', '    function withdraw(uint256 amount) external; /* onlyClient */\n', '\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event ClientSet(address client);\n', '    event MaxAnnualRateSet(uint256 maxAnnualRate);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '    event OutstandingTokensReset(uint256 startTime);\n', '\n', '    /// Sets a new annual withdraw rate for the pool\n', '\t/// @dev governance function called only by the migration owner\n', '    /// @dev the rate for a duration is duration x annualRate / 1 year \n', '    /// @param annualRate is the maximum annual rate that can be withdrawn\n', '    function setMaxAnnualRate(uint256 annualRate) external; /* onlyMigrationOwner */\n', '\n', '    /// Returns the annual withdraw rate of the pool\n', '    /// @return annualRate is the maximum annual rate that can be withdrawn\n', '    function getMaxAnnualRate() external view returns (uint256);\n', '\n', '    /// Emergency withdraw the wallet funds\n', '\t/// @dev governance function called only by the migration owner\n', '    /// @dev used in emergencies, when a migration to a new wallet is needed\n', '    /// @param token is the erc20 address of the token to withdraw\n', '    function emergencyWithdraw(address token) external; /* onlyMigrationOwner */\n', '\n', '    /// Sets the address of the client that can withdraw funds\n', '\t/// @dev governance function called only by the functional owner\n', '    /// @param client is the address of the new client\n', '    function setClient(address client) external; /* onlyFunctionalOwner */\n', '\n', '    /// Resets the outstanding tokens to new start time\n', '\t/// @dev governance function called only by the migration owner\n', '    /// @dev the next duration will be calculated starting from the given time\n', '    /// @param startTime is the time to set as the last withdrawal time\n', '    function resetOutstandingTokens(uint256 startTime) external; /* onlyMigrationOwner */\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IMigratableFeesWallet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title An interface for Fee wallets that support bucket migration.\n', 'interface IMigratableFeesWallet {\n', '\n', '    /// Accepts a bucket fees from a old fees wallet as part of a migration\n', '    /// @dev Called by the old FeesWallet contract.\n', '    /// @dev Part of the IMigratableFeesWallet interface.\n', '    /// @dev assumes the caller approved the transfer of the amount prior to calling\n', "    /// @param bucketStartTime is the start time of the bucket to migration, must be a bucket's valid start time\n", '    /// @param amount is the amount to migrate (transfer) to the bucket\n', '    function acceptBucketMigration(uint256 bucketStartTime, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IFeesWallet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @title Fees Wallet contract interface, manages the fee buckets\n', 'interface IFeesWallet {\n', '\n', '    event FeesWithdrawnFromBucket(uint256 bucketId, uint256 withdrawn, uint256 total);\n', '    event FeesAddedToBucket(uint256 bucketId, uint256 added, uint256 total);\n', '\n', '    /*\n', '     *   External methods\n', '     */\n', '\n', '    /// Top-ups the fee pool with the given amount at the given rate\n', '    /// @dev Called by: subscriptions contract. (not enforced)\n', '    /// @dev fills the rewards in 30 days buckets based on the monthlyRate\n', '    /// @param amount is the amount to fill\n', '    /// @param monthlyRate is the monthly rate\n', '    /// @param fromTimestamp is the to start fill the buckets, determines the first bucket to fill and the amount filled in the first bucket.\n', '    function fillFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external;\n', '\n', '    /// Collect fees from the buckets since the last call and transfers the amount back.\n', '    /// @dev Called by: only FeesAndBootstrapRewards contract\n', '    /// @dev The amount to collect may be queried before collect by calling getOutstandingFees\n', '    /// @return collectedFees the amount of fees collected and transferred\n', '    function collectFees() external returns (uint256 collectedFees) /* onlyRewardsContract */;\n', '\n', '    /// Returns the amount of fees that are currently available for withdrawal\n', '    /// @param currentTime is the time to check the pending fees for\n', '    /// @return outstandingFees is the amount of pending fees to collect at time currentTime\n', '    function getOutstandingFees(uint256 currentTime) external view returns (uint256 outstandingFees);\n', '\n', '    /*\n', '     * General governance\n', '     */\n', '\n', '    event EmergencyWithdrawal(address addr, address token);\n', '\n', '    /// Migrates the fees of bucket starting at startTimestamp.\n', '\t/// @dev governance function called only by the migration manager\n', '    /// @dev Calls acceptBucketMigration in the destination contract.\n', '    /// @param destination is the address of the new FeesWallet contract\n', "    /// @param bucketStartTime is the start time of the bucket to migration, must be a bucket's valid start time\n", '    function migrateBucket(IMigratableFeesWallet destination, uint256 bucketStartTime) external /* onlyMigrationManager */;\n', '\n', '    /// Accepts a bucket fees from a old fees wallet as part of a migration\n', '    /// @dev Called by the old FeesWallet contract.\n', '    /// @dev Part of the IMigratableFeesWallet interface.\n', '    /// @dev assumes the caller approved the amount prior to calling\n', "    /// @param bucketStartTime is the start time of the bucket to migration, must be a bucket's valid start time\n", '    /// @param amount is the amount to migrate (transfer) to the bucket\n', '    function acceptBucketMigration(uint256 bucketStartTime, uint256 amount) external;\n', '\n', '    /// Emergency withdraw the contract funds\n', '\t/// @dev governance function called only by the migration manager\n', '    /// @dev used in emergencies only, where migrateBucket is not a suitable solution\n', '    /// @param token is the erc20 address of the token to withdraw\n', '    function emergencyWithdraw(address token) external /* onlyMigrationManager */;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IFeesAndBootstrapRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Rewards contract interface\n', 'interface IFeesAndBootstrapRewards {\n', '    event FeesAllocated(uint256 allocatedGeneralFees, uint256 generalFeesPerMember, uint256 allocatedCertifiedFees, uint256 certifiedFeesPerMember);\n', '    event FeesAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, bool certification, uint256 feesPerMember);\n', '    event FeesWithdrawn(address indexed guardian, uint256 amount, uint256 totalWithdrawn);\n', '    event BootstrapRewardsAllocated(uint256 allocatedGeneralBootstrapRewards, uint256 generalBootstrapRewardsPerMember, uint256 allocatedCertifiedBootstrapRewards, uint256 certifiedBootstrapRewardsPerMember);\n', '    event BootstrapRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, bool certification, uint256 bootstrapPerMember);\n', '    event BootstrapRewardsWithdrawn(address indexed guardian, uint256 amount, uint256 totalWithdrawn);\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Triggers update of the guardian rewards\n', '\t/// @dev Called by: the Committee contract\n', '    /// @dev called upon expected change in the committee membership of the guardian\n', "    /// @param guardian is the guardian who's committee membership is updated\n", '    /// @param inCommittee indicates whether the guardian is in the committee prior to the change\n', '    /// @param isCertified indicates whether the guardian is certified prior to the change\n', '    /// @param nextCertification indicates whether after the change, the guardian is certified\n', '    /// @param generalCommitteeSize indicates the general committee size prior to the change\n', '    /// @param certifiedCommitteeSize indicates the certified committee size prior to the change\n', '    function committeeMembershipWillChange(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) external /* onlyCommitteeContract */;\n', '\n', '    /// Returns the fees and bootstrap balances of a guardian\n', '    /// @dev calculates the up to date balances (differ from the state)\n', "    /// @return feeBalance the guardian's fees balance\n", "    /// @return bootstrapBalance the guardian's bootstrap balance\n", '    function getFeesAndBootstrapBalance(address guardian) external view returns (\n', '        uint256 feeBalance,\n', '        uint256 bootstrapBalance\n', '    );\n', '\n', '    /// Returns an estimation of the fees and bootstrap a guardian will be entitled to for a duration of time\n', '    /// The estimation is based on the current system state and there for only provides an estimation\n', '    /// @param guardian is the guardian address\n', '    /// @param duration is the amount of time in seconds for which the estimation is calculated\n', '    /// @return estimatedFees is the estimated received fees for the duration\n', '    /// @return estimatedBootstrapRewards is the estimated received bootstrap for the duration\n', '    function estimateFutureFeesAndBootstrapRewards(address guardian, uint256 duration) external view returns (\n', '        uint256 estimatedFees,\n', '        uint256 estimatedBootstrapRewards\n', '    );\n', '\n', '    /// Transfers the guardian Fees balance to their account\n', '    /// @dev One may withdraw for another guardian\n', '    /// @param guardian is the guardian address\n', '    function withdrawFees(address guardian) external;\n', '\n', '    /// Transfers the guardian bootstrap balance to their account\n', '    /// @dev One may withdraw for another guardian\n', '    /// @param guardian is the guardian address\n', '    function withdrawBootstrapFunds(address guardian) external;\n', '\n', '    /// Returns the current global Fees and Bootstrap rewards state \n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @return certifiedFeesPerMember represents the fees a certified committee member from day 0 would have receive\n', '    /// @return generalFeesPerMember represents the fees a non-certified committee member from day 0 would have receive\n', '    /// @return certifiedBootstrapPerMember represents the bootstrap fund a certified committee member from day 0 would have receive\n', '    /// @return generalBootstrapPerMember represents the bootstrap fund a non-certified committee member from day 0 would have receive\n', '    /// @return lastAssigned is the time the calculation was done to (typically the latest block time)\n', '    function getFeesAndBootstrapState() external view returns (\n', '        uint256 certifiedFeesPerMember,\n', '        uint256 generalFeesPerMember,\n', '        uint256 certifiedBootstrapPerMember,\n', '        uint256 generalBootstrapPerMember,\n', '        uint256 lastAssigned\n', '    );\n', '\n', '    /// Returns the current guardian Fees and Bootstrap rewards state \n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @return feeBalance is the guardian fees balance \n', '    /// @return lastFeesPerMember is the FeesPerMember on the last update based on the guardian certification state\n', '    /// @return bootstrapBalance is the guardian bootstrap balance \n', '    /// @return lastBootstrapPerMember is the FeesPerMember on the last BootstrapPerMember based on the guardian certification state\n', '    function getFeesAndBootstrapData(address guardian) external view returns (\n', '        uint256 feeBalance,\n', '        uint256 lastFeesPerMember,\n', '        uint256 bootstrapBalance,\n', '        uint256 lastBootstrapPerMember,\n', '        uint256 withdrawnFees,\n', '        uint256 withdrawnBootstrap,\n', '        bool certified\n', '    );\n', '\n', '    /*\n', '     * Governance\n', '     */\n', '\n', '    event GeneralCommitteeAnnualBootstrapChanged(uint256 generalCommitteeAnnualBootstrap);\n', '    event CertifiedCommitteeAnnualBootstrapChanged(uint256 certifiedCommitteeAnnualBootstrap);\n', '    event RewardDistributionActivated(uint256 startTime);\n', '    event RewardDistributionDeactivated();\n', '    event FeesAndBootstrapRewardsBalanceMigrated(address indexed guardian, uint256 fees, uint256 bootstrapRewards, address toRewardsContract);\n', '    event FeesAndBootstrapRewardsBalanceMigrationAccepted(address from, address indexed guardian, uint256 fees, uint256 bootstrapRewards);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '\n', '    /// Deactivates fees and bootstrap allocation\n', '\t/// @dev governance function called only by the migration manager\n', '    /// @dev guardians updates remain active based on the current perMember value\n', '    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n', '\n', '    /// Activates fees and bootstrap allocation\n', '\t/// @dev governance function called only by the initialization manager\n', '    /// @dev On migrations, startTime should be set as the previous contract deactivation time.\n', '    /// @param startTime sets the last assignment time\n', '    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n', '\n', "    /// Returns the contract's settings\n", '    /// @return generalCommitteeAnnualBootstrap is the general committee annual bootstrap\n', '    /// @return certifiedCommitteeAnnualBootstrap is the certified committee additional annual bootstrap\n', '    /// @return rewardAllocationActive indicates the rewards allocation activation state \n', '    function getSettings() external view returns (\n', '        uint generalCommitteeAnnualBootstrap,\n', '        uint certifiedCommitteeAnnualBootstrap,\n', '        bool rewardAllocationActive\n', '    );\n', '\n', '    /// Returns the general committee annual bootstrap award\n', '    /// @return generalCommitteeAnnualBootstrap is the general committee annual bootstrap\n', '    function getGeneralCommitteeAnnualBootstrap() external view returns (uint256);\n', '\n', '\t/// Sets the annual rate for the general committee bootstrap\n', '\t/// @dev governance function called only by the functional manager\n', '    /// @dev updates the global bootstrap and fees state before updating  \n', '\t/// @param annualAmount is the annual general committee bootstrap award\n', '    function setGeneralCommitteeAnnualBootstrap(uint256 annualAmount) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the certified committee annual bootstrap reward\n', '    /// @return certifiedCommitteeAnnualBootstrap is the certified committee additional annual bootstrap\n', '    function getCertifiedCommitteeAnnualBootstrap() external view returns (uint256);\n', '\n', '\t/// Sets the annual rate for the certified committee bootstrap\n', '\t/// @dev governance function called only by the functional manager\n', '    /// @dev updates the global bootstrap and fees state before updating  \n', '\t/// @param annualAmount is the annual certified committee bootstrap award\n', '    function setCertifiedCommitteeAnnualBootstrap(uint256 annualAmount) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the rewards allocation activation status\n', '    /// @return rewardAllocationActive is the activation status\n', '    function isRewardAllocationActive() external view returns (bool);\n', '\n', '    /// Migrates the rewards balance to a new FeesAndBootstrap contract\n', '    /// @dev The new rewards contract is determined according to the contracts registry\n', '    /// @dev No impact of the calling contract if the currently configured contract in the registry\n', '    /// @dev may be called also while the contract is locked\n', '    /// @param guardian is the guardian to migrate\n', '    function migrateRewardsBalance(address guardian) external;\n', '\n', "    /// Accepts guardian's balance migration from a previous rewards contract\n", '    /// @dev the function may be called by any caller that approves the amounts provided for transfer\n', '    /// @param guardian is the migrated guardian\n', '    /// @param fees is the received guardian fees balance \n', '    /// @param bootstrapRewards is the received guardian bootstrap balance\n', '    function acceptRewardsBalanceMigration(address guardian, uint256 fees, uint256 bootstrapRewards) external;\n', '\n', '    /// Performs emergency withdrawal of the contract balance\n', '    /// @dev called with a token to withdraw, should be called twice with the fees and bootstrap tokens\n', '\t/// @dev governance function called only by the migration manager\n', '    /// @param token is the ERC20 token to withdraw\n', '    function emergencyWithdraw(address token) external; /* onlyMigrationManager */\n', '}\n', '\n', '// File: contracts/spec_interfaces/IContractRegistry.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Contract registry contract interface\n', '/// The contract registry holds Orbs PoS contracts and managers lists\n', '/// @dev The contract registry updates the managed contracts on changes in the contract list\n', '/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \n', '/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \n', '/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \n', 'interface IContractRegistry {\n', '\n', '\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\n', '\tevent ManagerChanged(string role, address newManager);\n', '\tevent ContractRegistryUpdated(address newContractRegistry);\n', '\n', '\t/*\n', '\t* External functions\n', '\t*/\n', '\n', '\t/// Updates the contracts address and emits a corresponding event\n', '\t/// @dev governance function called only by the migrationManager or registryAdmin\n', '\t/// @param contractName is the contract name, used to identify it\n', '\t/// @param addr is the contract updated address\n', '\t/// @param managedContract indicates whether the contract is managed by the registry and notified on changes\n', '\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\n', '\n', '\t/// Returns the current address of the given contracts\n', '\t/// @param contractName is the contract name, used to identify it\n', '\t/// @return addr is the contract updated address\n', '\tfunction getContract(string calldata contractName) external view returns (address);\n', '\n', '\t/// Returns the list of contract addresses managed by the registry\n', '\t/// @dev Managed contracts are updated on changes in the registry contracts addresses \n', '\t/// @return addrs is the list of managed contracts\n', '\tfunction getManagedContracts() external view returns (address[] memory);\n', '\n', '\t/// Updates a manager address and emits a corresponding event\n', '\t/// @dev governance function called only by the registryAdmin\n', "\t/// @dev the managers list is a flexible list of role to the manager's address\n", '\t/// @param role is the managers\' role name, for example "functionalManager"\n', '\t/// @param manager is the manager updated address\n', '\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\n', '\n', '\t/// Returns the current address of the given manager\n', '\t/// @param role is the manager name, used to identify it\n', '\t/// @return addr is the manager updated address\n', '\tfunction getManager(string calldata role) external view returns (address);\n', '\n', '\t/// Locks all the managed contracts \n', '\t/// @dev governance function called only by the migrationManager or registryAdmin\n', '\t/// @dev When set all onlyWhenActive functions will revert\n', '\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\n', '\n', '\t/// Unlocks all the managed contracts \n', '\t/// @dev governance function called only by the migrationManager or registryAdmin\n', '\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\n', '\n', '\t/// Sets a new contract registry to migrate to\n', '\t/// @dev governance function called only by the registryAdmin\n', '\t/// @dev updates the registry address record in all the managed contracts\n', '\t/// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\n', '\t/// @param newRegistry is the new registry contract \n', '\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n', '\n', '\t/// Returns the previous contract registry address \n', '\t/// @dev used when the setting the contract as a new registry to assure a valid registry\n', '\t/// @return previousContractRegistry is the previous contract registry\n', '\tfunction getPreviousContractRegistry() external view returns (address);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableRegistryManagement.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableRegistryManagement is Context {\n', '    address private _registryAdmin;\n', '    address private _pendingRegistryAdmin;\n', '\n', '    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _registryAdmin = msgSender;\n', '        emit RegistryManagementTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current registryAdmin.\n', '     */\n', '    function registryAdmin() public view returns (address) {\n', '        return _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the registryAdmin.\n', '     */\n', '    modifier onlyRegistryAdmin() {\n', '        require(isRegistryAdmin(), "WithClaimableRegistryManagement: caller is not the registryAdmin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current registryAdmin.\n', '     */\n', '    function isRegistryAdmin() public view returns (bool) {\n', '        return _msgSender() == _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without registryAdmin. It will not be possible to call\n', '     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\n', '     *\n', '     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\n', '     * thereby removing any functionality that is only available to the registryAdmin.\n', '     */\n', '    function renounceRegistryManagement() public onlyRegistryAdmin {\n', '        emit RegistryManagementTransferred(_registryAdmin, address(0));\n', '        _registryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\n', '     */\n', '    function _transferRegistryManagement(address newRegistryAdmin) internal {\n', '        require(newRegistryAdmin != address(0), "RegistryAdmin: new registryAdmin is the zero address");\n', '        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\n', '        _registryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingManager.\n', '     */\n', '    modifier onlyPendingRegistryAdmin() {\n', '        require(msg.sender == _pendingRegistryAdmin, "Caller is not the pending registryAdmin");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current registryAdmin to set the pendingManager address.\n', '     * @param newRegistryAdmin The address to transfer registryManagement to.\n', '     */\n', '    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\n', '        _pendingRegistryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\n', '     */\n', '    function claimRegistryManagement() external onlyPendingRegistryAdmin {\n', '        _transferRegistryManagement(_pendingRegistryAdmin);\n', '        _pendingRegistryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current pendingRegistryAdmin\n', '    */\n', '    function pendingRegistryAdmin() public view returns (address) {\n', '       return _pendingRegistryAdmin;  \n', '    }\n', '}\n', '\n', '// File: contracts/Initializable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Initializable {\n', '\n', '    address private _initializationAdmin;\n', '\n', '    event InitializationComplete();\n', '\n', '    constructor() public{\n', '        _initializationAdmin = msg.sender;\n', '    }\n', '\n', '    modifier onlyInitializationAdmin() {\n', '        require(msg.sender == initializationAdmin(), "sender is not the initialization admin");\n', '\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    function initializationAdmin() public view returns (address) {\n', '        return _initializationAdmin;\n', '    }\n', '\n', '    function initializationComplete() external onlyInitializationAdmin {\n', '        _initializationAdmin = address(0);\n', '        emit InitializationComplete();\n', '    }\n', '\n', '    function isInitializationComplete() public view returns (bool) {\n', '        return _initializationAdmin == address(0);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract ContractRegistryAccessor is WithClaimableRegistryManagement, Initializable {\n', '\n', '    IContractRegistry private contractRegistry;\n', '\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\n', '        require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");\n', '        setContractRegistry(_contractRegistry);\n', '        _transferRegistryManagement(_registryAdmin);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(isAdmin(), "sender is not an admin (registryManger or initializationAdmin)");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyMigrationManager {\n', '        require(isMigrationManager(), "sender is not the migration manager");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyFunctionalManager {\n', '        require(isFunctionalManager(), "sender is not the functional manager");\n', '\n', '        _;\n', '    }\n', '\n', '    function isAdmin() internal view returns (bool) {\n', '        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\n', '    }\n', '\n', '    function isManager(string memory role) internal view returns (bool) {\n', '        IContractRegistry _contractRegistry = contractRegistry;\n', '        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\n', '    }\n', '\n', '    function isMigrationManager() internal view returns (bool) {\n', "        return isManager('migrationManager');\n", '    }\n', '\n', '    function isFunctionalManager() internal view returns (bool) {\n', "        return isManager('functionalManager');\n", '    }\n', '\n', '    function getProtocolContract() internal view returns (address) {\n', '        return contractRegistry.getContract("protocol");\n', '    }\n', '\n', '    function getStakingRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewards");\n', '    }\n', '\n', '    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("feesAndBootstrapRewards");\n', '    }\n', '\n', '    function getCommitteeContract() internal view returns (address) {\n', '        return contractRegistry.getContract("committee");\n', '    }\n', '\n', '    function getElectionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("elections");\n', '    }\n', '\n', '    function getDelegationsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("delegations");\n', '    }\n', '\n', '    function getGuardiansRegistrationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("guardiansRegistration");\n', '    }\n', '\n', '    function getCertificationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("certification");\n', '    }\n', '\n', '    function getStakingContract() internal view returns (address) {\n', '        return contractRegistry.getContract("staking");\n', '    }\n', '\n', '    function getSubscriptionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("subscriptions");\n', '    }\n', '\n', '    function getStakingRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewardsWallet");\n', '    }\n', '\n', '    function getBootstrapRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("bootstrapRewardsWallet");\n', '    }\n', '\n', '    function getGeneralFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("generalFeesWallet");\n', '    }\n', '\n', '    function getCertifiedFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("certifiedFeesWallet");\n', '    }\n', '\n', '    function getStakingContractHandler() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingContractHandler");\n', '    }\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event ContractRegistryAddressUpdated(address addr);\n', '\n', '    function setContractRegistry(IContractRegistry newContractRegistry) public onlyAdmin {\n', '        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");\n', '        contractRegistry = newContractRegistry;\n', '        emit ContractRegistryAddressUpdated(address(newContractRegistry));\n', '    }\n', '\n', '    function getContractRegistry() public view returns (IContractRegistry) {\n', '        return contractRegistry;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/ILockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title lockable contract interface, allows to lock a contract\n', 'interface ILockable {\n', '\n', '    event Locked();\n', '    event Unlocked();\n', '\n', '    /// Locks the contract to external non-governance function calls\n', '\t/// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon locking all managed contracts\n', '    /// @dev getters and migration functions remain active also for locked contracts\n', '    /// @dev checked by the onlyWhenActive modifier\n', '    function lock() external /* onlyMigrationManager */;\n', '\n', '    /// Unlocks the contract \n', '\t/// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon unlocking all managed contracts\n', '    function unlock() external /* onlyMigrationManager */;\n', '\n', '    /// Returns the contract locking status\n', '    /// @return isLocked is a bool indicating the contract is locked \n', '    function isLocked() view external returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/Lockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract Lockable is ILockable, ContractRegistryAccessor {\n', '\n', '    bool public locked;\n', '\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\n', '\n', '    function lock() external override onlyMigrationManager {\n', '        locked = true;\n', '        emit Locked();\n', '    }\n', '\n', '    function unlock() external override onlyMigrationManager {\n', '        locked = false;\n', '        emit Unlocked();\n', '    }\n', '\n', '    function isLocked() external override view returns (bool) {\n', '        return locked;\n', '    }\n', '\n', '    modifier onlyWhenActive() {\n', '        require(!locked, "contract is locked for this operation");\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/ManagedContract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract ManagedContract is Lockable {\n', '\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\n', '\n', '    function refreshContracts() virtual external {}\n', '\n', '}\n', '\n', '// File: contracts/FeesAndBootstrapRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract FeesAndBootstrapRewards is IFeesAndBootstrapRewards, ManagedContract {\n', '    using SafeMath for uint256;\n', '    using SafeMath96 for uint96;\n', '\n', '    uint256 constant PERCENT_MILLIE_BASE = 100000;\n', '    uint256 constant TOKEN_BASE = 1e18;\n', '\n', '    struct Settings {\n', '        uint96 generalCommitteeAnnualBootstrap;\n', '        uint96 certifiedCommitteeAnnualBootstrap;\n', '        bool rewardAllocationActive;\n', '    }\n', '    Settings settings;\n', '\n', '    IERC20 public bootstrapToken;\n', '    IERC20 public feesToken;\n', '\n', '    struct FeesAndBootstrapState {\n', '        uint96 certifiedFeesPerMember;\n', '        uint96 generalFeesPerMember;\n', '        uint96 certifiedBootstrapPerMember;\n', '        uint96 generalBootstrapPerMember;\n', '        uint32 lastAssigned;\n', '    }\n', '    FeesAndBootstrapState public feesAndBootstrapState;\n', '\n', '    struct FeesAndBootstrap {\n', '        uint96 feeBalance;\n', '        uint96 bootstrapBalance;\n', '        uint96 lastFeesPerMember;\n', '        uint96 lastBootstrapPerMember;\n', '        uint96 withdrawnFees;\n', '        uint96 withdrawnBootstrap;\n', '    }\n', '    mapping(address => FeesAndBootstrap) public feesAndBootstrap;\n', '\n', '    constructor(\n', '        IContractRegistry _contractRegistry,\n', '        address _registryAdmin,\n', '        IERC20 _feesToken,\n', '        IERC20 _bootstrapToken,\n', '        uint generalCommitteeAnnualBootstrap,\n', '        uint certifiedCommitteeAnnualBootstrap\n', '    ) ManagedContract(_contractRegistry, _registryAdmin) public {\n', '        require(address(_bootstrapToken) != address(0), "bootstrapToken must not be 0");\n', '        require(address(_feesToken) != address(0), "feeToken must not be 0");\n', '\n', '        _setGeneralCommitteeAnnualBootstrap(generalCommitteeAnnualBootstrap);\n', '        _setCertifiedCommitteeAnnualBootstrap(certifiedCommitteeAnnualBootstrap);\n', '\n', '        feesToken = _feesToken;\n', '        bootstrapToken = _bootstrapToken;\n', '    }\n', '\n', '    modifier onlyCommitteeContract() {\n', '        require(msg.sender == address(committeeContract), "caller is not the elections contract");\n', '\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    function committeeMembershipWillChange(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) external override onlyWhenActive onlyCommitteeContract {\n', '        _updateGuardianFeesAndBootstrap(guardian, inCommittee, isCertified, nextCertification, generalCommitteeSize, certifiedCommitteeSize);\n', '    }\n', '\n', '    function getFeesAndBootstrapBalance(address guardian) external override view returns (uint256 feeBalance, uint256 bootstrapBalance) {\n', '        (FeesAndBootstrap memory guardianFeesAndBootstrap,) = getGuardianFeesAndBootstrap(guardian, block.timestamp);\n', '        return (guardianFeesAndBootstrap.feeBalance, guardianFeesAndBootstrap.bootstrapBalance);\n', '    }\n', '\n', '    function estimateFutureFeesAndBootstrapRewards(address guardian, uint256 duration) external override view returns (uint256 estimatedFees, uint256 estimatedBootstrapRewards) {\n', '        (FeesAndBootstrap memory guardianFeesAndBootstrapNow,) = getGuardianFeesAndBootstrap(guardian, block.timestamp);\n', '        (FeesAndBootstrap memory guardianFeesAndBootstrapFuture,) = getGuardianFeesAndBootstrap(guardian, block.timestamp.add(duration));\n', '        estimatedFees = guardianFeesAndBootstrapFuture.feeBalance.sub(guardianFeesAndBootstrapNow.feeBalance);\n', '        estimatedBootstrapRewards = guardianFeesAndBootstrapFuture.bootstrapBalance.sub(guardianFeesAndBootstrapNow.bootstrapBalance);\n', '    }\n', '\n', '    function withdrawBootstrapFunds(address guardian) external override onlyWhenActive {\n', '        updateGuardianFeesAndBootstrap(guardian);\n', '        uint256 amount = feesAndBootstrap[guardian].bootstrapBalance;\n', '        feesAndBootstrap[guardian].bootstrapBalance = 0;\n', '        uint96 withdrawnBootstrap = feesAndBootstrap[guardian].withdrawnBootstrap.add(amount);\n', '        feesAndBootstrap[guardian].withdrawnBootstrap = withdrawnBootstrap;\n', '        emit BootstrapRewardsWithdrawn(guardian, amount, withdrawnBootstrap);\n', '\n', '        require(bootstrapToken.transfer(guardian, amount), "Rewards::withdrawBootstrapFunds - insufficient funds");\n', '    }\n', '\n', '    function withdrawFees(address guardian) external override onlyWhenActive {\n', '        updateGuardianFeesAndBootstrap(guardian);\n', '\n', '        uint256 amount = feesAndBootstrap[guardian].feeBalance;\n', '        feesAndBootstrap[guardian].feeBalance = 0;\n', '        uint96 withdrawnFees = feesAndBootstrap[guardian].withdrawnFees.add(amount);\n', '        feesAndBootstrap[guardian].withdrawnFees = withdrawnFees;\n', '\n', '        emit FeesWithdrawn(guardian, amount, withdrawnFees);\n', '        require(feesToken.transfer(guardian, amount), "Rewards::withdrawFees - insufficient funds");\n', '    }\n', '\n', '    function getFeesAndBootstrapState() external override view returns (\n', '        uint256 certifiedFeesPerMember,\n', '        uint256 generalFeesPerMember,\n', '        uint256 certifiedBootstrapPerMember,\n', '        uint256 generalBootstrapPerMember,\n', '        uint256 lastAssigned\n', '    ) {\n', '        (uint generalCommitteeSize, uint certifiedCommitteeSize, ) = committeeContract.getCommitteeStats();\n', '        (FeesAndBootstrapState memory _feesAndBootstrapState,,) = _getFeesAndBootstrapState(generalCommitteeSize, certifiedCommitteeSize, generalFeesWallet.getOutstandingFees(block.timestamp), certifiedFeesWallet.getOutstandingFees(block.timestamp), block.timestamp, settings);\n', '        certifiedFeesPerMember = _feesAndBootstrapState.certifiedFeesPerMember;\n', '        generalFeesPerMember = _feesAndBootstrapState.generalFeesPerMember;\n', '        certifiedBootstrapPerMember = _feesAndBootstrapState.certifiedBootstrapPerMember;\n', '        generalBootstrapPerMember = _feesAndBootstrapState.generalBootstrapPerMember;\n', '        lastAssigned = _feesAndBootstrapState.lastAssigned;\n', '    }\n', '\n', '    function getFeesAndBootstrapData(address guardian) external override view returns (\n', '        uint256 feeBalance,\n', '        uint256 lastFeesPerMember,\n', '        uint256 bootstrapBalance,\n', '        uint256 lastBootstrapPerMember,\n', '        uint256 withdrawnFees,\n', '        uint256 withdrawnBootstrap,\n', '        bool certified\n', '    ) {\n', '        FeesAndBootstrap memory guardianFeesAndBootstrap;\n', '        (guardianFeesAndBootstrap, certified) = getGuardianFeesAndBootstrap(guardian, block.timestamp);\n', '        return (\n', '            guardianFeesAndBootstrap.feeBalance,\n', '            guardianFeesAndBootstrap.lastFeesPerMember,\n', '            guardianFeesAndBootstrap.bootstrapBalance,\n', '            guardianFeesAndBootstrap.lastBootstrapPerMember,\n', '            guardianFeesAndBootstrap.withdrawnFees,\n', '            guardianFeesAndBootstrap.withdrawnBootstrap,\n', '            certified\n', '        );\n', '    }\n', '\n', '    /*\n', '     * Governance functions\n', '     */\n', '\n', '    function migrateRewardsBalance(address guardian) external override {\n', '        require(!settings.rewardAllocationActive, "Reward distribution must be deactivated for migration");\n', '\n', '        IFeesAndBootstrapRewards currentRewardsContract = IFeesAndBootstrapRewards(getFeesAndBootstrapRewardsContract());\n', '        require(address(currentRewardsContract) != address(this), "New rewards contract is not set");\n', '\n', '        updateGuardianFeesAndBootstrap(guardian);\n', '\n', '        FeesAndBootstrap memory guardianFeesAndBootstrap = feesAndBootstrap[guardian];\n', '        uint256 fees = guardianFeesAndBootstrap.feeBalance;\n', '        uint256 bootstrap = guardianFeesAndBootstrap.bootstrapBalance;\n', '\n', '        guardianFeesAndBootstrap.feeBalance = 0;\n', '        guardianFeesAndBootstrap.bootstrapBalance = 0;\n', '        feesAndBootstrap[guardian] = guardianFeesAndBootstrap;\n', '\n', '        require(feesToken.approve(address(currentRewardsContract), fees), "migrateRewardsBalance: approve failed");\n', '        require(bootstrapToken.approve(address(currentRewardsContract), bootstrap), "migrateRewardsBalance: approve failed");\n', '        currentRewardsContract.acceptRewardsBalanceMigration(guardian, fees, bootstrap);\n', '\n', '        emit FeesAndBootstrapRewardsBalanceMigrated(guardian, fees, bootstrap, address(currentRewardsContract));\n', '    }\n', '\n', '    function acceptRewardsBalanceMigration(address guardian, uint256 fees, uint256 bootstrap) external override {\n', '        FeesAndBootstrap memory guardianFeesAndBootstrap = feesAndBootstrap[guardian];\n', '        guardianFeesAndBootstrap.feeBalance = guardianFeesAndBootstrap.feeBalance.add(fees);\n', '        guardianFeesAndBootstrap.bootstrapBalance = guardianFeesAndBootstrap.bootstrapBalance.add(bootstrap);\n', '        feesAndBootstrap[guardian] = guardianFeesAndBootstrap;\n', '\n', '        if (fees > 0) {\n', '            require(feesToken.transferFrom(msg.sender, address(this), fees), "acceptRewardBalanceMigration: transfer failed");\n', '        }\n', '        if (bootstrap > 0) {\n', '            require(bootstrapToken.transferFrom(msg.sender, address(this), bootstrap), "acceptRewardBalanceMigration: transfer failed");\n', '        }\n', '\n', '        emit FeesAndBootstrapRewardsBalanceMigrationAccepted(msg.sender, guardian, fees, bootstrap);\n', '    }\n', '\n', '    function activateRewardDistribution(uint startTime) external override onlyMigrationManager {\n', '        require(!settings.rewardAllocationActive, "reward distribution is already activated");\n', '\n', '        feesAndBootstrapState.lastAssigned = uint32(startTime);\n', '        settings.rewardAllocationActive = true;\n', '\n', '        emit RewardDistributionActivated(startTime);\n', '    }\n', '\n', '    function deactivateRewardDistribution() external override onlyMigrationManager {\n', '        require(settings.rewardAllocationActive, "reward distribution is already deactivated");\n', '\n', '        updateFeesAndBootstrapState();\n', '\n', '        settings.rewardAllocationActive = false;\n', '\n', '        emit RewardDistributionDeactivated();\n', '    }\n', '\n', '    function getSettings() external override view returns (\n', '        uint generalCommitteeAnnualBootstrap,\n', '        uint certifiedCommitteeAnnualBootstrap,\n', '        bool rewardAllocationActive\n', '    ) {\n', '        Settings memory _settings = settings;\n', '        generalCommitteeAnnualBootstrap = _settings.generalCommitteeAnnualBootstrap;\n', '        certifiedCommitteeAnnualBootstrap = _settings.certifiedCommitteeAnnualBootstrap;\n', '        rewardAllocationActive = _settings.rewardAllocationActive;\n', '    }\n', '\n', '    function setGeneralCommitteeAnnualBootstrap(uint256 annualAmount) external override onlyFunctionalManager {\n', '        updateFeesAndBootstrapState();\n', '        _setGeneralCommitteeAnnualBootstrap(annualAmount);\n', '    }\n', '\n', '    function getGeneralCommitteeAnnualBootstrap() external override view returns (uint256) {\n', '        return settings.generalCommitteeAnnualBootstrap;\n', '    }\n', '\n', '    function setCertifiedCommitteeAnnualBootstrap(uint256 annualAmount) external override onlyFunctionalManager {\n', '        updateFeesAndBootstrapState();\n', '        _setCertifiedCommitteeAnnualBootstrap(annualAmount);\n', '    }\n', '\n', '    function getCertifiedCommitteeAnnualBootstrap() external override view returns (uint256) {\n', '        return settings.certifiedCommitteeAnnualBootstrap;\n', '    }\n', '\n', '    function emergencyWithdraw(address erc20) external override onlyMigrationManager {\n', '        IERC20 _token = IERC20(erc20);\n', '        emit EmergencyWithdrawal(msg.sender, address(_token));\n', '        require(_token.transfer(msg.sender, _token.balanceOf(address(this))), "Rewards::emergencyWithdraw - transfer failed");\n', '    }\n', '\n', '    function isRewardAllocationActive() external override view returns (bool) {\n', '        return settings.rewardAllocationActive;\n', '    }\n', '\n', '    /*\n', '    * Private functions\n', '    */\n', '\n', '    // Global state\n', '\n', '    function _getFeesAndBootstrapState(uint generalCommitteeSize, uint certifiedCommitteeSize, uint256 collectedGeneralFees, uint256 collectedCertifiedFees, uint256 currentTime, Settings memory _settings) private view returns (FeesAndBootstrapState memory _feesAndBootstrapState, uint256 allocatedGeneralBootstrap, uint256 allocatedCertifiedBootstrap) {\n', '        _feesAndBootstrapState = feesAndBootstrapState;\n', '\n', '        if (_settings.rewardAllocationActive) {\n', '            uint256 generalFeesDelta = generalCommitteeSize == 0 ? 0 : collectedGeneralFees.div(generalCommitteeSize);\n', '            uint256 certifiedFeesDelta = certifiedCommitteeSize == 0 ? 0 : generalFeesDelta.add(collectedCertifiedFees.div(certifiedCommitteeSize));\n', '\n', '            _feesAndBootstrapState.generalFeesPerMember = _feesAndBootstrapState.generalFeesPerMember.add(generalFeesDelta);\n', '            _feesAndBootstrapState.certifiedFeesPerMember = _feesAndBootstrapState.certifiedFeesPerMember.add(certifiedFeesDelta);\n', '\n', '            uint duration = currentTime.sub(_feesAndBootstrapState.lastAssigned);\n', '            uint256 generalBootstrapDelta = uint256(_settings.generalCommitteeAnnualBootstrap).mul(duration).div(365 days);\n', '            uint256 certifiedBootstrapDelta = generalBootstrapDelta.add(uint256(_settings.certifiedCommitteeAnnualBootstrap).mul(duration).div(365 days));\n', '\n', '            _feesAndBootstrapState.generalBootstrapPerMember = _feesAndBootstrapState.generalBootstrapPerMember.add(generalBootstrapDelta);\n', '            _feesAndBootstrapState.certifiedBootstrapPerMember = _feesAndBootstrapState.certifiedBootstrapPerMember.add(certifiedBootstrapDelta);\n', '            _feesAndBootstrapState.lastAssigned = uint32(currentTime);\n', '\n', '            allocatedGeneralBootstrap = generalBootstrapDelta.mul(generalCommitteeSize);\n', '            allocatedCertifiedBootstrap = certifiedBootstrapDelta.mul(certifiedCommitteeSize);\n', '        }\n', '    }\n', '\n', '    function _updateFeesAndBootstrapState(uint generalCommitteeSize, uint certifiedCommitteeSize) private returns (FeesAndBootstrapState memory _feesAndBootstrapState) {\n', '        Settings memory _settings = settings;\n', '        if (!_settings.rewardAllocationActive) {\n', '            return feesAndBootstrapState;\n', '        }\n', '\n', '        uint256 collectedGeneralFees = generalFeesWallet.collectFees();\n', '        uint256 collectedCertifiedFees = certifiedFeesWallet.collectFees();\n', '        uint256 allocatedGeneralBootstrap;\n', '        uint256 allocatedCertifiedBootstrap;\n', '\n', '        (_feesAndBootstrapState, allocatedGeneralBootstrap, allocatedCertifiedBootstrap) = _getFeesAndBootstrapState(generalCommitteeSize, certifiedCommitteeSize, collectedGeneralFees, collectedCertifiedFees, block.timestamp, _settings);\n', '        bootstrapRewardsWallet.withdraw(allocatedGeneralBootstrap.add(allocatedCertifiedBootstrap));\n', '\n', '        feesAndBootstrapState = _feesAndBootstrapState;\n', '\n', '        emit FeesAllocated(collectedGeneralFees, _feesAndBootstrapState.generalFeesPerMember, collectedCertifiedFees, _feesAndBootstrapState.certifiedFeesPerMember);\n', '        emit BootstrapRewardsAllocated(allocatedGeneralBootstrap, _feesAndBootstrapState.generalBootstrapPerMember, allocatedCertifiedBootstrap, _feesAndBootstrapState.certifiedBootstrapPerMember);\n', '    }\n', '\n', '    function updateFeesAndBootstrapState() private returns (FeesAndBootstrapState memory _feesAndBootstrapState) {\n', '        (uint generalCommitteeSize, uint certifiedCommitteeSize, ) = committeeContract.getCommitteeStats();\n', '        return _updateFeesAndBootstrapState(generalCommitteeSize, certifiedCommitteeSize);\n', '    }\n', '\n', '    // Guardian state\n', '\n', '    function _getGuardianFeesAndBootstrap(address guardian, bool inCommittee, bool isCertified, bool nextCertification, FeesAndBootstrapState memory _feesAndBootstrapState) private view returns (FeesAndBootstrap memory guardianFeesAndBootstrap, uint256 addedBootstrapAmount, uint256 addedFeesAmount) {\n', '        guardianFeesAndBootstrap = feesAndBootstrap[guardian];\n', '\n', '        if (inCommittee) {\n', '            addedBootstrapAmount = (isCertified ? _feesAndBootstrapState.certifiedBootstrapPerMember : _feesAndBootstrapState.generalBootstrapPerMember).sub(guardianFeesAndBootstrap.lastBootstrapPerMember);\n', '            guardianFeesAndBootstrap.bootstrapBalance = guardianFeesAndBootstrap.bootstrapBalance.add(addedBootstrapAmount);\n', '\n', '            addedFeesAmount = (isCertified ? _feesAndBootstrapState.certifiedFeesPerMember : _feesAndBootstrapState.generalFeesPerMember).sub(guardianFeesAndBootstrap.lastFeesPerMember);\n', '            guardianFeesAndBootstrap.feeBalance = guardianFeesAndBootstrap.feeBalance.add(addedFeesAmount);\n', '        }\n', '\n', '        guardianFeesAndBootstrap.lastBootstrapPerMember = nextCertification ?  _feesAndBootstrapState.certifiedBootstrapPerMember : _feesAndBootstrapState.generalBootstrapPerMember;\n', '        guardianFeesAndBootstrap.lastFeesPerMember = nextCertification ?  _feesAndBootstrapState.certifiedFeesPerMember : _feesAndBootstrapState.generalFeesPerMember;\n', '    }\n', '\n', '    function _updateGuardianFeesAndBootstrap(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) private {\n', '        uint256 addedBootstrapAmount;\n', '        uint256 addedFeesAmount;\n', '\n', '        FeesAndBootstrapState memory _feesAndBootstrapState = _updateFeesAndBootstrapState(generalCommitteeSize, certifiedCommitteeSize);\n', '        FeesAndBootstrap memory guardianFeesAndBootstrap;\n', '        (guardianFeesAndBootstrap, addedBootstrapAmount, addedFeesAmount) = _getGuardianFeesAndBootstrap(guardian, inCommittee, isCertified, nextCertification, _feesAndBootstrapState);\n', '        feesAndBootstrap[guardian] = guardianFeesAndBootstrap;\n', '\n', '        emit BootstrapRewardsAssigned(guardian, addedBootstrapAmount, guardianFeesAndBootstrap.withdrawnBootstrap.add(guardianFeesAndBootstrap.bootstrapBalance), isCertified, guardianFeesAndBootstrap.lastBootstrapPerMember);\n', '        emit FeesAssigned(guardian, addedFeesAmount, guardianFeesAndBootstrap.withdrawnFees.add(guardianFeesAndBootstrap.feeBalance), isCertified, guardianFeesAndBootstrap.lastFeesPerMember);\n', '    }\n', '\n', '    function getGuardianFeesAndBootstrap(address guardian, uint256 currentTime) private view returns (FeesAndBootstrap memory guardianFeesAndBootstrap, bool certified) {\n', '        ICommittee _committeeContract = committeeContract;\n', '        (uint generalCommitteeSize, uint certifiedCommitteeSize, ) = _committeeContract.getCommitteeStats();\n', '        (FeesAndBootstrapState memory _feesAndBootstrapState,,) = _getFeesAndBootstrapState(generalCommitteeSize, certifiedCommitteeSize, generalFeesWallet.getOutstandingFees(currentTime), certifiedFeesWallet.getOutstandingFees(currentTime), currentTime, settings);\n', '        bool inCommittee;\n', '        (inCommittee, , certified,) = _committeeContract.getMemberInfo(guardian);\n', '        (guardianFeesAndBootstrap, ,) = _getGuardianFeesAndBootstrap(guardian, inCommittee, certified, certified, _feesAndBootstrapState);\n', '    }\n', '\n', '    function updateGuardianFeesAndBootstrap(address guardian) private {\n', '        ICommittee _committeeContract = committeeContract;\n', '        (uint generalCommitteeSize, uint certifiedCommitteeSize, ) = _committeeContract.getCommitteeStats();\n', '        (bool inCommittee, , bool isCertified,) = _committeeContract.getMemberInfo(guardian);\n', '        _updateGuardianFeesAndBootstrap(guardian, inCommittee, isCertified, isCertified, generalCommitteeSize, certifiedCommitteeSize);\n', '    }\n', '\n', '    // Governance and misc.\n', '\n', '    function _setGeneralCommitteeAnnualBootstrap(uint256 annualAmount) private {\n', '        require(uint256(uint96(annualAmount)) == annualAmount, "annualAmount must fit in uint96");\n', '\n', '        settings.generalCommitteeAnnualBootstrap = uint96(annualAmount);\n', '        emit GeneralCommitteeAnnualBootstrapChanged(annualAmount);\n', '    }\n', '\n', '    function _setCertifiedCommitteeAnnualBootstrap(uint256 annualAmount) private {\n', '        require(uint256(uint96(annualAmount)) == annualAmount, "annualAmount must fit in uint96");\n', '\n', '        settings.certifiedCommitteeAnnualBootstrap = uint96(annualAmount);\n', '        emit CertifiedCommitteeAnnualBootstrapChanged(annualAmount);\n', '    }\n', '\n', '    /*\n', '     * Contracts topology / registry interface\n', '     */\n', '\n', '    ICommittee committeeContract;\n', '    IFeesWallet generalFeesWallet;\n', '    IFeesWallet certifiedFeesWallet;\n', '    IProtocolWallet bootstrapRewardsWallet;\n', '    function refreshContracts() external override {\n', '        committeeContract = ICommittee(getCommitteeContract());\n', '        generalFeesWallet = IFeesWallet(getGeneralFeesWallet());\n', '        certifiedFeesWallet = IFeesWallet(getCertifiedFeesWallet());\n', '        bootstrapRewardsWallet = IProtocolWallet(getBootstrapRewardsWallet());\n', '    }\n', '}']