['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/vaults/strategies/IStrategy.sol\n', '\n', 'interface IStrategy {\n', '    function approve(IERC20 _token) external;\n', '\n', '    function approveForSpender(IERC20 _token, address spender) external;\n', '\n', '    // Deposit tokens to a farm to yield more tokens.\n', '    function deposit(address _vault, uint256 _amount) external;\n', '\n', '    // Claim farming tokens\n', '    function claim(address _vault) external;\n', '\n', '    // The vault request to harvest the profit\n', '    function harvest(uint256 _bankPoolId) external;\n', '\n', '    // Withdraw the principal from a farm.\n', '    function withdraw(address _vault, uint256 _amount) external;\n', '\n', '    // Target farming token of this strategy.\n', '    function getTargetToken() external view returns(address);\n', '\n', '    function balanceOf(address _vault) external view returns (uint256);\n', '\n', '    function pendingReward(address _vault) external view returns (uint256);\n', '\n', '    function expectedAPY(address _vault) external view returns (uint256);\n', '\n', '    function governanceRescueToken(IERC20 _token) external returns (uint256);\n', '}\n', '\n', '// File: contracts/vaults/ValueVaultBank.sol\n', '\n', 'interface IValueVaultMaster {\n', '    function minorPool() view external returns(address);\n', '    function performanceReward() view external returns(address);\n', '    function minStakeTimeToClaimVaultReward() view external returns(uint256);\n', '}\n', '\n', 'interface IValueVault {\n', '    function balanceOf(address account) view external returns(uint256);\n', '    function getStrategyCount() external view returns(uint256);\n', '    function depositAvailable() external view returns(bool);\n', '    function strategies(uint256 _index) view external returns(IStrategy);\n', '    function mintByBank(IERC20 _token, address _to, uint256 _amount) external;\n', '    function burnByBank(IERC20 _token, address _account, uint256 _amount) external;\n', '    function harvestAllStrategies(uint256 _bankPoolId) external;\n', '    function harvestStrategy(IStrategy _strategy, uint256 _bankPoolId) external;\n', '}\n', '\n', 'interface IValueMinorPool {\n', '    function depositOnBehalf(address farmer, uint256 _pid, uint256 _amount, address _referrer) external;\n', '    function withdrawOnBehalf(address farmer, uint256 _pid, uint256 _amount) external;\n', '}\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', 'contract ValueVaultBank {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    modifier discountCHI {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n', '    }\n', '\n', '    address public governance;\n', '    IValueVaultMaster public vaultMaster;\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 token; // Address of token contract.\n', '        IValueVault vault; // Address of vault contract.\n', "        uint256 minorPoolId; // minorPool's subpool id\n", '        uint256 startTime;\n', '        uint256 individualCap; // 0 to disable\n', '        uint256 totalCap; // 0 to disable\n', '    }\n', '\n', '    // Info of each pool.\n', '    mapping(uint256 => PoolInfo) public poolMap;  // By poolId\n', '\n', '    struct Staker {\n', '        uint256 stake;\n', '        uint256 payout;\n', '        uint256 total_out;\n', '    }\n', '\n', "    mapping(uint256 => mapping(address => Staker)) public stakers; // poolId -> stakerAddress -> staker's info\n", '\n', '    struct Global {\n', '        uint256 total_stake;\n', '        uint256 total_out;\n', '        uint256 earnings_per_share;\n', '    }\n', '\n', '    mapping(uint256 => Global) public global; // poolId -> global data\n', '\n', "    mapping(uint256 => mapping(address => uint256)) public lastStakeTimes; // poolId -> user's last staked\n", '    uint256 constant internal magnitude = 10 ** 40;\n', '\n', '    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed poolId, uint256 amount);\n', '    event Claim(address indexed user, uint256 indexed poolId);\n', '\n', '    constructor() public {\n', '        governance = tx.origin;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setVaultMaster(IValueVaultMaster _vaultMaster) external {\n', '        require(msg.sender == governance, "!governance");\n', '        vaultMaster = _vaultMaster;\n', '    }\n', '\n', '    function setPoolInfo(uint256 _poolId, IERC20 _token, IValueVault _vault, uint256 _minorPoolId, uint256 _startTime, uint256 _individualCap, uint256 _totalCap) public {\n', '        require(msg.sender == governance, "!governance");\n', '        poolMap[_poolId].token = _token;\n', '        poolMap[_poolId].vault = _vault;\n', '        poolMap[_poolId].minorPoolId = _minorPoolId;\n', '        poolMap[_poolId].startTime = _startTime;\n', '        poolMap[_poolId].individualCap = _individualCap;\n', '        poolMap[_poolId].totalCap = _totalCap;\n', '    }\n', '\n', '    function setPoolCap(uint256 _poolId, uint256 _individualCap, uint256 _totalCap) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_totalCap == 0 || _totalCap >= _individualCap, "_totalCap < _individualCap");\n', '        poolMap[_poolId].individualCap = _individualCap;\n', '        poolMap[_poolId].totalCap = _totalCap;\n', '    }\n', '\n', '    function depositAvailable(uint256 _poolId) external view returns(bool) {\n', '        return poolMap[_poolId].vault.depositAvailable();\n', '    }\n', '\n', '    // Deposit tokens to Bank. If we have a strategy, then tokens will be moved there.\n', '    function deposit(uint256 _poolId, uint256 _amount, bool _farmMinorPool, address _referrer) public discountCHI {\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        require(now >= pool.startTime, "deposit: after startTime");\n', '        require(_amount > 0, "!_amount");\n', '        require(address(pool.vault) != address(0), "pool.vault = 0");\n', '        require(pool.individualCap == 0 || stakers[_poolId][msg.sender].stake.add(_amount) <= pool.individualCap, "Exceed pool.individualCap");\n', '        require(pool.totalCap == 0 || global[_poolId].total_stake.add(_amount) <= pool.totalCap, "Exceed pool.totalCap");\n', '\n', '        pool.token.safeTransferFrom(msg.sender, address(pool.vault), _amount);\n', '        pool.vault.mintByBank(pool.token, msg.sender, _amount);\n', '        if (_farmMinorPool && address(vaultMaster) != address(0)) {\n', '            address minorPool = vaultMaster.minorPool();\n', '            if (minorPool != address(0)) {\n', '                IValueMinorPool(minorPool).depositOnBehalf(msg.sender, pool.minorPoolId, pool.vault.balanceOf(msg.sender), _referrer);\n', '            }\n', '        }\n', '\n', '        _handleDepositStakeInfo(_poolId, _amount);\n', '        emit Deposit(msg.sender, _poolId, _amount);\n', '    }\n', '\n', '    function _handleDepositStakeInfo(uint256 _poolId, uint256 _amount) internal {\n', '        stakers[_poolId][msg.sender].stake = stakers[_poolId][msg.sender].stake.add(_amount);\n', '        if (global[_poolId].earnings_per_share != 0) {\n', '            stakers[_poolId][msg.sender].payout = stakers[_poolId][msg.sender].payout.add(\n', '                global[_poolId].earnings_per_share.mul(_amount).sub(1).div(magnitude).add(1)\n', '            );\n', '        }\n', '        global[_poolId].total_stake = global[_poolId].total_stake.add(_amount);\n', '        lastStakeTimes[_poolId][msg.sender] = block.timestamp;\n', '    }\n', '\n', '    // Withdraw tokens from ValueVaultBank (from a strategy first if there is one).\n', '    function withdraw(uint256 _poolId, uint256 _amount, bool _farmMinorPool) public discountCHI {\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        require(address(pool.vault) != address(0), "pool.vault = 0");\n', '        require(now >= pool.startTime, "withdraw: after startTime");\n', '        require(_amount <= stakers[_poolId][msg.sender].stake, "!balance");\n', '\n', '        claimProfit(_poolId);\n', '\n', '        if (_farmMinorPool && address(vaultMaster) != address(0)) {\n', '            address minorPool = vaultMaster.minorPool();\n', '            if (minorPool != address(0)) {\n', '                IValueMinorPool(minorPool).withdrawOnBehalf(msg.sender, pool.minorPoolId, _amount);\n', '            }\n', '        }\n', '        pool.vault.burnByBank(pool.token, msg.sender, _amount);\n', '        pool.token.safeTransfer(msg.sender, _amount);\n', '\n', '        _handleWithdrawStakeInfo(_poolId, _amount);\n', '        emit Withdraw(msg.sender, _poolId, _amount);\n', '    }\n', '\n', '    function _handleWithdrawStakeInfo(uint256 _poolId, uint256 _amount) internal {\n', '        stakers[_poolId][msg.sender].payout = stakers[_poolId][msg.sender].payout.sub(\n', '            global[_poolId].earnings_per_share.mul(_amount).div(magnitude)\n', '        );\n', '        stakers[_poolId][msg.sender].stake = stakers[_poolId][msg.sender].stake.sub(_amount);\n', '        global[_poolId].total_stake = global[_poolId].total_stake.sub(_amount);\n', '    }\n', '\n', '    function exit(uint256 _poolId, bool _farmMinorPool) external discountCHI {\n', '        withdraw(_poolId, stakers[_poolId][msg.sender].stake, _farmMinorPool);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _poolId) public {\n', '        uint256 amount = stakers[_poolId][msg.sender].stake;\n', '        poolMap[_poolId].token.safeTransfer(address(msg.sender), amount);\n', '        stakers[_poolId][msg.sender].stake = 0;\n', '        global[_poolId].total_stake = global[_poolId].total_stake.sub(amount);\n', '    }\n', '\n', '    function harvestVault(uint256 _poolId) external discountCHI {\n', '        poolMap[_poolId].vault.harvestAllStrategies(_poolId);\n', '    }\n', '\n', '    function harvestStrategy(uint256 _poolId, IStrategy _strategy) external discountCHI {\n', '        poolMap[_poolId].vault.harvestStrategy(_strategy, _poolId);\n', '    }\n', '\n', '    function make_profit(uint256 _poolId, uint256 _amount) public {\n', '        require(_amount > 0, "not 0");\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        pool.token.safeTransferFrom(msg.sender, address(this), _amount);\n', '        if (global[_poolId].total_stake > 0) {\n', '            global[_poolId].earnings_per_share = global[_poolId].earnings_per_share.add(\n', '                _amount.mul(magnitude).div(global[_poolId].total_stake)\n', '            );\n', '        }\n', '        global[_poolId].total_out = global[_poolId].total_out.add(_amount);\n', '    }\n', '\n', '    function cal_out(uint256 _poolId, address user) public view returns (uint256) {\n', '        uint256 _cal = global[_poolId].earnings_per_share.mul(stakers[_poolId][user].stake).div(magnitude);\n', '        if (_cal < stakers[_poolId][user].payout) {\n', '            return 0;\n', '        } else {\n', '            return _cal.sub(stakers[_poolId][user].payout);\n', '        }\n', '    }\n', '\n', '    function cal_out_pending(uint256 _pendingBalance, uint256 _poolId, address user) public view returns (uint256) {\n', '        uint256 _earnings_per_share = global[_poolId].earnings_per_share.add(\n', '            _pendingBalance.mul(magnitude).div(global[_poolId].total_stake)\n', '        );\n', '        uint256 _cal = _earnings_per_share.mul(stakers[_poolId][user].stake).div(magnitude);\n', '        _cal = _cal.sub(cal_out(_poolId, user));\n', '        if (_cal < stakers[_poolId][user].payout) {\n', '            return 0;\n', '        } else {\n', '            return _cal.sub(stakers[_poolId][user].payout);\n', '        }\n', '    }\n', '\n', '    function claimProfit(uint256 _poolId) public discountCHI {\n', '        uint256 out = cal_out(_poolId, msg.sender);\n', '        stakers[_poolId][msg.sender].payout = global[_poolId].earnings_per_share.mul(stakers[_poolId][msg.sender].stake).div(magnitude);\n', '        stakers[_poolId][msg.sender].total_out = stakers[_poolId][msg.sender].total_out.add(out);\n', '\n', '        if (out > 0) {\n', '            PoolInfo storage pool = poolMap[_poolId];\n', '            uint256 _stakeTime = now - lastStakeTimes[_poolId][msg.sender];\n', '            if (address(vaultMaster) != address(0) && _stakeTime < vaultMaster.minStakeTimeToClaimVaultReward()) { // claim too soon\n', '                uint256 actually_out = _stakeTime.mul(out).mul(1e18).div(vaultMaster.minStakeTimeToClaimVaultReward()).div(1e18);\n', '                uint256 earlyClaimCost = out.sub(actually_out);\n', '                safeTokenTransfer(pool.token, vaultMaster.performanceReward(), earlyClaimCost);\n', '                out = actually_out;\n', '            }\n', '            safeTokenTransfer(pool.token, msg.sender, out);\n', '        }\n', '    }\n', '\n', '    // Safe token transfer function, just in case if rounding error causes pool to not have enough token.\n', '    function safeTokenTransfer(IERC20 _token, address _to, uint256 _amount) internal {\n', '        uint256 bal = _token.balanceOf(address(this));\n', '        if (_amount > bal) {\n', '            _token.safeTransfer(_to, bal);\n', '        } else {\n', '            _token.safeTransfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev if there is any token stuck we will need governance support to rescue the fund\n', '     */\n', '    function governanceRescueFromStrategy(IERC20 _token, IStrategy _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _strategy.governanceRescueToken(_token);\n', '    }\n', '\n', '    /**\n', '     * This function allows governance to take unsupported tokens out of the contract.\n', '     * This is in an effort to make someone whole, should they seriously mess up.\n', '     * There is no guarantee governance will vote to return these.\n', '     * It also allows for removal of airdropped tokens.\n', '     */\n', '    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.safeTransfer(to, amount);\n', '    }\n', '}']