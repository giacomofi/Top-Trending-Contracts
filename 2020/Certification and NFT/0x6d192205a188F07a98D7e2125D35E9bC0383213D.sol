['// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity >= 0.5.1;\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', 'contract BSpare {\n', '    address public BMining;\n', '    address public owner;\n', '    address public finance;\n', '    \n', '    event Extract(address to, uint256 value);\n', '    \n', '    constructor(address _BMining) public {\n', '        BMining = _BMining;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    receive() external payable { }\n', '    \n', '    function setupFinance(address _finance) public {\n', '        require(msg.sender == owner, "REQUIRE OWNER");\n', '        finance = _finance;\n', '    }\n', '    \n', '    function upgradeMining(address _newBMining) public {\n', '        require(msg.sender == owner, "REQUIRE OWNER");\n', '        BMining = _newBMining;\n', '    }\n', '    \n', '    function requestSpare(uint amount) public {\n', '        require(msg.sender == BMining, "REQUIRE BMINING");\n', '        TransferHelper.safeTransferETH(BMining, amount);\n', '    }\n', '    \n', '    function extract() public {\n', '        require(msg.sender == finance, "REQUIRE FINANCE");\n', '        emit Extract(finance, address(this).balance);\n', '        TransferHelper.safeTransferETH(finance, address(this).balance);\n', '    }\n', '}']