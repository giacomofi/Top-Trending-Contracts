['pragma solidity ^0.5.16;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function withdraw(address, uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function earn(address, uint) external;\n', '    function want(address) external view returns (address);\n', '}\n', '\n', 'interface Aave {\n', '    function borrow(address _reserve, uint _amount, uint _interestRateModel, uint16 _referralCode) external;\n', '    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\n', '    function repay(address _reserve, uint _amount, address payable _onBehalfOf) external payable;\n', '    function getUserAccountData(address _user)\n', '        external\n', '        view\n', '        returns (\n', '            uint totalLiquidityETH,\n', '            uint totalCollateralETH,\n', '            uint totalBorrowsETH,\n', '            uint totalFeesETH,\n', '            uint availableBorrowsETH,\n', '            uint currentLiquidationThreshold,\n', '            uint ltv,\n', '            uint healthFactor\n', '        );\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external\n', '        view\n', '        returns (\n', '            uint currentATokenBalance,\n', '            uint currentBorrowBalance,\n', '            uint principalBorrowBalance,\n', '            uint borrowRateMode,\n', '            uint borrowRate,\n', '            uint liquidityRate,\n', '            uint originationFee,\n', '            uint variableBorrowIndex,\n', '            uint lastUpdateTimestamp,\n', '            bool usageAsCollateralEnabled\n', '        );\n', '}\n', '\n', 'interface AaveToken {\n', '    function underlyingAssetAddress() external view returns (address);\n', '}\n', '\n', 'interface Oracle {\n', '    function getAssetPrice(address reserve) external view returns (uint);\n', '    function latestAnswer() external view returns (uint);\n', '}\n', '\n', 'interface LendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '    function getLendingPoolCore() external view returns (address);\n', '    function getPriceOracle() external view returns (address);\n', '}\n', '\n', 'contract eDelegatedVault is ERC20, ERC20Detailed {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    IERC20 public token;\n', '    \n', '    address public governance;\n', '    address public controller;\n', '    uint public insurance;\n', '    uint public healthFactor = 4;\n', '    \n', '    uint public ltv = 65;\n', '    uint public max = 100;\n', '    uint public earnLowerlimit;\n', '\n', '    address public constant aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n', '    \n', '    constructor (address _token, address _controller, uint _earnLowerlimit) public ERC20Detailed(\n', '        string(abi.encodePacked("YFElite ", ERC20Detailed(_token).name())),\n', '        string(abi.encodePacked("e", ERC20Detailed(_token).symbol())),\n', '        ERC20Detailed(_token).decimals()\n', '    ) {\n', '        token = IERC20(_token);\n', '        governance = msg.sender;\n', '        controller = _controller;\n', '        earnLowerlimit = _earnLowerlimit;\n', '    }\n', '    \n', '    function debt() public view returns (uint) {\n', '        address _reserve = Controller(controller).want(address(this));\n', '        (,uint currentBorrowBalance,,,,,,,,) = Aave(getAave()).getUserReserveData(_reserve, address(this));\n', '        return currentBorrowBalance;\n', '    }\n', '    \n', '    function credit() public view returns (uint) {\n', '        return Controller(controller).balanceOf(address(this));\n', '    }\n', '    \n', '    // % of tokens locked and cannot be withdrawn per user\n', '    // this is impermanent locked, unless the debt out accrues the strategy\n', '    function locked() public view returns (uint) {\n', '        return credit().mul(1e18).div(debt());\n', '    }\n', '    \n', '    function debtShare(address _lp) public view returns (uint) {\n', '        return debt().mul(balanceOf(_lp)).mul(totalSupply());\n', '    }\n', '    \n', '    function getAave() public view returns (address) {\n', '        return LendingPoolAddressesProvider(aave).getLendingPool();\n', '    }\n', '    \n', '    function getAaveCore() public view returns (address) {\n', '        return LendingPoolAddressesProvider(aave).getLendingPoolCore();\n', '    }\n', '    \n', '    function setHealthFactor(uint _hf) external {\n', '        require(msg.sender == governance, "!governance");\n', '        healthFactor = _hf;\n', '    }\n', '    \n', '    function activate() public {\n', '        Aave(getAave()).setUserUseReserveAsCollateral(underlying(), true);\n', '    }\n', '    \n', '    function repay(address reserve, uint amount) public  {\n', '        // Required for certain stable coins (USDT for example)\n', '        IERC20(reserve).approve(address(getAaveCore()), 0);\n', '        IERC20(reserve).approve(address(getAaveCore()), amount);\n', '        Aave(getAave()).repay(reserve, amount, address(uint160(address(this))));\n', '    }\n', '    \n', '    function repayAll() public {\n', '        address _reserve = reserve();\n', '        uint _amount = IERC20(_reserve).balanceOf(address(this));\n', '        repay(_reserve, _amount);\n', '    }\n', '    \n', "    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n", '    function harvest(address reserve, uint amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        require(reserve != address(token), "token");\n', '        IERC20(reserve).safeTransfer(controller, amount);\n', '    }\n', '    \n', '    // Ignore insurance fund for balance calculations\n', '    function balance() public view returns (uint) {\n', '        return token.balanceOf(address(this)).sub(insurance);\n', '    }\n', '    \n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '    \n', '    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n', '      require(msg.sender == governance, "!governance");\n', '      earnLowerlimit = _earnLowerlimit;\n', '    }\n', '    \n', '    function getAaveOracle() public view returns (address) {\n', '        return LendingPoolAddressesProvider(aave).getPriceOracle();\n', '    }\n', '    \n', '    function getReservePriceETH(address reserve) public view returns (uint) {\n', '        return Oracle(getAaveOracle()).getAssetPrice(reserve);\n', '    }\n', '    \n', '    function shouldRebalance() external view returns (bool) {\n', '        return (over() > 0);\n', '    }\n', '    \n', '    function over() public view returns (uint) {\n', '        over(0);\n', '    }\n', '    \n', '    function getUnderlyingPriceETH(uint _amount) public view returns (uint) {\n', '        _amount = _amount.mul(getUnderlyingPrice()).div(uint(10)**ERC20Detailed(address(token)).decimals()); // Calculate the amount we are withdrawing in ETH\n', '        return _amount.mul(ltv).div(max).div(healthFactor);\n', '    }\n', '    \n', '    function over(uint _amount) public view returns (uint) {\n', '        address _reserve = reserve();\n', '        uint _eth = getUnderlyingPriceETH(_amount);\n', '        (uint _maxSafeETH,uint _totalBorrowsETH,) = maxSafeETH();\n', "        _maxSafeETH = _maxSafeETH.mul(105).div(100); // 5% buffer so we don't go into a earn/rebalance loop\n", '        if (_eth > _maxSafeETH) {\n', '            _maxSafeETH = 0;\n', '        } else {\n', '            _maxSafeETH = _maxSafeETH.sub(_eth); // Add the ETH we are withdrawing\n', '        }\n', '        if (_maxSafeETH < _totalBorrowsETH) {\n', '            uint _over = _totalBorrowsETH.mul(_totalBorrowsETH.sub(_maxSafeETH)).div(_totalBorrowsETH);\n', '            _over = _over.mul(uint(10)**ERC20Detailed(_reserve).decimals()).div(getReservePrice());\n', '            return _over;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function _rebalance(uint _amount) internal {\n', '        uint _over = over(_amount);\n', '        if (_over > 0) {\n', '            if (_over > credit()) {\n', '                _over = credit();\n', '            }\n', '            if (_over > 0) {\n', '                Controller(controller).withdraw(address(this), _over);\n', '                repayAll();\n', '            }\n', '        }\n', '    }\n', '    \n', '    function rebalance() external {\n', '        _rebalance(0);\n', '    }\n', '    \n', '    function claimInsurance() external {\n', '        require(msg.sender == controller, "!controller");\n', '        token.safeTransfer(controller, insurance);\n', '        insurance = 0;\n', '    }\n', '    \n', '    function maxSafeETH() public view returns (uint maxBorrowsETH, uint totalBorrowsETH, uint availableBorrowsETH) {\n', '         (,,uint _totalBorrowsETH,,uint _availableBorrowsETH,,,) = Aave(getAave()).getUserAccountData(address(this));\n', '        uint _maxBorrowETH = (_totalBorrowsETH.add(_availableBorrowsETH));\n', '        return (_maxBorrowETH.div(healthFactor), _totalBorrowsETH, _availableBorrowsETH);\n', '    }\n', '    \n', '    function shouldBorrow() external view returns (bool) {\n', '        return (availableToBorrowReserve() > 0);\n', '    }\n', '    \n', '    function availableToBorrowETH() public view returns (uint) {\n', '        (uint _maxSafeETH,uint _totalBorrowsETH, uint _availableBorrowsETH) = maxSafeETH();\n', "        _maxSafeETH = _maxSafeETH.mul(95).div(100); // 5% buffer so we don't go into a earn/rebalance loop\n", '        if (_maxSafeETH > _totalBorrowsETH) {\n', '            return _availableBorrowsETH.mul(_maxSafeETH.sub(_totalBorrowsETH)).div(_availableBorrowsETH);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function availableToBorrowReserve() public view returns (uint) {\n', '        address _reserve = reserve();\n', '        uint _available = availableToBorrowETH();\n', '        if (_available > 0) {\n', '            return _available.mul(uint(10)**ERC20Detailed(_reserve).decimals()).div(getReservePrice());\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function getReservePrice() public view returns (uint) {\n', '        return getReservePriceETH(reserve());\n', '    }\n', '    \n', '    function getUnderlyingPrice() public view returns (uint) {\n', '        return getReservePriceETH(underlying());\n', '    }\n', '    \n', '    function earn() public {\n', '        address _reserve = reserve();\n', '        uint _borrow = availableToBorrowReserve();\n', '        if (_borrow > 0) {\n', '            Aave(getAave()).borrow(_reserve, _borrow, 2, 7);\n', '        }\n', '        //rebalance here\n', '        uint _balance = IERC20(_reserve).balanceOf(address(this));\n', '        if (_balance > 0) {\n', '            IERC20(_reserve).safeTransfer(controller, _balance);\n', '            Controller(controller).earn(address(this), _balance);\n', '        }\n', '    }\n', '    \n', '    function depositAll() external {\n', '        deposit(token.balanceOf(msg.sender));\n', '    }\n', '    \n', '    function deposit(uint _amount) public {\n', '        uint _pool = balance();\n', '        token.safeTransferFrom(msg.sender, address(this), _amount);\n', '        \n', '        // 0.5% of deposits go into an insurance fund incase of negative profits to protect withdrawals\n', '        // At a 4 health factor, this is a -2% position\n', '        uint _insurance = _amount.mul(50).div(10000);\n', '        _amount = _amount.sub(_insurance);\n', '        insurance = insurance.add(_insurance);\n', '        \n', '        \n', '        //Controller can claim insurance to liquidate to cover interest\n', '        \n', '        uint shares = 0;\n', '        if (totalSupply() == 0) {\n', '            shares = _amount;\n', '        } else {\n', '            shares = (_amount.mul(totalSupply())).div(_pool);\n', '        }\n', '        _mint(msg.sender, shares);\n', '        if (token.balanceOf(address(this))>earnLowerlimit){\n', '          earn();\n', '        }\n', '    }\n', '    \n', '    function reserve() public view returns (address) {\n', '        return Controller(controller).want(address(this));\n', '    }\n', '    \n', '    function underlying() public view returns (address) {\n', '        return AaveToken(address(token)).underlyingAssetAddress();\n', '    }\n', '    \n', '    function withdrawAll() public {\n', '        withdraw(balanceOf(msg.sender));\n', '    }\n', '    \n', '    // Calculates in impermanent lock due to debt\n', '    function maxWithdrawal(address account) public view returns (uint) {\n', '        uint _balance = balanceOf(account);\n', '        uint _safeWithdraw = _balance.mul(locked()).div(1e18);\n', '        if (_safeWithdraw > _balance) {\n', '            return _balance;\n', '        } else {\n', '            uint _diff = _balance.sub(_safeWithdraw);\n', '            return _balance.sub(_diff.mul(healthFactor)); // technically 150%, not 200%, but adding buffer\n', '        }\n', '    }\n', '    \n', '    function safeWithdraw() external {\n', '        withdraw(maxWithdrawal(msg.sender));\n', '    }\n', '    \n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function withdraw(uint _shares) public {\n', '        uint r = (balance().mul(_shares)).div(totalSupply());\n', '        _burn(msg.sender, _shares);\n', '        _rebalance(r);\n', '        token.safeTransfer(msg.sender, r);\n', '    }\n', '    \n', '    function getPricePerFullShare() external view returns (uint) {\n', '        return balance().mul(1e18).div(totalSupply());\n', '    }\n', '}']