['// File: contracts/libraries/SafeMath256.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'library SafeMath256 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ILockSend.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ILockSend {\n', '    event Locksend(address indexed from,address indexed to,address token,uint amount,uint32 unlockTime);\n', '    event Unlock(address indexed from,address indexed to,address token,uint amount,uint32 unlockTime);\n', '\n', '    function lockSend(address to, uint amount, address token, uint32 unlockTime) external ;\n', '    function unlock(address from, address to, address token, uint32 unlockTime) external ;\n', '}\n', '\n', '// File: contracts/LockSend.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract LockSend is ILockSend {\n', '    using SafeMath256 for uint;\n', '\n', '    bytes4 private constant _SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));\n', '    bytes4 private constant _SELECTOR2 = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));\n', '\n', '    mapping(bytes32 => uint) public lockSendInfos;\n', '\n', '    modifier afterUnlockTime(uint32 unlockTime) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(uint(unlockTime) * 3600 < block.timestamp, "LockSend: NOT_ARRIVING_UNLOCKTIME_YET");\n', '        _;\n', '    }\n', '\n', '    modifier beforeUnlockTime(uint32 unlockTime) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(uint(unlockTime) * 3600 > block.timestamp, "LockSend: ALREADY_UNLOCKED");\n', '        _;\n', '    }\n', '\n', '    function lockSend(address to, uint amount, address token, uint32 unlockTime) public override beforeUnlockTime(unlockTime) {\n', '        require(amount != 0, "LockSend: LOCKED_AMOUNT_SHOULD_BE_NONZERO");\n', '        bytes32 key = _getLockedSendKey(msg.sender, to, token, unlockTime);\n', '        _safeTransferToMe(token, msg.sender, amount);\n', '        lockSendInfos[key] = lockSendInfos[key].add(amount);\n', '        emit Locksend(msg.sender, to, token, amount, unlockTime);\n', '    }\n', '\n', '    // anyone can call this function\n', '    function unlock(address from, address to, address token, uint32 unlockTime) public override afterUnlockTime(unlockTime) {\n', '        bytes32 key = _getLockedSendKey(from, to, token, unlockTime);\n', '        uint amount = lockSendInfos[key];\n', '        require(amount != 0, "LockSend: UNLOCK_AMOUNT_SHOULD_BE_NONZERO");\n', '        delete lockSendInfos[key];\n', '        _safeTransfer(token, to, amount);\n', '        emit Unlock(from, to, token, amount, unlockTime);\n', '    }\n', '\n', '    function _getLockedSendKey(address from, address to, address token, uint32 unlockTime) private pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(from, to, token, unlockTime));\n', '    }\n', '\n', '    function _safeTransferToMe(address token, address from, uint value) internal {\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR2, from, address(this), value));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "LockSend: TRANSFER_TO_ME_FAILED");\n', '    }\n', '\n', '    function _safeTransfer(address token, address to, uint value) internal {\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR, to, value));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "LockSend: TRANSFER_FAILED");\n', '    }\n', '}']