['pragma solidity 0.6.12;\n', '\n', '// SPDX-License-Identifier: BSD-3-Clause\n', '\n', '/**\n', ' * Development Fund Lock Till 6 Months Release 5%\n', ' *\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '    address public pendingOwner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '    \n', '    /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    assert(msg.sender != address(0));\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    pendingOwner = _newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    _transferOwnership(pendingOwner);\n', '    pendingOwner = address(0);\n', '  }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface token {\n', '    function transfer(address, uint) external returns (bool);\n', '}\n', '\n', 'contract TokenLock is Ownable {\n', '    \n', '\n', '    address public constant beneficiary = 0x1Cb48D072A5Df6fE62AE79cCbF1B83288e44257E;\n', '\n', '    \n', '    // unlock timestamp in seconds (Apr 4 2021 UTC)\n', '    uint public constant unlockTime = 1617511156;\n', '\n', '    function isUnlocked() public view returns (bool) {\n', '        return now > unlockTime;\n', '    }\n', '    \n', '    function claim(address _tokenAddr, uint _amount) public onlyOwner {\n', '        require(isUnlocked(), "Cannot transfer tokens while locked.");\n', '        token(_tokenAddr).transfer(beneficiary, _amount);\n', '    }\n', '}']