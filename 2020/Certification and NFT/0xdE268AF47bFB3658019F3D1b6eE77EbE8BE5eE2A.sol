['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IStrategyV2 {\n', '    function approve(IERC20 _token) external;\n', '\n', '    function approveForSpender(IERC20 _token, address spender) external;\n', '\n', '    // Deposit tokens to a farm to yield more tokens.\n', '    function deposit(uint256 _poolId, uint256 _amount) external;\n', '\n', '    // Claim farming tokens\n', '    function claim(uint256 _poolId) external;\n', '\n', '    // The vault request to harvest the profit\n', '    function harvest(uint256 _bankPoolId, uint256 _poolId) external;\n', '\n', '    // Withdraw the principal from a farm.\n', '    function withdraw(uint256 _poolId, uint256 _amount) external;\n', '\n', '    // Set 0 to disable quota (no limit)\n', '    function poolQuota(uint256 _poolId) external view returns (uint256);\n', '\n', '    // Use when we want to switch between strategies\n', '    function forwardToAnotherStrategy(address _dest, uint256 _amount) external returns (uint256);\n', '\n', '    // Source LP token of this strategy\n', '    function getLpToken() external view returns(address);\n', '\n', '    // Target farming token of this strategy by vault\n', '    function getTargetToken(uint256 _poolId) external view returns(address);\n', '\n', '    function balanceOf(uint256 _poolId) external view returns (uint256);\n', '\n', '    function pendingReward(uint256 _poolId) external view returns (uint256);\n', '\n', '    // Helper function, Should never use it on-chain.\n', '    // Return 1e18x of APY. _lpPairUsdcPrice = current lpPair price (1-wei in USDC-wei) multiple by 1e18\n', '    function expectedAPY(uint256 _poolId, uint256 _lpPairUsdcPrice) external view returns (uint256);\n', '\n', '    function governanceRescueToken(IERC20 _token) external returns (uint256);\n', '}\n', '\n', '/*\n', ' * Here we have a list of constants. In order to get access to an address\n', ' * managed by ValueVaultMaster, the calling contract should copy and define\n', ' * some of these constants and use them as keys.\n', ' * Keys themselves are immutable. Addresses can be immutable or mutable.\n', ' *\n', ' * Vault addresses are immutable once set, and the list may grow:\n', ' * K_VAULT_WETH = 0;\n', ' * K_VAULT_ETH_USDC_UNI_V2_LP = 1;\n', ' * K_VAULT_ETH_WBTC_UNI_V2_LP = 2;\n', ' *\n', ' * Strategy addresses are mutable:\n', ' * K_STRATEGY_WETH_SODA_POOL = 0;\n', ' * K_STRATEGY_WETH_MULTI_POOL = 1;\n', ' * K_STRATEGY_ETHUSDC_MULTIPOOL = 100;\n', ' * K_STRATEGY_ETHWBTC_MULTIPOOL = 200;\n', ' */\n', '/*\n', ' * ValueVaultMaster manages all the vaults and strategies of our Value Vaults system.\n', ' */\n', 'contract ValueVaultMaster {\n', '    address public governance;\n', '\n', '    address public bank;\n', '    address public minorPool;\n', '    address public profitSharer;\n', '\n', '    address public govToken; // VALUE\n', '    address public yfv; // When harvesting, convert some parts to YFV for govVault\n', '    address public usdc; // we only used USDC to estimate APY\n', '\n', '    address public govVault; // YFV -> VALUE, vUSD, vETH and 6.7% profit from Value Vaults\n', '    address public insuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\n', '    address public performanceReward = 0x7Be4D5A99c903C437EC77A20CB6d0688cBB73c7f; // set to deploy wallet at start\n', '\n', '    uint256 public constant FEE_DENOMINATOR = 10000;\n', '    uint256 public govVaultProfitShareFee = 670; // 6.7% | VIP-1 (https://yfv.finance/vip-vote/vip_1)\n', '    uint256 public gasFee = 50; // 0.5% at start and can be set by governance decision\n', '\n', '    uint256 public minStakeTimeToClaimVaultReward = 24 hours;\n', '\n', '    mapping(address => bool) public isVault;\n', '    mapping(uint256 => address) public vaultByKey;\n', '\n', '    mapping(address => bool) public isStrategy;\n', '    mapping(uint256 => address) public strategyByKey;\n', '    mapping(address => uint256) public strategyQuota;\n', '\n', '    constructor(address _govToken, address _yfv, address _usdc) public {\n', '        govToken = _govToken;\n', '        yfv = _yfv;\n', '        usdc = _usdc;\n', '        governance = tx.origin;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    // Immutable once set.\n', '    function setBank(address _bank) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(bank == address(0));\n', '        bank = _bank;\n', '    }\n', '\n', '    // Mutable in case we want to upgrade the pool.\n', '    function setMinorPool(address _minorPool) external {\n', '        require(msg.sender == governance, "!governance");\n', '        minorPool = _minorPool;\n', '    }\n', '\n', '    // Mutable in case we want to upgrade this module.\n', '    function setProfitSharer(address _profitSharer) external {\n', '        require(msg.sender == governance, "!governance");\n', '        profitSharer = _profitSharer;\n', '    }\n', '\n', '    // Mutable, in case governance want to upgrade VALUE to new version\n', '    function setGovToken(address _govToken) external {\n', '        require(msg.sender == governance, "!governance");\n', '        govToken = _govToken;\n', '    }\n', '\n', '    // Immutable once added, and you can always add more.\n', '    function addVault(uint256 _key, address _vault) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(vaultByKey[_key] == address(0), "vault: key is taken");\n', '\n', '        isVault[_vault] = true;\n', '        vaultByKey[_key] = _vault;\n', '    }\n', '\n', '    // Mutable and removable.\n', '    function addStrategy(uint256 _key, address _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        isStrategy[_strategy] = true;\n', '        strategyByKey[_key] = _strategy;\n', '    }\n', '\n', '    // Set 0 to disable quota (no limit)\n', '    function setStrategyQuota(address _strategy, uint256 _quota) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategyQuota[_strategy] = _quota;\n', '    }\n', '\n', '    function removeStrategy(uint256 _key) external {\n', '        require(msg.sender == governance, "!governance");\n', '        isStrategy[strategyByKey[_key]] = false;\n', '        delete strategyByKey[_key];\n', '    }\n', '\n', '    function setGovVault(address _govVault) public {\n', '        require(msg.sender == governance, "!governance");\n', '        govVault = _govVault;\n', '    }\n', '\n', '    function setInsuranceFund(address _insuranceFund) public {\n', '        require(msg.sender == governance, "!governance");\n', '        insuranceFund = _insuranceFund;\n', '    }\n', '\n', '    function setPerformanceReward(address _performanceReward) public{\n', '        require(msg.sender == governance, "!governance");\n', '        performanceReward = _performanceReward;\n', '    }\n', '\n', '    function setGovVaultProfitShareFee(uint256 _govVaultProfitShareFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        govVaultProfitShareFee = _govVaultProfitShareFee;\n', '    }\n', '\n', '    function setGasFee(uint256 _gasFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        gasFee = _gasFee;\n', '    }\n', '\n', '    function setMinStakeTimeToClaimVaultReward(uint256 _minStakeTimeToClaimVaultReward) public {\n', '        require(msg.sender == governance, "!governance");\n', '        minStakeTimeToClaimVaultReward = _minStakeTimeToClaimVaultReward;\n', '    }\n', '\n', '    /**\n', '     * This function allows governance to take unsupported tokens out of the contract.\n', '     * This is in an effort to make someone whole, should they seriously mess up.\n', '     * There is no guarantee governance will vote to return these.\n', '     * It also allows for removal of airdropped tokens.\n', '     */\n', '    function governanceRecoverUnsupported(IERC20x _token, uint256 amount, address to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.transfer(to, amount);\n', '    }\n', '}\n', '\n', 'interface IERC20x {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IOneSplit {\n', '    function getExpectedReturn(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 flags // See constants in IOneSplit.sol\n', '    ) external view returns(\n', '        uint256 returnAmount,\n', '        uint256[] memory distribution\n', '    );\n', '}\n', '\n', 'interface IUniswapRouter {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '}\n', '\n', 'interface IValueLiquidPool {\n', '    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '    function getDenormalizedWeight(address) external view returns (uint);\n', '    function getBalance(address) external view returns (uint);\n', '    function swapFee() external view returns (uint);\n', '}\n', '\n', 'interface IStakingRewards {\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '    function rewardPerToken() external view returns (uint256);\n', '    function rewardRate() external view returns (uint256);\n', '    function earned(address account) external view returns (uint256);\n', '    function getRewardForDuration() external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function stake(uint256 amount) external;\n', '    function withdraw(uint256 amount) external;\n', '    function getReward() external;\n', '    function exit() external;\n', '}\n', '\n', 'interface ISushiPool {\n', '    function deposit(uint256 _poolId, uint256 _amount) external;\n', '    function claim(uint256 _poolId) external;\n', '    function withdraw(uint256 _poolId, uint256 _amount) external;\n', '    function emergencyWithdraw(uint256 _poolId) external;\n', '}\n', '\n', 'interface IProfitSharer {\n', '    function shareProfit() external returns (uint256);\n', '}\n', '\n', 'interface IValueVaultBank {\n', '    function make_profit(uint256 _poolId, uint256 _amount) external;\n', '}\n', '\n', '// Deposit UNIv2ETHUSDC to a standard StakingRewards pool (eg. UNI Pool - https://app.uniswap.org/#/uni)\n', '// Wait for Vault commands: deposit, withdraw, claim, harvest (can be called by public via Vault)\n', 'contract Univ2ETHUSDCMultiPoolStrategy is IStrategyV2 {\n', '    using SafeMath for uint256;\n', '\n', '    address public strategist;\n', '    address public governance;\n', '\n', '    uint256 public constant FEE_DENOMINATOR = 10000;\n', '\n', '    IERC20 public weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IOneSplit public onesplit = IOneSplit(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n', '    IUniswapRouter public unirouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    ValueVaultMaster public valueVaultMaster;\n', '    IERC20 public lpPair; // ETHUSDC_UNIv2\n', '    IERC20 public lpPairTokenA; // USDC\n', '    IERC20 public lpPairTokenB; // For this contract it will be always be WETH\n', '\n', '    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\n', '    mapping(address => mapping(address => address)) public liquidPools; // [input -> output] => value_liquid_pool (valueliquid.io)\n', '\n', '    struct PoolInfo {\n', '        address vault;\n', '        IERC20 targetToken;\n', '        address targetPool;\n', '        uint256 targetPoolId; // poolId in soda/chicken pool (no use for IStakingRewards pool eg. golff.finance)\n', '        uint256 minHarvestForTakeProfit;\n', '        uint8 poolType; // 0: IStakingRewards, 1: ISushiPool, 2: ISodaPool\n', '        uint256 poolQuota; // set 0 to disable quota (no limit)\n', '        uint256 balance;\n', '    }\n', '\n', '    mapping(uint256 => PoolInfo) public poolMap; // poolIndex -> poolInfo\n', '    uint256 public totalBalance;\n', '\n', '    bool public aggressiveMode; // will try to stake all lpPair tokens available (be forwarded from bank or from another strategies)\n', '\n', '    uint8[] public poolPreferredIds; // sorted by preference\n', '\n', '    // lpPair: ETHUSDC_UNIv2 = 0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\n', '    // lpPairTokenA: USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n', '    // lpPairTokenB: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    constructor(ValueVaultMaster _valueVaultMaster,\n', '                IERC20 _lpPair,\n', '                IERC20 _lpPairTokenA,\n', '                IERC20 _lpPairTokenB,\n', '                bool _aggressiveMode) public {\n', '        valueVaultMaster = _valueVaultMaster;\n', '        lpPair = _lpPair;\n', '        lpPairTokenA = _lpPairTokenA;\n', '        lpPairTokenB = _lpPairTokenB;\n', '        aggressiveMode = _aggressiveMode;\n', '        governance = tx.origin;\n', '        strategist = tx.origin;\n', '        // Approve all\n', '        lpPair.approve(valueVaultMaster.bank(), type(uint256).max);\n', '        lpPairTokenA.approve(address(unirouter), type(uint256).max);\n', '        lpPairTokenB.approve(address(unirouter), type(uint256).max);\n', '    }\n', '\n', '    // [0] targetToken: uniToken = 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\n', '    //     targetPool: ETHUSDCUniPool = 0x7fba4b8dc5e7616e59622806932dbea72537a56b\n', '    // [1] targetToken: draculaToken = 0xb78B3320493a4EFaa1028130C5Ba26f0B6085Ef8\n', '    //     targetPool: MasterVampire[32] = 0xD12d68Fd52b54908547ebC2Cd77Ec6EbbEfd3099\n', '    //     targetPoolId = 32\n', '    function setPoolInfo(uint256 _poolId, address _vault, IERC20 _targetToken, address _targetPool, uint256 _targetPoolId, uint256 _minHarvestForTakeProfit, uint8 _poolType, uint256 _poolQuota) external {\n', '        require(msg.sender == governance, "!governance");\n', '        poolMap[_poolId].vault = _vault;\n', '        poolMap[_poolId].targetToken = _targetToken;\n', '        poolMap[_poolId].targetPool = _targetPool;\n', '        poolMap[_poolId].targetPoolId = _targetPoolId;\n', '        poolMap[_poolId].minHarvestForTakeProfit = _minHarvestForTakeProfit;\n', '        poolMap[_poolId].poolType = _poolType;\n', '        poolMap[_poolId].poolQuota = _poolQuota;\n', '        _targetToken.approve(address(unirouter), type(uint256).max);\n', '        lpPair.approve(_vault, type(uint256).max);\n', '        lpPair.approve(address(_targetPool), type(uint256).max);\n', '    }\n', '\n', '    function approve(IERC20 _token) external override {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.approve(valueVaultMaster.bank(), type(uint256).max);\n', '        _token.approve(address(unirouter), type(uint256).max);\n', '    }\n', '\n', '    function approveForSpender(IERC20 _token, address spender) external override {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.approve(spender, type(uint256).max);\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setPoolPreferredIds(uint8[] memory _poolPreferredIds) public {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        delete poolPreferredIds;\n', '        for (uint8 i = 0; i < _poolPreferredIds.length; ++i) {\n', '            poolPreferredIds.push(_poolPreferredIds[i]);\n', '        }\n', '    }\n', '\n', '    function setMinHarvestForTakeProfit(uint256 _poolId, uint256 _minHarvestForTakeProfit) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        poolMap[_poolId].minHarvestForTakeProfit = _minHarvestForTakeProfit;\n', '    }\n', '\n', '    function setPoolQuota(uint256 _poolId, uint256 _poolQuota) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        poolMap[_poolId].poolQuota = _poolQuota;\n', '    }\n', '\n', '    // Sometime the balance could be slightly changed (due to the pool, or because we call xxxByGov methods)\n', '    function setPoolBalance(uint256 _poolId, uint256 _balance) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        poolMap[_poolId].balance = _balance;\n', '    }\n', '\n', '    function setTotalBalance(uint256 _totalBalance) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        totalBalance = _totalBalance;\n', '    }\n', '\n', '    function setAggressiveMode(bool _aggressiveMode) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        aggressiveMode = _aggressiveMode;\n', '    }\n', '\n', '    function setWETH(IERC20 _weth) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        weth = _weth;\n', '    }\n', '\n', '    function setOnesplit(IOneSplit _onesplit) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        onesplit = _onesplit;\n', '    }\n', '\n', '    function setUnirouter(IUniswapRouter _unirouter) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        unirouter = _unirouter;\n', '        lpPairTokenA.approve(address(unirouter), type(uint256).max);\n', '        lpPairTokenB.approve(address(unirouter), type(uint256).max);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-deposit}.\n', '     */\n', '    function deposit(uint256 _poolId, uint256 _amount) public override {\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        require(pool.vault == msg.sender, "sender not vault");\n', '        if (aggressiveMode) {\n', '            _amount = lpPair.balanceOf(address(this));\n', '        }\n', '        if (pool.poolType == 0) {\n', '            IStakingRewards(pool.targetPool).stake(_amount);\n', '        } else {\n', '            ISushiPool(pool.targetPool).deposit(pool.targetPoolId, _amount);\n', '        }\n', '        pool.balance = pool.balance.add(_amount);\n', '        totalBalance = totalBalance.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-claim}.\n', '     */\n', '    function claim(uint256 _poolId) external override {\n', '        require(poolMap[_poolId].vault == msg.sender, "sender not vault");\n', '        _claim(_poolId);\n', '\n', '    }\n', '\n', '    function _claim(uint256 _poolId) internal {\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        if (pool.poolType == 0) {\n', '            IStakingRewards(pool.targetPool).getReward();\n', '        } else if (pool.poolType == 1) {\n', '            ISushiPool(pool.targetPool).deposit(pool.targetPoolId, 0);\n', '        } else {\n', '            ISushiPool(pool.targetPool).claim(pool.targetPoolId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-withdraw}.\n', '     */\n', '    function withdraw(uint256 _poolId, uint256 _amount) external override {\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        require(pool.vault == msg.sender, "sender not vault");\n', '        if (pool.poolType == 0) {\n', '            IStakingRewards(pool.targetPool).withdraw(_amount);\n', '        } else {\n', '            ISushiPool(pool.targetPool).withdraw(pool.targetPoolId, _amount);\n', '        }\n', '        if (pool.balance < _amount) {\n', '            _amount = pool.balance;\n', '        }\n', '        pool.balance = pool.balance - _amount;\n', '        if (totalBalance >= _amount) totalBalance = totalBalance - _amount;\n', '    }\n', '\n', '    function depositByGov(address pool, uint8 _poolType, uint256 _targetPoolId, uint256 _amount) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        if (_poolType == 0) {\n', '            IStakingRewards(pool).stake(_amount);\n', '        } else {\n', '            ISushiPool(pool).deposit(_targetPoolId, _amount);\n', '        }\n', '    }\n', '\n', '    function claimByGov(address pool, uint8 _poolType, uint256 _targetPoolId) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        if (_poolType == 0) {\n', '            IStakingRewards(pool).getReward();\n', '        } else if (_poolType == 1) {\n', '            ISushiPool(pool).deposit(_targetPoolId, 0);\n', '        } else {\n', '            ISushiPool(pool).claim(_targetPoolId);\n', '        }\n', '    }\n', '\n', '    function withdrawByGov(address pool, uint8 _poolType, uint256 _targetPoolId, uint256 _amount) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        if (_poolType == 0) {\n', '            IStakingRewards(pool).withdraw(_amount);\n', '        } else {\n', '            ISushiPool(pool).withdraw(_targetPoolId, _amount);\n', '        }\n', '    }\n', '\n', '    function emergencyWithdrawByGov(address pool, uint256 _targetPoolId) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        ISushiPool(pool).emergencyWithdraw(_targetPoolId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-poolQuota}.\n', '     */\n', '    function poolQuota(uint256 _poolId) external override view returns (uint256) {\n', '        return poolMap[_poolId].poolQuota;\n', '    }\n', '\n', '    function forwardToAnotherStrategy(address _dest, uint256 _amount) external override returns (uint256 sent) {\n', '        require(valueVaultMaster.isVault(msg.sender), "not vault");\n', '        require(valueVaultMaster.isStrategy(_dest), "not strategy");\n', '        require(IStrategyV2(_dest).getLpToken() == address(lpPair), "!lpPair");\n', '        uint256 lpPairBal = lpPair.balanceOf(address(this));\n', '        sent = (_amount < lpPairBal) ? _amount : lpPairBal;\n', '        lpPair.transfer(_dest, sent);\n', '    }\n', '\n', '    function setUnirouterPath(address _input, address _output, address [] memory _path) public {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        uniswapPaths[_input][_output] = _path;\n', '    }\n', '\n', '    function setLiquidPool(address _input, address _output, address _pool) public {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance && !strategist");\n', '        liquidPools[_input][_output] = _pool;\n', '        IERC20(_input).approve(_pool, type(uint256).max);\n', '    }\n', '\n', '    function _swapTokens(address _input, address _output, uint256 _amount) internal {\n', '        address _pool = liquidPools[_input][_output];\n', '        if (_pool != address(0)) { // use ValueLiquid\n', '            // swapExactAmountIn(tokenIn, tokenAmountIn, tokenOut, minAmountOut, maxPrice)\n', '            IValueLiquidPool(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\n', '        } else { // use Uniswap\n', '            address[] memory path = uniswapPaths[_input][_output];\n', '            if (path.length == 0) {\n', '                // path: _input -> _output\n', '                path = new address[](2);\n', '                path[0] = _input;\n', '                path[1] = _output;\n', '            }\n', '            // swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline)\n', '            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\n', '        }\n', '    }\n', '\n', '    function _addLiquidity() internal {\n', '        // addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline)\n', '        unirouter.addLiquidity(address(lpPairTokenA), address(lpPairTokenB), lpPairTokenA.balanceOf(address(this)), lpPairTokenB.balanceOf(address(this)), 1, 1, address(this), now.add(1800));\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-harvest}.\n', '     */\n', '    function harvest(uint256 _bankPoolId, uint256 _poolId) external override {\n', '        address bank = valueVaultMaster.bank();\n', '        address _vault = msg.sender;\n', '        require(valueVaultMaster.isVault(_vault), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        PoolInfo storage pool = poolMap[_poolId];\n', '        _claim(_poolId);\n', '\n', '        IERC20 targetToken = pool.targetToken;\n', '        uint256 targetTokenBal = targetToken.balanceOf(address(this));\n', '\n', '        if (targetTokenBal < pool.minHarvestForTakeProfit) return;\n', '\n', '        _swapTokens(address(targetToken), address(weth), targetTokenBal);\n', '        uint256 wethBal = weth.balanceOf(address(this));\n', '\n', '        if (wethBal > 0) {\n', '            uint256 _reserved = 0;\n', '            uint256 _gasFee = 0;\n', '            uint256 _govVaultProfitShareFee = 0;\n', '\n', '            if (valueVaultMaster.gasFee() > 0) {\n', '                _gasFee = wethBal.mul(valueVaultMaster.gasFee()).div(FEE_DENOMINATOR);\n', '                _reserved = _reserved.add(_gasFee);\n', '            }\n', '\n', '            if (valueVaultMaster.govVaultProfitShareFee() > 0) {\n', '                _govVaultProfitShareFee = wethBal.mul(valueVaultMaster.govVaultProfitShareFee()).div(FEE_DENOMINATOR);\n', '                _reserved = _reserved.add(_govVaultProfitShareFee);\n', '            }\n', '\n', '            uint256 wethToBuyTokenA = wethBal.sub(_reserved).div(2); // we have TokenB (WETH) already, so use 1/2 bal to buy TokenA (USDC)\n', '\n', '            _swapTokens(address(weth), address(lpPairTokenA), wethToBuyTokenA);\n', '            _addLiquidity();\n', '\n', '            wethBal = weth.balanceOf(address(this));\n', '\n', '            {\n', '                address profitSharer = valueVaultMaster.profitSharer();\n', '                address performanceReward = valueVaultMaster.performanceReward();\n', '\n', '                if (_gasFee > 0 && performanceReward != address(0)) {\n', '                    if (_gasFee.add(_govVaultProfitShareFee) < wethBal) {\n', '                        _gasFee = wethBal.sub(_govVaultProfitShareFee);\n', '                    }\n', '                    weth.transfer(performanceReward, _gasFee);\n', '                    wethBal = weth.balanceOf(address(this));\n', '                }\n', '\n', '                if (_govVaultProfitShareFee > 0 && profitSharer != address(0)) {\n', '                    address govToken = valueVaultMaster.govToken();\n', '                    _swapTokens(address(weth), govToken, wethBal);\n', '                    IERC20(govToken).transfer(profitSharer, IERC20(govToken).balanceOf(address(this)));\n', '                    IProfitSharer(profitSharer).shareProfit();\n', '                }\n', '            }\n', '\n', '            uint256 balanceLeft = lpPair.balanceOf(address(this));\n', '            if (balanceLeft > 0) {\n', '                if (_bankPoolId == type(uint256).max) {\n', '                    // this called by governance of vault, send directly to bank (dont make profit)\n', '                    lpPair.transfer(bank, balanceLeft);\n', '                } else {\n', '                    if (lpPair.allowance(address(this), bank) < balanceLeft) {\n', '                        lpPair.approve(bank, 0);\n', '                        lpPair.approve(bank, balanceLeft);\n', '                    }\n', '                    IValueVaultBank(bank).make_profit(_bankPoolId, balanceLeft);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-getLpToken}.\n', '     */\n', '    function getLpToken() external view override returns(address) {\n', '        return address(lpPair);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IStrategyV2-getTargetToken}.\n', '     */\n', '    function getTargetToken(uint256 _poolId) external override view returns(address) {\n', '        return address(poolMap[_poolId].targetToken);\n', '    }\n', '\n', '    function balanceOf(uint256 _poolId) public override view returns (uint256) {\n', '        return poolMap[_poolId].balance;\n', '    }\n', '\n', '    // Only support IStakingRewards pool\n', '    function pendingReward(uint256 _poolId) public override view returns (uint256) {\n', '        if (poolMap[_poolId].poolType != 0) return 0; // do not support other pool types\n', '        return IStakingRewards(poolMap[_poolId].targetPool).earned(address(this));\n', '    }\n', '\n', '    // Helper function, Should never use it on-chain.\n', '    // Return 1e18x of APY. _lpPairUsdcPrice = current lpPair price (1-wei in USDC-wei) multiple by 1e18\n', '    function expectedAPY(uint256, uint256) public override view returns (uint256) {\n', '        return 0; // not implemented\n', '    }\n', '\n', '    /**\n', '     * @dev if there is any token stuck we will need governance support to rescue the fund\n', '     */\n', '    function governanceRescueToken(IERC20 _token) external override returns (uint256 balance) {\n', '        address bank = valueVaultMaster.bank();\n', '        require(bank == msg.sender, "sender not bank");\n', '\n', '        balance = _token.balanceOf(address(this));\n', '        _token.transfer(bank, balance);\n', '    }\n', '\n', '    event ExecuteTransaction(address indexed target, uint value, string signature, bytes data);\n', '\n', '    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public returns (bytes memory) {\n', '        require(msg.sender == governance, "!governance");\n', '\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n', '        require(success, "Univ2ETHUSDCMultiPoolStrategy::executeTransaction: Transaction execution reverted.");\n', '\n', '        emit ExecuteTransaction(target, value, signature, data);\n', '\n', '        return returnData;\n', '    }\n', '}']