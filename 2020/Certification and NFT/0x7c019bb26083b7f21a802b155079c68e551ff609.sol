['// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: contracts\\standalone\\IERC1155Views.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\n', ' * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\n', ' */\n', 'interface IERC1155Views {\n', '\n', '    /**\n', '     * @dev Returns the total supply of the given token id\n', '     * @param objectId the id of the token whose availability you want to know \n', '     */\n', '    function totalSupply(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the name of the given token id\n', '     * @param objectId the id of the token whose name you want to know \n', '     */\n', '    function name(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the given token id\n', '     * @param objectId the id of the token whose symbol you want to know \n', '     */\n', '    function symbol(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals of the given token id\n', '     * @param objectId the id of the token whose decimals you want to know \n', '     */\n', '    function decimals(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the uri of the given token id\n', '     * @param objectId the id of the token whose uri you want to know \n', '     */\n', '    function uri(uint256 objectId) external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\standalone\\IERC20NFTWrapper.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IERC20NFTWrapper is IERC20 {\n', '    function init(uint256 objectId) external;\n', '\n', '    function mainWrapper() external view returns (address);\n', '\n', '    function objectId() external view returns (uint256);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function mint(address owner, uint256 amount) external;\n', '\n', '    function burn(address owner, uint256 amount) external;\n', '}\n', '\n', '// File: contracts\\standalone\\IERC1155Data.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC1155Data {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', '// File: contracts\\standalone\\ISuperSaiyanToken.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ISuperSaiyanToken is IERC1155, IERC1155Receiver, IERC1155Views, IERC1155Data {\n', '    function init(\n', '        address model,\n', '        address source,\n', '        string calldata name,\n', '        string calldata symbol\n', '    ) external;\n', '\n', '    function fromDecimals(uint256 objectId, uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function toDecimals(uint256 objectId, uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getMintData(uint256 objectId)\n', '        external\n', '        view\n', '        returns (\n', '            string memory,\n', '            string memory,\n', '            uint256\n', '        );\n', '\n', '    function getModel() external view returns (address);\n', '\n', '    function source() external view returns (address);\n', '\n', '    function asERC20(uint256 objectId) external view returns (IERC20NFTWrapper);\n', '\n', '    function mint(uint256 amount, string calldata partialUri)\n', '        external\n', '        returns (uint256, address);\n', '\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function burnBatch(\n', '        uint256[] calldata objectIds,\n', '        uint256[] calldata amounts,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    event Mint(uint256 objectId, address tokenAddress);\n', '}\n', '\n', '// File: contracts\\standalone\\voting\\IDFOSuperSaiyanToken.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IDFOSuperSaiyanToken is ISuperSaiyanToken {\n', '\n', '    function doubleProxy() external view returns(address);\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '    function setUri(uint256 objectId, string calldata uri) external;\n', '\n', '    event UriChanged(uint256 indexed objectId, string oldUri, string newUri);\n', '}\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns(address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getToken() external view returns(address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns(address);\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function setUint256(string calldata name, uint256 value) external returns(uint256);\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getBool(string calldata varName) external view returns (bool);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\Address.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: contracts\\standalone\\SuperSaiyanToken.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SuperSaiyanToken - An improved ERC1155 token with ERC20 trading capabilities.\n', ' * @dev In the SuperSaiyanToken standard, there is no a centralized storage where to save every objectId info.\n', ' * In fact every NFT data is saved in a specific ERC20 token that can also work as a standalone one, and let transfer parts of an atomic object.\n', ' * The ERC20 represents a unique Token Id, and its supply represents the entire supply of that Token Id.\n', ' * You can instantiate a SuperSaiyanToken as a brand-new one, or as a wrapper for pre-existent classic ERC1155 NFT.\n', ' * In the first case, you can introduce some particular permissions to mint new tokens.\n', ' * In the second case, you need to send your NFTs to the Wrapped SuperSaiyanToken (using the classic safeTransferFrom or safeBatchTransferFrom methods)\n', ' * and it will create a brand new ERC20 Token or mint new supply (in the case some tokens with the same id were transfered before yours).\n', ' */\n', 'contract SuperSaiyanToken is ISuperSaiyanToken, Context, ERC165 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    bytes4 internal constant _INTERFACEobjectId_ERC1155 = 0xd9b67a26;\n', '\n', '    address private _source;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '\n', '    mapping(uint256 => string) internal _objectUris;\n', '\n', '    bool private _supportsName;\n', '    bool private _supportsSymbol;\n', '    bool private _supportsDecimals;\n', '\n', '    mapping(uint256 => address) internal _dest;\n', '    mapping(address => bool) internal _isMine;\n', '\n', '    mapping(address => mapping(address => bool)) internal _operatorApprovals;\n', '\n', '    address internal _model;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * When you create a SuperSaiyanToken, you can specify if you want to create a brand new one, passing the classic data like name, symbol, amd URI,\n', '     * or wrap a pre-existent ERC1155 NFT, passing its contract address.\n', '     * You can use just one of the two modes at the same time.\n', '     * In both cases, a ERC20 token address is mandatory. It will be used as a model to be cloned for every minted NFT.\n', '     * @param model the address of the ERC20 pre-deployed model. I will not be used in the procedure, but just cloned as a brand-new one every time a new NFT is minted.\n', '     * @param source the address of the ERC1155 NFT to be wrapped. If you want to create a brand new NFT, this value must be address(0).\n', '     * @param name the name of the brand new SuperSaiyanToken to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank.\n', '     * @param symbol the symbol of the brand new SuperSaiyanToken to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank.\n', '     */\n', '    constructor(\n', '        address model,\n', '        address source,\n', '        string memory name,\n', '        string memory symbol\n', '    ) public {\n', '        if(model != address(0)) {\n', '            init(model, source, name, symbol);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Utility method which contains the logic of the constructor.\n', '     * This is a useful trick to instantiate a contract when it is cloned.\n', '     */\n', '    function init(\n', '        address model,\n', '        address source,\n', '        string memory name,\n', '        string memory symbol\n', '    ) public virtual override {\n', '        require(\n', '            _model == address(0),\n', '            "Init already called!"\n', '        );\n', '\n', '        require(\n', '            model != address(0),\n', '            "Model should be a valid ethereum address"\n', '        );\n', '        _model = model;\n', '\n', '        _source = source;\n', '\n', '        require(\n', '            _source != address(0) || keccak256(bytes(name)) != keccak256(""),\n', '            "At least a source contract or a name must be set"\n', '        );\n', '        require(\n', '            _source != address(0) || keccak256(bytes(symbol)) != keccak256(""),\n', '            "At least a source contract or a symbol must be set"\n', '        );\n', '\n', '        _registerInterface(this.onERC1155Received.selector);\n', '        _registerInterface(this.onERC1155BatchReceived.selector);\n', '        bool safeBatchTransferFrom = _checkAndInsertSelector(\n', '            this.safeBatchTransferFrom.selector\n', '        );\n', '        bool cumulativeInterface = _checkAndInsertSelector(\n', '            _INTERFACEobjectId_ERC1155\n', '        );\n', '        require(\n', '            _source == address(0) ||\n', '                safeBatchTransferFrom ||\n', '                cumulativeInterface,\n', '            "Looks like you\'re not wrapping a correct ERC1155 Token"\n', '        );\n', '        _checkAndInsertSelector(this.balanceOf.selector);\n', '        _checkAndInsertSelector(this.balanceOfBatch.selector);\n', '        _checkAndInsertSelector(this.setApprovalForAll.selector);\n', '        _checkAndInsertSelector(this.isApprovedForAll.selector);\n', '        _checkAndInsertSelector(this.safeTransferFrom.selector);\n', '        _checkAndInsertSelector(this.uri.selector);\n', '        _checkAndInsertSelector(this.totalSupply.selector);\n', '        _supportsName = _checkAndInsertSelector(0x00ad800c); //name(uint256)\n', '        _supportsSymbol = _checkAndInsertSelector(0x4e41a1fb); //symbol(uint256)\n', '        _supportsDecimals = _checkAndInsertSelector(this.decimals.selector);\n', '        _supportsDecimals = _source == address(0) ? false : _supportsDecimals;\n', '        _setAndCheckNameAndSymbol(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint\n', '     * If the SuperSaiyanToken does not wrap a pre-existent NFT, this call is used to mint new NFTs, according to the permission rules provided by the Token creator.\n', '     * @param amount The amount of tokens to be created. It must be greater than 1 unity.\n', "     * @param objectUri The Uri to locate this new token's metadata.\n", '     */\n', '    function mint(uint256 amount, string memory objectUri)\n', '        public\n', '        virtual\n', '        override\n', '        returns (uint256, address)\n', '    {\n', '        require(_source == address(0), "Cannot mint unexisting tokens");\n', '        require(\n', '            keccak256(bytes(objectUri)) != keccak256(""),\n', '            "Uri cannot be empty"\n', '        );\n', '        uint256 objectId = uint256(\n', '            keccak256(abi.encode(block.number, amount, msg.sender, objectUri))\n', '        );\n', '        _objectUris[objectId] = objectUri;\n', '        return _mint(msg.sender, objectId, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn\n', '     * You can choose to burn your NFTs.\n', '     * In case this Token wraps a pre-existent ERC1155 NFT, you will receive the wrapped NFTs.\n', '     */\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        asERC20(objectId).burn(msg.sender, toDecimals(objectId, amount));\n', '        if (_source != address(0)) {\n', '            IERC1155(_source).safeTransferFrom(\n', '                address(this),\n', '                msg.sender,\n', '                objectId,\n', '                amount,\n', '                data\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Burn Batch\n', '     * Same as burn, but for multiple NFTs at the same time\n', '     */\n', '    function burnBatch(\n', '        uint256[] memory objectIds,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        for (uint256 i = 0; i < objectIds.length; i++) {\n', '            asERC20(objectIds[i]).burn(\n', '                msg.sender,\n', '                toDecimals(objectIds[i], amounts[i])\n', '            );\n', '        }\n', '        if (_source != address(0)) {\n', '            IERC1155(_source).safeBatchTransferFrom(\n', '                address(this),\n', '                msg.sender,\n', '                objectIds,\n', '                amounts,\n', '                data\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev classic ERC-1155 onERC1155Received hook.\n', '     * This method can be called only by the wrapped classic ERC1155 NFT, if it exists.\n', '     * Call this method means that someone transfer original NFTs to receive wrapped ones.\n', '     * So this method will provide brand new NFTs\n', '     */\n', '    function onERC1155Received(\n', '        address,\n', '        address owner,\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes memory\n', '    ) public virtual override returns (bytes4) {\n', '        require(msg.sender == _source, "Unauthorized action!");\n', '        _mint(owner, objectId, amount);\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    /**\n', '     * @dev classic ERC-1155 onERC1155BatchReceived hook.\n', '     * Same as onERC1155Received, but for multiple tokens at the same time\n', '     */\n', '    function onERC1155BatchReceived(\n', '        address,\n', '        address owner,\n', '        uint256[] memory objectIds,\n', '        uint256[] memory amounts,\n', '        bytes memory\n', '    ) public virtual override returns (bytes4) {\n', '        require(msg.sender == _source, "Unauthorized action!");\n', '        for (uint256 i = 0; i < objectIds.length; i++) {\n', '            _mint(owner, objectIds[i], amounts[i]);\n', '        }\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '\n', '    /**\n', '     * @dev this method sends the correct creation parameters for the new ERC-20 to be minted.\n', '     * It takes thata from the wrapped ERC1155 NFT or from the parameters passed at construction time.\n', '     */\n', '    function getMintData(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (\n', '            string memory name,\n', '            string memory symbol,\n', '            uint256 decimals\n', '        )\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = 18;\n', '        if (\n', '            _source != address(0) &&\n', '            (_supportsName || _supportsSymbol || _supportsDecimals)\n', '        ) {\n', '            IERC1155Views views = IERC1155Views(_source);\n', '            name = _supportsName ? views.name(objectId) : name;\n', '            symbol = _supportsSymbol ? views.symbol(objectId) : symbol;\n', '            decimals = _supportsDecimals ? views.decimals(objectId) : decimals;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev get the address of the ERC20 Contract used as a model\n', '     */\n', '    function getModel() public virtual override view returns (address) {\n', '        return _model;\n', '    }\n', '\n', '    /**\n', '     * @dev Utility method to convert from decimals notation the original NFT (if any) to the ERC20 ones.\n', '     */\n', '    function fromDecimals(uint256 objectId, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _supportsDecimals ? amount : (amount / (10**decimals(objectId)));\n', '    }\n', '\n', '    /**\n', '     * @dev Utility method to convert to decimals notation the original NFT (if any) to the ERC20 ones.\n', '     */\n', '    function toDecimals(uint256 objectId, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _supportsDecimals ? amount : (amount * (10**decimals(objectId)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the wrapped ERC1155 NFT (if any)\n', '     */\n', '    function source() public virtual override view returns (address) {\n', '        return _source;\n', '    }\n', '\n', '    /**\n', '     * @dev Gives back the address of the ERC20 Token representing this Token Id\n', '     */\n', '    function asERC20(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (IERC20NFTWrapper)\n', '    {\n', '        return IERC20NFTWrapper(_dest[objectId]);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the total supply of the given token id\n', '     * @param objectId the id of the token whose availability you want to know\n', '     */\n', '    function totalSupply(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return fromDecimals(objectId, asERC20(objectId).totalSupply());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the given token id\n', '     * @param objectId the id of the token whose name you want to know\n', '     */\n', '    function name(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return asERC20(objectId).name();\n', '    }\n', '\n', '    function name() public virtual override view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the given token id\n', '     * @param objectId the id of the token whose symbol you want to know\n', '     */\n', '    function symbol(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return asERC20(objectId).symbol();\n', '    }\n', '\n', '    function symbol() public virtual override view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the decimals of the given token id\n', '     * @param objectId the id of the token whose decimals you want to know\n', '     */\n', '    function decimals(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return asERC20(objectId).decimals();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the uri of the given token id\n', '     * @param objectId the id of the token whose uri you want to know\n', '     */\n', '    function uri(uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return\n', '            _source == address(0)\n', '                ? _objectUris[objectId]\n', '                : IERC1155Views(_source).uri(objectId);\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function balanceOf(address account, uint256 objectId)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return fromDecimals(objectId, asERC20(objectId).balanceOf(account));\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function balanceOfBatch(\n', '        address[] memory accounts,\n', '        uint256[] memory objectIds\n', '    ) public virtual override view returns (uint256[] memory) {\n', '        uint256[] memory balances = new uint256[](accounts.length);\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            balances[i] = balanceOf(accounts[i], objectIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function setApprovalForAll(address operator, bool approved)\n', '        public\n', '        virtual\n', '        override\n', '    {\n', '        address sender = _msgSender();\n', '        require(\n', '            sender != operator,\n', '            "ERC1155: setting approval status for self"\n', '        );\n', '\n', '        _operatorApprovals[sender][operator] = approved;\n', '        emit ApprovalForAll(sender, operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function isApprovedForAll(address account, address operator)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _operatorApprovals[account][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: caller is not owner nor approved"\n', '        );\n', '\n', '        address operator = _msgSender();\n', '\n', '        asERC20(objectId).transferFrom(from, to, toDecimals(objectId, amount));\n', '\n', '        emit TransferSingle(operator, from, to, objectId, amount);\n', '\n', '        _doSafeTransferAcceptanceCheck(\n', '            operator,\n', '            from,\n', '            to,\n', '            objectId,\n', '            amount,\n', '            data\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Classic ERC1155 Standard Method\n', '     */\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory objectIds,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: caller is not owner nor approved"\n', '        );\n', '\n', '        for (uint256 i = 0; i < objectIds.length; i++) {\n', '            asERC20(objectIds[i]).transferFrom(\n', '                from,\n', '                to,\n', '                toDecimals(objectIds[i], amounts[i])\n', '            );\n', '        }\n', '\n', '        address operator = _msgSender();\n', '\n', '        emit TransferBatch(operator, from, to, objectIds, amounts);\n', '\n', '        _doSafeBatchTransferAcceptanceCheck(\n', '            operator,\n', '            from,\n', '            to,\n', '            objectIds,\n', '            amounts,\n', '            data\n', '        );\n', '    }\n', '\n', '    function _doSafeTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 amount,\n', '        bytes memory data\n', '    ) internal virtual {\n', '        if (to.isContract()) {\n', '            try\n', '                IERC1155Receiver(to).onERC1155Received(\n', '                    operator,\n', '                    from,\n', '                    id,\n', '                    amount,\n', '                    data\n', '                )\n', '            returns (bytes4 response) {\n', '                if (\n', '                    response != IERC1155Receiver(to).onERC1155Received.selector\n', '                ) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _doSafeBatchTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    ) internal virtual {\n', '        if (to.isContract()) {\n', '            try\n', '                IERC1155Receiver(to).onERC1155BatchReceived(\n', '                    operator,\n', '                    from,\n', '                    ids,\n', '                    amounts,\n', '                    data\n', '                )\n', '            returns (bytes4 response) {\n', '                if (\n', '                    response !=\n', '                    IERC1155Receiver(to).onERC1155BatchReceived.selector\n', '                ) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _checkAndInsertSelector(bytes4 selector)\n', '        internal\n', '        virtual\n', '        returns (bool response)\n', '    {\n', '        if (_source == address(0)) {\n', '            _registerInterface(selector);\n', '            return true;\n', '        }\n', '        try ERC165(_source).supportsInterface(selector) returns (bool res) {\n', '            if (response = res) {\n', '                _registerInterface(selector);\n', '            }\n', '        } catch {}\n', '    }\n', '\n', '    function _clone(address original) internal returns (address copy) {\n', '        assembly {\n', '            mstore(\n', '                0,\n', '                or(\n', '                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\n', '                    mul(original, 0x1000000000000000000)\n', '                )\n', '            )\n', '            copy := create(0, 0, 32)\n', '            switch extcodesize(copy)\n', '                case 0 {\n', '                    invalid()\n', '                }\n', '        }\n', '    }\n', '\n', '    function _mint(\n', '        address from,\n', '        uint256 objectId,\n', '        uint256 amount\n', '    ) internal virtual returns (uint256, address) {\n', '        IERC20NFTWrapper wrapper = IERC20NFTWrapper(_dest[objectId]);\n', '        if (_dest[objectId] == address(0)) {\n', '            require(\n', '                amount > _getTokenUnity(objectId),\n', '                "You need to pass more than a token"\n', '            );\n', '            (wrapper = IERC20NFTWrapper(_dest[objectId] = _clone(getModel())))\n', '                .init(objectId);\n', '            _isMine[_dest[objectId] = address(wrapper)] = true;\n', '            emit Mint(objectId, address(wrapper));\n', '        }\n', '        wrapper.mint(from, _convertForMint(objectId, amount));\n', '        return (objectId, address(wrapper));\n', '    }\n', '\n', '    function _getTokenUnity(uint256 objectId)\n', '        internal\n', '        virtual\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_source == address(0)) {\n', '            return (10**18);\n', '        }\n', '        if (_supportsDecimals) {\n', '            return (10**IERC1155Views(_source).decimals(objectId));\n', '        }\n', '        return 1;\n', '    }\n', '\n', '    function _convertForMint(uint256 objectId, uint256 amount)\n', '        internal\n', '        virtual\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_source != address(0) && _supportsDecimals) {\n', '            return amount * (10**IERC1155Views(_source).decimals(objectId));\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function _setAndCheckNameAndSymbol(\n', '        string memory inputName,\n', '        string memory inputSymbol\n', '    ) internal virtual {\n', '        _name = inputName;\n', '        _symbol = inputSymbol;\n', '        if (_source != address(0)) {\n', '            IERC1155Data data = IERC1155Data(_source);\n', '            try data.name() returns (string memory n) {\n', '                _name = n;\n', '            } catch {}\n', '            try data.symbol() returns (string memory s) {\n', '                _symbol = s;\n', '            } catch {}\n', '        }\n', '        require(keccak256(bytes(_name)) != keccak256(""), "Name is mandatory");\n', '        require(\n', '            keccak256(bytes(_symbol)) != keccak256(""),\n', '            "Symbol is mandatory"\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts\\standalone\\voting\\DFOSuperSaiyanToken.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title DFOSuperSaiyanToken\n', ' */\n', 'contract DFOSuperSaiyanToken is IDFOSuperSaiyanToken, SuperSaiyanToken(address(0), address(0), "", "") {\n', '\n', '    address private _doubleProxy;\n', '\n', '    constructor(\n', '        address model,\n', '        address doubleProxy,\n', '        string memory name,\n', '        string memory symbol\n', '    ) public {\n', '        if(model != address(0)) {\n', '            init(model, doubleProxy, name, symbol);\n', '        }\n', '    }\n', '\n', '    function init(\n', '        address model,\n', '        address doubleProxy,\n', '        string memory name,\n', '        string memory symbol\n', '    ) public override(ISuperSaiyanToken, SuperSaiyanToken) {\n', '        super.init(model, address(0), name, symbol);\n', '        _doubleProxy = doubleProxy;\n', '    }\n', '\n', '    modifier byDFO {\n', '        if(_doubleProxy != address(0)) {\n', '            require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized Action!");\n', '        }\n', '        _;\n', '    }\n', '\n', '    function doubleProxy() public override view returns(address) {\n', '        return _doubleProxy;\n', '    }\n', '\n', '    function setDoubleProxy(address newDoubleProxy) public override byDFO {\n', '        _doubleProxy = newDoubleProxy;\n', '    }\n', '\n', '    function mint(uint256 amount, string memory objectUri)\n', '        public\n', '        virtual\n', '        override(ISuperSaiyanToken, SuperSaiyanToken)\n', '        byDFO\n', '        returns (uint256 objectId, address tokenAddress)\n', '    {\n', '        (objectId, tokenAddress) = super.mint(amount, objectUri);\n', '        emit UriChanged(objectId, "", objectUri);\n', '    }\n', '\n', '    function setUri(uint256 objectId, string memory newUri) public byDFO override {\n', '        emit UriChanged(objectId, _objectUris[objectId], newUri);\n', '        _objectUris[objectId] = newUri;\n', '    }\n', '}']