['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IDelegable.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', 'interface IDelegable {\n', '    function addDelegate(address) external;\n', '    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\n', '}\n', '\n', '// File: contracts/interfaces/IVat.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the vat contract from MakerDAO\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md\n', 'interface IVat {\n', '    // function can(address, address) external view returns (uint);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function live() external view returns (uint);\n', '    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n', '    function urns(bytes32, address) external view returns (uint, uint);\n', '    function gem(bytes32, address) external view returns (uint);\n', '    // function dai(address) external view returns (uint);\n', '    function frob(bytes32, address, address, address, int, int) external;\n', '    function fork(bytes32, address, address, int, int) external;\n', '    function move(address, address, uint) external;\n', '    function flux(bytes32, address, address, uint) external;\n', '}\n', '\n', '// File: contracts/interfaces/IWeth.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function approve(address, uint) external returns (bool) ;\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IGemJoin.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using ERC20\n', 'interface IGemJoin {\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function cage() external;\n', '    function join(address usr, uint WAD) external;\n', '    function exit(address usr, uint WAD) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDaiJoin.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using Dai\n', 'interface IDaiJoin {\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function cage() external;\n', '    function join(address usr, uint WAD) external;\n', '    function exit(address usr, uint WAD) external;\n', '}\n', '\n', '// File: contracts/interfaces/IPot.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the pot contract from MakerDao\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\n', 'interface IPot {\n', '    function chi() external view returns (uint256);\n', '    function pie(address) external view returns (uint256); // Not a function, but a public variable.\n', '    function rho() external returns (uint256);\n', '    function drip() external returns (uint256);\n', '    function join(uint256) external;\n', '    function exit(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/IChai.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '/// @dev interface for the chai contract\n', '/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\n', 'interface IChai {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address dst, uint wad) external returns (bool);\n', '    function move(address src, address dst, uint wad) external returns (bool);\n', '    function transferFrom(address src, address dst, uint wad) external returns (bool);\n', '    function approve(address usr, uint wad) external returns (bool);\n', '    function dai(address usr) external returns (uint wad);\n', '    function join(address dst, uint wad) external;\n', '    function exit(address src, uint wad) external;\n', '    function draw(address src, uint wad) external;\n', '    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n', '    function nonces(address account) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ITreasury.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ITreasury {\n', '    function debt() external view returns(uint256);\n', '    function savings() external view returns(uint256);\n', '    function pushDai(address user, uint256 dai) external;\n', '    function pullDai(address user, uint256 dai) external;\n', '    function pushChai(address user, uint256 chai) external;\n', '    function pullChai(address user, uint256 chai) external;\n', '    function pushWeth(address to, uint256 weth) external;\n', '    function pullWeth(address to, uint256 weth) external;\n', '    function shutdown() external;\n', '    function live() external view returns(bool);\n', '\n', '    function vat() external view returns (IVat);\n', '    function weth() external view returns (IWeth);\n', '    function dai() external view returns (IERC20);\n', '    function daiJoin() external view returns (IDaiJoin);\n', '    function wethJoin() external view returns (IGemJoin);\n', '    function pot() external view returns (IPot);\n', '    function chai() external view returns (IChai);\n', '}\n', '\n', '// File: contracts/interfaces/IERC2612.sol\n', '\n', '// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC2612 standard as defined in the EIP.\n', ' *\n', " * Adds the {permit} method, which can be used to change one's\n", ' * {IERC20-allowance} without having to send a transaction, by signing a\n', ' * message. This allows users to spend tokens without having to hold Ether.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-2612.\n', ' */\n', 'interface IERC2612 {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IFYDai.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', 'interface IFYDai is IERC20, IERC2612 {\n', '    function isMature() external view returns(bool);\n', '    function maturity() external view returns(uint);\n', '    function chi0() external view returns(uint);\n', '    function rate0() external view returns(uint);\n', '    function chiGrowth() external view returns(uint);\n', '    function rateGrowth() external view returns(uint);\n', '    function mature() external;\n', '    function unlocked() external view returns (uint);\n', '    function mint(address, uint) external;\n', '    function burn(address, uint) external;\n', '    function flashMint(uint, bytes calldata) external;\n', '    function redeem(address, address, uint256) external returns (uint256);\n', '    // function transfer(address, uint) external returns (bool);\n', '    // function transferFrom(address, address, uint) external returns (bool);\n', '    // function approve(address, uint) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IController.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', 'interface IController is IDelegable {\n', '    function treasury() external view returns (ITreasury);\n', '    function series(uint256) external view returns (IFYDai);\n', '    function seriesIterator(uint256) external view returns (uint256);\n', '    function totalSeries() external view returns (uint256);\n', '    function containsSeries(uint256) external view returns (bool);\n', '    function posted(bytes32, address) external view returns (uint256);\n', '    function debtFYDai(bytes32, uint256, address) external view returns (uint256);\n', '    function debtDai(bytes32, uint256, address) external view returns (uint256);\n', '    function totalDebtDai(bytes32, address) external view returns (uint256);\n', '    function isCollateralized(bytes32, address) external view returns (bool);\n', '    function inDai(bytes32, uint256, uint256) external view returns (uint256);\n', '    function inFYDai(bytes32, uint256, uint256) external view returns (uint256);\n', '    function erase(bytes32, address) external returns (uint256, uint256);\n', '    function shutdown() external;\n', '    function post(bytes32, address, address, uint256) external;\n', '    function withdraw(bytes32, address, address, uint256) external;\n', '    function borrow(bytes32, uint256, address, address, uint256) external;\n', '    function repayFYDai(bytes32, uint256, address, address, uint256) external returns (uint256);\n', '    function repayDai(bytes32, uint256, address, address, uint256) external returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ILiquidations.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', 'interface ILiquidations {\n', '    function shutdown() external;\n', '    function totals() external view returns(uint128, uint128);\n', '    function erase(address) external returns(uint128, uint128);\n', '\n', '    function controller() external returns(IController);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/helpers/DecimalMath.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '/// @dev Implements simple fixed point math mul and div operations for 27 decimals.\n', 'contract DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public UNIT = 1e27;\n', '\n', '    /// @dev Multiplies x and y, assuming they are both fixed point with 27 digits.\n', '    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x.mul(y).div(UNIT);\n', '    }\n', '\n', '    /// @dev Divides x between y, assuming they are both fixed point with 27 digits.\n', '    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /// @dev Multiplies x and y, rounding up to the closest representable number.\n', '    /// Assumes x and y are both fixed point with `decimals` digits.\n', '    function muldrup(uint256 x, uint256 y) internal pure returns (uint256)\n', '    {\n', '        uint256 z = x.mul(y);\n', '        return z.mod(UNIT) == 0 ? z.div(UNIT) : z.div(UNIT).add(1);\n', '    }\n', '\n', '    /// @dev Divides x between y, rounding up to the closest representable number.\n', '    /// Assumes x and y are both fixed point with `decimals` digits.\n', '    function divdrup(uint256 x, uint256 y) internal pure returns (uint256)\n', '    {\n', '        uint256 z = x.mul(UNIT);\n', '        return z.mod(y) == 0 ? z.div(y) : z.div(y).add(1);\n', '    }\n', '}\n', '\n', '// File: contracts/helpers/Delegable.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '/// @dev Delegable enables users to delegate their account management to other users.\n', '/// Delegable implements addDelegateBySignature, to add delegates using a signature instead of a separate transaction.\n', 'contract Delegable is IDelegable {\n', '    event Delegate(address indexed user, address indexed delegate, bool enabled);\n', '\n', '    // keccak256("Signature(address user,address delegate,uint256 nonce,uint256 deadline)");\n', '    bytes32 public immutable SIGNATURE_TYPEHASH = 0x0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb7;\n', '    bytes32 public immutable DELEGABLE_DOMAIN;\n', '    mapping(address => uint) public signatureCount;\n', '\n', '    mapping(address => mapping(address => bool)) public delegated;\n', '\n', '    constructor () public {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '\n', '        DELEGABLE_DOMAIN = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", "                keccak256(bytes('Yield')),\n", "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /// @dev Require that msg.sender is the account holder or a delegate\n', '    modifier onlyHolderOrDelegate(address holder, string memory errorMessage) {\n', '        require(\n', '            msg.sender == holder || delegated[holder][msg.sender],\n', '            errorMessage\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Enable a delegate to act on the behalf of caller\n', '    function addDelegate(address delegate) public override {\n', '        _addDelegate(msg.sender, delegate);\n', '    }\n', '\n', '    /// @dev Stop a delegate from acting on the behalf of caller\n', '    function revokeDelegate(address delegate) public {\n', '        _revokeDelegate(msg.sender, delegate);\n', '    }\n', '\n', '    /// @dev Add a delegate through an encoded signature\n', '    function addDelegateBySignature(address user, address delegate, uint deadline, uint8 v, bytes32 r, bytes32 s) public override {\n', "        require(deadline >= block.timestamp, 'Delegable: Signature expired');\n", '\n', '        bytes32 hashStruct = keccak256(\n', '            abi.encode(\n', '                SIGNATURE_TYPEHASH,\n', '                user,\n', '                delegate,\n', '                signatureCount[user]++,\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DELEGABLE_DOMAIN,\n', '                hashStruct\n', '            )\n', '        );\n', '        address signer = ecrecover(digest, v, r, s);\n', '        require(\n', '            signer != address(0) && signer == user,\n', "            'Delegable: Invalid signature'\n", '        );\n', '\n', '        _addDelegate(user, delegate);\n', '    }\n', '\n', '    /// @dev Enable a delegate to act on the behalf of an user\n', '    function _addDelegate(address user, address delegate) internal {\n', '        require(!delegated[user][delegate], "Delegable: Already delegated");\n', '        delegated[user][delegate] = true;\n', '        emit Delegate(user, delegate, true);\n', '    }\n', '\n', '    /// @dev Stop a delegate from acting on the behalf of an user\n', '    function _revokeDelegate(address user, address delegate) internal {\n', '        require(delegated[user][delegate], "Delegable: Already undelegated");\n', '        delegated[user][delegate] = false;\n', '        emit Delegate(user, delegate, false);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/helpers/Orchestrated.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '/**\n', ' * @dev Orchestrated allows to define static access control between multiple contracts.\n', ' * This contract would be used as a parent contract of any contract that needs to restrict access to some methods,\n', ' * which would be marked with the `onlyOrchestrated` modifier.\n', ' * During deployment, the contract deployer (`owner`) can register any contracts that have privileged access by calling `orchestrate`.\n', ' * Once deployment is completed, `owner` should call `transferOwnership(address(0))` to avoid any more contracts ever gaining privileged access.\n', ' */\n', '\n', 'contract Orchestrated is Ownable {\n', '    event GrantedAccess(address access, bytes4 signature);\n', '\n', '    mapping(address => mapping (bytes4 => bool)) public orchestration;\n', '\n', '    constructor () public Ownable() {}\n', '\n', '    /// @dev Restrict usage to authorized users\n', '    /// @param err The error to display if the validation fails \n', '    modifier onlyOrchestrated(string memory err) {\n', '        require(orchestration[msg.sender][msg.sig], err);\n', '        _;\n', '    }\n', '\n', '    /// @dev Add orchestration\n', '    /// @param user Address of user or contract having access to this contract.\n', '    /// @param signature bytes4 signature of the function we are giving orchestrated access to.\n', '    /// It seems to me a bad idea to give access to humans, and would use this only for predictable smart contracts.\n', '    function orchestrate(address user, bytes4 signature) public onlyOwner {\n', '        orchestration[user][signature] = true;\n', '        emit GrantedAccess(user, signature);\n', '    }\n', '\n', '    /// @dev Adds orchestration for the provided function signatures\n', '    function batchOrchestrate(address user, bytes4[] memory signatures) public onlyOwner {\n', '        for (uint256 i = 0; i < signatures.length; i++) {\n', '            orchestrate(user, signatures[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Liquidations.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev The Liquidations contract allows to liquidate undercollateralized weth vaults in a reverse Dutch auction.\n', ' * Undercollateralized vaults can be liquidated by calling `liquidate`. This will result in debt and collateral records\n', ' * being read and removed from the Controller using `controller.erase`.\n', ' * Collateral from vaults can be bought with Dai using `buy`.\n', ' * Dai taken in payment will be handed over to Treasury, and collateral assets bought will be taken from Treasury as well.\n', ' */\n', 'contract Liquidations is ILiquidations, Orchestrated(), Delegable(), DecimalMath {\n', '\n', '    event Liquidation(address indexed user, uint256 started, uint256 collateral, uint256 debt);\n', '\n', '    bytes32 public constant WETH = "ETH-A";\n', '    uint256 public constant AUCTION_TIME = 3600;\n', '    uint256 public constant DUST = 25e15; // 0.025 ETH\n', '\n', '    ITreasury public treasury;\n', '    IController public override controller;\n', '\n', '    struct Vault {\n', '        uint128 collateral;\n', '        uint128 debt;\n', '    }\n', '\n', '    mapping(address => uint256) public liquidations;\n', '    mapping(address => Vault) public vaults;\n', '    Vault public override totals;\n', '\n', '    bool public live = true;\n', '\n', '    /// @dev The Liquidations constructor links it to the Treasury and Controller contracts.\n', '    constructor (\n', '        address controller_\n', '    ) public {\n', '        controller = IController(controller_);\n', '        treasury = controller.treasury();\n', '    }\n', '\n', '    /// @dev Only while Liquidations is not unwinding due to a MakerDAO shutdown.\n', '    modifier onlyLive() {\n', '        require(live == true, "Controller: Not available during unwind");\n', '        _;\n', '    }\n', '\n', '    /// @dev Overflow-protected addition, from OpenZeppelin\n', '    function add(uint128 a, uint128 b)\n', '        internal pure returns (uint128)\n', '    {\n', '        uint128 c = a + b;\n', '        require(c >= a, "Liquidations: Addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /// @dev Overflow-protected substraction, from OpenZeppelin\n', '    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n', '        require(b <= a, "Liquidations: Substraction overflow");\n', '        uint128 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /// @dev Safe casting from uint256 to uint128\n', '    function toUint128(uint256 x) internal pure returns(uint128) {\n', '        require(\n', '            x <= type(uint128).max,\n', '            "Liquidations: Cast overflow"\n', '        );\n', '        return uint128(x);\n', '    }\n', '\n', '    /// @dev Disables buying at liquidations. To be called only when Treasury shuts down.\n', '    function shutdown() public override {\n', '        require(\n', '            treasury.live() == false,\n', '            "Liquidations: Treasury is live"\n', '        );\n', '        live = false;\n', '    }\n', '\n', '\n', '    /// @dev Return if the debt of an user is between zero and the dust level\n', '    /// @param user Address of the user vault\n', '    function aboveDustOrZero(address user) public view returns (bool) {\n', '        uint256 collateral = vaults[user].collateral;\n', '        return collateral == 0 || DUST < collateral;\n', '    }\n', '\n', '    /// @dev Starts a liquidation process for an undercollateralized vault.\n', '    /// @param user Address of the user vault to liquidate.\n', '    function liquidate(address user)\n', '        public onlyLive\n', '    {\n', '        require(\n', '            !controller.isCollateralized(WETH, user),\n', '            "Liquidations: Vault is not undercollateralized"\n', '        );\n', "        // A user in liquidation can be liquidated again, but doesn't restart the auction clock\n", '        // solium-disable-next-line security/no-block-members\n', '        if (liquidations[user] == 0) liquidations[user] = now;\n', '\n', '        (uint256 userCollateral, uint256 userDebt) = controller.erase(WETH, user);\n', '        totals = Vault({\n', '            collateral: add(totals.collateral, toUint128(userCollateral)),\n', '            debt: add(totals.debt, toUint128(userDebt))\n', '        });\n', '\n', '        Vault memory vault = Vault({ // TODO: Test a user that is liquidated twice\n', '            collateral: add(vaults[user].collateral, toUint128(userCollateral)),\n', '            debt: add(vaults[user].debt, toUint128(userDebt))\n', '        });\n', '        vaults[user] = vault;\n', '\n', '        emit Liquidation(user, now, userCollateral, userDebt);\n', '    }\n', '\n', '    /// @dev Buy a portion of a position under liquidation.\n', '    /// The caller pays the debt of `user`, and `from` receives an amount of collateral.\n', '    /// `from` can delegate to other addresses to buy for him. Also needs to use `ERC20.approve`.\n', '    /// @param liquidated Address of the user vault to liquidate.\n', '    /// @param from Address of the wallet paying Dai for liquidated collateral.\n', '    /// @param to Address of the wallet to send the obtained collateral to.\n', '    /// @param daiAmount Amount of Dai to give in exchange for liquidated collateral.\n', '    /// @return The amount of collateral obtained.\n', '    function buy(address from, address to, address liquidated, uint256 daiAmount)\n', '        public onlyLive\n', '        onlyHolderOrDelegate(from, "Controller: Only Holder Or Delegate")\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            vaults[liquidated].debt > 0,\n', '            "Liquidations: Vault is not in liquidation"\n', '        );\n', '        treasury.pushDai(from, daiAmount);\n', '\n', '        // calculate collateral to grab. Using divdrup stops rounding from leaving 1 stray wei in vaults.\n', '        uint256 tokenAmount = divdrup(daiAmount, price(liquidated));\n', '\n', '        totals = Vault({\n', '            collateral: sub(totals.collateral, toUint128(tokenAmount)),\n', '            debt: sub(totals.debt, toUint128(daiAmount))\n', '        });\n', '\n', '        Vault memory vault = Vault({\n', '            collateral: sub(vaults[liquidated].collateral, toUint128(tokenAmount)),\n', '            debt: sub(vaults[liquidated].debt, toUint128(daiAmount))\n', '        });\n', '        vaults[liquidated] = vault;\n', '\n', '        if (vaults[liquidated].debt == 0) delete liquidations[liquidated];\n', '\n', '        treasury.pullWeth(to, tokenAmount);\n', '\n', '        require(\n', '            aboveDustOrZero(liquidated),\n', '            "Liquidations: Below dust"\n', '        );\n', '\n', '        return tokenAmount;\n', '    }\n', '\n', '    /// @dev Retrieve weth from a liquidations account. This weth could be a remainder from liquidations.\n', '    /// If any weth is not withdrawn, it will be auctioned if the user gets liquidated again.\n', '    /// `from` can delegate to other addresses to withdraw from him.\n', '    /// @param from Address of the liquidations user vault to withdraw weth from.\n', '    /// @param to Address of the wallet receiving the withdrawn weth.\n', '    /// @param tokenAmount Amount of Weth to withdraw.\n', '    function withdraw(address from, address to, uint256 tokenAmount)\n', '        public onlyLive\n', '        onlyHolderOrDelegate(from, "Controller: Only Holder Or Delegate")\n', '    {\n', '        Vault storage vault = vaults[from];\n', '        require(\n', '            vault.debt == 0,\n', '            "Liquidations: User still in liquidation"\n', '        );\n', '\n', '        totals.collateral = sub(totals.collateral, toUint128(tokenAmount));\n', '        vault.collateral = sub(vault.collateral, toUint128(tokenAmount));\n', '\n', '        treasury.pullWeth(to, tokenAmount);\n', '    }\n', '\n', '    /// @dev Removes all collateral and debt for an user.\n', '    /// This function can only be called by other Yield contracts, not users directly.\n', '    /// @param user Address of the user vault\n', '    /// @return The amounts of collateral and debt removed from Liquidations.\n', '    function erase(address user)\n', '        public override\n', '        onlyOrchestrated("Liquidations: Not Authorized")\n', '        returns (uint128, uint128)\n', '    {\n', '        Vault storage vault = vaults[user];\n', '        uint128 collateral = vault.collateral;\n', '        uint128 debt = vault.debt;\n', '\n', '        totals = Vault({\n', '            collateral: sub(totals.collateral, collateral),\n', '            debt: sub(totals.debt, debt)\n', '        });\n', '        delete vaults[user];\n', '\n', '        return (collateral, debt);\n', '    }\n', '\n', '    /// @dev Return price of a collateral unit, in dai, at the present moment, for a given user\n', '    /// @param user Address of the user vault in liquidation.\n', '    // dai = price * collateral\n', '    //\n', '    //                collateral      1      min(auction, elapsed)\n', '    // price = 1 / (------------- * (--- + -----------------------))\n', '    //                   debt         2       2 * auction\n', '    function price(address user) public view returns (uint256) {\n', '        require(\n', '            liquidations[user] > 0,\n', '            "Liquidations: Vault is not targeted"\n', '        );\n', '        uint256 dividend1 = uint256(vaults[user].collateral);\n', '        uint256 divisor1 = uint256(vaults[user].debt);\n', '        uint256 term1 = dividend1.mul(UNIT).div(divisor1);\n', '        uint256 dividend3 = Math.min(AUCTION_TIME, now - liquidations[user]); // - unlikely to overflow\n', '        uint256 divisor3 = AUCTION_TIME.mul(2);\n', '        uint256 term2 = UNIT.div(2);\n', '        uint256 term3 = dividend3.mul(UNIT).div(divisor3);\n', '        return divd(UNIT, muld(term1, term2 + term3)); // + unlikely to overflow\n', '    }\n', '}']