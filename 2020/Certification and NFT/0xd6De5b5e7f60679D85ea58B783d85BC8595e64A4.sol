['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/balancer/IBPool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', 'interface IBPool {\n', '\n', '    function isPublicSwap() external view returns (bool);\n', '    function isFinalized() external view returns (bool);\n', '    function isBound(address t) external view returns (bool);\n', '    function getNumTokens() external view returns (uint);\n', '    function getCurrentTokens() external view returns (address[] memory tokens);\n', '    function getFinalTokens() external view returns (address[] memory tokens);\n', '    function getDenormalizedWeight(address token) external view returns (uint);\n', '    function getTotalDenormalizedWeight() external view returns (uint);\n', '    function getNormalizedWeight(address token) external view returns (uint);\n', '    function getBalance(address token) external view returns (uint);\n', '    function getSwapFee() external view returns (uint);\n', '    function getController() external view returns (address);\n', '\n', '    function setSwapFee(uint swapFee) external;\n', '    function setController(address manager) external;\n', '    function setPublicSwap(bool public_) external;\n', '    function finalize() external;\n', '    function bind(address token, uint balance, uint denorm) external;\n', '    function rebind(address token, uint balance, uint denorm) external;\n', '    function unbind(address token) external;\n', '    function gulp(address token) external;\n', '\n', '    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        address tokenOut,\n', '        uint minAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint maxAmountIn,\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n', '\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '\n', '    function joinswapPoolAmountOut(\n', '        address tokenIn,\n', '        uint poolAmountOut,\n', '        uint maxAmountIn\n', '    ) external returns (uint tokenAmountIn);\n', '\n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint poolAmountIn,\n', '        uint minAmountOut\n', '    ) external returns (uint tokenAmountOut);\n', '\n', '    function exitswapExternAmountOut(\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPoolAmountIn\n', '    ) external returns (uint poolAmountIn);\n', '\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function allowance(address src, address dst) external view returns (uint);\n', '\n', '    function approve(address dst, uint amt) external returns (bool);\n', '    function transfer(address dst, uint amt) external returns (bool);\n', '    function transferFrom(\n', '        address src, address dst, uint amt\n', '    ) external returns (bool);\n', '\n', '    function calcSpotPrice(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint swapFee\n', '    ) external pure returns (uint spotPrice);\n', '\n', '    function calcOutGivenIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '\n', '    function calcInGivenOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '\n', '    function calcPoolOutGivenSingleIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountOut);\n', '\n', '    function calcSingleInGivenPoolOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '\n', '    function calcSingleOutGivenPoolIn(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '\n', '    function calcPoolInGivenSingleOut(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountIn);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/balancer/IBFactory.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', 'interface IBFactory {\n', '\n', '    function isBPool(address pool) external view returns (bool);\n', '    function newBPool() external returns (address);\n', '\n', '}\n', '\n', '// File: contracts/other/ProxyStorage.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', 'contract ProxyStorage {\n', '\n', '    function readBool(bytes32 _key) public view returns(bool) {\n', '        return storageRead(_key) == bytes32(uint256(1));\n', '    }\n', '\n', '    function setBool(bytes32 _key, bool _value) internal {\n', '        if(_value) {\n', '            storageSet(_key, bytes32(uint256(1)));\n', '        } else {\n', '            storageSet(_key, bytes32(uint256(0)));\n', '        }\n', '    }\n', '\n', '    function readAddress(bytes32 _key) public view returns(address) {\n', '        return bytes32ToAddress(storageRead(_key));\n', '    }\n', '\n', '    function setAddress(bytes32 _key, address _value) internal {\n', '        storageSet(_key, addressToBytes32(_value));\n', '    }\n', '\n', '    function storageRead(bytes32 _key) public view returns(bytes32) {\n', '        bytes32 value;\n', '        //solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            value := sload(_key)\n', '        }\n', '        return value;\n', '    }\n', '\n', '    function storageSet(bytes32 _key, bytes32 _value) internal {\n', '        // targetAddress = _address;  // No!\n', '        bytes32 implAddressStorageKey = _key;\n', '        //solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            sstore(implAddressStorageKey, _value)\n', '        }\n', '    }\n', '\n', '    function bytes32ToAddress(bytes32 _value) public pure returns(address) {\n', '        return address(uint160(uint256(_value)));\n', '    }\n', '\n', '    function addressToBytes32(address _value) public pure returns(bytes32) {\n', '        return bytes32(uint256(_value));\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/other/Proxy.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', 'contract Proxy is ProxyStorage {\n', '\n', '    bytes32 constant IMPLEMENTATION_SLOT = keccak256(abi.encodePacked("IMPLEMENTATION_SLOT"));\n', '    bytes32 constant OWNER_SLOT = keccak256(abi.encodePacked("OWNER_SLOT"));\n', '\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == readAddress(OWNER_SLOT), "Proxy.onlyProxyOwner: msg sender not owner");\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        setAddress(OWNER_SLOT, msg.sender);\n', '    }\n', '\n', '    function getProxyOwner() public view returns (address) {\n', '       return readAddress(OWNER_SLOT);\n', '    }\n', '\n', '    function setProxyOwner(address _newOwner) onlyProxyOwner public {\n', '        setAddress(OWNER_SLOT, _newOwner);\n', '    }\n', '\n', '    function getImplementation() public view returns (address) {\n', '        return readAddress(IMPLEMENTATION_SLOT);\n', '    }\n', '\n', '    function setImplementation(address _newImplementation) onlyProxyOwner public {\n', '        setAddress(IMPLEMENTATION_SLOT, _newImplementation);\n', '    }\n', '\n', '\n', '    fallback () external payable {\n', '       return internalFallback();\n', '    }\n', '\n', '    receive () payable external {\n', '        return internalFallback();\n', '    }\n', '    function internalFallback() internal virtual {\n', '        address contractAddr = readAddress(IMPLEMENTATION_SLOT);\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize())\n', '            let result := delegatecall(gas(), contractAddr, ptr, calldatasize(), 0, 0)\n', '            let size := returndatasize()\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/other/ProxyPausable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', 'contract ProxyPausable is Proxy {\n', '\n', '    bytes32 constant PAUSED_SLOT = keccak256(abi.encodePacked("PAUSED_SLOT"));\n', '    bytes32 constant PAUZER_SLOT = keccak256(abi.encodePacked("PAUZER_SLOT"));\n', '\n', '    constructor() Proxy() public {\n', '        setAddress(PAUZER_SLOT, msg.sender);\n', '    }\n', '\n', '    modifier onlyPauzer() {\n', '        require(msg.sender == readAddress(PAUZER_SLOT), "ProxyPausable.onlyPauzer: msg sender not pauzer");\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(!readBool(PAUSED_SLOT), "ProxyPausable.notPaused: contract is paused");\n', '        _;\n', '    }\n', '\n', '    function getPauzer() public view returns (address) {\n', '        return readAddress(PAUZER_SLOT);\n', '    }\n', '\n', '    function setPauzer(address _newPauzer) public onlyProxyOwner{\n', '        setAddress(PAUZER_SLOT, _newPauzer);\n', '    }\n', '\n', '    function renouncePauzer() public onlyPauzer {\n', '        setAddress(PAUZER_SLOT, address(0));\n', '    }\n', '\n', '    function getPaused() public view returns (bool) {\n', '        return readBool(PAUSED_SLOT);\n', '    }\n', '\n', '    function setPaused(bool _value) public onlyPauzer {\n', '        setBool(PAUSED_SLOT, _value);\n', '    }\n', '\n', '    function internalFallback() internal virtual override notPaused {\n', '        super.internalFallback();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ISmartPool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', 'interface ISmartPool is IERC20{\n', '\n', '    function getJoinFeeRatio() external view returns (uint256,uint256);\n', '\n', '    function getExitFeeRatio() external view returns (uint256,uint256);\n', '\n', '    function joinPool(address user,uint256 _amount) external;\n', '\n', '    function exitPool(address user,uint256 _amount) external;\n', '\n', '    function getController() external view returns (address);\n', '\n', '    function getTokens() external view returns (address[] memory);\n', '\n', '    function calcTokensForAmount(uint256 _amount) external view returns (address[] memory tokens, uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/other/ReentryProtection.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', 'contract ReentryProtection {\n', '  bytes32 public constant rpSlot = keccak256("ReentryProtection.storage.location");\n', '\n', '  struct rps {\n', '    uint256 lockCounter;\n', '  }\n', '\n', '  modifier denyReentry {\n', '    lrps().lockCounter++;\n', '    uint256 lockValue = lrps().lockCounter;\n', '    _;\n', '    require(lockValue == lrps().lockCounter, "ReentryProtection.noReentry: reentry detected");\n', '  }\n', '\n', '  function lrps() internal pure returns (rps storage s) {\n', '    bytes32 loc = rpSlot;\n', '    assembly {\n', '      s_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/KFToken.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', '\n', '\n', '\n', 'contract KFToken is Context,IERC20{\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowances;\n', '  uint256 private _totalSupply;\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  function _init(string memory name,string memory symbol,uint8 decimals)internal virtual{\n', '    _name=name;\n', '    _symbol=symbol;\n', '    _decimals=decimals;\n', '  }\n', '  /**\n', '   * @dev Returns the name of the token.\n', '   */\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the symbol of the token, usually a shorter version of the\n', '   * name.\n', '   */\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of decimals used to get its user representation.\n', '   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '   *\n', '   * Tokens usually opt for a value of 18, imitating the relationship between\n', '   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '   * called.\n', '   *\n', '   * NOTE: This information is only used for _display_ purposes: it in\n', '   * no way affects any of the arithmetic of the contract, including\n', '   * {IERC20-balanceOf} and {IERC20-transfer}.\n', '   */\n', '  function decimals() public view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-totalSupply}.\n', '   */\n', '  function totalSupply() public view override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-balanceOf}.\n', '   */\n', '  function balanceOf(address account) public view override returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '  /**\n', '       * @dev See {IERC20-transfer}.\n', '       *\n', '       * Requirements:\n', '       *\n', '       * - `recipient` cannot be the zero address.\n', '       * - the caller must have a balance of at least `amount`.\n', '       */\n', '  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '    _transfer(_msgSender(), recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-allowance}.\n', '   */\n', '  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-approve}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '    _approve(_msgSender(), spender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-transferFrom}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance. This is not\n', '   * required by the EIP. See the note at the beginning of {ERC20};\n', '   *\n', '   * Requirements:\n', '   * - `sender` and `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', "   * - the caller must have allowance for ``sender``'s tokens of at least\n", '   * `amount`.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '    require(\n', '      _msgSender() == sender || amount <= _allowances[sender][_msgSender()],\n', '      "ERR_KFTOKEN_BAD_CALLER"\n', '    );\n', '    _transfer(sender, recipient, amount);\n', '    if (_msgSender() != sender && _allowances[sender][_msgSender()] != uint256(-1)) {\n', '      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   * - `spender` must have allowance for the caller of at least\n', '   * `subtractedValue`.\n', '   */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '   *\n', '   * This is internal function is equivalent to {transfer}, and can be used to\n', '   * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `sender` cannot be the zero address.\n', '   * - `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', '   */\n', '  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '    require(sender != address(0), "ERC20: transfer from the zero address");\n', '    require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '    _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '    _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '    _balances[recipient] = _balances[recipient].add(amount);\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '\n', '  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '   * the total supply.\n', '   *\n', '   * Emits a {Transfer} event with `from` set to the zero address.\n', '   *\n', '   * Requirements\n', '   *\n', '   * - `to` cannot be the zero address.\n', '   */\n', '  function _mint(address account, uint256 amount) internal virtual {\n', '    require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '    _beforeTokenTransfer(address(0), account, amount);\n', '\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Destroys `amount` tokens from `account`, reducing the\n', '   * total supply.\n', '   *\n', '   * Emits a {Transfer} event with `to` set to the zero address.\n', '   *\n', '   * Requirements\n', '   *\n', '   * - `account` cannot be the zero address.\n', '   * - `account` must have at least `amount` tokens.\n', '   */\n', '  function _burn(address account, uint256 amount) internal virtual {\n', '    require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '    _beforeTokenTransfer(account, address(0), amount);\n', '\n', '    _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '   *\n', '   * This internal function is equivalent to `approve`, and can be used to\n', '   * e.g. set automatic allowances for certain subsystems, etc.\n', '   *\n', '   * Emits an {Approval} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `owner` cannot be the zero address.\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '    require(owner != address(0), "ERC20: approve from the zero address");\n', '    require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    _allowances[owner][spender] = amount;\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Hook that is called before any transfer of tokens. This includes\n', '   * minting and burning.\n', '   *\n', '   * Calling conditions:\n', '   *\n', "   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '   * will be to transferred to `to`.\n', '   * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '   * - `from` and `to` are never both zero.\n', '   *\n', '   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '   */\n', '  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/pools/BasicSmartPool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'abstract contract BasicSmartPool is KFToken, ISmartPool,ReentryProtection{\n', '\n', '  address internal _controller;\n', '\n', '  uint256 internal _cap;\n', '\n', '  struct Fee{\n', '    uint256 ratio;\n', '    uint256 denominator;\n', '  }\n', '\n', '  Fee internal _joinFeeRatio=Fee({ratio:0,denominator:1});\n', '  Fee internal _exitFeeRatio=Fee({ratio:0,denominator:1});\n', '\n', '  event ControllerChanged(address indexed previousController, address indexed newController);\n', '  event JoinFeeRatioChanged(address indexed setter, uint256 oldRatio, uint256 oldDenominator,uint256 newRatio, uint256 newDenominator);\n', '  event ExitFeeRatioChanged(address indexed setter, uint256 oldRatio, uint256 oldDenominator,uint256 newRatio, uint256 newDenominator);\n', '  event CapChanged(address indexed setter, uint256 oldCap, uint256 newCap);\n', '  event PoolJoined(address indexed sender,address indexed from, uint256 amount);\n', '  event PoolExited(address indexed sender,address indexed from, uint256 amount);\n', '  event TokensApproved(address indexed sender,address indexed to, uint256 amount);\n', '\n', '  modifier onlyController() {\n', '    require(msg.sender == _controller, "BasicSmartPool.onlyController: not controller");\n', '    _;\n', '  }\n', '  modifier withinCap() {\n', '    _;\n', '    require(totalSupply() <= _cap, "BasicSmartPool.withinCap: Cap limit reached");\n', '  }\n', '\n', '  function _init(string memory name,string memory symbol,uint8 decimals) internal override {\n', '    super._init(name,symbol,decimals);\n', '    emit ControllerChanged(_controller, msg.sender);\n', '    _controller = msg.sender;\n', '  }\n', '\n', '  function getController() external override view returns (address){\n', '    return _controller;\n', '  }\n', '\n', '  function setController(address controller) external onlyController denyReentry {\n', '    emit ControllerChanged(_controller, controller);\n', '    _controller= controller;\n', '  }\n', '\n', '  function getJoinFeeRatio() external override view returns (uint256,uint256){\n', '    return (_joinFeeRatio.ratio,_joinFeeRatio.denominator);\n', '  }\n', '\n', '  function setJoinFeeRatio(uint256 ratio,uint256 denominator) external onlyController denyReentry {\n', '    require(ratio>=0&&denominator>0&&ratio<=denominator,"BasicSmartPool.setJoinFeeRatio: joinFeeRatio must be >=0 and denominator>0 and ratio<=denominator");\n', '    emit JoinFeeRatioChanged(msg.sender, _joinFeeRatio.ratio,_joinFeeRatio.denominator, ratio,denominator);\n', '    _joinFeeRatio = Fee({\n', '      ratio:ratio,\n', '      denominator:denominator\n', '    });\n', '  }\n', '\n', '  function getExitFeeRatio() external override view returns (uint256,uint256){\n', '    return (_exitFeeRatio.ratio,_exitFeeRatio.denominator);\n', '  }\n', '\n', '  function setExitFeeRatio(uint256 ratio,uint256 denominator) external onlyController denyReentry {\n', '    require(ratio>=0&&denominator>0&&ratio<=denominator,"BasicSmartPoolsetExitFeeRatio: exitFeeRatio must be >=0 and denominator>0 and ratio<=denominator");\n', '    emit ExitFeeRatioChanged(msg.sender, _exitFeeRatio.ratio,_exitFeeRatio.denominator, ratio,denominator);\n', '    _exitFeeRatio = Fee({\n', '      ratio:ratio,\n', '      denominator:denominator\n', '    });\n', '  }\n', '\n', '  function setCap(uint256 cap) external onlyController denyReentry {\n', '    emit CapChanged(msg.sender, _cap, cap);\n', '    _cap = cap;\n', '  }\n', '\n', '  function getCap() external view returns (uint256) {\n', '    return _cap;\n', '  }\n', '\n', '  function approveTokens() public virtual denyReentry{\n', '\n', '  }\n', '\n', '  function getTokens() external override view returns (address[] memory){\n', '    return _getTokens();\n', '  }\n', '\n', '  function _getTokens()internal  virtual view returns (address[] memory tokens){\n', '\n', '  }\n', '  function getTokenWeight(address token) public virtual view returns(uint256 weight){\n', '\n', '  }\n', '  function joinPool(address user,uint256 amount) external override withinCap denyReentry{\n', '    _joinPool(amount);\n', '    emit PoolJoined(msg.sender,user, amount);\n', '  }\n', '\n', '  function exitPool(address user,uint256 amount) external override denyReentry{\n', '    _exitPool(amount);\n', '    emit PoolExited(msg.sender,user, amount);\n', '  }\n', '\n', '  function _joinPool(uint256 amount) internal virtual{\n', '\n', '  }\n', '\n', '  function _exitPool(uint256 amount) internal virtual{\n', '\n', '  }\n', '}\n', '\n', '// File: contracts/other/BMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', 'library BMath {\n', '  uint256 internal constant BONE = 10**18;\n', '\n', '  // Add two numbers together checking for overflows\n', '  function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "ERR_ADD_OVERFLOW");\n', '    return c;\n', '  }\n', '\n', '  // subtract two numbers and return diffecerence when it underflows\n', '  function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\n', '    if (a >= b) {\n', '      return (a - b, false);\n', '    } else {\n', '      return (b - a, true);\n', '    }\n', '  }\n', '\n', '  // Subtract two numbers checking for underflows\n', '  function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    (uint256 c, bool flag) = bsubSign(a, b);\n', '    require(!flag, "ERR_SUB_UNDERFLOW");\n', '    return c;\n', '  }\n', '\n', '  // Multiply two 18 decimals numbers\n', '  function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c0 = a * b;\n', '    require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '    uint256 c1 = c0 + (BONE / 2);\n', '    require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '    uint256 c2 = c1 / BONE;\n', '    return c2;\n', '  }\n', '\n', '  // Divide two 18 decimals numbers\n', '  function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0, "ERR_DIV_ZERO");\n', '    uint256 c0 = a * BONE;\n', '    require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '    uint256 c1 = c0 + (b / 2);\n', '    require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '    uint256 c2 = c1 / b;\n', '    return c2;\n', '  }\n', '}\n', '\n', '// File: contracts/pools/BalLiquiditySmartPool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', '\n', '\n', 'contract BalLiquiditySmartPool is BasicSmartPool{\n', '\n', '  using BMath for uint256;\n', '\n', '  IBPool private _bPool;\n', '  address private _publicSwapSetter;\n', '  address private _tokenBinder;\n', '\n', '  event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\n', '  event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\n', '  event PublicSwapSetterChanged(address indexed previousSetter, address indexed newSetter);\n', '  event TokenBinderChanged(address indexed previousTokenBinder, address indexed newTokenBinder);\n', '  event PublicSwapSet(address indexed setter, bool indexed value);\n', '  event SwapFeeSet(address indexed setter, uint256 newFee);\n', '\n', '  modifier ready() {\n', '    require(address(_bPool) != address(0), "BalLiquiditySmartPool.ready: not ready");\n', '    _;\n', '  }\n', '\n', '  modifier onlyPublicSwapSetter() {\n', '    require(msg.sender == _publicSwapSetter, "BalLiquiditySmartPool.onlyPublicSwapSetter: not public swap setter");\n', '    _;\n', '  }\n', '\n', '  modifier onlyTokenBinder() {\n', '    require(msg.sender == _tokenBinder, "BalLiquiditySmartPool.onlyTokenBinder: not token binder");\n', '    _;\n', '  }\n', '\n', '  function init(\n', '    address bPool,\n', '    string calldata name,\n', '    string calldata symbol,\n', '    uint256 initialSupply\n', '  ) external {\n', '    require(address(_bPool) == address(0), "BalLiquiditySmartPool.init: already initialised");\n', '    require(bPool != address(0), "BalLiquiditySmartPool.init: bPool cannot be 0x00....000");\n', '    require(initialSupply != 0, "BalLiquiditySmartPool.init: initialSupply can not zero");\n', '    super._init(name,symbol,18);\n', '    _bPool = IBPool(bPool);\n', '    _publicSwapSetter = msg.sender;\n', '    _tokenBinder = msg.sender;\n', '    _mint(msg.sender,initialSupply);\n', '    emit PoolJoined(msg.sender,msg.sender, initialSupply);\n', '  }\n', '\n', '\n', '  function setPublicSwapSetter(address newPublicSwapSetter) external onlyController denyReentry {\n', '    emit PublicSwapSetterChanged(_publicSwapSetter, newPublicSwapSetter);\n', '    _publicSwapSetter = newPublicSwapSetter;\n', '  }\n', '  function getPublicSwapSetter() external view returns (address) {\n', '    return _publicSwapSetter;\n', '  }\n', '\n', '  function setTokenBinder(address newTokenBinder) external onlyController denyReentry {\n', '    emit TokenBinderChanged(_tokenBinder, newTokenBinder);\n', '    _tokenBinder = newTokenBinder;\n', '  }\n', '\n', '  function getTokenBinder() external view returns (address) {\n', '    return _tokenBinder;\n', '  }\n', '  function setPublicSwap(bool isPublic) external onlyPublicSwapSetter denyReentry {\n', '    emit PublicSwapSet(msg.sender, isPublic);\n', '    _bPool.setPublicSwap(isPublic);\n', '  }\n', '\n', '  function isPublicSwap() external view returns (bool) {\n', '    return _bPool.isPublicSwap();\n', '  }\n', '\n', '  function setSwapFee(uint256 swapFee) external onlyController denyReentry {\n', '    emit SwapFeeSet(msg.sender, swapFee);\n', '    _bPool.setSwapFee(swapFee);\n', '  }\n', '\n', '\n', '  function getSwapFee() external view returns (uint256) {\n', '    return _bPool.getSwapFee();\n', '  }\n', '\n', '  function getBPool() external view returns (address) {\n', '    return address(_bPool);\n', '  }\n', '\n', '  function _getTokens() internal override view returns (address[] memory){\n', '    return _bPool.getCurrentTokens();\n', '  }\n', '  function getTokenWeight(address token) public override view returns(uint256 weight){\n', '    weight=_bPool.getDenormalizedWeight(token);\n', '    return weight;\n', '  }\n', '  function calcTokensForAmount(uint256 amount) external override view returns (address[] memory tokens, uint256[] memory amounts){\n', '    tokens = _bPool.getCurrentTokens();\n', '    amounts = new uint256[](tokens.length);\n', '    uint256 ratio = amount.bdiv(totalSupply());\n', '    for (uint256 i = 0; i < tokens.length; i++) {\n', '      address token = tokens[i];\n', '      uint256 bal = _bPool.getBalance(token);\n', '      uint256 _amount = ratio.bmul(bal);\n', '      amounts[i] = _amount;\n', '    }\n', '  }\n', '  function approveTokens() public override denyReentry {\n', '    address[] memory tokens = _getTokens();\n', '    for (uint256 i = 0; i < tokens.length; i++) {\n', '      IERC20(tokens[i]).approve(address(_bPool), uint256(-1));\n', '    }\n', '    emit TokensApproved(msg.sender,address(_bPool),uint256(-1));\n', '  }\n', '\n', '  function _joinPool(uint256 amount) internal override ready{\n', '    uint256 poolTotal = totalSupply();\n', '    uint256 ratio = amount.bdiv(poolTotal);\n', '    require(ratio != 0,"ratio is 0");\n', '    address[] memory tokens = _bPool.getCurrentTokens();\n', '\n', '    for (uint256 i = 0; i < tokens.length; i++) {\n', '      address token = tokens[i];\n', '      uint256 bal = _bPool.getBalance(token);\n', '      uint256 tokenAmountIn = ratio.bmul(bal);\n', '      emit LOG_JOIN(msg.sender, token, tokenAmountIn);\n', '      uint256 tokenWeight = getTokenWeight(token);\n', '      require(\n', '        IERC20(token).balanceOf(address(this))>=tokenAmountIn, "BalLiquiditySmartPool.joinPool: tokenAmountIn exceeds balance"\n', '      );\n', '      _bPool.rebind(token, bal.add(tokenAmountIn), tokenWeight);\n', '    }\n', '    uint256 amountRatio=amount.div(_joinFeeRatio.denominator);\n', '    uint256 userAmount=amountRatio.mul(_joinFeeRatio.denominator-_joinFeeRatio.ratio);\n', '    if(_joinFeeRatio.ratio>0){\n', '      _mint(_controller,amount.sub(userAmount));\n', '    }\n', '    _mint(msg.sender,userAmount);\n', '  }\n', '\n', '  function _exitPool(uint256 amount) internal override ready{\n', '    uint256 poolTotal = totalSupply();\n', '    uint256 ratio = amount.bdiv(poolTotal);\n', '    require(ratio != 0,"ratio is 0");\n', '    require(balanceOf(msg.sender)>=amount,"BalLiquiditySmartPool.exitPool: Insufficient amount");\n', '    uint256 amountRatio=amount.div(_exitFeeRatio.denominator);\n', '    uint256 exitAmount=amountRatio.mul(_exitFeeRatio.denominator-_exitFeeRatio.ratio);\n', '    if(_exitFeeRatio.ratio>0){\n', '      transferFrom(msg.sender,_controller,amount.sub(exitAmount));\n', '    }\n', '    transferFrom(msg.sender,address(this),exitAmount);\n', '    _burn(address(this),exitAmount);\n', '    address[] memory tokens = _bPool.getCurrentTokens();\n', '    for (uint256 i = 0; i < tokens.length; i++) {\n', '      address token = tokens[i];\n', '      uint256 bal = _bPool.getBalance(token);\n', '      uint256 tokenAmountOut = ratio.bmul(bal);\n', '      emit LOG_EXIT(msg.sender, token, tokenAmountOut);\n', '      uint256 tokenWeight = getTokenWeight(token);\n', '      _bPool.rebind(token, bal.sub(tokenAmountOut), tokenWeight);\n', '      require(\n', '        IERC20(token).transfer(msg.sender, tokenAmountOut),\n', '        "BalLiquiditySmartPool.exitPool: transfer failed"\n', '      );\n', '    }\n', '  }\n', '\n', '  function _contains(address _needle, address[] memory _haystack) internal pure returns (bool) {\n', '    for (uint256 i = 0; i < _haystack.length; i++) {\n', '      if (_haystack[i] == _needle) {\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function bind(\n', '    address tokenAddress,\n', '    uint256 balance,\n', '    uint256 denorm\n', '  ) external onlyTokenBinder denyReentry {\n', '    IERC20 token = IERC20(tokenAddress);\n', '    require(\n', '      token.transferFrom(msg.sender, address(_bPool), balance),\n', '      "BalLiquiditySmartPool.bind: transferFrom failed"\n', '    );\n', '    token.approve(address(_bPool), uint256(-1));\n', '    _bPool.bind(tokenAddress, balance, denorm);\n', '  }\n', '\n', '  function rebind(\n', '    address tokenAddress,\n', '    uint256 balance,\n', '    uint256 denorm\n', '  ) external onlyTokenBinder denyReentry {\n', '    IERC20 token = IERC20(tokenAddress);\n', '    _bPool.gulp(tokenAddress);\n', '\n', '    uint256 oldBalance = token.balanceOf(address(_bPool));\n', '    if (balance > oldBalance) {\n', '      require(\n', '        token.transferFrom(msg.sender, address(_bPool), balance.sub(oldBalance)),\n', '        "BalLiquiditySmartPool.rebind: transferFrom failed"\n', '      );\n', '      token.approve(address(_bPool), uint256(-1));\n', '    }\n', '    _bPool.rebind(tokenAddress, balance, denorm);\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    if (tokenBalance > 0) {\n', '      require(token.transfer(msg.sender, tokenBalance), "BalLiquiditySmartPool.rebind: transfer failed");\n', '    }\n', '  }\n', '\n', '  function unbind(address tokenAddress) external onlyTokenBinder denyReentry {\n', '    IERC20 token = IERC20(tokenAddress);\n', '    _bPool.unbind(tokenAddress);\n', '\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    if (tokenBalance > 0) {\n', '      require(token.transfer(msg.sender, tokenBalance), "BalLiquiditySmartPool.unbind: transfer failed");\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/pools/BalLiquiditySmartPoolFactory.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.4;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BalLiquiditySmartPoolFactory is Ownable {\n', '\n', '  IBFactory public balancerFactory;\n', '  address public smartPoolImplementation;\n', '  mapping(address => bool) public isPool;\n', '  address[] public pools;\n', '\n', '  event SmartPoolCreated(address indexed poolAddress, string name, string symbol);\n', '\n', '  function init(address _balancerFactory) public {\n', '    require(smartPoolImplementation == address(0), "Already initialised");\n', '    balancerFactory = IBFactory(_balancerFactory);\n', '\n', '    BalLiquiditySmartPool implementation = new BalLiquiditySmartPool();\n', '    implementation.init(address(1), "IMPL", "IMPL", 1 ether);\n', '    smartPoolImplementation = address(implementation);\n', '  }\n', '\n', '  function newProxiedSmartPool(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint256 _initialSupply,\n', '    address[] memory _tokens,\n', '    uint256[] memory _amounts,\n', '    uint256[] memory _weights,\n', '    uint256 _cap\n', '  ) public onlyOwner returns (address) {\n', '    // Deploy proxy contract\n', '    ProxyPausable proxy = new ProxyPausable();\n', '\n', '    // Setup proxy\n', '    proxy.setImplementation(smartPoolImplementation);\n', '    proxy.setPauzer(msg.sender);\n', '    proxy.setProxyOwner(msg.sender);\n', '\n', '    // Setup balancer pool\n', '    address balancerPoolAddress = balancerFactory.newBPool();\n', '    IBPool bPool = IBPool(balancerPoolAddress);\n', '\n', '    for (uint256 i = 0; i < _tokens.length; i++) {\n', '      IERC20 token = IERC20(_tokens[i]);\n', '      // Transfer tokens to this contract\n', '      token.transferFrom(msg.sender, address(this), _amounts[i]);\n', '      // Approve the balancer pool\n', '      token.approve(balancerPoolAddress, uint256(-1));\n', '      // Bind tokens\n', '      bPool.bind(_tokens[i], _amounts[i], _weights[i]);\n', '    }\n', '    bPool.setController(address(proxy));\n', '\n', '    // Setup smart pool\n', '    BalLiquiditySmartPool smartPool = BalLiquiditySmartPool(address(proxy));\n', '\n', '    smartPool.init(balancerPoolAddress, _name, _symbol, _initialSupply);\n', '    smartPool.setCap(_cap);\n', '    smartPool.setPublicSwapSetter(msg.sender);\n', '    smartPool.setTokenBinder(msg.sender);\n', '    smartPool.setController(msg.sender);\n', '    smartPool.approveTokens();\n', '\n', '    isPool[address(smartPool)] = true;\n', '    pools.push(address(smartPool));\n', '    smartPool.transfer(msg.sender, _initialSupply);\n', '    emit SmartPoolCreated(address(smartPool), _name, _symbol);\n', '    return address(smartPool);\n', '  }\n', '}']