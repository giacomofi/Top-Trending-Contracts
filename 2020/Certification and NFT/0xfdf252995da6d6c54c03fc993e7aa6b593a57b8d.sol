['// File: contracts\\modules\\Ownable.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\Halt.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract Halt is Ownable {\n', '    \n', '    bool private halted = false; \n', '    \n', '    modifier notHalted() {\n', '        require(!halted,"This contract is halted");\n', '        _;\n', '    }\n', '\n', '    modifier isHalted() {\n', '        require(halted,"This contract is not halted");\n', '        _;\n', '    }\n', '    \n', '    /// @notice function Emergency situation that requires \n', '    /// @notice contribution period to stop or not.\n', '    function setHalt(bool halt) \n', '        public \n', '        onlyOwner\n', '    {\n', '        halted = halt;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\whiteList.sol\n', '\n', 'pragma solidity =0.5.16;\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint32.\n', '     */\n', 'library whiteListUint32 {\n', '    /**\n', '     * @dev add uint32 into white list.\n', '     * @param whiteList the storage whiteList.\n', '     * @param temp input value\n', '     */\n', '\n', '    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\n', '        if (!isEligibleUint32(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    /**\n', '     * @dev remove uint32 from whitelist.\n', '     */\n', '    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint256.\n', '     */\n', 'library whiteListUint256 {\n', '    // add whiteList\n', '    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\n', '        if (!isEligibleUint256(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible address.\n', '     */\n', 'library whiteListAddress {\n', '    // add whiteList\n', '    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\n', '        if (!isEligibleAddress(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\AddressWhiteList.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '    /**\n', '     * @dev Implementation of a whitelist filters a eligible address.\n', '     */\n', 'contract AddressWhiteList is Halt {\n', '\n', '    using whiteListAddress for address[];\n', '    uint256 constant internal allPermission = 0xffffffff;\n', '    uint256 constant internal allowBuyOptions = 1;\n', '    uint256 constant internal allowSellOptions = 1<<1;\n', '    uint256 constant internal allowExerciseOptions = 1<<2;\n', '    uint256 constant internal allowAddCollateral = 1<<3;\n', '    uint256 constant internal allowRedeemCollateral = 1<<4;\n', '    // The eligible adress list\n', '    address[] internal whiteList;\n', '    mapping(address => uint256) internal addressPermission;\n', '    /**\n', '     * @dev Implementation of add an eligible address into the whitelist.\n', '     * @param addAddress new eligible address.\n', '     */\n', '    function addWhiteList(address addAddress)public onlyOwner{\n', '        whiteList.addWhiteListAddress(addAddress);\n', '        addressPermission[addAddress] = allPermission;\n', '    }\n', '    function modifyPermission(address addAddress,uint256 permission)public onlyOwner{\n', '        addressPermission[addAddress] = permission;\n', '    }\n', '    /**\n', '     * @dev Implementation of revoke an invalid address from the whitelist.\n', '     * @param removeAddress revoked address.\n', '     */\n', '    function removeWhiteList(address removeAddress)public onlyOwner returns (bool){\n', '        addressPermission[removeAddress] = 0;\n', '        return whiteList.removeWhiteListAddress(removeAddress);\n', '    }\n', '    /**\n', '     * @dev Implementation of getting the eligible whitelist.\n', '     */\n', '    function getWhiteList()public view returns (address[] memory){\n', '        return whiteList;\n', '    }\n', '    /**\n', '     * @dev Implementation of testing whether the input address is eligible.\n', '     * @param tmpAddress input address for testing.\n', '     */    \n', '    function isEligibleAddress(address tmpAddress) public view returns (bool){\n', '        return whiteList.isEligibleAddress(tmpAddress);\n', '    }\n', '    function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){\n', '        return  (addressPermission[tmpAddress]&state) == state;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\ReentrancyGuard.sol\n', '\n', 'pragma solidity =0.5.16;\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\OptionsPool\\IOptionsPool.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IOptionsPool {\n', '//    function getOptionBalances(address user) external view returns(uint256[]);\n', '\n', '    function getExpirationList()external view returns (uint32[] memory);\n', '    function createOptions(address from,address settlement,uint256 type_ly_expiration,\n', '        uint128 strikePrice,uint128 underlyingPrice,uint128 amount,uint128 settlePrice) external returns(uint256);\n', '    function setSharedState(uint256 newFirstOption,int256[] calldata latestNetWorth,address[] calldata whiteList) external;\n', '    function getAllTotalOccupiedCollateral() external view returns (uint256,uint256);\n', '    function getCallTotalOccupiedCollateral() external view returns (uint256);\n', '    function getPutTotalOccupiedCollateral() external view returns (uint256);\n', '    function getTotalOccupiedCollateral() external view returns (uint256);\n', '//    function buyOptionCheck(uint32 expiration,uint32 underlying)external view;\n', '    function burnOptions(address from,uint256 id,uint256 amount,uint256 optionPrice)external;\n', '    function getOptionsById(uint256 optionsId)external view returns(uint256,address,uint8,uint32,uint256,uint256,uint256);\n', '    function getExerciseWorth(uint256 optionsId,uint256 amount)external view returns(uint256);\n', '    function calculatePhaseOptionsFall(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList) external view returns(int256[] memory);\n', '    function getOptionInfoLength()external view returns (uint256);\n', '    function getNetWrothCalInfo(address[] calldata whiteList)external view returns(uint256,int256[] memory);\n', '    function calRangeSharedPayment(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList)external view returns(int256[] memory,uint256[] memory,uint256);\n', '    function getNetWrothLatestWorth(address settlement)external view returns(int256);\n', '    function getBurnedFullPay(uint256 optionID,uint256 amount) external view returns(address,uint256);\n', '\n', '}\n', 'contract ImportOptionsPool is Ownable{\n', '    IOptionsPool internal _optionsPool;\n', '    function getOptionsPoolAddress() public view returns(address){\n', '        return address(_optionsPool);\n', '    }\n', '    function setOptionsPoolAddress(address optionsPool)public onlyOwner{\n', '        _optionsPool = IOptionsPool(optionsPool);\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\IFNXOracle.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IFNXOracle {\n', '    /**\n', '  * @notice retrieves price of an asset\n', '  * @dev function to get price for an asset\n', '  * @param asset Asset for which to get the price\n', '  * @return uint mantissa of asset price (scaled by 1e8) or zero if unset or contract paused\n', '  */\n', '    function getPrice(address asset) external view returns (uint256);\n', '    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\n', '    function getPrices(uint256[] calldata assets) external view returns (uint256[]memory);\n', '    function getAssetAndUnderlyingPrice(address asset,uint256 underlying) external view returns (uint256,uint256);\n', '//    function getSellOptionsPrice(address oToken) external view returns (uint256);\n', '//    function getBuyOptionsPrice(address oToken) external view returns (uint256);\n', '}\n', 'contract ImportOracle is Ownable{\n', '    IFNXOracle internal _oracle;\n', '    function oraclegetPrices(uint256[] memory assets) internal view returns (uint256[]memory){\n', '        uint256[] memory prices = _oracle.getPrices(assets);\n', '        uint256 len = assets.length;\n', '        for (uint i=0;i<len;i++){\n', '        require(prices[i] >= 100 && prices[i] <= 1e30);\n', '        }\n', '        return prices;\n', '    }\n', '    function oraclePrice(address asset) internal view returns (uint256){\n', '        uint256 price = _oracle.getPrice(asset);\n', '        require(price >= 100 && price <= 1e30);\n', '        return price;\n', '    }\n', '    function oracleUnderlyingPrice(uint256 cToken) internal view returns (uint256){\n', '        uint256 price = _oracle.getUnderlyingPrice(cToken);\n', '        require(price >= 100 && price <= 1e30);\n', '        return price;\n', '    }\n', '    function oracleAssetAndUnderlyingPrice(address asset,uint256 cToken) internal view returns (uint256,uint256){\n', '        (uint256 price1,uint256 price2) = _oracle.getAssetAndUnderlyingPrice(asset,cToken);\n', '        require(price1 >= 100 && price1 <= 1e30);\n', '        require(price2 >= 100 && price2 <= 1e30);\n', '        return (price1,price2);\n', '    }\n', '    function getOracleAddress() public view returns(address){\n', '        return address(_oracle);\n', '    }\n', '    function setOracleAddress(address oracle)public onlyOwner{\n', '        _oracle = IFNXOracle(oracle);\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\IOptionsPrice.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IOptionsPrice {\n', '    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)external view returns (uint256);\n', '    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\n', '                uint256 ivNumerator,uint8 optType)external view returns (uint256);\n', '    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) external view returns (uint256);\n', '}\n', 'contract ImportOptionsPrice is Ownable{\n', '    IOptionsPrice internal _optionsPrice;\n', '    function getOptionsPriceAddress() public view returns(address){\n', '        return address(_optionsPrice);\n', '    }\n', '    function setOptionsPriceAddress(address optionsPrice)public onlyOwner{\n', '        _optionsPrice = IOptionsPrice(optionsPrice);\n', '    }\n', '}\n', '\n', '// File: contracts\\CollateralPool\\ICollateralPool.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface ICollateralPool {\n', '    function getFeeRateAll()external view returns (uint32[] memory);\n', '    function getUserPayingUsd(address user)external view returns (uint256);\n', '    function getUserInputCollateral(address user,address collateral)external view returns (uint256);\n', '    //function getNetWorthBalance(address collateral)external view returns (int256);\n', '    function getCollateralBalance(address collateral)external view returns (uint256);\n', '\n', '    //add\n', '    function addUserPayingUsd(address user,uint256 amount)external;\n', '    function addUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function addNetWorthBalance(address collateral,int256 amount)external;\n', '    function addCollateralBalance(address collateral,uint256 amount)external;\n', '    //sub\n', '    function subUserPayingUsd(address user,uint256 amount)external;\n', '    function subUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function subNetWorthBalance(address collateral,int256 amount)external;\n', '    function subCollateralBalance(address collateral,uint256 amount)external;\n', '        //set\n', '    function setUserPayingUsd(address user,uint256 amount)external;\n', '    function setUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function setNetWorthBalance(address collateral,int256 amount)external;\n', '    function setCollateralBalance(address collateral,uint256 amount)external;\n', '    function transferPaybackAndFee(address recieptor,address settlement,uint256 payback,uint256 feeType)external;\n', '\n', '    function buyOptionsPayfor(address payable recieptor,address settlement,uint256 settlementAmount,uint256 allPay)external;\n', '    function transferPayback(address recieptor,address settlement,uint256 payback)external;\n', '    function transferPaybackBalances(address account,uint256 redeemWorth,address[] calldata tmpWhiteList,uint256[] calldata colBalances,\n', '        uint256[] calldata PremiumBalances,uint256[] calldata prices)external;\n', '    function getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] calldata tmpWhiteList,\n', '        uint256[] calldata _RealBalances,uint256[] calldata prices) external view returns(uint256[] memory,uint256[] memory);\n', '    function addTransactionFee(address collateral,uint256 amount,uint256 feeType)external returns (uint256);\n', '\n', '    function getAllRealBalance(address[] calldata whiteList)external view returns(int256[] memory);\n', '    function getRealBalance(address settlement)external view returns(int256);\n', '    function getNetWorthBalance(address settlement)external view returns(uint256);\n', '}\n', 'contract ImportCollateralPool is Ownable{\n', '    ICollateralPool internal _collateralPool;\n', '    function getCollateralPoolAddress() public view returns(address){\n', '        return address(_collateralPool);\n', '    }\n', '    function setCollateralPoolAddress(address collateralPool)public onlyOwner{\n', '        _collateralPool = ICollateralPool(collateralPool);\n', '    }\n', '}\n', '\n', '// File: contracts\\FPTCoin\\IFPTCoin.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IFPTCoin {\n', '    function lockedBalanceOf(address account) external view returns (uint256);\n', '    function lockedWorthOf(address account) external view returns (uint256);\n', '    function getLockedBalance(address account) external view returns (uint256,uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function mint(address account, uint256 amount) external;\n', '    function burn(address account, uint256 amount) external;\n', '    function addlockBalance(address account, uint256 amount,uint256 lockedWorth)external; \n', '    function getTotalLockedWorth() external view returns (uint256);\n', '    function addMinerBalance(address account,uint256 amount) external;\n', '    function redeemLockedCollateral(address account,uint256 tokenAmount,uint256 leftCollateral)external returns (uint256,uint256);\n', '}\n', 'contract ImportIFPTCoin is Ownable{\n', '    IFPTCoin internal _FPTCoin;\n', '    function getFPTCoinAddress() public view returns(address){\n', '        return address(_FPTCoin);\n', '    }\n', '    function setFPTCoinAddress(address FPTCoinAddr)public onlyOwner{\n', '        _FPTCoin = IFPTCoin(FPTCoinAddr);\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\ImputRange.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract ImputRange is Ownable {\n', '    \n', '    //The maximum input amount limit.\n', '    uint256 private maxAmount = 1e30;\n', '    //The minimum input amount limit.\n', '    uint256 private minAmount = 1e2;\n', '    \n', '    modifier InRange(uint256 amount) {\n', '        require(maxAmount>=amount && minAmount<=amount,"input amount is out of input amount range");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Determine whether the input amount is within the valid range\n', '     * @param Amount Test value which is user input\n', '     */\n', '    function isInputAmountInRange(uint256 Amount)public view returns (bool){\n', '        return(maxAmount>=Amount && minAmount<=Amount);\n', '    }\n', '    /*\n', '    function isInputAmountSmaller(uint256 Amount)public view returns (bool){\n', '        return maxAmount>=amount;\n', '    }\n', '    function isInputAmountLarger(uint256 Amount)public view returns (bool){\n', '        return minAmount<=amount;\n', '    }\n', '    */\n', '    modifier Smaller(uint256 amount) {\n', '        require(maxAmount>=amount,"input amount is larger than maximium");\n', '        _;\n', '    }\n', '    modifier Larger(uint256 amount) {\n', '        require(minAmount<=amount,"input amount is smaller than maximium");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev get the valid range of input amount\n', '     */\n', '    function getInputAmountRange() public view returns(uint256,uint256) {\n', '        return (minAmount,maxAmount);\n', '    }\n', '    /**\n', '     * @dev set the valid range of input amount\n', '     * @param _minAmount the minimum input amount limit\n', '     * @param _maxAmount the maximum input amount limit\n', '     */\n', '    function setInputAmountRange(uint256 _minAmount,uint256 _maxAmount) public onlyOwner{\n', '        minAmount = _minAmount;\n', '        maxAmount = _maxAmount;\n', '    }        \n', '}\n', '\n', '// File: contracts\\modules\\Allowances.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * each operator can be granted exclusive access to specific functions.\n', ' *\n', ' */\n', 'contract Allowances is Ownable {\n', '    mapping (address => uint256) internal allowances;\n', '    bool internal bValid = false;\n', '    /**\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public onlyOwner{\n', '        allowances[spender] = amount;\n', '    }\n', '    function allowance(address spender) public view returns (uint256) {\n', '        return allowances[spender];\n', '    }\n', '    function setValid(bool _bValid) public onlyOwner{\n', '        bValid = _bValid;\n', '    }\n', '    function checkAllowance(address spender, uint256 amount) public view returns(bool){\n', '        return (!bValid) || (allowances[spender] >= amount);\n', '    }\n', '    modifier sufficientAllowance(address spender, uint256 amount){\n', '        require((!bValid) || (allowances[spender] >= amount),"Allowances : user\'s allowance is unsufficient!");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity =0.5.16;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\OptionsManager\\ManagerData.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title collateral calculate module\n', ' * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\n', ' *\n', ' */\n', 'contract ManagerData is ReentrancyGuard,ImputRange,AddressWhiteList,Allowances,ImportIFPTCoin,\n', '                ImportOracle,ImportOptionsPool,ImportCollateralPool,ImportOptionsPrice {\n', '    // The minimum collateral rate for options. This value is thousandths.\n', '    mapping (address=>uint256) collateralRate;\n', '//    uint256 private collateralRate = 5000;\n', '    /**\n', '     * @dev Emitted when `from` added `amount` collateral and minted `tokenAmount` FPTCoin.\n', '     */\n', '    event AddCollateral(address indexed from,address indexed collateral,uint256 amount,uint256 tokenAmount);\n', '    /**\n', '     * @dev Emitted when `from` redeemed `allRedeem` collateral.\n', '     */\n', '    event RedeemCollateral(address indexed from,address collateral,uint256 allRedeem);\n', '    event DebugEvent(uint256 id,uint256 value1,uint256 value2);\n', '        /**\n', '    * @dev input price valid range rate, thousandths.\n', '    * the input price must greater than current price * minPriceRate /1000\n', '    *       and less  than current price * maxPriceRate /1000 \n', '    * maxPriceRate is the maximum limit of the price valid range rate\n', '    * maxPriceRate is the minimum limit of the price valid range rage\n', '    */   \n', '    uint256 internal maxPriceRate = 1500;\n', '    uint256 internal minPriceRate = 500;\n', '    /**\n', '     * @dev Emitted when `from` buy `optionAmount` option and create new option.\n', "     * @param from user's account\n", "     * @param settlement user's input settlement paid for buy new option.\n", "     * @param optionPrice option's paid price\n", '     * @param settlementAmount settement cost\n', '     * @param optionAmount mint option token amount.\n', '     */  \n', '    event BuyOption(address indexed from,address indexed settlement,uint256 optionPrice,uint256 settlementAmount,uint256 optionAmount);\n', '    /**\n', '     * @dev Emitted when `from` sell `amount` option whose id is `optionId` and received sellValue,priced in usd.\n', '     */  \n', '    event SellOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\n', '    /**\n', '     * @dev Emitted when `from` exercise `amount` option whose id is `optionId` and received sellValue,priced in usd.\n', '     */  \n', '    event ExerciseOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\n', '}\n', '\n', '// File: contracts\\Proxy\\baseProxy.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @title  baseProxy Contract\n', '\n', ' */\n', 'contract baseProxy is Ownable {\n', '    address public implementation;\n', '    constructor(address implementation_) public {\n', '        // Creator of the contract is admin during initialization\n', '        implementation = implementation_; \n', '        (bool success,) = implementation_.delegatecall(abi.encodeWithSignature("initialize()"));\n', '        require(success);\n', '    }\n', '    function getImplementation()public view returns(address){\n', '        return implementation;\n', '    }\n', '    function setImplementation(address implementation_)public onlyOwner{\n', '        implementation = implementation_; \n', '        (bool success,) = implementation_.delegatecall(abi.encodeWithSignature("update()"));\n', '        require(success);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to the implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToImplementation(bytes memory data) public returns (bytes memory) {\n', '        (bool success, bytes memory returnData) = implementation.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize)\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n', '        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature("delegateToImplementation(bytes)", data));\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize)\n', '            }\n', '        }\n', '        return abi.decode(returnData, (bytes));\n', '    }\n', '\n', '    function delegateToViewAndReturn() internal view returns (bytes memory) {\n', '        (bool success, ) = address(this).staticcall(abi.encodeWithSignature("delegateToImplementation(bytes)", msg.data));\n', '\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize)\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize) }\n', '            default { return(add(free_mem_ptr, 0x40), returndatasize) }\n', '        }\n', '    }\n', '\n', '    function delegateAndReturn() internal returns (bytes memory) {\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize)\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize) }\n', '            default { return(free_mem_ptr, returndatasize) }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\OptionsManager\\ManagerProxy.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '/**\n', ' * @title  Erc20Delegator Contract\n', '\n', ' */\n', 'contract ManagerProxy is ManagerData,baseProxy{\n', '    /**\n', '    * @dev Options manager constructor. set other contract address\n', '    *  oracleAddr fnx oracle contract address.\n', '    *  optionsPriceAddr options price contract address\n', '    *  optionsPoolAddr optoins pool contract address\n', '    *  FPTCoinAddr FPTCoin contract address\n', '    */\n', '    constructor(address implementation_,address oracleAddr,address optionsPriceAddr,\n', '            address optionsPoolAddr,address collateralPoolAddr,address FPTCoinAddr)\n', '         baseProxy(implementation_) public  {\n', '        _oracle = IFNXOracle(oracleAddr);\n', '        _optionsPrice = IOptionsPrice(optionsPriceAddr);\n', '        _optionsPool = IOptionsPool(optionsPoolAddr);\n', '        _collateralPool = ICollateralPool(collateralPoolAddr);\n', '        _FPTCoin = IFPTCoin(FPTCoinAddr);\n', '/*\n', '        allowances[0x6D14B6A933Bfc473aEDEBC3beD58cA268FEe8b4a] = 1e40;\n', '        allowances[0x87A7604C4E9E1CED9990b6D486d652f0194A4c98] = 1e40;\n', '        allowances[0x7ea1a45f0657D2Dbd77839a916AB83112bdB5590] = 1e40;\n', '        allowances[0x358dba22d19789E01FD6bB528f4E75Bc06b56A79] = 1e40;\n', '        allowances[0x91406B5d57893E307f042D71C91e223a7058Eb72] = 1e40;\n', '        allowances[0xc89b50171C1F692f5CBC37aC4AF540f9cecEE0Ff] = 1e40;\n', '        allowances[0x92e25B14B0B760212D7E831EB8436Fbb93826755] = 1e40;\n', '        allowances[0x2D8f8d7737046c1475ED5278a18c4A62968f0CB2] = 1e40;\n', '        allowances[0xaAC6A96681cfc81c756Db31D93eafb8237A27Ba8] = 1e40;\n', '        allowances[0xB752d7a4E7ebD7B7A7b4DEEFd086571e5e7F5BB8] = 1e40;\n', '        allowances[0x8AbD525792015E1eBae2249756729168A3c1866F] = 1e40;\n', '        allowances[0x991b9d51e5526D497A576DF82eaa4BEA51EAD16e] = 1e40;\n', '        allowances[0xC8e7E9e496DE394969cb377F5Df0E3cdDFB74164] = 1e40;\n', '        allowances[0x0B173b9014a0A36aAC51eE4957BC8c7E20686d3F] = 1e40;\n', '        allowances[0xb9cE369E36Ab9ea488887ad9483f0ce899ab8fbe] = 1e40;\n', '        allowances[0x20C337F68Dc90D830Ac8e379e8823008dc791D56] = 1e40;\n', '        allowances[0x10E3163a7354b16ac24e7fCeE593c22E86a0abCa] = 1e40;\n', '        allowances[0x669cFbd063C434a5ee51adc78d2292A2D3Fe88E0] = 1e40;\n', '        allowances[0x59F1cfc3c485b9693e3F640e1B56Fe83B5e3183a] = 1e40;\n', '        allowances[0x4B38bf8A442D01017a6882d52Ef1B13CD069bb0d] = 1e40;\n', '        allowances[0x9c8f005ab27AdB94f3d49020A15722Db2Fcd9F27] = 1e40;\n', '        allowances[0x2240D781185B93DdD83C5eA78F4E64a9Cb5B0446] = 1e40;\n', '        allowances[0xa5B7364926Ac89aBCA15D56738b3EA79B31A0433] = 1e40;\n', '        allowances[0xafE53d85Da6b510B4fcc3774373F8880097F3E10] = 1e40;\n', '        allowances[0xb604BE9155810e4BA938ce06f8E554D2EB3438fE] = 1e40;\n', '        allowances[0xA27D1D94C0B4ce79d49E7c817C688c563D297fF7] = 1e40;\n', '        allowances[0x32ACbBa480e4bA2ee3E2c620Bf7A3242631293BE] = 1e40;\n', '        allowances[0x7Acfd797725EcCd5D3D60fB5Dd566760D0743098] = 1e40;\n', '        allowances[0x0F8f5137C365D01f71a3fb8A4283816FB12A8Efb] = 1e40;\n', '        allowances[0x2F160d9b63b5b8255499aB16959231275D4396db] = 1e40;\n', '        allowances[0xf85a428D528e89E115E5C91F7347fE9ac2F92d72] = 1e40;\n', '        allowances[0xb2c62391CCe67C5EfC1b17D442eBd24c90F6A47C] = 1e40;\n', '        allowances[0x10d31b7063cC25F9916B390677DC473B83E84e13] = 1e40;\n', '        allowances[0x358dba22d19789E01FD6bB528f4E75Bc06b56A79] = 1e40;\n', '        allowances[0xe4A263230d67d30c71634CA462a00174d943A14D] = 1e40;\n', '        allowances[0x1493572Bd9Fa9F75b0B81D6Cdd583AD87D6B358F] = 1e40;\n', '        allowances[0x025b654306621157aE8208ebC5DD0f311F425ac3] = 1e40;\n', '        allowances[0xCE257C6BD7aF256e1C8Dd11057F90b9A1AeD85a4] = 1e40;\n', '        allowances[0x7D57B8B8A731Cc1fc1E661842790e1864d5Cf4E8] = 1e40;\n', '        allowances[0xe129e34D1bD6AA1370090Cb1596207197A1a0689] = 1e40;\n', '        allowances[0xBA096024056bB653c6E28f53C8889BFC3553bAD8] = 1e40;\n', '        allowances[0x73DFb4bA8fFF9A975a28FF169157C7B71B9574aE] = 1e40;\n', '        allowances[0xddbDc4a3Af9DAa4005c039BE8329c1F03F01EDb9] = 1e40;\n', '        allowances[0x4086E0e1B3351D2168B74E7A61C0844b78f765F2] = 1e40;\n', '        allowances[0x4ce4fe1B35F11a428DD36A78C56Cb8Cc755f8847] = 1e40;\n', '        allowances[0x9e169106D1d406F3d51750835E01e8a34c265957] = 1e40;\n', '        allowances[0x7EcB07AdC76b2979fbE45Af13e2B706bA3562d1d] = 1e40;\n', '        allowances[0x3B95Df362B1857e6Db3483521057C4587C467531] = 1e40;\n', '        allowances[0xe596470D291Cb2D32ec111afC314B07006690c72] = 1e40;\n', '        allowances[0x80fd2a2Ed7e42Ec8bD9635285B09C773Da31eF71] = 1e40;\n', '        allowances[0xC09ec032769b04b08BDe8ADb608d0aaF903FF9Be] = 1e40;\n', '        allowances[0xf5F9AFBC3915075C5C62A995501fae643F5f6857] = 1e40;\n', '        allowances[0xf010920E1B098DFA1732d41Fbc895aB6E65E4438] = 1e40;\n', '        allowances[0xb37983510f9483A0725bC109d7f19237Aa3212d5] = 1e40;\n', '        allowances[0x9531479AA50908c9053144eF99c235abA6168069] = 1e40;\n', '        allowances[0x98F6a20f80FbF33153BE7ed1C8C3c10d4d6433DF] = 1e40;\n', '        allowances[0x4c8dbbDdC95B7981a7a09dE455ddfc58173CF471] = 1e40;\n', '        allowances[0x5acfbbF0aA370F232E341BC0B1a40e996c960e07] = 1e40;\n', '        allowances[0x7388B46005646008ada2d6d7DC2830F6C63b9BeD] = 1e40;\n', '        allowances[0xBFa43bf6E9FB6d5CC253Ff23c31F2b86a739bB98] = 1e40;\n', '        allowances[0x09AEa652006F4088d389c878474e33e9B15986E5] = 1e40;\n', '        allowances[0x0fBC222aDF84bEE9169022b28ebc3D32b5C60756] = 1e40;\n', '        allowances[0xBD53E948a5630c409b98bFC6112c2891836d5b33] = 1e40;\n', '        allowances[0x0eBF4005C35d525240c3237c1C448B88Deca9447] = 1e40;\n', '        allowances[0xa1cCC796E2B44e80112c065A4d8F05661E685eD8] = 1e40;\n', '        allowances[0x4E60bE84870FE6AE350B563A121042396Abe1eaF] = 1e40;\n', '        allowances[0x5286CEde4a0Eda5916d639535aDFbefAd980D6E1] = 1e40;\n', '*/\n', '    }\n', '    /**\n', '     * @dev  The foundation owner want to set the minimum collateral occupation rate.\n', '     *  collateral collateral coin address\n', '     *  colRate The thousandths of the minimum collateral occupation rate.\n', '     */\n', '    function setCollateralRate(address /*collateral*/,uint256 /*colRate*/) public {\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', '     * @dev Get the minimum collateral occupation rate.\n', '     */\n', '    function getCollateralRate(address /*collateral*/)public view returns (uint256) {\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', "     * @dev Retrieve user's cost of collateral, priced in USD.\n", '     *  user input retrieved account \n', '     */\n', '    function getUserPayingUsd(address /*user*/)public view returns (uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', "     * @dev Retrieve user's amount of the specified collateral.\n", '     *  user input retrieved account \n', '     *  collateral input retrieved collateral coin address \n', '     */\n', '    function userInputCollateral(address /*user*/,address /*collateral*/)public view returns (uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '\n', '    /**\n', "     * @dev Retrieve user's current total worth, priced in USD.\n", '     *  account input retrieve account\n', '     */\n', '    function getUserTotalWorth(address /*account*/)public view returns (uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', "     * @dev Retrieve FPTCoin's net worth, priced in USD.\n", '     */\n', '    function getTokenNetworth() public view returns (uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Deposit collateral in this pool from user.\n', '     *  collateral The collateral coin address which is in whitelist.\n', '     *  amount the amount of collateral to deposit.\n', '     */\n', '    function addCollateral(address /*collateral*/,uint256 /*amount*/) public payable {\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', '     * @dev redeem collateral from this pool, user can input the prioritized collateral,he will get this coin,\n', '     * if this coin is unsufficient, he will get others collateral which in whitelist.\n', '     *  tokenAmount the amount of FPTCoin want to redeem.\n', '     *  collateral The prioritized collateral coin address.\n', '     */\n', '    function redeemCollateral(uint256 /*tokenAmount*/,address /*collateral*/) public {\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', "     * @dev Retrieve user's collateral worth in all collateral coin. \n", '     * If user want to redeem all his collateral,and the vacant collateral is sufficient,\n', '     * He can redeem each collateral amount in return list.\n', "     *  account the retrieve user's account;\n", '     */\n', '    function calCollateralWorth(address /*account*/)public view returns(uint256[] memory){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the occupied collateral worth, multiplied by minimum collateral rate, priced in USD. \n', '     */\n', '    function getOccupiedCollateral() public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the available collateral worth, the worth of collateral which can used for buy options, priced in USD. \n', '     */\n', '    function getAvailableCollateral()public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the left collateral worth, the worth of collateral which can used for redeem collateral, priced in USD. \n', '     */\n', '    function getLeftCollateral()public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the unlocked collateral worth, the worth of collateral which currently used for options, priced in USD. \n', '     */\n', '    function getUnlockedCollateral()public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev The auxiliary function for calculate option occupied. \n', "     *  strikePrice option's strike price\n", "     *  underlyingPrice option's underlying price\n", "     *  amount option's amount\n", "     *  optType option's type, 0 for call, 1 for put.\n", '     */\n', '    function calOptionsOccupied(uint256 /*strikePrice*/,uint256 /*underlyingPrice*/,uint256 /*amount*/,uint8 /*optType*/)public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the total collateral worth, priced in USD. \n', '     */\n', '    function getTotalCollateral()public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev Retrieve the balance of collateral, the auxiliary function for the total collateral calculation. \n', '     */\n', '    function getRealBalance(address /*settlement*/)public view returns(int256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    function getNetWorthBalance(address /*settlement*/)public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '     * @dev collateral occupation rate calculation\n', '     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\n', '     */\n', '    function calculateCollateralRate()public view returns (uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '    * @dev retrieve input price valid range rate, thousandths.\n', '    */ \n', '    function getPriceRateRange() public view returns(uint256,uint256) {\n', '        delegateToViewAndReturn();\n', '    }\n', '    /**\n', '    * @dev set input price valid range rate, thousandths.\n', '    */ \n', '    function setPriceRateRange(uint256 /*_minPriceRate*/,uint256 /*_maxPriceRate*/) public{\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', '    * @dev user buy option and create new option.\n', "    *  settlement user's settement coin address\n", '    *  settlementAmount amount of settlement user want fo pay.\n', "    *  strikePrice user input option's strike price\n", "    *  underlying user input option's underlying id, 1 for BTC,2 for ETH\n", '    *  expiration user input expiration,time limit from now\n', '    *  amount user input amount of new option user want to buy.\n', '    *  optType user input option type\n', '    */ \n', '    function buyOption(address /*settlement*/,uint256 /*settlementAmount*/, uint256 /*strikePrice*/,uint32 /*underlying*/,\n', '                uint32 /*expiration*/,uint256 /*amount*/,uint8 /*optType*/) public payable{\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', '    * @dev User sell option.\n', "    *  optionsId option's ID which was wanted to sell, must owned by user\n", '    *  amount user input amount of option user want to sell.\n', '    */ \n', '    function sellOption(uint256 /*optionsId*/,uint256 /*amount*/) public{\n', '        delegateAndReturn();\n', '    }\n', '    /**\n', '    * @dev User exercise option.\n', "    *  optionsId option's ID which was wanted to exercise, must owned by user\n", '    *  amount user input amount of option user want to exercise.\n', '    */ \n', '    function exerciseOption(uint256 /*optionsId*/,uint256 /*amount*/) public{\n', '        delegateAndReturn();\n', '    }\n', '    function getOptionsPrice(uint256 /*underlyingPrice*/, uint256 /*strikePrice*/, uint256 /*expiration*/,\n', '                    uint32 /*underlying*/,uint256 /*amount*/,uint8 /*optType*/) public view returns(uint256){\n', '        delegateToViewAndReturn();\n', '    }\n', '    function getALLCollateralinfo(address /*user*/)public view \n', '        returns(uint256[] memory,int256[] memory,uint32[] memory,uint32[] memory){\n', '        delegateToViewAndReturn();\n', '    }\n', '}']