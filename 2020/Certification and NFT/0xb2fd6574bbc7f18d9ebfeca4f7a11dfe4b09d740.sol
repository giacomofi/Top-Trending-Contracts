['/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-07\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// import "../openzeppelin/upgrades/contracts/Initializable.sol";\n', '\n', '// import "../openzeppelin/upgrades/contracts/Initializable.sol";\n', '\n', 'contract OwnableUpgradable is Initializable {\n', '    address payable public owner;\n', '    address payable internal newOwnerCandidate;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Permission denied");\n', '        _;\n', '    }\n', '\n', '    // ** INITIALIZERS – Constructors for Upgradable contracts **\n', '\n', '    function initialize() public initializer {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function initialize(address payable newOwner) public initializer {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function changeOwner(address payable newOwner) public onlyOwner {\n', '        newOwnerCandidate = newOwner;\n', '    }\n', '\n', '    function acceptOwner() public {\n', '        require(msg.sender == newOwnerCandidate, "Permission denied");\n', '        owner = newOwnerCandidate;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract AdminableUpgradable is Initializable, OwnableUpgradable {\n', '    mapping(address => bool) public admins;\n', '\n', '    modifier onlyOwnerOrAdmin {\n', '        require(msg.sender == owner ||\n', '        admins[msg.sender], "Permission denied");\n', '        _;\n', '    }\n', '\n', '    // Initializer – Constructor for Upgradable contracts\n', '    function initialize() public initializer {\n', '        OwnableUpgradable.initialize();  // Initialize Parent Contract\n', '    }\n', '\n', '    function initialize(address payable newOwner) public initializer {\n', '        OwnableUpgradable.initialize(newOwner);  // Initialize Parent Contract\n', '    }\n', '\n', '    function setAdminPermission(address _admin, bool _status) public onlyOwner {\n', '        admins[_admin] = _status;\n', '    }\n', '\n', '    function setAdminPermission(address[] memory _admins, bool _status) public onlyOwner {\n', '        for (uint i = 0; i < _admins.length; i++) {\n', '            admins[_admins[i]] = _status;\n', '        }\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\n', '        z = add(mul(x, y), base / 2) / base;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    /*function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }*/\n', '}\n', '\n', 'interface IController {\n', '    function owner() view external returns (address);\n', '}\n', '\n', 'interface IDfFinanceDeposits {\n', '    function createStrategyDeposit(uint256 amountDAI, uint256 flashLoanAmount, address dfWallet) external returns (address);\n', '    function createStrategyDepositFlashloan(uint256 amountDAI, uint256 flashLoanAmount, address dfWallet) external returns (address);\n', '    function createStrategyDepositMulti(uint256 amountDAI, uint256 flashLoanAmount, uint32 times) external;\n', '\n', '    function closeDepositDAI(address dfWallet, uint256 minDAIForCompound, bytes calldata data) external;\n', '    function closeDepositFlashloan(address dfWallet, uint256 minUsdForComp, bytes calldata data) external;\n', '\n', '    function partiallyCloseDepositDAI(address dfWallet, address tokenReceiver, uint256 amountDAI) external;\n', '    function partiallyCloseDepositDAIFlashloan(address dfWallet, address tokenReceiver, uint256 amountDAI) external;\n', '\n', '    function claimComps(address dfWallet, uint256 minDAIForCompound, bytes calldata data) external returns(uint256);\n', '    function isClosed(address addrWallet) view external returns(bool);\n', '}\n', '\n', 'interface IToken {\n', '    function decimals() external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint value) external;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function deposit() external payable;\n', '    function withdraw(uint amount) external;\n', '}\n', '\n', 'interface IDfDepositToken {\n', '\n', '    function mint(address account, uint256 amount) external;\n', '    function burnFrom(address account, uint256 amount) external;\n', '\n', '    function balanceOfAt(address account, uint256 snapshotId) external view returns(uint256);\n', '    function totalSupplyAt(uint256 snapshotId) external view returns(uint256);\n', '    function snapshot() external returns(uint256);\n', '\n', '}\n', '\n', 'contract ConstantAddresses {\n', '    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\n', '\n', '    //    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    //    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '\n', '    //    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    //    address public constant CUSDC_ADDRESS = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\n', '\n', '    //    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address public constant CDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n', '\n', '    address public constant COMP_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n', '\n', '    address public constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '}\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '// import "./SafeMath.sol";\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IToken token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IToken token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IToken token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library UniversalERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IToken;\n', '\n', '    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\n', '    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount) internal {\n', '        universalTransfer(token, to, amount, false);\n', '    }\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            if (mayFail) {\n', '                return address(uint160(to)).send(amount);\n', '            } else {\n', '                address(uint160(to)).transfer(amount);\n', '                return true;\n', '            }\n', '        } else {\n', '            token.safeTransfer(to, amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function universalApprove(IToken token, address to, uint256 amount) internal {\n', '        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n', '            token.safeApprove(to, amount);\n', '        }\n', '    }\n', '\n', '    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            require(from == msg.sender && msg.value >= amount, "msg.value is zero");\n', '            if (to != address(this)) {\n', '                address(uint160(to)).transfer(amount);\n', '            }\n', '            if (msg.value > amount) {\n', '                msg.sender.transfer(uint256(msg.value).sub(amount));\n', '            }\n', '        } else {\n', '            token.safeTransferFrom(from, to, amount);\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DfTokenizedDeposit is\n', 'Initializable,\n', 'AdminableUpgradable,\n', 'DSMath,\n', 'ConstantAddresses\n', '{\n', '    using UniversalERC20 for IToken;\n', '\n', '    struct ProfitData {\n', '        uint64 blockNumber;\n', '        uint64 compProfit; // div 1e12 (6 dec)\n', '        uint64 usdtProfit;\n', '    }\n', '\n', '    ProfitData[] public profits;\n', '\n', '    IDfDepositToken public token;\n', '    address public dfWallet;\n', '\n', '    // IDfFinanceDeposits public constant dfFinanceDeposits = IDfFinanceDeposits(0xCa0648C5b4Cea7D185E09FCc932F5B0179c95F17); // Kovan\n', '    IDfFinanceDeposits public constant dfFinanceDeposits = IDfFinanceDeposits(0xFff9D7b0B6312ead0a1A993BF32f373449006F2F); // Mainnet\n', '\n', '    mapping(address => uint64) public lastProfitDistIndex;\n', '\n', '    address usdtExchanger;\n', '\n', '    event CompSwap(uint256 timestamp, uint256 compPrice);\n', '    event Profit(address indexed user, uint64 index, uint64 usdtProfit, uint64 compProfit);\n', '\n', '    function initialize() public initializer {\n', '        address payable curOwner = 0xdAE0aca4B9B38199408ffaB32562Bf7B3B0495fE;\n', '        AdminableUpgradable.initialize(curOwner);  // Initialize Parent Contract\n', '\n', '        IToken(DAI_ADDRESS).approve(address(dfFinanceDeposits), uint256(-1));\n', '    }\n', '\n', '    function createStrategyDeposit(\n', '        uint256 amount, uint256 flashLoanAmount, IDfDepositToken attachedToken, bool withFlashloan\n', '    ) public onlyOwner {\n', '        require(token == IDfDepositToken(0x0));\n', '        require(dfWallet == address(0x0));\n', '\n', '        token = attachedToken;\n', '        IToken(DAI_ADDRESS).transferFrom(msg.sender, address(this), amount);\n', '\n', '        if (withFlashloan) {\n', '            dfWallet = dfFinanceDeposits.createStrategyDepositFlashloan(amount, flashLoanAmount, address(0x0));\n', '        } else {\n', '            dfWallet = dfFinanceDeposits.createStrategyDeposit(amount, flashLoanAmount, address(0x0));\n', '        }\n', '\n', '        token.mint(msg.sender, amount);\n', '    }\n', '\n', '    function addStrategyDeposit(\n', '        uint256 amount, uint256 flashLoanAmount, bool withFlashloan\n', '    ) public onlyOwner {\n', '        require(token != IDfDepositToken(0x0));\n', '        require(dfWallet != address(0x0));\n', '        IToken(DAI_ADDRESS).transferFrom(msg.sender, address(this), amount);\n', '\n', '        if (withFlashloan) {\n', '            dfFinanceDeposits.createStrategyDepositFlashloan(amount, flashLoanAmount, dfWallet);\n', '        } else {\n', '            dfFinanceDeposits.createStrategyDeposit(amount, flashLoanAmount, dfWallet);\n', '        }\n', '\n', '        token.mint(msg.sender, amount);\n', '    }\n', '\n', '    function addUserStrategyDeposit(uint256 amount) public {\n', '        require(msg.sender == tx.origin);\n', '        require(token != IDfDepositToken(0x0));\n', '        require(dfWallet != address(0x0));\n', '        IToken(DAI_ADDRESS).transferFrom(msg.sender, address(this), amount);\n', '        dfFinanceDeposits.createStrategyDepositFlashloan(amount, amount * 290 / 100, dfWallet);\n', '        token.mint(msg.sender, amount);\n', '    }\n', '\n', '    function closeStrategyDeposit(\n', '        uint256 minUsdtForCompound, bytes memory data, bool withFlashloan\n', '    ) public onlyOwner {\n', '        require(dfWallet != address(0x0));\n', '        uint256 compStartAmount = IToken(COMP_ADDRESS).balanceOf(address(this));\n', '\n', '        if (withFlashloan) {\n', '            dfFinanceDeposits.closeDepositFlashloan(dfWallet, minUsdtForCompound, data);\n', '        } else {\n', '            dfFinanceDeposits.closeDepositDAI(dfWallet, minUsdtForCompound, data);\n', '        }\n', '\n', '        uint256 compProfit = sub(IToken(COMP_ADDRESS).balanceOf(address(this)), compStartAmount);\n', '\n', '        ProfitData memory p;\n', '        p.blockNumber = uint64(block.number);\n', '        p.compProfit = p.compProfit + uint64(compProfit / 1e12);\n', '        p.usdtProfit = p.usdtProfit + uint64(minUsdtForCompound);\n', '        token.snapshot();\n', '        profits.push(p);\n', '    }\n', '\n', '    function burnTokens(uint256 amount, bool withFlashloan) public {\n', '        require(msg.sender == tx.origin);\n', '        token.burnFrom(msg.sender, amount);\n', '        // is closed ?\n', '        if (dfFinanceDeposits.isClosed(dfWallet)) {\n', '            IToken(DAI_ADDRESS).transfer(msg.sender, amount);\n', '        } else {\n', '            if (withFlashloan) {\n', '                dfFinanceDeposits.partiallyCloseDepositDAIFlashloan(dfWallet, msg.sender, amount);\n', '            } else {\n', '                dfFinanceDeposits.partiallyCloseDepositDAI(dfWallet, msg.sender, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function calcUserProfit(address userAddress, uint256 max) public view returns(\n', '        uint256 totalCompProfit, uint256 totalUsdtProfit, uint64 index\n', '    ) {\n', '        if (profits.length < max) max = profits.length;\n', '\n', '        index = lastProfitDistIndex[userAddress];\n', '        for(; index < max; index++) {\n', '            ProfitData memory p = profits[index];\n', '            uint256 balanceAtBlock = token.balanceOfAt(userAddress, index + 1);\n', '            uint256 totalSupplyAt = token.totalSupplyAt(index + 1);\n', '            uint256 profitUsdt = wdiv(wmul(uint256(p.usdtProfit), balanceAtBlock), totalSupplyAt);\n', '            uint256 profitComp = wdiv(wmul(mul(uint256(p.compProfit), 1e12),balanceAtBlock), totalSupplyAt);\n', '            totalUsdtProfit = add(totalUsdtProfit, profitUsdt);\n', '            totalCompProfit = add(totalCompProfit, profitComp);\n', '        }\n', '    }\n', '\n', '    function claimProfitFromMarkets(uint64 lastIndex, uint256 totalUsdtProfit1, uint8 v1, bytes32 r1, bytes32 s1, uint256 totalUsdtProfit2, uint8 v2, bytes32 r2, bytes32 s2) onlyOwner public {\n', '        require(msg.sender == tx.origin);\n', '        // 0xc37a700CB7c5c254dD581feF6F5768B1B705a5Bb is a system contract for fast buying dDAI tokens\n', '        userClaimProfitOptimizedInternal(0xc37a700CB7c5c254dD581feF6F5768B1B705a5Bb, owner, lastIndex, totalUsdtProfit1, 0, v1, r1, s1);\n', '        // 0x71d88D9A24125b61e580bB73D7C0b20F0E29902f is a system contract for fast selling dDAI tokens\n', '        userClaimProfitOptimizedInternal(0x71d88D9A24125b61e580bB73D7C0b20F0E29902f, owner, lastIndex, totalUsdtProfit2, 0, v2, r2, s2);\n', '    }\n', '\n', '    function userClaimProfitOptimized(uint64 lastIndex, uint256 totalUsdtProfit, uint256 totalCompProfit, uint8 v, bytes32 r, bytes32 s) public {\n', '        require(msg.sender == tx.origin);\n', '        userClaimProfitOptimizedInternal(msg.sender, msg.sender, lastIndex, totalUsdtProfit, totalCompProfit, v, r, s);\n', '    }\n', '\n', '    // Internal function\n', '    function userClaimProfitOptimizedInternal(address userAddress, address target, uint64 lastIndex, uint256 totalUsdtProfit, uint256 totalCompProfit, uint8 v, bytes32 r, bytes32 s) internal {\n', '        // check signature\n', '        bytes32 hash = sha256(abi.encodePacked(this, userAddress, lastIndex, totalUsdtProfit, totalCompProfit));\n', '        address src = ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)), v, r, s);\n', '        require(admins[src] == true, "Access denied");\n', '\n', '        require(lastProfitDistIndex[userAddress] < lastIndex);\n', '\n', '        lastProfitDistIndex[userAddress] = lastIndex;\n', '\n', '        if (totalUsdtProfit > 0) {\n', '            IToken(USDT_ADDRESS).universalTransfer(target, totalUsdtProfit);\n', '        }\n', '\n', '        if (totalCompProfit > 0) {\n', '            IToken(COMP_ADDRESS).transfer(target, totalCompProfit);\n', '        }\n', '    }\n', '\n', '    function userClaimProfitAndSendToAddresses(uint64 max, address[] memory targets, uint256[] memory amounts) public {\n', '        require(msg.sender == tx.origin);\n', '        require(targets.length == amounts.length);\n', '\n', '        uint64 index;\n', '        uint256 totalCompProfit;\n', '        uint256 totalUsdtProfit;\n', '        (totalCompProfit, totalUsdtProfit, index) = calcUserProfit(msg.sender, max);\n', '\n', '        lastProfitDistIndex[msg.sender] = index;\n', '\n', '        if (totalCompProfit > 0) {\n', '            IToken(COMP_ADDRESS).transfer(msg.sender, totalCompProfit);\n', '        }\n', '\n', '        for(uint16 i = 0; i < targets.length;i++) {\n', '            totalUsdtProfit = sub(totalUsdtProfit, amounts[i]);\n', '            IToken(USDT_ADDRESS).universalTransfer(targets[i], amounts[i]);\n', '        }\n', '\n', '        if (totalUsdtProfit > 0) {\n', '            IToken(USDT_ADDRESS).universalTransfer(msg.sender, totalUsdtProfit);\n', '        }\n', '    }\n', '\n', '    function userClaimProfit(uint64 max) public {\n', '        require(msg.sender == tx.origin);\n', '\n', '        uint64 index;\n', '        uint256 totalCompProfit;\n', '        uint256 totalUsdtProfit;\n', '        (totalCompProfit, totalUsdtProfit, index) = calcUserProfit(msg.sender, max);\n', '\n', '        lastProfitDistIndex[msg.sender] = index;\n', '\n', '        if (totalUsdtProfit > 0) {\n', '            IToken(USDT_ADDRESS).universalTransfer(msg.sender, totalUsdtProfit);\n', '        }\n', '\n', '        if (totalCompProfit > 0) {\n', '            IToken(COMP_ADDRESS).transfer(msg.sender, totalCompProfit);\n', '        }\n', '    }\n', '\n', '    function setUSDTExchangeAddress(address _newAddress) public onlyOwnerOrAdmin {\n', '        usdtExchanger = _newAddress;\n', '    }\n', '\n', '    function adminClaimProfitAndInternalSwapToUSDT(uint256 _compPriceInUsdt) public onlyOwnerOrAdmin {\n', '        // Claim comps without exchange\n', '        uint256 amountComps = dfFinanceDeposits.claimComps(dfWallet, 0, bytes(""));\n', '        uint256 amountUsdt = mul(amountComps, _compPriceInUsdt) / 10**18; // COMP to USDT\n', '\n', '        IToken(USDT_ADDRESS).universalTransferFrom(usdtExchanger, address(this), amountUsdt);\n', '        IToken(COMP_ADDRESS).transfer(usdtExchanger, amountComps);\n', '\n', '        ProfitData memory p;\n', '        p.blockNumber = uint64(block.number);\n', '        p.usdtProfit = p.usdtProfit + uint64(amountUsdt);\n', '        profits.push(p);\n', '\n', '        token.snapshot();\n', '\n', '        emit CompSwap(block.timestamp, _compPriceInUsdt);\n', '    }\n', '\n', '    function adminClaimProfit(uint256 minUsdtForCompound, bytes memory data) public onlyOwnerOrAdmin {\n', '        uint256 amount = dfFinanceDeposits.claimComps(dfWallet, minUsdtForCompound, data);\n', '        ProfitData memory p;\n', '        p.blockNumber = uint64(block.number);\n', '        if (minUsdtForCompound == 0) {\n', '            p.compProfit = p.compProfit + uint64(amount / 1e12);\n', '        } else {\n', '            p.usdtProfit = p.usdtProfit + uint64(amount);\n', '        }\n', '        profits.push(p);\n', '\n', '        token.snapshot();\n', '    }\n', '\n', '}']