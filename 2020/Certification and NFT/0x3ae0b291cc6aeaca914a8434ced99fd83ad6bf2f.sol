['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/*   __    __\n', '    /  |  /  |\n', '    $$ |  $$ |\n', '    $$ |__$$ |\n', '    $$    $$ |     Just Hodl\n', '    $$$$$$$$ |     $JH\n', '    $$ |  $$ |\n', '    $$ |  $$ |\n', '    $$ /  $$ /\n', '\n', '    The Token For The Hodlers.\n', '\n', '    More informations at https://justhodl.finance\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/JustHodlBase.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract JustHodlBase is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    uint256 internal _totalHodlSinceLastBuy = 0;\n', '    uint256 internal _totalHodlersCount = 0;\n', '    uint256 internal _bonusSupply = 0;\n', '    uint256 internal _holdersSupply = 0;\n', '\n', '    mapping (address => uint256) internal _hodlerHodlTime;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function bonusSupply() public view returns (uint256) {\n', '        return _bonusSupply;\n', '    }\n', '\n', '    function holdersSupply() public view returns (uint256) {\n', '        return _holdersSupply;\n', '    }\n', '\n', '    function totalHodlSinceLastBuy() public view returns (uint256) {\n', '        return _totalHodlSinceLastBuy;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        uint256 balance = _balances[account];\n', '        if (balance > 0 && hodlMinimumAchived(account)) {\n', '            return balance + _getHodlBonus(account, balance);\n', '        } else {\n', '            return balance;\n', '        }\n', '    }\n', '\n', '    function pureBalanceOf(address _address) public view returns (uint256) {\n', '        return _balances[_address];\n', '    }\n', '\n', '    function pureBonusOf(address _address) public view returns (uint256) {\n', '        return balanceOf(_address).sub(_balances[_address]);\n', '    }\n', '\n', '    function hodlTimeOf(address _address) public view returns (uint256) {\n', '        return _hodlerHodlTime[_address];\n', '    }\n', '\n', '    function hodlMinimumAchived(address _address) public view returns (bool) {\n', '        uint256 hodlTime = _hodlerHodlTime[_address];\n', '        return hodlTime > 0 && (now - 7 days) > hodlTime;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "JustHodlBase: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "JustHodlBase: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "JustHodlBase: transfer from the zero address");\n', '        require(recipient != address(0), "JustHodlBase: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 finalSenderAmount = amount;\n', '        uint256 pureBalance = _balances[sender];\n', '        uint256 totalBalance = balanceOf(sender);\n', '        if (amount > pureBalance && amount <= totalBalance) {\n', '            finalSenderAmount = pureBalance;\n', '        }\n', '\n', '        _balances[sender] = _balances[sender].sub(finalSenderAmount, "JustHodlBase: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "JustHodlBase: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _getMinHodlDiff() internal view returns (uint256) {\n', '        return (now - 7 days);\n', '    }\n', '\n', '    function _getHoldDiff(address _address, uint256 _minHodlDiff) internal view returns (uint256) {\n', '        return _minHodlDiff - _hodlerHodlTime[_address];\n', '    }\n', '\n', '    function _getHodlBonus(address _address, uint256 _balance) internal view returns (uint256) {\n', '        uint256 minHodlDiff = _getMinHodlDiff();\n', '        uint256 hodlDiff = _getHoldDiff(_address, minHodlDiff);\n', '        uint256 totalHodlDiff = minHodlDiff.mul(_totalHodlersCount) - _totalHodlSinceLastBuy;\n', '        return _bonusSupply.mul(((_balance*10**18).div(_holdersSupply).add((hodlDiff*10**18).div(totalHodlDiff))).div(2)).div(10**18);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "JustHodlBase: approve from the zero address");\n', '        require(spender != address(0), "JustHodlBase: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/JustHodl.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'contract JustHodl is JustHodlBase {\n', '    address private owner;\n', '    uint256 private penaltyRatio = 10;\n', '    uint256 private maxSupply = 2000 * (10 ** 18);\n', '\n', '    struct Addr {\n', '        address _address;\n', '        bool exists;\n', '    }\n', '\n', '    mapping (address => Addr) private senderExceptions;\n', '    mapping (address => Addr) private recipientExceptions;\n', '    mapping (address => mapping (address => Addr)) private whitelistedSenders;\n', '\n', '    modifier _onlyOwner() {\n', '        require(msg.sender == owner, "JustHodl: only owner can perform this action");\n', '        _;\n', '    }\n', '\n', '    constructor() public payable JustHodlBase("JustHodl", "JH") {\n', '        uint256 restTokens = maxSupply;\n', '        uint256 time = now;\n', '        owner = msg.sender;\n', '        _mint(0x04689288b3d01d37a8fe85688042238c1Cd9e5FA, 6.21171493927601 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x04689288b3d01d37a8fe85688042238c1Cd9e5FA] = time;\n', '        restTokens -= 6.21171493927601 * (10**18);\n', '        _mint(0x048AAEA5D07a21196e6Df02E13cCDB23218f65Ae, 1.96477428231032 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x048AAEA5D07a21196e6Df02E13cCDB23218f65Ae] = time;\n', '        restTokens -= 1.96477428231032 * (10**18);\n', '        _mint(0x074abaaff265fD872F438D37d22d31bF1D93fdC8, 0.000000000000015438 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x074abaaff265fD872F438D37d22d31bF1D93fdC8] = time;\n', '        restTokens -= 0.000000000000015438 * (10**18);\n', '        _mint(0x15151Ac99BBa4eE669199EfbDCD0d3af6d70fCb6, 2.45174491323611 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x15151Ac99BBa4eE669199EfbDCD0d3af6d70fCb6] = time;\n', '        restTokens -= 2.45174491323611 * (10**18);\n', '        _mint(0x151c67BeCfd20664a8bfE016569eBCA04F71342E, 2.73602590645353 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x151c67BeCfd20664a8bfE016569eBCA04F71342E] = time;\n', '        restTokens -= 2.73602590645353 * (10**18);\n', '        _mint(0x17e00383A843A9922bCA3B280C0ADE9f8BA48449, 3.94812 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x17e00383A843A9922bCA3B280C0ADE9f8BA48449] = time;\n', '        restTokens -= 3.94812 * (10**18);\n', '        _mint(0x1c8ad03a5DE826D4E4bCb842E3604e1e2F3e8359, 23.9179371378008 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x1c8ad03a5DE826D4E4bCb842E3604e1e2F3e8359] = time;\n', '        restTokens -= 23.9179371378008 * (10**18);\n', '        _mint(0x1DF63e28C9ede182D6dfb6Bbc8C48D6fa537cCeF, 1.10783440633302 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x1DF63e28C9ede182D6dfb6Bbc8C48D6fa537cCeF] = time;\n', '        restTokens -= 1.10783440633302 * (10**18);\n', '        _mint(0x1F2FACAfF2A95027398F946D6868a7dBA5a97667, 91.3750565166852 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x1F2FACAfF2A95027398F946D6868a7dBA5a97667] = time;\n', '        restTokens -= 91.3750565166852 * (10**18);\n', '        _mint(0x205B7B1DAee38C4744C6F0b782E27BcA286c23db, 0.227673758895894 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x205B7B1DAee38C4744C6F0b782E27BcA286c23db] = time;\n', '        restTokens -= 0.227673758895894 * (10**18);\n', '        _mint(0x206971261B391763458134212FeEab2360874676, 1.77998731135435 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x206971261B391763458134212FeEab2360874676] = time;\n', '        restTokens -= 1.77998731135435 * (10**18);\n', '        _mint(0x25F0020A60aE7a375C0970750F5F85C6680bF9Bf, 10.3323681270537 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x25F0020A60aE7a375C0970750F5F85C6680bF9Bf] = time;\n', '        restTokens -= 10.3323681270537 * (10**18);\n', '        _mint(0x2759321Df4C0f0475c41BBf9d17891bd42E32C3c, 26.62505749454025 * (10**18)); // 0.5x\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x2759321Df4C0f0475c41BBf9d17891bd42E32C3c] = time;\n', '        restTokens -= 26.62505749454025 * (10**18);\n', '        _mint(0x2b6336412636616e9158252999432e1D6938F89F, 3.14908742648611 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x2b6336412636616e9158252999432e1D6938F89F] = time;\n', '        restTokens -= 3.14908742648611 * (10**18);\n', '        _mint(0x34F63cF9E5347D6B00403907ED65eF148177668B, 3.99 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x34F63cF9E5347D6B00403907ED65eF148177668B] = time;\n', '        restTokens -= 3.99 * (10**18);\n', '        _mint(0x3BAAaffbB4eDe1fFA7b512bCEA490cedA2dB0EE6, 1 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x3BAAaffbB4eDe1fFA7b512bCEA490cedA2dB0EE6] = time;\n', '        restTokens -= 1 * (10**18);\n', '        _mint(0x3C9b75bfa82DDbb4613A0EAe58d636260436273A, 0.937153789480753 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x3C9b75bfa82DDbb4613A0EAe58d636260436273A] = time;\n', '        restTokens -= 0.937153789480753 * (10**18);\n', '        _mint(0x3F3FD86382f4d69E1C4e4CF5296B82B3d90FD693, 25.08251279989605 * (10**18)); // 0.5x\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x3F3FD86382f4d69E1C4e4CF5296B82B3d90FD693] = time;\n', '        restTokens -= 25.08251279989605 * (10**18);\n', '        _mint(0x424dddc996c1dF3D3e9D3D9D89aa32eA5FaDb51f, 2.69635513967925 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x424dddc996c1dF3D3e9D3D9D89aa32eA5FaDb51f] = time;\n', '        restTokens -= 2.69635513967925 * (10**18);\n', '        _mint(0x449A7E1C10D2a0F68243FE104f9330fE16FeFe1A, 85.4291707701004 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x449A7E1C10D2a0F68243FE104f9330fE16FeFe1A] = time;\n', '        restTokens -= 85.4291707701004 * (10**18);\n', '        _mint(0x5139E12886d06C57F20A345c583AD7f3B67D3A5C, 0.672097642975642 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x5139E12886d06C57F20A345c583AD7f3B67D3A5C] = time;\n', '        restTokens -= 0.672097642975642 * (10**18);\n', '        _mint(0x52217443E3fBed2DdF2364F8E174deC88a72b3a6, 10.1 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x52217443E3fBed2DdF2364F8E174deC88a72b3a6] = time;\n', '        restTokens -= 10.1 * (10**18);\n', '        _mint(0x553C0A82a14F2fb77437917e87643A76FbEd8cf4, 1.2475 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x553C0A82a14F2fb77437917e87643A76FbEd8cf4] = time;\n', '        restTokens -= 1.2475 * (10**18);\n', '        _mint(0x56E2356c0754Fae16ac4AEB96D3C843bEc6aff67, 3.67995243382485 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x56E2356c0754Fae16ac4AEB96D3C843bEc6aff67] = time;\n', '        restTokens -= 3.67995243382485 * (10**18);\n', '        _mint(0x59d7b684bced2a28FedebFc09ce3A795F49a4620, 55.7747548243736 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x59d7b684bced2a28FedebFc09ce3A795F49a4620] = time;\n', '        restTokens -= 55.7747548243736 * (10**18);\n', '        _mint(0x5d1EE9f2A17ACcf72532Dd17ad36F0B8909a38CA, 5.13429897024556 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x5d1EE9f2A17ACcf72532Dd17ad36F0B8909a38CA] = time;\n', '        restTokens -= 5.13429897024556 * (10**18);\n', '        _mint(0x7527f8E3a272699f91065b13EF51292034437C7d, 1 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x7527f8E3a272699f91065b13EF51292034437C7d] = time;\n', '        restTokens -= 1 * (10**18);\n', '        _mint(0x78024ea589A845Fb72f285371901614BAA04C168, 2.23804228559044 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x78024ea589A845Fb72f285371901614BAA04C168] = time;\n', '        restTokens -= 2.23804228559044 * (10**18);\n', '        _mint(0x7944449Ed57CE81A6cF7fF557f3E917B7A468086, 2.37310923079961 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x7944449Ed57CE81A6cF7fF557f3E917B7A468086] = time;\n', '        restTokens -= 2.37310923079961 * (10**18);\n', '        _mint(0x830B69752e151Da5d31fb355fc6f636c3bf5e5f8, 2.43915888656735 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x830B69752e151Da5d31fb355fc6f636c3bf5e5f8] = time;\n', '        restTokens -= 2.43915888656735 * (10**18);\n', '        _mint(0x8A449393Ce741a3CeaBd9373008be53dB12Bf246, 4.29474339884683 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x8A449393Ce741a3CeaBd9373008be53dB12Bf246] = time;\n', '        restTokens -= 4.29474339884683 * (10**18);\n', '        _mint(0x8E09fC3D36B0595086538A92BEfE13D09C072661, 2.27418125998612 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x8E09fC3D36B0595086538A92BEfE13D09C072661] = time;\n', '        restTokens -= 2.27418125998612 * (10**18);\n', '        _mint(0x9016563F047fde2a42bf68D9D3670A91E746F1Bc, 1.57237850180211 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9016563F047fde2a42bf68D9D3670A91E746F1Bc] = time;\n', '        restTokens -= 1.57237850180211 * (10**18);\n', '        _mint(0x9317d29f94f9f399ED27048a14bBaE81D7fd73fB, 7.95 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9317d29f94f9f399ED27048a14bBaE81D7fd73fB] = time;\n', '        restTokens -= 7.95 * (10**18);\n', '        _mint(0x9853c360CcCaf3968f8DD46d50c133e61Ddb67b1, 125.215644991617 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9853c360CcCaf3968f8DD46d50c133e61Ddb67b1] = time;\n', '        restTokens -= 125.215644991617 * (10**18);\n', '        _mint(0x9bb354ddf9e43648A06FB69420425FF6C059D231, 68.9075461951348 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9bb354ddf9e43648A06FB69420425FF6C059D231] = time;\n', '        restTokens -= 68.9075461951348 * (10**18);\n', '        _mint(0x9d2c491a573114d5fBb7aaD5AFC29637F33F31a4, 3.98 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9d2c491a573114d5fBb7aaD5AFC29637F33F31a4] = time;\n', '        restTokens -= 3.98 * (10**18);\n', '        _mint(0x9df06e44585d1A5B9869a5E5630709e1C74B3b3A, 0.225499390566651 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0x9df06e44585d1A5B9869a5E5630709e1C74B3b3A] = time;\n', '        restTokens -= 0.225499390566651 * (10**18);\n', '        _mint(0xA3544D5a648d8B4649455C836743b4aB49289bc1, 0.239580725432249 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xA3544D5a648d8B4649455C836743b4aB49289bc1] = time;\n', '        restTokens -= 0.239580725432249 * (10**18);\n', '        _mint(0xa574469c959803481f25f825b41f1137BAfcF095, 5.55941808192726 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xa574469c959803481f25f825b41f1137BAfcF095] = time;\n', '        restTokens -= 5.55941808192726 * (10**18);\n', '        _mint(0xa5AAd2CD204e43dC16e4F93c4A20F4A3036124CD, 16.6411113838537 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xa5AAd2CD204e43dC16e4F93c4A20F4A3036124CD] = time;\n', '        restTokens -= 16.6411113838537 * (10**18);\n', '        _mint(0xAA3d85aD9D128DFECb55424085754F6dFa643eb1, 1.01188 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xAA3d85aD9D128DFECb55424085754F6dFa643eb1] = time;\n', '        restTokens -= 1.01188 * (10**18);\n', '        _mint(0xB086755a5B0b10BD53956936588555f586f5f49d, 74.9589937983907 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xB086755a5B0b10BD53956936588555f586f5f49d] = time;\n', '        restTokens -= 74.9589937983907 * (10**18);\n', '        _mint(0xB1Fe569478506aeFEC2bcc84321e8d2053FE3fBB, 9.55813705750499 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xB1Fe569478506aeFEC2bcc84321e8d2053FE3fBB] = time;\n', '        restTokens -= 9.55813705750499 * (10**18);\n', '        _mint(0xc07378E46f4a9D7de862f3d8a51182B48e5166b4, 3.85129183608496 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xc07378E46f4a9D7de862f3d8a51182B48e5166b4] = time;\n', '        restTokens -= 3.85129183608496 * (10**18);\n', '        _mint(0xC56c068C41149fAb578e6e9321517a6c43BE5920, 0.024279185132858 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xC56c068C41149fAb578e6e9321517a6c43BE5920] = time;\n', '        restTokens -= 0.024279185132858 * (10**18);\n', '        _mint(0xC7789B84995E56ef8c1902279695b7b72F6844C1, 2 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xC7789B84995E56ef8c1902279695b7b72F6844C1] = time;\n', '        restTokens -= 2 * (10**18);\n', '        _mint(0xe18bb5aF1c31177898Fe8EBb42E7C1A8F5d092D7, 3.53029091679964 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xe18bb5aF1c31177898Fe8EBb42E7C1A8F5d092D7] = time;\n', '        restTokens -= 3.53029091679964 * (10**18);\n', '        _mint(0xE20F75642b97c11Af651A81AfCBBc6D7B4E32981, 0.695620537288762 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xE20F75642b97c11Af651A81AfCBBc6D7B4E32981] = time;\n', '        restTokens -= 0.695620537288762 * (10**18);\n', '        _mint(0xe7bA0Da73b9d15f5D628BC99A2C014d839691762, 25.6815017450919 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xe7bA0Da73b9d15f5D628BC99A2C014d839691762] = time;\n', '        restTokens -= 25.6815017450919 * (10**18);\n', '        _mint(0xE950C23891E41E5bb3fe4a45DdE62752a4BBf9Fb, 0.0351835809405609 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xE950C23891E41E5bb3fe4a45DdE62752a4BBf9Fb] = time;\n', '        restTokens -= 0.0351835809405609 * (10**18);\n', '        _mint(0xEc1625f0Be12B31d8edfdd165f7750eE4630a475, 3.66244411786722 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xEc1625f0Be12B31d8edfdd165f7750eE4630a475] = time;\n', '        restTokens -= 3.66244411786722 * (10**18);\n', '        _mint(0xEe9EAFDdCDfbFFAb6B9E989B71a13684090cdfaa, 21.0815596983417 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xEe9EAFDdCDfbFFAb6B9E989B71a13684090cdfaa] = time;\n', '        restTokens -= 21.0815596983417 * (10**18);\n', '        _mint(0xf82fFEE7eda1DD212Dd0d867E57aa174dc207D7e, 3.19554497407819 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xf82fFEE7eda1DD212Dd0d867E57aa174dc207D7e] = time;\n', '        restTokens -= 3.19554497407819 * (10**18);\n', '        _mint(0xF872Ea3e3BC2d9EFcb660dE497A6F1c50E4ad25D, 25.6350510199272 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xF872Ea3e3BC2d9EFcb660dE497A6F1c50E4ad25D] = time;\n', '        restTokens -= 25.6350510199272 * (10**18);\n', '        _mint(0xFB04D99d7024bef7047cF6a16c4e33F48e1C4981, 1.79070215317426 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xFB04D99d7024bef7047cF6a16c4e33F48e1C4981] = time;\n', '        restTokens -= 1.79070215317426 * (10**18);\n', '        _mint(0xFC04Ec649be75e2b9bFe15d49e385F65277103b4, 2.1958520537044 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xFC04Ec649be75e2b9bFe15d49e385F65277103b4] = time;\n', '        restTokens -= 2.1958520537044 * (10**18);\n', '        _mint(0xFfe10BE9b63A4005DD1e631eE6fca3f6D6024269, 3.52247792997366 * (10**18));\n', '        _totalHodlersCount++;\n', '        _hodlerHodlTime[0xFfe10BE9b63A4005DD1e631eE6fca3f6D6024269] = time;\n', '        restTokens -= 3.52247792997366 * (10**18);\n', '\n', '        _holdersSupply = maxSupply - restTokens;\n', '        _mint(msg.sender, restTokens);\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function setOwner(address _address) public _onlyOwner {\n', '        owner = _address;\n', '    }\n', '\n', '    function isSenderException(address _address) public view returns (bool) {\n', '        return senderExceptions[_address].exists;\n', '    }\n', '\n', '    function addSenderException(address _address) public _onlyOwner returns (bool) {\n', '        require(!isSenderException(_address), "JustHodl: address is already present in the sender exceptions list");\n', '        senderExceptions[_address] = Addr(_address, true);\n', '        return true;\n', '    }\n', '\n', '    function removeSenderException(address _address) public _onlyOwner returns (bool) {\n', '        require(isSenderException(_address), "JustHodl: address is not present in the sender exceptions list");\n', '        delete senderExceptions[_address];\n', '        return true;\n', '    }\n', '\n', '    function isRecipientException(address _address) public view returns (bool) {\n', '        return recipientExceptions[_address].exists;\n', '    }\n', '\n', '    function addRecipientException(address _address) public _onlyOwner returns (bool) {\n', '        require(!isRecipientException(_address), "JustHodl: address is already present in the recipient exceptions list");\n', '        recipientExceptions[_address] = Addr(_address, true);\n', '        return true;\n', '    }\n', '\n', '    function removeRecipientException(address _address) public _onlyOwner returns (bool) {\n', '        require(isRecipientException(_address), "JustHodl: address is not present in the recipient exceptions list");\n', '        delete recipientExceptions[_address];\n', '        return true;\n', '    }\n', '\n', '    function isWhitelistedSender(address _address) public view returns (bool) {\n', '        return whitelistedSenders[msg.sender][_address].exists;\n', '    }\n', '\n', '    function addWhitelistedSender(address _address) public returns (bool) {\n', '        require(!isWhitelistedSender(_address), "JustHodl: address is already present in the whitelist");\n', '        whitelistedSenders[msg.sender][_address] = Addr(_address, true);\n', '        return true;\n', '    }\n', '\n', '    function removeWhitelistedSender(address _address) public returns (bool) {\n', '        require(isWhitelistedSender(_address), "JustHodl: address is not present in the whitelist");\n', '        delete whitelistedSenders[msg.sender][_address];\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public override returns (bool) {\n', '        bool isFromHodler = _isValidHodler(msg.sender);\n', '        bool isToHodler = _isValidHodler(_to);\n', '        if (_allowedToSend(msg.sender, _to)) {\n', '            uint256 penalty = 0;\n', '            uint256 finalValue = _value;\n', '            uint256 pureFromBalanceBeforeThx = pureBalanceOf(msg.sender);\n', '            uint256 pureToBalanceBeforeThx = pureBalanceOf(_to);\n', '            if (isFromHodler && !hodlMinimumAchived(msg.sender)) {\n', '                penalty = _value.mul(penaltyRatio).div(100);\n', '                finalValue = _value.sub(penalty);\n', '            }\n', '            if (super.transfer(_to, finalValue)) {\n', '                if (penalty > 0) {\n', '                    _balances[msg.sender] = _balances[msg.sender].sub(penalty);\n', '                }\n', '                _updateTimer(msg.sender, _to, isFromHodler, isToHodler);\n', '                _updateHodlersCount(msg.sender, isFromHodler, isToHodler, pureToBalanceBeforeThx);\n', '                _updateBonusSupply(_value, penalty, pureFromBalanceBeforeThx);\n', '                _updateHoldersSupply(isFromHodler, isToHodler, finalValue, penalty, pureFromBalanceBeforeThx);\n', '                _updateAllowedSender(msg.sender, _to);\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\n', '        bool isFromHodler = _isValidHodler(_from);\n', '        bool isToHodler = _isValidHodler(_to);\n', '        if (_allowedToSend(_from, _to)) {\n', '            uint256 penalty = 0;\n', '            uint256 finalValue = _value;\n', '            uint256 pureFromBalanceBeforeThx = pureBalanceOf(_from);\n', '            uint256 pureToBalanceBeforeThx = pureBalanceOf(_to);\n', '            if (isFromHodler && !hodlMinimumAchived(_from)) {\n', '                penalty = _value.mul(penaltyRatio).div(100);\n', '                finalValue = _value.sub(penalty);\n', '            }\n', '            if (super.transferFrom(_from, _to, finalValue)) {\n', '                if (penalty > 0) {\n', '                    _balances[_from] = _balances[_from].sub(penalty);\n', '                }\n', '                _updateTimer(_from, _to, isFromHodler, isToHodler);\n', '                _updateHodlersCount(_from, isFromHodler, isToHodler, pureToBalanceBeforeThx);\n', '                _updateBonusSupply(_value, penalty, pureFromBalanceBeforeThx);\n', '                _updateHoldersSupply(isFromHodler, isToHodler, finalValue, penalty, pureFromBalanceBeforeThx);\n', '                _updateAllowedSender(_from, _to);\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _allowedToSend(address _from, address _to) private view returns (bool) {\n', '        require (\n', '            _from == owner ||\n', '            _isContract(_to) ||\n', '            isSenderException(_from) ||\n', '            isRecipientException(_to) ||\n', '            whitelistedSenders[_to][_from].exists,\n', '            "JustHodl: you are not allowed to send tokens to that address"\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function _updateAllowedSender(address _from, address _to) private {\n', '        if (!whitelistedSenders[_from][_to].exists) {\n', '            whitelistedSenders[_from][_to] = Addr(_to, true);\n', '        }\n', '    }\n', '\n', '    function _updateTimer(address _from, address _to, bool _isFromHodler, bool _isToHodler) private {\n', '        if (_isFromHodler && _balances[_from] == 0) {\n', '            _totalHodlSinceLastBuy = _totalHodlSinceLastBuy.sub(_hodlerHodlTime[_from]);\n', '            _hodlerHodlTime[_from] = 0;\n', '        }\n', '        if (_isToHodler) {\n', '            uint256 oldLastBuy = _hodlerHodlTime[_to];\n', '            uint256 newLastBuy = now;\n', '            _totalHodlSinceLastBuy = _totalHodlSinceLastBuy.add(newLastBuy).sub(oldLastBuy);\n', '            _hodlerHodlTime[_to] = newLastBuy;\n', '        }\n', '    }\n', '\n', '    function _updateHodlersCount(address _from, bool _isFromHodler, bool _isToHodler, uint256 _pureToBalanceBeforeThx) private {\n', '        if (_isFromHodler && _balances[_from] == 0) {\n', '            _totalHodlersCount--;\n', '        }\n', '        if (_isToHodler && _pureToBalanceBeforeThx == 0) {\n', '            _totalHodlersCount++;\n', '        }\n', '    }\n', '\n', '    function _updateBonusSupply(uint256 _value, uint256 _penalty, uint256 _pureFromBalanceBeforeThx) private {\n', '        if (_value > _pureFromBalanceBeforeThx) {\n', '            uint256 spentBonus = _value.sub(_pureFromBalanceBeforeThx);\n', '            _bonusSupply = _bonusSupply.sub(spentBonus).add(_penalty);\n', '        } else {\n', '            _bonusSupply = _bonusSupply.add(_penalty);\n', '        }\n', '    }\n', '\n', '    function _updateHoldersSupply(bool _isFromHodler, bool _isToHodler, uint256 _value, uint256 _penalty, uint256 _pureFromBalanceBeforeThx) private {\n', '        uint256 finalValue = _holdersSupply;\n', '        uint256 subValue = _value;\n', '        if (_value > _pureFromBalanceBeforeThx) {\n', '            subValue = _pureFromBalanceBeforeThx;\n', '        }\n', '        if (_isFromHodler) {\n', '            finalValue = finalValue.sub(subValue).sub(_penalty);\n', '        }\n', '        if (_isToHodler) {\n', '            finalValue = finalValue.add(_value);\n', '        }\n', '        _holdersSupply = finalValue;\n', '    }\n', '\n', '    function _isValidHodler(address _address) private view returns (bool) {\n', '        return !_isContract(_address) && _address != owner;\n', '    }\n', '\n', '    function _isContract(address _address) private view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(_address) }\n', '        return size > 0;\n', '    }\n', '}']