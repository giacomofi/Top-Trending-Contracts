['//author: 谛听\n', '\n', '// File: localhost/contracts/interfaces/IOKra.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IOKra {\n', '    function  mint(address _to, uint256 _amount) external returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '}\n', '// File: localhost/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '    event Harvest(address indexed sender, uint amount);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to,address user,bool emerg) external returns (uint amount0, uint amount1);\n', '    function swap(uint[3] memory amount, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function pending(address user) external view returns (uint);\n', '    function harvestNow(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address,address) external;\n', '}\n', '// File: localhost/contracts/interfaces/IUniswapV2Callee.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Callee {\n', '    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IERC20Uniswap {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: localhost/contracts/libraries/UQ112x112.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', '\n', '// range: [0, 2**112 - 1]\n', '// resolution: 1 / 2**112\n', '\n', 'library UQ112x112 {\n', '    uint224 constant Q112 = 2**112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 y) internal pure returns (uint224 z) {\n', '        z = uint224(y) * Q112; // never overflows\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n', '        z = x / uint224(y);\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/libraries/Math.sol\n', '\n', ' pragma solidity =0.6.12;\n', '\n', '// a library for performing various math operations\n', '\n', 'library Math {\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IUniswapV2ERC20.sol\n', '\n', '    pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2ERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '// File: localhost/contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        require(b > 0, 'ds-math-div-overflow');\n", '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '\n', '// File: localhost/contracts/OKSwapERC20.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', '\n', 'contract OKSwapERC20 is IUniswapV2ERC20 {\n', '    using SafeMathUniswap for uint;\n', '\n', "    string public override constant name = 'OKSwap LPT';\n", "    string public override constant symbol = 'OKLP';\n", '    uint8 public override constant decimals = 18;\n', '    uint  public  override totalSupply;\n', '    mapping(address => uint) public override balanceOf;\n', '    mapping(address => mapping(address => uint)) public override allowance;\n', '\n', '    bytes32 public override DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public override nonces;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    constructor() public {\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external override  returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n', "        require(deadline >= block.timestamp, 'OKSwapERC20: EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'OKSwapERC20: INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/OKSwapPair.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract OKSwapPair is OKSwapERC20 {\n', '\n', '    address public okra;\n', '\n', '    using SafeMathUniswap  for uint;\n', '    using UQ112x112 for uint224;\n', '\n', '    uint public   constant MINIMUM_LIQUIDITY = 10 ** 3;\n', '    uint public constant BONUS_BLOCKNUM = 36000;\n', '    uint public constant BASECAP = 5120 * (10 ** 18);\n', '    uint public constant TEAM_BLOCKNUM = 13200000;\n', '    uint private constant TEAM_CAP = 15000000 * (10 ** 18);\n', '    uint private constant VC_CAP = 5000000 * (10 ** 18);\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '    address public   factory;\n', '    address public   token0;\n', '    address public  token1;\n', '    \n', '\n', '    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n', '    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n', '    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n', '\n', '    uint public  price0CumulativeLast;\n', '    uint public  price1CumulativeLast;\n', '    uint public  kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n', '\n', '    mapping(address => uint) public userPools;\n', '\n', '    uint private unlocked = 1;\n', '    modifier lock() {\n', "        require(unlocked == 1, 'OKSwap: LOCKED');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '\n', '    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'OKSwap: TRANSFER_FAILED');\n", '    }\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '    event Harvest(address indexed sender, uint amount);\n', '\n', '    constructor() public {\n', '        factory = msg.sender;\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(address _token0, address _token1, address _okra) external {\n', "        require(msg.sender == factory, 'OKSwap: FORBIDDEN');\n", '        // sufficient check\n', '        token0 = _token0;\n', '        token1 = _token1;\n', '        okra = _okra;\n', '    }\n', '\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n', "        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'OKSwap: OVERFLOW');\n", '        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '        // overflow is desired\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '\n', '    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n', '    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n', '//        address feeTo = IOkswapFactory(factory).feeTo();\n', '        (,,,address feeHolder,address burnHolder,) = IOkswapFactory(factory).getBonusConfig(address(this));\n', '        feeOn = true;\n', '        uint _kLast = kLast;\n', '        // gas savings\n', '        if (_kLast != 0) {\n', '            uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n', '            uint rootKLast = Math.sqrt(_kLast);\n', '            if (rootK > rootKLast) {\n', '                uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n', '                uint denominator = rootK.mul(5).add(rootKLast);\n', '                uint liquidity = numerator.mul(2) / denominator;\n', '                if (liquidity > 0) {\n', '                    if (feeHolder != address(0)) _mint(feeHolder, liquidity);\n', '                    if (burnHolder != address(0)) _mint(burnHolder, liquidity);\n', '                }\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function mint(address to) external lock returns (uint liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        uint balance0 = IERC20Uniswap(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20Uniswap(token1).balanceOf(address(this));\n', '        uint amount0 = balance0.sub(_reserve0);\n', '        uint amount1 = balance1.sub(_reserve1);\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply;\n', '        // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '            _mint(address(0), MINIMUM_LIQUIDITY);\n', '        } else {\n', '            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n', '        }\n', "        require(liquidity > 0, 'OKSwap: INSUFFICIENT_LIQUIDITY_MINTED');\n", '        if (IOkswapFactory(factory).isBonusPair(address(this))) {\n', '            uint startAtBlock = userPools[to];\n', '            if (startAtBlock > 0) {\n', '                uint liquid = balanceOf[to];\n', '                userPools[to] = startAtBlock.mul(liquid).add(block.number.mul(liquidity)) / liquid.add(liquidity);\n', '            }else{\n', '                userPools[to] = block.number;\n', '            }\n', '           \n', '        }\n', '        _mint(to, liquidity);\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        // reserve0 and reserve1 are up-to-date\n', '        \n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function burn(address to,address user,bool emerg) external lock returns (uint amount0, uint amount1) {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        // gas savings\n', '        address _token0 = token0;\n', '        // gas savings\n', '        address _token1 = token1;\n', '        // gas savings\n', '        uint balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\n', '        uint balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\n', '        uint liquidity = balanceOf[address(this)];\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply;\n', '        // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = liquidity.mul(balance0) / _totalSupply;\n', '        amount1 = liquidity.mul(balance1) / _totalSupply;\n', '        // using balances ensures pro-rata distribution\n', "        require(amount0 > 0 && amount1 > 0, 'OKSwap: INSUFFICIENT_LIQUIDITY_BURNED');\n", '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\n', '        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        // reserve0 and reserve1 are up-to-date\n', '\n', '        if (!emerg) _getHarvest(user);\n', '\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '    \n', '    function _getHarvest(address _to) private {\n', '\n', '            (uint based,,,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\n', '            if (based > 0 ) {\n', '                uint harvestLiquid = balanceOf[_to];\n', '                uint pendingAmount = _getHarvestAmount(harvestLiquid, based, userPools[_to]);\n', '                uint max = BASECAP + IOKra(okra).balanceOf(_to);\n', '                uint mintAmount = pendingAmount <= max ? pendingAmount : max;\n', '                userPools[_to] = block.number;\n', '                IOkswapFactory(factory).realize(_to, mintAmount);\n', '\n', '                emit Harvest(msg.sender, mintAmount);\n', '            }\n', '\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(uint[3] memory amount, address to, bytes calldata data) external lock {\n', '        uint amount0Out = amount[0];\n', '        uint amount1Out = amount[1];\n', '        uint amountIn = amount[2];\n', '\n', "        require(amount0Out > 0 || amount1Out > 0, 'OKSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        // gas savings\n', "        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'OKSwap: INSUFFICIENT_LIQUIDITY');\n", '\n', '        uint balance0;\n', '        uint balance1;\n', '        {// scope for _token{0,1}, avoids stack too deep errors\n', "            require(to != token0 && to != token1, 'OKSwap: INVALID_TO');\n", '            if (amount0Out > 0) {_safeTransfer(token0, to, amount0Out);assign(amount0Out,token1,token0,amountIn,to);}\n', '            if (amount1Out > 0) {_safeTransfer(token1, to, amount1Out);assign(amount1Out,token0,token1,amountIn,to);}\n', '            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = IERC20Uniswap(token0).balanceOf(address(this));\n', '            balance1 = IERC20Uniswap(token1).balanceOf(address(this));\n', '\n', '        }\n', '\n', '        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n', "        require(amount0In > 0 || amount1In > 0, 'OKSwap: INSUFFICIENT_INPUT_AMOUNT');\n", '        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\n', '            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n', '            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n', "            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'UniswapV2: K');\n", '        }\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n', '    }\n', '    \n', '\n', '    function assign(uint amountOut,address tokenIn, address tokenOut, uint amountIn, address to) private {\n', '        (,,address tokenAddress,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\n', '        if (tokenAddress == tokenIn) {\n', '            _tradeBonus(tokenIn, amountIn, to);\n', '        }else if (tokenAddress == tokenOut) {\n', '            _tradeBonus(tokenIn, amountOut, to);\n', '        } \n', '    }\n', '    \n', '    \n', '    function _tradeBonus(address _token, uint _amountOut, address _to) private {\n', '        IOkswapFactory _factory = IOkswapFactory(factory);\n', '        if (_token != address(okra) && _factory.isBonusPair(address(this))) {\n', '            uint sysCf = _factory.getSysCf();\n', '            (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\n', '            (,uint share, ,address teamHolder,,address vcHolder) = _factory.getBonusConfig(address(this));\n', '            uint tradeMint = _amountOut.div(100).mul(share).div(sysCf);\n', '            tradeMint = tradeMint.mul(elac0).div(elac1);\n', '            _realize(tradeMint,_to,teamHolder,vcHolder);\n', '        }\n', '    }\n', '\n', '\n', '    function _realize(uint tradeMint,address _to,address teamHolder,address vcHolder) private {\n', '        if (tradeMint > 0) {\n', '            IOkswapFactory(factory).realize(_to, tradeMint);\n', '            uint syncMint = tradeMint.div(100).mul(2);\n', '            uint vcNum = IOkswapFactory(factory).vcAmount();\n', '            uint vcMint = vcNum.add(syncMint) >= VC_CAP ? VC_CAP.sub(vcNum) : syncMint;\n', '            if (vcMint > 0 && vcHolder != address(0)) {\n', '                IOkswapFactory(factory).updateVcAmount(vcMint);\n', '                IOkswapFactory(factory).realize(vcHolder, vcMint);\n', '            }\n', '            if (block.number >= TEAM_BLOCKNUM) {\n', '                uint teamNum = IOkswapFactory(factory).teamAmount();\n', '                syncMint = syncMint.mul(3);\n', '                uint teamMint = teamNum.add(syncMint) >= TEAM_CAP ? TEAM_CAP.sub(teamNum) : syncMint;\n', '                if (teamMint > 0 && teamHolder != address(0)){\n', '                    IOkswapFactory(factory).updateTeamAmount(teamMint);\n', '                    IOkswapFactory(factory).realize(teamHolder, teamMint);\n', '                }\n', '            }\n', '\n', '            emit Harvest(msg.sender, tradeMint);\n', '        }\n', '    }\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external lock {\n', '        address _token0 = token0;\n', '        address _token1 = token1;\n', '        _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));\n', '        _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));\n', '    }\n', '\n', '\n', '    function _getHarvestAmount(uint _amount, uint _based, uint _startBlock) private view returns (uint){\n', '        uint sysCf = IOkswapFactory(factory).getSysCf();\n', '        (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\n', '\n', '        uint point = (block.number.sub(_startBlock)) / BONUS_BLOCKNUM;\n', '\n', '        uint mintAmount;\n', '        if (point == 0) {\n', '            mintAmount = _amount.mul(block.number.sub(_startBlock));\n', '        } else if (point == 1) {\n', '            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\n', '            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM));\n', '            mintAmount = amount0.add(amount1.mul(2));\n', '        } else {\n', '            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\n', '            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM).sub(BONUS_BLOCKNUM));\n', '            mintAmount = amount0.add(amount0.mul(2)).add(amount1.mul(3));\n', '        }\n', '\n', '        return mintAmount.mul(elac0).div(elac1).div(sysCf).mul(100).div(_based);\n', '    }\n', '\n', '\n', '    function getblock(address _user) external view returns (uint256){\n', '        return userPools[_user];\n', '    }\n', '\n', '    function pending(address _user) external view returns (uint256) {\n', '        (uint _based,,,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\n', '        uint sysCf = IOkswapFactory(factory).getSysCf();\n', '        (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\n', '        uint _startBlock = userPools[_user];\n', '        uint _amount = balanceOf[_user];\n', '        require(block.number >= _startBlock, "OKSwap:FAIL");\n', '\n', '        uint point = (block.number.sub(_startBlock)) / BONUS_BLOCKNUM;\n', '        uint mintAmount;\n', '        if (point == 0) {\n', '            mintAmount = _amount.mul(block.number.sub(_startBlock));\n', '        } else if (point == 1) {\n', '            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\n', '            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM));\n', '            mintAmount = amount0.add(amount1.mul(2));\n', '        } else {\n', '            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\n', '            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM).sub(BONUS_BLOCKNUM));\n', '            mintAmount = amount0.add(amount0.mul(2)).add(amount1.mul(3));\n', '        }\n', '        return mintAmount.mul(elac0).div(elac1).div(sysCf).mul(100).div(_based);\n', '    }\n', '\n', '\n', '    function harvestNow() external {\n', '        address _to = msg.sender;\n', '        (uint based,,,,, ) = IOkswapFactory(factory).getBonusConfig(address(this));\n', "        require(based > 0, 'OKSwap: FAIL_BASED');\n", '        uint _amount = balanceOf[_to];\n', '        uint pendingAmount = _getHarvestAmount(_amount, based, userPools[_to]);\n', '        uint max = BASECAP + IOKra(okra).balanceOf(_to);\n', '        uint mintAmount = pendingAmount <= max ? pendingAmount : max;\n', '        userPools[_to] = block.number;\n', '        IOkswapFactory(factory).realize(_to, mintAmount);\n', '        emit Harvest(msg.sender, mintAmount);\n', '    }\n', '\n', '    // force reserves to match balances\n', '    function sync() external lock {\n', '        _update(IERC20Uniswap(token0).balanceOf(address(this)), IERC20Uniswap(token1).balanceOf(address(this)), reserve0, reserve1);\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IOkswapFactory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IOkswapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function teamAmount() external view returns (uint);\n', '    function vcAmount() external view returns (uint);\n', '    function isBonusPair(address) external view returns (bool);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '    function changeSetter(address) external;\n', '    function setFeeHolder(address) external;\n', '    function setBurnHolder(address) external;\n', '    function setVcHolder(address) external;\n', '\n', '    function pairCodeHash() external pure returns (bytes32);\n', '    function addBonusPair(uint, uint, address, address, bool) external ;\n', '    function getBonusConfig(address) external view returns (uint, uint,address,address,address,address);\n', '    function getElac() external view returns (uint, uint);\n', '    function setElac(uint,uint) external;\n', '    function updateTeamAmount(uint) external;\n', '    function updateVcAmount(uint) external;\n', '    function realize(address,uint) external;\n', '\n', '    function getSysCf() external view returns (uint);\n', '}\n', '\n', '// File: localhost/contracts/OKSwapFactory.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', '\n', '\n', 'contract OKSwapFactory is IOkswapFactory {\n', '    address private  setter;\n', '    uint    public  startBlock;\n', '    address public  okra;\n', '    address public  feeHolder;\n', '    address public  burnHolder;\n', '    address public  vcHolder;\n', '    address public  elacSetter;\n', '    uint public override teamAmount;\n', '    uint public override vcAmount;\n', '    uint private  elac0;\n', '    uint private  elac1;\n', '\n', '    mapping(address => mapping(address => address)) public override getPair;\n', '    address[] public override allPairs;\n', '    mapping(address => bool) public override isBonusPair;\n', '    \n', '    struct mintPair {\n', '        uint32 based;\n', '        uint8 share;\n', '        address token;\n', '    }\n', '\n', '    mapping(address => mintPair) public mintPairs;\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    constructor(address _setter,address _okra) public {\n', '        setter = _setter;\n', '        startBlock = block.number;\n', '        okra = _okra;\n', '        elacSetter = _setter;\n', '        elac0 = 1;\n', '        elac1 = 1;\n', '    }\n', '\n', '    function allPairsLength() external override view returns (uint) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function pairCodeHash() external override pure returns (bytes32) {\n', '        return keccak256(type(OKSwapPair).creationCode);\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n', "        require(tokenA != tokenB, 'OKSwap: IDENTICAL_ADDRESSES');\n", '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'OKSwap: ZERO_ADDRESS');\n", "        require(getPair[token0][token1] == address(0), 'OKSwap: PAIR_EXISTS'); // single check is sufficient\n", '        bytes memory bytecode = type(OKSwapPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        OKSwapPair(pair).initialize(token0, token1,okra);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '\n', '\n', '    function changeSetter(address _setter) external override {\n', "        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\n", '        setter = _setter;\n', '    }\n', '    \n', '    function setFeeHolder(address _holder) external override {\n', "        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\n", '        feeHolder = _holder;\n', '    }\n', '    \n', '    function setBurnHolder(address _holder) external override {\n', "        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\n", '        burnHolder = _holder;\n', '    }\n', '\n', '    function setVcHolder(address _holder) external override {\n', "        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\n", '        vcHolder = _holder;\n', '    }\n', '\n', '    function setElacContract(address _setter) external {\n', "        require(msg.sender == elacSetter, 'OKSwap: FORBIDDEN');\n", '        elacSetter = _setter;\n', '    }\n', '    \n', '\n', '    function getSysCf() external override view returns (uint){\n', '        uint cf = (block.number - startBlock) / 512000 ;\n', '        return cf <= 0 ? 1 : (2 ** cf);\n', '    }\n', '\n', '    function addBonusPair(uint _based, uint _share, address _pair, address _token, bool _update) external override {\n', '        require(msg.sender == setter, "OKSwap: FORBIDDEN");\n', '        if (_update) {\n', '            require(mintPairs[_pair].token != address(0),"OKSwap: TOKEN");\n', '            mintPairs[_pair].based = uint32(_based);\n', '            mintPairs[_pair].share = uint8(_share);\n', '            mintPairs[_pair].token = _token;\n', '            isBonusPair[_pair] = !isBonusPair[_pair];\n', '        }\n', '\n', '        mintPairs[_pair].based = uint32(_based);\n', '        mintPairs[_pair].share = uint8(_share);\n', '        mintPairs[_pair].token = _token;\n', '        \n', '        isBonusPair[_pair] = true;\n', '    }\n', '    \n', '    function getBonusConfig(address _pair) external override view returns (uint _based, uint _share,address _token,address _feeHolder,address _burnHolder,address _vcHolder) {\n', '        _based = mintPairs[_pair].based;\n', '        _share = mintPairs[_pair].share;\n', '        _token = mintPairs[_pair].token;\n', '        _feeHolder = feeHolder;\n', '        _burnHolder = burnHolder;\n', '        _vcHolder = vcHolder;\n', '    }\n', '\n', '    function getElac() external override view returns (uint _elac0, uint _elac1) {\n', '        _elac0 = elac0;\n', '        _elac1 = elac1;\n', '    }\n', '\n', '\n', '    function setElac(uint _elac0,uint _elac1) external override {\n', "        require(msg.sender == elacSetter, 'OKSwap: FORBIDDEN');\n", '        elac0 = _elac0;\n', '        elac1 = _elac1;\n', '    }\n', '\n', '    function updateVcAmount(uint amount) external override {\n', '        require(isBonusPair[msg.sender], "OKSwap: FORBIDDEN");\n', '        require(amount > 0, "OKSwap: Ops");\n', '        vcAmount += amount;\n', '    }\n', '\n', '    function updateTeamAmount(uint amount) external override {\n', '        require(isBonusPair[msg.sender], "OKSwap: FORBIDDEN");\n', '        require(amount > 0, "OKSwap: Ops");\n', '        teamAmount += amount;\n', '    }\n', '\n', '    function realize(address _to,uint amount) external override {\n', '        require(isBonusPair[msg.sender], "OKSwap: FORBIDDEN");\n', '        IOKra(okra).mint(_to, amount);\n', '    }\n', '\n', '}']