['pragma solidity 0.5.16;\n', '\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract IERC20WithCheckpointing {\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256);\n', '}\n', '\n', 'contract IIncentivisedVotingLockup is IERC20WithCheckpointing {\n', '\n', '    function getLastUserPoint(address _addr) external view returns(int128 bias, int128 slope, uint256 ts);\n', '    function createLock(uint256 _value, uint256 _unlockTime) external;\n', '    function withdraw() external;\n', '    function increaseLockAmount(uint256 _value) external;\n', '    function increaseLockLength(uint256 _unlockTime) external;\n', '    function eject(address _user) external;\n', '    function expireContract() external;\n', '\n', '    function claimReward() public;\n', '    function earned(address _account) public view returns (uint256);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'contract ModuleKeys {\n', '\n', '    // Governance\n', '    // ===========\n', '                                                // Phases\n', '    // keccak256("Governance");                 // 2.x\n', '    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");                     // 1.2\n', '    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");                  // 1.0\n', '    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");                  // 1.2\n', '    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");                    // 1.2\n', '    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");            // 2.x\n', '    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");                   // 1.1\n', '    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");             // 1.0\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '    function cancelProposedModule(bytes32 _key) external;\n', '    function acceptProposedModule(bytes32 _key) external;\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '    function cancelLockModule(bytes32 _key) external;\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'contract Module is ModuleKeys {\n', '\n', '    INexus public nexus;\n', '\n', '    /**\n', '     * @dev Initialises the Module by setting publisher addresses,\n', '     *      and reading all available system module information\n', '     */\n', '    constructor(address _nexus) internal {\n', '        require(_nexus != address(0), "Nexus is zero address");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(\n', '            msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IRewardsDistributionRecipient {\n', '    function notifyRewardAmount(uint256 reward) external;\n', '    function getRewardToken() external view returns (IERC20);\n', '}\n', '\n', 'contract RewardsDistributionRecipient is IRewardsDistributionRecipient, Module {\n', '\n', '    // @abstract\n', '    function notifyRewardAmount(uint256 reward) external;\n', '    function getRewardToken() external view returns (IERC20);\n', '\n', '    // This address has the ability to distribute the rewards\n', '    address public rewardsDistributor;\n', '\n', '    /** @dev Recipient is a module, governed by mStable governance */\n', '    constructor(address _nexus, address _rewardsDistributor)\n', '        internal\n', '        Module(_nexus)\n', '    {\n', '        rewardsDistributor = _rewardsDistributor;\n', '    }\n', '\n', '    /**\n', '     * @dev Only the rewards distributor can notify about rewards\n', '     */\n', '    modifier onlyRewardsDistributor() {\n', '        require(msg.sender == rewardsDistributor, "Caller is not reward distributor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the rewardsDistributor - only called by mStable governor\n', '     * @param _rewardsDistributor   Address of the new distributor\n', '     */\n', '    function setRewardsDistribution(address _rewardsDistributor)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        rewardsDistributor = _rewardsDistributor;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library SignedSafeMath128 {\n', '    int128 constant private _INT128_MIN = -2**127;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int128 a, int128 b) internal pure returns (int128) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT128_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int128 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int128 a, int128 b) internal pure returns (int128) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT128_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int128 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int128 a, int128 b) internal pure returns (int128) {\n', '        int128 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int128 a, int128 b) internal pure returns (int128) {\n', '        int128 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * @dev bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x.mul(FULL_SCALE);\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x.mul(ratio);\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil.div(RATIO_SCALE);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        uint256 y = x.mul(RATIO_SCALE);\n', '        // return 1e22 / 1e12 = 1e10\n', '        return y.div(ratio);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', 'library Root {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Returns the square root of a given number\n', '     * @param x Input\n', '     * @return y Square root of Input\n', '     */\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x.add(1)).div(2);\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x.div(z).add(z)).div(2);\n', '        }\n', '    }\n', '}\n', '\n', '/* solium-disable security/no-block-members */\n', '/**\n', ' * @title  IncentivisedVotingLockup\n', ' * @author Voting Weight tracking & Decay\n', ' *             -> Curve Finance (MIT) - forked & ported to Solidity\n', ' *             -> https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\n', ' *         osolmaz - Research & Reward distributions\n', ' *         alsco77 - Solidity implementation\n', ' * @notice Lockup MTA, receive vMTA (voting weight that decays over time), and earn\n', ' *         rewards based on staticWeight\n', ' * @dev    Supports:\n', ' *            1) Tracking MTA Locked up (LockedBalance)\n', ' *            2) Pull Based Reward allocations based on Lockup (Static Balance)\n', ' *            3) Decaying voting weight lookup through CheckpointedERC20 (balanceOf)\n', ' *            4) Ejecting fully decayed participants from reward allocation (eject)\n', ' *            5) Migration of points to v2 (used as multiplier in future) ***** (rewardsPaid)\n', ' *            6) Closure of contract (expire)\n', ' */\n', 'contract IncentivisedVotingLockup is\n', '    IIncentivisedVotingLockup,\n', '    ReentrancyGuard,\n', '    RewardsDistributionRecipient\n', '{\n', '    using StableMath for uint256;\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath128 for int128;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /** Shared Events */\n', '    event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\n', '    event Withdraw(address indexed provider, uint256 value, uint256 ts);\n', '    event Ejected(address indexed ejected, address ejector, uint256 ts);\n', '    event Expired();\n', '    event RewardAdded(uint256 reward);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '\n', '    /** Shared Globals */\n', '    IERC20 public stakingToken;\n', '    uint256 private constant WEEK = 7 days;\n', '    uint256 public constant MAXTIME = 365 days;\n', '    uint256 public END;\n', '    bool public expired = false;\n', '\n', '    /** Lockup */\n', '    uint256 public globalEpoch;\n', '    Point[] public pointHistory;\n', '    mapping(address => Point[]) public userPointHistory;\n', '    mapping(address => uint256) public userPointEpoch;\n', '    mapping(uint256 => int128) public slopeChanges;\n', '    mapping(address => LockedBalance) public locked;\n', '\n', '    // Voting token - Checkpointed view only ERC20\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals = 18;\n', '\n', '    /** Rewards */\n', '    // Updated upon admin deposit\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;\n', '\n', '    // Globals updated per stake/deposit/withdrawal\n', '    uint256 public totalStaticWeight = 0;\n', '    uint256 public lastUpdateTime = 0;\n', '    uint256 public rewardPerTokenStored = 0;\n', '\n', '    // Per user storage updated per stake/deposit/withdrawal\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '    mapping(address => uint256) public rewardsPaid;\n', '\n', '    /** Structs */\n', '    struct Point {\n', '        int128 bias;\n', '        int128 slope;\n', '        uint256 ts;\n', '        uint256 blk;\n', '    }\n', '\n', '    struct LockedBalance {\n', '        int128 amount;\n', '        uint256 end;\n', '    }\n', '\n', '    enum LockAction {\n', '        CREATE_LOCK,\n', '        INCREASE_LOCK_AMOUNT,\n', '        INCREASE_LOCK_TIME\n', '    }\n', '\n', '    constructor(\n', '        address _stakingToken,\n', '        string memory _name,\n', '        string memory _symbol,\n', '        address _nexus,\n', '        address _rewardsDistributor\n', '    )\n', '        public\n', '        RewardsDistributionRecipient(_nexus, _rewardsDistributor)\n', '    {\n', '        stakingToken = IERC20(_stakingToken);\n', '        Point memory init = Point({ bias: int128(0), slope: int128(0), ts: block.timestamp, blk: block.number});\n', '        pointHistory.push(init);\n', '\n', '        decimals = IBasicToken(_stakingToken).decimals();\n', '        require(decimals <= 18, "Cannot have more than 18 decimals");\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        END = block.timestamp.add(MAXTIME);\n', '    }\n', '\n', '    /** @dev Modifier to ensure contract has not yet expired */\n', '    modifier contractNotExpired(){\n', '        require(!expired, "Contract is expired");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Validates that the user has an expired lock && they still have capacity to earn\n', '    * @param _addr User address to check\n', '    */\n', '    modifier lockupIsOver(address _addr) {\n', '        LockedBalance memory userLock = locked[_addr];\n', '        require(userLock.amount > 0 && block.timestamp >= userLock.end, "Users lock didn\'t expire");\n', '        require(staticBalanceOf(_addr) > 0, "User must have existing bias");\n', '        _;\n', '    }\n', '\n', '    /***************************************\n', '                LOCKUP - GETTERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Gets the last available user point\n', '     * @param _addr User address\n', '     * @return bias i.e. y\n', '     * @return slope i.e. linear gradient\n', '     * @return ts i.e. time point was logged\n', '     */\n', '    function getLastUserPoint(address _addr)\n', '        external\n', '        view\n', '        returns(\n', '            int128 bias,\n', '            int128 slope,\n', '            uint256 ts\n', '        )\n', '    {\n', '        uint256 uepoch = userPointEpoch[_addr];\n', '        if(uepoch == 0){\n', '            return (0, 0, 0);\n', '        }\n', '        Point memory point = userPointHistory[_addr][uepoch];\n', '        return (point.bias, point.slope, point.ts);\n', '    }\n', '\n', '    /***************************************\n', '                    LOCKUP\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Records a checkpoint of both individual and global slope\n', '     * @param _addr User address, or address(0) for only global\n', '     * @param _oldLocked Old amount that user had locked, or null for global\n', '     * @param _newLocked new amount that user has locked, or null for global\n', '     */\n', '    function _checkpoint(\n', '        address _addr,\n', '        LockedBalance memory _oldLocked,\n', '        LockedBalance memory _newLocked\n', '    )\n', '        internal\n', '    {\n', '        Point memory userOldPoint;\n', '        Point memory userNewPoint;\n', '        int128 oldSlopeDelta = 0;\n', '        int128 newSlopeDelta = 0;\n', '        uint256 epoch = globalEpoch;\n', '\n', '        if(_addr != address(0)){\n', '            // Calculate slopes and biases\n', '            // Kept at zero when they have to\n', '            if(_oldLocked.end > block.timestamp && _oldLocked.amount > 0){\n', '                userOldPoint.slope = _oldLocked.amount.div(int128(MAXTIME));\n', '                userOldPoint.bias = userOldPoint.slope.mul(int128(_oldLocked.end.sub(block.timestamp)));\n', '            }\n', '            if(_newLocked.end > block.timestamp && _newLocked.amount > 0){\n', '                userNewPoint.slope = _newLocked.amount.div(int128(MAXTIME));\n', '                userNewPoint.bias = userNewPoint.slope.mul(int128(_newLocked.end.sub(block.timestamp)));\n', '            }\n', '\n', '            // Moved from bottom final if statement to resolve stack too deep err\n', '            // start {\n', '            // Now handle user history\n', '            uint256 uEpoch = userPointEpoch[_addr];\n', '            if(uEpoch == 0){\n', '                userPointHistory[_addr].push(userOldPoint);\n', '            }\n', '            // track the total static weight\n', '            uint256 newStatic = _staticBalance(userNewPoint.slope, block.timestamp, _newLocked.end);\n', '            uint256 additiveStaticWeight = totalStaticWeight.add(newStatic);\n', '            if(uEpoch > 0){\n', '                uint256 oldStatic = _staticBalance(userPointHistory[_addr][uEpoch].slope, userPointHistory[_addr][uEpoch].ts, _oldLocked.end);\n', '                additiveStaticWeight = additiveStaticWeight.sub(oldStatic);\n', '            }\n', '            totalStaticWeight = additiveStaticWeight;\n', '\n', '            userPointEpoch[_addr] = uEpoch.add(1);\n', '            userNewPoint.ts = block.timestamp;\n', '            userNewPoint.blk = block.number;\n', '            // userPointHistory[_addr][uEpoch.add(1)] = userNewPoint;\n', '            userPointHistory[_addr].push(userNewPoint);\n', '\n', '            // } end\n', '\n', '            // Read values of scheduled changes in the slope\n', '            // oldLocked.end can be in the past and in the future\n', '            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\n', '            oldSlopeDelta = slopeChanges[_oldLocked.end];\n', '            if(_newLocked.end != 0){\n', '                if (_newLocked.end == _oldLocked.end) {\n', '                    newSlopeDelta = oldSlopeDelta;\n', '                } else {\n', '                    newSlopeDelta = slopeChanges[_newLocked.end];\n', '                }\n', '            }\n', '        }\n', '\n', '        Point memory lastPoint = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\n', '        if(epoch > 0){\n', '            lastPoint = pointHistory[epoch];\n', '        }\n', '        uint256 lastCheckpoint = lastPoint.ts;\n', '\n', '        // initialLastPoint is used for extrapolation to calculate block number\n', '        // (approximately, for *At methods) and save them\n', '        // as we cannot figure that out exactly from inside the contract\n', '        Point memory initialLastPoint = Point({bias: 0, slope: 0, ts: lastPoint.ts, blk: lastPoint.blk});\n', '        uint256 blockSlope = 0; // dblock/dt\n', '        if(block.timestamp > lastPoint.ts){\n', '            blockSlope = StableMath.scaleInteger(block.number.sub(lastPoint.blk)).div(block.timestamp.sub(lastPoint.ts));\n', '        }\n', '        // If last point is already recorded in this block, slope=0\n', "        // But that's ok b/c we know the block in such case\n", '\n', '        // Go over weeks to fill history and calculate what the current point is\n', '        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\n', '        for (uint256 i = 0; i < 255; i++){\n', "            // Hopefully it won't happen that this won't get used in 5 years!\n", '            // If it does, users will be able to withdraw but vote weight will be broken\n', '            iterativeTime = iterativeTime.add(WEEK);\n', '            int128 dSlope = 0;\n', '            if(iterativeTime > block.timestamp){\n', '                iterativeTime = block.timestamp;\n', '            } else {\n', '                dSlope = slopeChanges[iterativeTime];\n', '            }\n', '            int128 biasDelta = lastPoint.slope.mul(int128(iterativeTime.sub(lastCheckpoint)));\n', '            lastPoint.bias = lastPoint.bias.sub(biasDelta);\n', '            lastPoint.slope = lastPoint.slope.add(dSlope);\n', '            // This can happen\n', '            if(lastPoint.bias < 0){\n', '                lastPoint.bias = 0;\n', '            }\n', '            // This cannot happen - just in case\n', '            if(lastPoint.slope < 0){\n', '                lastPoint.slope = 0;\n', '            }\n', '            lastCheckpoint = iterativeTime;\n', '            lastPoint.ts = iterativeTime;\n', '            lastPoint.blk = initialLastPoint.blk.add(blockSlope.mulTruncate(iterativeTime.sub(initialLastPoint.ts)));\n', '\n', '            // when epoch is incremented, we either push here or after slopes updated below\n', '            epoch = epoch.add(1);\n', '            if(iterativeTime == block.timestamp) {\n', '                lastPoint.blk = block.number;\n', '                break;\n', '            } else {\n', '                // pointHistory[epoch] = lastPoint;\n', '                pointHistory.push(lastPoint);\n', '            }\n', '        }\n', '\n', '        globalEpoch = epoch;\n', '        // Now pointHistory is filled until t=now\n', '\n', '        if(_addr != address(0)){\n', '            // If last point was in this block, the slope change has been applied already\n', '            // But in such case we have 0 slope(s)\n', '            lastPoint.slope = lastPoint.slope.add(userNewPoint.slope.sub(userOldPoint.slope));\n', '            lastPoint.bias = lastPoint.bias.add(userNewPoint.bias.sub(userOldPoint.bias));\n', '            if(lastPoint.slope < 0) {\n', '                lastPoint.slope = 0;\n', '            }\n', '            if(lastPoint.bias < 0){\n', '                lastPoint.bias = 0;\n', '            }\n', '        }\n', '\n', '        // Record the changed point into history\n', '        // pointHistory[epoch] = lastPoint;\n', '        pointHistory.push(lastPoint);\n', '\n', '        if(_addr != address(0)){\n', '            // Schedule the slope changes (slope is going down)\n', '            // We subtract new_user_slope from [new_locked.end]\n', '            // and add old_user_slope to [old_locked.end]\n', '            if(_oldLocked.end > block.timestamp){\n', '                // oldSlopeDelta was <something> - userOldPoint.slope, so we cancel that\n', '                oldSlopeDelta = oldSlopeDelta.add(userOldPoint.slope);\n', '                if(_newLocked.end == _oldLocked.end) {\n', '                    oldSlopeDelta = oldSlopeDelta.sub(userNewPoint.slope);  // It was a new deposit, not extension\n', '                }\n', '                slopeChanges[_oldLocked.end] = oldSlopeDelta;\n', '            }\n', '            if(_newLocked.end > block.timestamp) {\n', '                if(_newLocked.end > _oldLocked.end){\n', '                    newSlopeDelta = newSlopeDelta.sub(userNewPoint.slope);  // old slope disappeared at this point\n', '                    slopeChanges[_newLocked.end] = newSlopeDelta;\n', '                }\n', '                // else: we recorded it already in oldSlopeDelta\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Deposits or creates a stake for a given address\n', '     * @param _addr User address to assign the stake\n', '     * @param _value Total units of StakingToken to lockup\n', '     * @param _unlockTime Time at which the stake should unlock\n', '     * @param _oldLocked Previous amount staked by this user\n', '     * @param _action See LockAction enum\n', '     */\n', '    function _depositFor(\n', '        address _addr,\n', '        uint256 _value,\n', '        uint256 _unlockTime,\n', '        LockedBalance memory _oldLocked,\n', '        LockAction _action\n', '    )\n', '        internal\n', '    {\n', '        LockedBalance memory newLocked = LockedBalance({amount: _oldLocked.amount, end: _oldLocked.end});\n', '\n', '        // Adding to existing lock, or if a lock is expired - creating a new one\n', '        newLocked.amount = newLocked.amount.add(int128(_value));\n', '        if(_unlockTime != 0){\n', '            newLocked.end = _unlockTime;\n', '        }\n', '        locked[_addr] = newLocked;\n', '\n', '        // Possibilities:\n', '        // Both _oldLocked.end could be current or expired (>/< block.timestamp)\n', '        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n', '        // newLocked.end > block.timestamp (always)\n', '        _checkpoint(_addr, _oldLocked, newLocked);\n', '\n', '        if(_value != 0) {\n', '            stakingToken.safeTransferFrom(_addr, address(this), _value);\n', '        }\n', '\n', '        emit Deposit(_addr, _value, newLocked.end, _action, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Public function to trigger global checkpoint\n', '     */\n', '    function checkpoint() external {\n', '        LockedBalance memory empty;\n', '        _checkpoint(address(0), empty, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a new lock\n', '     * @param _value Total units of StakingToken to lockup\n', '     * @param _unlockTime Time at which the stake should unlock\n', '     */\n', '    function createLock(uint256 _value, uint256 _unlockTime)\n', '        external\n', '        nonReentrant\n', '        contractNotExpired\n', '        updateReward(msg.sender)\n', '    {\n', '        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\n', '        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\n', '\n', '        require(_value > 0, "Must stake non zero amount");\n', '        require(locked_.amount == 0, "Withdraw old tokens first");\n', '\n', '        require(unlock_time > block.timestamp, "Can only lock until time in the future");\n', '        require(unlock_time <= END, "Voting lock can be 1 year max (until recol)");\n', '\n', '        _depositFor(msg.sender, _value, unlock_time, locked_, LockAction.CREATE_LOCK);\n', '    }\n', '\n', '    /**\n', '     * @dev Increases amount of stake thats locked up & resets decay\n', '     * @param _value Additional units of StakingToken to add to exiting stake\n', '     */\n', '    function increaseLockAmount(uint256 _value)\n', '        external\n', '        nonReentrant\n', '        contractNotExpired\n', '        updateReward(msg.sender)\n', '    {\n', '        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\n', '\n', '        require(_value > 0, "Must stake non zero amount");\n', '        require(locked_.amount > 0, "No existing lock found");\n', '        require(locked_.end > block.timestamp, "Cannot add to expired lock. Withdraw");\n', '\n', '        _depositFor(msg.sender, _value, 0, locked_, LockAction.INCREASE_LOCK_AMOUNT);\n', '    }\n', '\n', '    /**\n', '     * @dev Increases length of lockup & resets decay\n', '     * @param _unlockTime New unlocktime for lockup\n', '     */\n', '    function increaseLockLength(uint256 _unlockTime)\n', '        external\n', '        nonReentrant\n', '        contractNotExpired\n', '        updateReward(msg.sender)\n', '    {\n', '        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\n', '        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\n', '\n', '        require(locked_.amount > 0, "Nothing is locked");\n', '        require(locked_.end > block.timestamp, "Lock expired");\n', '        require(unlock_time > locked_.end, "Can only increase lock WEEK");\n', '        require(unlock_time <= END, "Voting lock can be 1 year max (until recol)");\n', '\n', '        _depositFor(msg.sender, 0, unlock_time, locked_, LockAction.INCREASE_LOCK_TIME);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws all the senders stake, providing lockup is over\n', '     */\n', '    function withdraw()\n', '        external\n', '    {\n', '        _withdraw(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given users stake, providing the lockup has finished\n', '     * @param _addr User for which to withdraw\n', '     */\n', '    function _withdraw(address _addr)\n', '        internal\n', '        nonReentrant\n', '        updateReward(_addr)\n', '    {\n', '        LockedBalance memory oldLock = LockedBalance({ end: locked[_addr].end, amount: locked[_addr].amount });\n', '        require(block.timestamp >= oldLock.end || expired, "The lock didn\'t expire");\n', '        require(oldLock.amount > 0, "Must have something to withdraw");\n', '\n', '        uint256 value = uint256(oldLock.amount);\n', '\n', '        LockedBalance memory currentLock = LockedBalance({end: 0, amount: 0});\n', '        locked[_addr] = currentLock;\n', '\n', '        // oldLocked can have either expired <= timestamp or zero end\n', '        // currentLock has only 0 end\n', '        // Both can have >= 0 amount\n', '        if(!expired){\n', '            _checkpoint(_addr, oldLock, currentLock);\n', '        }\n', '\n', '        stakingToken.safeTransfer(_addr, value);\n', '\n', '        emit Withdraw(_addr, value, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws and consequently claims rewards for the sender\n', '     */\n', '    function exit()\n', '        external\n', '    {\n', '        _withdraw(msg.sender);\n', '        claimReward();\n', '    }\n', '\n', '    /**\n', '     * @dev Ejects a user from the reward allocation, given their lock has freshly expired.\n', '     * Leave it to the user to withdraw and claim their rewards.\n', '     * @param _addr Address of the user\n', '     */\n', '    function eject(address _addr)\n', '        external\n', '        contractNotExpired\n', '        lockupIsOver(_addr)\n', '    {\n', '        _withdraw(_addr);\n', '\n', '        // solium-disable-next-line security/no-tx-origin\n', '        emit Ejected(_addr, tx.origin, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Ends the contract, unlocking all stakes.\n', '     * No more staking can happen. Only withdraw and Claim.\n', '     */\n', '    function expireContract()\n', '        external\n', '        onlyGovernor\n', '        contractNotExpired\n', '        updateReward(address(0))\n', '    {\n', '        require(block.timestamp > periodFinish, "Period must be over");\n', '\n', '        expired = true;\n', '\n', '        emit Expired();\n', '    }\n', '\n', '\n', '\n', '    /***************************************\n', '                    GETTERS\n', '    ****************************************/\n', '\n', '\n', '    /** @dev Floors a timestamp to the nearest weekly increment */\n', '    function _floorToWeek(uint256 _t)\n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return _t.div(WEEK).mul(WEEK);\n', '    }\n', '\n', '    /**\n', '     * @dev Uses binarysearch to find the most recent point history preceeding block\n', '     * @param _block Find the most recent point history before this block\n', '     * @param _maxEpoch Do not search pointHistories past this index\n', '     */\n', '    function _findBlockEpoch(uint256 _block, uint256 _maxEpoch)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // Binary search\n', '        uint256 min = 0;\n', '        uint256 max = _maxEpoch;\n', '        // Will be always enough for 128-bit numbers\n', '        for(uint256 i = 0; i < 128; i++){\n', '            if (min >= max)\n', '                break;\n', '            uint256 mid = (min.add(max).add(1)).div(2);\n', '            if (pointHistory[mid].blk <= _block){\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '        return min;\n', '    }\n', '\n', '    /**\n', '     * @dev Uses binarysearch to find the most recent user point history preceeding block\n', '     * @param _addr User for which to search\n', '     * @param _block Find the most recent point history before this block\n', '     */\n', '    function _findUserBlockEpoch(address _addr, uint256 _block)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 min = 0;\n', '        uint256 max = userPointEpoch[_addr];\n', '        for(uint256 i = 0; i < 128; i++) {\n', '            if(min >= max){\n', '                break;\n', '            }\n', '            uint256 mid = (min.add(max).add(1)).div(2);\n', '            if(userPointHistory[_addr][mid].blk <= _block){\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '        return min;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets curent user voting weight (aka effectiveStake)\n', '     * @param _owner User for which to return the balance\n', '     * @return uint256 Balance of user\n', '     */\n', '    function balanceOf(address _owner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 epoch = userPointEpoch[_owner];\n', '        if(epoch == 0){\n', '            return 0;\n', '        }\n', '        Point memory lastPoint = userPointHistory[_owner][epoch];\n', '        lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(block.timestamp.sub(lastPoint.ts))));\n', '        if(lastPoint.bias < 0) {\n', '            lastPoint.bias = 0;\n', '        }\n', '        return uint256(lastPoint.bias);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a users votingWeight at a given blockNumber\n', '     * @param _owner User for which to return the balance\n', '     * @param _blockNumber Block at which to calculate balance\n', '     * @return uint256 Balance of user\n', '     */\n', '    function balanceOfAt(address _owner, uint256 _blockNumber)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_blockNumber <= block.number, "Must pass block number in the past");\n', '\n', '        // Get most recent user Point to block\n', '        uint256 userEpoch = _findUserBlockEpoch(_owner, _blockNumber);\n', '        if(userEpoch == 0){\n', '            return 0;\n', '        }\n', '        Point memory upoint = userPointHistory[_owner][userEpoch];\n', '\n', '        // Get most recent global Point to block\n', '        uint256 maxEpoch = globalEpoch;\n', '        uint256 epoch = _findBlockEpoch(_blockNumber, maxEpoch);\n', '        Point memory point0 = pointHistory[epoch];\n', '\n', '        // Calculate delta (block & time) between user Point and target block\n', '        // Allowing us to calculate the average seconds per block between\n', '        // the two points\n', '        uint256 dBlock = 0;\n', '        uint256 dTime = 0;\n', '        if(epoch < maxEpoch){\n', '            Point memory point1 = pointHistory[epoch.add(1)];\n', '            dBlock = point1.blk.sub(point0.blk);\n', '            dTime = point1.ts.sub(point0.ts);\n', '        } else {\n', '            dBlock = block.number.sub(point0.blk);\n', '            dTime = block.timestamp.sub(point0.ts);\n', '        }\n', '        // (Deterministically) Estimate the time at which block _blockNumber was mined\n', '        uint256 blockTime = point0.ts;\n', '        if(dBlock != 0) {\n', '            // blockTime += dTime * (_blockNumber - point0.blk) / dBlock;\n', '            blockTime = blockTime.add(dTime.mul(_blockNumber.sub(point0.blk)).div(dBlock));\n', '        }\n', '        // Current Bias = most recent bias - (slope * time since update)\n', '        upoint.bias = upoint.bias.sub(upoint.slope.mul(int128(blockTime.sub(upoint.ts))));\n', '        if(upoint.bias >= 0){\n', '            return uint256(upoint.bias);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total supply of votingWeight at a given time _t\n', '     * @param _point Most recent point before time _t\n', '     * @param _t Time at which to calculate supply\n', '     * @return totalSupply at given point in time\n', '     */\n', '    function _supplyAt(Point memory _point, uint256 _t)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        Point memory lastPoint = _point;\n', '        // Floor the timestamp to weekly interval\n', '        uint256 iterativeTime = _floorToWeek(lastPoint.ts);\n', '        // Iterate through all weeks between _point & _t to account for slope changes\n', '        for(uint256 i = 0; i < 255; i++){\n', '            iterativeTime = iterativeTime.add(WEEK);\n', '            int128 dSlope = 0;\n', '            // If week end is after timestamp, then truncate & leave dSlope to 0\n', '            if(iterativeTime > _t){\n', '                iterativeTime = _t;\n', '            }\n', '            // else get most recent slope change\n', '            else {\n', '                dSlope = slopeChanges[iterativeTime];\n', '            }\n', '\n', '            // lastPoint.bias -= lastPoint.slope * convert(iterativeTime - lastPoint.ts, int128)\n', '            lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(iterativeTime.sub(lastPoint.ts))));\n', '            if(iterativeTime == _t){\n', '                break;\n', '            }\n', '            lastPoint.slope = lastPoint.slope.add(dSlope);\n', '            lastPoint.ts = iterativeTime;\n', '        }\n', '\n', '        if (lastPoint.bias < 0){\n', '            lastPoint.bias = 0;\n', '        }\n', '        return uint256(lastPoint.bias);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates current total supply of votingWeight\n', '     * @return totalSupply of voting token weight\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 epoch_ = globalEpoch;\n', '        Point memory lastPoint = pointHistory[epoch_];\n', '        return _supplyAt(lastPoint, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total supply of votingWeight at a given blockNumber\n', '     * @param _blockNumber Block number at which to calculate total supply\n', '     * @return totalSupply of voting token weight at the given blockNumber\n', '     */\n', '    function totalSupplyAt(uint256 _blockNumber)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_blockNumber <= block.number, "Must pass block number in the past");\n', '\n', '        uint256 epoch = globalEpoch;\n', '        uint256 targetEpoch = _findBlockEpoch(_blockNumber, epoch);\n', '\n', '        Point memory point = pointHistory[targetEpoch];\n', '\n', '        // If point.blk > _blockNumber that means we got the initial epoch & contract did not yet exist\n', '        if(point.blk > _blockNumber){\n', '            return 0;\n', '        }\n', '\n', '        uint256 dTime = 0;\n', '        if(targetEpoch < epoch){\n', '            Point memory pointNext = pointHistory[targetEpoch.add(1)];\n', '            if(point.blk != pointNext.blk) {\n', '                dTime = (_blockNumber.sub(point.blk)).mul(pointNext.ts.sub(point.ts)).div(pointNext.blk.sub(point.blk));\n', '            }\n', '        } else if (point.blk != block.number){\n', '            dTime = (_blockNumber.sub(point.blk)).mul(block.timestamp.sub(point.ts)).div(block.number.sub(point.blk));\n', '        }\n', '        // Now dTime contains info on how far are we beyond point\n', '\n', '        return _supplyAt(point, point.ts.add(dTime));\n', '    }\n', '\n', '\n', '    /***************************************\n', '                    REWARDS\n', '    ****************************************/\n', '\n', '    /** @dev Updates the reward for a given address, before executing function */\n', '    modifier updateReward(address _account) {\n', '        // Setting of global vars\n', '        uint256 newRewardPerToken = rewardPerToken();\n', '        // If statement protects against loss in initialisation case\n', '        if(newRewardPerToken > 0) {\n', '            rewardPerTokenStored = newRewardPerToken;\n', '            lastUpdateTime = lastTimeRewardApplicable();\n', '            // Setting of personal vars based on new globals\n', '            if (_account != address(0)) {\n', '                rewards[_account] = earned(_account);\n', '                userRewardPerTokenPaid[_account] = newRewardPerToken;\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Claims outstanding rewards for the sender.\n', '     * First updates outstanding reward allocation and then transfers.\n', '     */\n', '    function claimReward()\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', '        uint256 reward = rewards[msg.sender];\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            stakingToken.safeTransfer(msg.sender, reward);\n', '            rewardsPaid[msg.sender] = rewardsPaid[msg.sender].add(reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '\n', '    /***************************************\n', '                REWARDS - GETTERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Gets the most recent Static Balance (bias) for a user\n', '     * @param _addr User for which to retrieve static balance\n', '     * @return uint256 balance\n', '     */\n', '    function staticBalanceOf(address _addr)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 uepoch = userPointEpoch[_addr];\n', '        if(uepoch == 0 || userPointHistory[_addr][uepoch].bias == 0){\n', '            return 0;\n', '        }\n', '        return _staticBalance(userPointHistory[_addr][uepoch].slope, userPointHistory[_addr][uepoch].ts, locked[_addr].end);\n', '    }\n', '\n', '    function _staticBalance(int128 _slope, uint256 _startTime, uint256 _endTime)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if(_startTime > _endTime) return 0;\n', '        // get lockup length (end - point.ts)\n', '        uint256 lockupLength = _endTime.sub(_startTime);\n', '        // s = amount * sqrt(length)\n', '        uint256 s = uint256(_slope.mul(10000)).mul(Root.sqrt(lockupLength));\n', '        return s;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the RewardsToken\n', '     */\n', '    function getRewardToken()\n', '        external\n', '        view\n', '        returns (IERC20)\n', '    {\n', '        return stakingToken;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the duration of the rewards period\n', '     */\n', '    function getDuration()\n', '        external\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return WEEK;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the last applicable timestamp for this reward period\n', '     */\n', '    function lastTimeRewardApplicable()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return StableMath.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards per token since last update,\n', '     * and sums with stored to give the new cumulative reward per token\n', "     * @return 'Reward' per staked token\n", '     */\n', '    function rewardPerToken()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // If there is no StakingToken liquidity, avoid div(0)\n', '        uint256 totalStatic = totalStaticWeight;\n', '        if (totalStatic == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        // new reward units to distribute = rewardRate * timeSinceLastUpdate\n', '        uint256 rewardUnitsToDistribute = rewardRate.mul(lastTimeRewardApplicable().sub(lastUpdateTime));\n', '        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\n', '        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(totalStatic);\n', '        // return summed rate\n', '        return rewardPerTokenStored.add(unitsToDistributePerToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards a user has earned\n', '     * @param _addr User address\n', '     * @return Total reward amount earned\n', '     */\n', '    function earned(address _addr)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // current rate per token - rate user previously received\n', '        uint256 userRewardDelta = rewardPerToken().sub(userRewardPerTokenPaid[_addr]);\n', '        // new reward = staked tokens * difference in rate\n', '        uint256 userNewReward = staticBalanceOf(_addr).mulTruncate(userRewardDelta);\n', '        // add to previous rewards\n', '        return rewards[_addr].add(userNewReward);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                REWARDS - ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Notifies the contract that new rewards have been added.\n', '     * Calculates an updated rewardRate based on the rewards in period.\n', '     * @param _reward Units of RewardToken that have been added to the pool\n', '     */\n', '    function notifyRewardAmount(uint256 _reward)\n', '        external\n', '        onlyRewardsDistributor\n', '        contractNotExpired\n', '        updateReward(address(0))\n', '    {\n', '        uint256 currentTime = block.timestamp;\n', '        // If previous period over, reset rewardRate\n', '        if (currentTime >= periodFinish) {\n', '            rewardRate = _reward.div(WEEK);\n', '        }\n', '        // If additional reward to existing period, calc sum\n', '        else {\n', '            uint256 remaining = periodFinish.sub(currentTime);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = _reward.add(leftover).div(WEEK);\n', '        }\n', '\n', '        lastUpdateTime = currentTime;\n', '        periodFinish = currentTime.add(WEEK);\n', '\n', '        emit RewardAdded(_reward);\n', '    }\n', '}']