['//\n', '//  _   _ ______ ______ _  __    __ _   \n', '// | \\ | |  ____|  ____| |/ /   / _(_)                           \n', "// |  \\| | |__  | |__  | ' /   | |_ _ _ __   __ _ _ __   ___ ___ \n", "// | . ` |  __| |  __| |  <    |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\n", '// | |\\  | |____| |____| . \\  _| | | | | | | (_| | | | | (_|  __/\n', '// |_| \\_|______|______|_|\\_\\(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\n', '//                                \n', '//\n', '// Site:     https://neek.finance/\n', '// Telegram: https://t.me/neekfinance/    < Join Us\n', '// Twitter:  https://twitter.com/NeekFinance/    < Follow Us\n', '//\n', '//\n', '\n', 'pragma solidity 0.5.17;\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '    constructor () internal {\n', '        _notEntered = true;\n', '    }\n', '    modifier nonReentrant() {\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '        _notEntered = false;\n', '        _;\n', '        _notEntered = true;\n', '    }\n', '}\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Context {\n', '    constructor () internal { }\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', 'contract Crowdsale is Context, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    IERC20 private _token;\n', '    address payable private _wallet;\n', '    uint256 private _rate;\n', '    uint256 private _weiRaised;\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0, "Crowdsale: rate is 0");\n', '        require(wallet != address(0), "Crowdsale: wallet is the zero address");\n', '        require(address(token) != address(0), "Crowdsale: token is the zero address");\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '    function () external payable {\n', '        buyTokens(_msgSender());\n', '    }\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\n', '        _updatePurchasingState(beneficiary, weiAmount);\n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");\n', '        require(weiAmount != 0, "Crowdsale: weiAmount is 0");\n', '        this;\n', '    }\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '    }\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '    }\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}\n', 'contract NeekPresale1 is Crowdsale {\n', '    constructor (\n', '        uint256 rate,\n', '        address payable wallet,\n', '        IERC20 token\n', '    )\n', '        public\n', '        Crowdsale(rate, wallet, token)\n', '        // Rate set 0.000100 ETH Per NEEK\n', '        //          10,000 NEEK Per ETH\n', '    {\n', '    }\n', '}']