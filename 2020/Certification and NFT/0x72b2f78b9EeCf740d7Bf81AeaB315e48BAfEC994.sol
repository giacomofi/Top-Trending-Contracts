['// File: contracts/Lend/ProtocolInterface.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'abstract contract ProtocolInterface {\n', '    function deposit(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public virtual;\n', '\n', '    function withdraw(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _cToken\n', '    ) public virtual;\n', '}\n', '\n', '// File: contracts/interfaces/LendingPoolAddressesProviderInterface.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'abstract contract LendingPoolAddressesProviderInterface {\n', '    function getLendingPool() external virtual returns (address);\n', '\n', '    function getLendingPoolCore() external virtual returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/LendingPool.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'abstract contract LendingPool {\n', '    function deposit(\n', '        address,\n', '        uint256,\n', '        uint16\n', '    ) external virtual;\n', '\n', '    function redeemUnderlying(\n', '        address _reserve,\n', '        address payable _user,\n', '        uint256 _amount,\n', '        uint256 _aTokenBalanceAfterRedeem\n', '    ) external virtual;\n', '\n', '    function borrow(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint256 _interestRateMode,\n', '        uint16 _referralCode\n', '    ) external virtual;\n', '\n', '    function repay(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        address payable _onBehalfOf\n', '    ) external virtual payable;\n', '\n', '    function swapBorrowRateMode(address _reserve) external virtual;\n', '\n', '    function rebalanceStableBorrowRate(address _reserve, address _user) external virtual;\n', '\n', '    function setUserUseReserveAsCollateral(address, bool) external virtual;\n', '\n', '    function liquidationCall(\n', '        address _collateral,\n', '        address _reserve,\n', '        address _user,\n', '        uint256 _purchaseAmount,\n', '        bool _receiveAToken\n', '    ) external virtual payable;\n', '\n', '    function flashLoan(\n', '        address _receiver,\n', '        address _reserve,\n', '        uint256 _amount,\n', '        bytes memory _params\n', '    ) public virtual;\n', '\n', '    function getReserveConfigurationData(address _reserve)\n', '        external\n', '        virtual\n', '        view\n', '        returns (\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            address interestRateStrategyAddress,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive\n', '        );\n', '\n', '    function getReserveData(address _reserve)\n', '        external\n', '        virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidity,\n', '            uint256 availableLiquidity,\n', '            uint256 totalBorrowsStable,\n', '            uint256 totalBorrowsVariable,\n', '            uint256 liquidityRate,\n', '            uint256 variableBorrowRate,\n', '            uint256 stableBorrowRate,\n', '            uint256 averageStableBorrowRate,\n', '            uint256 utilizationRate,\n', '            uint256 liquidityIndex,\n', '            uint256 variableBorrowIndex,\n', '            address aTokenAddress,\n', '            uint40 lastUpdateTimestamp\n', '        );\n', '\n', '    function getUserAccountData(address _user)\n', '        external\n', '        virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityETH,\n', '            uint256 totalCollateralETH,\n', '            uint256 totalBorrowsETH,\n', '            uint256 totalFeesETH,\n', '            uint256 availableBorrowsETH,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 ltv,\n', '            uint256 healthFactor\n', '        );\n', '\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external\n', '        virtual\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,\n', '            uint256 currentBorrowBalance,\n', '            uint256 principalBorrowBalance,\n', '            uint256 borrowRateMode,\n', '            uint256 borrowRate,\n', '            uint256 liquidityRate,\n', '            uint256 originationFee,\n', '            uint256 variableBorrowIndex,\n', '            uint256 lastUpdateTimestamp,\n', '            bool usageAsCollateralEnabled\n', '        );\n', '\n', '    function getReserves() external virtual view returns (address[] memory);\n', '}\n', '\n', '// File: contracts/interfaces/ERC20.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface ERC20 {\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _src, address indexed _dst, uint256 _amount);\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    // function decimals() external view returns (uint256 digits);\n', '\n', '   \n', '}\n', '\n', '// File: contracts/interfaces/ATokenInterface.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'abstract contract ATokenInterface is ERC20 {\n', '    function principalBalanceOf(address _user) external virtual view returns (uint256 balance);\n', '\n', '    function UINT_MAX_VALUE() external virtual returns (uint256);\n', '\n', '    function underlyingAssetAddress() external virtual view returns (address);\n', '\n', '    function getUserIndex(address _user) external virtual view returns (uint256);\n', '\n', '    function getInterestRedirectionAddress(address _user) external virtual view returns (address);\n', '\n', '    function getRedirectedBalance(address _user) external virtual view returns (uint256);\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        external\n', '        virtual\n', '        returns (bool);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool);\n', '\n', '    function redirectInterestStream(address _to) external virtual;\n', '\n', '    function redirectInterestStreamOf(address _from, address _to) external virtual;\n', '\n', '    function allowInterestRedirectionTo(address _to) external virtual;\n', '\n', '    function redeem(uint256 _amount) external virtual;\n', '\n', '    function mintOnDeposit(address _account, uint256 _amount) external virtual;\n', '\n', '    function burnOnLiquidation(address _account, uint256 _value) external virtual;\n', '\n', '    function transferOnLiquidation(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external virtual;\n', '\n', '    function isTransferAllowed(address _user, uint256 _amount) external virtual view returns (bool);\n', '}\n', '\n', '// File: contracts/Lend/aave/AaveProtocol.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice AaveProtocol\n', ' * @author Solidefi\n', ' */\n', 'contract AaveProtocol is ProtocolInterface {\n', '    address public constant LENDING_PROTO_ADDRESS_PROV = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\n', '\n', '    ATokenInterface public aDaiContract;\n', '    LendingPoolAddressesProviderInterface public provider;\n', '    LendingPool public lendingPool;\n', '\n', '    /**\n', '     * @dev Deposit DAI to aave protocol return cDAI to user proxy wallet.\n', '     * @param _user User proxy wallet address.\n', '     * @param _amount Amount of DAI.\n', '     */\n', '    function deposit(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _aToken\n', '    ) public override {\n', '        aDaiContract = ATokenInterface(_aToken);\n', '        provider = LendingPoolAddressesProviderInterface(LENDING_PROTO_ADDRESS_PROV);\n', '\n', '        lendingPool = LendingPool(provider.getLendingPool());\n', '        require(ERC20(_token).transferFrom(_user, address(this), _amount), "Nothing to deposit");\n', '        ERC20(_token).approve(provider.getLendingPoolCore(), uint256(-1));\n', '        lendingPool.deposit(_token, _amount, 0);\n', '\n', '        aDaiContract.transfer(_user, aDaiContract.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     *@dev Withdraw DAI from aave protocol return it to users EOA\n', '     *@param _user User proxy wallet address.\n', '     *@param _amount Amount of Token.\n', '     *@param _token Token address.\n', '     *@param _aToken Interest-Bearing Token address.\n', '     */\n', '    function withdraw(\n', '        address _user,\n', '        uint256 _amount,\n', '        address _token,\n', '        address _aToken\n', '    ) public override {\n', '        aDaiContract = ATokenInterface(_aToken);\n', '        require(aDaiContract.transferFrom(_user, address(this), _amount), "Nothing to withdraw");\n', '\n', '        aDaiContract.redeem(_amount);\n', '\n', '        ERC20(_token).transfer(_user, _amount);\n', '    }\n', '}']