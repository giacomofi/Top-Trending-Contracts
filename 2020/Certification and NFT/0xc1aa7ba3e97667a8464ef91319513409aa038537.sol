['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/crowdsale/crowdsale.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'interface ERCMintable {\n', '    //function crowdSaleMint(address to, uint256 amount) external returns(bool);\n', '    function mint(address to, uint256 amount) external;\n', '}\n', '\n', '/**\n', '* @title IPM Token CrowdSale\n', '* @dev  CrowdSale contract for IPM Token:\n', '*\n', '*       Tokens for Sale: 9M IPM\n', '*       Minted on demand up to the hard cap per round. \n', "*       Unsold supply won't be minted and will result in a\n", '*       lower circulating supply after the sale. Unsold tokens of each round\n', "*       don't transfer to the next round\n", '*\n', '*       PRIVATE ROUND:\n', '*       - whitelisted\n', '*       - garuanteed allocation, overminted gets reduced from last round\n', '*       - duration of 2 days (10.09.2020 - 12.09.2020)\n', '*       - Min-Max allocation per address 2 ETH - 50 ETH\n', '*       - 1M flexible Cap (ETH price on launch could result in more)\n', '*       - 1 IPM = ~0.15 USD\n', '*\n', '*       ROUND 1:\n', '*       - duration of 2 days (14.09.2020 - 16.09.2020)\n', '*       - 1 IPM = ~0.2 USD\n', '*       - 1M IPM Hard Cap\n', '*\n', '*       ROUND 2:\n', '*       - duration of 2 days (18.09.2020 - 20.09.2020)\n', '*       - 1 IPM = 0.3 USD\n', '*       - 2M IPM Hard Cap\n', '*\n', '*       ROUND 3:\n', '*       - duration of 6 days (22.09.2020 - 28.09.2020)\n', '*       - 1 IPM = 0.4 USD\n', '*       - 5M IPM Hard Cap (possible less, based on private round)\n', '*\n', '*       After CrowdSale:\n', '*       Cooldown phase of 5 days begins\n', '*       and will unpause all tokens.\n', '*\n', '* More at https://timers.network/\n', '*\n', '* @author @KTimersnetwork\n', '*/\n', 'contract IPMCrowdSale {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    //////////////////////////////////////\n', '    // Contract configuration           //\n', '    //////////////////////////////////////\n', '    // owner\n', '    address owner;\n', '\n', '    // allow pausing of contract to halt everything beside\n', '    // administrative functions\n', '    bool public paused    =   true;\n', '\n', '    // min payment for private round\n', '    uint256 public constant PRIVATE_PAYMENT_MIN =   2 ether;\n', '\n', '    // min payment for other rounds\n', '    uint256 public constant PUBLIC_PAYMENT_MIN  =   0.1 ether;\n', '\n', '    // max payment is always equal\n', '    uint256 public constant PAYMENT_MAX =   50 ether;\n', '\n', '\n', '    // crowdsale can mint 9m IPM at maximum for all rounds\n', '    uint256 public constant MAXIMUM_MINTABLE_TOKENS =   9000000000000000000000000;\n', '\n', '    // start of private round 09/10/2020 @ 12:00pm UTC\n', '    uint256 public constant PRIVATE_ROUND_START     =   1599739200;\n', '    // end of private round 09/12/2020 @ 12:00pm UTC\n', '    uint256 public constant PRIVATE_ROUND_END       =   1599912000;\n', '    // private sale limit 1m \n', '    uint256 public constant PRIVATE_ROUND_CAP       =   1000000 * (10**18);\n', '\n', '    // start of round 1 09/14/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_1_START           =   1600084800;\n', '    // end of round 1 09/16/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_1_END             =   1600257600;\n', '    // round 1 sale limit 1m\n', '    uint256 public constant ROUND_1_CAP             =   1000000 * (10**18);\n', '\n', '    // start of round 2 09/18/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_2_START           =   1600430400;\n', '    // end of round 2 09/20/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_2_END             =   1600603200;\n', '    // round 2 sale limit 2m\n', '    uint256 public constant ROUND_2_CAP             =   2000000 * (10**18);\n', '\n', '    // start of round 3 09/22/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_3_START           =   1600776000;\n', '    // end of round 3 09/28/2020 @ 12:00pm UTC\n', '    uint256 public constant ROUND_3_END             =   1601294400;\n', '    // round 3 sale limit 5m\n', '    uint256 public constant ROUND_3_CAP             =   5000000 * (10**18);\n', '\n', '    // sold tokens private round\n', '    uint256 public privateRoundSold;\n', '    // sold tokens round 1\n', '    uint256 public round1Sold;\n', '    // sold tokens round 2\n', '    uint256 public round2Sold;\n', '    // sold tokens round 3\n', '    uint256 public round3Sold;\n', '\n', '    // private round white list \n', '    mapping(address => uint256) public whitelist;\n', '    // contributors\n', '    mapping(address => uint256) public contributors;\n', '\n', '    // current rate\n', '    uint256 public ipmPerETH;\n', '\n', '    // IPM token references\n', '    address public ipmTokenAddress;\n', '\n', '    // withdrawal\n', '    address public foundation1Address;\n', '    address public foundation2Address;\n', '\n', '    //////////////////////////////////////\n', '    // Control functions / modifiers    //\n', '    //////////////////////////////////////\n', '    function isPrivateRoundActive() public view returns(bool) {\n', '        return (now >= PRIVATE_ROUND_START && now < PRIVATE_ROUND_END);\n', '    }\n', '    function isRound1Active() public view returns(bool) {\n', '        return (now >= ROUND_1_START && now < ROUND_1_END);\n', '    }\n', '\n', '    function isRound2Active() public view returns(bool) {\n', '        return (now >= ROUND_2_START && now < ROUND_2_END);\n', '    }\n', '\n', '    function isRound3Active() public view returns(bool) {\n', '        return (now >= ROUND_3_START && now < ROUND_3_END);\n', '    }\n', '\n', '    function hasStarted() public view returns(bool) {\n', '        return (now > PRIVATE_ROUND_START);\n', '    }\n', '\n', '    function hasEnded() public view returns(bool) {\n', '        return (now > ROUND_3_END);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier ifPaused() {\n', '        require(paused == true);\n', '        _;\n', '    }\n', '\n', '    modifier ifNotPaused() {\n', '        require(paused == false);\n', '        _;\n', '    }\n', '\n', '    modifier saleActive() {\n', '        require(hasStarted() == true, "Error: Sale has not started");\n', '        require(hasEnded() == false, "Error: Sale has already ended");\n', '        require(isPrivateRoundActive() || isRound1Active() || isRound2Active() || isRound3Active(), "Error: No round active at the moment");\n', '        _;\n', '    }\n', '\n', '    //////////////////////////////////////\n', '    // Events                           //\n', '    //////////////////////////////////////\n', '    event IPMPurchase(\n', '        address indexed beneficiary,\n', '        uint256 tokensPurchased,\n', '        uint256 weiUsed\n', '    );\n', '\n', '    //////////////////////////////////////\n', '    // Implementation                   //\n', '    //////////////////////////////////////\n', '\n', '    constructor() public {        \n', '        paused  =   true;\n', '        owner   =   msg.sender;\n', '    }\n', '\n', '    function getCurrentIPMRatio() external view returns(uint256) {\n', '        return ipmPerETH;\n', '    }\n', '\n', '    function getCurrentRound() external view returns(string memory) {\n', '        if(hasEnded()) {\n', '            return "Finished";\n', '        }\n', '        if(isRound1Active()) {\n', '            return "Pre-Sale Round 1";\n', '        } else if(isRound2Active()) {\n', '            return "Pre-Sale Round 2";\n', '        } else if(isRound3Active()) {\n', '            return "Pre-Sale Round 3";\n', '        }\n', '        return "Private Sale";\n', '    }\n', '\n', '    function getCurrentCap() public view returns (uint256) {\n', '        if(hasEnded()) {\n', '            return 0;\n', '        }\n', '        if(isRound1Active()) {\n', '            return ROUND_1_CAP;\n', '        } else if(isRound2Active()) {\n', '            return ROUND_2_CAP;\n', '        } else if(isRound3Active()) {\n', '            return ROUND_3_CAP;\n', '        }\n', '        return PRIVATE_ROUND_CAP;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Used to update the current eth price of 1 IPM\n', '     *      Function is needed to set the final price ahead\n', '     *      of each round and for possible big price changes\n', '     *      of eth itself to keep somewhat stable usd prices\n', '     */\n', '    function updateIPMPerETH(uint256 _tokens) external onlyOwner {\n', '        require(hasEnded() == false, "Error: CrowdSale has ended, no need to update ratio");\n', '        require(_tokens > 0, "Error: IPM per ETH can\'t be 0");\n', '        require(_tokens != ipmPerETH, "Error: Prices are identical, no changes needed");\n', '        require(_tokens < 100000, "Error: Amount of tokens per ETH seems unrealistically high. Input error?");\n', '\n', '        ipmPerETH  =   _tokens;\n', '    }\n', '\n', '    function unpause() external onlyOwner ifPaused {\n', '        paused = false;\n', '    }   \n', '    function pause() external onlyOwner ifNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '\n', '    function getTokenAddress() external view returns(address) {\n', '        return ipmTokenAddress;\n', '    }\n', '\n', '    function setIPMTokenContract(address _token) external onlyOwner ifPaused {\n', '        ipmTokenAddress =   _token;\n', '    }\n', '\n', '    function setWhitelist(address[] calldata _beneficiaries, uint256[] calldata _weiAmounts) external onlyOwner {\n', '        require(_beneficiaries.length > 0, "Error: Beneficiaries are empty");\n', '        require(_weiAmounts.length > 0, "Error: Investments are empty");\n', '        require(_beneficiaries.length == _weiAmounts.length, "Error: Addresses length is not equal investments");\n', '        \n', '        for(uint256 i=0;i<_beneficiaries.length;i++) {\n', '            whitelist[_beneficiaries[i]]    =   _weiAmounts[i];\n', '        }\n', '    }\n', '\n', '    function addOrUpdateWhitelistEntry(address _beneficiary, uint256 _weiAmount) external onlyOwner {\n', '        require(_weiAmount >= PRIVATE_PAYMENT_MIN, "Error: Investment is below private sell minimum");\n', '        require(_weiAmount <= PAYMENT_MAX, "Error: Investment is above maximum sell amount");\n', '\n', '        whitelist[_beneficiary]   =   _weiAmount;\n', '    }\n', '\n', '    function removeWhitelistEntry(address _beneficiary) external onlyOwner {\n', '        require(whitelist[_beneficiary] > 0, "Error: Address is not whitelisted");\n', '        whitelist[_beneficiary] =   0;\n', '        delete whitelist[_beneficiary];\n', '\n', '    }\n', '\n', '    function isWhitelisted(address _beneficiary) public view returns(bool) {\n', "        require(_beneficiary != address(0), 'Error: Address cannot be empty');\n", '        return (whitelist[_beneficiary] > 0) ? true:false;\n', '    }\n', '\n', '    function setFoundation1Address(address _foundationAddress) external onlyOwner {\n', "        require(_foundationAddress != address(0), 'Error: Address cannot be empty');\n", '        foundation1Address = _foundationAddress;\n', '    }\n', '\n', '    function setFoundation2Address(address _foundationAddress) external onlyOwner {\n', "        require(_foundationAddress != address(0), 'Error: Address cannot be empty');\n", '        foundation2Address = _foundationAddress;\n', '    }\n', '\n', '    function withdrawFunds() external onlyOwner {\n', '        require(hasStarted() == true, "Error: No reason to withdraw funds before sale has started");\n', '        require(\n', '            isPrivateRoundActive() == false &&\n', '            isRound1Active() == false &&\n', '            isRound2Active() == false &&\n', '            isRound3Active() == false,\n', '            "Error: Withdrawal during active rounds is not allowed"\n', '        );\n', "        require(foundation1Address != address(0), 'Error: No foundation1 wallet set');\n", "        require(foundation2Address != address(0), 'Error: No foundation2 wallet set');\n", '\n', '        uint256 fundsAvailable              =   address(this).balance;\n', '        require(fundsAvailable > 0, "Error: No funds available to withdraw");\n', '\n', '        uint256 amountForFoundation1Wallet  =   fundsAvailable.div(100).mul(70); \n', '        uint256 amountForFoundation2Wallet  =   fundsAvailable.sub(amountForFoundation1Wallet);\n', '        require(amountForFoundation1Wallet.add(amountForFoundation2Wallet) == fundsAvailable, "Error: Amount to be sent is not equal the funds");\n', '\n', '        payable(foundation1Address).transfer(amountForFoundation1Wallet);\n', '        payable(foundation2Address).transfer(amountForFoundation2Wallet);  \n', '    }\n', '\n', '    /**\n', '    * @dev Default fallback function that will also allow\n', '    *      the contract owner to deposit additional ETH,\n', '    *      without triggering the IPM purchase functionality.\n', '    */\n', '    receive() external payable {\n', '        require(msg.value > 0, "Error: No ether received. Msg.value is empty");\n', '        // no need for owner to buy\n', '        if(msg.sender != owner) {\n', '            // let others buy tokens\n', '            _buyTokens(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function _buyTokens(address _beneficiary, uint256 _amountPayedInWei) internal saleActive {\n', '        require(_beneficiary != address(0), "Error: Burn/Mint address cant purchase tokens");\n', '        require(_hasAllowance(_beneficiary), "Error: Address is not allowed to purchase");\n', '        \n', '        require(_amountPayedInWei <= PAYMENT_MAX, "Error: Paymed exceeds maximum single purchase");\n', '        \n', '        uint256 tokensForPayment    =   _calculateTokensForPayment(_amountPayedInWei);\n', '        uint256 tokensLeft          =   _getCurrentRemainingIPM();\n', '\n', '        require(tokensForPayment > 0, "Error: payment too low. no tokens for this wei amount");\n', '        require(tokensLeft > 0, "Error: No tokens left for this round");\n', '        require(tokensLeft >= tokensForPayment, "Error: Purchase exceeds remaining tokens for this round");\n', '\n', '        if(isPrivateRoundActive()) {\n', '            uint256 alreadyPurchased    =   contributors[_beneficiary];\n', '            uint256 allowedToPurchase   =   whitelist[_beneficiary];\n', '\n', '            if(alreadyPurchased == 0) {\n', '                require(_amountPayedInWei >= PRIVATE_PAYMENT_MIN, "Error: Payment smaller than minimum payment");\n', '            }\n', '\n', '            uint256 combinedPurchase    =   alreadyPurchased.add(_amountPayedInWei);\n', '\n', '            require(combinedPurchase <= allowedToPurchase, "Error: This purchase exceeds the whitelisted limited");\n', '        } \n', '        \n', '        require(_amountPayedInWei >= PUBLIC_PAYMENT_MIN, "Error: Payment smaller than minimum payment");\n', '        \n', '        ERCMintable(ipmTokenAddress).mint(_beneficiary, tokensForPayment);\n', '        \n', '        if(isRound1Active()) {\n', '            round1Sold = round1Sold.add(tokensForPayment);\n', '        } else if(isRound2Active()) {\n', '            round2Sold = round2Sold.add(tokensForPayment);\n', '        } else if(isRound3Active()) {\n', '            round3Sold = round3Sold.add(tokensForPayment);\n', '        } else {\n', '            privateRoundSold = privateRoundSold.add(tokensForPayment);\n', '        }\n', '        contributors[_beneficiary] =    contributors[_beneficiary].add(_amountPayedInWei);\n', '\n', '        emit IPMPurchase(\n', '            _beneficiary,\n', '            tokensForPayment,\n', '            _amountPayedInWei\n', '        ); \n', '    }\n', '\n', '    function _calculateTokensForPayment(uint256 payedWei) internal view returns(uint256) {\n', '        require(payedWei > 0, "Error: Invalid wei amount");\n', '\n', '        return payedWei.mul(ipmPerETH);\n', '    }\n', '\n', '    function _hasAllowance(address _beneficiary) internal view returns(bool) {\n', '        if(isPrivateRoundActive()) {\n', '            return (whitelist[_beneficiary] > 0);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _getCurrentRemainingIPM() internal view returns(uint256) {\n', '        if(isRound1Active()) {\n', '            return ROUND_1_CAP.sub(round1Sold);\n', '        } else if(isRound2Active()) {\n', '            return ROUND_2_CAP.sub(round2Sold);\n', '        } else if(isRound3Active()) {\n', '            return ROUND_3_CAP.sub(round3Sold.add(_getPrivateRoundOverhead()));\n', '        }\n', '        return PRIVATE_ROUND_CAP.add(ROUND_3_CAP).sub(privateRoundSold);\n', '    }\n', '\n', '    function _getPrivateRoundOverhead() internal view returns(uint256) {\n', '        if(privateRoundSold > PRIVATE_ROUND_CAP) {\n', '            return privateRoundSold.sub(PRIVATE_ROUND_CAP);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '}']