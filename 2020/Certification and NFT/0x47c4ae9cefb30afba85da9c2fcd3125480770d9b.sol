['// File: contracts/spec_interfaces/IContractRegistry.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IContractRegistry {\n', '\n', '\tevent ContractAddressUpdated(string contractName, address addr);\n', '\n', '\t/// @dev updates the contracts address and emits a corresponding event\n', '\tfunction set(string calldata contractName, address addr) external /* onlyGovernor */;\n', '\n', '\t/// @dev returns the current address of the\n', '\tfunction get(string calldata contractName) external view returns (address);\n', '}\n', '\n', '// File: contracts/spec_interfaces/ICertification.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '/// @title Elections contract interface\n', 'interface ICertification /* is Ownable */ {\n', '\tevent GuardianCertificationUpdate(address guardian, bool isCertified);\n', '\n', '\t/*\n', '     * External methods\n', '     */\n', '\n', '    /// @dev Called by a guardian as part of the automatic vote unready flow\n', '    /// Used by the Election contract\n', '\tfunction isGuardianCertified(address addr) external view returns (bool isCertified);\n', '\n', '    /// @dev Called by a guardian as part of the automatic vote unready flow\n', '    /// Used by the Election contract\n', '\tfunction setGuardianCertification(address addr, bool isCertified) external /* Owner only */ ;\n', '\n', '\t/*\n', '\t * Governance\n', '\t */\n', '\n', '    /// @dev Updates the address calldata of the contract registry\n', '\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IProtocol.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IProtocol {\n', '    event ProtocolVersionChanged(string deploymentSubset, uint256 currentVersion, uint256 nextVersion, uint256 fromTimestamp);\n', '\n', '    /*\n', '     *   External methods\n', '     */\n', '\n', '    /// @dev returns true if the given deployment subset exists (i.e - is registered with a protocol version)\n', '    function deploymentSubsetExists(string calldata deploymentSubset) external view returns (bool);\n', '\n', '    /// @dev returns the current protocol version for the given deployment subset.\n', '    function getProtocolVersion(string calldata deploymentSubset) external view returns (uint256);\n', '\n', '    /*\n', '     *   Governor methods\n', '     */\n', '\n', '    /// @dev create a new deployment subset.\n', '    function createDeploymentSubset(string calldata deploymentSubset, uint256 initialProtocolVersion) external /* onlyFunctionalOwner */;\n', '\n', '    /// @dev schedules a protocol version upgrade for the given deployment subset.\n', '    function setProtocolVersion(string calldata deploymentSubset, uint256 nextVersion, uint256 fromTimestamp) external /* onlyFunctionalOwner */;\n', '}\n', '\n', '// File: contracts/spec_interfaces/ICommittee.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title Elections contract interface\n', 'interface ICommittee {\n', '\tevent GuardianCommitteeChange(address addr, uint256 weight, bool certification, bool inCommittee);\n', '\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\n', '\n', '\t// No external functions\n', '\n', '\t/*\n', '     * Methods restricted to other Orbs contracts\n', '     */\n', '\n', '\t/// @dev Called by: Elections contract\n', '\t/// Notifies a weight change for sorting to a relevant committee member.\n', '    /// weight = 0 indicates removal of the member from the committee (for exmaple on unregister, voteUnready, voteOut)\n', '\tfunction memberWeightChange(address addr, uint256 weight) external returns (bool committeeChanged) /* onlyElectionContract */;\n', '\n', '\t/// @dev Called by: Elections contract\n', '\t/// Notifies a guardian certification change\n', '\tfunction memberCertificationChange(address addr, bool isCertified) external returns (bool committeeChanged) /* onlyElectionsContract */;\n', '\n', '\t/// @dev Called by: Elections contract\n', '\t/// Notifies a a member removal for exampl\te due to voteOut / voteUnready\n', '\tfunction removeMember(address addr) external returns (bool committeeChanged) /* onlyElectionContract */;\n', '\n', '\t/// @dev Called by: Elections contract\n', '\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\n', '\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool committeeChanged) /* onlyElectionsContract */;\n', '\n', '\t/// @dev Called by: Elections contract\n', '\t/// Returns the committee members and their weights\n', '\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\n', '\n', '\t/*\n', '\t * Governance\n', '\t */\n', '\n', '\tfunction setMaxTimeBetweenRewardAssignments(uint32 maxTimeBetweenRewardAssignments) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\tfunction setMaxCommittee(uint8 maxCommitteeSize) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\n', '\tevent MaxTimeBetweenRewardAssignmentsChanged(uint32 newValue, uint32 oldValue);\n', '\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\n', '\n', '    /// @dev Updates the address calldata of the contract registry\n', '\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '    /*\n', '     * Getters\n', '     */\n', '\n', '    /// @dev returns the current committee\n', '    /// used also by the rewards and fees contracts\n', '\tfunction getCommitteeInfo() external view returns (address[] memory addrs, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\n', '\n', '\t/// @dev returns the current settings of the committee contract\n', '\tfunction getSettings() external view returns (uint32 maxTimeBetweenRewardAssignments, uint8 maxCommitteeSize);\n', '}\n', '\n', '// File: contracts/IStakeChangeNotifier.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '/// @title An interface for notifying of stake change events (e.g., stake, unstake, partial unstake, restate, etc.).\n', 'interface IStakeChangeNotifier {\n', '    /// @dev Notifies of stake change event.\n', '    /// @param _stakeOwner address The address of the subject stake owner.\n', '    /// @param _amount uint256 The difference in the total staked amount.\n', '    /// @param _sign bool The sign of the added (true) or subtracted (false) amount.\n', '    /// @param _updatedStake uint256 The updated total staked amount.\n', '    function stakeChange(address _stakeOwner, uint256 _amount, bool _sign, uint256 _updatedStake) external;\n', '\n', '    /// @dev Notifies of multiple stake change events.\n', '    /// @param _stakeOwners address[] The addresses of subject stake owners.\n', '    /// @param _amounts uint256[] The differences in total staked amounts.\n', '    /// @param _signs bool[] The signs of the added (true) or subtracted (false) amounts.\n', '    /// @param _updatedStakes uint256[] The updated total staked amounts.\n', '    function stakeChangeBatch(address[] calldata _stakeOwners, uint256[] calldata _amounts, bool[] calldata _signs,\n', '        uint256[] calldata _updatedStakes) external;\n', '\n', '    /// @dev Notifies of stake migration event.\n', '    /// @param _stakeOwner address The address of the subject stake owner.\n', '    /// @param _amount uint256 The migrated amount.\n', '    function stakeMigration(address _stakeOwner, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/interfaces/IElections.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '/// @title Elections contract interface\n', 'interface IElections /* is IStakeChangeNotifier */ {\n', '\t// Election state change events\n', '\tevent GuardianVotedUnready(address guardian);\n', '\tevent GuardianVotedOut(address guardian);\n', '\n', '\t// Function calls\n', '\tevent VoteUnreadyCasted(address voter, address subject);\n', '\tevent VoteOutCasted(address voter, address subject);\n', '\tevent StakeChanged(address addr, uint256 selfStake, uint256 delegated_stake, uint256 effective_stake);\n', '\n', '\tevent GuardianStatusUpdated(address addr, bool readyToSync, bool readyForCommittee);\n', '\n', '\t// Governance\n', '\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\n', '\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\n', '\tevent VoteOutPercentageThresholdChanged(uint8 newValue, uint8 oldValue);\n', '\tevent VoteUnreadyPercentageThresholdChanged(uint8 newValue, uint8 oldValue);\n', '\n', '\t/*\n', '\t * External methods\n', '\t */\n', '\n', '\t/// @dev Called by a guardian as part of the automatic vote-out flow\n', '\tfunction voteUnready(address subject_addr) external;\n', '\n', '\t/// @dev casts a voteOut vote by the sender to the given address\n', '\tfunction voteOut(address subjectAddr) external;\n', '\n', '\t/// @dev Called by a guardian when ready to start syncing with other nodes\n', '\tfunction readyToSync() external;\n', '\n', '\t/// @dev Called by a guardian when ready to join the committee, typically after syncing is complete or after being voted out\n', '\tfunction readyForCommittee() external;\n', '\n', '\t/*\n', '\t * Methods restricted to other Orbs contracts\n', '\t */\n', '\n', '\t/// @dev Called by: delegation contract\n', '\t/// Notifies a delegated stake change event\n', '\t/// total_delegated_stake = 0 if addr delegates to another guardian\n', '\tfunction delegatedStakeChange(address addr, uint256 selfStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationContract */;\n', '\n', '\t/// @dev Called by: guardian registration contract\n', '\t/// Notifies a new guardian was registered\n', '\tfunction guardianRegistered(address addr) external /* onlyGuardiansRegistrationContract */;\n', '\n', '\t/// @dev Called by: guardian registration contract\n', '\t/// Notifies a new guardian was unregistered\n', '\tfunction guardianUnregistered(address addr) external /* onlyGuardiansRegistrationContract */;\n', '\n', '\t/// @dev Called by: guardian registration contract\n', '\t/// Notifies on a guardian certification change\n', '\tfunction guardianCertificationChanged(address addr, bool isCertified) external /* onlyCertificationContract */;\n', '\n', '\t/*\n', '     * Governance\n', '\t */\n', '\n', '\t/// @dev Updates the address of the contract registry\n', '\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '\tfunction setVoteUnreadyTimeoutSeconds(uint32 voteUnreadyTimeoutSeconds) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\tfunction setVoteOutPercentageThreshold(uint8 voteUnreadyPercentageThreshold) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\tfunction setVoteUnreadyPercentageThreshold(uint8 voteUnreadyPercentageThreshold) external /* onlyFunctionalOwner onlyWhenActive */;\n', '\tfunction getSettings() external view returns (\n', '\t\tuint32 voteUnreadyTimeoutSeconds,\n', '\t\tuint32 minSelfStakePercentMille,\n', '\t\tuint8 voteUnreadyPercentageThreshold,\n', '\t\tuint8 voteOutPercentageThreshold\n', '\t);\n', '}\n', '\n', '// File: contracts/spec_interfaces/IGuardiansRegistration.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title Elections contract interface\n', 'interface IGuardiansRegistration {\n', '\tevent GuardianRegistered(address addr);\n', '\tevent GuardianDataUpdated(address addr, bytes4 ip, address orbsAddr, string name, string website, string contact);\n', '\tevent GuardianUnregistered(address addr);\n', '\tevent GuardianMetadataChanged(address addr, string key, string newValue, string oldValue);\n', '\n', '\t/*\n', '     * External methods\n', '     */\n', '\n', '    /// @dev Called by a participant who wishes to register as a guardian\n', '\tfunction registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website, string calldata contact) external;\n', '\n', '    /// @dev Called by a participant who wishes to update its propertires\n', '\tfunction updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website, string calldata contact) external;\n', '\n', '\t/// @dev Called by a participant who wishes to update its IP address (can be call by both main and Orbs addresses)\n', '\tfunction updateGuardianIp(bytes4 ip) external /* onlyWhenActive */;\n', '\n', '    /// @dev Called by a participant to update additional guardian metadata properties.\n', '    function setMetadata(string calldata key, string calldata value) external;\n', '\n', '    /// @dev Called by a participant to get additional guardian metadata properties.\n', '    function getMetadata(address addr, string calldata key) external view returns (string memory);\n', '\n', '    /// @dev Called by a participant who wishes to unregister\n', '\tfunction unregisterGuardian() external;\n', '\n', "    /// @dev Returns a guardian's data\n", '    /// Used also by the Election contract\n', '\tfunction getGuardianData(address addr) external view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, string memory contact, uint registration_time, uint last_update_time);\n', '\n', '\t/// @dev Returns the Orbs addresses of a list of guardians\n', '\t/// Used also by the committee contract\n', '\tfunction getGuardiansOrbsAddress(address[] calldata addrs) external view returns (address[] memory orbsAddrs);\n', '\n', "\t/// @dev Returns a guardian's ip\n", '\t/// Used also by the Election contract\n', '\tfunction getGuardianIp(address addr) external view returns (bytes4 ip);\n', '\n', '\t/// @dev Returns guardian ips\n', '\tfunction getGuardianIps(address[] calldata addr) external view returns (bytes4[] memory ips);\n', '\n', '\n', '\t/// @dev Returns true if the given address is of a registered guardian\n', '\t/// Used also by the Election contract\n', '\tfunction isRegistered(address addr) external view returns (bool);\n', '\n', '\t/*\n', '     * Methods restricted to other Orbs contracts\n', '     */\n', '\n', '    /// @dev Translates a list guardians Ethereum addresses to Orbs addresses\n', '    /// Used by the Election contract\n', '\tfunction getOrbsAddresses(address[] calldata ethereumAddrs) external view returns (address[] memory orbsAddr);\n', '\n', '\t/// @dev Translates a list guardians Orbs addresses to Ethereum addresses\n', '\t/// Used by the Election contract\n', '\tfunction getEthereumAddresses(address[] calldata orbsAddrs) external view returns (address[] memory ethereumAddr);\n', '\n', '\t/// @dev Resolves the ethereum address for a guardian, given an Ethereum/Orbs address\n', '\tfunction resolveGuardianAddress(address ethereumOrOrbsAddress) external view returns (address mainAddress);\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/ISubscriptions.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title Subscriptions contract interface\n', 'interface ISubscriptions {\n', '    event SubscriptionChanged(uint256 vcid, uint256 genRefTime, uint256 expiresAt, string tier, string deploymentSubset);\n', '    event Payment(uint256 vcid, address by, uint256 amount, string tier, uint256 rate);\n', '    event VcConfigRecordChanged(uint256 vcid, string key, string value);\n', '    event SubscriberAdded(address subscriber);\n', '    event VcCreated(uint256 vcid, address owner); // TODO what about isCertified, deploymentSubset?\n', '    event VcOwnerChanged(uint256 vcid, address previousOwner, address newOwner);\n', '\n', '    /*\n', '     *   Methods restricted to other Orbs contracts\n', '     */\n', '\n', '    /// @dev Called by: authorized subscriber (plan) contracts\n', '    /// Creates a new VC\n', '    function createVC(string calldata tier, uint256 rate, uint256 amount, address owner, bool isCertified, string calldata deploymentSubset) external returns (uint, uint);\n', '\n', '    /// @dev Called by: authorized subscriber (plan) contracts\n', '    /// Extends the subscription of an existing VC.\n', '    function extendSubscription(uint256 vcid, uint256 amount, address payer) external;\n', '\n', '    /// @dev called by VC owner to set a VC config record. Emits a VcConfigRecordChanged event.\n', '    function setVcConfigRecord(uint256 vcid, string calldata key, string calldata value) external /* onlyVcOwner */;\n', '\n', '    /// @dev returns the value of a VC config record\n', '    function getVcConfigRecord(uint256 vcid, string calldata key) external view returns (string memory);\n', '\n', '    /// @dev Transfers VC ownership to a new owner (can only be called by the current owner)\n', '    function setVcOwner(uint256 vcid, address owner) external /* onlyVcOwner */;\n', '\n', '    /// @dev Returns the genesis ref time delay\n', '    function getGenesisRefTimeDelay() external view returns (uint256);\n', '\n', '    /*\n', '     *   Governance methods\n', '     */\n', '\n', '    /// @dev Called by the owner to authorize a subscriber (plan)\n', '    function addSubscriber(address addr) external /* onlyFunctionalOwner */;\n', '\n', '    /// @dev Called by the owner to set the genesis ref time delay\n', '    function setGenesisRefTimeDelay(uint256 newGenesisRefTimeDelay) external /* onlyFunctionalOwner */;\n', '\n', '    /// @dev Updates the address of the contract registry\n', '    function setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IDelegation.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title Elections contract interface\n', 'interface IDelegations /* is IStakeChangeNotifier */ {\n', '    // Delegation state change events\n', '\tevent DelegatedStakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, address[] delegators, uint256[] delegatorTotalStakes);\n', '\n', '    // Function calls\n', '\tevent Delegated(address indexed from, address indexed to);\n', '\n', '\t/*\n', '     * External methods\n', '     */\n', '\n', '\t/// @dev Stake delegation\n', '\tfunction delegate(address to) external /* onlyWhenActive */;\n', '\n', '\tfunction refreshStakeNotification(address addr) external /* onlyWhenActive */;\n', '\n', '\t/*\n', '\t * Governance\n', '\t */\n', '\n', '    /// @dev Updates the address calldata of the contract registry\n', '\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '\tfunction importDelegations(address[] calldata from, address[] calldata to, bool notifyElections) external /* onlyMigrationOwner onlyDuringDelegationImport */;\n', '\tfunction finalizeDelegationImport() external /* onlyMigrationOwner onlyDuringDelegationImport */;\n', '\n', '\tevent DelegationsImported(address[] from, address[] to, bool notifiedElections);\n', '\tevent DelegationImportFinalized();\n', '\n', '\t/*\n', '\t * Getters\n', '\t */\n', '\n', '\tfunction getDelegatedStakes(address addr) external view returns (uint256);\n', '\tfunction getSelfDelegatedStake(address addr) external view returns (uint256);\n', '\tfunction getDelegation(address addr) external view returns (address);\n', '\tfunction getTotalDelegatedStake() external view returns (uint256) ;\n', '\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/IMigratableStakingContract.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title An interface for staking contracts which support stake migration.\n', 'interface IMigratableStakingContract {\n', '    /// @dev Returns the address of the underlying staked token.\n', '    /// @return IERC20 The address of the token.\n', '    function getToken() external view returns (IERC20);\n', '\n', '    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\n', '    /// the required amount using ERC20 approve.\n', '    /// @param _stakeOwner address The specified stake owner.\n', '    /// @param _amount uint256 The number of tokens to stake.\n', '    function acceptMigration(address _stakeOwner, uint256 _amount) external;\n', '\n', '    event AcceptedMigration(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '}\n', '\n', '// File: contracts/IStakingContract.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/// @title An interface for staking contracts.\n', 'interface IStakingContract {\n', '    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\n', '    /// the required amount using ERC20 approve.\n', '    /// @param _amount uint256 The amount of tokens to stake.\n', '    function stake(uint256 _amount) external;\n', '\n', '    /// @dev Unstakes ORBS tokens from msg.sender. If successful, this will start the cooldown period, after which\n', '    /// msg.sender would be able to withdraw all of his tokens.\n', '    /// @param _amount uint256 The amount of tokens to unstake.\n', '    function unstake(uint256 _amount) external;\n', '\n', '    /// @dev Requests to withdraw all of staked ORBS tokens back to msg.sender. Stake owners can withdraw their ORBS\n', '    /// tokens only after previously unstaking them and after the cooldown period has passed (unless the contract was\n', '    /// requested to release all stakes).\n', '    function withdraw() external;\n', '\n', '    /// @dev Restakes unstaked ORBS tokens (in or after cooldown) for msg.sender.\n', '    function restake() external;\n', '\n', '    /// @dev Distributes staking rewards to a list of addresses by directly adding rewards to their stakes. This method\n', '    /// assumes that the user has already approved at least the required amount using ERC20 approve. Since this is a\n', "    /// convenience method, we aren't concerned about reaching block gas limit by using large lists. We assume that\n", '    /// callers will be able to properly batch/paginate their requests.\n', '    /// @param _totalAmount uint256 The total amount of rewards to distributes.\n', '    /// @param _stakeOwners address[] The addresses of the stake owners.\n', '    /// @param _amounts uint256[] The amounts of the rewards.\n', '    function distributeRewards(uint256 _totalAmount, address[] calldata _stakeOwners, uint256[] calldata _amounts) external;\n', '\n', '    /// @dev Returns the stake of the specified stake owner (excluding unstaked tokens).\n', '    /// @param _stakeOwner address The address to check.\n', '    /// @return uint256 The total stake.\n', '    function getStakeBalanceOf(address _stakeOwner) external view returns (uint256);\n', '\n', '    /// @dev Returns the total amount staked tokens (excluding unstaked tokens).\n', '    /// @return uint256 The total staked tokens of all stake owners.\n', '    function getTotalStakedTokens() external view returns (uint256);\n', '\n', '    /// @dev Returns the time that the cooldown period ends (or ended) and the amount of tokens to be released.\n', '    /// @param _stakeOwner address The address to check.\n', '    /// @return cooldownAmount uint256 The total tokens in cooldown.\n', '    /// @return cooldownEndTime uint256 The time when the cooldown period ends (in seconds).\n', '    function getUnstakeStatus(address _stakeOwner) external view returns (uint256 cooldownAmount,\n', '        uint256 cooldownEndTime);\n', '\n', '    /// @dev Migrates the stake of msg.sender from this staking contract to a new approved staking contract.\n', '    /// @param _newStakingContract IMigratableStakingContract The new staking contract which supports stake migration.\n', '    /// @param _amount uint256 The amount of tokens to migrate.\n', '    function migrateStakedTokens(IMigratableStakingContract _newStakingContract, uint256 _amount) external;\n', '\n', '    event Staked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '    event Unstaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '    event Withdrew(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '    event Restaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '    event MigratedStake(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\n', '}\n', '\n', '// File: contracts/interfaces/IRewards.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '/// @title Rewards contract interface\n', 'interface IRewards {\n', '\n', '    function assignRewards() external;\n', '    function assignRewardsToCommittee(address[] calldata generalCommittee, uint256[] calldata generalCommitteeWeights, bool[] calldata certification) external /* onlyCommitteeContract */;\n', '\n', '    // staking\n', '\n', '    event StakingRewardsDistributed(address indexed distributer, uint256 fromBlock, uint256 toBlock, uint split, uint txIndex, address[] to, uint256[] amounts);\n', '    event StakingRewardsAssigned(address[] assignees, uint256[] amounts); // todo balance?\n', '    event StakingRewardsAddedToPool(uint256 added, uint256 total);\n', '    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\n', '\n', '    /// @return Returns the currently unclaimed orbs token reward balance of the given address.\n', '    function getStakingRewardBalance(address addr) external view returns (uint256 balance);\n', '\n', "    /// @dev Distributes msg.sender's orbs token rewards to a list of addresses, by transferring directly into the staking contract.\n", "    /// @dev `to[0]` must be the sender's main address\n", '    /// @dev Total delegators reward (`to[1:n]`) must be less then maxDelegatorsStakingRewardsPercentMille of total amount\n', '    function distributeOrbsTokenStakingRewards(uint256 totalAmount, uint256 fromBlock, uint256 toBlock, uint split, uint txIndex, address[] calldata to, uint256[] calldata amounts) external;\n', '\n', '    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\n', '    function topUpStakingRewardsPool(uint256 amount) external;\n', '\n', '    /*\n', '    *   Reward-governor methods\n', '    */\n', '\n', '    /// @dev Assigns rewards and sets a new monthly rate for the pro-rata pool.\n', '    function setAnnualStakingRewardsRate(uint256 annual_rate_in_percent_mille, uint256 annual_cap) external /* onlyFunctionalOwner */;\n', '\n', '\n', '    // fees\n', '\n', '    event FeesAssigned(uint256 generalGuardianAmount, uint256 certifiedGuardianAmount);\n', '    event FeesWithdrawn(address guardian, uint256 amount);\n', '    event FeesWithdrawnFromBucket(uint256 bucketId, uint256 withdrawn, uint256 total, bool isCertified);\n', '    event FeesAddedToBucket(uint256 bucketId, uint256 added, uint256 total, bool isCertified);\n', '\n', '    /*\n', '     *   External methods\n', '     */\n', '\n', '    /// @return Returns the currently unclaimed orbs token reward balance of the given address.\n', '    function getFeeBalance(address addr) external view returns (uint256 balance);\n', '\n', "    /// @dev Transfer all of msg.sender's outstanding balance to their account\n", '    function withdrawFeeFunds() external;\n', '\n', '    /// @dev Called by: subscriptions contract\n', '    /// Top-ups the certification fee pool with the given amount at the given rate (typically called by the subscriptions contract)\n', '    function fillCertificationFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external;\n', '\n', '    /// @dev Called by: subscriptions contract\n', '    /// Top-ups the general fee pool with the given amount at the given rate (typically called by the subscriptions contract)\n', '    function fillGeneralFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external;\n', '\n', '    function getTotalBalances() external view returns (uint256 feesTotalBalance, uint256 stakingRewardsTotalBalance, uint256 bootstrapRewardsTotalBalance);\n', '\n', '    // bootstrap\n', '\n', '    event BootstrapRewardsAssigned(uint256 generalGuardianAmount, uint256 certifiedGuardianAmount);\n', '    event BootstrapAddedToPool(uint256 added, uint256 total);\n', '    event BootstrapRewardsWithdrawn(address guardian, uint256 amount);\n', '\n', '    /*\n', '     *   External methods\n', '     */\n', '\n', '    /// @return Returns the currently unclaimed bootstrap balance of the given address.\n', '    function getBootstrapBalance(address addr) external view returns (uint256 balance);\n', '\n', "    /// @dev Transfer all of msg.sender's outstanding balance to their account\n", '    function withdrawBootstrapFunds() external;\n', '\n', '    /// @return The timestamp of the last reward assignment.\n', '    function getLastRewardAssignmentTime() external view returns (uint256 time);\n', '\n', '    /// @dev Transfers the given amount of bootstrap tokens form the sender to this contract and update the pool.\n', '    /// Assumes the tokens were approved for transfer\n', '    function topUpBootstrapPool(uint256 amount) external;\n', '\n', '    /*\n', '     * Reward-governor methods\n', '     */\n', '\n', '    /// @dev Assigns rewards and sets a new monthly rate for the geenral commitee bootstrap.\n', '    function setGeneralCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalOwner */;\n', '\n', '    /// @dev Assigns rewards and sets a new monthly rate for the certification commitee bootstrap.\n', '    function setCertificationCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalOwner */;\n', '\n', '    event EmergencyWithdrawal(address addr);\n', '\n', '    function emergencyWithdraw() external /* onlyMigrationManager */;\n', '\n', '    /*\n', '     * General governance\n', '     */\n', '\n', '    /// @dev Updates the address of the contract registry\n', '    function setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\n', '\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableMigrationOwnership.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableMigrationOwnership is Context{\n', '    address private _migrationOwner;\n', '    address pendingMigrationOwner;\n', '\n', '    event MigrationOwnershipTransferred(address indexed previousMigrationOwner, address indexed newMigrationOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial migrationMigrationOwner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _migrationOwner = msgSender;\n', '        emit MigrationOwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current migrationOwner.\n', '     */\n', '    function migrationOwner() public view returns (address) {\n', '        return _migrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the migrationOwner.\n', '     */\n', '    modifier onlyMigrationOwner() {\n', '        require(isMigrationOwner(), "WithClaimableMigrationOwnership: caller is not the migrationOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current migrationOwner.\n', '     */\n', '    function isMigrationOwner() public view returns (bool) {\n', '        return _msgSender() == _migrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without migrationOwner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current migrationOwner.\n', '     *\n', '     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner,\n', '     * thereby removing any functionality that is only available to the migrationOwner.\n', '     */\n', '    function renounceMigrationOwnership() public onlyMigrationOwner {\n', '        emit MigrationOwnershipTransferred(_migrationOwner, address(0));\n', '        _migrationOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers migrationOwnership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferMigrationOwnership(address newMigrationOwner) internal {\n', '        require(newMigrationOwner != address(0), "MigrationOwner: new migrationOwner is the zero address");\n', '        emit MigrationOwnershipTransferred(_migrationOwner, newMigrationOwner);\n', '        _migrationOwner = newMigrationOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingMigrationOwner() {\n', '        require(msg.sender == pendingMigrationOwner, "Caller is not the pending migrationOwner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current migrationOwner to set the pendingOwner address.\n', '     * @param newMigrationOwner The address to transfer migrationOwnership to.\n', '     */\n', '    function transferMigrationOwnership(address newMigrationOwner) public onlyMigrationOwner {\n', '        pendingMigrationOwner = newMigrationOwner;\n', '    }\n', '    /**\n', '     * @dev Allows the pendingMigrationOwner address to finalize the transfer.\n', '     */\n', '    function claimMigrationOwnership() external onlyPendingMigrationOwner {\n', '        _transferMigrationOwnership(pendingMigrationOwner);\n', '        pendingMigrationOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/Lockable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Lockable is WithClaimableMigrationOwnership {\n', '\n', '    bool public locked;\n', '\n', '    event Locked();\n', '    event Unlocked();\n', '\n', '    function lock() external onlyMigrationOwner {\n', '        locked = true;\n', '        emit Locked();\n', '    }\n', '\n', '    function unlock() external onlyMigrationOwner {\n', '        locked = false;\n', '        emit Unlocked();\n', '    }\n', '\n', '    modifier onlyWhenActive() {\n', '        require(!locked, "contract is locked for this operation");\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/spec_interfaces/IProtocolWallet.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '/// @title Protocol Wallet interface\n', 'interface IProtocolWallet {\n', '    event FundsAddedToPool(uint256 added, uint256 total);\n', '    event ClientSet(address client);\n', '    event MaxAnnualRateSet(uint256 maxAnnualRate);\n', '    event EmergencyWithdrawal(address addr);\n', '\n', '    /// @dev Returns the address of the underlying staked token.\n', '    /// @return IERC20 The address of the token.\n', '    function getToken() external view returns (IERC20);\n', '\n', '    /// @dev Returns the address of the underlying staked token.\n', '    /// @return IERC20 The address of the token.\n', '    function getBalance() external view returns (uint256 balance);\n', '\n', '    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\n', '    function topUp(uint256 amount) external;\n', '\n', "    /// @dev Withdraw from pool to a the sender's address, limited by the pool's MaxRate.\n", '    /// A maximum of MaxRate x time period since the last Orbs transfer may be transferred out.\n', '    /// Flow:\n', '    /// PoolWallet.approveTransfer(amount);\n', '    /// ERC20.transferFrom(PoolWallet, client, amount)\n', '    function withdraw(uint256 amount) external; /* onlyClient */\n', '\n', '    /* Governance */\n', '    /// @dev Sets a new transfer rate for the Orbs pool.\n', '    function setMaxAnnualRate(uint256 annual_rate) external; /* onlyMigrationManager */\n', '\n', "    /// @dev transfer the entire pool's balance to a new wallet.\n", '    function emergencyWithdraw() external; /* onlyMigrationManager */\n', '\n', '    /// @dev sets the address of the new contract\n', '    function setClient(address client) external; /* onlyFunctionalManager */\n', '}\n', '\n', '// File: contracts/ContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ContractRegistryAccessor is WithClaimableMigrationOwnership {\n', '\n', '    IContractRegistry contractRegistry;\n', '\n', '    event ContractRegistryAddressUpdated(address addr);\n', '\n', '    function setContractRegistry(IContractRegistry _contractRegistry) external onlyMigrationOwner {\n', '        contractRegistry = _contractRegistry;\n', '        emit ContractRegistryAddressUpdated(address(_contractRegistry));\n', '    }\n', '\n', '    function getProtocolContract() public view returns (IProtocol) {\n', '        return IProtocol(contractRegistry.get("protocol"));\n', '    }\n', '\n', '    function getRewardsContract() public view returns (IRewards) {\n', '        return IRewards(contractRegistry.get("rewards"));\n', '    }\n', '\n', '    function getCommitteeContract() public view returns (ICommittee) {\n', '        return ICommittee(contractRegistry.get("committee"));\n', '    }\n', '\n', '    function getElectionsContract() public view returns (IElections) {\n', '        return IElections(contractRegistry.get("elections"));\n', '    }\n', '\n', '    function getDelegationsContract() public view returns (IDelegations) {\n', '        return IDelegations(contractRegistry.get("delegations"));\n', '    }\n', '\n', '    function getGuardiansRegistrationContract() public view returns (IGuardiansRegistration) {\n', '        return IGuardiansRegistration(contractRegistry.get("guardiansRegistration"));\n', '    }\n', '\n', '    function getCertificationContract() public view returns (ICertification) {\n', '        return ICertification(contractRegistry.get("certification"));\n', '    }\n', '\n', '    function getStakingContract() public view returns (IStakingContract) {\n', '        return IStakingContract(contractRegistry.get("staking"));\n', '    }\n', '\n', '    function getSubscriptionsContract() public view returns (ISubscriptions) {\n', '        return ISubscriptions(contractRegistry.get("subscriptions"));\n', '    }\n', '\n', '    function getStakingRewardsWallet() public view returns (IProtocolWallet) {\n', '        return IProtocolWallet(contractRegistry.get("stakingRewardsWallet"));\n', '    }\n', '\n', '    function getBootstrapRewardsWallet() public view returns (IProtocolWallet) {\n', '        return IProtocolWallet(contractRegistry.get("bootstrapRewardsWallet"));\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/WithClaimableFunctionalOwnership.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableFunctionalOwnership is Context{\n', '    address private _functionalOwner;\n', '    address pendingFunctionalOwner;\n', '\n', '    event FunctionalOwnershipTransferred(address indexed previousFunctionalOwner, address indexed newFunctionalOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial functionalFunctionalOwner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _functionalOwner = msgSender;\n', '        emit FunctionalOwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current functionalOwner.\n', '     */\n', '    function functionalOwner() public view returns (address) {\n', '        return _functionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the functionalOwner.\n', '     */\n', '    modifier onlyFunctionalOwner() {\n', '        require(isFunctionalOwner(), "WithClaimableFunctionalOwnership: caller is not the functionalOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current functionalOwner.\n', '     */\n', '    function isFunctionalOwner() public view returns (bool) {\n', '        return _msgSender() == _functionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without functionalOwner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current functionalOwner.\n', '     *\n', '     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner,\n', '     * thereby removing any functionality that is only available to the functionalOwner.\n', '     */\n', '    function renounceFunctionalOwnership() public onlyFunctionalOwner {\n', '        emit FunctionalOwnershipTransferred(_functionalOwner, address(0));\n', '        _functionalOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers functionalOwnership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferFunctionalOwnership(address newFunctionalOwner) internal {\n', '        require(newFunctionalOwner != address(0), "FunctionalOwner: new functionalOwner is the zero address");\n', '        emit FunctionalOwnershipTransferred(_functionalOwner, newFunctionalOwner);\n', '        _functionalOwner = newFunctionalOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingFunctionalOwner() {\n', '        require(msg.sender == pendingFunctionalOwner, "Caller is not the pending functionalOwner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current functionalOwner to set the pendingOwner address.\n', '     * @param newFunctionalOwner The address to transfer functionalOwnership to.\n', '     */\n', '    function transferFunctionalOwnership(address newFunctionalOwner) public onlyFunctionalOwner {\n', '        pendingFunctionalOwner = newFunctionalOwner;\n', '    }\n', '    /**\n', '     * @dev Allows the pendingFunctionalOwner address to finalize the transfer.\n', '     */\n', '    function claimFunctionalOwnership() external onlyPendingFunctionalOwner {\n', '        _transferFunctionalOwnership(pendingFunctionalOwner);\n', '        pendingFunctionalOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: ../contracts/Certification.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', 'contract Certification is ICertification, ContractRegistryAccessor, WithClaimableFunctionalOwnership, Lockable {\n', '\n', '    mapping (address => bool) guardianCertification;\n', '\n', '    /*\n', '     * External methods\n', '     */\n', '\n', '    function isGuardianCertified(address addr) external view returns (bool isCertified) {\n', '        return guardianCertification[addr];\n', '    }\n', '\n', '    function setGuardianCertification(address addr, bool isCertified) external onlyFunctionalOwner onlyWhenActive {\n', '        guardianCertification[addr] = isCertified;\n', '        emit GuardianCertificationUpdate(addr, isCertified);\n', '        getElectionsContract().guardianCertificationChanged(addr, isCertified);\n', '    }\n', '\n', '}']