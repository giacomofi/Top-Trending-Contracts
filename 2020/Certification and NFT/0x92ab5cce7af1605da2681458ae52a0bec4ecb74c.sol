['pragma solidity 0.5.15;\n', '\n', '// A contract to facilitate trustless OTC purchases and sales, particularly focused for DAO treasury management where one actor is slow moving.\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface UniswapPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint private constant Q112 = uint(1) << RESOLUTION;\n', '    uint private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair,\n', '        bool isToken0\n', '    ) internal view returns (uint priceCumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = UniswapPair(pair).getReserves();\n', '        if (isToken0) {\n', '          priceCumulative = UniswapPair(pair).price0CumulativeLast();\n', '\n', '          // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '          if (blockTimestampLast != blockTimestamp) {\n', '              // subtraction overflow is desired\n', '              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '              // addition overflow is desired\n', '              // counterfactual\n', '              priceCumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '          }\n', '        } else {\n', '          priceCumulative = UniswapPair(pair).price1CumulativeLast();\n', '          // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '          if (blockTimestampLast != blockTimestamp) {\n', '              // subtraction overflow is desired\n', '              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '              // addition overflow is desired\n', '              // counterfactual\n', '              priceCumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '          }\n', '        }\n', '\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface ExpandedERC20 {\n', '  function decimals() external returns (uint8);\n', '}\n', '\n', 'contract OTC {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice Address of the approved trader\n', '    address public approved_trader;\n', '\n', '    /// @notice Token the reserves are selling\n', '    address public reserves_sell_token;\n', '\n', '    /// @notice Token the reserves are puchasing\n', '    address public reserves_purchase_token;\n', '\n', '    /// @notice For a sale of a specific amount\n', '    uint256 public sell_amount;\n', '\n', '    /// @notice For a purchase of a specific amount\n', '    uint256 public purchase_amount;\n', '\n', '    /// @notice Denotes if trade is a sale or purchase\n', '    bool public isSale;\n', '\n', '    /// @notice Current uniswap pair for purchase & sale tokens\n', '    address public uniswap_pair1;\n', '\n', '    /// @notice Second uniswap pair for if TWAP uses two markets to determine price (for liquidity purposes)\n', '    address public uniswap_pair2;\n', '\n', '    /// @notice Flag for if purchase token is toke 0 in uniswap pair 2\n', '    bool public purchaseTokenIs0;\n', '\n', '    /// @notice Flag for if sale token is token 0 in uniswap pair\n', '    bool public saleTokenIs0;\n', '\n', '    /// @notice TWAP for first hop\n', '    uint256 public priceAverageSell;\n', '\n', '    /// @notice TWAP for second hop\n', '    uint256 public priceAverageBuy;\n', '\n', '    /// @notice last TWAP update time\n', '    uint32 public blockTimestampLast;\n', '\n', '    /// @notice last TWAP cumulative price;\n', '    uint256 public priceCumulativeLastSell;\n', '\n', '    /// @notice last TWAP cumulative price for two hop pairs;\n', '    uint256 public priceCumulativeLastBuy;\n', '\n', '    /// @notice Time between TWAP updates\n', '    uint256 public period;\n', '\n', '    /// @notice Grace period after last twap update for a trade to occur\n', '    uint256 public constant GRACE = 60 * 60; // 1 hour\n', '\n', '    /// @notice Uniswap Factory\n', '    address public constant uniFact = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '\n', '    /// @notice constant used for percentage calculations\n', '    uint256 public constant BASE = 10**18;\n', '\n', '    /// @notice Reserve to withdraw from\n', '    address public reserve;\n', '\n', '    /// @notice % bound away from TWAP price\n', '    uint256 public twap_bounds;\n', '\n', '    /// @notice counts number of twaps\n', '    uint256 public twap_counter;\n', '\n', '    /// @notice denotes a trade as complete\n', '    bool public complete;\n', '\n', '    /// @notice governor\n', '    address public gov;\n', '\n', '    /// @notice pending governor\n', '    address public pendingGov;\n', '\n', '    event NewPendingGov(address oldPendingGov, address pendingGov);\n', '    event NewGov(address oldGov, address newGov);\n', '    event SaleSetup(address trader, address reserve, address sellToken, address purchaseToken, uint256 sellAmount);\n', '    event BuySetup(address trader, address reserve, address sellToken, address purchaseToken, uint256 buyAmount);\n', '\n', '    modifier onlyGov() {\n', '        require(msg.sender == gov);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '      gov = msg.sender;\n', '    }\n', '\n', '    function _setPendingGov(address pending)\n', '        public\n', '        onlyGov\n', '    {\n', '        require(pending != address(0));\n', '        address oldPending = pendingGov;\n', '        pendingGov = pending;\n', '        emit NewPendingGov(oldPending, pending);\n', '    }\n', '\n', '    function acceptGov()\n', '        public\n', '    {\n', '        require(msg.sender == pendingGov);\n', '        address old = gov;\n', '        gov = pendingGov;\n', '        emit NewGov(old, pendingGov);\n', '    }\n', '\n', '\n', '\n', '    function setup_sale (\n', '        address trader,\n', '        address sell_token,\n', '        address purchase_token,\n', '        uint256 sell_amount_,\n', '        uint256 twap_period,\n', '        uint256 twap_bounds_,\n', '        address uniswap1,\n', '        address uniswap2, // if two hop\n', '        address reserve_\n', '    )\n', '        public\n', '        onlyGov\n', '    {\n', '        approved_trader = trader;\n', '        reserves_sell_token = sell_token;\n', '        reserves_purchase_token = purchase_token;\n', '        sell_amount = sell_amount_;\n', '        reserve = reserve_;\n', '        isSale = true;\n', '        period = twap_period;\n', '        twap_bounds = twap_bounds_;\n', '        complete = false;\n', '        reset_twap(uniswap1, uniswap2, sell_token, purchase_token);\n', '        emit SaleSetup(trader, reserve_, sell_token, purchase_token, sell_amount_);\n', '    }\n', '\n', '    function setup_purchase (\n', '        address trader,\n', '        address sell_token,\n', '        address purchase_token,\n', '        uint256 purchase_amount_,\n', '        uint256 twap_period,\n', '        uint256 twap_bounds_,\n', '        address uniswap1,\n', '        address uniswap2, // if two hop\n', '        address reserve_\n', '    )\n', '        public\n', '        onlyGov\n', '    {\n', '        approved_trader = trader;\n', '        reserves_sell_token = sell_token;\n', '        reserves_purchase_token = purchase_token;\n', '        purchase_amount = purchase_amount_;\n', '        reserve = reserve_;\n', '        isSale = false;\n', '        period = twap_period;\n', '        twap_bounds = twap_bounds_;\n', '        complete = false;\n', '        reset_twap(uniswap1, uniswap2, sell_token, purchase_token);\n', '        emit BuySetup(trader, reserve_, sell_token, purchase_token, purchase_amount_);\n', '    }\n', '\n', '    function trade (\n', '        uint256 amount_in,\n', '        uint256 amount_out\n', '    )\n', '        public\n', '    {\n', '        require(msg.sender == approved_trader);\n', '        require(recencyCheck(), "TWAP is not recent enough");\n', '        require(!complete, "Trade has already been performed");\n', '\n', '        if (isSale) {\n', '            // ensures trader is getting what they expect\n', '            require(sell_amount >= amount_out, "Trader expected out < out");\n', '\n', '            // input amount is how many tokens we are buying from desk\n', '            require(withinBounds(amount_in, sell_amount), "Sale price not within bounds of TWAP");\n', '\n', '            // transfers input amount of purchase token from trader to reserve\n', '            SafeERC20.safeTransferFrom(IERC20(reserves_purchase_token), approved_trader, reserve, amount_in);\n', '\n', '            // transfers set amount of sale token from reserve to trader\n', '            SafeERC20.safeTransferFrom(IERC20(reserves_sell_token), reserve, approved_trader, sell_amount);\n', '        } else {\n', '            // ensures trader is getting what they expect\n', '            require(purchase_amount <= amount_in, "Purchaser expected_in < in");\n', '\n', '            // input amount is how many tokens desk is requesting for a given\n', '            // number of tokens\n', '            require(withinBounds(purchase_amount, amount_out), "Purchase price not within bounds of TWAP");\n', '\n', '            // transfers set amount of purchase token from trader to reserve\n', '            SafeERC20.safeTransferFrom(IERC20(reserves_purchase_token), approved_trader, reserve, amount_in);\n', '\n', '            // transfers requested amount of sale token from reserve to trader\n', '            SafeERC20.safeTransferFrom(IERC20(reserves_sell_token), reserve, approved_trader, amount_out);\n', '        }\n', '\n', '        complete = true;\n', '    }\n', '\n', '    function recencyCheck()\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return (block.timestamp - blockTimestampLast < GRACE) && (twap_counter > 0);\n', '    }\n', '\n', '    // callable by anyone\n', '    function update_twap()\n', '        public\n', '    {\n', '        (uint256 sell_token_priceCumulative, uint32 blockTimestamp) =\n', '            UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair1, saleTokenIs0);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // ensure that at least one full period has passed since the last update\n', "        require(timeElapsed >= period, 'OTC: PERIOD_NOT_ELAPSED');\n", '\n', '        // overflow is desired\n', '        priceAverageSell = uint256(uint224((sell_token_priceCumulative - priceCumulativeLastSell) / timeElapsed));\n', '        priceCumulativeLastSell = sell_token_priceCumulative;\n', '\n', '\n', '        if (uniswap_pair2 != address(0)) {\n', '            // two hop\n', '            (uint256 buy_token_priceCumulative, ) =\n', '                UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair2, !purchaseTokenIs0);\n', '            priceAverageBuy = uint256(uint224((buy_token_priceCumulative - priceCumulativeLastBuy) / timeElapsed));\n', '\n', '            priceCumulativeLastBuy = buy_token_priceCumulative;\n', '        }\n', '\n', '        twap_counter = twap_counter.add(1);\n', '\n', '        blockTimestampLast = blockTimestamp;\n', '    }\n', '\n', '\n', '    function consult()\n', '        public\n', '        returns (uint256)\n', '    {\n', '        if (uniswap_pair2 != address(0)) {\n', '            // two hop\n', '            uint256 purchasePrice;\n', '            uint256 salePrice;\n', '            uint256 one;\n', '            if (saleTokenIs0) {\n', '                uint8 decs = ExpandedERC20(reserves_sell_token).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            } else {\n', '                uint8 decs = ExpandedERC20(reserves_sell_token).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            }\n', '\n', '            if (priceAverageSell > uint192(-1)) {\n', '               // eat loss of precision\n', '               // effectively: (x / 2**112) * 1e18\n', '               purchasePrice = (priceAverageSell >> 112) * one;\n', '            } else {\n', '              // cant overflow\n', '              // effectively: (x * 1e18 / 2**112)\n', '              purchasePrice = (priceAverageSell * one) >> 112;\n', '            }\n', '\n', '            if (purchaseTokenIs0) {\n', '                uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token1()).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            } else {\n', '                uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token0()).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            }\n', '\n', '            if (priceAverageBuy > uint192(-1)) {\n', '                salePrice = (priceAverageBuy >> 112) * one;\n', '            } else {\n', '                salePrice = (priceAverageBuy * one) >> 112;\n', '            }\n', '\n', '            return purchasePrice.mul(salePrice).div(one);\n', '        } else {\n', '            uint256 one;\n', '            if (saleTokenIs0) {\n', '                uint8 decs = ExpandedERC20(reserves_sell_token).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            } else {\n', '                uint8 decs = ExpandedERC20(reserves_sell_token).decimals();\n', '                require(decs <= 18, "too many decimals");\n', '                one = 10**uint256(decs);\n', '            }\n', '            // single hop\n', '            uint256 purchasePrice;\n', '            if (priceAverageSell > uint192(-1)) {\n', '               // eat loss of precision\n', '               // effectively: (x / 2**112) * 1e18\n', '               purchasePrice = (priceAverageSell >> 112) * one;\n', '            } else {\n', '                // cant overflow\n', '                // effectively: (x * 1e18 / 2**112)\n', '                purchasePrice = (priceAverageSell * one) >> 112;\n', '            }\n', '            return purchasePrice;\n', '        }\n', '    }\n', '\n', '    function reset_twap(\n', '        address uniswap1,\n', '        address uniswap2,\n', '        address sell_token,\n', '        address purchase_token\n', '    )\n', '        internal\n', '    {\n', '        uniswap_pair1 = uniswap1;\n', '        uniswap_pair2 = uniswap2;\n', '\n', '        blockTimestampLast = 0;\n', '        priceCumulativeLastSell = 0;\n', '        priceCumulativeLastBuy = 0;\n', '        priceAverageBuy = 0;\n', '\n', '        if (UniswapPair(uniswap1).token0() == sell_token) {\n', '            saleTokenIs0 = true;\n', '        } else {\n', '            saleTokenIs0 = false;\n', '        }\n', '\n', '        if (uniswap2 != address(0)) {\n', '            if (UniswapPair(uniswap2).token0() == purchase_token) {\n', '                purchaseTokenIs0 = true;\n', '            } else {\n', '                purchaseTokenIs0 = false;\n', '            }\n', '        }\n', '\n', '        update_twap();\n', '        twap_counter = 0;\n', '    }\n', '\n', '    function quote(\n', '      uint256 purchaseAmount,\n', '      uint256 saleAmount\n', '    )\n', '      public\n', '      returns (uint256)\n', '    {\n', '      uint256 decs = uint256(ExpandedERC20(reserves_sell_token).decimals());\n', '      uint256 one = 10**decs;\n', '      return purchaseAmount.mul(one).div(saleAmount);\n', '    }\n', '\n', '    function bounds()\n', '        public\n', '        returns (uint256)\n', '    {\n', '        uint256 uniswap_quote = consult();\n', '        uint256 minimum = uniswap_quote.mul(BASE.sub(twap_bounds)).div(BASE);\n', '        return minimum;\n', '    }\n', '\n', '\n', '    function withinBounds (\n', '        uint256 purchaseAmount,\n', '        uint256 saleAmount\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        uint256 quoted = quote(purchaseAmount, saleAmount);\n', '        uint256 minimum = bounds();\n', '        return quoted > minimum;\n', '    }\n', '}']