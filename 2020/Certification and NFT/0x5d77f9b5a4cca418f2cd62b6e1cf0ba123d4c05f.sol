['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Mints `amount` tokens to address `account`.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeMath64 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        uint64 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint64 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint64 a, uint64 b, string memory errorMessage) internal pure returns (uint64) {\n', '        require(b <= a, errorMessage);\n', '        uint64 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint64 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint64 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n']
['/* Copyright (C) 2020 PlotX.io\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract PlotXToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public lockedForGV;\n', '\n', '    string public name = "PLOT";\n', '    string public symbol = "PLOT";\n', '    uint8 public decimals = 18;\n', '    address public operator;\n', '\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator, "Not operator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize PLOT token\n', '     * @param _initialSupply Initial token supply\n', '     * @param _initialTokenHolder Initial token holder address\n', '     */\n', '    constructor(uint256 _initialSupply, address _initialTokenHolder) public {\n', '        _mint(_initialTokenHolder, _initialSupply);\n', '        operator = _initialTokenHolder;\n', '    }\n', '\n', '    /**\n', '     * @dev change operator address\n', '     * @param _newOperator address of new operator\n', '     */\n', '    function changeOperator(address _newOperator)\n', '        public\n', '        onlyOperator\n', '        returns (bool)\n', '    {\n', '        require(_newOperator != address(0), "New operator cannot be 0 address");\n', '        operator = _newOperator;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev burns an amount of the tokens of the message sender\n', '     * account.\n', '     * @param amount The amount that will be burnt.\n', '     */\n', '    function burn(uint256 amount) public {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '\n', '    /**\n', '     * @dev function that mints an amount of the token and assigns it to\n', '     * an account.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param amount The amount that will be created.\n', '     */\n', '    function mint(address account, uint256 amount)\n', '        public\n', '        onlyOperator\n', '        returns (bool)\n', '    {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(lockedForGV[msg.sender] < now, "Locked for governance"); // if not voted under governance\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public returns (bool) {\n', '        require(lockedForGV[from] < now, "Locked for governance"); // if not voted under governance\n', '        _transferFrom(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev Lock the user's tokens\n", "     * @param _of user's address.\n", '     */\n', '    function lockForGovernanceVote(address _of, uint256 _period)\n', '        public\n', '        onlyOperator\n', '    {\n', '        if (_period.add(now) > lockedForGV[_of])\n', '            lockedForGV[_of] = _period.add(now);\n', '    }\n', '\n', '    function isLockedForGV(address _of) public view returns (bool) {\n', '        return (lockedForGV[_of] > now);\n', '    }\n', '}\n']
['pragma solidity ^0.5.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function _transferFrom(address sender, address recipient, uint256 amount) internal {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n']
['/* Copyright (C) 2020 PlotX.io\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'import "./PlotXToken.sol";\n', 'import "./SafeMath.sol";\n', 'import "./ERC20.sol";\n', '\n', '\n', 'contract Staking {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Structure to store Interest details.\n', '     * It contains total amount of tokens staked and globalYield.\n', '     */\n', '    struct InterestData {\n', '        uint256 globalTotalStaked;\n', '        uint256 globalYieldPerToken; \n', '        uint256 lastUpdated;\n', '        mapping(address => Staker) stakers;  \n', '    }\n', '\n', '    /**\n', '     * @dev Structure to store staking details.\n', '     * It contains amount of tokens staked and withdrawn interest.\n', '     */\n', '    struct Staker {\n', '        uint256 totalStaked;\n', '        uint256 withdrawnToDate;\n', '        uint256 stakeBuyinRate;  \n', '    }\n', '\n', '\n', '    // Token address\n', '    ERC20 private stakeToken;\n', '\n', '    // Reward token\n', '    PlotXToken private rewardToken;\n', '\n', '    // Interest and staker data\n', '    InterestData public interestData;\n', '\n', '    uint public stakingStartTime;\n', '\n', '    uint public totalReward;\n', '\n', '    // unclaimed reward will be trasfered to this account\n', '    address public vaultAddress; \n', '\n', '    // 10^18\n', '    uint256 private constant DECIMAL1e18 = 10**18;\n', '\n', '    //Total time (in sec) over which reward will be distributed\n', '    uint256 public stakingPeriod;\n', '\n', '    /**\n', '     * @dev Emitted when `staker` stake `value` tokens.\n', '     */\n', '    event Staked(address indexed staker, uint256 value, uint256 _globalYieldPerToken);\n', '\n', '    /**\n', '     * @dev Emitted when `staker` withdraws their stake `value` tokens.\n', '     */\n', '    event StakeWithdrawn(address indexed staker, uint256 value, uint256 _globalYieldPerToken);\n', '\n', '\n', '    /**\n', '     * @dev Emitted when `staker` collects interest `_value`.\n', '     */\n', '    event InterestCollected(\n', '        address indexed staker,\n', '        uint256 _value,\n', '        uint256 _globalYieldPerToken\n', '    );\n', '\n', '    /**     \n', '     * @dev Constructor     \n', '     * @param _stakeToken The address of stake Token       \n', '     * @param _rewardToken The address of reward Token   \n', '     * @param _stakingPeriod valid staking time after staking starts\n', '     * @param _totalRewardToBeDistributed total amount to be distributed as reward\n', '     */\n', '    constructor(\n', '        address _stakeToken,\n', '        address _rewardToken,\n', '        uint256 _stakingPeriod,\n', '        uint256 _totalRewardToBeDistributed,\n', '        uint256 _stakingStart,\n', '        address _vaultAdd\n', '    ) public {\n', '        require(_stakingPeriod > 0, "Should be positive");\n', '        require(_totalRewardToBeDistributed > 0, "Total reward can not be 0");\n', '        require(_stakingStart >= now, "Can not be past time");\n', '        require(_stakeToken != address(0), "Can not be null address");\n', '        require(_rewardToken != address(0), "Can not be null address");\n', '        require(_vaultAdd != address(0), "Can not be null address");\n', '        stakeToken = ERC20(_stakeToken);\n', '        rewardToken = PlotXToken(_rewardToken);\n', '        stakingStartTime = _stakingStart;\n', '        interestData.lastUpdated = _stakingStart;\n', '        stakingPeriod = _stakingPeriod;\n', '        totalReward = _totalRewardToBeDistributed;\n', '        vaultAddress = _vaultAdd;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a staker to deposit Tokens. Notice that `approve` is\n', '     * needed to be executed before the execution of this method.\n', '     * @param _amount The amount of tokens to stake\n', '     */\n', '    function stake(uint256 _amount) external {\n', '        require(_amount > 0, "You need to stake a positive token amount");\n', '        require(\n', '            stakeToken.transferFrom(msg.sender, address(this), _amount),\n', '            "TransferFrom failed, make sure you approved token transfer"\n', '        );\n', '        require(now.sub(stakingStartTime) <= stakingPeriod, "Can not stake after staking period passed");\n', '        uint newlyInterestGenerated = now.sub(interestData.lastUpdated).mul(totalReward).div(stakingPeriod);\n', '        interestData.lastUpdated = now;\n', '        updateGlobalYieldPerToken(newlyInterestGenerated);\n', '        updateStakeData(msg.sender, _amount);\n', '        emit Staked(msg.sender, _amount, interestData.globalYieldPerToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates InterestData and Staker data while staking.\n', '     * must call update globalYieldPerToken before this operation\n', "     * @param _staker                 Staker's address\n", '     * @param _stake                  Amount of stake\n', '     *\n', '     */\n', '    function updateStakeData(\n', '        address _staker,\n', '        uint256 _stake\n', '    ) internal {\n', '        Staker storage _stakerData = interestData.stakers[_staker];\n', '\n', '        _stakerData.totalStaked = _stakerData.totalStaked.add(_stake);\n', '\n', '        updateStakeBuyinRate(\n', '            _stakerData,\n', '            interestData.globalYieldPerToken,\n', '            _stake\n', '        );\n', '\n', '        interestData.globalTotalStaked = interestData.globalTotalStaked.add(_stake);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates and updates the yield rate in which the staker has entered\n', '     * a staker may stake multiple times, so we calculate his cumulative rate his earning will be calculated based on GlobalYield and StakeBuyinRate\n', '     * Formula:\n', '     * StakeBuyinRate = [StakeBuyinRate(P) + (GlobalYield(P) x Stake)]\n', '     *\n', "     * @param _stakerData                  Staker's Data\n", '     * @param _globalYieldPerToken         Total yielding amount per token \n', '     * @param _stake                       Amount staked \n', '     *\n', '     */\n', '    function updateStakeBuyinRate(\n', '        Staker storage _stakerData,\n', '        uint256 _globalYieldPerToken,\n', '        uint256 _stake\n', '    ) internal {\n', '\n', '        _stakerData.stakeBuyinRate = _stakerData.stakeBuyinRate.add(\n', '            _globalYieldPerToken.mul(_stake).div(DECIMAL1e18)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws the sender staked Token.\n', '     */\n', '    function withdrawStakeAndInterest(uint256 _amount) external {\n', '        Staker storage staker = interestData.stakers[msg.sender];\n', '        require(_amount > 0, "Should withdraw positive amount");\n', '        require(staker.totalStaked >= _amount, "Not enough token staked");\n', '        withdrawInterest();\n', '        updateStakeAndInterestData(msg.sender, _amount);\n', '        require(stakeToken.transfer(msg.sender, _amount), "withdraw transfer failed");\n', '        emit StakeWithdrawn(msg.sender, _amount, interestData.globalYieldPerToken);\n', '    }\n', '    \n', '    /**\n', '     * @dev Updates InterestData and Staker data while withdrawing stake.\n', '     *\n', '     * @param _staker                 Staker address\n', '     * @param _amount                 Amount of stake to withdraw\n', '     *\n', '     */    \n', '    function updateStakeAndInterestData(\n', '        address _staker,\n', '        uint256 _amount\n', '    ) internal {\n', '        Staker storage _stakerData = interestData.stakers[_staker];\n', '\n', '        _stakerData.totalStaked = _stakerData.totalStaked.sub(_amount);\n', '\n', '        interestData.globalTotalStaked = interestData.globalTotalStaked.sub(_amount);\n', '\n', '        _stakerData.stakeBuyinRate = 0;\n', '        _stakerData.withdrawnToDate = 0;\n', '        updateStakeBuyinRate(\n', '            _stakerData,\n', '            interestData.globalYieldPerToken,\n', '            _stakerData.totalStaked\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws the sender Earned interest.\n', '     */\n', '    function withdrawInterest() public {\n', '        uint timeSinceLastUpdate = _timeSinceLastUpdate();\n', '        uint newlyInterestGenerated = timeSinceLastUpdate.mul(totalReward).div(stakingPeriod);\n', '        \n', '        updateGlobalYieldPerToken(newlyInterestGenerated);\n', '        uint256 interest = calculateInterest(msg.sender);\n', '        Staker storage stakerData = interestData.stakers[msg.sender];\n', '        stakerData.withdrawnToDate = stakerData.withdrawnToDate.add(interest);\n', '        require(rewardToken.transfer(msg.sender, interest), "Withdraw interest transfer failed");\n', '        emit InterestCollected(msg.sender, interest, interestData.globalYieldPerToken);\n', '    }\n', '\n', '    function updateGlobalYield() public {\n', '        uint timeSinceLastUpdate = _timeSinceLastUpdate();\n', '        uint newlyInterestGenerated = timeSinceLastUpdate.mul(totalReward).div(stakingPeriod);\n', '        updateGlobalYieldPerToken(newlyInterestGenerated);\n', '    }\n', '\n', '    function getYieldData(address _staker) public view returns(uint256, uint256)\n', '    {\n', '\n', '      return (interestData.globalYieldPerToken, interestData.stakers[_staker].stakeBuyinRate);\n', '    }\n', '\n', '    function _timeSinceLastUpdate() internal returns(uint256) {\n', '        uint timeSinceLastUpdate;\n', '        if(now.sub(stakingStartTime) > stakingPeriod)\n', '        {\n', '            timeSinceLastUpdate = stakingStartTime.add(stakingPeriod).sub(interestData.lastUpdated);\n', '            interestData.lastUpdated = stakingStartTime.add(stakingPeriod);\n', '        } else {\n', '            timeSinceLastUpdate = now.sub(interestData.lastUpdated);\n', '            interestData.lastUpdated = now;\n', '        }\n', '        return timeSinceLastUpdate;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates Interest for staker for their stake.\n', '     *\n', '     * Formula:\n', '     * EarnedInterest = MAX[TotalStaked x GlobalYield - (StakeBuyinRate + WithdrawnToDate), 0]\n', '     *\n', "     * @param _staker                     Staker's address\n", '     *\n', '     * @return The amount of tokens credit for the staker.\n', '     */\n', '    function calculateInterest(address _staker)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        Staker storage stakerData = interestData.stakers[_staker];\n', '\n', '        \n', '        uint256 _withdrawnToDate = stakerData.withdrawnToDate;\n', '\n', '        uint256 intermediateInterest = stakerData\n', '            .totalStaked\n', '            .mul(interestData.globalYieldPerToken).div(DECIMAL1e18);\n', '\n', '        uint256 intermediateVal = _withdrawnToDate.add(\n', '            stakerData.stakeBuyinRate\n', '        );\n', '\n', '        // will lead to -ve value\n', '        if (intermediateVal > intermediateInterest) {\n', '            return 0;\n', '        }\n', '\n', '        uint _earnedInterest = (intermediateInterest.sub(intermediateVal));\n', '\n', '        return _earnedInterest;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates and updates new accrued amount per token since last update.\n', '     *\n', '     * Formula:\n', '     * GlobalYield = GlobalYield(P) + newlyGeneratedInterest/GlobalTotalStake.\n', '     *\n', '     * @param _interestGenerated  Interest token earned since last update.\n', '     *\n', '     */\n', '    function updateGlobalYieldPerToken(\n', '        uint256 _interestGenerated\n', '    ) internal {\n', '        if (interestData.globalTotalStaked == 0) {\n', '            require(rewardToken.transfer(vaultAddress, _interestGenerated), "Transfer failed while trasfering to vault");\n', '            return;\n', '        }\n', '        interestData.globalYieldPerToken = interestData.globalYieldPerToken.add(\n', '            _interestGenerated\n', '                .mul(DECIMAL1e18) \n', '                .div(interestData.globalTotalStaked) \n', '        );\n', '    }\n', '\n', '\n', '    function getStakerData(address _staker) public view returns(uint256, uint256)\n', '    {\n', '\n', '      return (interestData.stakers[_staker].totalStaked, interestData.stakers[_staker].withdrawnToDate);\n', '    }\n', '\n', '    /**\n', '     * @dev returns stats data.\n', '     * @param _staker Address of staker.\n', '     * @return Total staked.\n', '     * @return Total reward to be distributed.\n', '     * @return estimated reward for user at end of staking period if no one stakes from current time.\n', '     * @return Unlocked reward based on elapsed time.\n', '     * @return Accrued reward for user till now.\n', '     */\n', '    function getStatsData(address _staker) external view returns(uint, uint, uint, uint, uint)\n', '    {\n', '\n', '        Staker storage stakerData = interestData.stakers[_staker];\n', '        uint estimatedReward = 0;\n', '        uint unlockedReward = 0;\n', '        uint accruedReward = 0;\n', '        uint timeElapsed = now.sub(stakingStartTime);\n', '\n', '        if(timeElapsed > stakingPeriod)\n', '        {\n', '            timeElapsed = stakingPeriod;\n', '        }\n', '\n', '        unlockedReward = timeElapsed.mul(totalReward).div(stakingPeriod);\n', '\n', '        uint timeSinceLastUpdate;\n', '        if(timeElapsed == stakingPeriod)\n', '        {\n', '            timeSinceLastUpdate = stakingStartTime.add(stakingPeriod).sub(interestData.lastUpdated);\n', '        } else {\n', '            timeSinceLastUpdate = now.sub(interestData.lastUpdated);\n', '        }\n', '        uint newlyInterestGenerated = timeSinceLastUpdate.mul(totalReward).div(stakingPeriod);\n', '        uint updatedGlobalYield;\n', '        uint stakingTimeLeft = 0;\n', '        if(now < stakingStartTime.add(stakingPeriod)){\n', '         stakingTimeLeft = stakingStartTime.add(stakingPeriod).sub(now);\n', '        }\n', '        uint interestGeneratedEnd = stakingTimeLeft.mul(totalReward).div(stakingPeriod);\n', '        uint globalYieldEnd;\n', '        if (interestData.globalTotalStaked != 0) {\n', '            updatedGlobalYield = interestData.globalYieldPerToken.add(\n', '            newlyInterestGenerated\n', '                .mul(DECIMAL1e18)\n', '                .div(interestData.globalTotalStaked));\n', '\n', '            globalYieldEnd = updatedGlobalYield.add(interestGeneratedEnd.mul(DECIMAL1e18).div(interestData.globalTotalStaked));\n', '        }\n', '        \n', '        accruedReward = stakerData\n', '            .totalStaked\n', '            .mul(updatedGlobalYield).div(DECIMAL1e18);\n', '\n', '        if (stakerData.withdrawnToDate.add(stakerData.stakeBuyinRate) > accruedReward)\n', '        {\n', '            accruedReward = 0;\n', '        } else {\n', '\n', '            accruedReward = accruedReward.sub(stakerData.withdrawnToDate.add(stakerData.stakeBuyinRate));\n', '        }\n', '\n', '        estimatedReward = stakerData\n', '            .totalStaked\n', '            .mul(globalYieldEnd).div(DECIMAL1e18);\n', '        if (stakerData.withdrawnToDate.add(stakerData.stakeBuyinRate) > estimatedReward) {\n', '            estimatedReward = 0;\n', '        } else {\n', '\n', '            estimatedReward = estimatedReward.sub(stakerData.withdrawnToDate.add(stakerData.stakeBuyinRate));\n', '        }\n', '\n', '        return (interestData.globalTotalStaked, totalReward, estimatedReward, unlockedReward, accruedReward);\n', '\n', '    }\n', '}\n']
