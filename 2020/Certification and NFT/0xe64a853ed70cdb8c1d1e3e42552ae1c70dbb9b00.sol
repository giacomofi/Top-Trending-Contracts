['pragma solidity ^0.6.0; interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '} library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '} library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '} library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '} contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '} contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '} /// @title Stores all the important DFS addresses and can be changed (timelock)\n', 'contract Registry is AdminAuth {\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    struct Entry {\n', '        address contractAddr;\n', '        uint waitPeriod;\n', '        uint changeStartTime;\n', '        bool inChange;\n', '        bool exists;\n', '    }\n', '\n', '    mapping (bytes32 => Entry) public entries;\n', '    mapping (bytes32 => address) public pendingAddresses;\n', '\n', '    /// @notice Given an contract id returns the registred address\n', '    /// @dev Id is kecceak256 of the contract name\n', '    /// @param _id Id of contract\n', '    function getAddr(bytes32 _id) public view returns (address) {\n', '        return entries[_id].contractAddr;\n', '    }\n', '\n', '    /////////////////////////// ADMIN ONLY FUNCTIONS ///////////////////////////\n', '\n', '    // TODO: REMOVE ONLY FOR TESTING\n', '    function changeInsant(bytes32 _id, address _contractAddr) public onlyOwner {\n', '        entries[_id].contractAddr = _contractAddr;\n', '    }\n', '\n', '    /// @notice Adds a new contract to the registry\n', '    /// @param _id Id of contract\n', '    /// @param _contractAddr Address of the contract\n', '    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n', '    function addNewContract(bytes32 _id, address _contractAddr, uint _waitPeriod) public onlyOwner {\n', '        require(!entries[_id].exists, "Entry id already exists");\n', '\n', '        entries[_id] = Entry({\n', '            contractAddr: _contractAddr,\n', '            waitPeriod: _waitPeriod,\n', '            changeStartTime: 0,\n', '            inChange: false,\n', '            exists: true\n', '        });\n', '\n', '        logger.Log(address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod));\n', '    }\n', '\n', '    /// @notice Starts an address change for an existing entry\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    /// @param _newContractAddr Address of the new contract\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n', '        require(entries[_id].exists, "Entry id doesn\'t exists");\n', '\n', '        entries[_id].changeStartTime = now;\n', '        entries[_id].inChange = true;\n', '\n', '        pendingAddresses[_id] = _newContractAddr;\n', '\n', '        logger.Log(address(this), msg.sender, "StartChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr));\n', '    }\n', '\n', '    /// @notice Changes new contract address, correct time must have passed\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    function approveContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, "Entry id doesn\'t exists");\n', '        require(entries[_id].inChange, "Entry not in change process");\n', '        require((entries[_id].changeStartTime + entries[_id].waitPeriod) > now, "Change not ready yet");\n', '\n', '        address oldContractAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = pendingAddresses[_id];\n', '        entries[_id].inChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingAddresses[_id] = address(0);\n', '\n', '        logger.Log(address(this), msg.sender, "ApproveChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr));\n', '    }\n', '\n', '    /// @notice Cancel pending change\n', '    /// @param _id Id of contract\n', '    function cancelContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, "Entry id doesn\'t exists");\n', '        require(entries[_id].inChange, "Entry is not change process");\n', '\n', '        address oldContractAddr = pendingAddresses[_id];\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        entries[_id].inChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(address(this), msg.sender, "CancelChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr));\n', '    }\n', '\n', '    /// @notice Changes wait period for an entry\n', '    /// @param _id Id of contract\n', '    /// @param _newWaitPeriod New wait time, must be bigger than before\n', '    function changeWaitPeriod(bytes32 _id, uint _newWaitPeriod) public onlyOwner {\n', '        require(entries[_id].exists, "Entry id doesn\'t exists");\n', '        require(_newWaitPeriod > entries[_id].waitPeriod, "New wait period must be bigger");\n', '\n', '        entries[_id].waitPeriod = _newWaitPeriod;\n', '\n', '        logger.Log(address(this), msg.sender, "ChangeWaitPeriod", abi.encode(_id, _newWaitPeriod));\n', '    }\n', '\n', '}']