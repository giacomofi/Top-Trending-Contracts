['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\n', '    function transfer(address payable to, uint256 tokens) external returns (bool success);\n', '    function approve(address spender, uint256 tokens) external returns (bool success);\n', '    function transferFrom(address from, address payable to, uint256 tokens) external returns (bool success);\n', '}\n', '\n', 'contract lpEvent{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address payable public fundsReceiver = 0x9F2742e7427E26DeC6beD359F0B4b5bff6A41bB3;\n', '    \n', '    uint256 public totalFundsReceived; \n', '    uint256 public lpEventEndDate;\n', '    bool public claimOpen = false;\n', '    \n', '    uint256 pointMultiplier = 1e18;\n', '    uint256 public unitShare = 0;\n', '    uint256 public unclaimedLps = 0;\n', '    uint256 public totalLpTokens = 0;\n', '    address public lpTokenAddress;\n', '    \n', '    struct Investor{\n', '        uint256 investment;\n', '        uint256 lpTokensGained;\n', '    }\n', '    mapping(address => Investor) public investors;\n', '    \n', '    modifier onlyFundsReceiver{\n', '        require(msg.sender == fundsReceiver);\n', '        _;\n', '    }\n', '    \n', '    constructor() public{\n', '        lpEventEndDate = block.timestamp.add(3 days); \n', '    }\n', '\n', '    receive() external payable{\n', '        deposit();\n', '    }\n', '    \n', '    function deposit() public payable{\n', '        require(block.timestamp <= lpEventEndDate, "Lp Event is closed");\n', '        totalFundsReceived = totalFundsReceived.add(msg.value);\n', '        investors[msg.sender].investment = investors[msg.sender].investment.add(msg.value);\n', '        fundsReceiver.transfer(msg.value);\n', '    }\n', '    \n', '    function addLpTokens(address _lpTokenAddress, uint256 lpTokens) external onlyFundsReceiver{\n', '        require(block.timestamp > lpEventEndDate, "Lp event is running");\n', '        require(_lpTokenAddress != address(0), "Invalid token address");\n', '        require(!claimOpen, "Cannot add more, claim is already open");\n', '        require(IERC20(_lpTokenAddress).transferFrom(msg.sender, address(this), lpTokens), "Could not transfer lp tokens from sender");\n', '        totalLpTokens = lpTokens;\n', '        unclaimedLps = lpTokens;\n', '        lpTokenAddress = _lpTokenAddress;\n', '        disburse(lpTokens);\n', '        claimOpen = true;\n', '    }\n', '    \n', '    function disburse(uint256 amount) internal{\n', '        uint256 unnormalized = amount.mul(pointMultiplier);\n', '        unitShare = unitShare.add(unnormalized.div(totalFundsReceived)); // un-normalized\n', '    }\n', '    \n', '    function lpShare(address _user) public view returns(uint256){\n', '        uint256 owing = unitShare.mul(investors[_user].investment);\n', '        owing = owing.div(pointMultiplier);\n', '        owing = owing.sub(investors[_user].lpTokensGained);\n', '        return owing;\n', '    }\n', '    \n', '    function claimLpTokens() external {\n', '        require(claimOpen, "Claim is not opened yet");\n', '        uint256 owing = lpShare(msg.sender);\n', '        require(owing > 0, "No pending lp tokens");\n', '        require(IERC20(lpTokenAddress).transfer(msg.sender, owing));\n', '        unclaimedLps = unclaimedLps.sub(owing);\n', '        investors[msg.sender].lpTokensGained = investors[msg.sender].lpTokensGained.add(owing);\n', '    }\n', '}']