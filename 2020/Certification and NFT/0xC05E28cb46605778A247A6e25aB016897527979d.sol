['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.4;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a < b) {\n', '            return b - a;\n', '        }\n', '        return a - b;\n', '    }\n', '}\n', 'library EthAddressLib {\n', '    /**\n', '     * @dev returns the address used within the protocol to identify ETH\n', '     * @return the address assigned to ETH\n', '     */\n', '    function ethAddress() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    }\n', '}\n', '\n', '// chainlink 价格合约接口\n', 'interface AggregatorInterface {\n', '    function latestAnswer() external view returns (int256);\n', '}\n', '\n', '// 通用 oracle 接口\n', 'interface IUniversalOracle {\n', '    function get(address token) external view returns (uint256, bool);\n', '}\n', '\n', 'contract PriceOracles {\n', '    using SafeMath for uint256;\n', '\n', '    address public admin;\n', '\n', '    address public proposedAdmin;\n', '\n', '    // 通用的合约地址\n', '    address public oracle;\n', '\n', '    // 维护需要从chainlink取价格的token 地址 => chainlink 价格合约地址的映射\n', '    mapping(address => address) public tokenChainlinkMap;\n', '\n', '    function get(address token) external view returns (uint256, bool) {\n', '        if (token == EthAddressLib.ethAddress() || tokenChainlinkMap[token] != address(0)) {\n', '            // 如果是 eth 或者是需要从 chainlink 取价格的 token，读取 chainlink 的合约\n', '            return getChainLinkPrice(token);\n', '        } else {\n', '            // 其他需要喂价的 token 从通用 oracle 中取价格\n', '            IUniversalOracle _oracle = IUniversalOracle(oracle);\n', '            return _oracle.get(token);\n', '        }\n', '    }\n', '\n', '    // 存储 ETH/USD 交易对合约地址\n', '    address public ethToUsdPrice;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    function setEthToUsdPrice(address _ethToUsdPrice) external onlyAdmin {\n', '        ethToUsdPrice = _ethToUsdPrice;\n', '    }\n', '\n', '    // 设置通用 oracle 地址\n', '    function setOracle(address _oracle) external onlyAdmin {\n', '        oracle = _oracle;\n', '    }\n', '\n', '    //验证合约的操作是否被授权.\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "require admin");\n', '        _;\n', '    }\n', '\n', '    function proposeNewAdmin(address admin_) external onlyAdmin {\n', '        proposedAdmin = admin_;\n', '    }\n', '\n', '    function claimAdministration() external {\n', '        require(msg.sender == proposedAdmin, "Not proposed admin.");\n', '        admin = proposedAdmin;\n', '        proposedAdmin = address(0);\n', '    }\n', '\n', '    function setTokenChainlinkMap(address token, address chainlink)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        tokenChainlinkMap[token] = chainlink;\n', '    }\n', '\n', '    function getChainLinkPrice(address token)\n', '        internal\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        // 构造 chainlink 合约实例\n', '        AggregatorInterface chainlinkContract = AggregatorInterface(\n', '            ethToUsdPrice\n', '        );\n', '        // 获取 ETH/USD 交易对的价格，单位是 1e8\n', '        int256 basePrice = chainlinkContract.latestAnswer();\n', '        // 若要获取 ETH 的价格，则返回 1e8 * 1e10 = 1e18\n', '        if (token == EthAddressLib.ethAddress()) {\n', '            return (uint256(basePrice).mul(1e10), true);\n', '        }\n', '        // // 获取 token/ETH 交易对的价格（目前是 USDT 和 USDC ），单位是 1e18\n', '        chainlinkContract = AggregatorInterface(tokenChainlinkMap[token]);\n', '        int256 tokenPrice = chainlinkContract.latestAnswer();\n', '        return (uint256(basePrice).mul(uint256(tokenPrice)).div(1e8), true);\n', '    }\n', '}']