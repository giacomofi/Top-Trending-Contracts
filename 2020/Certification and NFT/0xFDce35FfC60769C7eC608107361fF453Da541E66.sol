['// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is Initializable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\IDefiProtocol.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IDefiProtocol {\n', '    /**\n', '     * @notice Transfer tokens from sender to DeFi protocol\n', '     * @param token Address of token\n', '     * @param amount Value of token to deposit\n', '     * @return new balances of each token\n', '     */\n', '    function handleDeposit(address token, uint256 amount) external;\n', '\n', '    function handleDeposit(address[] calldata tokens, uint256[] calldata amounts) external;\n', '\n', '    /**\n', '     * @notice Transfer tokens from DeFi protocol to beneficiary\n', '     * @param token Address of token\n', '     * @param amount Denormalized value of token to withdraw\n', '     * @return new balances of each token\n', '     */\n', '    function withdraw(address beneficiary, address token, uint256 amount) external;\n', '\n', '    /**\n', '     * @notice Transfer tokens from DeFi protocol to beneficiary\n', '     * @param amounts Array of amounts to withdraw, in order of supportedTokens()\n', '     * @return new balances of each token\n', '     */\n', '    function withdraw(address beneficiary, uint256[] calldata amounts) external;\n', '\n', '    /**\n', '     * @notice Claim rewards. Reward tokens will be stored on protocol balance.\n', '     * @return tokens and their amounts received\n', '     */\n', '    function claimRewards() external returns(address[] memory tokens, uint256[] memory amounts);\n', '\n', '    /**\n', '     * @notice Withdraw reward tokens to user\n', '     * @dev called by SavingsModule\n', '     * @param token Reward token to withdraw\n', '     * @param user Who should receive tokens\n', '     * @param amount How many tokens to send\n', '     */\n', '    function withdrawReward(address token, address user, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     */\n', '    function balanceOf(address token) external returns(uint256);\n', '\n', '    /**\n', '     * @notice Balance of all tokens supported by protocol \n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     */\n', '    function balanceOfAll() external returns(uint256[] memory); \n', '\n', '    /**\n', '     * @notice Returns optimal proportions of underlying tokens \n', '     * to prevent fees on deposit/withdrawl if supplying multiple tokens\n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     * same as balanceOfAll()\n', '     */\n', '    function optimalProportions() external returns(uint256[] memory);\n', '\n', '    /**\n', '    * @notice Returns normalized (to USD with 18 decimals) summary balance \n', '    * of pool using all tokens in this protocol\n', '    */\n', '    function normalizedBalance() external returns(uint256);\n', '\n', '    function supportedTokens() external view returns(address[] memory);\n', '\n', '    function supportedTokensCount() external view returns(uint256);\n', '\n', '    function supportedRewardTokens() external view returns(address[] memory);\n', '\n', '    function isSupportedRewardToken(address token) external view returns(bool);\n', '\n', '    /**\n', "     * @notice Returns if this protocol can swap all it's normalizedBalance() to specified token\n", '     */\n', '    function canSwapToToken(address token) external view returns(bool);\n', '\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\ICErc20.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '/**\n', ' * Most important functions of Compound CErc20 token.\n', ' * Source: https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\n', ' *\n', ' * Original interface name: CErc20Interface\n', ' * but we use our naming covention.\n', ' */\n', '//solhint-disable func-order\n', 'contract ICErc20 { \n', '\n', '\n', '    /*** User Interface of CTokenInterface ***/\n', '\n', '    function transfer(address dst, uint amount) external returns (bool);\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '    function exchangeRateCurrent() external returns (uint256);\n', '    function exchangeRateStored() external view returns (uint256);\n', '    function accrueInterest() external returns (uint256);\n', '\n', '     /*** User Interface of CErc20Interface ***/\n', '\n', '    function mint(uint mintAmount) external returns (uint256);\n', '    function redeem(uint redeemTokens) external returns (uint256);\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\IComptroller.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'interface IComptroller {\n', '    function claimComp(address holder) external;\n', '    function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;\n', '    function getCompAddress() external view returns (address);\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\common\\Base.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Base is Initializable, Context, Ownable {\n', '    address constant  ZERO_ADDRESS = address(0);\n', '\n', '    function initialize() public initializer {\n', '        Ownable.initialize(_msgSender());\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\core\\ModuleNames.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '/**\n', ' * @dev List of module names\n', ' */\n', 'contract ModuleNames {\n', '    // Pool Modules\n', '    string internal constant MODULE_ACCESS            = "access";\n', '    string internal constant MODULE_SAVINGS           = "savings";\n', '    string internal constant MODULE_INVESTING         = "investing";\n', '    string internal constant MODULE_STAKING           = "staking";\n', '    string internal constant MODULE_DCA               = "dca";\n', '    string internal constant MODULE_REWARD            = "reward";\n', '\n', '    // Pool tokens\n', '    string internal constant TOKEN_AKRO               = "akro";    \n', '    string internal constant TOKEN_ADEL               = "adel";    \n', '\n', '    // External Modules (used to store addresses of external contracts)\n', '    string internal constant CONTRACT_RAY             = "ray";\n', '}\n', '\n', '// File: contracts\\common\\Module.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Module is Base, ModuleNames {\n', '    event PoolAddressChanged(address newPool);\n', '    address public pool;\n', '\n', '    function initialize(address _pool) public initializer {\n', '        Base.initialize();\n', '        setPool(_pool);\n', '    }\n', '\n', '    function setPool(address _pool) public onlyOwner {\n', '        require(_pool != ZERO_ADDRESS, "Module: pool address can\'t be zero");\n', '        pool = _pool;\n', '        emit PoolAddressChanged(_pool);        \n', '    }\n', '\n', '    function getModuleAddress(string memory module) public view returns(address){\n', '        require(pool != ZERO_ADDRESS, "Module: no pool");\n', '        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature("get(string)", module));\n', '        \n', '        //Forward error from Pool contract\n', '        if (!success) assembly {\n', '            revert(add(result, 32), result)\n', '        }\n', '\n', '        address moduleAddress = abi.decode(result, (address));\n', '        // string memory error = string(abi.encodePacked("Module: requested module not found - ", module));\n', '        // require(moduleAddress != ZERO_ADDRESS, error);\n', '        require(moduleAddress != ZERO_ADDRESS, "Module: requested module not found");\n', '        return moduleAddress;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\defi\\DefiOperatorRole.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', 'contract DefiOperatorRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event DefiOperatorAdded(address indexed account);\n', '    event DefiOperatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _operators;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isDefiOperator(sender)) {\n', '            _addDefiOperator(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyDefiOperator() {\n', '        require(isDefiOperator(_msgSender()), "DefiOperatorRole: caller does not have the DefiOperator role");\n', '        _;\n', '    }\n', '\n', '    function addDefiOperator(address account) public onlyDefiOperator {\n', '        _addDefiOperator(account);\n', '    }\n', '\n', '    function renounceDefiOperator() public {\n', '        _removeDefiOperator(_msgSender());\n', '    }\n', '\n', '    function isDefiOperator(address account) public view returns (bool) {\n', '        return _operators.has(account);\n', '    }\n', '\n', '    function _addDefiOperator(address account) internal {\n', '        _operators.add(account);\n', '        emit DefiOperatorAdded(account);\n', '    }\n', '\n', '    function _removeDefiOperator(address account) internal {\n', '        _operators.remove(account);\n', '        emit DefiOperatorRemoved(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\modules\\reward\\RewardManagerRole.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', 'contract RewardManagerRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event RewardManagerAdded(address indexed account);\n', '    event RewardManagerRemoved(address indexed account);\n', '\n', '    Roles.Role private _managers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isRewardManager(sender)) {\n', '            _addRewardManager(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyRewardManager() {\n', '        require(isRewardManager(_msgSender()), "RewardManagerRole: caller does not have the RewardManager role");\n', '        _;\n', '    }\n', '\n', '    function addRewardManager(address account) public onlyRewardManager {\n', '        _addRewardManager(account);\n', '    }\n', '\n', '    function renounceRewardManager() public {\n', '        _removeRewardManager(_msgSender());\n', '    }\n', '\n', '    function isRewardManager(address account) public view returns (bool) {\n', '        return _managers.has(account);\n', '    }\n', '\n', '    function _addRewardManager(address account) internal {\n', '        _managers.add(account);\n', '        emit RewardManagerAdded(account);\n', '    }\n', '\n', '    function _removeRewardManager(address account) internal {\n', '        _managers.remove(account);\n', '        emit RewardManagerRemoved(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\modules\\reward\\RewardVestingModule.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract RewardVestingModule is Module, RewardManagerRole {\n', '    event RewardTokenRegistered(address indexed protocol, address token);\n', '    event EpochRewardAdded(address indexed protocol, address indexed token, uint256 epoch, uint256 amount);\n', '    event RewardClaimed(address indexed protocol, address indexed token, uint256 claimPeriodStart, uint256 claimPeriodEnd, uint256 claimAmount);\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    struct Epoch {\n', '        uint256 end;        // Timestamp of Epoch end\n', '        uint256 amount;     // Amount of reward token for this protocol on this epoch\n', '    }\n', '\n', '    struct RewardInfo {\n', '        Epoch[] epochs;\n', '        uint256 lastClaim; // Timestamp of last claim\n', '    }\n', '\n', '    struct ProtocolRewards {\n', '        address[] tokens;\n', '        mapping(address=>RewardInfo) rewardInfo;\n', '    }\n', '\n', '    mapping(address => ProtocolRewards) internal rewards;\n', '    uint256 public defaultEpochLength;\n', '\n', '    function initialize(address _pool) public initializer {\n', '        Module.initialize(_pool);\n', '        RewardManagerRole.initialize(_msgSender());\n', '        defaultEpochLength = 7*24*60*60;\n', '    }\n', '\n', '    function registerRewardToken(address protocol, address token, uint256 firstEpochStart) public onlyRewardManager {\n', '        if(firstEpochStart == 0) firstEpochStart = block.timestamp;\n', '        //Push zero epoch\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        require(ri.epochs.length == 0, "RewardVesting: token already registered for this protocol");\n', '        r.tokens.push(token);\n', '        ri.epochs.push(Epoch({\n', '            end: firstEpochStart,\n', '            amount: 0\n', '        }));\n', '        emit RewardTokenRegistered(protocol, token);\n', '    }\n', '\n', '    function setDefaultEpochLength(uint256 _defaultEpochLength) public onlyRewardManager {\n', '        defaultEpochLength = _defaultEpochLength;\n', '    }\n', '\n', '    function getEpochInfo(address protocol, address token, uint256 epoch) public view returns(uint256 epochStart, uint256 epochEnd, uint256 rewardAmount) {\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        require(ri.epochs.length > 0, "RewardVesting: protocol or token not registered");\n', '        require (epoch < ri.epochs.length, "RewardVesting: epoch number too high");\n', '        if(epoch == 0) {\n', '            epochStart = 0;\n', '        }else {\n', '            epochStart = ri.epochs[epoch-1].end;\n', '        }\n', '        epochEnd = ri.epochs[epoch].end;\n', '        rewardAmount = ri.epochs[epoch].amount;\n', '        return (epochStart, epochEnd, rewardAmount);\n', '    }\n', '\n', '    function getLastCreatedEpoch(address protocol, address token) public view returns(uint256) {\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        require(ri.epochs.length > 0, "RewardVesting: protocol or token not registered");\n', '        return ri.epochs.length-1;       \n', '    }\n', '\n', '    function claimRewards() public {\n', '        address protocol = _msgSender();\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        //require(r.tokens.length > 0, "RewardVesting: call only from registered protocols allowed");\n', '        if(r.tokens.length == 0) return;    //This allows claims from protocols which are not yet registered without reverting\n', '        for(uint256 i=0; i < r.tokens.length; i++){\n', '            _claimRewards(protocol, r.tokens[i]);\n', '        }\n', '    }\n', '\n', '    function claimRewards(address protocol, address token) public {\n', '        _claimRewards(protocol, token);\n', '    }\n', '\n', '    function _claimRewards(address protocol, address token) internal {\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        uint256 epochsLength = ri.epochs.length;\n', '        require(epochsLength > 0, "RewardVesting: protocol or token not registered");\n', '\n', '        Epoch storage lastEpoch = ri.epochs[epochsLength-1];\n', '        uint256 previousClaim = ri.lastClaim;\n', '        if(previousClaim == lastEpoch.end) return; // Nothing to claim yet\n', '\n', '        if(lastEpoch.end < block.timestamp) {\n', '            ri.lastClaim = lastEpoch.end;\n', '        }else{\n', '            ri.lastClaim = block.timestamp;\n', '        }\n', '        \n', '        uint256 claimAmount;\n', '        Epoch storage ep = ri.epochs[0];\n', '        uint256 i;\n', '        // Searching for last claimable epoch\n', '        for(i = epochsLength-1; i > 0; i--) {\n', '            ep = ri.epochs[i];\n', '            if(ep.end >= block.timestamp) {\n', '                break;\n', '            }\n', '        }\n', '        if(ep.end > block.timestamp) {\n', '            //Half-claim\n', '            uint256 epStart = ri.epochs[i-1].end;\n', '            uint256 claimStart = (previousClaim > epStart)?previousClaim:epStart;\n', '            uint256 epochClaim = ep.amount.mul(block.timestamp.sub(claimStart)).div(ep.end.sub(epStart));\n', '            claimAmount = claimAmount.add(epochClaim);\n', '            i--;\n', '        }\n', '        //Claim rest\n', '        for(i; i > 0; i--) {\n', '            ep = ri.epochs[i];\n', '            if(ep.end > previousClaim) {\n', '                claimAmount = claimAmount.add(ep.amount);\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        IERC20(token).safeTransfer(protocol, claimAmount);\n', '        emit RewardClaimed(protocol, token, previousClaim, ri.lastClaim, claimAmount);\n', '    }\n', '\n', '    function createEpoch(address protocol, address token, uint256 epochEnd, uint256 amount) public onlyRewardManager {\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        uint256 epochsLength = ri.epochs.length;\n', '        require(epochsLength > 0, "RewardVesting: protocol or token not registered");\n', '        uint256 prevEpochEnd = ri.epochs[epochsLength-1].end;\n', '        require(epochEnd > prevEpochEnd, "RewardVesting: new epoch should end after previous");\n', '        ri.epochs.push(Epoch({\n', '            end: epochEnd,\n', '            amount:0\n', '        }));            \n', '        _addReward(protocol, token, epochsLength, amount);\n', '    }\n', '\n', '    function addReward(address protocol, address token, uint256 epoch, uint256 amount) public onlyRewardManager {\n', '        _addReward(protocol, token, epoch, amount);\n', '    }\n', '\n', '    function addRewards(address[] calldata protocols, address[] calldata tokens, uint256[] calldata epochs, uint256[] calldata amounts) external onlyRewardManager {\n', '        require(\n', '            (protocols.length == tokens.length) && \n', '            (protocols.length == epochs.length) && \n', '            (protocols.length == amounts.length),\n', '            "RewardVesting: array lengths do not match");\n', '        for(uint256 i=0; i<protocols.length; i++) {\n', '            _addReward(protocols[i], tokens[i], epochs[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Add reward to existing epoch or crete a new one\n', '     * @param protocol Protocol for reward\n', '     * @param token Reward token\n', '     * @param epoch Epoch number - can be 0 to create new Epoch\n', '     * @param amount Amount of Reward token to deposit\n', '     */\n', '    function _addReward(address protocol, address token, uint256 epoch, uint256 amount) internal {\n', '        ProtocolRewards storage r = rewards[protocol];\n', '        RewardInfo storage ri = r.rewardInfo[token];\n', '        uint256 epochsLength = ri.epochs.length;\n', '        require(epochsLength > 0, "RewardVesting: protocol or token not registered");\n', '        if(epoch == 0) epoch = epochsLength; // creating a new epoch\n', '        if (epoch == epochsLength) {\n', '            uint256 epochEnd = ri.epochs[epochsLength-1].end.add(defaultEpochLength);\n', '            if(epochEnd < block.timestamp) epochEnd = block.timestamp; //This generally should not happen, but just in case - we generate only one epoch since previous end\n', '            ri.epochs.push(Epoch({\n', '                end: epochEnd,\n', '                amount: amount\n', '            }));            \n', '        } else  {\n', '            require(epochsLength > epoch, "RewardVesting: epoch is too high");\n', '            Epoch storage ep = ri.epochs[epoch];\n', '            require(ep.end > block.timestamp, "RewardVesting: epoch already finished");\n', '            ep.amount = ep.amount.add(amount);\n', '        }\n', '        emit EpochRewardAdded(protocol, token, epoch, amount);\n', '        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount);\n', '    }\n', '\n', '\n', '}\n', '\n', '// File: contracts\\modules\\defi\\ProtocolBase.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ProtocolBase is Module, DefiOperatorRole, IDefiProtocol {\n', '    uint256 constant MAX_UINT256 = uint256(-1);\n', '\n', '    event RewardTokenClaimed(address indexed token, uint256 amount);\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    mapping(address=>uint256) public rewardBalances;    //Mapping of already claimed amounts of reward tokens\n', '\n', '    function initialize(address _pool) public initializer {\n', '        Module.initialize(_pool);\n', '        DefiOperatorRole.initialize(_msgSender());\n', '    }\n', '\n', '    function supportedRewardTokens() public view returns(address[] memory) {\n', '        return defaultRewardTokens();\n', '    }\n', '\n', '    function isSupportedRewardToken(address token) public view returns(bool) {\n', '        address[] memory srt = supportedRewardTokens();\n', '        for(uint256 i=0; i < srt.length; i++) {\n', '            if(srt[i] == token) return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function cliamRewardsFromProtocol() internal;\n', '\n', '    function claimRewards() public onlyDefiOperator returns(address[] memory tokens, uint256[] memory amounts){\n', '        cliamRewardsFromProtocol();\n', '        claimDefaultRewards();\n', '\n', '        // Check what we received\n', '        address[] memory rewardTokens = supportedRewardTokens();\n', '        uint256[] memory rewardAmounts = new uint256[](rewardTokens.length);\n', '        uint256 receivedRewardTokensCount;\n', '        for(uint256 i = 0; i < rewardTokens.length; i++) {\n', '            address rtkn = rewardTokens[i];\n', '            uint256 newBalance = IERC20(rtkn).balanceOf(address(this));\n', '            if(newBalance > rewardBalances[rtkn]) {\n', '                receivedRewardTokensCount++;\n', '                rewardAmounts[i] = newBalance.sub(rewardBalances[rtkn]);\n', '                rewardBalances[rtkn] = newBalance;\n', '            }\n', '        }\n', '\n', '        //Fill result arrays\n', '        tokens = new address[](receivedRewardTokensCount);\n', '        amounts = new uint256[](receivedRewardTokensCount);\n', '        if(receivedRewardTokensCount > 0) {\n', '            uint256 j;\n', '            for(uint256 i = 0; i < rewardTokens.length; i++) {\n', '                if(rewardAmounts[i] > 0) {\n', '                    tokens[j] = rewardTokens[i];\n', '                    amounts[j] = rewardAmounts[i];\n', '                    j++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdrawReward(address token, address user, uint256 amount) public onlyDefiOperator {\n', '        require(isSupportedRewardToken(token), "ProtocolBase: not reward token");\n', '        rewardBalances[token] = rewardBalances[token].sub(amount);\n', '        IERC20(token).safeTransfer(user, amount);\n', '    }\n', '\n', '    function claimDefaultRewards() internal {\n', '        RewardVestingModule rv = RewardVestingModule(getModuleAddress(MODULE_REWARD));\n', '        rv.claimRewards();\n', '    }\n', '\n', '    function defaultRewardTokens() internal view returns(address[] memory) {\n', '        address[] memory rt = new address[](2);\n', '        return defaultRewardTokensFillArray(rt);\n', '    }\n', '    function defaultRewardTokensFillArray(address[] memory rt) internal view returns(address[] memory) {\n', '        require(rt.length >= 2, "ProtocolBase: not enough space in array");\n', '        rt[0] = getModuleAddress(TOKEN_AKRO);\n', '        rt[1] = getModuleAddress(TOKEN_ADEL);\n', '        return rt;\n', '    }\n', '    function defaultRewardTokensCount() internal pure returns(uint256) {\n', '        return 2;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\defi\\CompoundProtocol.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * RAY Protocol support module which works with only one base token\n', ' */\n', 'contract CompoundProtocol is ProtocolBase {\n', '    uint256 constant MAX_UINT256 = uint256(-1);\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public baseToken;\n', '    uint8 public decimals;\n', '    ICErc20 public cToken;\n', '    IComptroller public comptroller;\n', '    IERC20 public compToken;\n', '\n', '    function initialize(address _pool, address _token, address _cToken, address _comptroller) public initializer {\n', '        ProtocolBase.initialize(_pool);\n', '        baseToken = IERC20(_token);\n', '        cToken = ICErc20(_cToken);\n', '        decimals = ERC20Detailed(_token).decimals();\n', '        baseToken.safeApprove(_cToken, MAX_UINT256);\n', '        comptroller = IComptroller(_comptroller);\n', '        compToken = IERC20(comptroller.getCompAddress());\n', '    }\n', '\n', '    function handleDeposit(address token, uint256 amount) public onlyDefiOperator {\n', '        require(token == address(baseToken), "CompoundProtocol: token not supported");\n', '        cToken.mint(amount);\n', '    }\n', '\n', '    function handleDeposit(address[] memory tokens, uint256[] memory amounts) public onlyDefiOperator {\n', '        require(tokens.length == 1 && amounts.length == 1, "CompoundProtocol: wrong count of tokens or amounts");\n', '        handleDeposit(tokens[0], amounts[0]);\n', '    }\n', '\n', '    function withdraw(address beneficiary, address token, uint256 amount) public onlyDefiOperator {\n', '        require(token == address(baseToken), "CompoundProtocol: token not supported");\n', '\n', '        cToken.redeemUnderlying(amount);\n', '        baseToken.safeTransfer(beneficiary, amount);\n', '    }\n', '\n', '    function withdraw(address beneficiary, uint256[] memory amounts) public onlyDefiOperator {\n', '        require(amounts.length == 1, "CompoundProtocol: wrong amounts array length");\n', '\n', '        cToken.redeemUnderlying(amounts[0]);\n', '        baseToken.safeTransfer(beneficiary, amounts[0]);\n', '    }\n', '\n', '    function balanceOf(address token) public returns(uint256) {\n', '        if (token != address(baseToken)) return 0;\n', '        return cToken.balanceOfUnderlying(address(this));\n', '    }\n', '    \n', '    function balanceOfAll() public returns(uint256[] memory) {\n', '        uint256[] memory balances = new uint256[](1);\n', '        balances[0] = balanceOf(address(baseToken));\n', '        return balances;\n', '    }\n', '\n', '    function normalizedBalance() public returns(uint256) {\n', '        return normalizeAmount(address(baseToken), balanceOf(address(baseToken)));\n', '    }\n', '\n', '    function optimalProportions() public returns(uint256[] memory) {\n', '        uint256[] memory amounts = new uint256[](1);\n', '        amounts[0] = 1e18;\n', '        return amounts;\n', '    }\n', '\n', '    function canSwapToToken(address token) public view returns(bool) {\n', '        return (token == address(baseToken));\n', '    }    \n', '\n', '    function supportedTokens() public view returns(address[] memory){\n', '        address[] memory tokens = new address[](1);\n', '        tokens[0] = address(baseToken);\n', '        return tokens;\n', '    }\n', '\n', '    function supportedTokensCount() public view returns(uint256) {\n', '        return 1;\n', '    }\n', '\n', '    function supportedRewardTokens() public view returns(address[] memory) {\n', '        uint256 defaultRTCount = defaultRewardTokensCount();\n', '        address[] memory rtokens = new address[](defaultRTCount+1);\n', '        rtokens = defaultRewardTokensFillArray(rtokens);\n', '        rtokens[defaultRTCount] = address(compToken);\n', '        return rtokens;\n', '    }\n', '\n', '    function cliamRewardsFromProtocol() internal {\n', '        address[] memory holders = new address[](1);\n', '        holders[0] = address(this);\n', '        address[] memory cTokens = new address[](1);\n', '        cTokens[0] = address(cToken);\n', '        comptroller.claimComp(holders, cTokens, false, true);\n', '    }\n', '\n', '    function normalizeAmount(address, uint256 amount) internal view returns(uint256) {\n', '        if (decimals == 18) {\n', '            return amount;\n', '        } else if (decimals > 18) {\n', '            return amount.div(10**(uint256(decimals)-18));\n', '        } else if (decimals < 18) {\n', '            return amount.mul(10**(18-uint256(decimals)));\n', '        }\n', '    }\n', '\n', '    function denormalizeAmount(address, uint256 amount) internal view returns(uint256) {\n', '        if (decimals == 18) {\n', '            return amount;\n', '        } else if (decimals > 18) {\n', '            return amount.mul(10**(uint256(decimals)-18));\n', '        } else if (decimals < 18) {\n', '            return amount.div(10**(18-uint256(decimals)));\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\deploy\\CompoundProtocol_DAI.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', 'contract CompoundProtocol_DAI is CompoundProtocol {\n', '    function initialize(address _pool, address _token, address _cToken, address _comptroller) public initializer {\n', '        CompoundProtocol.initialize(\n', '            _pool, \n', '            _token,\n', '            _cToken,\n', '            _comptroller\n', '        );\n', '    }    \n', '}']