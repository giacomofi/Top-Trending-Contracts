['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorInterface {\n', '  function latestAnswer() external view returns (int256);\n', '  function latestTimestamp() external view returns (uint256);\n', '  function latestRound() external view returns (uint256);\n', '  function getAnswer(uint256 roundId) external view returns (int256);\n', '  function getTimestamp(uint256 roundId) external view returns (uint256);\n', '\n', '  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n', '  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n', '}\n', '\n', '// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '\n', 'interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n', '{\n', '}\n', '\n', '// File: contracts/libs/chainlink/Owned.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title The Owned contract\n', ' * @notice A contract with helpers for basic contract ownership.\n', ' */\n', 'contract Owned {\n', '\n', '  address payable public owner;\n', '  address private pendingOwner;\n', '\n', '  event OwnershipTransferRequested(\n', '    address indexed from,\n', '    address indexed to\n', '  );\n', '  event OwnershipTransferred(\n', '    address indexed from,\n', '    address indexed to\n', '  );\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows an owner to begin transferring ownership to a new address,\n', '   * pending.\n', '   */\n', '  function transferOwnership(address _to)\n', '    external\n', '    onlyOwner()\n', '  {\n', '    pendingOwner = _to;\n', '\n', '    emit OwnershipTransferRequested(owner, _to);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows an ownership transfer to be completed by the recipient.\n', '   */\n', '  function acceptOwnership()\n', '    external\n', '  {\n', '    require(msg.sender == pendingOwner, "Must be proposed owner");\n', '\n', '    address oldOwner = owner;\n', '    owner = msg.sender;\n', '    pendingOwner = address(0);\n', '\n', '    emit OwnershipTransferred(oldOwner, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if called by anyone other than the contract owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "Only callable by owner");\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/libs/chainlink/AggregatorProxy.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '/**\n', ' * @title A trusted proxy for updating where current answers are read from\n', ' * @notice This contract provides a consistent address for the\n', ' * CurrentAnwerInterface but delegates where it reads from to the owner, who is\n', ' * trusted to update it.\n', ' */\n', 'contract AggregatorProxy is AggregatorV2V3Interface, Owned {\n', '\n', '  struct Phase {\n', '    uint16 id;\n', '    AggregatorV2V3Interface aggregator;\n', '  }\n', '  Phase private currentPhase;\n', '  AggregatorV2V3Interface public proposedAggregator;\n', '  mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\n', '\n', '  uint256 constant private PHASE_OFFSET = 64;\n', '  uint256 constant private PHASE_SIZE = 16;\n', '  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\n', '\n', '  constructor(address _aggregator) public Owned() {\n', '    setAggregator(_aggregator);\n', '  }\n', '\n', '  /**\n', '   * @notice Reads the current answer from aggregator delegated to.\n', '   *\n', '   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n', '   * answer has been reached, it will simply return 0. Either wait to point to\n', '   * an already answered Aggregator or use the recommended latestRoundData\n', '   * instead which includes better verification information.\n', '   */\n', '  function latestAnswer()\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (int256 answer)\n', '  {\n', '    return currentPhase.aggregator.latestAnswer();\n', '  }\n', '\n', '  /**\n', '   * @notice Reads the last updated height from aggregator delegated to.\n', '   *\n', '   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n', '   * answer has been reached, it will simply return 0. Either wait to point to\n', '   * an already answered Aggregator or use the recommended latestRoundData\n', '   * instead which includes better verification information.\n', '   */\n', '  function latestTimestamp()\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256 updatedAt)\n', '  {\n', '    return currentPhase.aggregator.latestTimestamp();\n', '  }\n', '\n', '  /**\n', '   * @notice get past rounds answers\n', '   * @param _roundId the answer number to retrieve the answer for\n', '   *\n', '   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n', '   * answer has been reached, it will simply return 0. Either wait to point to\n', '   * an already answered Aggregator or use the recommended getRoundData\n', '   * instead which includes better verification information.\n', '   */\n', '  function getAnswer(uint256 _roundId)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (int256 answer)\n', '  {\n', '    if (_roundId > MAX_ID) return 0;\n', '\n', '    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n', '    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n', '    if (address(aggregator) == address(0)) return 0;\n', '\n', '    return aggregator.getAnswer(aggregatorRoundId);\n', '  }\n', '\n', '  /**\n', '   * @notice get block timestamp when an answer was last updated\n', '   * @param _roundId the answer number to retrieve the updated timestamp for\n', '   *\n', '   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n', '   * answer has been reached, it will simply return 0. Either wait to point to\n', '   * an already answered Aggregator or use the recommended getRoundData\n', '   * instead which includes better verification information.\n', '   */\n', '  function getTimestamp(uint256 _roundId)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256 updatedAt)\n', '  {\n', '    if (_roundId > MAX_ID) return 0;\n', '\n', '    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n', '    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n', '    if (address(aggregator) == address(0)) return 0;\n', '\n', '    return aggregator.getTimestamp(aggregatorRoundId);\n', '  }\n', '\n', '  /**\n', '   * @notice get the latest completed round where the answer was updated. This\n', "   * ID includes the proxy's phase, to make sure round IDs increase even when\n", '   * switching to a newly deployed aggregator.\n', '   *\n', '   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n', '   * answer has been reached, it will simply return 0. Either wait to point to\n', '   * an already answered Aggregator or use the recommended latestRoundData\n', '   * instead which includes better verification information.\n', '   */\n', '  function latestRound()\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256 roundId)\n', '  {\n', '    Phase memory phase = currentPhase; // cache storage reads\n', '    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\n', '  }\n', '\n', '  /**\n', '   * @notice get data about a round. Consumers are encouraged to check\n', "   * that they're receiving fresh data by inspecting the updatedAt and\n", '   * answeredInRound return values.\n', '   * Note that different underlying implementations of AggregatorV3Interface\n', '   * have slightly different semantics for some of the return values. Consumers\n', '   * should determine what implementations they expect to receive\n', '   * data from and validate that they can properly handle return data from all\n', '   * of them.\n', '   * @param _roundId the requested round ID as presented through the proxy, this\n', "   * is made up of the aggregator's round ID with the phase ID encoded in the\n", '   * two highest order bytes\n', '   * @return roundId is the round ID from the aggregator for which the data was\n', '   * retrieved combined with an phase to ensure that round IDs get larger as\n', '   * time moves forward.\n', '   * @return answer is the answer for the given round\n', '   * @return startedAt is the timestamp when the round was started.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @return updatedAt is the timestamp when the round last was updated (i.e.\n', '   * answer was last computed)\n', '   * @return answeredInRound is the round ID of the round in which the answer\n', '   * was computed.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @dev Note that answer and updatedAt may change between queries.\n', '   */\n', '  function getRoundData(uint80 _roundId)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    )\n', '  {\n', '    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n', '\n', '    (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 ansIn\n', '    ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\n', '\n', '    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\n', '  }\n', '\n', '  /**\n', '   * @notice get data about the latest round. Consumers are encouraged to check\n', "   * that they're receiving fresh data by inspecting the updatedAt and\n", '   * answeredInRound return values.\n', '   * Note that different underlying implementations of AggregatorV3Interface\n', '   * have slightly different semantics for some of the return values. Consumers\n', '   * should determine what implementations they expect to receive\n', '   * data from and validate that they can properly handle return data from all\n', '   * of them.\n', '   * @return roundId is the round ID from the aggregator for which the data was\n', '   * retrieved combined with an phase to ensure that round IDs get larger as\n', '   * time moves forward.\n', '   * @return answer is the answer for the given round\n', '   * @return startedAt is the timestamp when the round was started.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @return updatedAt is the timestamp when the round last was updated (i.e.\n', '   * answer was last computed)\n', '   * @return answeredInRound is the round ID of the round in which the answer\n', '   * was computed.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @dev Note that answer and updatedAt may change between queries.\n', '   */\n', '  function latestRoundData()\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    )\n', '  {\n', '    Phase memory current = currentPhase; // cache storage reads\n', '\n', '    (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 ansIn\n', '    ) = current.aggregator.latestRoundData();\n', '\n', '    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\n', '  }\n', '\n', '  /**\n', '   * @notice Used if an aggregator contract has been proposed.\n', '   * @param _roundId the round ID to retrieve the round data for\n', '   * @return roundId is the round ID for which data was retrieved\n', '   * @return answer is the answer for the given round\n', '   * @return startedAt is the timestamp when the round was started.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @return updatedAt is the timestamp when the round last was updated (i.e.\n', '   * answer was last computed)\n', '   * @return answeredInRound is the round ID of the round in which the answer\n', '   * was computed.\n', '  */\n', '  function proposedGetRoundData(uint80 _roundId)\n', '    public\n', '    view\n', '    virtual\n', '    hasProposal()\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    )\n', '  {\n', '    return proposedAggregator.getRoundData(_roundId);\n', '  }\n', '\n', '  /**\n', '   * @notice Used if an aggregator contract has been proposed.\n', '   * @return roundId is the round ID for which data was retrieved\n', '   * @return answer is the answer for the given round\n', '   * @return startedAt is the timestamp when the round was started.\n', '   * (Only some AggregatorV3Interface implementations return meaningful values)\n', '   * @return updatedAt is the timestamp when the round last was updated (i.e.\n', '   * answer was last computed)\n', '   * @return answeredInRound is the round ID of the round in which the answer\n', '   * was computed.\n', '  */\n', '  function proposedLatestRoundData()\n', '    public\n', '    view\n', '    virtual\n', '    hasProposal()\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    )\n', '  {\n', '    return proposedAggregator.latestRoundData();\n', '  }\n', '\n', '  /**\n', "   * @notice returns the current phase's aggregator address.\n", '   */\n', '  function aggregator()\n', '    external\n', '    view\n', '    returns (address)\n', '  {\n', '    return address(currentPhase.aggregator);\n', '  }\n', '\n', '  /**\n', "   * @notice returns the current phase's ID.\n", '   */\n', '  function phaseId()\n', '    external\n', '    view\n', '    returns (uint16)\n', '  {\n', '    return currentPhase.id;\n', '  }\n', '\n', '  /**\n', '   * @notice represents the number of decimals the aggregator responses represent.\n', '   */\n', '  function decimals()\n', '    external\n', '    view\n', '    override\n', '    returns (uint8)\n', '  {\n', '    return currentPhase.aggregator.decimals();\n', '  }\n', '\n', '  /**\n', '   * @notice the version number representing the type of aggregator the proxy\n', '   * points to.\n', '   */\n', '  function version()\n', '    external\n', '    view\n', '    override\n', '    returns (uint256)\n', '  {\n', '    return currentPhase.aggregator.version();\n', '  }\n', '\n', '  /**\n', '   * @notice returns the description of the aggregator the proxy points to.\n', '   */\n', '  function description()\n', '    external\n', '    view\n', '    override\n', '    returns (string memory)\n', '  {\n', '    return currentPhase.aggregator.description();\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to propose a new address for the aggregator\n', '   * @param _aggregator The new address for the aggregator contract\n', '   */\n', '  function proposeAggregator(address _aggregator)\n', '    external\n', '    onlyOwner()\n', '  {\n', '    proposedAggregator = AggregatorV2V3Interface(_aggregator);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to confirm and change the address\n', '   * to the proposed aggregator\n', "   * @dev Reverts if the given address doesn't match what was previously\n", '   * proposed\n', '   * @param _aggregator The new address for the aggregator contract\n', '   */\n', '  function confirmAggregator(address _aggregator)\n', '    external\n', '    onlyOwner()\n', '  {\n', '    require(_aggregator == address(proposedAggregator), "Invalid proposed aggregator");\n', '    delete proposedAggregator;\n', '    setAggregator(_aggregator);\n', '  }\n', '\n', '\n', '  /*\n', '   * Internal\n', '   */\n', '\n', '  function setAggregator(address _aggregator)\n', '    internal\n', '  {\n', '    uint16 id = currentPhase.id + 1;\n', '    currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\n', '    phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\n', '  }\n', '\n', '  function addPhase(\n', '    uint16 _phase,\n', '    uint64 _originalId\n', '  )\n', '    internal\n', '    view\n', '    returns (uint80)\n', '  {\n', '    return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\n', '  }\n', '\n', '  function parseIds(\n', '    uint256 _roundId\n', '  )\n', '    internal\n', '    view\n', '    returns (uint16, uint64)\n', '  {\n', '    uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\n', '    uint64 aggregatorRoundId = uint64(_roundId);\n', '\n', '    return (phaseId, aggregatorRoundId);\n', '  }\n', '\n', '  function addPhaseIds(\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound,\n', '      uint16 phaseId\n', '  )\n', '    internal\n', '    view\n', '    returns (uint80, int256, uint256, uint256, uint80)\n', '  {\n', '    return (\n', '      addPhase(phaseId, uint64(roundId)),\n', '      answer,\n', '      startedAt,\n', '      updatedAt,\n', '      addPhase(phaseId, uint64(answeredInRound))\n', '    );\n', '  }\n', '\n', '  /*\n', '   * Modifiers\n', '   */\n', '\n', '  modifier hasProposal() {\n', '    require(address(proposedAggregator) != address(0), "No proposed aggregator present");\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/oracleIterators/IOracleIterator.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IOracleIterator {\n', '    /// @notice Proof of oracle iterator contract\n', '    /// @dev Verifies that contract is a oracle iterator contract\n', '    /// @return true if contract is a oracle iterator contract\n', '    function isOracleIterator() external pure returns(bool);\n', '\n', '    /// @notice Symbol of the oracle iterator\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    //  finds the value closest to a given timestamp\n', '    /// @param _oracle iteratable oracle through\n', '    /// @param _timestamp a given timestamp\n', '    /// @param _roundHints specified rounds for a given timestamp\n', '    /// @return the value closest to a given timestamp\n', '    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) external view returns(int);\n', '}\n', '\n', '// File: contracts/oracleIterators/ChainlinkOracleIterator.sol\n', '\n', '// "SPDX-License-Identifier: GNU General Public License v3.0"\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract ChainlinkOracleIterator is IOracleIterator {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private PHASE_OFFSET = 64;\n', '    int public constant NEGATIVE_INFINITY = type(int256).min;\n', '\n', '    function isOracleIterator() external override pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    function symbol() external override view returns (string memory) {\n', '        return "ChainlinkIterator";\n', '    }\n', '\n', '    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) public override view returns(int) {\n', '        require(_timestamp > 0, "Zero timestamp");\n', '        require(_oracle != address(0), "Zero oracle");\n', '        AggregatorV2V3Interface oracle = AggregatorV2V3Interface(_oracle);\n', '\n', '        uint80 latestRoundId = uint80(oracle.latestRound());\n', '\n', '        uint16 phaseId;\n', '        (phaseId,) = parseIds(latestRoundId);\n', '        require(_roundHints.length == phaseId, "Must have hints for all phases");\n', '\n', '        uint256 distance = type(uint256).max;\n', '        int256 answer = NEGATIVE_INFINITY;\n', '\n', '        for (uint256 phase = 1; phase <= phaseId; phase++) {\n', '            uint80 roundHint = uint80(_roundHints[phase - 1]);\n', '            require(roundHint > 0, "Zero hint");\n', '            requirePhaseFor(roundHint, phase);\n', '\n', '            int256 hintAnswer = oracle.getAnswer(roundHint);\n', '            uint256 hintTimestamp  = oracle.getTimestamp(roundHint);\n', '\n', '            if(hintTimestamp > 0 && hintTimestamp > _timestamp) {\n', '                uint256 timestampPrevious = 0;\n', '                if(checkBasedRoundIdIsMoreThanZero(phase, roundHint - 1)) {\n', '                    timestampPrevious = oracle.getTimestamp(roundHint - 1);\n', '                }\n', '                require(timestampPrevious == 0, "Earlier round exists");\n', '                continue;\n', '            }\n', '\n', '            uint256 timestampNext = 0;\n', '            if(checkBasedRoundIdIsSameOrLessThanLast(_oracle, phase, roundHint + 1)) {\n', '                timestampNext = oracle.getTimestamp(roundHint + 1);\n', '            }\n', '\n', '            if(hintTimestamp > 0 && hintTimestamp <= _timestamp) {\n', '                if(timestampNext > 0 && timestampNext <= _timestamp) {\n', '                    revert("Later round exists");\n', '                }\n', '                if(timestampNext == 0 || (timestampNext > 0 && timestampNext > _timestamp)) {\n', '                    uint256 phaseDistance = _timestamp.sub(hintTimestamp);\n', '                    if(phaseDistance < distance) {\n', '                        answer = hintAnswer;\n', '                        distance = phaseDistance;\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        return answer;\n', '    }\n', '\n', '    function checkBasedRoundIdIsMoreThanZero(uint256 _phase, uint80 _roundId)\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        uint16 basedPhaseId;\n', '        uint64 basedRoundId;\n', '        (basedPhaseId, basedRoundId) = parseIds(_roundId);\n', '        return (uint256(basedPhaseId) == _phase) && basedRoundId > 0;\n', '    }\n', '\n', '    function checkBasedRoundIdIsSameOrLessThanLast(address _oracle, uint256 _phase, uint80 _roundId)\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        uint16 basedPhaseId;\n', '        uint64 basedRoundId;\n', '        (basedPhaseId, basedRoundId) = parseIds(_roundId);\n', '        if(basedPhaseId != _phase) {\n', '            return false;\n', '        }\n', '\n', '        AggregatorProxy aggregatorProxy = AggregatorProxy(_oracle);\n', '        AggregatorV2V3Interface aggregator = aggregatorProxy.phaseAggregators(uint16(_phase));\n', '        require(address(aggregator) != address(0), "Aggregator is empty");\n', '\n', '        return basedRoundId <= uint80(aggregator.latestRound());\n', '    }\n', '\n', '    function requirePhaseFor(uint80 _roundHint, uint256 _phase)\n', '    internal\n', '    pure\n', '    {\n', '        uint256 currentPhaseId;\n', '        (currentPhaseId,) = parseIds(_roundHint);\n', '        require(currentPhaseId == _phase, "Wrong hint phase id");\n', '    }\n', '\n', '    function parseIds(\n', '        uint256 _roundId\n', '    )\n', '    internal\n', '    pure\n', '    returns (uint16, uint64)\n', '    {\n', '        uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\n', '        uint64 aggregatorRoundId = uint64(_roundId);\n', '\n', '        return (phaseId, aggregatorRoundId);\n', '    }\n', '}']