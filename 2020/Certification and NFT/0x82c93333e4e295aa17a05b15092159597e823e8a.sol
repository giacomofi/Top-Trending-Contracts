['pragma solidity ^0.5.17;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface UniswapAnchoredView {\n', '    function price(string calldata) external view returns (uint256);\n', '}\n', '\n', 'interface OracleSecurityModule {\n', '    function peek() external view returns (bytes32, bool);\n', '\n', '    function peep() external view returns (bytes32, bool);\n', '\n', '    function bud(address) external view returns (uint256);\n', '}\n', '\n', 'contract OSMedianizer {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => bool) public authorized;\n', '    address public governance;\n', '\n', '    OracleSecurityModule public constant OSM = OracleSecurityModule(0xf185d0682d50819263941e5f4EacC763CC5C6C42);\n', '    UniswapAnchoredView public constant MEDIANIZER = UniswapAnchoredView(0x9B8Eb8b3d6e2e0Db36F41455185FEF7049a35CaE);\n', '    string public symbol = "BTC";\n', '\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = true;\n', '    }\n', '\n', '    function revokeAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = false;\n', '    }\n', '\n', '    function read() external view returns (uint256 price, bool osm) {\n', '        if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {\n', '            (bytes32 _val, bool _has) = OSM.peek();\n', '            if (_has) return (uint256(_val), true);\n', '        }\n', '        return ((MEDIANIZER.price(symbol)).mul(1e12), false);\n', '    }\n', '\n', '    function foresight() external view returns (uint256 price, bool osm) {\n', '        if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {\n', '            (bytes32 _val, bool _has) = OSM.peep();\n', '            if (_has) return (uint256(_val), true);\n', '        }\n', '        return ((MEDIANIZER.price(symbol)).mul(1e12), false);\n', '    }\n', '}']