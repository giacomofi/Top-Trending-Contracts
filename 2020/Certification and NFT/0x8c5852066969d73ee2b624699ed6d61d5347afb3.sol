['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/// @title Planets (yield farming)\n', '/// @author Meteor Finance\n', 'contract Planets is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    address public governance;\n', '    address public rewardToken;\n', '    bool public killed;\n', '    uint256 public adminDeadline;\n', '    uint256 public totalDistributed;\n', '    mapping (address=>bool) tokens;\n', '    mapping (address=>mapping (address=>uint256)) public entryBlock;\n', '    mapping (address=>uint256) public rewards;\n', '    mapping (address=>uint256) public totalValue;\n', '    mapping (address=>mapping (address=>uint256)) public balances;\n', '    \n', '    event Deposit(address indexed owner, address indexed token, uint256 value);\n', '    event Withdraw(address indexed owner, address indexed token, uint256 value, bool rewardOnly);\n', '\n', '    constructor (address _governance, address _rewardToken) public {\n', '        governance = _governance;\n', '        rewardToken = _rewardToken;\n', '        killed = false;\n', '        adminDeadline = block.timestamp.add(86400);\n', '    }\n', '    \n', '    modifier govOnly() {\n', '        require(msg.sender == governance, "Only governance address can interact with this function");\n', '        _;\n', '    }\n', '    \n', '    modifier contractAlive() {\n', '        require(killed==false, "Contract is killed, please try emergencyWithdraw()");\n', '        _;\n', '    }\n', '    \n', '    /// @notice Deposit funds to the smart contract\n', '    /// @param _token address of the token to deposit\n', '    /// @param _amount amount of the token to deposit\n', '    /// @return True if deposit is successful\n', '    function deposit(address _token, uint256 _amount) external contractAlive nonReentrant returns (bool) {\n', '        require(tokens[_token] == true, "Token is not allowed for deposit.");\n', '        require(IERC20(_token).allowance(msg.sender, address(this)) >= _amount, "You do not have enough allowance for this operation.");\n', '        if (entryBlock[msg.sender][_token]>0) {\n', '            _withdrawRewards(msg.sender, _token, true);\n', '        } else {\n', '            entryBlock[msg.sender][_token] = block.number;\n', '        }\n', '        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n', '        balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);\n', '        totalValue[_token] = totalValue[_token].add(_amount);\n', '        emit Deposit(msg.sender, _token, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Claim rewards and withdraw\n', '    /// @param _token address of the token to withdraw\n', '    /// @param _rewardOnly true if only claiming rewards otherwise false\n', '    /// @return True if withdraw is successful\n', '    function _withdrawRewards(address _receiver, address _token, bool _rewardOnly) internal contractAlive returns (bool) {\n', '        require(entryBlock[_receiver][_token]!=block.number, "Please wait at least one block before new deposit");\n', '        require(81000>totalDistributed, "Contract is out of rewards, please use emergencyWithraw()");\n', '        uint256 rewardAmount = block.number.sub(entryBlock[_receiver][_token]).mul(rewards[_token]).mul(balances[_receiver][_token]).div(totalValue[_token]);\n', '        require(rewardAmount>0, "No rewards are available for this address. Try emergencyWithdraw()");\n', '        if (!_rewardOnly) {\n', '            require(balances[_receiver][_token]>0, "Token balance must be bigger than 0");\n', '            IERC20(_token).transfer(_receiver, balances[_receiver][_token]);\n', '            totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);\n', '            balances[_receiver][_token] = 0;\n', '            entryBlock[_receiver][_token] = 0;\n', '\n', '        } else {\n', '            entryBlock[_receiver][_token] = block.number;\n', '        }\n', '        IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));\n', '        totalDistributed = totalDistributed.add(rewardAmount);\n', '        emit Withdraw(_receiver, _token, rewardAmount, _rewardOnly);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Claim rewards and withdraw\n', '    /// @param _token address of the token to withdraw\n', '    /// @param _rewardOnly true if only claiming rewards otherwise false\n', '    /// @return True if withdraw is successful\n', '    function withdraw(address _token, bool _rewardOnly) public contractAlive nonReentrant returns (bool) {\n', '        require(entryBlock[msg.sender][_token]>0, "Please make sure you have made a deposit.");\n', '        return _withdrawRewards(msg.sender, _token, _rewardOnly);\n', '    }\n', '\n', '    /// @notice Emergency withdraw without claiming rewards\n', '    /// @param _token address of the token to deposit\n', '    /// @return True if withdraw is successful\n', '    function emergencyWithdraw(address _token) external nonReentrant returns (bool) {\n', '        require(balances[msg.sender][_token]>0, "You do not have balance to withdraw");\n', '        IERC20(_token).transfer(msg.sender, balances[msg.sender][_token]);\n', '        totalValue[_token] = totalValue[_token].sub(balances[msg.sender][_token]);\n', '        balances[msg.sender][_token] = 0;\n', '        entryBlock[msg.sender][_token] = 0;\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // @notice Admin withdraw for emergencies\n', '    // @param _amount Amount of reward token to withdraw\n', '    function adminWithdraw(uint256 _amount) external govOnly {\n', '        require(adminDeadline>block.timestamp);\n', '        IERC20(rewardToken).transfer(msg.sender, _amount);\n', '    }\n', '\n', '    /// @notice Add new token\n', '    /// @param _token address of the token to add\n', '    /// @param _reward amount of starting rewards\n', '    /// @return True if token adding is successful\n', '    function addToken(address _token, uint256 _reward) external govOnly returns (bool) {\n', '        tokens[_token] = true;\n', '        rewards[_token] = _reward;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Delete token\n', '    /// @param _token address of the token to remove\n', '    /// @return True if token removing is successful\n', '    function delToken(address _token) external govOnly returns (bool) {\n', '        require(tokens[_token] == true, "Token already does not exist, so you can not remove it");\n', '        tokens[_token] = false;\n', '        rewards[_token] = 0;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Change governance address\n', '    /// @param _governance address of the new governance address\n', '    /// @return True if address change is successful\n', '    function transferGov(address _governance) external govOnly returns (bool) {\n', '        governance = _governance;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Kill contract (freezes deposits)\n', '    /// @return True if contract killing is successful\n', '    function kill() external govOnly returns (bool) {\n', '        killed = true;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Unkill contract (unfreezes deposits)\n', '    /// @return True if contract unkilling is successful\n', '    function unkill() external govOnly returns (bool) {\n', '        killed = false;\n', '        return true;\n', '    }\n', ' }']