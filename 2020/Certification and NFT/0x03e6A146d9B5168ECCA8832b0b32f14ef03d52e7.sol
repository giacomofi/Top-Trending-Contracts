['// File: contracts/oz/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/oz/IERC20.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 { // brief interface for moloch erc20 token txs\n', '    function balanceOf(address who) external view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', '// File: contracts/oz/NewReentrancy.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract ReentrancyGuard { // call wrapper for reentrancy check\n', '    bool private _notEntered;\n', '\n', '    function _initReentrancyGuard () internal {\n', '        _notEntered = true;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: contracts/CloneParty.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '    /*=====================\n', '    WELCOME TO THE POOL Party v1\n', '    \n', '    **USE AT YOUR OWN RISK**\n', '    Forked from an early version of the permissioned Mystic v2x by LexDAO \n', '    Special thanks to LexDAO for pushing the boundaries of Moloch mysticism \n', '    \n', '    Developed by Peeps Democracy\n', "    MIT License - But please use for good (ie. don't be a dick). \n", '    Definitely NO WARRANTIES.\n', '    =======================*/\n', '\n', 'interface IIdleToken {\n', '  function token() external returns (address underlying);\n', '  function govTokens(uint256) external returns (address govToken);\n', '  function userAvgPrices(address) external returns (uint256 avgPrice);\n', '  function mintIdleToken(uint256 _amount, bool _skipWholeRebalance, address _referral) external returns (uint256 mintedTokens);\n', '  function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\n', '  function redeemInterestBearingTokens(uint256 _amount) external;\n', '  function rebalance() external returns (bool);\n', '  function rebalanceWithGST() external returns (bool);\n', '  function tokenPrice() external view returns (uint256 price);\n', '  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\n', '  function getAvgAPR() external view returns (uint256 avgApr);\n', '  function getGovTokensAmounts(address _usr) external view returns (uint256[] memory _amounts);\n', '}\n', '\n', '\n', 'contract Party is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    \n', '    /****************\n', '    GOVERNANCE PARAMS\n', '    ****************/\n', '    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)\n', '    uint256 public votingPeriodLength; // default = 35 periods (7 days)\n', '    uint256 public gracePeriodLength; // default = 35 periods (7 days)\n', '    uint256 public proposalDepositReward; // default = 10 ETH (~$1,000 worth of ETH at contract deployment)\n', '    uint256 public depositRate; // rate to convert into shares during summoning time (default = 10000000000000000000 wei amt. // 100 wETH => 10 shares)\n', '    uint256 public summoningTime; // needed to determine the current period\n', '    uint256 public partyGoal; // savings goal for DAO \n', '    uint256 public dilutionBound;\n', '\n', '    address public daoFee; // address where fees are sent\n', '    address public depositToken; // deposit token contract reference; default = periodDuration\n', '    address public idleToken;\n', '    \n', '    bool public initialized;\n', '    //address public constant idleToken = 0xB517bB2c2A5D690de2A866534714eaaB13832389;\n', '\n', '\n', '    // HARD-CODED LIMITS\n', '    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations\n', '    // with periods or shares, yet big enough to not limit reasonable use cases.\n', '     // default = 5\n', '    uint256 constant MAX_INPUT = 10**36; // maximum bound for reasonable limits\n', '    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 100; // maximum number of whitelisted tokens\n', '\n', '    // ***************\n', '    // EVENTS\n', '    // ***************\n', '    event SummonComplete(address[] indexed summoners, address[] tokens, uint256 summoningTime, uint256 periodDuration, uint256 votingPeriodLength, uint256 gracePeriodLength, uint256 proposalDepositReward, uint256 partyGoal, uint256 depositRate);\n', '    event MakeDeposit(address indexed memberAddress, uint256 tribute, uint256 mintedTokens, uint256 indexed shares, uint8 goalHit);\n', '    event ProcessAmendGovernance(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass, address newToken, address newIdle, uint256 newPartyGoal, uint256 newDepositRate);    \n', '    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, bool[8] flags, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);\n', '    event SponsorProposal(address indexed sponsor, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);\n', '    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);\n', '    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);\n', '    event ProcessIdleProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, uint256 idleRedemptionAmt, uint256 depositTokenAmt);\n', '    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);\n', '    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);\n', '    event TokensCollected(address indexed token, uint256 amountToCollect);\n', '    event CancelProposal(uint256 indexed proposalId, address applicantAddress);\n', '    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);\n', '    event WithdrawEarnings(address indexed memberAddress, address iToken, uint256 earningsToUser, address depositToken, uint256 redeemedTokens);\n', '    event Withdraw(address indexed memberAddress, address token, uint256 amount);\n', '\n', '    // *******************\n', '    // INTERNAL ACCOUNTING\n', '    // *******************\n', '\n', '    uint8 public goalHit; // tracks whether goal has been hit\n', '    uint256 public proposalCount; // total proposals submitted\n', '    uint256 public totalShares; // total shares across all members\n', '    uint256 public totalLoot; // total loot across all members\n', '    uint256 public totalDeposits; //track deposits made for goal\n', '    uint256 public idleAvgCost; // track avg cost to be efficient with gas\n', '\n', '\n', '    address public constant GUILD = address(0xdead);\n', '    address public constant ESCROW = address(0xbeef);\n', '    address public constant TOTAL = address(0xbabe);\n', '    mapping(address => mapping(address => uint256)) public userTokenBalances; // userTokenBalances[userAddress][tokenAddress]\n', '\n', '    enum Vote {\n', '        Null, // default value, counted as abstention\n', '        Yes,\n', '        No\n', '    }\n', '\n', '    struct Member {\n', '        uint256 shares; // the # of voting shares assigned to this member\n', '        uint256 loot; // the loot amount available to this member (combined with shares on ragequit)\n', '        uint256 iTB; // iToken Balance\n', '        uint256 iTW; // iToken withdrawals\n', '        uint256 iVal; // base value off which earnings are calculated\n', '        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES\n', '        bool jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on and sponsoring proposals\n', '        bool exists; // always true once a member has been created\n', '    }\n', '\n', '    struct Proposal {\n', '        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as guild kick target for gkick proposals)\n', '        address proposer; // the account that submitted the proposal (can be non-member)\n', '        address sponsor; // the member that sponsored the proposal (moving it into the queue)\n', '        uint256 sharesRequested; // the # of shares the applicant is requesting\n', '        uint256 lootRequested; // the amount of loot the applicant is requesting\n', '        uint256 tributeOffered; // amount of tokens offered as tribute\n', '        address tributeToken; // tribute token contract reference\n', '        uint256 paymentRequested; // amount of tokens requested as payment\n', '        address paymentToken; // payment token contract reference\n', '        uint256 startingPeriod; // the period in which voting can start for this proposal\n', '        uint256 yesVotes; // the total number of YES votes for this proposal\n', '        uint256 noVotes; // the total number of NO votes for this proposal\n', '        bool[8] flags; // [sponsored, processed, didPass, cancelled, guildkick, spending, member, action]\n', '        bytes32 details; // proposal details to add context for members \n', '        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal\n', '        mapping(address => Vote) votesByMember; // the votes on this proposal by each member\n', '    }\n', '\n', '    mapping(address => bool) public tokenWhitelist;\n', '    address[] public approvedTokens;\n', '\n', '    mapping(address => bool) public proposedToKick;\n', '\n', '    mapping(address => Member) public members;\n', '    address[] public memberList;\n', '\n', '    mapping(uint256 => Proposal) public proposals;\n', '    uint256[] public proposalQueue;\n', '    mapping(uint256 => bytes) public actions; // proposalId => action data\n', '\n', '    \n', '    /******************\n', '    SUMMONING FUNCTIONS\n', '    ******************/\n', '    function init(\n', '        address[] calldata _founders,\n', '        address[] calldata _approvedTokens,\n', '        address _daoFee,\n', '        uint256 _periodDuration,\n', '        uint256 _votingPeriodLength,\n', '        uint256 _gracePeriodLength,\n', '        uint256 _proposalDepositReward,\n', '        uint256 _depositRate,\n', '        uint256 _partyGoal,\n', '        uint256 _dilutionBound\n', '    ) external {\n', '        require(!initialized, "initialized");\n', '        initialized = true;\n', '        require(_periodDuration > 0, "_periodDuration zeroed");\n', '        require(_votingPeriodLength > 0, "_votingPeriodLength zeroed");\n', '        require(_votingPeriodLength <= MAX_INPUT, "_votingPeriodLength maxed");\n', '        require(_gracePeriodLength <= MAX_INPUT, "_gracePeriodLength maxed");\n', '        require(_approvedTokens.length > 0, "need token");\n', '        \n', '        depositToken = _approvedTokens[0];\n', '        idleToken = _approvedTokens[1];\n', '        // NOTE: move event up here, avoid stack too deep if too many approved tokens\n', '        emit SummonComplete(_founders, _approvedTokens, now, _periodDuration, _votingPeriodLength, _gracePeriodLength, _proposalDepositReward, _depositRate, _partyGoal);\n', '        \n', '        for (uint256 i = 0; i < _approvedTokens.length; i++) {\n', '            require(!tokenWhitelist[_approvedTokens[i]], "token duplicated");\n', '            tokenWhitelist[_approvedTokens[i]] = true;\n', '            approvedTokens.push(_approvedTokens[i]);\n', '        }\n', '        \n', '         for (uint256 i = 0; i < _founders.length; i++) {\n', '             _addFounder(_founders[i]);\n', '         }\n', '        \n', '        daoFee = _daoFee;\n', '        periodDuration = _periodDuration;\n', '        votingPeriodLength = _votingPeriodLength;\n', '        gracePeriodLength = _gracePeriodLength;\n', '        proposalDepositReward = _proposalDepositReward;\n', '        depositRate = _depositRate;\n', '        partyGoal = _partyGoal;\n', '        summoningTime = now;\n', '        goalHit = 0;\n', '        dilutionBound = _dilutionBound;\n', '        \n', '        _initReentrancyGuard();\n', '    }\n', '    \n', '    \n', '    function _addFounder(address founder) internal {\n', '            members[founder] = Member(0, 0, 0, 0, 0, 0, false, true);\n', '            memberList.push(founder);\n', '    }\n', '    \n', '    // Can also be used to upgrade the idle contract, but not switch to new DeFi token (ie. iDAI to iUSDC)\n', '     function _setIdle(address _idleToken) internal {\n', '         idleToken = _idleToken;\n', '     }\n', '    \n', '\n', '     /*****************\n', '    PROPOSAL FUNCTIONS\n', '    *****************/\n', '    function submitProposal(\n', '        address applicant,\n', '        uint256 tributeOffered,\n', '        uint256 sharesRequested,\n', '        uint256 lootRequested,\n', '        uint256 paymentRequested,\n', '        uint256 flagNumber,\n', '        address tributeToken,\n', '        address paymentToken,\n', '        bytes32 details\n', '    ) public nonReentrant returns (uint256 proposalId) {\n', '        require(sharesRequested.add(lootRequested) <= MAX_INPUT, "shares maxed");\n', '        if(flagNumber != 7){\n', '            require(tokenWhitelist[tributeToken] && tokenWhitelist[paymentToken], "tokens not whitelisted");\n', '            // collect tribute from proposer and store it in the Moloch until the proposal is processed\n', '            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "tribute token transfer failed");\n', '            unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);\n', '        }\n', '        require(applicant != address(0), "applicant cannot be 0");\n', '        require(members[applicant].jailed == false, "applicant jailed");\n', '        require(flagNumber != 0 || flagNumber != 1 || flagNumber != 2 || flagNumber != 3, "flag must be 4 - guildkick, 5 - spending, 6 - membership, 7 - governance");\n', '        \n', '        // collect deposit from proposer\n', '        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDepositReward), "proposal deposit failed");\n', '        unsafeAddToBalance(ESCROW, paymentToken, proposalDepositReward);\n', '\n', '        \n', '        // check whether pool goal is met before allowing spending proposals\n', '        if(flagNumber == 5) {\n', '            require(goalHit == 1, "goal not met yet");\n', '        }\n', '        \n', '         if(flagNumber == 6) {\n', '            require(paymentRequested == 0 || goalHit == 1, "goal not met yet");\n', '        }\n', '        \n', '        bool[8] memory flags; // [sponsored, processed, didPass, cancelled, guildkick, spending, member, governance]\n', '        flags[flagNumber] = true;\n', '        \n', '        if(flagNumber == 4) {\n', '            _submitProposal(applicant, 0, 0, 0, address(0), 0, address(0), details, flags);\n', '        } \n', '        \n', '        else if (flagNumber == 7) { // for amend governance use sharesRequested for partyGoal, tributeRequested for depositRate, tributeToken for new Token, paymentToken for new idleToken\n', '            _submitProposal(applicant, 0, 0, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags);\n', '        } \n', '        \n', '        else {\n', '        \n', '        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags);\n', '\n', '        }\n', "        // NOTE: Should approve the 0x address as a blank token for guildKick proposals where there's no token. \n", '        return proposalCount - 1; // return proposalId - contracts calling submit might want it\n', '    }\n', '    \n', '\n', '   function _submitProposal(\n', '        address applicant,\n', '        uint256 sharesRequested,\n', '        uint256 lootRequested,\n', '        uint256 tributeOffered,\n', '        address tributeToken,\n', '        uint256 paymentRequested,\n', '        address paymentToken,\n', '        bytes32 details,\n', '        bool[8] memory flags\n', '    ) internal {\n', '        Proposal memory proposal = Proposal({\n', '            applicant : applicant,\n', '            proposer : msg.sender,\n', '            sponsor : address(0),\n', '            sharesRequested : sharesRequested,\n', '            lootRequested : lootRequested,\n', '            tributeOffered : tributeOffered,\n', '            tributeToken : tributeToken,\n', '            paymentRequested : paymentRequested,\n', '            paymentToken : paymentToken,\n', '            startingPeriod : 0,\n', '            yesVotes : 0,\n', '            noVotes : 0,\n', '            flags : flags,\n', '            details : details,\n', '            maxTotalSharesAndLootAtYesVote : 0\n', '        });\n', '        \n', '        proposals[proposalCount] = proposal;\n', '        address memberAddress = msg.sender;\n', '        // NOTE: argument order matters, avoid stack too deep\n', '        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, proposalCount, msg.sender, memberAddress);\n', '        proposalCount += 1;\n', '    }\n', '\n', '    function sponsorProposal(uint256 proposalId) public nonReentrant  {\n', '\n', '        Proposal storage proposal = proposals[proposalId];\n', '\n', "        require(proposal.proposer != address(0), 'proposal must have been proposed');\n", '        require(!proposal.flags[0], "proposal has already been sponsored");\n', '        require(!proposal.flags[3], "proposal has been cancelled");\n', '        require(members[proposal.applicant].jailed == false, "proposal applicant must not be jailed");\n', '\n', '        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {\n', "            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, 'cannot sponsor more tribute proposals for new tokens - guildbank is full');\n", '        }\n', '\n', '         if (proposal.flags[4]) {\n', "            require(!proposedToKick[proposal.applicant], 'already proposed to kick');\n", '            proposedToKick[proposal.applicant] = true;\n', '        }\n', '\n', '        // compute startingPeriod for proposal\n', '        uint256 startingPeriod = max(\n', '            getCurrentPeriod(),\n', '            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length.sub(1)]].startingPeriod\n', '        ).add(1);\n', '\n', '        proposal.startingPeriod = startingPeriod;\n', '\n', '        address memberAddress = msg.sender;\n', '        proposal.sponsor = memberAddress;\n', '\n', '        proposal.flags[0] = true; // sponsored\n', '\n', '        // append proposal to the queue\n', '        proposalQueue.push(proposalId);\n', '        \n', '        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length.sub(1), startingPeriod);\n', '    }\n', '\n', '\n', '    function submitVote(uint256 proposalIndex, uint8 uintVote) public nonReentrant {\n', '        require(members[msg.sender].exists == true);\n', '        Member storage member = members[msg.sender];\n', '\n', '        require(proposalIndex < proposalQueue.length, "proposal does not exist");\n', '        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];\n', '\n', '        require(uintVote < 3, "must be less than 3, 1 = yes, 2 = no");\n', '        Vote vote = Vote(uintVote);\n', '\n', '        require(getCurrentPeriod() >= proposal.startingPeriod, "voting period has not started");\n', '        require(!hasVotingPeriodExpired(proposal.startingPeriod), "proposal voting period has expired");\n', '        require(proposal.votesByMember[msg.sender] == Vote.Null, "member has already voted");\n', '        require(vote == Vote.Yes || vote == Vote.No, "vote must be either Yes or No");\n', '\n', '        proposal.votesByMember[msg.sender] = vote;\n', '\n', '        if (vote == Vote.Yes) {\n', '            proposal.yesVotes = proposal.yesVotes.add(member.shares);\n', '\n', '            // set highest index (latest) yes vote - must be processed for member to ragequit\n', '            if (proposalIndex > member.highestIndexYesVote) {\n', '                member.highestIndexYesVote = proposalIndex;\n', '            }\n', '\n', '            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters\n', '            if (totalShares.add(totalLoot) > proposal.maxTotalSharesAndLootAtYesVote) {\n', '                proposal.maxTotalSharesAndLootAtYesVote = totalShares.add(totalLoot);\n', '            }\n', '\n', '        } else if (vote == Vote.No) {\n', '            proposal.noVotes = proposal.noVotes.add(member.shares);\n', '        }\n', '     \n', '        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, msg.sender, uintVote);\n', '    }\n', '\n', '    function processProposal(uint256 proposalIndex) public nonReentrant {\n', '        _validateProposalForProcessing(proposalIndex);\n', '\n', '        uint256 proposalId = proposalQueue[proposalIndex];\n', '        Proposal storage proposal = proposals[proposalId];\n', '        \n', '        //[sponsored -0 , processed -1, didPass -2, cancelled -3, guildkick -4, spending -5, member -6, governance -7]\n', '        require(!proposal.flags[4] && !proposal.flags[7], "not standard proposal"); \n', '\n', '        proposal.flags[1] = true; // processed\n', '\n', '        bool didPass = _didPass(proposalIndex);\n', '\n', '        // Make the proposal fail if the new total number of shares and loot exceeds the limit\n', '        if (totalShares.add(totalLoot).add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_INPUT) {\n', '            didPass = false;\n', '        }\n', '\n', '        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance\n', '        if (proposal.paymentToken != depositToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {\n', '            didPass = false;\n', '        }\n', '\n', '        // PROPOSAL PASSED\n', '        if (didPass) {\n', '            proposal.flags[2] = true; // didPass\n', '\n', '            // if the applicant is already a member, add to their existing shares & loot\n', '            if (members[proposal.applicant].exists) {\n', '                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);\n', '                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);\n', '\n', '            // the applicant is a new member, create a new record for them\n', '            } else {\n', '\n', '                members[proposal.applicant] = Member(proposal.sharesRequested, proposal.lootRequested, 0, 0, 0, 0, false, true);\n', '                memberList.push(proposal.applicant);\n', '            }\n', '\n', '            // mint new shares & loot\n', '            totalShares = totalShares.add(proposal.sharesRequested);\n', '            totalLoot = totalLoot.add(proposal.lootRequested);\n', '\n', '             if (proposal.tributeToken == depositToken && proposal.tributeOffered > 0) {\n', '                 unsafeSubtractFromBalance(ESCROW, proposal.tributeToken, proposal.tributeOffered);\n', '                 depositToIdle(proposal.applicant, proposal.tributeOffered, proposal.sharesRequested);\n', '             } else {\n', '               unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);\n', '             }\n', '            \n', '             if (proposal.paymentToken == address(idleToken)) {\n', '                 uint256 proposalPayment = subFees(GUILD, proposal.paymentRequested);\n', '                 unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposalPayment);\n', '             }\n', '            \n', '             if (proposal.paymentToken == depositToken && proposal.paymentRequested > 0 ){\n', '                uint256 iTokenPrice = IIdleToken(idleToken).tokenPrice();\n', '                uint256 idleToConvert = proposal.paymentRequested.div(iTokenPrice);\n', '                uint256 idleRedemptionAmt = subFees(GUILD, idleToConvert);\n', '                \n', '                if(idleRedemptionAmt > userTokenBalances[GUILD][address(idleToken)]){\n', '                    proposal.flags[2] = false;\n', '                }\n', '                \n', '                uint256 depositTokenAmt = IIdleToken(idleToken).redeemIdleToken(idleRedemptionAmt);\n', '                unsafeAddToBalance(proposal.applicant, proposal.paymentToken, depositTokenAmt);\n', '                \n', '                emit ProcessIdleProposal(proposalIndex, proposalId, idleRedemptionAmt, depositTokenAmt);\n', '             }\n', '            \n', '            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);\n', '\n', '        // PROPOSAL FAILED\n', '        } else {\n', '            // return all tokens to the proposer (not the applicant, because funds come from proposer)\n', '            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);\n', '        }\n', '\n', '        _returnDeposit();\n', '        \n', '        emit ProcessProposal(proposalIndex, proposalId, didPass);\n', '    }\n', '\n', '\n', '    function processGuildKickProposal(uint256 proposalIndex) public nonReentrant {\n', '        _validateProposalForProcessing(proposalIndex);\n', '\n', '        uint256 proposalId = proposalQueue[proposalIndex];\n', '        Proposal storage proposal = proposals[proposalId];\n', '\n', '        require(proposal.flags[4], "not guild kick");\n', '\n', '        proposal.flags[1] = true; //[sponsored, processed, didPass, cancelled, guildkick, spending, member]\n', '\n', '        bool didPass = _didPass(proposalIndex);\n', '\n', '        if (didPass) {\n', '            proposal.flags[2] = true; // didPass\n', '            Member storage member = members[proposal.applicant];\n', '            member.jailed == true;\n', '\n', '            // transfer shares to loot\n', '            member.loot = member.loot.add(member.shares);\n', '            totalShares = totalShares.sub(member.shares);\n', '            totalLoot = totalLoot.add(member.shares);\n', '            member.shares = 0; // revoke all shares\n', '        }\n', '\n', '        proposedToKick[proposal.applicant] = false;\n', '\n', '        _returnDeposit();\n', '\n', '        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);\n', '    }\n', '    \n', '    function processAmendGovernance(uint256 proposalIndex) public nonReentrant {\n', '        _validateProposalForProcessing(proposalIndex);\n', '\n', '        uint256 proposalId = proposalQueue[proposalIndex];\n', '        Proposal storage proposal = proposals[proposalId];\n', '\n', '        require(proposal.flags[7], "not gov amendment");\n', '\n', '        proposal.flags[1] = true; //[sponsored, processed, didPass, cancelled, guildkick, spending, member]\n', '\n', '        bool didPass = _didPass(proposalIndex);\n', '\n', '            if (didPass) {\n', '                proposal.flags[2] = true; // didPass\n', '            \n', '            // Updates PartyGoal\n', '            if(proposal.tributeOffered > 0){\n', '                partyGoal = proposal.tributeOffered;\n', '            }\n', '            \n', '            // Update depositRate\n', '            if(proposal.paymentRequested > 0){\n', '                depositRate = proposal.paymentRequested;\n', '            }\n', '            \n', '            // Adds token to whitelist and approvedTokens\n', '            if(proposal.tributeToken != depositToken) {\n', '                require(!tokenWhitelist[proposal.tributeToken], "cannot already have whitelisted the token");\n', '                require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "too many tokens already");\n', '                approvedTokens.push(proposal.tributeToken);\n', '                tokenWhitelist[address(proposal.tributeToken)] = true;\n', '            }\n', '            // Used to upgrade iToken, cannot be used to switch iToken since depositToken is static\n', '            if(proposal.paymentToken != address(idleToken) && proposal.paymentToken != depositToken) {\n', '                _setIdle(proposal.paymentToken);\n', '                approvedTokens.push(proposal.paymentToken);\n', '                tokenWhitelist[address(proposal.paymentToken)] = true;\n', '            }\n', '        }\n', '\n', '        _returnDeposit();\n', '        \n', '        emit ProcessAmendGovernance(proposalIndex, proposalId, didPass, proposal.tributeToken, proposal.paymentToken, proposal.tributeOffered, proposal.paymentRequested);\n', '    }\n', '    \n', '\n', '    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {\n', '        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];\n', '\n', '        didPass = proposal.yesVotes > proposal.noVotes;\n', '\n', '        // Make the proposal fail if the dilutionBound is exceeded\n', '        if ((totalShares.add(totalLoot)).mul(dilutionBound / 100) < proposal.maxTotalSharesAndLootAtYesVote) {\n', '            didPass = false;\n', '        }\n', '\n', '        // Make the proposal fail if the applicant is jailed\n', "        // - for standard proposals, we don't want the applicant to get any shares/loot/payment\n", "        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter\n", '        if (members[proposal.applicant].jailed == true) {\n', '            didPass = false;\n', '        }\n', '\n', '        return didPass;\n', '    }\n', '\n', '    function _validateProposalForProcessing(uint256 proposalIndex) internal view {\n', '        require(proposalIndex < proposalQueue.length, "no such proposal");\n', '        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];\n', '\n', '        require(getCurrentPeriod() >= proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength), "proposal not ready");\n', '        require(proposal.flags[1] == false, "proposal has already been processed");\n', '        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex.sub(1)]].flags[1], "previous proposal unprocessed");\n', '    }\n', '\n', '    function _returnDeposit() internal {\n', '        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, proposalDepositReward);\n', '    }\n', '\n', '    function ragequit() public nonReentrant {\n', '        /* \n', '        @Dev - to simplify accounting had to set ragequit to an all or nothing proposition.\n', '        Since members who ragequit can always redeposit after the ragequit, it should not \n', '        be to limiting until a better system can be implemented in ModMol v3. \n', '        */\n', '        \n', '        require(members[msg.sender].shares.add(members[msg.sender].loot) > 0, "only users with balances can ragequit");\n', '        _ragequit(msg.sender);\n', '    }\n', '\n', '    function _ragequit(address memberAddress) internal returns (uint256) {\n', '        uint256 initialTotalSharesAndLoot = totalShares.add(totalLoot);\n', '\n', '        Member storage member = members[memberAddress];\n', '\n', '        require(canRagequit(member.highestIndexYesVote), "cannot ragequit until highest index proposal member voted YES on is processed");\n', '\n', '        // set member shares and loot to \n', '        uint256 sharesToBurn = member.shares;\n', '        uint256 lootToBurn = member.loot;\n', '        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);\n', '\n', '        // burn shares and loot (obviously sets member shares and loot back to 0)\n', '        member.shares = member.shares.sub(sharesToBurn);\n', '        member.loot = member.loot.sub(lootToBurn);\n', '        totalShares = totalShares.sub(sharesToBurn);\n', '        totalLoot = totalLoot.sub(lootToBurn);\n', '\n', '        for (uint256 i = 0; i < approvedTokens.length; i++) {\n', '            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);\n', '            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit\n', '                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;\n', '                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;\n', '                uint256 feeEligible = getUserEarnings(member.iTB);\n', '                subFees(memberAddress, feeEligible);\n', '               \n', '                // Only runs guild bank adjustment if member has withdrawn tokens.\n', '                // Otherwise, adjustment would end up costing member their fair share\n', '                    \n', '                 if(member.iTW > 0) {\n', "                    // @Dev - SafeMath wasn't working here. \n", '                     uint256 iAdj = amountToRagequit - member.iTB;\n', '                     if(iAdj > 0) {\n', '                        unsafeInternalTransfer(memberAddress, GUILD, address(idleToken), iAdj);\n', '                     }\n', '                 }\n', '                 \n', '                // Reset member-specific internal accting \n', '                member.iTB = 0;\n', '                member.iTW = 0;\n', '                member.iVal = 0;\n', '            }\n', '        }\n', '        emit Ragequit(msg.sender, sharesToBurn, lootToBurn);  \n', '    }\n', '\n', '    function ragekick(address memberToKick) public nonReentrant {\n', '        Member storage member = members[memberToKick];\n', '\n', '        require(member.jailed != true, "member not jailed");\n', '        require(member.loot > 0, "member must have loot"); // note - should be impossible for jailed member to have shares\n', '        require(canRagequit(member.highestIndexYesVote), "cannot ragequit until highest index proposal member voted YES on is processed");\n', '\n', '        _ragequit(memberToKick);\n', '    }\n', '    \n', '    function withdrawEarnings(address memberAddress, uint256 amount) external nonReentrant {\n', '        \n', '        Member storage member = members[memberAddress];\n', '        \n', '        require(member.exists == true, "not member");\n', '        require(address(msg.sender) == memberAddress, "can only be called by member");\n', '        \n', '\n', '        uint256 iTBVal = getIdleValue(member.iTB);\n', '        require(iTBVal.sub(member.iVal) >= amount, "not enough earnings to redeem this many tokens");\n', '        \n', '        uint256 earningsToUser = subFees(GUILD, amount);\n', '        uint256 redeemedTokens = IIdleToken(idleToken).redeemIdleToken(earningsToUser);\n', '        \n', '        // Accounting updates\n', '        member.iTW += earningsToUser;\n', '        member.iTB -= earningsToUser;\n', '        unsafeSubtractFromBalance(GUILD, address(idleToken), earningsToUser);\n', '        unsafeAddToBalance(GUILD, depositToken, redeemedTokens);\n', '        unsafeInternalTransfer(GUILD, memberAddress, depositToken, redeemedTokens);\n', '        \n', '        emit WithdrawEarnings(msg.sender, address(idleToken), earningsToUser, depositToken, redeemedTokens);\n', '    }\n', '\n', '    function withdrawBalance(address token, uint256 amount) public nonReentrant {\n', '        _withdrawBalance(token, amount);\n', '    }\n', '    \n', '\n', '    function withdrawBalances(address[] memory tokens, uint256[] memory amounts, bool max) public nonReentrant {\n', '        require(tokens.length == amounts.length, "tokens + amounts arrays must match");\n', '\n', '        for (uint256 i=0; i < tokens.length; i++) {\n', '            uint256 withdrawAmount = amounts[i];\n', '            if (max) { // withdraw the maximum balance\n', '                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];\n', '            }\n', '\n', '            _withdrawBalance(tokens[i], withdrawAmount);\n', '        }\n', '    }\n', '    \n', '    \n', '    function _withdrawBalance(address token, uint256 amount) internal {\n', '        require(userTokenBalances[msg.sender][token] >= amount, "insufficient balance");\n', '        unsafeSubtractFromBalance(msg.sender, token, amount);\n', '        require(IERC20(token).transfer(msg.sender, amount), "transfer failed");\n', '        emit Withdraw(msg.sender, token, amount);\n', '    }\n', '    \n', '\n', '    // NOTE: gives the DAO the ability to collect payments and also recover tokens just sent to DAO address (if whitelisted)\n', '    function collectTokens(address token) external {\n', '        uint256 amountToCollect = IERC20(token).balanceOf(address(this)) - userTokenBalances[TOTAL][token];\n', '        // only collect if 1) there are tokens to collect and 2) token is whitelisted\n', '        require(amountToCollect > 0, "no tokens");\n', '        require(tokenWhitelist[token], "not whitelisted");\n', '        \n', '        unsafeAddToBalance(GUILD, token, amountToCollect);\n', '\n', '        emit TokensCollected(token, amountToCollect);\n', '    }\n', '    \n', '\n', '    function cancelProposal(uint256 proposalId) public nonReentrant {\n', '        Proposal storage proposal = proposals[proposalId];\n', '        require(getCurrentPeriod() <= proposal.startingPeriod, "voting period has already started");\n', '        require(!proposal.flags[3], "proposal already cancelled");\n', '        require(msg.sender == proposal.proposer, "only proposer cancels");\n', '\n', '        proposal.flags[3] = true; // cancelled\n', '        \n', '        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);\n', '        emit CancelProposal(proposalId, msg.sender);\n', '    }\n', '\n', '    // can only ragequit if the latest proposal you voted YES on has been processed\n', '    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {\n', '        if(proposalQueue.length == 0){\n', '            return true;\n', '        } else {\n', '            require(highestIndexYesVote < proposalQueue.length, "no such proposal");\n', '            return proposals[proposalQueue[highestIndexYesVote]].flags[0];\n', '        }\n', '    }\n', '\n', '    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {\n', '        return getCurrentPeriod() >= startingPeriod.add(votingPeriodLength);\n', '    }\n', '    \n', '    /***************\n', '    GETTER FUNCTIONS\n', '    ***************/\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function getCurrentPeriod() public view returns (uint256) {\n', '        return now.sub(summoningTime).div(periodDuration);\n', '    }\n', '\n', '    function getProposalQueueLength() public view returns (uint256) {\n', '        return proposalQueue.length;\n', '    }\n', '\n', '    function getProposalFlags(uint256 proposalId) public view returns (bool[8] memory) {\n', '        return proposals[proposalId].flags;\n', '    }\n', '\n', '    function getUserTokenBalance(address user, address token) public view returns (uint256) {\n', '        return userTokenBalances[user][token];\n', '    }\n', '\n', '    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) public view returns (Vote) {\n', '        require(members[memberAddress].exists, "no such member");\n', '        require(proposalIndex < proposalQueue.length, "unproposed");\n', '        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];\n', '    }\n', '\n', '    function getTokenCount() public view returns (uint256) {\n', '        return approvedTokens.length;\n', '    }\n', '\n', '    /***************\n', '    HELPER FUNCTIONS\n', '    ***************/\n', '    \n', '    function getUserEarnings(uint256 amount) public returns (uint256) {\n', '        uint256 userBalance = amount;\n', '        uint256 avgCost = userBalance.mul(IIdleToken(idleToken).userAvgPrices(address(this))).div(10**18);\n', '        uint256 currentValue = userBalance.mul(IIdleToken(idleToken).tokenPrice()).div(10**18);\n', '        uint256 earnings = currentValue.sub(avgCost);\n', '\n', '        return earnings;\n', '    }\n', '    \n', '    \n', '    function getIdleValue(uint256 amount) public view returns (uint256){\n', '        return amount.mul(IIdleToken(idleToken).tokenPrice()).div(10**18);\n', '    }\n', '    \n', '    function subFees(address holder, uint256 amount) internal returns (uint256) {\n', '        uint256 poolFees = amount.div(uint256(100).div(10));\n', '        unsafeInternalTransfer(holder, daoFee, address(idleToken), poolFees);\n', '        return amount.sub(poolFees);\n', '    }\n', '    \n', '    function makeDeposit(uint256 amount) external nonReentrant {\n', "        require(members[msg.sender].exists == true, 'must be member to deposit shares');\n", '        \n', '        uint256 shares = amount.div(depositRate);\n', '        members[msg.sender].shares += shares;\n', '        require(members[msg.sender].shares <= partyGoal.div(depositRate).div(2), "can\'t take over 50% of the shares w/o a proposal");\n', '        totalShares += shares;\n', '        \n', '        require(IERC20(depositToken).transferFrom(msg.sender, address(this), amount), "token transfer failed");\n', '        depositToIdle(msg.sender, amount, shares);\n', '    }\n', '    \n', '    \n', '    function depositToIdle(address depositor, uint256 amount, uint256 shares) internal {\n', '        require(amount != 0, "no tokens to deposit");\n', '        totalDeposits += amount;\n', '        \n', '        // Token is the deposit token (eg. DAI)\n', "        require(IERC20(depositToken).approve(address(idleToken), amount), 'approval failed');\n", '        uint256 mintedTokens = IIdleToken(idleToken).mintIdleToken(amount, true, depositor);\n', '        \n', '        // Update internal accounting\n', '        members[depositor].iTB += mintedTokens;\n', '        members[depositor].iVal += amount;\n', '        unsafeAddToBalance(GUILD, idleToken, mintedTokens);\n', '        \n', '        // Checks to see if goal has been reached with this deposit\n', '         goalHit = checkGoal();\n', '        \n', "        // @Dev updates here b/c solidity doesn't recognize as a view only function\n", '        idleAvgCost = IIdleToken(idleToken).userAvgPrices(address(this));\n', '        \n', '        emit MakeDeposit(depositor, amount, mintedTokens, shares, goalHit);\n', '    }\n', '    \n', '    function checkGoal() public returns (uint8) {\n', '        uint256 daoFunds = getUserTokenBalance(GUILD, idleToken);\n', '        uint256 idleValue = getIdleValue(daoFunds);\n', '        \n', '        if(idleValue >= partyGoal){\n', '            return goalHit = 1;\n', '        } else {\n', '            return goalHit = 0;\n', '        }\n', '    }\n', '    \n', '    \n', '    function unsafeAddToBalance(address user, address token, uint256 amount) internal {\n', '        userTokenBalances[user][token] += amount;\n', '        userTokenBalances[TOTAL][token] += amount;\n', '    }\n', '\n', '    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {\n', '        userTokenBalances[user][token] -= amount;\n', '        userTokenBalances[TOTAL][token] -= amount;\n', '    }\n', '\n', '    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {\n', '        unsafeSubtractFromBalance(from, token, amount);\n', '        unsafeAddToBalance(to, token, amount);\n', '    }\n', '\n', '    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {\n', '        require(totalSharesAndLoot != 0);\n', '\n', '        if (balance == 0) { return 0; }\n', '\n', '        uint256 prod = balance * shares;\n', '\n', '        if (prod / balance == shares) { // no overflow in multiplication above?\n', '            return prod / totalSharesAndLoot;\n', '        }\n', '\n', '        return (balance / totalSharesAndLoot) * shares;\n', '    } \n', '}']