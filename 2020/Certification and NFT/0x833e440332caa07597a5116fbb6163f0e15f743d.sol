['pragma solidity ^0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface CErc20 {\n', '    function underlying() external view returns (address);\n', '}\n', '\n', 'interface ERC20 {\n', '    function balanceOf(address account) external view returns (uint);\n', '}\n', '\n', 'contract UniswapConfig {\n', '    enum PriceSource {\n', '        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\n', '        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\n', '        REPORTER   /// implies the price is set by the reporter\n', '    }\n', '\n', '    /// @dev Describe how the USD price should be determined for an asset.\n', '    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\n', '    struct TokenConfig {\n', '        address sToken;\n', '        address underlying;\n', '        bytes32 symbolHash;\n', '        uint256 baseUnit;\n', '        PriceSource priceSource;\n', '        uint256 fixedPrice;\n', '        address uniswapMarket;\n', '        bool isUniswapReversed;\n', '        bool isLP;\n', '    }\n', '\n', '    /// @notice The max number of tokens this contract is hardcoded to support\n', '    /// @dev Do not change this variable without updating all the fields throughout the contract.\n', '    uint public constant maxTokens = 20;\n', '\n', '    /// @notice The number of tokens this contract actually supports\n', '    uint public immutable numTokens;\n', '\n', '    address internal immutable sToken00;\n', '    address internal immutable sToken01;\n', '    address internal immutable sToken02;\n', '    address internal immutable sToken03;\n', '    address internal immutable sToken04;\n', '    address internal immutable sToken05;\n', '    address internal immutable sToken06;\n', '    address internal immutable sToken07;\n', '    address internal immutable sToken08;\n', '    address internal immutable sToken09;\n', '    address internal immutable sToken10;\n', '    address internal immutable sToken11;\n', '    address internal immutable sToken12;\n', '    address internal immutable sToken13;\n', '    address internal immutable sToken14;\n', '    address internal immutable sToken15;\n', '    address internal immutable sToken16;\n', '    address internal immutable sToken17;\n', '    address internal immutable sToken18;\n', '    address internal immutable sToken19;\n', '\n', '\n', '    address internal immutable underlying00;\n', '    address internal immutable underlying01;\n', '    address internal immutable underlying02;\n', '    address internal immutable underlying03;\n', '    address internal immutable underlying04;\n', '    address internal immutable underlying05;\n', '    address internal immutable underlying06;\n', '    address internal immutable underlying07;\n', '    address internal immutable underlying08;\n', '    address internal immutable underlying09;\n', '    address internal immutable underlying10;\n', '    address internal immutable underlying11;\n', '    address internal immutable underlying12;\n', '    address internal immutable underlying13;\n', '    address internal immutable underlying14;\n', '    address internal immutable underlying15;\n', '    address internal immutable underlying16;\n', '    address internal immutable underlying17;\n', '    address internal immutable underlying18;\n', '    address internal immutable underlying19;\n', '\n', '\n', '    bytes32 internal immutable symbolHash00;\n', '    bytes32 internal immutable symbolHash01;\n', '    bytes32 internal immutable symbolHash02;\n', '    bytes32 internal immutable symbolHash03;\n', '    bytes32 internal immutable symbolHash04;\n', '    bytes32 internal immutable symbolHash05;\n', '    bytes32 internal immutable symbolHash06;\n', '    bytes32 internal immutable symbolHash07;\n', '    bytes32 internal immutable symbolHash08;\n', '    bytes32 internal immutable symbolHash09;\n', '    bytes32 internal immutable symbolHash10;\n', '    bytes32 internal immutable symbolHash11;\n', '    bytes32 internal immutable symbolHash12;\n', '    bytes32 internal immutable symbolHash13;\n', '    bytes32 internal immutable symbolHash14;\n', '    bytes32 internal immutable symbolHash15;\n', '    bytes32 internal immutable symbolHash16;\n', '    bytes32 internal immutable symbolHash17;\n', '    bytes32 internal immutable symbolHash18;\n', '    bytes32 internal immutable symbolHash19;\n', '\n', '    uint256 internal immutable baseUnit00;\n', '    uint256 internal immutable baseUnit01;\n', '    uint256 internal immutable baseUnit02;\n', '    uint256 internal immutable baseUnit03;\n', '    uint256 internal immutable baseUnit04;\n', '    uint256 internal immutable baseUnit05;\n', '    uint256 internal immutable baseUnit06;\n', '    uint256 internal immutable baseUnit07;\n', '    uint256 internal immutable baseUnit08;\n', '    uint256 internal immutable baseUnit09;\n', '    uint256 internal immutable baseUnit10;\n', '    uint256 internal immutable baseUnit11;\n', '    uint256 internal immutable baseUnit12;\n', '    uint256 internal immutable baseUnit13;\n', '    uint256 internal immutable baseUnit14;\n', '    uint256 internal immutable baseUnit15;\n', '    uint256 internal immutable baseUnit16;\n', '    uint256 internal immutable baseUnit17;\n', '    uint256 internal immutable baseUnit18;\n', '    uint256 internal immutable baseUnit19;\n', '\n', '    PriceSource internal immutable priceSource00;\n', '    PriceSource internal immutable priceSource01;\n', '    PriceSource internal immutable priceSource02;\n', '    PriceSource internal immutable priceSource03;\n', '    PriceSource internal immutable priceSource04;\n', '    PriceSource internal immutable priceSource05;\n', '    PriceSource internal immutable priceSource06;\n', '    PriceSource internal immutable priceSource07;\n', '    PriceSource internal immutable priceSource08;\n', '    PriceSource internal immutable priceSource09;\n', '    PriceSource internal immutable priceSource10;\n', '    PriceSource internal immutable priceSource11;\n', '    PriceSource internal immutable priceSource12;\n', '    PriceSource internal immutable priceSource13;\n', '    PriceSource internal immutable priceSource14;\n', '    PriceSource internal immutable priceSource15;\n', '    PriceSource internal immutable priceSource16;\n', '    PriceSource internal immutable priceSource17;\n', '    PriceSource internal immutable priceSource18;\n', '    PriceSource internal immutable priceSource19;\n', '\n', '    uint256 internal immutable fixedPrice00;\n', '    uint256 internal immutable fixedPrice01;\n', '    uint256 internal immutable fixedPrice02;\n', '    uint256 internal immutable fixedPrice03;\n', '    uint256 internal immutable fixedPrice04;\n', '    uint256 internal immutable fixedPrice05;\n', '    uint256 internal immutable fixedPrice06;\n', '    uint256 internal immutable fixedPrice07;\n', '    uint256 internal immutable fixedPrice08;\n', '    uint256 internal immutable fixedPrice09;\n', '    uint256 internal immutable fixedPrice10;\n', '    uint256 internal immutable fixedPrice11;\n', '    uint256 internal immutable fixedPrice12;\n', '    uint256 internal immutable fixedPrice13;\n', '    uint256 internal immutable fixedPrice14;\n', '    uint256 internal immutable fixedPrice15;\n', '    uint256 internal immutable fixedPrice16;\n', '    uint256 internal immutable fixedPrice17;\n', '    uint256 internal immutable fixedPrice18;\n', '    uint256 internal immutable fixedPrice19;\n', '\n', '    address internal immutable uniswapMarket00;\n', '    address internal immutable uniswapMarket01;\n', '    address internal immutable uniswapMarket02;\n', '    address internal immutable uniswapMarket03;\n', '    address internal immutable uniswapMarket04;\n', '    address internal immutable uniswapMarket05;\n', '    address internal immutable uniswapMarket06;\n', '    address internal immutable uniswapMarket07;\n', '    address internal immutable uniswapMarket08;\n', '    address internal immutable uniswapMarket09;\n', '    address internal immutable uniswapMarket10;\n', '    address internal immutable uniswapMarket11;\n', '    address internal immutable uniswapMarket12;\n', '    address internal immutable uniswapMarket13;\n', '    address internal immutable uniswapMarket14;\n', '    address internal immutable uniswapMarket15;\n', '    address internal immutable uniswapMarket16;\n', '    address internal immutable uniswapMarket17;\n', '    address internal immutable uniswapMarket18;\n', '    address internal immutable uniswapMarket19;\n', '\n', '    bool internal immutable isUniswapReversed00;\n', '    bool internal immutable isUniswapReversed01;\n', '    bool internal immutable isUniswapReversed02;\n', '    bool internal immutable isUniswapReversed03;\n', '    bool internal immutable isUniswapReversed04;\n', '    bool internal immutable isUniswapReversed05;\n', '    bool internal immutable isUniswapReversed06;\n', '    bool internal immutable isUniswapReversed07;\n', '    bool internal immutable isUniswapReversed08;\n', '    bool internal immutable isUniswapReversed09;\n', '    bool internal immutable isUniswapReversed10;\n', '    bool internal immutable isUniswapReversed11;\n', '    bool internal immutable isUniswapReversed12;\n', '    bool internal immutable isUniswapReversed13;\n', '    bool internal immutable isUniswapReversed14;\n', '    bool internal immutable isUniswapReversed15;\n', '    bool internal immutable isUniswapReversed16;\n', '    bool internal immutable isUniswapReversed17;\n', '    bool internal immutable isUniswapReversed18;\n', '    bool internal immutable isUniswapReversed19;\n', '\n', '    bool internal immutable isLP00;\n', '    bool internal immutable isLP01;\n', '    bool internal immutable isLP02;\n', '    bool internal immutable isLP03;\n', '    bool internal immutable isLP04;\n', '    bool internal immutable isLP05;\n', '    bool internal immutable isLP06;\n', '    bool internal immutable isLP07;\n', '    bool internal immutable isLP08;\n', '    bool internal immutable isLP09;\n', '    bool internal immutable isLP10;\n', '    bool internal immutable isLP11;\n', '    bool internal immutable isLP12;\n', '    bool internal immutable isLP13;\n', '    bool internal immutable isLP14;\n', '    bool internal immutable isLP15;\n', '    bool internal immutable isLP16;\n', '    bool internal immutable isLP17;\n', '    bool internal immutable isLP18;\n', '    bool internal immutable isLP19;\n', '\n', '    constructor(address[] memory sTokens_, address[] memory underlyings_,\n', '        bytes32[] memory symbolHashs_, uint256[] memory baseUints_,\n', '        PriceSource[] memory priceSources_, uint256[] memory fixedPrices_, address[] memory uniswapMarkets_, bool[] memory isUniswapReverseds_,\n', '        bool[] memory isLP_) public {\n', '\n', '        require(sTokens_.length <= maxTokens, "too many sToken");\n', '        TokenConfig[] memory configs = new TokenConfig[](maxTokens);\n', '        for (uint i = 0; i < sTokens_.length; i++) {\n', '            TokenConfig memory config = TokenConfig({\n', '            sToken : sTokens_[i],\n', '            underlying : underlyings_[i],\n', '            symbolHash : symbolHashs_[i],\n', '            baseUnit : baseUints_[i],\n', '            priceSource: priceSources_[i],\n', '            fixedPrice: fixedPrices_[i],\n', '            uniswapMarket : uniswapMarkets_[i],\n', '            isUniswapReversed : isUniswapReverseds_[i],\n', '            isLP: isLP_[i]\n', '            });\n', '            configs[i] = config;\n', '        }\n', '\n', '        require(configs.length <= maxTokens, "too many configs");\n', '        numTokens = configs.length;\n', '\n', '        sToken00 = get(configs, 0).sToken;\n', '        sToken01 = get(configs, 1).sToken;\n', '        sToken02 = get(configs, 2).sToken;\n', '        sToken03 = get(configs, 3).sToken;\n', '        sToken04 = get(configs, 4).sToken;\n', '        sToken05 = get(configs, 5).sToken;\n', '        sToken06 = get(configs, 6).sToken;\n', '        sToken07 = get(configs, 7).sToken;\n', '        sToken08 = get(configs, 8).sToken;\n', '        sToken09 = get(configs, 9).sToken;\n', '        sToken10 = get(configs, 10).sToken;\n', '        sToken11 = get(configs, 11).sToken;\n', '        sToken12 = get(configs, 12).sToken;\n', '        sToken13 = get(configs, 13).sToken;\n', '        sToken14 = get(configs, 14).sToken;\n', '        sToken15 = get(configs, 15).sToken;\n', '        sToken16 = get(configs, 16).sToken;\n', '        sToken17 = get(configs, 17).sToken;\n', '        sToken18 = get(configs, 18).sToken;\n', '        sToken19 = get(configs, 19).sToken;\n', '\n', '        underlying00 = get(configs, 0).underlying;\n', '        underlying01 = get(configs, 1).underlying;\n', '        underlying02 = get(configs, 2).underlying;\n', '        underlying03 = get(configs, 3).underlying;\n', '        underlying04 = get(configs, 4).underlying;\n', '        underlying05 = get(configs, 5).underlying;\n', '        underlying06 = get(configs, 6).underlying;\n', '        underlying07 = get(configs, 7).underlying;\n', '        underlying08 = get(configs, 8).underlying;\n', '        underlying09 = get(configs, 9).underlying;\n', '        underlying10 = get(configs, 10).underlying;\n', '        underlying11 = get(configs, 11).underlying;\n', '        underlying12 = get(configs, 12).underlying;\n', '        underlying13 = get(configs, 13).underlying;\n', '        underlying14 = get(configs, 14).underlying;\n', '        underlying15 = get(configs, 15).underlying;\n', '        underlying16 = get(configs, 16).underlying;\n', '        underlying17 = get(configs, 17).underlying;\n', '        underlying18 = get(configs, 18).underlying;\n', '        underlying19 = get(configs, 19).underlying;\n', '\n', '        symbolHash00 = get(configs, 0).symbolHash;\n', '        symbolHash01 = get(configs, 1).symbolHash;\n', '        symbolHash02 = get(configs, 2).symbolHash;\n', '        symbolHash03 = get(configs, 3).symbolHash;\n', '        symbolHash04 = get(configs, 4).symbolHash;\n', '        symbolHash05 = get(configs, 5).symbolHash;\n', '        symbolHash06 = get(configs, 6).symbolHash;\n', '        symbolHash07 = get(configs, 7).symbolHash;\n', '        symbolHash08 = get(configs, 8).symbolHash;\n', '        symbolHash09 = get(configs, 9).symbolHash;\n', '        symbolHash10 = get(configs, 10).symbolHash;\n', '        symbolHash11 = get(configs, 11).symbolHash;\n', '        symbolHash12 = get(configs, 12).symbolHash;\n', '        symbolHash13 = get(configs, 13).symbolHash;\n', '        symbolHash14 = get(configs, 14).symbolHash;\n', '        symbolHash15 = get(configs, 15).symbolHash;\n', '        symbolHash16 = get(configs, 16).symbolHash;\n', '        symbolHash17 = get(configs, 17).symbolHash;\n', '        symbolHash18 = get(configs, 18).symbolHash;\n', '        symbolHash19 = get(configs, 19).symbolHash;\n', '\n', '        baseUnit00 = get(configs, 0).baseUnit;\n', '        baseUnit01 = get(configs, 1).baseUnit;\n', '        baseUnit02 = get(configs, 2).baseUnit;\n', '        baseUnit03 = get(configs, 3).baseUnit;\n', '        baseUnit04 = get(configs, 4).baseUnit;\n', '        baseUnit05 = get(configs, 5).baseUnit;\n', '        baseUnit06 = get(configs, 6).baseUnit;\n', '        baseUnit07 = get(configs, 7).baseUnit;\n', '        baseUnit08 = get(configs, 8).baseUnit;\n', '        baseUnit09 = get(configs, 9).baseUnit;\n', '        baseUnit10 = get(configs, 10).baseUnit;\n', '        baseUnit11 = get(configs, 11).baseUnit;\n', '        baseUnit12 = get(configs, 12).baseUnit;\n', '        baseUnit13 = get(configs, 13).baseUnit;\n', '        baseUnit14 = get(configs, 14).baseUnit;\n', '        baseUnit15 = get(configs, 15).baseUnit;\n', '        baseUnit16 = get(configs, 16).baseUnit;\n', '        baseUnit17 = get(configs, 17).baseUnit;\n', '        baseUnit18 = get(configs, 18).baseUnit;\n', '        baseUnit19 = get(configs, 19).baseUnit;\n', '\n', '        priceSource00 = get(configs, 0).priceSource;\n', '        priceSource01 = get(configs, 1).priceSource;\n', '        priceSource02 = get(configs, 2).priceSource;\n', '        priceSource03 = get(configs, 3).priceSource;\n', '        priceSource04 = get(configs, 4).priceSource;\n', '        priceSource05 = get(configs, 5).priceSource;\n', '        priceSource06 = get(configs, 6).priceSource;\n', '        priceSource07 = get(configs, 7).priceSource;\n', '        priceSource08 = get(configs, 8).priceSource;\n', '        priceSource09 = get(configs, 9).priceSource;\n', '        priceSource10 = get(configs, 10).priceSource;\n', '        priceSource11 = get(configs, 11).priceSource;\n', '        priceSource12 = get(configs, 12).priceSource;\n', '        priceSource13 = get(configs, 13).priceSource;\n', '        priceSource14 = get(configs, 14).priceSource;\n', '        priceSource15 = get(configs, 15).priceSource;\n', '        priceSource16 = get(configs, 16).priceSource;\n', '        priceSource17 = get(configs, 17).priceSource;\n', '        priceSource18 = get(configs, 18).priceSource;\n', '        priceSource19 = get(configs, 19).priceSource;\n', '\n', '        fixedPrice00 = get(configs, 0).fixedPrice;\n', '        fixedPrice01 = get(configs, 1).fixedPrice;\n', '        fixedPrice02 = get(configs, 2).fixedPrice;\n', '        fixedPrice03 = get(configs, 3).fixedPrice;\n', '        fixedPrice04 = get(configs, 4).fixedPrice;\n', '        fixedPrice05 = get(configs, 5).fixedPrice;\n', '        fixedPrice06 = get(configs, 6).fixedPrice;\n', '        fixedPrice07 = get(configs, 7).fixedPrice;\n', '        fixedPrice08 = get(configs, 8).fixedPrice;\n', '        fixedPrice09 = get(configs, 9).fixedPrice;\n', '        fixedPrice10 = get(configs, 10).fixedPrice;\n', '        fixedPrice11 = get(configs, 11).fixedPrice;\n', '        fixedPrice12 = get(configs, 12).fixedPrice;\n', '        fixedPrice13 = get(configs, 13).fixedPrice;\n', '        fixedPrice14 = get(configs, 14).fixedPrice;\n', '        fixedPrice15 = get(configs, 15).fixedPrice;\n', '        fixedPrice16 = get(configs, 16).fixedPrice;\n', '        fixedPrice17 = get(configs, 17).fixedPrice;\n', '        fixedPrice18 = get(configs, 18).fixedPrice;\n', '        fixedPrice19 = get(configs, 19).fixedPrice;\n', '\n', '        uniswapMarket00 = get(configs, 0).uniswapMarket;\n', '        uniswapMarket01 = get(configs, 1).uniswapMarket;\n', '        uniswapMarket02 = get(configs, 2).uniswapMarket;\n', '        uniswapMarket03 = get(configs, 3).uniswapMarket;\n', '        uniswapMarket04 = get(configs, 4).uniswapMarket;\n', '        uniswapMarket05 = get(configs, 5).uniswapMarket;\n', '        uniswapMarket06 = get(configs, 6).uniswapMarket;\n', '        uniswapMarket07 = get(configs, 7).uniswapMarket;\n', '        uniswapMarket08 = get(configs, 8).uniswapMarket;\n', '        uniswapMarket09 = get(configs, 9).uniswapMarket;\n', '        uniswapMarket10 = get(configs, 10).uniswapMarket;\n', '        uniswapMarket11 = get(configs, 11).uniswapMarket;\n', '        uniswapMarket12 = get(configs, 12).uniswapMarket;\n', '        uniswapMarket13 = get(configs, 13).uniswapMarket;\n', '        uniswapMarket14 = get(configs, 14).uniswapMarket;\n', '        uniswapMarket15 = get(configs, 15).uniswapMarket;\n', '        uniswapMarket16 = get(configs, 16).uniswapMarket;\n', '        uniswapMarket17 = get(configs, 17).uniswapMarket;\n', '        uniswapMarket18 = get(configs, 18).uniswapMarket;\n', '        uniswapMarket19 = get(configs, 19).uniswapMarket;\n', '\n', '        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\n', '        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\n', '        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\n', '        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\n', '        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\n', '        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\n', '        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\n', '        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\n', '        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\n', '        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\n', '        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\n', '        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\n', '        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\n', '        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\n', '        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\n', '        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\n', '        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\n', '        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\n', '        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\n', '        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\n', '\n', '        isLP00 = get(configs, 0).isLP;\n', '        isLP01 = get(configs, 1).isLP;\n', '        isLP02 = get(configs, 2).isLP;\n', '        isLP03 = get(configs, 3).isLP;\n', '        isLP04 = get(configs, 4).isLP;\n', '        isLP05 = get(configs, 5).isLP;\n', '        isLP06 = get(configs, 6).isLP;\n', '        isLP07 = get(configs, 7).isLP;\n', '        isLP08 = get(configs, 8).isLP;\n', '        isLP09 = get(configs, 9).isLP;\n', '        isLP10 = get(configs, 10).isLP;\n', '        isLP11 = get(configs, 11).isLP;\n', '        isLP12 = get(configs, 12).isLP;\n', '        isLP13 = get(configs, 13).isLP;\n', '        isLP14 = get(configs, 14).isLP;\n', '        isLP15 = get(configs, 15).isLP;\n', '        isLP16 = get(configs, 16).isLP;\n', '        isLP17 = get(configs, 17).isLP;\n', '        isLP18 = get(configs, 18).isLP;\n', '        isLP19 = get(configs, 19).isLP;\n', '    }\n', '\n', '    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\n', '        if (i < configs.length)\n', '            return configs[i];\n', '        return TokenConfig({\n', '        sToken : address(0),\n', '        underlying : address(0),\n', '        symbolHash : bytes32(0),\n', '        baseUnit : uint256(0),\n', '        priceSource: PriceSource(0),\n', '        fixedPrice: uint256(0),\n', '        uniswapMarket : address(0),\n', '        isUniswapReversed : false,\n', '        isLP : false\n', '        });\n', '    }\n', '\n', '    function getCTokenIndex(address sToken) internal view returns (uint) {\n', '        if (sToken == sToken00) return 0;\n', '        if (sToken == sToken01) return 1;\n', '        if (sToken == sToken02) return 2;\n', '        if (sToken == sToken03) return 3;\n', '        if (sToken == sToken04) return 4;\n', '        if (sToken == sToken05) return 5;\n', '        if (sToken == sToken06) return 6;\n', '        if (sToken == sToken07) return 7;\n', '        if (sToken == sToken08) return 8;\n', '        if (sToken == sToken09) return 9;\n', '        if (sToken == sToken10) return 10;\n', '        if (sToken == sToken11) return 11;\n', '        if (sToken == sToken12) return 12;\n', '        if (sToken == sToken13) return 13;\n', '        if (sToken == sToken14) return 14;\n', '        if (sToken == sToken15) return 15;\n', '        if (sToken == sToken16) return 16;\n', '        if (sToken == sToken17) return 17;\n', '        if (sToken == sToken18) return 18;\n', '        if (sToken == sToken19) return 19;\n', '\n', '        return uint(- 1);\n', '    }\n', '\n', '    function getUnderlyingIndex(address underlying) internal view returns (uint) {\n', '        if (underlying == underlying00) return 0;\n', '        if (underlying == underlying01) return 1;\n', '        if (underlying == underlying02) return 2;\n', '        if (underlying == underlying03) return 3;\n', '        if (underlying == underlying04) return 4;\n', '        if (underlying == underlying05) return 5;\n', '        if (underlying == underlying06) return 6;\n', '        if (underlying == underlying07) return 7;\n', '        if (underlying == underlying08) return 8;\n', '        if (underlying == underlying09) return 9;\n', '        if (underlying == underlying10) return 10;\n', '        if (underlying == underlying11) return 11;\n', '        if (underlying == underlying12) return 12;\n', '        if (underlying == underlying13) return 13;\n', '        if (underlying == underlying14) return 14;\n', '        if (underlying == underlying15) return 15;\n', '        if (underlying == underlying16) return 16;\n', '        if (underlying == underlying17) return 17;\n', '        if (underlying == underlying18) return 18;\n', '        if (underlying == underlying19) return 19;\n', '\n', '        return uint(- 1);\n', '    }\n', '\n', '    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\n', '        if (symbolHash == symbolHash00) return 0;\n', '        if (symbolHash == symbolHash01) return 1;\n', '        if (symbolHash == symbolHash02) return 2;\n', '        if (symbolHash == symbolHash03) return 3;\n', '        if (symbolHash == symbolHash04) return 4;\n', '        if (symbolHash == symbolHash05) return 5;\n', '        if (symbolHash == symbolHash06) return 6;\n', '        if (symbolHash == symbolHash07) return 7;\n', '        if (symbolHash == symbolHash08) return 8;\n', '        if (symbolHash == symbolHash09) return 9;\n', '        if (symbolHash == symbolHash10) return 10;\n', '        if (symbolHash == symbolHash11) return 11;\n', '        if (symbolHash == symbolHash12) return 12;\n', '        if (symbolHash == symbolHash13) return 13;\n', '        if (symbolHash == symbolHash14) return 14;\n', '        if (symbolHash == symbolHash15) return 15;\n', '        if (symbolHash == symbolHash16) return 16;\n', '        if (symbolHash == symbolHash17) return 17;\n', '        if (symbolHash == symbolHash18) return 18;\n', '        if (symbolHash == symbolHash19) return 19;\n', '\n', '        return uint(- 1);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the i-th config, according to the order they were passed in originally\n', '     * @param i The index of the config to get\n', '     * @return The config object\n', '     */\n', '    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\n', '        require(i < numTokens, "token config not found");\n', '\n', '        if (i == 0) return TokenConfig({sToken: sToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00, isLP: isLP00});\n', '        if (i == 1) return TokenConfig({sToken: sToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01, isLP: isLP01});\n', '        if (i == 2) return TokenConfig({sToken: sToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02, isLP: isLP02});\n', '        if (i == 3) return TokenConfig({sToken: sToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03, isLP: isLP03});\n', '        if (i == 4) return TokenConfig({sToken: sToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04, isLP: isLP04});\n', '        if (i == 5) return TokenConfig({sToken: sToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05, isLP: isLP05});\n', '        if (i == 6) return TokenConfig({sToken: sToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06, isLP: isLP06});\n', '        if (i == 7) return TokenConfig({sToken: sToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07, isLP: isLP07});\n', '        if (i == 8) return TokenConfig({sToken: sToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08, isLP: isLP08});\n', '        if (i == 9) return TokenConfig({sToken: sToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09, isLP: isLP09});\n', '\n', '        if (i == 10) return TokenConfig({sToken: sToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10, isLP: isLP10});\n', '        if (i == 11) return TokenConfig({sToken: sToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11, isLP: isLP11});\n', '        if (i == 12) return TokenConfig({sToken: sToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12, isLP: isLP12});\n', '        if (i == 13) return TokenConfig({sToken: sToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13, isLP: isLP13});\n', '        if (i == 14) return TokenConfig({sToken: sToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14, isLP: isLP14});\n', '        if (i == 15) return TokenConfig({sToken: sToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15, isLP: isLP15});\n', '        if (i == 16) return TokenConfig({sToken: sToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16, isLP: isLP16});\n', '        if (i == 17) return TokenConfig({sToken: sToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17, isLP: isLP17});\n', '        if (i == 18) return TokenConfig({sToken: sToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18, isLP: isLP18});\n', '        if (i == 19) return TokenConfig({sToken: sToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19, isLP: isLP19});\n', '    }\n', '\n', '    /**\n', '     * @notice Get the config for symbol\n', '     * @param symbol The symbol of the config to get\n', '     * @return The config object\n', '     */\n', '    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\n', '        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\n', '    }\n', '\n', '    /**\n', '     * @notice Get the config for the symbolHash\n', '     * @param symbolHash The keccack256 of the symbol of the config to get\n', '     * @return The config object\n', '     */\n', '    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\n', '        uint index = getSymbolHashIndex(symbolHash);\n', '        if (index != uint(- 1)) {\n', '            return getTokenConfig(index);\n', '        }\n', '\n', '        revert("token config not found");\n', '    }\n', '\n', '    /**\n', '     * @notice Get the config for the sToken\n', '     * @dev If a config for the sToken is not found, falls back to searching for the underlying.\n', '     * @param sToken The address of the sToken of the config to get\n', '     * @return The config object\n', '     */\n', '    function getTokenConfigByCToken(address sToken) public view returns (TokenConfig memory) {\n', '        uint index = getCTokenIndex(sToken);\n', '        if (index != uint(- 1)) {\n', '            return getTokenConfig(index);\n', '        }\n', '\n', '        return getTokenConfigByUnderlying(CErc20(sToken).underlying());\n', '    }\n', '\n', '    /**\n', '     * @notice Get the config for an underlying asset\n', '     * @param underlying The address of the underlying asset of the config to get\n', '     * @return The config object\n', '     */\n', '    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\n', '        uint index = getUnderlyingIndex(underlying);\n', '        if (index != uint(- 1)) {\n', '            return getTokenConfig(index);\n', '        }\n', '\n', '        revert("token config not found");\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // returns a uq112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << 112) / denominator);\n', '    }\n', '\n', '    // decode a uq112x112 into a uint with 18 decimals of precision\n', '    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\n', '        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\n', '        // instead, get close to:\n', '        //  (x * 1e18) >> 112\n', '        // without risk of overflowing, e.g.:\n', '        //  (x) / 2 ** (112 - lg(1e18))\n', '        return uint(self._x) / 5192296858534827;\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function price0CumulativeLast() external view returns (uint);\n', '\n', '    function price1CumulativeLast() external view returns (uint);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '}\n', '\n', '\n', '    struct Observation {\n', '        uint timestamp;\n', '        uint acc;\n', '    }\n', '\n', 'contract CheesePriceOracle is UniswapConfig {\n', '    using FixedPoint for *;\n', '\n', '    /// @notice The number of wei in 1 ETH\n', '    uint public constant ethBaseUnit = 1e18;\n', '\n', '    /// @notice A common scaling factor to maintain precision\n', '    uint public constant expScale = 1e18;\n', '\n', '    /// @notice The Price Oracle admin\n', '    address public immutable admin;\n', '\n', '    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\n', '    uint public immutable anchorPeriod;\n', '\n', '    /// @notice Official prices by symbol hash\n', '    mapping(bytes32 => uint) public prices;\n', '\n', '    /// @notice The old observation for each symbolHash\n', '    mapping(bytes32 => Observation) public oldObservations;\n', '\n', '    /// @notice The new observation for each symbolHash\n', '    mapping(bytes32 => Observation) public newObservations;\n', '\n', '    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\n', '    event PriceGuarded(string symbol, uint reporter, uint anchor);\n', '\n', '    /// @notice The event emitted when the stored price is updated\n', '    event PriceUpdated(string symbol, uint price);\n', '\n', '    /// @notice The event emitted when anchor price is updated\n', '    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\n', '\n', '    /// @notice The event emitted when the uniswap window changes\n', '    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\n', '\n', '    bytes32 constant ethHash = keccak256(abi.encodePacked("ETH"));\n', '\n', '    constructor(uint anchorPeriod_,\n', '        address[] memory sTokens_, address[] memory underlyings_,\n', '        bytes32[] memory symbolHashs_, uint256[] memory baseUints_,\n', '        PriceSource[] memory priceSources_, uint256[] memory fixedPrices_,\n', '        address[] memory uniswapMarkets_, bool[] memory isUniswapReverseds_,\n', '        bool[] memory isLP_)\n', '    UniswapConfig(sTokens_, underlyings_, symbolHashs_, baseUints_, priceSources_, fixedPrices_, uniswapMarkets_,\n', '        isUniswapReverseds_, isLP_) public {\n', '        admin = msg.sender;\n', '\n', '        anchorPeriod = anchorPeriod_;\n', '\n', '        for (uint i = 0; i < sTokens_.length; i++) {\n', '            TokenConfig memory config = TokenConfig({ sToken : sTokens_[i], underlying : underlyings_[i],\n', '            symbolHash : symbolHashs_[i], baseUnit : baseUints_[i],\n', '            priceSource: priceSources_[i], fixedPrice: fixedPrices_[i],\n', '            uniswapMarket : uniswapMarkets_[i], isUniswapReversed : isUniswapReverseds_[i],\n', '            isLP : isLP_[i]});\n', '            require(config.baseUnit > 0, "baseUnit must be greater than zero");\n', '            address uniswapMarket = config.uniswapMarket;\n', '            if (config.priceSource == PriceSource.REPORTER) {\n', '                require(uniswapMarket != address(0), "reported prices must have an anchor");\n', '                bytes32 symbolHash = config.symbolHash;\n', '                uint cumulativePrice = currentCumulativePrice(config);\n', '                oldObservations[symbolHash].timestamp = block.timestamp;\n', '                newObservations[symbolHash].timestamp = block.timestamp;\n', '                oldObservations[symbolHash].acc = cumulativePrice;\n', '                newObservations[symbolHash].acc = cumulativePrice;\n', '                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\n', '            } else {\n', '                require(uniswapMarket == address(0), "only reported prices utilize an anchor");\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get the official price for a symbol\n', '     * @param symbol The symbol to fetch the price of\n', '     * @return Price denominated in USD, with 6 decimals\n', '     */\n', '    function price(string memory symbol) external view returns (uint) {\n', '        TokenConfig memory config = getTokenConfigBySymbol(symbol);\n', '        return priceInternal(config);\n', '    }\n', '\n', '    function priceInternal(TokenConfig memory config) internal view returns (uint) {\n', '        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash];\n', '        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\n', '        if (config.priceSource == PriceSource.FIXED_ETH) {\n', '            uint usdPerEth = prices[ethHash];\n', '            require(usdPerEth > 0, "ETH price not set, cannot convert to dollars");\n', '            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get the underlying price of a sToken\n', '     * @dev Implements the PriceOracle interface for Compound v2.\n', '     * @param sToken The sToken address for price retrieval\n', '     * @return Price denominated in USD, with 18 decimals, for the given sToken address\n', '     */\n', '    function getUnderlyingPrice(address sToken) external view returns (uint) {\n', '        TokenConfig memory config = getTokenConfigByCToken(sToken);\n', '        // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\n', '        // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\n', '        return mul(1e30, priceInternal(config)) / config.baseUnit;\n', '    }\n', '\n', '    function refresh(string[] calldata symbols) external {\n', '        uint ethPrice = fetchEthPrice();\n', '\n', '        // Try to update the view storage\n', '        for (uint i = 0; i < symbols.length; i++) {\n', '            postPriceInternal(symbols[i], ethPrice);\n', '        }\n', '    }\n', '\n', '    function postPriceInternal(string memory symbol, uint ethPrice) internal {\n', '        TokenConfig memory config = getTokenConfigBySymbol(symbol);\n', '\n', '        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\n', '        uint anchorPrice;\n', '        if (symbolHash == ethHash) {\n', '            anchorPrice = ethPrice;\n', '        } else if (config.isLP) {\n', '            anchorPrice = fetchLPAnchorPrice(symbol, config, ethPrice);\n', '        } else {\n', '            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\n', '        }\n', '        prices[symbolHash] = anchorPrice;\n', '        emit PriceUpdated(symbol, anchorPrice);\n', '    }\n', '\n', '    /**\n', '     * @dev Fetches the current token/eth price accumulator from uniswap.\n', '     */\n', '    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\n', '        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\n', '        if (config.isUniswapReversed) {\n', '            return cumulativePrice1;\n', '        } else {\n', '            return cumulativePrice0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\n', '     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\n', '     */\n', '    function fetchEthPrice() internal returns (uint) {\n', '        return fetchAnchorPrice("ETH", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\n', '    }\n', '\n', '    /**\n', '    * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\n', '    * @param ethPrice a 6 decimal ETH-USDT price in the case of other assets\n', '    */\n', '    function fetchLPAnchorPrice(string memory symbol, TokenConfig memory config, uint ethPrice) internal virtual returns (uint) {\n', '        //only support ETH pair\n', '        ERC20 wETH = ERC20(getTokenConfigBySymbolHash(ethHash).underlying);\n', '        uint wEthBalance = wETH.balanceOf(config.uniswapMarket);\n', '        uint pairBalance = mul(wEthBalance, 2);\n', '        uint totalValue = mul(pairBalance, ethPrice);\n', '\n', '        IUniswapV2Pair pair = IUniswapV2Pair(config.uniswapMarket);\n', '        uint anchorPrice = totalValue / pair.totalSupply();\n', '\n', '        return anchorPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\n', '     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\n', '     */\n', '    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\n', '        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\n', '\n', '        // This should be impossible, but better safe than sorry\n', '        require(block.timestamp > oldTimestamp, "now must come after before");\n', '        uint timeElapsed = block.timestamp - oldTimestamp;\n', '\n', '        // Calculate uniswap time-weighted average price\n', '        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\n', '        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\n', '        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\n', '        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\n', '        uint anchorPrice;\n', '\n', '        // Adjust rawUniswapPrice according to the units of the non-ETH asset\n', '        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\n', '        if (config.isUniswapReversed) {\n', '            // unscaledPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\n', '            anchorPrice = unscaledPriceMantissa / config.baseUnit;\n', '        }else {\n', '            anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\n', '        }\n', '        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\n', '\n', '        return anchorPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev Get time-weighted average prices for a token at the current timestamp.\n', '     *  Update new and old observations of lagging window if period elapsed.\n', '     */\n', '    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\n', '        bytes32 symbolHash = config.symbolHash;\n', '        uint cumulativePrice = currentCumulativePrice(config);\n', '\n', '        Observation memory newObservation = newObservations[symbolHash];\n', '\n', '        // Update new and old observations if elapsed time is greater than or equal to anchor period\n', '        uint timeElapsed = block.timestamp - newObservation.timestamp;\n', '        if (timeElapsed >= anchorPeriod) {\n', '            oldObservations[symbolHash].timestamp = newObservation.timestamp;\n', '            oldObservations[symbolHash].acc = newObservation.acc;\n', '\n', '            newObservations[symbolHash].timestamp = block.timestamp;\n', '            newObservations[symbolHash].acc = cumulativePrice;\n', '            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\n', '        }\n', '        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Recovers the source address which signed a message\n', '     * @dev Comparing to a claimed address would add nothing,\n', '     *  as the caller could simply perform the recover and claim that address.\n', '     * @param message The data that was presumably signed\n', '     * @param signature The fingerprint of the data + private key\n', '     * @return The source address which signed the message, presumably\n', '     */\n', '    function source(bytes memory message, bytes memory signature) public pure returns (address) {\n', '        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\n', '        bytes32 hash = keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", keccak256(message)));\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    /// @dev Overflow proof multiplication\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) return 0;\n', '        uint c = a * b;\n', '        require(c / a == b, "multiplication overflow");\n', '        return c;\n', '    }\n', '}']