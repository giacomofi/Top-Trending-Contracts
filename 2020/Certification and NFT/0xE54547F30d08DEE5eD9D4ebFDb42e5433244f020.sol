['// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '        /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IModule.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title IModule\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with Modules.\n', ' */\n', 'interface IModule {\n', '    /**\n', '     * Removes this module from the SetToken, via call by the SetToken. Any logic can be included\n', '     * in case checks need to be made or state needs to be cleared.\n', '     */\n', '    function removeModule() external;\n', '}\n', '// Dependency file: contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Set Protocol\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up).It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded away from 0). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(int256 a, int256 b) internal pure returns (int256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if ( a > 0 && b > 0 || a < 0 && b < 0) {\n', '            return a.mul(b).sub(1).div(PRECISE_UNIT_INT).add(1);\n', '        } else {\n', '            return a.mul(b).add(1).div(PRECISE_UNIT_INT).sub(1);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(!(a == 0 && b == 0), "Must both not be 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded away from 0).\n', '     */\n', '    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\n', '        require(!(a == 0 && b == 0), "Must both not be 0");\n', '\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if ( a > 0 && b > 0 || a < 0 && b < 0) {\n', '            return a.mul(PRECISE_UNIT_INT).sub(1).div(b).add(1);\n', '        } else {\n', '            return a.mul(PRECISE_UNIT_INT).add(1).div(b).sub(1);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        if ( a > 0 && b > 0 || a < 0 && b < 0) {\n', '            return preciseMul(a, b);\n', '        } else {\n', '            return preciseMulCeil(a, b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        if ( a > 0 && b > 0 || a < 0 && b < 0) {\n', '            return preciseDiv(a, b);\n', '        } else {\n', '            return preciseDivCeil(a, b);\n', '        }\n', '    }\n', '}\n', '// Dependency file: contracts/protocol/lib/PositionLib.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '// pragma experimental "ABIEncoderV2";\n', '\n', '// import { SafeCast } from "@openzeppelin/contracts/utils/SafeCast.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '// import { ISetToken } from "../../interfaces/ISetToken.sol";\n', '// import { PreciseUnitMath } from "../../lib/PreciseUnitMath.sol";\n', '\n', '/**\n', ' * @title PositionLib\n', ' * @author Set Protocol\n', ' *\n', ' * Collection of helper functions for handling and updating SetToken Positions\n', ' */\n', 'library PositionLib {\n', '    using SafeCast for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeCast for int256;\n', '    using SignedSafeMath for int256;\n', '    using PreciseUnitMath for uint256;\n', '\n', '    /* ============ Constants ============ */\n', '\n', '    /*\n', '        The PositionState is the status of the Position, whether it is Default (held on the SetToken)\n', '        or otherwise held on a separate smart contract (whether a module or external source).\n', '\n', '        There are issues with cross-usage of enums, so we are defining position states\n', '        as a uint8.\n', '    */\n', '    uint8 internal constant DEFAULT = 0;\n', '    uint8 internal constant EXTERNAL = 1;\n', '\n', '    /* ============ Structs ============ */\n', '\n', '    /**\n', '     * The base definition of a PositionData struct\n', '     *\n', '     * @param index               Index of position in setToken’s positions array\n', '     * @param position            Struct containing the position’s data\n', '     */\n', '    struct PositionData {\n', '        uint256 index;\n', '        ISetToken.Position position;\n', '    }\n', '\n', '    /* ============ Helper ============ */\n', '\n', '    /**\n', '     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\n', '     * then set the position units. If the new units is 0, remove the position\n', '     *\n', '     * @param _setToken           Address of SetToken being modified\n', '     * @param _component          Address of the component\n', '     * @param _newUnit            Quantity of Position units\n', '     */\n', '    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\n', '        PositionData memory positionSearchResults = findDefaultPosition(_setToken, _component);\n', '        bool positionIsFound = positionSearchResults.index != uint256(-1);\n', '\n', '        if (!positionIsFound) {\n', '            // Create new position with the component and new units\n', '            _setToken.pushPosition(\n', '                createDefaultPosition(_component, _newUnit.toInt256())\n', '            );\n', '        } else if (positionIsFound && _newUnit == 0) {\n', '            removePosition(_setToken, positionSearchResults.index);\n', '        } else {\n', '            // Change the unit\n', '            _setToken.editPositionUnit(\n', '                positionSearchResults.index,\n', '                _newUnit.toInt256()\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', "     * Remove position from specified index in a SetToken's positions array.\n", '     *\n', '     * @param _setToken           Address of SetToken being modified\n', '     * @param _index              Index of position in Positions array to delete\n', '     */\n', '    function removePosition(ISetToken _setToken, uint256 _index) internal {\n', '        ISetToken.Position[] memory positions = _setToken.getPositions();\n', '        require(positions.length > _index, "Index out of range.");\n', '\n', '        if (positions.length.sub(1) != _index) {\n', '            _setToken.editPosition(_index, positions[positions.length.sub(1)]);\n', '        }\n', '        _setToken.popPosition();\n', '    }\n', '\n', '\n', '    /**\n', "     * Find a default position in a SetToken's position array.\n", '     *\n', '     * @param _setToken           Address of SetToken being modified\n', '     * @param _component          Address of component\n', '     * @return                    Position struct matching defined parameters\n', '     */\n', '    function findDefaultPosition(ISetToken _setToken, address _component) internal view returns (PositionData memory) {\n', '        return findPosition(_setToken, _component, address(0), DEFAULT, "");\n', '    }\n', '\n', '    /**\n', '     * Find a Position that matches the four specified fields: component, module, state, and data.\n', '     *\n', '     * @param _setToken         Address of SetToken being modified\n', '     * @param _component        Address of component\n', '     * @param _module           Address of module associated with position\n', '     * @param _state            State of position being sought (in uint8)\n', '     * @param _data             Arbitrary data of position being sought, seeking module needs to know structure of the\n', '     *                          arbitrary data\n', '     * @return                  Position struct matching defined parameters\n', '     */\n', '    function findPosition(\n', '        ISetToken _setToken,\n', '        address _component,\n', '        address _module,\n', '        uint8 _state,\n', '        bytes memory _data\n', '    )\n', '        internal\n', '        view\n', '        returns (PositionData memory)\n', '    {\n', '        ISetToken.Position[] memory positions = _setToken.getPositions();\n', '\n', '        for (uint256 i = 0; i < positions.length; i++) {\n', '            if (\n', '                positions[i].component == _component &&\n', '                positions[i].positionState == _state &&\n', '                positions[i].module == _module &&\n', '                keccak256(positions[i].data) == keccak256(_data)\n', '            ) {\n', '                return PositionData({index: i, position: positions[i]});\n', '            }\n', '        }\n', '\n', '        // If no position found, return empty position and index equal to maxUint value\n', '        return PositionData({index: uint256(-1), position: createDefaultPosition(_component, 0)});\n', '    }\n', '\n', '    /**\n', '     * Generates a Position in DEFAULT Position state of "component" and "unit"\n', '     */\n', '    function createDefaultPosition(\n', '        address _component,\n', '        int256 _unit\n', '    )\n', '        internal\n', '        pure\n', '        returns(ISetToken.Position memory)\n', '    {\n', '        require(_component != address(0), "Position must have non-zero address.");\n', '        require(_unit >= 0, "Default positions must have positive unit values.");\n', '\n', '        return ISetToken.Position({\n', '            component: _component,\n', '            module: address(0),\n', '            unit: _unit,\n', '            positionState: DEFAULT,\n', '            data: ""\n', '        });\n', '    }\n', '\n', '    /**\n', '     * Returns whether the Position is in DEFAULT positionState.\n', '     */\n', '    function isPositionDefault(ISetToken.Position memory _position) internal pure returns(bool) {\n', '        return _position.positionState == DEFAULT;\n', '    }\n', '\n', '    /**\n', '     * Get total notional amount of Default position\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _positionUnit       Quantity of Position units\n', '     *\n', '     * @return                    Total notional amount of units\n', '     */\n', '    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\n', '        return _setTokenSupply.preciseMul(_positionUnit);\n', '    }\n', '\n', '    /**\n', '     * Get position unit from total notional amount\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _totalNotional      Total notional amount of component prior to\n', '     */\n', '    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\n', '        return _totalNotional.preciseDiv(_setTokenSupply);\n', '    }\n', '\n', '    /**\n', '     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _preTotalNotional   Total notional amount of component prior to executing action\n', '     * @param _postTotalNotional  Total notional amount of component after the executing action\n', '     * @param _prePositionUnit    Position unit of SetToken prior to executing action\n', '     */\n', '    function calculateDefaultEditPositionUnit(\n', '        uint256 _setTokenSupply,\n', '        uint256 _preTotalNotional,\n', '        uint256 _postTotalNotional,\n', '        uint256 _prePositionUnit\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\n', '        if (_preTotalNotional >= _postTotalNotional) {\n', '            uint256 unitsToSub = _preTotalNotional.sub(_postTotalNotional).preciseDivCeil(_setTokenSupply);\n', '            return _prePositionUnit.sub(unitsToSub);\n', '        } else {\n', '            // Else subtract post action total notional from pre action total notional and calculate new position units\n', '            uint256 unitsToAdd = _postTotalNotional.sub(_preTotalNotional).preciseDiv(_setTokenSupply);\n', '            return _prePositionUnit.add(unitsToAdd);\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/protocol/lib/ModuleBase.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IController } from "../../interfaces/IController.sol";\n', '// import { IModule } from "../../interfaces/IModule.sol";\n', '// import { ISetToken } from "../../interfaces/ISetToken.sol";\n', '\n', '/**\n', ' * @title ModuleBase\n', ' * @author Set Protocol\n', ' *\n', ' * Abstract class that houses common Module-related state and functions.\n', ' */\n', 'abstract contract ModuleBase is IModule {\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of the controller\n', '    IController public controller;\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier onlySetManager(ISetToken _setToken, address _caller) {\n', '        require(isSetManager(_setToken, _caller), "Must be the SetToken manager");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\n', '        require(isSetValidAndInitialized(_setToken), "Must be a valid and initialized SetToken");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Utilized during module initiazations to check that the module is in pending state\n', '     * and that the SetToken is valid\n', '     */\n', '    modifier onlyValidInitialization(ISetToken _setToken) {\n', '        require(controller.isSet(address(_setToken)), "Must be controller-enabled SetToken");\n', '        require(isSetPendingInitialization(_setToken), "Must be pending initialization");        \n', '        _;\n', '    }\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables and map asset pairs to their oracles\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     */\n', '    constructor(IController _controller) public {\n', '        controller = _controller;\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Returns true if the module is in process of initialization on the SetToken\n', '     */\n', '    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\n', '        return _setToken.isPendingModule(address(this));\n', '    }\n', '\n', '    /**\n', "     * Returns true if the address is the SetToken's manager\n", '     */\n', '    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\n', '        return _setToken.manager() == _toCheck;\n', '    }\n', '\n', '    /**\n', '     * Returns true if SetToken must be enabled on the controller \n', '     * and module is registered on the SetToken\n', '     */\n', '    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\n', '        return controller.isSet(address(_setToken)) &&\n', '            _setToken.isModule(address(this));\n', '    }\n', '}\n', '// Dependency file: contracts/interfaces/ISetToken.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '// pragma experimental "ABIEncoderV2";\n', '\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       The type of position denoted as a uint8\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /* ============ Functions ============ */\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function pushPosition(Position memory _position) external;\n', '    function popPosition() external;\n', '    function editPosition(uint256 _index, Position memory _position) external;\n', '    function batchEditPositions(uint256[] memory _indices, ISetToken.Position[] memory _positions) external;\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '    function editPositionUnit(uint256 _index, int256 _newUnit) external;\n', '    function batchEditPositionUnits(uint256[] memory _indices, int256[] memory _newUnits) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getPositions() external view returns (Position[] memory);\n', '    function positions(uint256 _index) external view returns (ISetToken.Position memory);\n', '    function getPositionsArray()\n', '        external\n', '        view\n', '        returns (address[] memory, address[] memory, int256[] memory, uint8[] memory, bytes[] memory);\n', '\n', '    function isModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '// Dependency file: contracts/protocol/lib/InvokeLib.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import { ISetToken } from "../../interfaces/ISetToken.sol";\n', '\n', '/**\n', ' * @title InvokeLib\n', ' * @author Set Protocol\n', ' *\n', " * A collection of common utility functions for interacting with the SetToken's invoke function\n", ' */\n', 'library InvokeLib {\n', '    using SafeMath for uint256;\n', '\n', '    /* ============ Internal ============ */\n', '\n', '    /**\n', '     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\n', "     * Only works if the caller is a SetToken's module\n", '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to approve\n', "     * @param _spender         The account allowed to spend the SetToken's balance\n", '     * @param _quantity        The quantity of allowance to allow\n', '     */\n', '    function invokeApprove(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _spender,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        bytes memory callData = abi.encodeWithSignature("approve(address,uint256)", _spender, _quantity);\n', '        _setToken.invoke(_token, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to transfer the ERC20 token to a recipient.\n', "     * Only works if the caller is a SetToken's module\n", '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function invokeTransfer(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            bytes memory callData = abi.encodeWithSignature("transfer(address,uint256)", _to, _quantity);\n', '            _setToken.invoke(_token, 0, callData);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to transfer the ERC20 token to a recipient.\n', '     * The quantities must strictly result in the expected quantity of tokens owned by the SetToken\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function strictInvokeTransfer(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            // Retrieve current balance of token for the SetToken\n', '            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\n', '\n', '            InvokeLib.invokeTransfer(_setToken, _token, _to, _quantity);\n', '\n', '            // Get new balance of transferred token for SetToken\n', '            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\n', '\n', '            // Verify only the transfer quantity is subtracted\n', '            require(\n', '                newBalance == existingBalance.sub(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '}\n', '// Dependency file: contracts/interfaces/IManagerIssuanceHook.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "./ISetToken.sol";\n', '\n', 'interface IManagerIssuanceHook {\n', '    function invokePreIssueHook(ISetToken _setToken, uint256 _issueQuantity, address _sender, address _to) external;\n', '}\n', '// Dependency file: contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addSet(address _setToken) external;\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function feeRecipient() external view returns(address);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isSet(address _setToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function transferFrom(address _token, address _from, address _to, uint256 _quantity) external;\n', '}\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/SafeCast.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n", ' * checks.\n', ' *\n', ' * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n', ' * easily result in undesired exploitation or bugs, since developers usually\n', ' * assume that overflows raise errors. `SafeCast` restores this intuition by\n', ' * reverting the transaction when such an operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' *\n', ' * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n', ' * all math on `uint256` and `int256` and then downcasting.\n', ' */\n', 'library SafeCast {\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '// import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeCast } from "@openzeppelin/contracts/utils/SafeCast.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import { IController } from "../../interfaces/IController.sol";\n', '// import { IManagerIssuanceHook } from "../../interfaces/IManagerIssuanceHook.sol";\n', '// import { InvokeLib } from "../lib/InvokeLib.sol";\n', '// import { ISetToken } from "../../interfaces/ISetToken.sol";\n', '// import { ModuleBase } from "../lib/ModuleBase.sol";\n', '// import { PositionLib } from "../lib/PositionLib.sol";\n', '// import { PreciseUnitMath } from "../../lib/PreciseUnitMath.sol";\n', '\n', '/**\n', ' * @title BasicIssuanceModule\n', ' * @author Set Protocol\n', ' *\n', ' * Module that enables issuance and redemption functionality on a SetToken. This is a module that is\n', ' * required to bring the totalSupply of a Set above 0.\n', ' */\n', 'contract BasicIssuanceModule is ModuleBase, ReentrancyGuard {\n', '    using InvokeLib for ISetToken;\n', '    using PositionLib for ISetToken.Position;\n', '    using PreciseUnitMath for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeCast for int256;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event SetTokenIssued(address indexed _setToken, address _issuer, address _to, address _hookContract, uint256 _quantity);\n', '    event SetTokenRedeemed(address indexed _setToken, address _redeemer, uint256 _quantity);\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Mapping of SetToken to Issuance hook configurations\n', '    mapping(ISetToken => IManagerIssuanceHook) public managerIssuanceHook;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state controller state variable\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     */\n', '    constructor(IController _controller) public ModuleBase(_controller) {}\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', "     * Deposits the SetToken's position components into the SetToken and mints the SetToken of the given quantity\n", '     * to the specified _to address. This function only handles Default Positions (positionState = 0).\n', '     *\n', '     * @param _setToken             Instance of the SetToken contract\n', '     * @param _quantity             Quantity of the SetToken to mint\n', '     * @param _to                   Address to mint SetToken to\n', '     */\n', '    function issue(\n', '        ISetToken _setToken,\n', '        uint256 _quantity,\n', '        address _to\n', '    ) \n', '        external\n', '        nonReentrant\n', '        onlyValidAndInitializedSet(_setToken)\n', '    {\n', '        require(_quantity > 0, "Issue quantity must be > 0");\n', '\n', '        _callPreIssueHooks(_setToken, _quantity, msg.sender, _to);\n', '\n', '        (\n', '            address[] memory components,\n', '            uint256[] memory componentQuantities\n', '        ) = getRequiredComponentUnitsForIssue(_setToken, _quantity);\n', '\n', '        // For each position, transfer the required underlying to the SetToken\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            // Transfer the component to the SetToken\n', '            controller.transferFrom(\n', '                components[i],\n', '                msg.sender,\n', '                address(_setToken),\n', '                componentQuantities[i]\n', '            );\n', '        }\n', '\n', '        // Mint the SetToken\n', '        _setToken.mint(_to, _quantity);\n', '\n', '        emit SetTokenIssued(address(_setToken), msg.sender, _to, address(0), _quantity);\n', '    }\n', '\n', '    /**\n', "     * Redeems the SetToken's positions and sends the components of the given\n", '     * quantity to the caller. This function only handles Default Positions (positionState = 0).\n', '     *\n', '     * @param _setToken             Instance of the SetToken contract\n', '     * @param _quantity             Quantity of the SetToken to redeem\n', '     */\n', '    function redeem(\n', '        ISetToken _setToken,\n', '        uint256 _quantity\n', '    )\n', '        external\n', '        nonReentrant\n', '        onlyValidAndInitializedSet(_setToken)\n', '    {\n', '        require(_quantity > 0, "Redeem quantity must be > 0");\n', '\n', "        // Burn the SetToken - ERC20's internal burn already checks that the user has enough balance\n", '        _setToken.burn(msg.sender, _quantity);\n', '\n', '        // For each position, invoke the SetToken to transfer the tokens to the user\n', '        ISetToken.Position[] memory positions = _setToken.getPositions();\n', '        for (uint256 i = 0; i < positions.length; i++) {\n', '            ISetToken.Position memory currentPosition = positions[i];\n', '\n', '            require(currentPosition.isPositionDefault(), "Only default positions are supported");\n', '\n', '            uint256 unit = currentPosition.unit.toUint256();\n', '\n', '            // Use preciseMul to round down to ensure overcollateration when small redeem quantities are provided\n', '            uint256 componentQuantity = _quantity.preciseMul(unit);\n', '\n', '            // Instruct the SetToken to transfer the component to the user\n', '            _setToken.strictInvokeTransfer(\n', '                currentPosition.component,\n', '                msg.sender,\n', '                componentQuantity\n', '            );\n', '        }\n', '\n', '        emit SetTokenRedeemed(address(_setToken), msg.sender, _quantity);\n', '    }\n', '\n', '    /**\n', "     * Initializes this module to the SetToken with issuance-related hooks. Only callable by the SetToken's manager.\n", '     * Hook addresses are optional. Address(0) means that no hook will be called\n', '     *\n', '     * @param _setToken             Instance of the SetToken to issue\n', '     * @param _preIssueHook         Instance of the Manager Contract with the Pre-Issuance Hook function\n', '     */\n', '    function initialize(\n', '        ISetToken _setToken,\n', '        IManagerIssuanceHook _preIssueHook\n', '    )\n', '        external\n', '        onlySetManager(_setToken, msg.sender)\n', '        onlyValidInitialization(_setToken)\n', '    {\n', '        managerIssuanceHook[_setToken] = _preIssueHook;\n', '\n', '        _setToken.initializeModule();\n', '    }\n', '\n', '    /**\n', '     * Reverts as this module should not be removable after added. Users should always\n', '     * have a way to redeem their Sets\n', '     */\n', '    function removeModule() external override {\n', '        revert("The BasicIssuanceModule module cannot be removed");\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Retrieves the addresses and units required to mint a particular quantity of SetToken.\n', '     *\n', '     * @param _setToken             Instance of the SetToken to issue\n', '     * @param _quantity             Quantity of SetToken to issue\n', '     * @return address[]            List of component addresses\n', '     * @return uint256[]            List of component units required to issue the quantity of SetTokens\n', '     */\n', '    function getRequiredComponentUnitsForIssue(\n', '        ISetToken _setToken,\n', '        uint256 _quantity\n', '    )\n', '        public\n', '        view\n', '        onlyValidAndInitializedSet(_setToken)\n', '        returns (address[] memory, uint256[] memory)\n', '    {\n', '        ISetToken.Position[] memory positions = _setToken.getPositions();\n', '\n', '        address[] memory components = new address[](positions.length);\n', '        uint256[] memory notionalUnits = new uint256[](positions.length);\n', '\n', '        for (uint256 i = 0; i < positions.length; i++) {\n', '            ISetToken.Position memory currentPosition = positions[i];\n', '\n', '            require(currentPosition.isPositionDefault(), "Only default positions are supported");\n', '\n', '            components[i] = currentPosition.component;\n', '            notionalUnits[i] = getTotalNotionalIssueQuantity(currentPosition, _quantity);\n', '        }\n', '\n', '        return (components, notionalUnits);\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\n', '     * can contain arbitrary logic including validations, external function calls, etc.\n', '     */\n', '    function _callPreIssueHooks(ISetToken _setToken, uint256 _quantity, address _caller, address _to) internal {\n', '        IManagerIssuanceHook preIssueHook = managerIssuanceHook[_setToken];\n', '        if (address(preIssueHook) != address(0)) {\n', '            preIssueHook.invokePreIssueHook(_setToken, _quantity, _caller, _to);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Calculates the total notional required to deposit for a particular position.\n', '     * Uses preciseMulCeil to ensure overcollateration when small mint quantities are provided\n', '     */\n', '    function getTotalNotionalIssueQuantity(\n', '        ISetToken.Position memory _position,\n', '        uint256 _issueQuantity\n', '    ) \n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return _position.unit.toUint256().preciseMulCeil(_issueQuantity);\n', '    }\n', '}']