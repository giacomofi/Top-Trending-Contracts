['// SPDX-License-Identifier: Apache-2.0\n', '// Copyright 2017 Loopring Technology Limited.\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/// @title Ownable\n', '/// @author Brecht Devos - <brecht@loopring.org>\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable\n', '{\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    constructor()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      new owner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0), "ZERO_ADDRESS");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership()\n', '        public\n', '        onlyOwner\n', '    {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '/// @title WalletRegistry\n', '/// @dev A registry for wallets.\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'interface WalletRegistry\n', '{\n', '    function registerWallet(address wallet) external;\n', '    function isWalletRegistered(address addr) external view returns (bool);\n', '    function numOfWallets() external view returns (uint);\n', '}\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '\n', '\n', '/// @title Claimable\n', '/// @author Brecht Devos - <brecht@loopring.org>\n', '/// @dev Extension for the Ownable contract, where the ownership needs\n', '///      to be claimed. This allows the new owner to accept the transfer.\n', 'contract Claimable is Ownable\n', '{\n', '    address public pendingOwner;\n', '\n', '    /// @dev Modifier throws if called by any account other than the pendingOwner.\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to set the pendingOwner address.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0) && newOwner != owner, "INVALID_ADDRESS");\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /// @dev Allows the pendingOwner address to finalize the transfer.\n', '    function claimOwnership()\n', '        public\n', '        onlyPendingOwner\n', '    {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title WalletRegistryImpl\n', '/// @dev Basic implementation of a WalletRegistry.\n', '///\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'contract WalletRegistryImpl is Claimable, WalletRegistry\n', '{\n', '    mapping (address => bool) public wallets;\n', '    uint public count;\n', '\n', '    address internal factory;\n', '\n', '    event WalletRegistered      (address wallet);\n', '    event WalletFactoryUpdated  (address factory);\n', '\n', '    modifier onlyFactory()\n', '    {\n', '        require(msg.sender == factory, "FACTORY_UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    function setWalletFactory(address _factory)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_factory != address(0), "ZERO_ADDRESS");\n', '        factory = _factory;\n', '        emit WalletFactoryUpdated(factory);\n', '    }\n', '\n', '    function registerWallet(address wallet)\n', '        external\n', '        override\n', '        onlyFactory\n', '    {\n', '        require(wallets[wallet] == false, "ALREADY_REGISTERED");\n', '        wallets[wallet] = true;\n', '        count += 1;\n', '        emit WalletRegistered(wallet);\n', '    }\n', '\n', '    function isWalletRegistered(address addr)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        return wallets[addr];\n', '    }\n', '\n', '    function numOfWallets()\n', '        public\n', '        view\n', '        override\n', '        returns (uint)\n', '    {\n', '        return count;\n', '    }\n', '}']