['pragma solidity >=0.6.0;\n', '\n', 'interface ISDCP {\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IV2Pair {\n', '  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '  function token0() external view returns (address);\n', '  function token1() external view returns (address);\n', '}\n', '\n', 'contract Forge {\n', '    \n', '    struct User {\n', '        address referrer;\n', '        uint partnersCount;\n', '        \n', '        mapping(uint8 => bool) activeX3Levels; \n', '        mapping(uint8 => bool) activeX6Levels;\n', '        \n', '        mapping(uint8 => X3) x3Matrix;\n', '        mapping(uint8 => X6) x6Matrix;\n', '    }\n', '    \n', '    struct X3 {\n', '        address currentReferrer;\n', '        address[] referrals; \n', '        bool blocked;\n', '        uint reinvestCount;\n', '    }\n', '    \n', '    struct X6 {\n', '        address currentReferrer;\n', '        address[] firstLevelReferrals;\n', '        address[] secondLevelReferrals;\n', '        bool blocked;\n', '        uint reinvestCount;\n', '\n', '        address closedPart; \n', '    }\n', '\n', '    uint8 private constant LAST_LEVEL = 12;\n', '    \n', '    uint128 private useIds;\n', '    uint128 private ethAmounts;\n', '\n', '    address private immutable owner;\n', '    address private immutable v2Pair;\n', '    address private immutable sdcpToken;\n', '    address private immutable pool;\n', '    \n', '    mapping(address => User) private users;\n', '    \n', '    mapping(uint8 => uint) internal levelPrice;\n', '    \n', '    event Registration(address indexed user, address indexed referrer);\n', '    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\n', '    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\n', '    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\n', '    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\n', '    \n', '    \n', '    constructor(address ownerAddress, address sdcp , address v2, address p ) public {\n', '      sdcpToken = sdcp;\n', '      v2Pair = v2;\n', '      pool = p;\n', '      require(IV2Pair(v2).token0() == sdcp || IV2Pair(v2).token1() == sdcp, "E/no sdcp");\n', '\n', '        levelPrice[1] = 0.025 ether;\n', '        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\n', '            levelPrice[i] = levelPrice[i-1] * 2;\n', '        }\n', '        \n', '        owner = ownerAddress;\n', '        \n', '        User memory user = User({\n', '            referrer: address(0),    \n', '            partnersCount: uint(0)\n', '        });\n', '        \n', '        users[ownerAddress] = user;\n', '        \n', '        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\n', '            users[ownerAddress].activeX3Levels[i] = true;\n', '            users[ownerAddress].activeX6Levels[i] = true;\n', '        }\n', '    }\n', '    \n', '    function upTeam(uint8 level, address[] calldata team) external {\n', '      require(msg.sender == owner, "E/not");\n', '      require(level >= 2 && level <= LAST_LEVEL, "E/level not");\n', '      uint len = team.length;\n', '      for(uint8 t = 0; t < len; t++) {\n', '          for (uint8 i = 2; i <= level; i++) {\n', '            users[team[t]].activeX3Levels[i] = true;\n', '            users[team[t]].activeX6Levels[i] = true;\n', '            users[team[t]].x3Matrix[i].currentReferrer = users[team[t]].x3Matrix[i-1].currentReferrer;\n', '            users[team[t]].x6Matrix[i].currentReferrer = users[team[t]].x6Matrix[i-1].currentReferrer;\n', '        }\n', '      }\n', '    }\n', '\n', '    function join(address referrerAddress) external payable {\n', '        registration(msg.sender, referrerAddress);\n', '    }\n', '    \n', '    function buyNewLevel(uint8 matrix, uint8 level) external payable {\n', '        require(isUserExists(msg.sender), "user is not exists. Register first.");\n', '        require(matrix == 1 || matrix == 2, "invalid matrix");\n', '        require(msg.value == levelPrice[level], "invalid price");\n', '        require(level > 1 && level <= LAST_LEVEL, "invalid level");\n', '\n', '        ethAmounts += uint128(levelPrice[level]);\n', '        uint fee = calcBurnFee(levelPrice[level]);\n', '        require(burnFee(msg.sender, fee), "fee not enough");\n', '\n', '        if (matrix == 1) {\n', '            require(!users[msg.sender].activeX3Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x3Matrix[level-1].blocked) {\n', '                users[msg.sender].x3Matrix[level-1].blocked = false;\n', '            }\n', '    \n', '            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\n', '            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\n', '            users[msg.sender].activeX3Levels[level] = true;\n', '            updateX3Referrer(msg.sender, freeX3Referrer, level);\n', '            \n', '            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\n', '\n', '        } else {\n', '            require(!users[msg.sender].activeX6Levels[level], "level already activated"); \n', '\n', '            if (users[msg.sender].x6Matrix[level-1].blocked) {\n', '                users[msg.sender].x6Matrix[level-1].blocked = false;\n', '            }\n', '\n', '            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\n', '            \n', '            users[msg.sender].activeX6Levels[level] = true;\n', '            updateX6Referrer(msg.sender, freeX6Referrer, level);\n', '            \n', '            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\n', '        }\n', '    } \n', '\n', '    function calcBurnFee(uint value) private view returns (uint) {\n', '      (uint reserve0, uint reserve1,) = IV2Pair(v2Pair).getReserves();\n', "      require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');\n", '      \n', '      if(IV2Pair(v2Pair).token0() == sdcpToken) {\n', '        return value * reserve0 / reserve1 / 10;\n', '      } else {\n', '        return value * reserve1 / reserve0 / 10;\n', '      }\n', '    }\n', '\n', '    function burnFee(address user, uint brunAmount) private returns (bool) {\n', '      try ISDCP(sdcpToken).transferFrom(user, pool, brunAmount) returns (bool) {\n', '        return true;\n', '      } catch Error(string memory /*reason*/) {\n', '        return false;\n', '      }\n', '    }   \n', '    \n', '    function registration(address userAddress, address referrerAddress) private {\n', '        require(msg.value == 0.05 ether, "registration cost 0.05");\n', '        require(!isUserExists(userAddress), "user exists");\n', '        require(isUserExists(referrerAddress), "referrer not exists");\n', '        \n', '        uint fee = calcBurnFee(0.05 ether);\n', '        require(burnFee(userAddress, fee), "fee not enough");\n', '        \n', '        useIds += 1;\n', '        ethAmounts += 0.05 ether;\n', '\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(userAddress)\n', '        }\n', '        require(size == 0, "cannot be a contract");\n', '        \n', '        User memory user = User({\n', '            referrer: referrerAddress,\n', '            partnersCount: 0\n', '        });\n', '        \n', '        users[userAddress] = user;\n', '        \n', '        users[userAddress].referrer = referrerAddress;\n', '        \n', '        users[userAddress].activeX3Levels[1] = true; \n', '        users[userAddress].activeX6Levels[1] = true;\n', '        \n', '        users[referrerAddress].partnersCount++;\n', '\n', '        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\n', '\n', '        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\n', '        updateX3Referrer(userAddress, freeX3Referrer, 1);\n', '\n', '        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\n', '        \n', '        emit Registration(userAddress, referrerAddress);\n', '    }\n', '\n', '    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\n', '            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\n', '            return sendETHDividends(referrerAddress, userAddress, 1, level);\n', '        }\n', '\n', '        resetX3(userAddress, referrerAddress, level);\n', '    }\n', '\n', '    function resetX3 (address userAddress, address referrerAddress, uint8 level) private {\n', '\n', '      if (referrerAddress != owner) {\n', '\n', '        uint fee = calcBurnFee(levelPrice[level]);\n', '        if(!burnFee(referrerAddress, fee)) { \n', '          address freeX3Referrer = findFreeX3Referrer(referrerAddress, level);\n', '          return updateX3Referrer(referrerAddress, freeX3Referrer, level);\n', '        }\n', '\n', '        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\n', '        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\n', '\n', '        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\n', '            users[referrerAddress].x3Matrix[level].blocked = true;  \n', '        }\n', '\n', '        address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\n', '        if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\n', '            users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\n', '        }\n', '        \n', '        users[referrerAddress].x3Matrix[level].reinvestCount++;\n', '        emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\n', '        updateX3Referrer(referrerAddress, freeReferrerAddress, level);\n', '      } else {\n', '          sendETHDividends(owner, userAddress, 1, level);\n', '          users[owner].x3Matrix[level].reinvestCount++;\n', '          emit Reinvest(owner, address(0), userAddress, 1, level);\n', '      }\n', '    }\n', '\n', '    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        require(users[referrerAddress].activeX6Levels[level], "500. Referrer level is inactive");\n', '        \n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\n', '            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\n', '            \n', '            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\n', '\n', '            if (referrerAddress == owner) {\n', '                return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '            }\n', '            \n', '            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \n', '            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \n', '            \n', '            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\n', '            \n', '            if ((len == 2) && \n', '                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\n', '                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }  else if ((len == 1 || len == 2) &&\n', '                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 3);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 4);\n', '                }\n', '            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }\n', '\n', '            return updateX6ReferrerSecondLevel(userAddress, ref, level);\n', '        }\n', '        \n', '        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\n', '          users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '        }\n', '\n', '        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\n', '            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \n', '                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\n', '                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart)) {\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \n', '                users[referrerAddress].x6Matrix[level].closedPart) {\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else {\n', '                updateX6(userAddress, referrerAddress, level, false);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            }\n', '        }\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        }\n', '        \n', '        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '        } else {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '        }\n', '        \n', '        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '    }\n', '\n', '    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\n', '        if (!x2) {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\n', '        } else {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\n', '        }\n', '    }\n', '    \n', '    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\n', '        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\n', '            return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '        }\n', '        \n', '        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\n', '        \n', '        if (x6.length == 2) {\n', '            if (x6[0] == referrerAddress ||\n', '                x6[1] == referrerAddress) {\n', '                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '            }\n', '        } else if (x6.length == 1) {\n', '          if (x6[0] == referrerAddress) {\n', '          users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '          }\n', '        }\n', '        \n', '        resetX6(userAddress, referrerAddress, level);\n', '    }\n', '\n', '    function resetX6(address userAddress, address referrerAddress, uint8 level) private {\n', '        if (referrerAddress != owner) {\n', '          uint fee = calcBurnFee(levelPrice[level]);\n', '          if(!burnFee(referrerAddress, fee)) { \n', '            address freeX6Referrer = findFreeX6Referrer(referrerAddress, level);\n', '            return updateX6Referrer(referrerAddress, freeX6Referrer, level);\n', '          }\n', '\n', '          users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\n', '          users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\n', '          users[referrerAddress].x6Matrix[level].closedPart = address(0);\n', '\n', '          if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\n', '              users[referrerAddress].x6Matrix[level].blocked = true;\n', '          }\n', '\n', '          users[referrerAddress].x6Matrix[level].reinvestCount++;\n', '\n', '          address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\n', '\n', '          emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\n', '          updateX6Referrer(referrerAddress, freeReferrerAddress, level);\n', '        } else {\n', '            emit Reinvest(owner, address(0), userAddress, 2, level);\n', '            sendETHDividends(owner, userAddress, 2, level);\n', '        }\n', '    }\n', '    \n', '    function findFreeX3Referrer(address userAddress, uint8 level) internal view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX3Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            }\n', '            \n', '            userAddress = users[userAddress].referrer;\n', '        }\n', '    }\n', '    \n', '    function findFreeX6Referrer(address userAddress, uint8 level) internal view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX6Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            }\n', '            \n', '            userAddress = users[userAddress].referrer;\n', '        }\n', '    }\n', '\n', '    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory,  uint, bool, bool ) {\n', '        return (users[userAddress].x3Matrix[level].currentReferrer,\n', '                users[userAddress].x3Matrix[level].referrals,\n', '                users[userAddress].x3Matrix[level].reinvestCount,\n', '                users[userAddress].x3Matrix[level].blocked,\n', '                users[userAddress].activeX3Levels[level]);\n', '    }\n', '\n', '    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, uint,  bool, bool) {\n', '        return (users[userAddress].x6Matrix[level].currentReferrer,\n', '                users[userAddress].x6Matrix[level].firstLevelReferrals,\n', '                users[userAddress].x6Matrix[level].secondLevelReferrals,\n', '                users[userAddress].x6Matrix[level].reinvestCount,\n', '                users[userAddress].x6Matrix[level].blocked,\n', '                users[userAddress].activeX6Levels[level]);\n', '    }\n', '    \n', '    function usersStatus(address userAddress) external view returns(address, uint, uint128, uint128) {\n', '      return (users[userAddress].referrer, users[userAddress].partnersCount, useIds, ethAmounts);\n', '    }\n', '\n', '    function isUserExists(address user) private view returns (bool) {\n', '        return (user == owner || users[user].referrer != address(0));\n', '    }\n', '    \n', '    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address) {\n', '        address receiver = userAddress;\n', '        if (matrix == 1) {\n', '            while (true) {\n', '                if (users[receiver].x3Matrix[level].blocked) {\n', '                    receiver = users[receiver].x3Matrix[level].currentReferrer;\n', '                } else {\n', '                  return receiver;\n', '                }\n', '            }\n', '        } else {\n', '            while (true) {\n', '                if (users[receiver].x6Matrix[level].blocked) {\n', '                    receiver = users[receiver].x6Matrix[level].currentReferrer;\n', '                } else {\n', '                    return receiver;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\n', '        address receiver = findEthReceiver(userAddress, _from, matrix, level);\n', '        \n', '        if (receiver != address(0)) {\n', '          if(!payable(receiver).send(levelPrice[level])) {\n', '            return payable(receiver).transfer(address(this).balance);\n', '          }\n', '        } else {\n', '          return payable(owner).transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '}']