['pragma solidity 0.5.16;\n', '\n', '\n', 'interface ICERC20 {\n', '\n', '    /**\n', '     * @notice The mint function transfers an asset into the protocol, which begins accumulating\n', '     * interest based on the current Supply Rate for the asset. The user receives a quantity of\n', '     * cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\n', '     * @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\n', '     * @return 0 on success, otherwise an Error codes\n', '     */\n', '    function mint(uint mintAmount) external returns (uint);\n', '\n', '    /**\n', '     * @notice The redeem underlying function converts cTokens into a specified quantity of the underlying\n', '     * asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of\n', '     * underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less\n', "     * than the user's Account Liquidity and the market's available liquidity.\n", '     * @param redeemAmount The amount of underlying to be redeemed.\n', '     * @return 0 on success, otherwise an Error codes\n', '     */\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '\n', '    /**\n', "     * @notice The user's underlying balance, representing their assets in the protocol, is equal to\n", "     * the user's cToken balance multiplied by the Exchange Rate.\n", '     * @param owner The account to get the underlying balance of.\n', '     * @return The amount of underlying currently owned by the account.\n', '     */\n', '    function balanceOfUnderlying(address owner) external returns (uint);\n', '\n', '    /**\n', '     * @notice Calculates the exchange rate from the underlying to the CToken\n', '     * @dev This function does not accrue interest before calculating the exchange rate\n', '     * @return Calculated exchange rate scaled by 1e18\n', '     */\n', '    function exchangeRateStored() external view returns (uint);\n', '\n', '    /**\n', '     * @notice Get the token balance of the `owner`\n', '     * @param owner The address of the account to query\n', '     * @return The number of tokens owned by `owner`\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '}\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'library CommonHelpers {\n', '\n', '    /**\n', '     * @notice Fetch the `decimals()` from an ERC20 token\n', '     * @dev Grabs the `decimals()` from a contract and fails if\n', '     *      the decimal value does not live within a certain range\n', '     * @param _token Address of the ERC20 token\n', '     * @return uint256 Decimals of the ERC20 token\n', '     */\n', '    function getDecimals(address _token)\n', '    internal\n', '    view\n', '    returns (uint256) {\n', '        uint256 decimals = IBasicToken(_token).decimals();\n', '        require(decimals >= 4 && decimals <= 18, "Token must have sufficient decimal places");\n', '\n', '        return decimals;\n', '    }\n', '\n', '}\n', '\n', 'interface IPlatformIntegration {\n', '\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(address _bAsset, uint256 _amount, bool isTokenFeeCharged)\n', '        external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(address _receiver, address _bAsset, uint256 _amount, bool _isTokenFeeCharged) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'contract InitializableModuleKeys {\n', '\n', '    // Governance                             // Phases\n', '    bytes32 internal KEY_GOVERNANCE;          // 2.x\n', '    bytes32 internal KEY_STAKING;             // 1.2\n', '    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\n', '\n', '    // mStable\n', '    bytes32 internal KEY_ORACLE_HUB;          // 1.2\n', '    bytes32 internal KEY_MANAGER;             // 1.2\n', '    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\n', '    bytes32 internal KEY_META_TOKEN;          // 1.1\n', '    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\n', '\n', '    /**\n', '     * @dev Initialize function for upgradable proxy contracts. This function should be called\n', '     *      via Proxy to initialize constants in the Proxy contract.\n', '     */\n', '    function _initialize() internal {\n', '        // keccak256() values are evaluated only once at the time of this function call.\n', '        // Hence, no need to assign hard-coded values to these variables.\n', '        KEY_GOVERNANCE = keccak256("Governance");\n', '        KEY_STAKING = keccak256("Staking");\n', '        KEY_PROXY_ADMIN = keccak256("ProxyAdmin");\n', '\n', '        KEY_ORACLE_HUB = keccak256("OracleHub");\n', '        KEY_MANAGER = keccak256("Manager");\n', '        KEY_RECOLLATERALISER = keccak256("Recollateraliser");\n', '        KEY_META_TOKEN = keccak256("MetaToken");\n', '        KEY_SAVINGS_MANAGER = keccak256("SavingsManager");\n', '    }\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '    function cancelProposedModule(bytes32 _key) external;\n', '    function acceptProposedModule(bytes32 _key) external;\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '    function cancelLockModule(bytes32 _key) external;\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'contract InitializableModule is InitializableModuleKeys {\n', '\n', '    INexus public nexus;\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(\n', '            msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    function _initialize(address _nexus) internal {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '        InitializableModuleKeys._initialize();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'contract InitializableGovernableWhitelist is InitializableModule {\n', '\n', '    event Whitelisted(address indexed _address);\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the whitelisted address.\n', '     */\n', '    modifier onlyWhitelisted() {\n', '        require(whitelist[msg.sender], "Not a whitelisted address");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     * @param _whitelisted Array of whitelisted addresses.\n', '     */\n', '    function _initialize(\n', '        address _nexus,\n', '        address[] memory _whitelisted\n', '    )\n', '        internal\n', '    {\n', '        InitializableModule._initialize(_nexus);\n', '\n', '        require(_whitelisted.length > 0, "Empty whitelist array");\n', '\n', '        for(uint256 i = 0; i < _whitelisted.length; i++) {\n', '            _addWhitelist(_whitelisted[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a new whitelist address\n', '     * @param _address Address to add in whitelist\n', '     */\n', '    function _addWhitelist(address _address) internal {\n', '        require(_address != address(0), "Address is zero");\n', '        require(! whitelist[_address], "Already whitelisted");\n', '\n', '        whitelist[_address] = true;\n', '\n', '        emit Whitelisted(_address);\n', '    }\n', '\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * @dev bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x.mul(FULL_SCALE);\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x.mul(ratio);\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil.div(RATIO_SCALE);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        uint256 y = x.mul(RATIO_SCALE);\n', '        // return 1e22 / 1e12 = 1e10\n', '        return y.div(ratio);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '\n', '    using StableMath for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferTokens(\n', '        address _sender,\n', '        address _recipient,\n', '        address _basset,\n', '        bool _erc20TransferFeeCharged,\n', '        uint256 _qty\n', '    )\n', '        internal\n', '        returns (uint256 receivedQty)\n', '    {\n', '        receivedQty = _qty;\n', '        if(_erc20TransferFeeCharged) {\n', '            uint256 balBefore = IERC20(_basset).balanceOf(_recipient);\n', '            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\n', '            uint256 balAfter = IERC20(_basset).balanceOf(_recipient);\n', '            receivedQty = StableMath.min(_qty, balAfter.sub(balBefore));\n', '        } else {\n', '            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\n', '        }\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender)\n', '        internal\n', '    {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, uint256(-1));\n', '    }\n', '}\n', '\n', 'contract InitializableReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    function _initialize() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'contract InitializableAbstractIntegration is\n', '    Initializable,\n', '    IPlatformIntegration,\n', '    InitializableGovernableWhitelist,\n', '    InitializableReentrancyGuard\n', '{\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    event PTokenAdded(address indexed _bAsset, address _pToken);\n', '\n', '    event Deposit(address indexed _bAsset, address _pToken, uint256 _amount);\n', '    event Withdrawal(address indexed _bAsset, address _pToken, uint256 _amount);\n', '\n', '    // Core address for the given platform */\n', '    address public platformAddress;\n', '\n', '    // bAsset => pToken (Platform Specific Token Address)\n', '    mapping(address => address) public bAssetToPToken;\n', '    // Full list of all bAssets supported here\n', '    address[] internal bAssetsMapped;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contract.\n', '     *      This function should be called via Proxy just after contract deployment.\n', '     * @param _nexus            Address of the Nexus\n', '     * @param _whitelisted      Whitelisted addresses for vault access\n', '     * @param _platformAddress  Generic platform address\n', '     * @param _bAssets          Addresses of initial supported bAssets\n', '     * @param _pTokens          Platform Token corresponding addresses\n', '     */\n', '    function initialize(\n', '        address _nexus,\n', '        address[] calldata _whitelisted,\n', '        address _platformAddress,\n', '        address[] calldata _bAssets,\n', '        address[] calldata _pTokens\n', '    )\n', '        external\n', '        initializer\n', '    {\n', '        InitializableReentrancyGuard._initialize();\n', '        InitializableGovernableWhitelist._initialize(_nexus, _whitelisted);\n', '        InitializableAbstractIntegration._initialize(_platformAddress, _bAssets, _pTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal initialize function, to set up initial internal state\n', '     * @param _platformAddress  Generic platform address\n', '     * @param _bAssets          Addresses of initial supported bAssets\n', '     * @param _pTokens          Platform Token corresponding addresses\n', '     */\n', '    function _initialize(\n', '        address _platformAddress,\n', '        address[] memory _bAssets,\n', '        address[] memory _pTokens\n', '    )\n', '        internal\n', '    {\n', '        platformAddress = _platformAddress;\n', '\n', '        uint256 bAssetCount = _bAssets.length;\n', '        require(bAssetCount == _pTokens.length, "Invalid input arrays");\n', '        for(uint256 i = 0; i < bAssetCount; i++){\n', '            _setPTokenAddress(_bAssets[i], _pTokens[i]);\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                    CONFIG\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * This method can only be called by the system Governor\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function setPTokenAddress(address _bAsset, address _pToken)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        _setPTokenAddress(_bAsset, _pToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * Add to internal mappings and execute the platform specific,\n', '     * abstract method `_abstractSetPToken`\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function _setPTokenAddress(address _bAsset, address _pToken)\n', '        internal\n', '    {\n', '        require(bAssetToPToken[_bAsset] == address(0), "pToken already set");\n', '        require(_bAsset != address(0) && _pToken != address(0), "Invalid addresses");\n', '\n', '        bAssetToPToken[_bAsset] = _pToken;\n', '        bAssetsMapped.push(_bAsset);\n', '\n', '        emit PTokenAdded(_bAsset, _pToken);\n', '\n', '        _abstractSetPToken(_bAsset, _pToken);\n', '    }\n', '\n', '    function _abstractSetPToken(address _bAsset, address _pToken) internal;\n', '\n', '    function reApproveAllTokens() external;\n', '\n', '    /***************************************\n', '                    ABSTRACT\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Deposit a quantity of bAsset into the platform\n', '     * @param _bAsset              Address for the bAsset\n', '     * @param _amount              Units of bAsset to deposit\n', '     * @param _isTokenFeeCharged   Flag that signals if an xfer fee is charged on bAsset\n', '     * @return quantityDeposited   Quantity of bAsset that entered the platform\n', '     */\n', '    function deposit(address _bAsset, uint256 _amount, bool _isTokenFeeCharged)\n', '        external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the platform\n', '     * @param _receiver          Address to which the bAsset should be sent\n', '     * @param _bAsset            Address of the bAsset\n', '     * @param _amount            Units of bAsset to withdraw\n', '     * @param _isTokenFeeCharged Flag that signals if an xfer fee is charged on bAsset\n', '     */\n', '    function withdraw(address _receiver, address _bAsset, uint256 _amount, bool _isTokenFeeCharged) external;\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     * This includes any interest that was generated since depositing\n', '     * @param _bAsset     Address of the bAsset\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Simple helper func to get the min of two values\n', '     */\n', '    function _min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title   CompoundIntegration\n', ' * @author  Stability Labs Pty. Ltd.\n', ' * @notice  A simple connection to deposit and withdraw bAssets from Compound\n', ' * @dev     VERSION: 1.2\n', ' *          DATE:    2020-10-19\n', ' */\n', 'contract CompoundIntegration is InitializableAbstractIntegration {\n', '\n', '    event SkippedWithdrawal(address bAsset, uint256 amount);\n', '    event RewardTokenApproved(address rewardToken, address account);\n', '\n', '    /***************************************\n', '                    ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Approves Liquidator to spend reward tokens\n', '     */\n', '    function approveRewardToken()\n', '        external\n', '        onlyGovernor\n', '    {\n', '        address liquidator = nexus.getModule(keccak256("Liquidator"));\n', '        require(liquidator != address(0), "Liquidator address cannot be zero");\n', '\n', '        // Official checksummed COMP token address\n', '        // https://ethplorer.io/address/0xc00e94cb662c3520282e6f5717214004a7f26888\n', '        address compToken = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\n', '\n', '        MassetHelpers.safeInfiniteApprove(compToken, liquidator);\n', '\n', '        emit RewardTokenApproved(address(compToken), liquidator);\n', '    }\n', '\n', '    /***************************************\n', '                    CORE\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Deposit a quantity of bAsset into the platform. Credited cTokens\n', '     *      remain here in the vault. Can only be called by whitelisted addresses\n', '     *      (mAsset and corresponding BasketManager)\n', '     * @param _bAsset              Address for the bAsset\n', '     * @param _amount              Units of bAsset to deposit\n', '     * @param _isTokenFeeCharged   Flag that signals if an xfer fee is charged on bAsset\n', '     * @return quantityDeposited   Quantity of bAsset that entered the platform\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _isTokenFeeCharged\n', '    )\n', '        external\n', '        onlyWhitelisted\n', '        nonReentrant\n', '        returns (uint256 quantityDeposited)\n', '    {\n', '        require(_amount > 0, "Must deposit something");\n', '\n', '        // Get the Target token\n', '        ICERC20 cToken = _getCTokenFor(_bAsset);\n', '\n', '        // We should have been sent this amount, if not, the deposit will fail\n', '        quantityDeposited = _amount;\n', '\n', '        if(_isTokenFeeCharged) {\n', '            // If we charge a fee, account for it\n', '            uint256 prevBal = _checkBalance(cToken);\n', '            require(cToken.mint(_amount) == 0, "cToken mint failed");\n', '            uint256 newBal = _checkBalance(cToken);\n', '            quantityDeposited = _min(quantityDeposited, newBal.sub(prevBal));\n', '        } else {\n', '            // Else just execute the mint\n', '            require(cToken.mint(_amount) == 0, "cToken mint failed");\n', '        }\n', '\n', '        emit Deposit(_bAsset, address(cToken), quantityDeposited);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from Compound. Redemption\n', '     *      should fail if we have insufficient cToken balance.\n', '     * @param _receiver     Address to which the withdrawn bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to withdraw\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _isTokenFeeCharged\n', '    )\n', '        external\n', '        onlyWhitelisted\n', '        nonReentrant\n', '    {\n', '        require(_amount > 0, "Must withdraw something");\n', '        require(_receiver != address(0), "Must specify recipient");\n', '\n', '        // Get the Target token\n', '        ICERC20 cToken = _getCTokenFor(_bAsset);\n', '\n', '        // If redeeming 0 cTokens, just skip, else COMP will revert\n', '        // Reason for skipping: to ensure that redeemMasset is always able to execute\n', '        uint256 cTokensToRedeem = _convertUnderlyingToCToken(cToken, _amount);\n', '        if(cTokensToRedeem == 0) {\n', '            emit SkippedWithdrawal(_bAsset, _amount);\n', '            return;\n', '        }\n', '\n', '        uint256 quantityWithdrawn = _amount;\n', '\n', '        if(_isTokenFeeCharged) {\n', '            IERC20 b = IERC20(_bAsset);\n', '            uint256 prevBal = b.balanceOf(address(this));\n', '            require(cToken.redeemUnderlying(_amount) == 0, "redeem failed");\n', '            uint256 newBal = b.balanceOf(address(this));\n', '            quantityWithdrawn = _min(quantityWithdrawn, newBal.sub(prevBal));\n', '        } else {\n', '            // Redeem Underlying bAsset amount\n', '            require(cToken.redeemUnderlying(_amount) == 0, "redeem failed");\n', '        }\n', '\n', '        // Send redeemed bAsset to the receiver\n', '        IERC20(_bAsset).safeTransfer(_receiver, quantityWithdrawn);\n', '\n', '        emit Withdrawal(_bAsset, address(cToken), quantityWithdrawn);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     *      This includes any interest that was generated since depositing\n', '     *      Compound exchange rate between the cToken and bAsset gradually increases,\n', '     *      causing the cToken to be worth more corresponding bAsset.\n', '     * @param _bAsset     Address of the bAsset\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function checkBalance(address _bAsset)\n', '        external\n', '        returns (uint256 balance)\n', '    {\n', '        // balance is always with token cToken decimals\n', '        ICERC20 cToken = _getCTokenFor(_bAsset);\n', '        balance = _checkBalance(cToken);\n', '    }\n', '\n', '    /***************************************\n', '                    APPROVALS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Re-approve the spending of all bAssets by their corresponding cToken,\n', '     *      if for some reason is it necessary. Only callable through Governance.\n', '     */\n', '    function reApproveAllTokens()\n', '        external\n', '        onlyGovernor\n', '    {\n', '        uint256 bAssetCount = bAssetsMapped.length;\n', '        for(uint i = 0; i < bAssetCount; i++){\n', '            address bAsset = bAssetsMapped[i];\n', '            address cToken = bAssetToPToken[bAsset];\n', '            MassetHelpers.safeInfiniteApprove(bAsset, cToken);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal method to respond to the addition of new bAsset / cTokens\n', '     *      We need to approve the cToken and give it permission to spend the bAsset\n', '     * @param _bAsset Address of the bAsset to approve\n', '     * @param _cToken This cToken has the approval approval\n', '     */\n', '    function _abstractSetPToken(address _bAsset, address _cToken)\n', '        internal\n', '    {\n', '        // approve the pool to spend the bAsset\n', '        MassetHelpers.safeInfiniteApprove(_bAsset, _cToken);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Get the cToken wrapped in the ICERC20 interface for this bAsset.\n', "     *      Fails if the pToken doesn't exist in our mappings.\n", '     * @param _bAsset   Address of the bAsset\n', '     * @return          Corresponding cToken to this bAsset\n', '     */\n', '    function _getCTokenFor(address _bAsset)\n', '        internal\n', '        view\n', '        returns (ICERC20)\n', '    {\n', '        address cToken = bAssetToPToken[_bAsset];\n', '        require(cToken != address(0), "cToken does not exist");\n', '        return ICERC20(cToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     *          underlying = (cTokenAmt * exchangeRate) / 1e18\n', '     * @param _cToken     cToken for which to check balance\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function _checkBalance(ICERC20 _cToken)\n', '        internal\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        uint256 cTokenBalance = _cToken.balanceOf(address(this));\n', '        uint256 exchangeRate = _cToken.exchangeRateStored();\n', '        // e.g. 50e8*205316390724364402565641705 / 1e18 = 1.0265..e18\n', '        balance = cTokenBalance.mul(exchangeRate).div(1e18);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an underlying amount into cToken amount\n', '     *          cTokenAmt = (underlying * 1e18) / exchangeRate\n', '     * @param _cToken     cToken for which to change\n', '     * @param _underlying Amount of underlying to convert\n', '     * @return amount     Equivalent amount of cTokens\n', '     */\n', '    function _convertUnderlyingToCToken(ICERC20 _cToken, uint256 _underlying)\n', '        internal\n', '        view\n', '        returns (uint256 amount)\n', '    {\n', '        uint256 exchangeRate = _cToken.exchangeRateStored();\n', '        // e.g. 1e18*1e18 / 205316390724364402565641705 = 50e8\n', '        // e.g. 1e8*1e18 / 205316390724364402565641705 = 0.45 or 0\n', '        amount = _underlying.mul(1e18).div(exchangeRate);\n', '    }\n', '}']