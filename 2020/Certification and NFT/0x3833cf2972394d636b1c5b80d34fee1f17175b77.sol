['// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IKULAPDex.sol\n', '\n', '// pragma solidity 0.5.17;\n', '\n', '// import "../helper/ERC20Interface.sol";\n', '// import "./IKULAPTradingProxy.sol";\n', '\n', 'interface IKULAPDex {\n', '  // /**\n', '  // * @dev when new trade occure (and success), this event will be boardcast.\n', '  // * @param _src Source token\n', '  // * @param _srcAmount amount of source tokens\n', '  // * @param _dest   Destination token\n', '  // * @return _destAmount: amount of actual destination tokens\n', '  // */\n', '  // event Trade(ERC20 _src, uint256 _srcAmount, ERC20 _dest, uint256 _destAmount);\n', '\n', '  /**\n', '  * @notice use token address 0xeee...eee for ether\n', '  * @dev makes a trade between src and dest token by tradingProxyIndex\n', '  * Ex1: trade 0.5 ETH -> EOS\n', '  * 0, "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "500000000000000000", "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "21003850000000000000"\n', '  * Ex2: trade 30 EOS -> ETH\n', '  * 0, "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "30000000000000000000", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "740825000000000000"\n', '  * @param tradingProxyIndex index of trading proxy\n', '  * @param src Source token\n', '  * @param srcAmount amount of source tokens\n', '  * @param dest Destination token\n', '  * @param minDestAmount minimun destination amount\n', '  * @param partnerIndex index of partnership for revenue sharing\n', '  * @return amount of actual destination tokens\n', '  */\n', '  function trade(\n', '      uint256   tradingProxyIndex,\n', '      ERC20     src,\n', '      uint256   srcAmount,\n', '      ERC20     dest,\n', '      uint256   minDestAmount,\n', '      uint256   partnerIndex\n', '    )\n', '    external\n', '    payable\n', '    returns(uint256);\n', '  \n', '  /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade with multiple routes ex. UNI -> ETH -> DAI\n', '    * Ex: trade 50 UNI -> ETH -> DAI\n', '    * Step1: trade 50 UNI -> ETH\n', '    * Step2: trade xx ETH -> DAI\n', '    * srcAmount: 50 * 1e18\n', '    * routes: [0, 1]\n', '    * srcTokens: [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE]\n', '    * destTokens: [0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x6B175474E89094C44Da98b954EedeAC495271d0F]\n', '    * @param srcAmount amount of source tokens\n', '    * @param minDestAmount minimun destination amount\n', '    * @param routes Trading paths\n', '    * @param srcTokens all source of token pairs\n', '    * @param destTokens all destination of token pairs\n', '    * @param partnerIndex index of partnership for revenue sharing\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function tradeRoutes(\n', '      uint256   srcAmount,\n', '      uint256   minDestAmount,\n', '      uint256[] calldata routes,\n', '      ERC20[]   calldata srcTokens,\n', '      ERC20[]   calldata destTokens,\n', '      uint256   partnerIndex\n', '    )\n', '    external\n', '    payable\n', '    returns(uint256);\n', '  \n', '  /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\n', '    * @param routes Trading paths\n', '    * @param src Source token\n', '    * @param srcAmounts amount of source tokens\n', '    * @param dest Destination token\n', '    * @param minDestAmount minimun destination amount\n', '    * @param partnerIndex index of partnership for revenue sharing\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function splitTrades(\n', '      uint256[] calldata routes,\n', '      ERC20     src,\n', '      uint256[] calldata srcAmounts,\n', '      ERC20     dest,\n', '      uint256   minDestAmount,\n', '      uint256   partnerIndex\n', '    )\n', '    external\n', '    payable\n', '    returns(uint256);\n', '  \n', '  /**\n', '  * @notice use token address 0xeee...eee for ether\n', '  * @dev get amount of destination token for given source token amount\n', '  * @param tradingProxyIndex index of trading proxy\n', '  * @param src Source token\n', '  * @param dest Destination token\n', '  * @param srcAmount amount of source tokens\n', '  * @return amount of actual destination tokens\n', '  */\n', '  function getDestinationReturnAmount(\n', '    uint256 tradingProxyIndex,\n', '    ERC20   src,\n', '    ERC20   dest,\n', '    uint256 srcAmount,\n', '    uint256 partnerIndex\n', '  )\n', '    external\n', '    view\n', '    returns(uint256);\n', '  \n', '  function getDestinationReturnAmountForSplitTrades(\n', '    uint256[] calldata routes,\n', '    ERC20     src,\n', '    uint256[] calldata srcAmounts,\n', '    ERC20     dest,\n', '    uint256   partnerIndex\n', '  )\n', '    external\n', '    view\n', '    returns(uint256);\n', '  \n', '  function getDestinationReturnAmountForTradeRoutes(\n', '    ERC20     src,\n', '    uint256   srcAmount,\n', '    ERC20     dest,\n', '    address[] calldata _tradingPaths,\n', '    uint256   partnerIndex\n', '  )\n', '    external\n', '    view\n', '    returns(uint256);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IKULAPTradingProxy.sol\n', '\n', '// pragma solidity 0.5.17;\n', '\n', '// import "../helper/ERC20Interface.sol";\n', '\n', '/**\n', ' * @title KULAP Trading Proxy\n', ' * @dev The KULAP trading proxy interface has an standard functions and event\n', ' * for other smart contract to implement to join KULAP Dex as Market Maker.\n', ' */\n', 'interface IKULAPTradingProxy {\n', '    /**\n', '    * @dev when new trade occure (and success), this event will be boardcast.\n', '    * @param _src Source token\n', '    * @param _srcAmount amount of source tokens\n', '    * @param _dest   Destination token\n', '    * @return _destAmount: amount of actual destination tokens\n', '    */\n', '    event Trade(ERC20 _src, uint256 _srcAmount, ERC20 _dest, uint256 _destAmount);\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade between src and dest token\n', '    * @param _src Source token\n', '    * @param _dest   Destination token\n', '    * @param _srcAmount amount of source tokens\n', '    * @return _destAmount: amount of actual destination tokens\n', '    */\n', '    function trade(\n', '        ERC20 _src,\n', '        ERC20 _dest,\n', '        uint256 _srcAmount\n', '    )\n', '        external\n', '        payable\n', '        returns(uint256 _destAmount);\n', '\n', '    /**\n', '    * @dev provide destinationm token amount for given source amount\n', '    * @param _src Source token\n', '    * @param _dest Destination token\n', '    * @param _srcAmount Amount of source tokens\n', '    * @return _destAmount: amount of expected destination tokens\n', '    */\n', '    function getDestinationReturnAmount(\n', '        ERC20 _src,\n', '        ERC20 _dest,\n', '        uint256 _srcAmount\n', '    )\n', '        external\n', '        view\n', '        returns(uint256 _destAmount);\n', '\n', '    /**\n', '    * @dev provide source token amount for given destination amount\n', '    * @param _src Source token\n', '    * @param _dest Destination token\n', '    * @param _destAmount Amount of destination tokens\n', '    * @return _srcAmount: amount of expected source tokens\n', '    */\n', '    // function getSourceReturnAmount(\n', '    //     ERC20 _src,\n', '    //     ERC20 _dest,\n', '    //     uint256 _destAmount\n', '    // )\n', '    //     external\n', '    //     view\n', '    //     returns(uint256 _srcAmount);\n', '}\n', '// Dependency file: contracts/helper/ERC20Interface.sol\n', '\n', '// pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev The ERC20 interface has an standard functions and event\n', ' * for erc20 compatible token on Ethereum blockchain.\n', ' */\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', "    function transfer(address _to, uint _value) external; // Some ERC20 doesn't have return\n", "    function transferFrom(address _from, address _to, uint _value) external; // Some ERC20 doesn't have return\n", "    function approve(address _spender, uint _value) external; // Some ERC20 doesn't have return\n", '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '// Dependency file: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '// import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'pragma solidity 0.5.17;\n', '\n', "// import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n", '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/ownership/Ownable.sol";\n', '// import "./helper/ERC20Interface.sol";\n', '// import "./interfaces/IKULAPTradingProxy.sol";\n', '// import "./interfaces/IKULAPDex.sol";\n', '\n', 'contract ProxyManagement is Ownable {\n', '    /**\n', '    * @dev Struct of trading proxy\n', '    * @param name Name of trading proxy.\n', '    * @param enable The flag of trading proxy to check is trading proxy enable.\n', '    * @param proxy The address of trading proxy.\n', '    */\n', '    struct Proxy {\n', '      string name;\n', '      bool enable;\n', '      IKULAPTradingProxy proxy;\n', '    }\n', '\n', '    event AddedTradingProxy(\n', '        address indexed addedBy,\n', '        string name,\n', '        IKULAPTradingProxy indexed proxyAddress,\n', '        uint256 indexed index\n', '    );\n', '\n', '    event EnabledTradingProxy(\n', '        address indexed enabledBy,\n', '        string name,\n', '        IKULAPTradingProxy proxyAddress,\n', '        uint256 indexed index\n', '    );\n', '\n', '    event DisabledTradingProxy(\n', '        address indexed disabledBy,\n', '        string name,\n', '        IKULAPTradingProxy indexed proxyAddress,\n', '        uint256 indexed index\n', '    );\n', '\n', '    Proxy[] public tradingProxies; // list of trading proxies\n', '\n', '    modifier onlyTradingProxyEnabled(uint _index) {\n', '        require(tradingProxies[_index].enable == true, "This trading proxy is disabled");\n', '        _;\n', '    }\n', '\n', '    modifier onlyTradingProxyDisabled(uint _index) {\n', '        require(tradingProxies[_index].enable == false, "This trading proxy is enabled");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function for adding new trading proxy\n', '    * @param _name Name of trading proxy.\n', '    * @param _proxyAddress The address of trading proxy.\n', '    * @return length of trading proxies.\n', '    */\n', '    function addTradingProxy(\n', '        string memory _name,\n', '        IKULAPTradingProxy _proxyAddress\n', '    )\n', '      public\n', '      onlyOwner\n', '    {\n', '        tradingProxies.push(Proxy({\n', '            name: _name,\n', '            enable: true,\n', '            proxy: _proxyAddress\n', '        }));\n', '        emit AddedTradingProxy(msg.sender, _name, _proxyAddress, tradingProxies.length - 1);\n', '    }\n', '\n', '    /**\n', '    * @dev Function for disable trading proxy by index\n', '    * @param _index The uint256 of trading proxy index.\n', '    * @return length of trading proxies.\n', '    */\n', '    function disableTradingProxy(\n', '        uint256 _index\n', '    )\n', '        public\n', '        onlyOwner\n', '        onlyTradingProxyEnabled(_index)\n', '    {\n', '        tradingProxies[_index].enable = false;\n', '        emit DisabledTradingProxy(msg.sender, tradingProxies[_index].name, tradingProxies[_index].proxy, _index);\n', '    }\n', '\n', '    /**\n', '    * @dev Function for enale trading proxy by index\n', '    * @param _index The uint256 of trading proxy index.\n', '    * @return length of trading proxies.\n', '    */\n', '    function enableTradingProxy(\n', '        uint256 _index\n', '    )\n', '        public\n', '        onlyOwner\n', '        onlyTradingProxyDisabled(_index)\n', '    {\n', '        tradingProxies[_index].enable = true;\n', '        emit EnabledTradingProxy(msg.sender, tradingProxies[_index].name, tradingProxies[_index].proxy, _index);\n', '    }\n', '\n', '    /**\n', '    * @dev Function for get amount of trading proxy\n', '    * @return Amount of trading proxies.\n', '    */\n', '    function getProxyCount() public view returns (uint256) {\n', '        return tradingProxies.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Function for get enable status of trading proxy\n', '    * @param _index The uint256 of trading proxy index.\n', '    * @return enable status of trading proxy.\n', '    */\n', '    function isTradingProxyEnable(uint256 _index) public view returns (bool) {\n', '        return tradingProxies[_index].enable;\n', '    }\n', '}\n', '\n', '/*\n', '* Fee collection by partner reference\n', '*/\n', 'contract Partnership is ProxyManagement {\n', '    using SafeMath for uint256;\n', '\n', '    struct Partner {\n', '      address wallet;       // To receive fee on the KULAP Dex network\n', '      uint16 fee;           // fee in bps\n', '      bytes16 name;         // Partner reference\n', '    }\n', '\n', '    mapping(uint256 => Partner) public partners;\n', '\n', '    constructor() public {\n', '        Partner memory partner = Partner(msg.sender, 0, "KULAP");\n', '        partners[0] = partner;\n', '    }\n', '\n', '    function updatePartner(uint256 index, address wallet, uint16 fee, bytes16 name)\n', '        external\n', '        onlyOwner\n', '    {\n', '        Partner memory partner = Partner(wallet, fee, name);\n', '        partners[index] = partner;\n', '    }\n', '\n', '    function amountWithFee(uint256 amount, uint256 partnerIndex)\n', '        internal\n', '        view\n', '        returns(uint256 remainingAmount)\n', '    {\n', '        Partner storage partner = partners[partnerIndex];\n', '        if (partner.fee == 0) {\n', '            return amount;\n', '        }\n', '        uint256 fee = amount.mul(partner.fee).div(10000);\n', '        return amount.sub(fee);\n', '    }\n', '\n', '    function collectFee(uint256 partnerIndex, uint256 amount, ERC20 token)\n', '        internal\n', '        returns(uint256 remainingAmount)\n', '    {\n', '        Partner storage partner = partners[partnerIndex];\n', '        if (partner.fee == 0) {\n', '            return amount;\n', '        }\n', '        uint256 fee = amount.mul(partner.fee).div(10000);\n', '        require(fee < amount, "fee exceeds return amount!");\n', '        token.transfer(partner.wallet, fee);\n', '        return amount.sub(fee);\n', '    }\n', '}\n', '\n', 'contract KULAPDex is IKULAPDex, Partnership, ReentrancyGuard {\n', '    event Trade(\n', '        address indexed srcAsset, // Source\n', '        uint256         srcAmount,\n', '        address indexed destAsset, // Destination\n', '        uint256         destAmount,\n', '        address indexed trader, // User\n', '        uint256         fee // System fee\n', '    );\n', '\n', '    using SafeMath for uint256;\n', '    ERC20 public etherERC20 = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade between Ether to token by tradingProxyIndex\n', '    * @param tradingProxyIndex index of trading proxy\n', '    * @param srcAmount amount of source tokens\n', '    * @param dest Destination token\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function _tradeEtherToToken(\n', '        uint256 tradingProxyIndex,\n', '        uint256 srcAmount,\n', '        ERC20 dest\n', '    )\n', '        private\n', '        returns(uint256)\n', '    {\n', '        // Load trading proxy\n', '        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '        // Trade to proxy\n', '        uint256 destAmount = tradingProxy.trade.value(srcAmount)(\n', '            etherERC20,\n', '            dest,\n', '            srcAmount\n', '        );\n', '        return destAmount;\n', '    }\n', '\n', '    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\n', '    function () external payable {}\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade between token to Ether by tradingProxyIndex\n', '    * @param tradingProxyIndex index of trading proxy\n', '    * @param src Source token\n', '    * @param srcAmount amount of source tokens\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function _tradeTokenToEther(\n', '        uint256 tradingProxyIndex,\n', '        ERC20 src,\n', '        uint256 srcAmount\n', '    )\n', '        private\n', '        returns(uint256)\n', '    {\n', '        // Load trading proxy\n', '        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '        // Approve to TradingProxy\n', '        src.approve(address(tradingProxy), srcAmount);\n', '        // Trande to proxy\n', '        uint256 destAmount = tradingProxy.trade(\n', '            src,\n', '            etherERC20,\n', '            srcAmount\n', '        );\n', '        return destAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev makes a trade between token to token by tradingProxyIndex\n', '    * @param tradingProxyIndex index of trading proxy\n', '    * @param src Source token\n', '    * @param srcAmount amount of source tokens\n', '    * @param dest Destination token\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function _tradeTokenToToken(\n', '        uint256 tradingProxyIndex,\n', '        ERC20 src,\n', '        uint256 srcAmount,\n', '        ERC20 dest\n', '    )\n', '        private\n', '        returns(uint256)\n', '    {\n', '        // Load trading proxy\n', '        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '        // Approve to TradingProxy\n', '        src.approve(address(tradingProxy), srcAmount);\n', '        // Trande to proxy\n', '        uint256 destAmount = tradingProxy.trade(\n', '            src,\n', '            dest,\n', '            srcAmount\n', '        );\n', '        return destAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade between src and dest token by tradingProxyIndex\n', '    * Ex1: trade 0.5 ETH -> DAI\n', '    * 0, "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "500000000000000000", "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "21003850000000000000"\n', '    * Ex2: trade 30 DAI -> ETH\n', '    * 0, "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "30000000000000000000", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "740825000000000000"\n', '    * @param _tradingProxyIndex index of trading proxy\n', '    * @param _src Source token\n', '    * @param _srcAmount amount of source tokens\n', '    * @param _dest Destination token\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function _trade(\n', '        uint256             _tradingProxyIndex,\n', '        ERC20               _src,\n', '        uint256             _srcAmount,\n', '        ERC20               _dest\n', '    )\n', '        private\n', '        onlyTradingProxyEnabled(_tradingProxyIndex)\n', '        returns(uint256)\n', '    {\n', '        // Destination amount\n', '        uint256 destAmount;\n', '        // Record src/dest asset for later consistency check.\n', '        uint256 srcAmountBefore;\n', '        uint256 destAmountBefore;\n', '\n', '        if (etherERC20 == _src) { // Source\n', '            srcAmountBefore = address(this).balance;\n', '        } else {\n', '            srcAmountBefore = _src.balanceOf(address(this));\n', '        }\n', '        if (etherERC20 == _dest) { // Dest\n', '            destAmountBefore = address(this).balance;\n', '        } else {\n', '            destAmountBefore = _dest.balanceOf(address(this));\n', '        }\n', '        if (etherERC20 == _src) { // Trade ETH -> Token\n', '            destAmount = _tradeEtherToToken(_tradingProxyIndex, _srcAmount, _dest);\n', '        } else if (etherERC20 == _dest) { // Trade Token -> ETH\n', '            destAmount = _tradeTokenToEther(_tradingProxyIndex, _src, _srcAmount);\n', '        } else { // Trade Token -> Token\n', '            destAmount = _tradeTokenToToken(_tradingProxyIndex, _src, _srcAmount, _dest);\n', '        }\n', '\n', '        // Recheck if src/dest amount correct\n', '        if (etherERC20 == _src) { // Source\n', '            require(address(this).balance == srcAmountBefore.sub(_srcAmount), "source amount mismatch after trade");\n', '        } else {\n', '            require(_src.balanceOf(address(this)) == srcAmountBefore.sub(_srcAmount), "source amount mismatch after trade");\n', '        }\n', '        if (etherERC20 == _dest) { // Dest\n', '            require(address(this).balance == destAmountBefore.add(destAmount), "destination amount mismatch after trade");\n', '        } else {\n', '            require(_dest.balanceOf(address(this)) == destAmountBefore.add(destAmount), "destination amount mismatch after trade");\n', '        }\n', '        return destAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade between src and dest token by tradingProxyIndex\n', '    * Ex1: trade 0.5 ETH -> DAI\n', '    * 0, "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "500000000000000000", "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "21003850000000000000"\n', '    * Ex2: trade 30 DAI -> ETH\n', '    * 0, "0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817", "30000000000000000000", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "740825000000000000"\n', '    * @param tradingProxyIndex index of trading proxy\n', '    * @param src Source token\n', '    * @param srcAmount amount of source tokens\n', '    * @param dest Destination token\n', '    * @param minDestAmount minimun destination amount\n', '    * @param partnerIndex index of partnership for revenue sharing\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function trade(\n', '        uint256   tradingProxyIndex,\n', '        ERC20     src,\n', '        uint256   srcAmount,\n', '        ERC20     dest,\n', '        uint256   minDestAmount,\n', '        uint256   partnerIndex\n', '    )\n', '        external\n', '        payable\n', '        nonReentrant\n', '        returns(uint256)\n', '    {\n', '        uint256 destAmount;\n', "        // Prepare source's asset\n", '        if (etherERC20 != src) {\n', '            src.transferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\n', '        }\n', '        // Trade with proxy\n', '        destAmount = _trade(tradingProxyIndex, src, srcAmount, dest);\n', "        // Throw exception if destination amount doesn't meet user requirement.\n", '        require(destAmount >= minDestAmount, "destination amount is too low.");\n', '        if (etherERC20 == dest) {\n', '            (bool success, ) = msg.sender.call.value(destAmount)(""); // Send back ether to sender\n', '            require(success, "Transfer ether back to caller failed.");\n', '        } else { // Send back token to sender\n', "            // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)); here\n", '            dest.transfer(msg.sender, destAmount);\n', '        }\n', '\n', '        // Collect fee\n', '        uint256 remainingAmount = collectFee(partnerIndex, destAmount, dest);\n', '\n', '        emit Trade(address(src), srcAmount, address(dest), remainingAmount, msg.sender, 0);\n', '        return remainingAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade with multiple routes ex. UNI -> ETH -> DAI\n', '    * Ex: trade 50 UNI -> ETH -> DAI\n', '    * Step1: trade 50 UNI -> ETH\n', '    * Step2: trade xx ETH -> DAI\n', '    * srcAmount: 50 * 1e18\n', '    * routes: [0, 1]\n', '    * srcTokens: [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE]\n', '    * destTokens: [0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x6B175474E89094C44Da98b954EedeAC495271d0F]\n', '    * @param srcAmount amount of source tokens\n', '    * @param minDestAmount minimun destination amount\n', '    * @param routes Trading paths\n', '    * @param srcTokens all source of token pairs\n', '    * @param destTokens all destination of token pairs\n', '    * @param partnerIndex index of partnership for revenue sharing\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function tradeRoutes(\n', '        uint256   srcAmount,\n', '        uint256   minDestAmount,\n', '        uint256[] calldata routes,\n', '        ERC20[]   calldata srcTokens,\n', '        ERC20[]   calldata destTokens,\n', '        uint256   partnerIndex\n', '    )\n', '        external\n', '        payable\n', '        nonReentrant\n', '        returns(uint256)\n', '    {\n', '        require(routes.length > 0, "routes can not be empty");\n', '        require(routes.length == srcTokens.length && routes.length == destTokens.length, "Parameter value lengths mismatch");\n', '\n', '        uint256 remainingAmount;\n', '        {\n', '          uint256 destAmount;\n', '          if (etherERC20 != srcTokens[0]) {\n', '              srcTokens[0].transferFrom(msg.sender, address(this), srcAmount); // Transfer token to This address\n', '          }\n', '          uint256 pathSrcAmount = srcAmount;\n', '          for (uint i = 0; i < routes.length; i++) {\n', '              uint256 tradingProxyIndex = routes[i];\n', '              ERC20 pathSrc = srcTokens[i];\n', '              ERC20 pathDest = destTokens[i];\n', '              destAmount = _trade(tradingProxyIndex, pathSrc, pathSrcAmount, pathDest);\n', '              pathSrcAmount = destAmount;\n', '          }\n', "          // Throw exception if destination amount doesn't meet user requirement.\n", '          require(destAmount >= minDestAmount, "destination amount is too low.");\n', '          if (etherERC20 == destTokens[destTokens.length - 1]) { // Trade Any -> ETH\n', '              // Send back ether to sender\n', '              (bool success,) = msg.sender.call.value(destAmount)("");\n', '              require(success, "Transfer ether back to caller failed.");\n', '          } else { // Trade Any -> Token\n', '              // Send back token to sender\n', "              // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)) here\n", '              destTokens[destTokens.length - 1].transfer(msg.sender, destAmount);\n', '          }\n', '\n', '          // Collect fee\n', '          remainingAmount = collectFee(partnerIndex, destAmount, destTokens[destTokens.length - 1]);\n', '        }\n', '\n', '        emit Trade(address(srcTokens[0]), srcAmount, address(destTokens[destTokens.length - 1]), remainingAmount, msg.sender, 0);\n', '        return remainingAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\n', '    * @param routes Trading paths\n', '    * @param src Source token\n', '    * @param srcAmounts amount of source tokens\n', '    * @param dest Destination token\n', '    * @param minDestAmount minimun destination amount\n', '    * @param partnerIndex index of partnership for revenue sharing\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function splitTrades(\n', '        uint256[] calldata routes,\n', '        ERC20     src,\n', '        uint256[] calldata srcAmounts,\n', '        ERC20     dest,\n', '        uint256   minDestAmount,\n', '        uint256   partnerIndex\n', '    )\n', '        external\n', '        payable\n', '        nonReentrant\n', '        returns(uint256)\n', '    {\n', '        require(routes.length > 0, "routes can not be empty");\n', '        require(routes.length == srcAmounts.length, "routes and srcAmounts lengths mismatch");\n', '        uint256 srcAmount = srcAmounts[0];\n', '        uint256 destAmount = 0;\n', "        // Prepare source's asset\n", '        if (etherERC20 != src) {\n', '            src.transferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\n', '        }\n', '        // Trade with proxies\n', '        for (uint i = 0; i < routes.length; i++) {\n', '            uint256 tradingProxyIndex = routes[i];\n', '            uint256 amount = srcAmounts[i];\n', '            destAmount = destAmount.add(_trade(tradingProxyIndex, src, amount, dest));\n', '        }\n', "        // Throw exception if destination amount doesn't meet user requirement.\n", '        require(destAmount >= minDestAmount, "destination amount is too low.");\n', '        if (etherERC20 == dest) {\n', '            (bool success, ) = msg.sender.call.value(destAmount)(""); // Send back ether to sender\n', '            require(success, "Transfer ether back to caller failed.");\n', '        } else { // Send back token to sender\n', "            // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)); here\n", '            dest.transfer(msg.sender, destAmount);\n', '        }\n', '\n', '        // Collect fee\n', '        uint256 remainingAmount = collectFee(partnerIndex, destAmount, dest);\n', '\n', '        emit Trade(address(src), srcAmount, address(dest), remainingAmount, msg.sender, 0);\n', '        return remainingAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice use token address 0xeee...eee for ether\n', '    * @dev get amount of destination token for given source token amount\n', '    * @param tradingProxyIndex index of trading proxy\n', '    * @param src Source token\n', '    * @param dest Destination token\n', '    * @param srcAmount amount of source tokens\n', '    * @return amount of actual destination tokens\n', '    */\n', '    function getDestinationReturnAmount(\n', '        uint256 tradingProxyIndex,\n', '        ERC20   src,\n', '        ERC20   dest,\n', '        uint256 srcAmount,\n', '        uint256 partnerIndex\n', '    )\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // Load trading proxy\n', '        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '        uint256 destAmount = tradingProxy.getDestinationReturnAmount(src, dest, srcAmount);\n', '        return amountWithFee(destAmount, partnerIndex);\n', '    }\n', '\n', '    function getDestinationReturnAmountForSplitTrades(\n', '        uint256[] calldata routes,\n', '        ERC20     src,\n', '        uint256[] calldata srcAmounts,\n', '        ERC20     dest,\n', '        uint256   partnerIndex\n', '    )\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(routes.length > 0, "routes can not be empty");\n', '        require(routes.length == srcAmounts.length, "routes and srcAmounts lengths mismatch");\n', '        uint256 destAmount = 0;\n', '        \n', '        for (uint i = 0; i < routes.length; i++) {\n', '            uint256 tradingProxyIndex = routes[i];\n', '            uint256 amount = srcAmounts[i];\n', '            // Load trading proxy\n', '            IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '            destAmount = destAmount.add(tradingProxy.getDestinationReturnAmount(src, dest, amount));\n', '        }\n', '        return amountWithFee(destAmount, partnerIndex);\n', '    }\n', '\n', '    function getDestinationReturnAmountForTradeRoutes(\n', '        ERC20     src,\n', '        uint256   srcAmount,\n', '        ERC20     dest,\n', '        address[] calldata _tradingPaths,\n', '        uint256   partnerIndex\n', '    )\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        src;\n', '        dest;\n', '        uint256 destAmount;\n', '        uint256 pathSrcAmount = srcAmount;\n', '        for (uint i = 0; i < _tradingPaths.length; i += 3) {\n', '            uint256 tradingProxyIndex = uint256(_tradingPaths[i]);\n', '            ERC20 pathSrc = ERC20(_tradingPaths[i+1]);\n', '            ERC20 pathDest = ERC20(_tradingPaths[i+2]);\n', '\n', '            // Load trading proxy\n', '            IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\n', '            destAmount = tradingProxy.getDestinationReturnAmount(pathSrc, pathDest, pathSrcAmount);\n', '            pathSrcAmount = destAmount;\n', '        }\n', '        return amountWithFee(destAmount, partnerIndex);\n', '    }\n', '\n', '    // In case of expected and unexpected event that have some token amounts remain in this contract, owner can call to collect them.\n', '    function collectRemainingToken(\n', '        ERC20 token,\n', '        uint256 amount\n', '    )\n', '      public\n', '      onlyOwner\n', '    {\n', '        token.transfer(msg.sender, amount);\n', '    }\n', '\n', '    // In case of expected and unexpected event that have some ether amounts remain in this contract, owner can call to collect them.\n', '    function collectRemainingEther(\n', '        uint256 amount\n', '    )\n', '      public\n', '      onlyOwner\n', '    {\n', '        (bool success, ) = msg.sender.call.value(amount)(""); // Send back ether to sender\n', '        require(success, "Transfer ether back to caller failed.");\n', '    }\n', '}']