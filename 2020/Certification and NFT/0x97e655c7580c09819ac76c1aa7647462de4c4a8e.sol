['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface TokenInterface {\n', '    function symbol() external view returns (string memory);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', 'contract Liquidity is Ownable {\n', '    address public DEX;\n', '    string[] public allLiquidities;\n', '    mapping(string => address) public contractAddress;\n', '\n', '    event DEXUpdated(address oldDEX, address newDEX);\n', '    event TokenUpdated(string symbol, address newContract);\n', '    event PaymentReceived(address from, uint256 amount);\n', '    event LiquidityWithdraw(\n', '        string symbol,\n', '        address indexed to,\n', '        uint256 amount,\n', '        uint256 timestamp\n', '    );\n', '    event LiquidityTransfer(\n', '        string symbol,\n', '        address indexed to,\n', '        uint256 amount,\n', '        uint256 timestamp\n', '    );\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the DEX.\n', '     */\n', '    modifier onlyDEX() {\n', '        require(DEX == _msgSender(), "Liquidity: caller is not DEX");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address owner,\n', '        address gsu,\n', '        address usdt\n', '    ) public {\n', '        require(owner != address(0x0), "[Liquidity], owner is zero address");\n', '        require(gsu != address(0x0), "[Liquidity], gsu is zero address");\n', '        require(usdt != address(0x0), "[Liquidity], usdt is zero address");\n', '\n', '        allLiquidities.push("ETH");\n', '\n', '        newLiquidity(gsu);\n', '        newLiquidity(usdt);\n', '        transferOwnership(owner);\n', '    }\n', '\n', '    fallback() external payable {\n', '        emit PaymentReceived(_msgSender(), msg.value);\n', '    }\n', '\n', '    receive() external payable {\n', '        emit PaymentReceived(_msgSender(), msg.value);\n', '    }\n', '\n', '    function withdraw(string calldata symbol, uint256 amount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(amount > 0, "[Liquidity] amount is zero");\n', '\n', '        if (isERC20Token(symbol))\n', '            TokenInterface(contractAddress[symbol]).transfer(owner(), amount);\n', '        else address(uint160(owner())).transfer(amount);\n', '\n', '        emit LiquidityWithdraw(symbol, owner(), amount, block.timestamp);\n', '    }\n', '\n', '    function transfer(\n', '        string calldata symbol,\n', '        address payable recipient,\n', '        uint256 amount\n', '    ) external onlyDEX returns (bool) {\n', '        if (isERC20Token(symbol))\n', '            TokenInterface(contractAddress[symbol]).transfer(recipient, amount);\n', '        else recipient.transfer(amount);\n', '\n', '        emit LiquidityTransfer(symbol, recipient, amount, block.timestamp);\n', '\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(string memory symbol) public view returns (uint256) {\n', '        if (isERC20Token(symbol))\n', '            return\n', '                TokenInterface(contractAddress[symbol]).balanceOf(\n', '                    address(this)\n', '                );\n', '        else return address(this).balance;\n', '    }\n', '\n', '    function isERC20Token(string memory symbol) public view returns (bool) {\n', '        return contractAddress[symbol] != address(0x0);\n', '    }\n', '\n', '    function updateDEX(address newDEX) external onlyOwner returns (bool) {\n', '        emit DEXUpdated(DEX, newDEX);\n', '        DEX = newDEX;\n', '        return true;\n', '    }\n', '\n', '    function newLiquidity(address _contract) private onlyOwner returns (bool) {\n', '        string memory symbol = TokenInterface(_contract).symbol();\n', '        allLiquidities.push(symbol);\n', '        contractAddress[symbol] = _contract;\n', '        return true;\n', '    }\n', '\n', '    function setTokenContract(string calldata symbol, address newContract)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(isERC20Token(symbol));\n', '        contractAddress[symbol] = newContract;\n', '        emit TokenUpdated(symbol, newContract);\n', '        return true;\n', '    }\n', '\n', '    function totalLiquidities() external view returns (uint256) {\n', '        return allLiquidities.length;\n', '    }\n', '\n', '    function destroy() external onlyOwner {\n', '        // index 0 is ethereum\n', '        for (uint8 a = 1; a < allLiquidities.length; a++) {\n', '            string memory currency = allLiquidities[a];\n', '            TokenInterface(contractAddress[currency]).transfer(\n', '                owner(),\n', '                balanceOf(currency)\n', '            );\n', '        }\n', '\n', '        selfdestruct(payable(owner()));\n', '    }\n', '}']