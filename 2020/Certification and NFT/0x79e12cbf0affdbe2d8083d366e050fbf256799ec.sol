['pragma solidity ^0.6.7;\n', '\n', 'interface IERC1155 {\n', '    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n', '    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n', '}\n', '\n', 'contract Claimer {\n', '\n', '    IERC1155 public tokens;\n', '    address  public deployer;\n', '    uint256  public end;\n', '\n', '    uint256[] public batches = [1,2,3,4,5];\n', '\n', '    constructor() public {\n', '        tokens = IERC1155(0xb9341CCa0A5F04b804F7b3a996A74726923359a8);\n', '        deployer = msg.sender;\n', '        end = block.timestamp + 2 weeks;\n', '    }\n', '\n', '    function claim(address payable _user) public {\n', '        address[] memory user = new address[](5);\n', '        user[0] = _user;\n', '        user[1] = _user;\n', '        user[2] = _user;\n', '        user[3] = _user;\n', '        user[4] = _user;\n', '        uint256[] memory balances = tokens.balanceOfBatch(user, batches);\n', '        uint256 sum = 0;\n', '        for (uint i = 0; i < balances.length; i++){\n', '            sum += balances[i];\n', '        }\n', '        tokens.safeBatchTransferFrom(_user, address(this), batches, balances, new bytes(0x0));\n', '        _user.transfer(sum * 1 ether);\n', '    }\n', '\n', '    function returnEth(address payable _who) external {\n', '        require(msg.sender == deployer, "!deployer");\n', '        require(block.timestamp > end, "not yet");\n', '        _who.transfer(address(this).balance);\n', '    }\n', '    \n', '    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external pure returns(bytes4) {\n', '        return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"));\n', '    }\n', '\n', '}']