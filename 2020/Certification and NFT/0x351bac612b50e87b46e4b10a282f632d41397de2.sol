['// SPDX-License-Identifier: (Apache-2.0 AND MIT AND BSD-4-Clause)\n', '//------------------------------------------------------------------------------\n', '//\n', '//   Copyright 2020 Fetch.AI Limited\n', '//\n', '//   Licensed under the Apache License, Version 2.0 (the "License");\n', '//   you may not use this file except in compliance with the License.\n', '//   You may obtain a copy of the License at\n', '//\n', '//       http://www.apache.org/licenses/LICENSE-2.0\n', '//\n', '//   Unless required by applicable law or agreed to in writing, software\n', '//   distributed under the License is distributed on an "AS IS" BASIS,\n', '//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '//   See the License for the specific language governing permissions and\n', '//   limitations under the License.\n', '//\n', '//------------------------------------------------------------------------------\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '//------------------------------------------------------------------------------\n', '//\n', '//   Copyright 2020 Fetch.AI Limited\n', '//\n', '//   Licensed under the Apache License, Version 2.0 (the "License");\n', '//   you may not use this file except in compliance with the License.\n', '//   You may obtain a copy of the License at\n', '//\n', '//       http://www.apache.org/licenses/LICENSE-2.0\n', '//\n', '//   Unless required by applicable law or agreed to in writing, software\n', '//   distributed under the License is distributed on an "AS IS" BASIS,\n', '//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '//   See the License for the specific language governing permissions and\n', '//   limitations under the License.\n', '//\n', '//------------------------------------------------------------------------------\n', '\n', '\n', '/*\n', ' * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library ABDKMath64x64 {\n', '  /*\n', '   * Minimum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /*\n', '   * Maximum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromInt (int256 x) internal pure returns (int128) {\n', '    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 64-bit integer number\n', '   * rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64-bit integer number\n', '   */\n', '  function toInt (int128 x) internal pure returns (int64) {\n', '    return int64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n', '   * number rounding down.  Revert on underflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return unsigned 64-bit integer number\n', '   */\n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n', '   * number rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 128.128-bin fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function from128x128 (int256 x) internal pure returns (int128) {\n', '    int256 result = x >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n', '   * number.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 128.128 fixed point number\n', '   */\n', '  function to128x128 (int128 x) internal pure returns (int256) {\n', '    return int256 (x) << 64;\n', '  }\n', '\n', '  /**\n', '   * Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x - y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sub (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) - y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function mul (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) * y >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n', '   * number and y is signed 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 256-bit integer number\n', '   */\n', '  function muli (int128 x, int256 y) internal pure returns (int256) {\n', '    if (x == MIN_64x64) {\n', '      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n', '        y <= 0x1000000000000000000000000000000000000000000000000);\n', '      return -y << 63;\n', '    } else {\n', '      bool negativeResult = false;\n', '      if (x < 0) {\n', '        x = -x;\n', '        negativeResult = true;\n', '      }\n', '      if (y < 0) {\n', '        y = -y; // We rely on overflow behavior here\n', '        negativeResult = !negativeResult;\n', '      }\n', '      uint256 absoluteResult = mulu (x, uint256 (y));\n', '      if (negativeResult) {\n', '        require (absoluteResult <=\n', '          0x8000000000000000000000000000000000000000000000000000000000000000);\n', '        return -int256 (absoluteResult); // We rely on overflow behavior here\n', '      } else {\n', '        require (absoluteResult <=\n', '          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '        return int256 (absoluteResult);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function div (int128 x, int128 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    int256 result = (int256 (x) << 64) / y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divi (int256 x, int256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '\n', '    bool negativeResult = false;\n', '    if (x < 0) {\n', '      x = -x; // We rely on overflow behavior here\n', '      negativeResult = true;\n', '    }\n', '    if (y < 0) {\n', '      y = -y; // We rely on overflow behavior here\n', '      negativeResult = !negativeResult;\n', '    }\n', '    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divu (uint256 x, uint256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    uint128 result = divuu (x, y);\n', '    require (result <= uint128 (MAX_64x64));\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate -x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function neg (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return -x;\n', '  }\n', '\n', '  /**\n', '   * Calculate |x|.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function abs (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return x < 0 ? -x : x;\n', '  }\n', '\n', '  /**\n', '   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function inv (int128 x) internal pure returns (int128) {\n', '    require (x != 0);\n', '    int256 result = int256 (0x100000000000000000000000000000000) / x;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function avg (int128 x, int128 y) internal pure returns (int128) {\n', '    return int128 ((int256 (x) + int256 (y)) >> 1);\n', '  }\n', '\n', '  /**\n', '   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n', '   * Revert on overflow or in case x * y is negative.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function gavg (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 m = int256 (x) * int256 (y);\n', '    require (m >= 0);\n', '    require (m <\n', '        0x4000000000000000000000000000000000000000000000000000000000000000);\n', '    return int128 (sqrtu (uint256 (m)));\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down.  Revert if x < 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sqrt (int128 x) internal pure returns (int128) {\n', '    require (x >= 0);\n', '    return int128 (sqrtu (uint256 (x) << 64));\n', '  }\n', '\n', '  /**\n', '   * Calculate binary logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function log_2 (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    int256 msb = 0;\n', '    int256 xc = x;\n', '    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '    if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '    if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '    if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '    int256 result = msb - 64 << 64;\n', '    uint256 ux = uint256 (x) << uint256 (127 - msb);\n', '    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '      ux *= ux;\n', '      uint256 b = ux >> 255;\n', '      ux >>= 127 + b;\n', '      result += bit * int256 (b);\n', '    }\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function ln (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    return int128 (\n', '        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\n', '  }\n', '\n', '  /**\n', '   * Calculate binary exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp_2 (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    uint256 result = 0x80000000000000000000000000000000;\n', '\n', '    if (x & 0x8000000000000000 > 0)\n', '      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n', '    if (x & 0x4000000000000000 > 0)\n', '      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n', '    if (x & 0x2000000000000000 > 0)\n', '      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n', '    if (x & 0x1000000000000000 > 0)\n', '      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n', '    if (x & 0x800000000000000 > 0)\n', '      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n', '    if (x & 0x400000000000000 > 0)\n', '      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n', '    if (x & 0x200000000000000 > 0)\n', '      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n', '    if (x & 0x100000000000000 > 0)\n', '      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n', '    if (x & 0x80000000000000 > 0)\n', '      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n', '    if (x & 0x40000000000000 > 0)\n', '      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n', '    if (x & 0x20000000000000 > 0)\n', '      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n', '    if (x & 0x10000000000000 > 0)\n', '      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n', '    if (x & 0x8000000000000 > 0)\n', '      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n', '    if (x & 0x4000000000000 > 0)\n', '      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n', '    if (x & 0x2000000000000 > 0)\n', '      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n', '    if (x & 0x1000000000000 > 0)\n', '      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n', '    if (x & 0x800000000000 > 0)\n', '      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n', '    if (x & 0x400000000000 > 0)\n', '      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n', '    if (x & 0x200000000000 > 0)\n', '      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n', '    if (x & 0x100000000000 > 0)\n', '      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n', '    if (x & 0x80000000000 > 0)\n', '      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n', '    if (x & 0x40000000000 > 0)\n', '      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n', '    if (x & 0x20000000000 > 0)\n', '      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n', '    if (x & 0x10000000000 > 0)\n', '      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n', '    if (x & 0x8000000000 > 0)\n', '      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n', '    if (x & 0x4000000000 > 0)\n', '      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n', '    if (x & 0x2000000000 > 0)\n', '      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n', '    if (x & 0x1000000000 > 0)\n', '      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n', '    if (x & 0x800000000 > 0)\n', '      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n', '    if (x & 0x400000000 > 0)\n', '      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n', '    if (x & 0x200000000 > 0)\n', '      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n', '    if (x & 0x100000000 > 0)\n', '      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n', '    if (x & 0x80000000 > 0)\n', '      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n', '    if (x & 0x40000000 > 0)\n', '      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n', '    if (x & 0x20000000 > 0)\n', '      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n', '    if (x & 0x10000000 > 0)\n', '      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n', '    if (x & 0x8000000 > 0)\n', '      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n', '    if (x & 0x4000000 > 0)\n', '      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n', '    if (x & 0x2000000 > 0)\n', '      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n', '    if (x & 0x1000000 > 0)\n', '      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n', '    if (x & 0x800000 > 0)\n', '      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n', '    if (x & 0x400000 > 0)\n', '      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n', '    if (x & 0x200000 > 0)\n', '      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n', '    if (x & 0x100000 > 0)\n', '      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n', '    if (x & 0x80000 > 0)\n', '      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n', '    if (x & 0x40000 > 0)\n', '      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n', '    if (x & 0x20000 > 0)\n', '      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n', '    if (x & 0x10000 > 0)\n', '      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n', '    if (x & 0x8000 > 0)\n', '      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n', '    if (x & 0x4000 > 0)\n', '      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n', '    if (x & 0x2000 > 0)\n', '      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n', '    if (x & 0x1000 > 0)\n', '      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n', '    if (x & 0x800 > 0)\n', '      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n', '    if (x & 0x400 > 0)\n', '      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n', '    if (x & 0x200 > 0)\n', '      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n', '    if (x & 0x100 > 0)\n', '      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n', '    if (x & 0x80 > 0)\n', '      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n', '    if (x & 0x40 > 0)\n', '      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n', '    if (x & 0x20 > 0)\n', '      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n', '    if (x & 0x10 > 0)\n', '      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n', '    if (x & 0x8 > 0)\n', '      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n', '    if (x & 0x4 > 0)\n', '      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n', '    if (x & 0x2 > 0)\n', '      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n', '    if (x & 0x1 > 0)\n', '      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n', '\n', '    result >>= uint256 (63 - (x >> 64));\n', '    require (result <= uint256 (MAX_64x64));\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    return exp_2 (\n', '        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 64.64-bit fixed point number\n', '   */\n', '  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\n', '    require (y != 0);\n', '\n', '    uint256 result;\n', '\n', '    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '      result = (x << 64) / y;\n', '    else {\n', '      uint256 msb = 192;\n', '      uint256 xc = x >> 192;\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n', '      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 hi = result * (y >> 128);\n', '      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 xh = x >> 192;\n', '      uint256 xl = x << 64;\n', '\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '      lo = hi << 128;\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '\n', '      assert (xh == hi >> 128);\n', '\n', '      result += xl / y;\n', '    }\n', '\n', '    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= uint256 (xe);\n', '      else x <<= uint256 (-xe);\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= uint256 (re);\n', '      else if (re < 0) result >>= uint256 (-re);\n', '\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n', '   * number.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return unsigned 128-bit integer number\n', '   */\n', '  function sqrtu (uint256 x) private pure returns (uint128) {\n', '    if (x == 0) return 0;\n', '    else {\n', '      uint256 xx = x;\n', '      uint256 r = 1;\n', '      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\n', '      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\n', '      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\n', '      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\n', '      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\n', '      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\n', '      if (xx >= 0x8) { r <<= 1; }\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1; // Seven iterations should be enough\n', '      uint256 r1 = x / r;\n', '      return uint128 (r < r1 ? r : r1);\n', '    }\n', '  }\n', '}\n', '//------------------------------------------------------------------------------\n', '//\n', '//   Copyright 2020 Fetch.AI Limited\n', '//\n', '//   Licensed under the Apache License, Version 2.0 (the "License");\n', '//   you may not use this file except in compliance with the License.\n', '//   You may obtain a copy of the License at\n', '//\n', '//       http://www.apache.org/licenses/LICENSE-2.0\n', '//\n', '//   Unless required by applicable law or agreed to in writing, software\n', '//   distributed under the License is distributed on an "AS IS" BASIS,\n', '//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '//   See the License for the specific language governing permissions and\n', '//   limitations under the License.\n', '//\n', '//------------------------------------------------------------------------------\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'library AssetLib {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    struct Asset {\n', '        uint256 principal;\n', '        uint256 compoundInterest;\n', '    }\n', '\n', '\n', '    function composite(Asset storage asset)\n', '        internal view returns(uint256)\n', '    {\n', '        return asset.principal.add(asset.compoundInterest);\n', '    }\n', '\n', '\n', '    function compositeM(Asset memory asset)\n', '        internal pure returns(uint256)\n', '    {\n', '        return asset.principal.add(asset.compoundInterest);\n', '    }\n', '\n', '\n', '    function imAddS(Asset memory to, Asset storage amount)\n', '        internal view\n', '    {\n', '        to.principal = to.principal.add(amount.principal);\n', '        to.compoundInterest = to.compoundInterest.add(amount.compoundInterest);\n', '    }\n', '\n', '\n', '    function iAdd(Asset storage to, Asset memory amount)\n', '        internal\n', '    {\n', '        to.principal = to.principal.add(amount.principal);\n', '        to.compoundInterest = to.compoundInterest.add(amount.compoundInterest);\n', '    }\n', '\n', '\n', '    function imSubM(Asset memory from, Asset storage amount)\n', '        internal view\n', '    {\n', '        from.principal = from.principal.sub(amount.principal);\n', '        from.compoundInterest = from.compoundInterest.sub(amount.compoundInterest);\n', '    }\n', '\n', '\n', '    function iSub(Asset storage from, Asset memory amount)\n', '        internal\n', '    {\n', '        from.principal = from.principal.sub(amount.principal);\n', '        from.compoundInterest = from.compoundInterest.sub(amount.compoundInterest);\n', '    }\n', '\n', '\n', '    function iSubPrincipalFirst(Asset storage from, uint256 amount)\n', '        internal returns(Asset memory _amount)\n', '    {\n', '        if (from.principal >= amount) {\n', '            from.principal = from.principal.sub(amount);\n', '            _amount.principal = amount;\n', '        } else {\n', '           _amount.compoundInterest = amount.sub(from.principal);\n', '            // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\n', '            from.compoundInterest = from.compoundInterest.sub(_amount.compoundInterest);\n', '\n', '            _amount.principal = from.principal;\n', '            from.principal = 0;\n', '        }\n', '    }\n', '\n', '\n', '    function iSubCompoundInterestFirst(Asset storage from, uint256 amount)\n', '        internal returns(Asset memory _amount)\n', '    {\n', '        if (from.compoundInterest >= amount) {\n', '            from.compoundInterest = from.compoundInterest.sub(amount);\n', '            _amount.compoundInterest = amount;\n', '        } else {\n', '            _amount.principal = amount.sub(from.compoundInterest);\n', '            // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\n', '            from.principal = from.principal.sub(_amount.principal);\n', '\n', '            _amount.compoundInterest = from.compoundInterest;\n', '            from.compoundInterest = 0;\n', '        }\n', '    }\n', '\n', '    // NOTE(pb): This is a little bit more expensive version of the commented-out function bellow,\n', '    //           but it avoids copying the code by reusing (calling existing functions), and so\n', '    //           making code more reliable and readable.\n', '    function iRelocatePrincipalFirst(Asset storage from, Asset storage to, uint256 amount)\n', '        internal returns(Asset memory _amount)\n', '    {\n', '        _amount = iSubPrincipalFirst(from, amount);\n', '        iAdd(to, _amount);\n', '    }\n', '\n', '    // NOTE(pb): This is a little bit more expensive version of the commented-out function bellow,\n', '    //           but it avoids copying the code by reusing (calling existing functions), and so\n', '    //           making code more reliable and readable.\n', '    function iRelocateCompoundInterestFirst(Asset storage from, Asset storage to, uint256 amount)\n', '        internal returns(Asset memory _amount)\n', '    {\n', '        _amount = iSubCompoundInterestFirst(from, amount);\n', '        iAdd(to, _amount);\n', '    }\n', '\n', '    ////NOTE(pb): Whole Commented out code block bellow consumes less gas then variant above, however for the price\n', '    ////          of copy code which can be rather called (see notes in the commented out code):\n', '    //function iRelocatePrincipalFirst(Asset storage from, Asset storage to, uint256 amount)\n', '    //    internal pure returns(Asset memory _amount)\n', '    //{\n', '    //    if (from.principal >= amount) {\n', '    //        from.principal = from.principal.sub(amount);\n', '    //        to.principal = to.principal.add(amount);\n', '    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for compound as it is called in\n', '    //        //           uncommented variant of this function above.\n', '    //        _amount.principal = amount;\n', '    //    } else {\n', '    //        _amount.compoundInterest = amount.sub(from.principal);\n', '    //        // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\n', '    //        from.compoundInterest = from.compoundInterest.sub(_amount.compoundInterest);\n', '    //        to.compoundInterest = to.compoundInterest.add(_amount.compoundInterest);\n', '    //        to.principal = to.principal.add(from.principal);\n', '\n', '    //        _amount.principal = from.principal;\n', '    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for principal as it is called in\n', '    //        //           uncommented variant of this function above.\n', '    //         from.principal = 0;\n', '    //     }\n', '    //}\n', '\n', '\n', '    //function iRelocateCompoundInterestFirst(Asset storage from, Asset storage to, uint256 amount)\n', '    //    internal pure returns(Asset memory _amount)\n', '    //{\n', '    //    if (from.compoundInterest >= amount) {\n', '    //        from.compoundInterest = from.compoundInterest.sub(amount);\n', '    //        to.compoundInterest = to.compoundInterest.add(amount);\n', '    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for principal as it is called in\n', '    //        //           uncommented variant of this function above.\n', '    //        _amount.compoundInterest = amount;\n', '    //    } else {\n', '    //        _amount.principal = amount.sub(from.compoundInterest);\n', '    //        // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\n', '    //        from.principal = from.principal.sub(_amount.principal);\n', '    //        to.principal = to.principal.add(_amount.principal);\n', '    //        to.compoundInterest = to.compoundInterest.add(from.compoundInterest);\n', '\n', '    //        _amount.compoundInterest = from.compoundInterest;\n', '    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for compound as it is called in\n', '    //        //           uncommented variant of this function above.\n', '    //         from.compoundInterest = 0;\n', '    //    }\n', '    //}\n', '}\n', '\n', '\n', 'library Finance {\n', '    using SafeMath for uint256;\n', '    using AssetLib for AssetLib.Asset;\n', '\n', '\n', '    function pow (int128 x, uint256 n)\n', '        internal pure returns (int128 r)\n', '    {\n', '        r = ABDKMath64x64.fromUInt (1);\n', '\n', '        while (n != 0) {\n', '            if ((n & 1) != 0) {\n', '                r = ABDKMath64x64.mul (r, x);\n', '                n -= 1;\n', '            } else {\n', '                x = ABDKMath64x64.mul (x, x);\n', '                n >>= 1;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function compoundInterest (uint256 principal, uint256 ratio, uint256 n)\n', '        internal pure returns (uint256)\n', '    {\n', '        return ABDKMath64x64.mulu (\n', '            pow (\n', '                ABDKMath64x64.add (\n', '                    ABDKMath64x64.fromUInt (1),\n', '                    ABDKMath64x64.divu (\n', '                          ratio,\n', '                          10**18)\n', '                    ),\n', '                    n\n', '                ),\n', '            principal);\n', '    }\n', '\n', '\n', '    function compoundInterest (uint256 principal, int256 ratio, uint256 n)\n', '        internal pure returns (uint256)\n', '    {\n', '        return ABDKMath64x64.mulu (\n', '            pow (\n', '                ABDKMath64x64.add (\n', '                    ABDKMath64x64.fromUInt (1),\n', '                    ABDKMath64x64.divi (\n', '                          ratio,\n', '                          10**18)\n', '                    ),\n', '                    n\n', '                ),\n', '            principal);\n', '    }\n', '\n', '\n', '    function compoundInterest (AssetLib.Asset storage asset, uint256 interest, uint256 n)\n', '        internal\n', '    {\n', '        uint256 composite = asset.composite();\n', '        composite = compoundInterest(composite, interest, n);\n', '\n', '        asset.compoundInterest = composite.sub(asset.principal);\n', '    }\n', '}\n', '\n', '\n', '// [Canonical ERC20-FET] = 10**(-18)x[ECR20-FET]\n', 'contract Staking is AccessControl {\n', '    using SafeMath for uint256;\n', '    using AssetLib for AssetLib.Asset;\n', '\n', '    struct InterestRatePerBlock {\n', '        uint256 sinceBlock;\n', '        // NOTE(pb): To simplify, interest rate value can *not* be negative\n', '        uint256 rate; // Signed interest rate in [10**18] units => real_rate = rate / 10**18.\n', '        //// Number of users who bound stake while this particular interest rate was still in effect.\n', '        //// This enables to identify when we can delete interest rates which are no more used by anyone\n', '        //// (continuously from the beginning).\n', '        //uint256 numberOfRegisteredUsers;\n', '    }\n', '\n', '    struct Stake {\n', '        uint256 sinceBlock;\n', '        uint256 sinceInterestRateIndex;\n', '        AssetLib.Asset asset;\n', '    }\n', '\n', '    struct LockedAsset {\n', '        uint256 liquidSinceBlock;\n', '        AssetLib.Asset asset;\n', '    }\n', '\n', '    struct Locked {\n', '        AssetLib.Asset aggregate;\n', '        LockedAsset[] assets;\n', '    }\n', '\n', '    // *******    EVENTS    ********\n', '    event BindStake(\n', '          address indexed stakerAddress\n', '        , uint256 indexed sinceInterestRateIndex\n', '        , uint256 principal\n', '        , uint256 compoundInterest\n', '    );\n', '\n', '    /**\n', '     * @dev This event is triggered exclusivelly to recalculate the compount interest of ALREADY staked asset\n', '     *      for the poriod since it was calculated the last time. This means this event does *NOT* include *YET*\n', '     *      any added (resp. removed) asset user is currently binding (resp. unbinding).\n', '     *      The main motivation for this event is to give listener opportunity to get feedback what is the \n', "     *      user's staked asset value with compound interrest recalculated to *CURRENT* block *BEFORE* user's\n", "     *      action (binding resp. unbinding) affects user's staked asset value.\n", '     */\n', '    event StakeCompoundInterest(\n', '          address indexed stakerAddress\n', '        , uint256 indexed sinceInterestRateIndex\n', '        , uint256 principal // = previous_principal\n', '        , uint256 compoundInterest // = previous_principal * (pow(1+interest, _getBlockNumber()-since_block) - 1)\n', '    );\n', '\n', '    event LiquidityDeposited(\n', '          address indexed stakerAddress\n', '        , uint256 amount\n', '    );\n', '\n', '    event LiquidityUnlocked(\n', '          address indexed stakerAddress\n', '        , uint256 principal\n', '        , uint256 compoundInterest\n', '    );\n', '\n', '    event UnbindStake(\n', '          address indexed stakerAddress\n', '        , uint256 indexed liquidSinceBlock\n', '        , uint256 principal\n', '        , uint256 compoundInterest\n', '    );\n', '\n', '    event NewInterestRate(\n', '          uint256 indexed index\n', '        , uint256 rate // Signed interest rate in [10**18] units => real_rate = rate / 10**18\n', '    );\n', '\n', '    event Withdraw(\n', '          address indexed stakerAddress\n', '        , uint256 principal\n', '        , uint256 compoundInterest\n', '    );\n', '\n', '    event LockPeriod(uint64 numOfBlocks);\n', '    event Pause(uint256 sinceBlock);\n', '    event TokenWithdrawal(address targetAddress, uint256 amount);\n', '    event ExcessTokenWithdrawal(address targetAddress, uint256 amount);\n', '    event RewardsPoolTokenTopUp(address sender, uint256 amount);\n', '    event RewardsPoolTokenWithdrawal(address targetAddress, uint256 amount);\n', '    event DeleteContract();\n', '\n', '\n', '    bytes32 public constant DELEGATE_ROLE = keccak256("DELEGATE_ROLE");\n', '    uint256 public constant DELETE_PROTECTION_PERIOD = 370285;// 60*24*60*60[s] / (14[s/block]) = 370285[block];\n', '\n', '    IERC20 public _token;\n', '\n', '    // NOTE(pb): This needs to be either completely replaced by multisig concept,\n', '    //           or at least joined with multisig.\n', '    //           This contract does not have, by-design on conceptual level, any clearly defined repeating\n', '    //           life-cycle behaviour (for instance: `initialise -> staking-period -> locked-period` cycle\n', '    //           with clear start & end of each life-cycle. Life-cycle of this contract is single monolithic\n', '    //           period `creation -> delete-contract`, where there is no clear place where to `update` the\n', '    //           earliest deletion block value, thus it would need to be set once at the contract creation\n', '    //           point what completely defeats the protection by time delay.\n', '    uint256 public _earliestDelete;\n', '    \n', '    uint256 public _pausedSinceBlock;\n', '    uint64 public _lockPeriodInBlocks;\n', '\n', '    // Represents amount of reward funds which are dedicated to cover accrued compound interest during user withdrawals.\n', '    uint256 public _rewardsPoolBalance;\n', '    // Accumulated global value of all principals (from all users) currently held in this contract (liquid, bound and locked).\n', '    uint256 public _accruedGlobalPrincipal;\n', '    AssetLib.Asset public _accruedGlobalLiquidity; // Exact\n', '    AssetLib.Asset public _accruedGlobalLocked; // Exact\n', '\n', '    uint256 public _interestRatesStartIdx;\n', '    uint256 public _interestRatesNextIdx;\n', '    mapping(uint256 => InterestRatePerBlock) public _interestRates;\n', '\n', '    mapping(address => Stake) _stakes;\n', '    mapping(address => Locked) _locked;\n', '    mapping(address => AssetLib.Asset) public _liquidity;\n', '\n', '\n', '    /* Only callable by owner */\n', '    modifier onlyOwner() {\n', '        require(_isOwner(), "Caller is not an owner");\n', '        _;\n', '    }\n', '\n', '    /* Only callable by owner or delegate */\n', '    modifier onlyDelegate() {\n', '        require(_isOwner() || hasRole(DELEGATE_ROLE, msg.sender), "Caller is neither owner nor delegate");\n', '        _;\n', '    }\n', '\n', '    modifier verifyTxExpiration(uint256 expirationBlock) {\n', '        require(_getBlockNumber() <= expirationBlock, "Transaction expired");\n', '        _;\n', '    }\n', '\n', '    modifier verifyNotPaused() {\n', '        require(_pausedSinceBlock > _getBlockNumber(), "Contract has been paused");\n', '        _;\n', '    }\n', '\n', '\n', '    /*******************\n', '    Contract start\n', '    *******************/\n', '    /**\n', '     * @param ERC20Address address of the ERC20 contract\n', '     */\n', '    constructor(\n', '          address ERC20Address\n', '        , uint256 interestRatePerBlock\n', '        , uint256 pausedSinceBlock\n', '        , uint64  lockPeriodInBlocks) \n', '    public \n', '    {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '\n', '        _token = IERC20(ERC20Address);\n', '        _earliestDelete = _getBlockNumber().add(DELETE_PROTECTION_PERIOD);\n', '        \n', '        // NOTE(pb): Unnecessary initialisations, shall be done implicitly by VM\n', '        //_interestRatesStartIdx = 0;\n', '        //_interestRatesNextIdx = 0;\n', '        //_rewardsPoolBalance = 0;\n', '        //_accruedGlobalPrincipal = 0;\n', '        //_accruedGlobalLiquidity = 0;\n', '        //_accruedGlobalLocked = 0;\n', '\n', '        _updateLockPeriod(lockPeriodInBlocks);\n', '        _addInterestRate(interestRatePerBlock);\n', '        _pauseSince(pausedSinceBlock /* uint256(0) */);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Add new interest rate in to the ordered container of previously added interest rates\n', '     * @param rate - signed interest rate value in [10**18] units => real_rate [1] = rate [10**18] / 10**18\n', '     * @param expirationBlock - block number beyond which is the carrier Tx considered expired, and so rejected.\n', '     *                     This is for protection of Tx sender to exactly define lifecycle length of the Tx,\n', '     *                     and so avoiding uncertainty of how long Tx sender needs to wait for Tx processing.\n', '     *                     Tx can be withheld\n', '     * @dev expiration period\n', '     */\n', '    function addInterestRate(\n', '        uint256 rate,\n', '        uint256 expirationBlock\n', '        )\n', '        external\n', '        onlyDelegate()\n', '        verifyTxExpiration(expirationBlock)\n', '    {\n', '        _addInterestRate(rate);\n', '    }\n', '\n', '\n', '    function deposit(\n', '        uint256 amount,\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        bool makeTransfer = amount != 0;\n', '        if (makeTransfer) {\n', '            require(_token.transferFrom(msg.sender, address(this), amount), "Transfer failed");\n', '            _accruedGlobalPrincipal = _accruedGlobalPrincipal.add(amount);\n', '            _accruedGlobalLiquidity.principal = _accruedGlobalLiquidity.principal.add(amount);\n', '            emit LiquidityDeposited(msg.sender, amount);\n', '        }\n', '\n', '        uint256 curr_block = _getBlockNumber();\n', '        (, AssetLib.Asset storage liquidity,) = _collectLiquidity(msg.sender, curr_block);\n', '\n', '        if (makeTransfer) {\n', '            liquidity.principal = liquidity.principal.add(amount);\n', '       }\n', '    }\n', '\n', '\n', '    /**\n', "     * @notice Withdraws amount from sender' available liquidity pool back to sender address,\n", '     *         preferring withdrawal from compound interest dimension of liquidity.\n', '     *\n', '     * @param amount - value to withdraw\n', '     *\n', '     * @dev public access\n', '     */\n', '    function withdraw(\n', '        uint256 amount,\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        address sender = msg.sender;\n', '        uint256 curr_block = _getBlockNumber();\n', '        (, AssetLib.Asset storage liquidity,) = _collectLiquidity(sender, curr_block);\n', '\n', '        AssetLib.Asset memory _amount = liquidity.iSubCompoundInterestFirst(amount);\n', '        _finaliseWithdraw(sender, _amount, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Withdraws *WHOLE* compound interest amount available to sender.\n', '     *\n', '     * @dev public access\n', '     */\n', '    function withdrawPrincipal(\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        address sender = msg.sender;\n', '        uint256 curr_block = _getBlockNumber();\n', '        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\n', '\n', '        AssetLib.Asset memory _amount;\n', '        _amount.principal = liquidity.principal;\n', '        liquidity.principal = 0;\n', '\n', '        _finaliseWithdraw(sender, _amount, _amount.principal);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Withdraws *WHOLE* compound interest amount available to sender.\n', '     *\n', '     * @dev public access\n', '     */\n', '    function withdrawCompoundInterest(\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        address sender = msg.sender;\n', '        uint256 curr_block = _getBlockNumber();\n', '        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\n', '\n', '        AssetLib.Asset memory _amount;\n', '        _amount.compoundInterest = liquidity.compoundInterest;\n', '        liquidity.compoundInterest = 0;\n', '\n', '        _finaliseWithdraw(sender, _amount, _amount.compoundInterest);\n', '    }\n', '\n', '\n', '    /**\n', "     * @notice Withdraws whole liquidity available to sender back to sender' address,\n", '     *\n', '     * @dev public access\n', '     */\n', '    function withdrawWholeLiquidity(\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        address sender = msg.sender;\n', '        uint256 curr_block = _getBlockNumber();\n', '        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\n', '\n', '        _finaliseWithdraw(sender, liquidity, liquidity.composite());\n', '        liquidity.compoundInterest = 0;\n', '        liquidity.principal = 0;\n', '    }\n', '\n', '\n', '    function bindStake(\n', '        uint256 amount,\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        require(amount != 0, "Amount must be higher than zero");\n', '\n', '        uint256 curr_block = _getBlockNumber();\n', '\n', '        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(msg.sender, curr_block);\n', '\n', '        //// NOTE(pb): Strictly speaking, the following check is not necessary, since the requirement will be checked\n', '        ////           during the `iRelocatePrincipalFirst(...)` method code flow (see bellow).\n', '        //uint256 composite = liquidity.composite();\n', '        //require(amount <= composite, "Insufficient liquidity.");\n', '\n', '        Stake storage stake = _updateStakeCompoundInterest(msg.sender, curr_block);\n', '        AssetLib.Asset memory _amount = liquidity.iRelocatePrincipalFirst(stake.asset, amount);\n', '        _accruedGlobalLiquidity.iSub(_amount);\n', '\n', '       //// NOTE(pb): Emitting only info about Tx input `amount` value, decomposed to principal & compound interest\n', '       ////           coordinates based on liquidity available.\n', '       //if (amount > 0) {\n', '            emit BindStake(msg.sender, stake.sinceInterestRateIndex, _amount.principal, _amount.compoundInterest);\n', '        //}\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Unbinds amount from the stake of sender of the transaction,\n', '     *         and *LOCKS* it for number of blocks defined by value of the\n', '     *         `_lockPeriodInBlocks` state of this contract at the point\n', '     *         of this call.\n', '     *         The locked amount can *NOT* be withdrawn from the contract\n', '     *         *BEFORE* the lock period ends.\n', '     *\n', '     *         Unbinding (=calling this method) also means, that compound\n', '     *         interest will be calculated for period since la.\n', '     *\n', '     * @param amount - value to un-bind from the stake\n', '     *                 If `amount=0` then the **WHOLE** stake (including\n', '     *                 compound interest) will be unbound.\n', '     *\n', '     * @dev public access\n', '     */\n', '    function unbindStake(\n', '        uint256 amount, //NOTE: If zero, then all stake is withdrawn\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        verifyNotPaused\n', '    {\n', '        uint256 curr_block = _getBlockNumber();\n', '        address sender = msg.sender;\n', '        Stake storage stake = _updateStakeCompoundInterest(sender, curr_block);\n', '\n', '        uint256 stake_composite = stake.asset.composite();\n', '        AssetLib.Asset memory _amount;\n', '\n', '        if (amount > 0) {\n', '            // TODO(pb): Failing this way is expensive (causing rollback of state change).\n', '            //           It would be beneficial to retain newly calculated liquidity value\n', '            //           in to the state, thus the invested calculation would not come to wain.\n', '            //           However that comes with another implication - this would need\n', '            //           to return status/error code instead of reverting = caller MUST actually\n', '            //           check the return value, what might be trap for callers who do not expect\n', '            //           this behaviour (Tx execution passed , but in fact the essential feature\n', '            //           has not been fully executed).\n', '            require(amount <= stake_composite, "Amount is higher than stake");\n', '\n', '            if (_lockPeriodInBlocks == 0) {\n', '                _amount = stake.asset.iRelocateCompoundInterestFirst(_liquidity[sender], amount);\n', '                _accruedGlobalLiquidity.iAdd(_amount);\n', '                emit UnbindStake(sender, curr_block, _amount.principal, _amount.compoundInterest);\n', '                emit LiquidityUnlocked(sender, _amount.principal, _amount.compoundInterest);\n', '            } else {\n', '                Locked storage locked = _locked[sender];\n', '                LockedAsset storage newLockedAsset = locked.assets.push();\n', '                newLockedAsset.liquidSinceBlock = curr_block.add(_lockPeriodInBlocks);\n', '                _amount = stake.asset.iRelocateCompoundInterestFirst(newLockedAsset.asset, amount);\n', '\n', '                _accruedGlobalLocked.iAdd(_amount);\n', '                locked.aggregate.iAdd(_amount);\n', '\n', '                // NOTE: Emitting only info about Tx input values, not resulting compound values\n', '                emit UnbindStake(sender, newLockedAsset.liquidSinceBlock, _amount.principal, _amount.compoundInterest);\n', '            }\n', '        } else {\n', '            if (stake_composite == 0) {\n', '                // NOTE(pb): Nothing to do\n', '                return;\n', '            }\n', '\n', '            _amount = stake.asset;\n', '            stake.asset.principal = 0;\n', '            stake.asset.compoundInterest = 0;\n', '\n', '            if (_lockPeriodInBlocks == 0) {\n', '                _liquidity[sender].iAdd(_amount);\n', '                _accruedGlobalLiquidity.iAdd(_amount);\n', '                emit UnbindStake(sender, curr_block, _amount.principal, _amount.compoundInterest);\n', '                emit LiquidityUnlocked(sender, _amount.principal, _amount.compoundInterest);\n', '            } else {\n', '                Locked storage locked = _locked[sender];\n', '                LockedAsset storage newLockedAsset = locked.assets.push();\n', '                newLockedAsset.liquidSinceBlock = curr_block.add(_lockPeriodInBlocks);\n', '                newLockedAsset.asset = _amount;\n', '\n', '                _accruedGlobalLocked.iAdd(_amount);\n', '                locked.aggregate.iAdd(_amount);\n', '\n', '                // NOTE: Emitting only info about Tx input values, not resulting compound values\n', '                emit UnbindStake(msg.sender, newLockedAsset.liquidSinceBlock, newLockedAsset.asset.principal, newLockedAsset.asset.compoundInterest);\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function getRewardsPoolBalance() external view returns(uint256) {\n', '        return _rewardsPoolBalance;\n', '    }\n', '\n', '\n', '    function getEarliestDeleteBlock() external view returns(uint256) {\n', '        return _earliestDelete;\n', '    }\n', '\n', '\n', '    function getNumberOfLockedAssetsForUser(address forAddress) external view returns(uint256 length) {\n', '        length = _locked[forAddress].assets.length;\n', '    }\n', '\n', '\n', '    function getLockedAssetsAggregateForUser(address forAddress) external view returns(uint256 principal, uint256 compoundInterest) {\n', '        AssetLib.Asset storage aggregate = _locked[forAddress].aggregate;\n', '        return (aggregate.principal, aggregate.compoundInterest);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns locked assets decomposed in to 3 separate arrays (principal, compound interest, liquid since block)\n', '     *      NOTE(pb): This method might be quite expensive, depending on size of locked assets\n', '     */\n', '    function getLockedAssetsForUser(address forAddress)\n', '        external view\n', '        returns(uint256[] memory principal, uint256[] memory compoundInterest, uint256[] memory liquidSinceBlock)\n', '    {\n', '        LockedAsset[] storage lockedAssets = _locked[forAddress].assets;\n', '        uint256 length = lockedAssets.length;\n', '        if (length != 0) {\n', '            principal = new uint256[](length);\n', '            compoundInterest = new uint256[](length);\n', '            liquidSinceBlock = new uint256[](length);\n', '\n', '            for (uint256 i=0; i < length; ++i) {\n', '                LockedAsset storage la = lockedAssets[i];\n', '                AssetLib.Asset storage a = la.asset;\n', '                principal[i] = a.principal;\n', '                compoundInterest[i] = a.compoundInterest;\n', '                liquidSinceBlock[i] = la.liquidSinceBlock;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function getStakeForUser(address forAddress) external view returns(uint256 principal, uint256 compoundInterest, uint256 sinceBlock, uint256 sinceInterestRateIndex) {\n', '        Stake storage stake = _stakes[forAddress];\n', '        principal = stake.asset.principal;\n', '        compoundInterest = stake.asset.compoundInterest;\n', '        sinceBlock = stake.sinceBlock;\n', '        sinceInterestRateIndex = stake.sinceInterestRateIndex;\n', '    }\n', '\n', '\n', '    /**\n', '       @dev Even though this is considered as administrative action (is not affected by\n', '            by contract paused state, it can be executed by anyone who wishes to\n', '            top-up the rewards pool (funds are sent in to contract, *not* the other way around).\n', "            The Rewards Pool is exclusively dedicated to cover withdrawals of user' compound interest,\n", '            which is effectively the reward.\n', '     */\n', '    function topUpRewardsPool(\n', '        uint256 amount,\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '    {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        require(_token.transferFrom(msg.sender, address(this), amount), "Transfer failed");\n', '        _rewardsPoolBalance = _rewardsPoolBalance.add(amount);\n', '        emit RewardsPoolTokenTopUp(msg.sender, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Updates Lock Period value\n', '     * @param numOfBlocks  length of the lock period\n', '     * @dev Delegate only\n', '     */\n', '    function updateLockPeriod(uint64 numOfBlocks, uint256 txExpirationBlock)\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        onlyDelegate\n', '    {\n', '        _updateLockPeriod(numOfBlocks);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Pauses all NON-administrative interaction with the contract since the specidfed block number \n', '     * @param blockNumber block number since which non-admin interaction will be paused (for all _getBlockNumber() >= blockNumber)\n', '     * @dev Delegate only\n', '     */\n', '    function pauseSince(uint256 blockNumber, uint256 txExpirationBlock)\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        onlyDelegate\n', '    {\n', '        _pauseSince(blockNumber);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw tokens from rewards pool.\n', '     *\n', '     * @param amount : amount to withdraw.\n', '     *                 If `amount == 0` then whole amount in rewards pool will be withdrawn.\n', '     * @param targetAddress : address to send tokens to\n', '     */\n', '    function withdrawFromRewardsPool(uint256 amount, address payable targetAddress,\n', '        uint256 txExpirationBlock\n', '        )\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        onlyOwner\n', '    {\n', '        if (amount == 0) {\n', '            amount = _rewardsPoolBalance;\n', '        } else {\n', '            require(amount <= _rewardsPoolBalance, "Amount higher than rewards pool");\n', '        }\n', '\n', '        // NOTE(pb): Strictly speaking, consistency check in following lines is not necessary,\n', '        //           the if-else code above guarantees that everything is alright:\n', '        uint256 contractBalance = _token.balanceOf(address(this));\n', '        uint256 expectedMinContractBalance = _accruedGlobalPrincipal.add(amount);\n', '        require(expectedMinContractBalance <= contractBalance, "Contract inconsistency.");\n', '\n', '        require(_token.transfer(targetAddress, amount), "Not enough funds on contr. addr.");\n', '\n', '        // NOTE(pb): No need for SafeMath.sub since the overflow is checked in the if-else code above.\n', '        _rewardsPoolBalance -= amount;\n', '\n', '        emit RewardsPoolTokenWithdrawal(targetAddress, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw "excess" tokens, which were sent to contract directly via direct ERC20.transfer(...),\n', '     *      without interacting with API of this (Staking) contract, what could be done only by mistake.\n', '     *      Thus this method is meant to be used primarily for rescue purposes, enabling withdrawal of such\n', '     *      "excess" tokens out of contract.\n', '     * @param targetAddress : address to send tokens to\n', '     * @param txExpirationBlock : block number until which is the transaction valid (inclusive).\n', '     *                            When transaction is processed after this block, it fails.\n', '     */\n', '    function withdrawExcessTokens(address payable targetAddress, uint256 txExpirationBlock)\n', '        external\n', '        verifyTxExpiration(txExpirationBlock)\n', '        onlyOwner\n', '    {\n', '        uint256 contractBalance = _token.balanceOf(address(this));\n', '        uint256 expectedMinContractBalance = _accruedGlobalPrincipal.add(_rewardsPoolBalance);\n', '        // NOTE(pb): The following subtraction shall *fail* (revert) IF the contract is in *INCONSISTENT* state,\n', '        //           = when contract balance is less than minial expected balance:\n', '        uint256 excessAmount = contractBalance.sub(expectedMinContractBalance);\n', '        require(_token.transfer(targetAddress, excessAmount), "Not enough funds on contr. addr.");\n', '        emit ExcessTokenWithdrawal(targetAddress, excessAmount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Delete the contract, transfers the remaining token and ether balance to the specified\n', '       payoutAddress\n', '     * @param payoutAddress address to transfer the balances to. Ensure that this is able to handle ERC20 tokens\n', '     * @dev owner only + only on or after `_earliestDelete` block\n', '     */\n', '    function deleteContract(address payable payoutAddress, uint256 txExpirationBlock)\n', '    external\n', '    verifyTxExpiration(txExpirationBlock)\n', '    onlyOwner\n', '    {\n', '        require(_earliestDelete >= _getBlockNumber(), "Earliest delete not reached");\n', '        uint256 contractBalance = _token.balanceOf(address(this));\n', '        require(_token.transfer(payoutAddress, contractBalance));\n', '        emit DeleteContract();\n', '        selfdestruct(payoutAddress);\n', '    }\n', ' \n', '\n', '    // **********************************************************\n', '    // ******************    INTERNAL METHODS   *****************\n', '\n', '\n', '    /**\n', '     * @dev VIRTUAL Method returning bock number. Introduced for \n', '     *      testing purposes (allows mocking).\n', '     */\n', '    function _getBlockNumber() internal view virtual returns(uint256)\n', '    {\n', '        return block.number;\n', '    }\n', '\n', '\n', '    function _isOwner() internal view returns(bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Add new interest rate in to the ordered container of previously added interest rates\n', '     * @param rate - signed interest rate value in [10**18] units => real_rate [1] = rate [10**18] / 10**18\n', '     */\n', '    function _addInterestRate(uint256 rate) internal \n', '    {\n', '        uint256 idx = _interestRatesNextIdx;\n', '        _interestRates[idx] = InterestRatePerBlock({\n', '              sinceBlock: _getBlockNumber()\n', '            , rate: rate\n', '            //,numberOfRegisteredUsers: 0\n', '            });\n', '        _interestRatesNextIdx = _interestRatesNextIdx.add(1);\n', '\n', '        emit NewInterestRate(idx, rate);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Updates Lock Period value\n', '     * @param numOfBlocks  length of the lock period\n', '     */\n', '    function _updateLockPeriod(uint64 numOfBlocks) internal\n', '    {\n', '        _lockPeriodInBlocks = numOfBlocks;\n', '        emit LockPeriod(numOfBlocks);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Pauses all NON-administrative interaction with the contract since the specidfed block number \n', '     * @param blockNumber block number since which non-admin interaction will be paused (for all _getBlockNumber() >= blockNumber)\n', '     */\n', '    function _pauseSince(uint256 blockNumber) internal \n', '    {\n', '        uint256 currentBlockNumber = _getBlockNumber();\n', '        _pausedSinceBlock = blockNumber < currentBlockNumber ? currentBlockNumber : blockNumber;\n', '        emit Pause(_pausedSinceBlock);\n', '    }\n', '\n', '\n', '    /**\n', "     * @notice Withdraws amount from sender' available liquidity pool back to sender address,\n", '     *         preferring withdrawal from compound interest dimension of liquidity.\n', '     *\n', '     * @param amount - value to withdraw\n', '     *\n', '     * @dev NOTE(pb): Passing redundant `uint256 amount` (on top of the `Asset _amount`) in the name\n', '     *                of performance to avoid calculating it again from `_amount` (or the other way around).\n', '     *                IMPLICATION: Caller **MUST** pass correct values, ensuring that `amount == _amount.composite()`,\n', '     *                since this private method is **NOT** verifying this condition due to performance reasons.\n', '     */\n', '    function _finaliseWithdraw(address sender, AssetLib.Asset memory _amount, uint256 amount) internal {\n', '         if (amount != 0) {\n', '            require(_rewardsPoolBalance >= _amount.compoundInterest, "Not enough funds in rewards pool");\n', '            require(_token.transfer(sender, amount), "Transfer failed");\n', '\n', '            _rewardsPoolBalance = _rewardsPoolBalance.sub(_amount.compoundInterest);\n', '            _accruedGlobalPrincipal = _accruedGlobalPrincipal.sub(_amount.principal);\n', '            _accruedGlobalLiquidity.iSub(_amount);\n', '\n', '            // NOTE(pb): Emitting only info about Tx input `amount` value, decomposed to principal & compound interest\n', '            //           coordinates based on liquidity available.\n', '            emit Withdraw(msg.sender, _amount.principal, _amount.compoundInterest);\n', '         }\n', '    }\n', '\n', '\n', '    function _updateStakeCompoundInterest(address sender, uint256 at_block)\n', '        internal\n', '        returns(Stake storage stake)\n', '    {\n', '        stake = _stakes[sender];\n', '        uint256 composite = stake.asset.composite();\n', '        if (composite != 0)\n', '        {\n', '            // TODO(pb): There is more effective algorithm than this.\n', '            uint256 start_block = stake.sinceBlock;\n', '            // NOTE(pb): Probability of `++i`  or `j=i+1` overflowing is limitly approaching zero,\n', '            // since we would need to create `(1<<256)-1`, resp `1<<256)-2`,  number of interrest rates in order to reach the overflow\n', '            for (uint256 i=stake.sinceInterestRateIndex; i < _interestRatesNextIdx; ++i) {\n', '                InterestRatePerBlock storage interest = _interestRates[i];\n', '                // TODO(pb): It is not strictly necessary to do this assert, and rather fully rely\n', '                //           on correctness of `addInterestRate(...)` implementation.\n', '                require(interest.sinceBlock <= start_block, "sinceBlock inconsistency");\n', '                uint256 end_block = at_block;\n', '\n', '                uint256 j = i + 1;\n', '                if (j < _interestRatesNextIdx) {\n', '                    InterestRatePerBlock storage next_interest = _interestRates[j];\n', '                    end_block = next_interest.sinceBlock;\n', '                }\n', '\n', '                composite = Finance.compoundInterest(composite, interest.rate, end_block - start_block);\n', '                start_block = end_block;\n', '            }\n', '\n', '            stake.asset.compoundInterest = composite.sub(stake.asset.principal);\n', '        }\n', '\n', '        stake.sinceBlock = at_block;\n', '        stake.sinceInterestRateIndex = (_interestRatesNextIdx != 0 ? _interestRatesNextIdx - 1 : 0);\n', '        // TODO(pb): Careful: The `StakeCompoundInterest` event doers not carry explicit block number value - it relies\n', '        //           on the fact that Event implicitly carries value block.number where the event has been triggered,\n', '        //           what however can be different than value of the `at_block` input parameter passed in.\n', '        //           Thus this method needs to be EITHER refactored to drop the `at_block` parameter (and so get the\n', '        //           value internally by calling the `_getBlockNumber()` method), OR the `StakeCompoundInterest` event\n', '        //           needs to be extended to include the `uint256 sinceBlock` attribute.\n', '        //           The original reason for passing the `at_block` parameter was to spare gas for calling the\n', '        //           `_getBlockNumber()` method twice (by the caller of this method + by this method), what might NOT be\n', '        //           relevant anymore (after refactoring), since caller might not need to use the block number value anymore.\n', '        emit StakeCompoundInterest(sender, stake.sinceInterestRateIndex, stake.asset.principal, stake.asset.compoundInterest);\n', '    }\n', '\n', '\n', '    function _collectLiquidity(address sender, uint256 at_block)\n', '        internal\n', '        returns(AssetLib.Asset memory unlockedLiquidity, AssetLib.Asset storage liquidity, bool collected)\n', '    {\n', '        Locked storage locked = _locked[sender];\n', '        LockedAsset[] storage lockedAssets = locked.assets;\n', '        liquidity = _liquidity[sender];\n', '\n', '        for (uint256 i=0; i < lockedAssets.length; ) {\n', '            LockedAsset memory l = lockedAssets[i];\n', '\n', '            if (l.liquidSinceBlock > at_block) {\n', '                ++i; // NOTE(pb): Probability of overflow is zero, what is ensured by condition in this for cycle.\n', '                continue;\n', '            }\n', '\n', '            unlockedLiquidity.principal = unlockedLiquidity.principal.add(l.asset.principal);\n', '            // NOTE(pb): The following can potentially overflow, since accrued compound interest can be high, depending on values on sequence of interest rates & length of compounding intervals involved.\n', '            unlockedLiquidity.compoundInterest = unlockedLiquidity.compoundInterest.add(l.asset.compoundInterest);\n', '\n', '            // Copying last element of the array in to the current one,\n', '            // so that the last one can be popped out of the array.\n', '            // NOTE(pb): Probability of overflow during `-` operation is zero, what is ensured by condition in this for cycle.\n', '            uint256 last_idx = lockedAssets.length - 1;\n', '            if (i != last_idx) {\n', '                lockedAssets[i] = lockedAssets[last_idx];\n', '            }\n', '            // TODO(pb): It will be cheaper (GAS consumption-wise) to simply leave\n', '            // elements in array (do NOT delete them) and rather store "amortised"\n', '            // size of the array in secondary separate store variable (= do NOT\n', '            // use `array.length` as primary indication of array length).\n', '            // Destruction of the array items is expensive. Excess of "allocated"\n', '            // array storage can be left temporarily (or even permanently) unused.\n', '            lockedAssets.pop();\n', '        }\n', '\n', '        // TODO(pb): This should not be necessary.\n', '        if (lockedAssets.length == 0) {\n', '            delete _locked[sender];\n', '        }\n', '\n', '        collected = unlockedLiquidity.principal != 0 || unlockedLiquidity.compoundInterest != 0;\n', '        if (collected) {\n', '             emit LiquidityUnlocked(sender, unlockedLiquidity.principal, unlockedLiquidity.compoundInterest);\n', '\n', '            _accruedGlobalLocked.iSub(unlockedLiquidity);\n', '            if (lockedAssets.length != 0) {\n', '                locked.aggregate.iSub(unlockedLiquidity);\n', '            }\n', '\n', '            _accruedGlobalLiquidity.iAdd(unlockedLiquidity);\n', '\n', '            liquidity.iAdd(unlockedLiquidity);\n', '        }\n', '    }\n', '\n', '}']