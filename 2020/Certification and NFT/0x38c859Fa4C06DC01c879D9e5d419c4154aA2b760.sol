['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-16\n', '*/\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AaveMigrationWrapAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * Wrap adapter for one time token migration that returns data for wrapping LEND into AAVE\n', ' */\n', 'contract AaveMigrationWrapAdapter {\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of Aave migration contract proxy\n', '    address public immutable lendToAaveMigrationProxy;\n', '\n', '    // Address of LEND token\n', '    address public immutable lendToken;\n', '\n', '    // Address of AAVE token\n', '    address public immutable aaveToken;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _lendToAaveMigrationProxy     Address of Aave migration contract proxy\n', '     * @param _lendToken                    Address of LEND token\n', '     * @param _aaveToken                    Address of AAVE token\n', '     */\n', '    constructor(\n', '        address _lendToAaveMigrationProxy,\n', '        address _lendToken,\n', '        address _aaveToken\n', '    )\n', '        public\n', '    {\n', '        lendToAaveMigrationProxy = _lendToAaveMigrationProxy;\n', '        lendToken = _lendToken;\n', '        aaveToken = _aaveToken;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Generates the calldata to migrate LEND to AAVE.\n', '     *\n', '     * @param _underlyingToken      Address of the component to be wrapped\n', '     * @param _wrappedToken         Address of the wrapped component\n', '     * @param _underlyingUnits      Total quantity of underlying units to wrap\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of underlying units (if underlying is ETH)\n', '     * @return bytes                Wrap calldata\n', '     */\n', '    function getWrapCallData(\n', '        address _underlyingToken,\n', '        address _wrappedToken,\n', '        uint256 _underlyingUnits\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory)\n', '    {\n', '        require(_underlyingToken == lendToken, "Must be LEND token");\n', '        require(_wrappedToken == aaveToken, "Must be AAVE token");\n', '\n', '        // migrateFromLEND(uint256 _amount)\n', '        bytes memory callData = abi.encodeWithSignature("migrateFromLEND(uint256)", _underlyingUnits);\n', '\n', '        return (lendToAaveMigrationProxy, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to unwrap a wrapped asset into its underlying. Note: Migration cannot be reversed. This function\n', '     * will revert.\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of wrapped token units to unwrap. This will always be 0 for unwrapping\n', '     * @return bytes                Unwrap calldata\n', '     */\n', '    function getUnwrapCallData(\n', '        address /* _underlyingToken */,\n', '        address /* _wrappedToken */,\n', '        uint256 /* _wrappedTokenUnits */\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory)\n', '    {\n', '        revert("AAVE migration cannot be reversed");\n', '    }\n', '\n', '    /**\n', '     * Returns the address to approve source tokens for wrapping.\n', '     *\n', '     * @return address        Address of the contract to approve tokens to\n', '     */\n', '    function getSpenderAddress(address /* _underlyingToken */, address /* _wrappedToken */) external view returns(address) {\n', '        return lendToAaveMigrationProxy;\n', '    }\n', '}']