['// File: @openzeppelin\\contracts\\introspection\\IERC165.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: orchestrator\\IEthItemOrchestratorDependantElement.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IEthItemOrchestratorDependantElement is IERC165 {\n', '\n', '    /**\n', '     * @dev GET - The DoubleProxy of the DFO linked to this Contract\n', '     */\n', '    function doubleProxy() external view returns (address);\n', '\n', '    /**\n', '     * @dev SET - The DoubleProxy of the DFO linked to this Contract\n', '     * It can be done only by the Factory controller\n', '     * @param newDoubleProxy the new DoubleProxy address\n', '     */\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '\n', '    function isAuthorizedOrchestrator(address operator) external view returns(bool);\n', '}\n', '\n', '// File: factory\\IEthItemFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title IEthItemFactory\n', ' * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\n', ' */\n', 'interface IEthItemFactory is IEthItemOrchestratorDependantElement {\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     */\n', '    function ethItemInteroperableInterfaceModel() external view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Native EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function nativeModel() external view returns (address nativeModelAddress, uint256 nativeModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Native EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setNativeModel(address nativeModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     */\n', '    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     */\n', '    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\n', '     */\n', '    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\n', '     * @param erc20WrapperAmount The amount of minted EthItem\n', '     */\n', '    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\n', '     */\n', '    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\n', '     * @param erc20WrapperAmount The amount of burned EthItem\n', '     */\n', '    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev Business Logic to create a brand-new EthItem.\n', "     * It raises the 'NewNativeCreated' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createNative(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewNativeCreated(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewNativeCreated(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC1155Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC1155Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC20Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC20Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC721Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC721(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC721Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IERC1155Views.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\n', ' * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\n', ' */\n', 'interface IERC1155Views {\n', '\n', '    /**\n', '     * @dev Returns the total supply of the given token id\n', '     * @param objectId the id of the token whose availability you want to know \n', '     */\n', '    function totalSupply(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the name of the given token id\n', '     * @param objectId the id of the token whose name you want to know \n', '     */\n', '    function name(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the given token id\n', '     * @param objectId the id of the token whose symbol you want to know \n', '     */\n', '    function symbol(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals of the given token id\n', '     * @param objectId the id of the token whose decimals you want to know \n', '     */\n', '    function decimals(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the uri of the given token id\n', '     * @param objectId the id of the token whose uri you want to know \n', '     */\n', '    function uri(uint256 objectId) external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IBaseTokenData.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IBaseTokenData {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IERC20Data.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IERC20Data is IBaseTokenData, IERC20 {\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IEthItemInteroperableInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IEthItemInteroperableInterface is IERC20, IERC20Data {\n', '\n', '    function init(uint256 objectId, string memory name, string memory symbol, uint256 decimals) external;\n', '\n', '    function mainInterface() external view returns (address);\n', '\n', '    function objectId() external view returns (uint256);\n', '\n', '    function mint(address owner, uint256 amount) external;\n', '\n', '    function burn(address owner, uint256 amount) external;\n', '\n', '    function permitNonce(address sender) external view returns(uint256);\n', '\n', '    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\n', '}\n', '\n', '// File: eth-item-token-standard\\IEthItemMainInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IEthItemMainInterface is IERC1155, IERC1155Views, IBaseTokenData {\n', '\n', '    function init(\n', '        address interoperableInterfaceModel,\n', '        string calldata name,\n', '        string calldata symbol\n', '    ) external;\n', '\n', '    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\n', '\n', '    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\n', '\n', '    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\n', '\n', '    function interoperableInterfaceModel() external view returns (address, uint256);\n', '\n', '    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\n', '\n', '    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\n', '\n', '    function mint(uint256 amount, string calldata partialUri)\n', '        external\n', '        returns (uint256, address);\n', '\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function burnBatch(\n', '        uint256[] calldata objectIds,\n', '        uint256[] calldata amounts\n', '    ) external;\n', '\n', '    event NewItem(uint256 indexed objectId, address indexed tokenAddress);\n', '    event Mint(uint256 objectId, address tokenAddress, uint256 amount);\n', '}\n', '\n', '// File: models\\common\\IEthItemModelBase.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev This interface contains the commonn data provided by all the EthItem models\n', ' */\n', 'interface IEthItemModelBase is IEthItemMainInterface {\n', '\n', '    /**\n', '     * @dev Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds\n', '     * @param name the chosen name for this NFT\n', '     * @param symbol the chosen symbol (Ticker) for this NFT\n', '     */\n', '    function init(string calldata name, string calldata symbol) external;\n', '\n', '    /**\n', '     * @return modelVersionNumber The version number of the Model, it should be progressive\n', '     */\n', '    function modelVersion() external pure returns(uint256 modelVersionNumber);\n', '\n', '    /**\n', '     * @return factoryAddress the address of the Contract which initialized this EthItem\n', '     */\n', '    function factory() external view returns(address factoryAddress);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: orchestrator\\EthItemOrchestratorDependantElement.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'abstract contract EthItemOrchestratorDependantElement is IEthItemOrchestratorDependantElement, ERC165 {\n', '\n', '    string internal constant ETHITEM_ORCHESTRATOR_AUTHORIZED_KEY_PREFIX = "ehtitem.orchestrator.authorized";\n', '\n', '    address internal _doubleProxy;\n', '\n', '    constructor(address doubleProxy) public {\n', '        _doubleProxy = doubleProxy;\n', '        _registerInterfaces();\n', '        _registerSpecificInterfaces();\n', '    }\n', '\n', '    function _registerInterfaces() internal {\n', '        _registerInterface(this.setDoubleProxy.selector);\n', '    }\n', '\n', '    function _registerSpecificInterfaces() internal virtual;\n', '\n', '    modifier byOrchestrator virtual {\n', '        require(isAuthorizedOrchestrator(msg.sender), "Unauthorized Action!");\n', '        _;\n', '    }\n', '\n', '    function doubleProxy() public view override returns(address) {\n', '        return _doubleProxy;\n', '    }\n', '\n', '    function setDoubleProxy(address newDoubleProxy) public override byOrchestrator {\n', '        _doubleProxy = newDoubleProxy;\n', '    }\n', '\n', '    function isAuthorizedOrchestrator(address operator) public view override returns(bool) {\n', '        return IStateHolder(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getStateHolderAddress()).getBool(_toStateHolderKey(ETHITEM_ORCHESTRATOR_AUTHORIZED_KEY_PREFIX, _toString(operator)));\n', '    }\n', '\n', '    function _toStateHolderKey(string memory a, string memory b) internal pure returns(string memory) {\n', '        return _toLowerCase(string(abi.encodePacked(a, ".", b)));\n', '    }\n', '\n', '    function _toString(address _addr) internal pure returns(string memory) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '\n', '    function _toLowerCase(string memory str) internal pure returns(string memory) {\n', '        bytes memory bStr = bytes(str);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\n', '        }\n', '        return string(bStr);\n', '    }\n', '}\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getBool(string calldata varName) external view returns (bool);\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: factory\\EthItemFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract EthItemFactory is IEthItemFactory, EthItemOrchestratorDependantElement {\n', '\n', '    uint256[] private _mintFeePercentage;\n', '    uint256[] private _burnFeePercentage;\n', '    address private _ethItemInteroperableInterfaceModelAddress;\n', '    address private _nativeModelAddress;\n', '    address private _erc1155WrapperModelAddress;\n', '    address private _erc721WrapperModelAddress;\n', '    address private _erc20WrapperModelAddress;\n', '\n', '    constructor(\n', '        address doubleProxy,\n', '        address ethItemInteroperableInterfaceModelAddress,\n', '        address nativeModelAddress,\n', '        address erc1155WrapperModelAddress,\n', '        address erc721WrapperModelAddress,\n', '        address erc20WrapperModelAddress,\n', '        uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator,\n', '        uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public EthItemOrchestratorDependantElement(doubleProxy) {\n', '        _ethItemInteroperableInterfaceModelAddress = ethItemInteroperableInterfaceModelAddress;\n', '        _nativeModelAddress = nativeModelAddress;\n', '        _erc1155WrapperModelAddress = erc1155WrapperModelAddress;\n', '        _erc721WrapperModelAddress = erc721WrapperModelAddress;\n', '        _erc20WrapperModelAddress = erc20WrapperModelAddress;\n', '        _mintFeePercentage = new uint256[](2);\n', '        _mintFeePercentage[0] = mintFeePercentageNumerator;\n', '        _mintFeePercentage[1] = mintFeePercentageDenominator;\n', '        _burnFeePercentage = new uint256[](2);\n', '        _burnFeePercentage[0] = burnFeePercentageNumerator;\n', '        _burnFeePercentage[1] = burnFeePercentageDenominator;\n', '    }\n', '\n', '    function _registerSpecificInterfaces() internal virtual override {\n', '        _registerInterface(this.setEthItemInteroperableInterfaceModel.selector);\n', '        _registerInterface(this.setNativeModel.selector);\n', '        _registerInterface(this.setERC1155WrapperModel.selector);\n', '        _registerInterface(this.setERC20WrapperModel.selector);\n', '        _registerInterface(this.setERC721WrapperModel.selector);\n', '        _registerInterface(this.setMintFeePercentage.selector);\n', '        _registerInterface(this.setBurnFeePercentage.selector);\n', '        _registerInterface(this.createNative.selector);\n', '        _registerInterface(this.createWrappedERC1155.selector);\n', '        _registerInterface(this.createWrappedERC20.selector);\n', '        _registerInterface(this.createWrappedERC721.selector);\n', '    }\n', '\n', '    function ethItemInteroperableInterfaceModel() public override view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion) {\n', '        return (_ethItemInteroperableInterfaceModelAddress, IEthItemInteroperableInterface(_ethItemInteroperableInterfaceModelAddress).interoperableInterfaceVersion());\n', '    }\n', '\n', '    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) public override byOrchestrator {\n', '        _ethItemInteroperableInterfaceModelAddress = ethItemInteroperableInterfaceModelAddress;\n', '    }\n', '\n', '    function nativeModel() public override view returns (address nativeModelAddress, uint256 nativeModelVersion) {\n', '        return (_nativeModelAddress, IEthItemModelBase(_nativeModelAddress).modelVersion());\n', '    }\n', '\n', '    function setNativeModel(address nativeModelAddress) public override byOrchestrator {\n', '        _nativeModelAddress = nativeModelAddress;\n', '    }\n', '\n', '    function erc1155WrapperModel() public override view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion) {\n', '        return (_erc1155WrapperModelAddress, IEthItemModelBase(_erc1155WrapperModelAddress).modelVersion());\n', '    }\n', '\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byOrchestrator {\n', '        _erc1155WrapperModelAddress = erc1155WrapperModelAddress;\n', '    }\n', '\n', '    function erc20WrapperModel() public override view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion) {\n', '        return (_erc20WrapperModelAddress, IEthItemModelBase(_erc20WrapperModelAddress).modelVersion());\n', '    }\n', '\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byOrchestrator {\n', '        _erc20WrapperModelAddress = erc20WrapperModelAddress;\n', '    }\n', '\n', '    function erc721WrapperModel() public override view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion) {\n', '        return (_erc721WrapperModelAddress, IEthItemModelBase(_erc721WrapperModelAddress).modelVersion());\n', '    }\n', '\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byOrchestrator {\n', '        _erc721WrapperModelAddress = erc721WrapperModelAddress;\n', '    }\n', '\n', '    function mintFeePercentage() public override view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) {\n', '        return (_mintFeePercentage[0], _mintFeePercentage[1]);\n', '    }\n', '\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byOrchestrator {\n', '        _mintFeePercentage[0] = mintFeePercentageNumerator;\n', '        _mintFeePercentage[1] = mintFeePercentageDenominator;\n', '    }\n', '\n', '    function calculateMintFee(uint256 amountInDecimals) public override view returns (uint256 mintFee, address dfoWalletAddress) {\n', '        if(_mintFeePercentage[0] == 0 || _mintFeePercentage[1] == 0) {\n', '            return (0, address(0));\n', '        }\n', '        mintFee = ((amountInDecimals * _mintFeePercentage[0]) / _mintFeePercentage[1]);\n', '        require(mintFee > 0, "Inhexistent mint fee, amount too low.");\n', '        dfoWalletAddress = IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress();\n', '    }\n', '\n', '    function burnFeePercentage() public override view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) {\n', '        return (_burnFeePercentage[0], _burnFeePercentage[1]);\n', '    }\n', '\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byOrchestrator {\n', '        _burnFeePercentage[0] = burnFeePercentageNumerator;\n', '        _burnFeePercentage[1] = burnFeePercentageDenominator;\n', '    }\n', '\n', '    function calculateBurnFee(uint256 amountInDecimals) public override view returns (uint256 burnFee, address dfoWalletAddress) {\n', '        if(_burnFeePercentage[0] == 0 || _burnFeePercentage[1] == 0) {\n', '            return (0, address(0));\n', '        }\n', '        burnFee = ((amountInDecimals * _burnFeePercentage[0]) / _burnFeePercentage[1]);\n', '        require(burnFee > 0, "Inhexistent burn fee, amount too low.");\n', '        dfoWalletAddress = IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress();\n', '    }\n', '\n', '    function createNative(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newNativeAddress, bytes memory modelInitCallResponse) {\n', '        bool modelInitCallResult = false;\n', '        (modelInitCallResult, modelInitCallResponse) = (newNativeAddress = _clone(_nativeModelAddress)).call(modelInitCallPayload);\n', '        require(modelInitCallResult, "Model Init call failed");\n', '        IEthItemModelBase createdToken = IEthItemModelBase(newNativeAddress);\n', '        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\n', '        uint256 modelVersion = createdToken.modelVersion();\n', '        emit NewNativeCreated(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newNativeAddress);\n', '        emit NewNativeCreated(_nativeModelAddress, modelVersion, newNativeAddress, msg.sender);\n', '    }\n', '\n', '    function createWrappedERC1155(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC1155WrapperAddress, bytes memory modelInitCallResponse) {\n', '        bool modelInitCallResult = false;\n', '        (modelInitCallResult, modelInitCallResponse) = (newERC1155WrapperAddress = _clone(_erc1155WrapperModelAddress)).call(modelInitCallPayload);\n', '        require(modelInitCallResult, "Model Init call failed");\n', '        IEthItemModelBase createdToken = IEthItemModelBase(newERC1155WrapperAddress);\n', '        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\n', '        uint256 modelVersion = createdToken.modelVersion();\n', '        emit NewWrappedERC1155Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC1155WrapperAddress);\n', '        emit NewWrappedERC1155Created(_erc1155WrapperModelAddress, modelVersion, newERC1155WrapperAddress, msg.sender);\n', '    }\n', '\n', '    function createWrappedERC20(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC20Address, bytes memory modelInitCallResponse) {\n', '        bool modelInitCallResult = false;\n', '        (modelInitCallResult, modelInitCallResponse) = (newERC20Address = _clone(_erc20WrapperModelAddress)).call(modelInitCallPayload);\n', '        require(modelInitCallResult, "Model Init call failed");\n', '        IEthItemModelBase createdToken = IEthItemModelBase(newERC20Address);\n', '        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\n', '        uint256 modelVersion = createdToken.modelVersion();\n', '        emit NewWrappedERC20Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC20Address);\n', '        emit NewWrappedERC20Created(_erc20WrapperModelAddress, modelVersion, newERC20Address, msg.sender);\n', '    }\n', '\n', '    function createWrappedERC721(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC721Address, bytes memory modelInitCallResponse) {\n', '        bool modelInitCallResult = false;\n', '        (modelInitCallResult, modelInitCallResponse) = (newERC721Address = _clone(_erc721WrapperModelAddress)).call(modelInitCallPayload);\n', '        require(modelInitCallResult, "Model Init call failed");\n', '        IEthItemModelBase createdToken = IEthItemModelBase(newERC721Address);\n', '        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\n', '        uint256 modelVersion = createdToken.modelVersion();\n', '        emit NewWrappedERC721Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC721Address);\n', '        emit NewWrappedERC721Created(_erc721WrapperModelAddress, modelVersion, newERC721Address, msg.sender);\n', '    }\n', '\n', '    function _clone(address original) internal returns (address copy) {\n', '        assembly {\n', '            mstore(\n', '                0,\n', '                or(\n', '                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\n', '                    mul(original, 0x1000000000000000000)\n', '                )\n', '            )\n', '            copy := create(0, 0, 32)\n', '            switch extcodesize(copy)\n', '                case 0 {\n', '                    invalid()\n', '                }\n', '        }\n', '    }\n', '}']