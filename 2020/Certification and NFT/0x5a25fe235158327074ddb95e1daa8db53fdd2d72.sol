['pragma solidity ^0.5.16;\n', '\n', '/**\n', '  * @title Artem ERC-20 Contract\n', "  * @notice Derived from Compound's cERC20 contract\n", '  * https://github.com/compound-finance/compound-protocol/tree/master/contracts\n', '  */\n', '\n', '/**\n', '  * @title Careful Math\n', "  * @notice Derived from OpenZeppelin's SafeMath library\n", '  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '  */\n', 'contract CarefulMath {\n', '\n', '    enum MathError {\n', '        NO_ERROR,\n', '        DIVISION_BY_ZERO,\n', '        INTEGER_OVERFLOW,\n', '        INTEGER_UNDERFLOW\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, returns an error on overflow.\n', '    */\n', '    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (a == 0) {\n', '            return (MathError.NO_ERROR, 0);\n', '        }\n', '\n', '        uint c = a * b;\n', '\n', '        if (c / a != b) {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        } else {\n', '            return (MathError.NO_ERROR, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b == 0) {\n', '            return (MathError.DIVISION_BY_ZERO, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, a / b);\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b <= a) {\n', '            return (MathError.NO_ERROR, a - b);\n', '        } else {\n', '            return (MathError.INTEGER_UNDERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, returns an error on overflow.\n', '    */\n', '    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        uint c = a + b;\n', '\n', '        if (c >= a) {\n', '            return (MathError.NO_ERROR, c);\n', '        } else {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev add a and b and then subtract c\n', '    */\n', '    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n', '        (MathError err0, uint sum) = addUInt(a, b);\n', '\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, 0);\n', '        }\n', '\n', '        return subUInt(sum, c);\n', '    }\n', '}\n', '\n', 'interface ControllerInterface {\n', '\n', '    function isController() external view returns (bool);\n', '\n', '    function enterMarkets(address[] calldata aTokens) external returns (uint[] memory);\n', '    function exitMarket(address aToken) external returns (uint);\n', '\n', '    function mintAllowed(address aToken, address minter, uint mintAmount) external returns (uint);\n', '    function mintVerify(address aToken, address minter, uint mintAmount, uint mintTokens) external;\n', '\n', '    function redeemAllowed(address aToken, address redeemer, uint redeemTokens) external returns (uint);\n', '    function redeemVerify(address aToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n', '\n', '    function borrowAllowed(address aToken, address borrower, uint borrowAmount) external returns (uint);\n', '    function borrowVerify(address aToken, address borrower, uint borrowAmount) external;\n', '\n', '    function repayBorrowAllowed(\n', '        address aToken,\n', '        address payer,\n', '        address borrower,\n', '        uint repayAmount) external returns (uint);\n', '        \n', '    function repayBorrowVerify(\n', '        address aToken,\n', '        address payer,\n', '        address borrower,\n', '        uint repayAmount,\n', '        uint borrowerIndex) external;\n', '\n', '    function liquidateBorrowAllowed(\n', '        address aTokenBorrowed,\n', '        address aTokenCollateral,\n', '        address liquidator,\n', '        address borrower,\n', '        uint repayAmount) external returns (uint);\n', '        \n', '    function liquidateBorrowVerify(\n', '        address aTokenBorrowed,\n', '        address aTokenCollateral,\n', '        address liquidator,\n', '        address borrower,\n', '        uint repayAmount,\n', '        uint seizeTokens) external;\n', '\n', '    function seizeAllowed(\n', '        address aTokenCollateral,\n', '        address aTokenBorrowed,\n', '        address liquidator,\n', '        address borrower,\n', '        uint seizeTokens) external returns (uint);\n', '        \n', '    function seizeVerify(\n', '        address aTokenCollateral,\n', '        address aTokenBorrowed,\n', '        address liquidator,\n', '        address borrower,\n', '        uint seizeTokens) external;\n', '\n', '    function transferAllowed(address aToken, address src, address dst, uint transferTokens) external returns (uint);\n', '    function transferVerify(address aToken, address src, address dst, uint transferTokens) external;\n', '\n', '    /*** Liquidity/Liquidation Calculations ***/\n', '\n', '    function liquidateCalculateSeizeTokens(\n', '        address aTokenBorrowed,\n', '        address aTokenCollateral,\n', '        uint repayAmount) external view returns (uint, uint);\n', '}\n', '\n', '\n', 'contract ControllerErrorReporter {\n', '\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '    \n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED,\n', '        CONTROLLER_MISMATCH,\n', '        INSUFFICIENT_SHORTFALL,\n', '        INSUFFICIENT_LIQUIDITY,\n', '        INVALID_CLOSE_FACTOR,\n', '        INVALID_COLLATERAL_FACTOR,\n', '        INVALID_LIQUIDATION_INCENTIVE,\n', '        MARKET_NOT_ENTERED,\n', '        MARKET_NOT_LISTED,\n', '        MARKET_ALREADY_LISTED,\n', '        MATH_ERROR,\n', '        NONZERO_BORROW_BALANCE,\n', '        PRICE_ERROR,\n', '        REJECTION,\n', '        SNAPSHOT_ERROR,\n', '        TOO_MANY_ASSETS,\n', '        TOO_MUCH_REPAY\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n', '        EXIT_MARKET_BALANCE_OWED,\n', '        EXIT_MARKET_REJECTION,\n', '        SET_CLOSE_FACTOR_OWNER_CHECK,\n', '        SET_CLOSE_FACTOR_VALIDATION,\n', '        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n', '        SET_COLLATERAL_FACTOR_NO_EXISTS,\n', '        SET_COLLATERAL_FACTOR_VALIDATION,\n', '        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n', '        SET_IMPLEMENTATION_OWNER_CHECK,\n', '        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n', '        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n', '        SET_MAX_ASSETS_OWNER_CHECK,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n', '        SET_PRICE_ORACLE_OWNER_CHECK,\n', '        SUPPORT_MARKET_EXISTS,\n', '        SUPPORT_MARKET_OWNER_CHECK,\n', '        ZUNUSED\n', '    }\n', '\n', '    \n', '}\n', '\n', 'contract TokenErrorReporter {\n', '\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '    \n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED,\n', '        BAD_INPUT,\n', '        CONTROLLER_REJECTION,\n', '        CONTROLLER_CALCULATION_ERROR,\n', '        INTEREST_RATE_MODEL_ERROR,\n', '        INVALID_ACCOUNT_PAIR,\n', '        INVALID_CLOSE_AMOUNT_REQUESTED,\n', '        INVALID_COLLATERAL_FACTOR,\n', '        MATH_ERROR,\n', '        MARKET_NOT_FRESH,\n', '        MARKET_NOT_LISTED,\n', '        TOKEN_INSUFFICIENT_ALLOWANCE,\n', '        TOKEN_INSUFFICIENT_BALANCE,\n', '        TOKEN_INSUFFICIENT_CASH,\n', '        TOKEN_TRANSFER_IN_FAILED,\n', '        TOKEN_TRANSFER_OUT_FAILED\n', '    }\n', '\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n', '        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n', '        BORROW_ACCRUE_INTEREST_FAILED,\n', '        BORROW_CASH_NOT_AVAILABLE,\n', '        BORROW_FRESHNESS_CHECK,\n', '        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n', '        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n', '        BORROW_MARKET_NOT_LISTED,\n', '        BORROW_CONTROLLER_REJECTION,\n', '        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n', '        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n', '        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n', '        LIQUIDATE_CONTROLLER_REJECTION,\n', '        LIQUIDATE_CONTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n', '        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n', '        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n', '        LIQUIDATE_FRESHNESS_CHECK,\n', '        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n', '        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n', '        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n', '        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n', '        LIQUIDATE_SEIZE_CONTROLLER_REJECTION,\n', '        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n', '        LIQUIDATE_SEIZE_TOO_MUCH,\n', '        MINT_ACCRUE_INTEREST_FAILED,\n', '        MINT_CONTROLLER_REJECTION,\n', '        MINT_EXCHANGE_CALCULATION_FAILED,\n', '        MINT_EXCHANGE_RATE_READ_FAILED,\n', '        MINT_FRESHNESS_CHECK,\n', '        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n', '        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n', '        MINT_TRANSFER_IN_FAILED,\n', '        MINT_TRANSFER_IN_NOT_POSSIBLE,\n', '        REDEEM_ACCRUE_INTEREST_FAILED,\n', '        REDEEM_CONTROLLER_REJECTION,\n', '        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n', '        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n', '        REDEEM_EXCHANGE_RATE_READ_FAILED,\n', '        REDEEM_FRESHNESS_CHECK,\n', '        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n', '        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n', '        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n', '        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n', '        REDUCE_RESERVES_ADMIN_CHECK,\n', '        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n', '        REDUCE_RESERVES_FRESH_CHECK,\n', '        REDUCE_RESERVES_VALIDATION,\n', '        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n', '        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n', '        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_CONTROLLER_REJECTION,\n', '        REPAY_BORROW_FRESHNESS_CHECK,\n', '        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n', '        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n', '        SET_COLLATERAL_FACTOR_VALIDATION,\n', '        SET_CONTROLLER_OWNER_CHECK,\n', '        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n', '        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n', '        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n', '        SET_MAX_ASSETS_OWNER_CHECK,\n', '        SET_ORACLE_MARKET_NOT_LISTED,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n', '        SET_RESERVE_FACTOR_ADMIN_CHECK,\n', '        SET_RESERVE_FACTOR_FRESH_CHECK,\n', '        SET_RESERVE_FACTOR_BOUNDS_CHECK,\n', '        TRANSFER_CONTROLLER_REJECTION,\n', '        TRANSFER_NOT_ALLOWED,\n', '        TRANSFER_NOT_ENOUGH,\n', '        TRANSFER_TOO_MUCH\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract Exponential is CarefulMath {\n', '    uint constant expScale = 1e18;\n', '    uint constant halfExpScale = expScale/2;\n', '    uint constant mantissaOne = expScale;\n', '\n', '    struct Exp {\n', '        uint mantissa;\n', '    }\n', '\n', '    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n', '    }\n', '\n', '    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n', '    }\n', '\n', '    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(product));\n', '    }\n', '\n', '    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return addUInt(truncate(product), addend);\n', '    }\n', '\n', '    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n', '    }\n', '\n', '    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n', '        /*\n', '          We are doing this as:\n', '          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n', '\n', '          How it works:\n', '          Exp = a / b;\n', '          Scalar = s;\n', '          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n', '        */\n', '        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '        return getExp(numerator, divisor.mantissa);\n', '    }\n', '\n', '    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(fraction));\n', '    }\n', '\n', '    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '\n', '        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        // We add half the scale before dividing so that we get rounding instead of truncation.\n', '        //  See "Listing 6" and text above it at https://accu.org/index.php/journals/1717\n', '        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n', '        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n', '        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n', '        assert(err2 == MathError.NO_ERROR);\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: product}));\n', '    }\n', '\n', '    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n', '        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n', '    }\n', '\n', '    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n', '        (MathError err, Exp memory ab) = mulExp(a, b);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, ab);\n', '        }\n', '        return mulExp(ab, c);\n', '    }\n', '\n', '    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        return getExp(a.mantissa, b.mantissa);\n', '    }\n', '\n', '    function truncate(Exp memory exp) pure internal returns (uint) {\n', "        // Note: We are not using careful math here as we're performing a division that cannot fail\n", '        return exp.mantissa / expScale;\n', '    }\n', '\n', '    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa < right.mantissa; //TODO: Add some simple tests and this in another PR yo.\n', '    }\n', '\n', '    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa <= right.mantissa;\n', '    }\n', '\n', '    function isZeroExp(Exp memory value) pure internal returns (bool) {\n', '        return value.mantissa == 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC 20 Token Standard Interface\n', ' *  https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface EIP20Interface {\n', '\n', '    /**\n', '      * @notice Get the total number of tokens in circulation\n', '      * @return The supply of tokens\n', '      */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Gets the balance of the specified address\n', '     * @param owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '      * @param dst The address of the destination account\n', '      * @param amount The number of tokens to transfer\n', '      * @return Whether or not the transfer succeeded\n', '      */\n', '    function transfer(address dst, uint256 amount) external returns (bool success);\n', '\n', '    /**\n', '      * @notice Transfer `amount` tokens from `src` to `dst`\n', '      * @param src The address of the source account\n', '      * @param dst The address of the destination account\n', '      * @param amount The number of tokens to transfer\n', '      * @return Whether or not the transfer succeeded\n', '      */\n', '    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\n', '\n', '    /**\n', '      * @notice Approve `spender` to transfer up to `amount` from `src`\n', '      * @dev This will overwrite the approval amount for `spender`\n', '      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '      * @param spender The address of the account which may transfer tokens\n', '      * @param amount The number of tokens that are approved (-1 means infinite)\n', '      * @return Whether or not the approval succeeded\n', '      */\n', '    function approve(address spender, uint256 amount) external returns (bool success);\n', '\n', '    /**\n', '      * @notice Get the current allowance from `owner` for `spender`\n', '      * @param owner The address of the account which owns the tokens to be spent\n', '      * @param spender The address of the account which may transfer tokens\n', '      * @return The number of tokens allowed to be spent (-1 means infinite)\n', '      */\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '}\n', '\n', '\n', '/**\n', ' *  @title EIP20NonStandardInterface\n', ' *  notice: Version of ERC20 with no return values for `transfer` and `transferFrom`\n', ' *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', ' */\n', 'interface EIP20NonStandardInterface {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address dst, uint256 amount) external;\n', '\n', '    function transferFrom(address src, address dst, uint256 amount) external;\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool success);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () public {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "re-entered");\n', '    }\n', '}\n', '\n', '\n', 'interface InterestRateModel {\n', '\n', '    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint, uint);\n', '\n', '    function isInterestRateModel() external view returns (bool);\n', '}\n', '\n', '\n', 'contract AToken is EIP20Interface, Exponential, TokenErrorReporter, ReentrancyGuard {\n', '    /**\n', '     * @notice Indicator that this is a AToken contract (for inspection)\n', '     */\n', '    bool public constant isAToken = true;\n', '\n', '    /**\n', '     * @notice EIP-20 token name for this token\n', '     */\n', '    string public name;\n', '\n', '    /**\n', '     * @notice EIP-20 token symbol for this token\n', '     */\n', '    string public symbol;\n', '\n', '    /**\n', '     * @notice EIP-20 token decimals for this token\n', '     */\n', '    uint public decimals;\n', '\n', '    /**\n', '     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\n', '     */\n', '    uint constant borrowRateMaxMantissa = 5e14;\n', '\n', '    /**\n', '     * @notice Maximum fraction of interest that can be set aside for reserves\n', '     */\n', '    uint constant reserveFactorMaxMantissa = 1e18;\n', '\n', '    /**\n', '     * @notice Administrator for this contract\n', '     */\n', '    address payable public admin;\n', '\n', '    /**\n', '     * @notice Pending administrator for this contract\n', '     */\n', '    address payable public pendingAdmin;\n', '\n', '    /**\n', '     * @notice Contract which oversees inter-aToken operations\n', '     */\n', '    ControllerInterface public controller;\n', '\n', '    /**\n', '     * @notice Model which tells what the current interest rate should be\n', '     */\n', '    InterestRateModel public interestRateModel;\n', '\n', '    /**\n', '     * @notice Initial exchange rate used when minting the first ATokens (used when totalSupply = 0)\n', '     */\n', '    uint public initialExchangeRateMantissa;\n', '\n', '    /**\n', '     * @notice Fraction of interest currently set aside for reserves\n', '     */\n', '    uint public reserveFactorMantissa;\n', '\n', '    /**\n', '     * @notice Block number that interest was last accrued at\n', '     */\n', '    uint public accrualBlockNumber;\n', '\n', '    /**\n', '     * @notice Accumulator of total earned interest since the opening of the market\n', '     */\n', '    uint public borrowIndex;\n', '\n', '    /**\n', '     * @notice Total amount of outstanding borrows of the underlying in this market\n', '     */\n', '    uint public totalBorrows;\n', '\n', '    /**\n', '     * @notice Total amount of reserves of the underlying held in this market\n', '     */\n', '    uint public totalReserves;\n', '\n', '    /**\n', '     * @notice Total number of tokens in circulation\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /**\n', '     * @notice Official record of token balances for each account\n', '     */\n', '    mapping (address => uint256) accountTokens;\n', '\n', '    /**\n', '     * @notice Approved token transfer amounts on behalf of others\n', '     */\n', '    mapping (address => mapping (address => uint256)) transferAllowances;\n', '\n', '    /**\n', '     * @notice Container for borrow balance information\n', '     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n', '     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n', '     */\n', '    struct BorrowSnapshot {\n', '        uint principal;\n', '        uint interestIndex;\n', '    }\n', '\n', '    /**\n', '     * @notice Mapping of account addresses to outstanding borrow balances\n', '     */\n', '    mapping(address => BorrowSnapshot) accountBorrows;\n', '\n', '\n', '    /*** Market Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when interest is accrued\n', '     */\n', '    event AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are minted\n', '     */\n', '    event Mint(address minter, uint mintAmount, uint mintTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are redeemed\n', '     */\n', '    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when underlying is borrowed\n', '     */\n', '    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is repaid\n', '     */\n', '    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is liquidated\n', '     */\n', '    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address aTokenCollateral, uint seizeTokens);\n', '\n', '\n', '    /*** Admin Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when pendingAdmin is changed\n', '     */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n', '     */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @notice Event emitted when controller is changed\n', '     */\n', '    event NewController(ControllerInterface oldController, ControllerInterface newController);\n', '\n', '    /**\n', '     * @notice Event emitted when interestRateModel is changed\n', '     */\n', '    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserve factor is changed\n', '     */\n', '    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserves are reduced\n', '     */\n', '    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\n', '\n', '    constructor( ) public { \n', '        admin = msg.sender;\n', '\n', '        // Set initial exchange rate\n', '        initialExchangeRateMantissa = uint(20000000000000000);\n', '\n', '        // Initialize block number and borrow index (block number mocks depend on controller being set)\n', '        accrualBlockNumber = getBlockNumber();\n', '        borrowIndex = mantissaOne;\n', '\n', '        name = string("Artem BaconCoin");\n', '        symbol = string("aBAK");\n', '        decimals = uint(8);\n', '    }\n', '\n', '    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n', '        /* Fail if transfer not allowed */\n', '        uint allowed = controller.transferAllowed(address(this), src, dst, tokens);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.TRANSFER_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', '        /* Do not allow self-transfers */\n', '        if (src == dst) {\n', '            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n', '        }\n', '\n', '        /* Get the allowance, infinite for the account owner */\n', '        uint startingAllowance = 0;\n', '        if (spender == src) {\n', '            startingAllowance = uint(-1);\n', '        } else {\n', '            startingAllowance = transferAllowances[src][spender];\n', '        }\n', '\n', '        /* Do the calculations, checking for {under,over}flow */\n', '        MathError mathErr;\n', '        uint allowanceNew;\n', '        uint srcTokensNew;\n', '        uint dstTokensNew;\n', '\n', '        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n', '        }\n', '\n', '        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n', '        }\n', '\n', '        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        accountTokens[src] = srcTokensNew;\n', '        accountTokens[dst] = dstTokensNew;\n', '\n', '        /* Eat some of the allowance (if necessary) */\n', '        if (startingAllowance != uint(-1)) {\n', '            transferAllowances[src][spender] = allowanceNew;\n', '        }\n', '\n', '        /* We emit a Transfer event */\n', '        emit Transfer(src, dst, tokens);\n', '\n', '        /* We call the defense hook (which checks for under-collateralization) */\n', '        controller.transferVerify(address(this), src, dst, tokens);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\n', '        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\n', '        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        address src = msg.sender;\n', '        transferAllowances[src][spender] = amount;\n', '        emit Approval(src, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the current allowance from `owner` for `spender`\n', '     * @param owner The address of the account which owns the tokens to be spent\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @return The number of tokens allowed to be spent (-1 means infinite)\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return transferAllowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the token balance of the `owner`\n', '     * @param owner The address of the account to query\n', '     * @return The number of tokens owned by `owner`\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256) {\n', '        return accountTokens[owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the underlying balance of the `owner`\n', '     * @dev This also accrues interest in a transaction\n', '     * @param owner The address of the account to query\n', '     * @return The amount of underlying owned by `owner`\n', '     */\n', '    function balanceOfUnderlying(address owner) external returns (uint) {\n', '        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n', '        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\n', '        require(mErr == MathError.NO_ERROR);\n', '        return balance;\n', '    }\n', '\n', '    /**\n', "     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n", '     * @dev This is used by controller to more efficiently perform liquidity checks.\n', '     * @param account Address of the account to snapshot\n', '     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n', '     */\n', '    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\n', '        uint aTokenBalance = accountTokens[account];\n', '        uint borrowBalance;\n', '        uint exchangeRateMantissa;\n', '\n', '        MathError mErr;\n', '\n', '        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\n', '        if (mErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0, 0, 0);\n', '        }\n', '\n', '        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\n', '        if (mErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0, 0, 0);\n', '        }\n', '\n', '        return (uint(Error.NO_ERROR), aTokenBalance, borrowBalance, exchangeRateMantissa);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to simply retrieve block number\n', '     *  This exists mainly for inheriting test contracts to stub this result.\n', '     */\n', '    function getBlockNumber() internal view returns (uint) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the current per-block borrow interest rate for this aToken\n', '     * @return The borrow interest rate per block, scaled by 1e18\n', '     */\n', '    function borrowRatePerBlock() external view returns (uint) {\n', '        (uint opaqueErr, uint borrowRateMantissa) = interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n', '        require(opaqueErr == 0, "borrowRatePerBlock: interestRateModel.borrowRate failed"); // semi-opaque\n', '        return borrowRateMantissa;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the current per-block supply interest rate for this aToken\n', '     * @return The supply interest rate per block, scaled by 1e18\n', '     */\n', '    function supplyRatePerBlock() external view returns (uint) {\n', '        /* We calculate the supply rate:\n', '         *  underlying = totalSupply × exchangeRate\n', '         *  borrowsPer = totalBorrows ÷ underlying\n', '         *  supplyRate = borrowRate × (1-reserveFactor) × borrowsPer\n', '         */\n', '        uint exchangeRateMantissa = exchangeRateStored();\n', '\n', '        (uint e0, uint borrowRateMantissa) = interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n', '        require(e0 == 0, "supplyRatePerBlock: calculating borrowRate failed"); // semi-opaque\n', '\n', '        (MathError e1, Exp memory underlying) = mulScalar(Exp({mantissa: exchangeRateMantissa}), totalSupply);\n', '        require(e1 == MathError.NO_ERROR, "supplyRatePerBlock: calculating underlying failed");\n', '\n', '        (MathError e2, Exp memory borrowsPer) = divScalarByExp(totalBorrows, underlying);\n', '        require(e2 == MathError.NO_ERROR, "supplyRatePerBlock: calculating borrowsPer failed");\n', '\n', '        (MathError e3, Exp memory oneMinusReserveFactor) = subExp(Exp({mantissa: mantissaOne}), Exp({mantissa: reserveFactorMantissa}));\n', '        require(e3 == MathError.NO_ERROR, "supplyRatePerBlock: calculating oneMinusReserveFactor failed");\n', '\n', '        (MathError e4, Exp memory supplyRate) = mulExp3(Exp({mantissa: borrowRateMantissa}), oneMinusReserveFactor, borrowsPer);\n', '        require(e4 == MathError.NO_ERROR, "supplyRatePerBlock: calculating supplyRate failed");\n', '\n', '        return supplyRate.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the current total borrows plus accrued interest\n', '     * @return The total borrows with interest\n', '     */\n', '    function totalBorrowsCurrent() external nonReentrant returns (uint) {\n', '        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");\n', '        return totalBorrows;\n', '    }\n', '\n', '    /**\n', "     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n", '     * @param account The address whose balance should be calculated after updating borrowIndex\n', '     * @return The calculated balance\n', '     */\n', '    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\n', '        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");\n', '        return borrowBalanceStored(account);\n', '    }\n', '\n', '    /**\n', '     * @notice Return the borrow balance of account based on stored data\n', '     * @param account The address whose balance should be calculated\n', '     * @return The calculated balance\n', '     */\n', '    function borrowBalanceStored(address account) public view returns (uint) {\n', '        (MathError err, uint result) = borrowBalanceStoredInternal(account);\n', '        require(err == MathError.NO_ERROR, "borrowBalanceStored: borrowBalanceStoredInternal failed");\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the borrow balance of account based on stored data\n', '     * @param account The address whose balance should be calculated\n', '     * @return (error code, the calculated balance or 0 if error code is non-zero)\n', '     */\n', '    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\n', '        /* Note: we do not assert that the market is up to date */\n', '        MathError mathErr;\n', '        uint principalTimesIndex;\n', '        uint result;\n', '\n', '        /* Get borrowBalance and borrowIndex */\n', '        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n', '\n', '        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n', '         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n', '         */\n', '        if (borrowSnapshot.principal == 0) {\n', '            return (MathError.NO_ERROR, 0);\n', '        }\n', '\n', '        /* Calculate new borrow balance using the interest index:\n', '         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n', '         */\n', '        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (mathErr, 0);\n', '        }\n', '\n', '        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (mathErr, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, result);\n', '    }\n', '\n', '    /**\n', '     * @notice Accrue interest then return the up-to-date exchange rate\n', '     * @return Calculated exchange rate scaled by 1e18\n', '     */\n', '    function exchangeRateCurrent() public nonReentrant returns (uint) {\n', '        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");\n', '        return exchangeRateStored();\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the exchange rate from the underlying to the AToken\n', '     * @dev This function does not accrue interest before calculating the exchange rate\n', '     * @return Calculated exchange rate scaled by 1e18\n', '     */\n', '    function exchangeRateStored() public view returns (uint) {\n', '        (MathError err, uint result) = exchangeRateStoredInternal();\n', '        require(err == MathError.NO_ERROR, "exchangeRateStored: exchangeRateStoredInternal failed");\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the exchange rate from the underlying to the AToken\n', '     * @dev This function does not accrue interest before calculating the exchange rate\n', '     * @return (error code, calculated exchange rate scaled by 1e18)\n', '     */\n', '    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\n', '        if (totalSupply == 0) {\n', '            /*\n', '             * If there are no tokens minted:\n', '             *  exchangeRate = initialExchangeRate\n', '             */\n', '            return (MathError.NO_ERROR, initialExchangeRateMantissa);\n', '        } else {\n', '            /*\n', '             * Otherwise:\n', '             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n', '             */\n', '            uint totalCash = getCashPrior();\n', '            uint cashPlusBorrowsMinusReserves;\n', '            Exp memory exchangeRate;\n', '            MathError mathErr;\n', '\n', '            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\n', '            if (mathErr != MathError.NO_ERROR) {\n', '                return (mathErr, 0);\n', '            }\n', '\n', '            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, totalSupply);\n', '            if (mathErr != MathError.NO_ERROR) {\n', '                return (mathErr, 0);\n', '            }\n', '\n', '            return (MathError.NO_ERROR, exchangeRate.mantissa);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get cash balance of this aToken in the underlying asset\n', '     * @return The quantity of underlying asset owned by this contract\n', '     */\n', '    function getCash() external view returns (uint) {\n', '        return getCashPrior();\n', '    }\n', '\n', '    struct AccrueInterestLocalVars {\n', '        MathError mathErr;\n', '        uint opaqueErr;\n', '        uint borrowRateMantissa;\n', '        uint currentBlockNumber;\n', '        uint blockDelta;\n', '\n', '        Exp simpleInterestFactor;\n', '\n', '        uint interestAccumulated;\n', '        uint totalBorrowsNew;\n', '        uint totalReservesNew;\n', '        uint borrowIndexNew;\n', '    }\n', '    \n', '    function getCash_pub() public returns (uint) {\n', '        return getCashPrior();\n', '    }\n', '    \n', '    /**\n', '      * @notice Applies accrued interest to total borrows and reserves.\n', '      * @dev This calculates interest accrued from the last checkpointed block\n', '      *      up to the current block and writes new checkpoint to storage.\n', '      */\n', '    function accrueInterest() public returns (uint) {\n', '        AccrueInterestLocalVars memory vars;\n', '\n', '        /* Calculate the current borrow interest rate */\n', '        (vars.opaqueErr, vars.borrowRateMantissa) = interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n', '\n', '        require(vars.borrowRateMantissa <= borrowRateMaxMantissa, "borrow rate is absurdly high");\n', '        if (vars.opaqueErr != 0) {\n', '            return failOpaque(Error.INTEREST_RATE_MODEL_ERROR, FailureInfo.ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED, vars.opaqueErr);\n', '        }\n', '\n', '        /* Remember the initial block number */\n', '        vars.currentBlockNumber = getBlockNumber();\n', '\n', '        /* Calculate the number of blocks elapsed since the last accrual */\n', '        (vars.mathErr, vars.blockDelta) = subUInt(vars.currentBlockNumber, accrualBlockNumber);\n', "        assert(vars.mathErr == MathError.NO_ERROR); // Block delta should always succeed and if it doesn't, blow up.\n", '\n', '        /*\n', '         * Calculate the interest accumulated into borrows and reserves and the new index:\n', '         *  simpleInterestFactor = borrowRate * blockDelta\n', '         *  interestAccumulated = simpleInterestFactor * totalBorrows\n', '         *  totalBorrowsNew = interestAccumulated + totalBorrows\n', '         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n', '         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n', '         */\n', '        (vars.mathErr, vars.simpleInterestFactor) = mulScalar(Exp({mantissa: vars.borrowRateMantissa}), vars.blockDelta);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.interestAccumulated) = mulScalarTruncate(vars.simpleInterestFactor, totalBorrows);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.totalBorrowsNew) = addUInt(vars.interestAccumulated, totalBorrows);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), vars.interestAccumulated, totalReserves);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.borrowIndexNew) = mulScalarTruncateAddUInt(vars.simpleInterestFactor, borrowIndex, borrowIndex);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /* We write the previously calculated values into storage */\n', '        accrualBlockNumber = vars.currentBlockNumber;\n', '        borrowIndex = vars.borrowIndexNew;\n', '        totalBorrows = vars.totalBorrowsNew;\n', '        totalReserves = vars.totalReservesNew;\n', '\n', '        /* We emit an AccrueInterest event */\n', '        emit AccrueInterest(vars.interestAccumulated, vars.borrowIndexNew, totalBorrows);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender supplies assets into the market and receives aTokens in exchange\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param mintAmount The amount of the underlying asset to supply\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function mintInternal(uint mintAmount) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n', '            return fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n", '        return mintFresh(msg.sender, mintAmount);\n', '    }\n', '\n', '    struct MintLocalVars {\n', '        Error err;\n', '        MathError mathErr;\n', '        uint exchangeRateMantissa;\n', '        uint mintTokens;\n', '        uint totalSupplyNew;\n', '        uint accountTokensNew;\n', '    }\n', '    \n', '    /**\n', '     * @notice User supplies assets into the market and receives aTokens in exchange\n', '     * @dev Assumes interest has already been accrued up to the current block\n', '     * @param minter The address of the account which is supplying the assets\n', '     * @param mintAmount The amount of the underlying asset to supply\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function mintFresh(address minter, uint mintAmount) internal returns (uint) {\n', '        /* Fail if mint not allowed */\n', '        uint allowed = controller.mintAllowed(address(this), minter, mintAmount);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.MINT_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', "        /* Verify market's block number equals current block number */\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK);\n', '        }\n', '\n', '        MintLocalVars memory vars;\n', '\n', '        /* Fail if checkTransferIn fails */\n', '        vars.err = checkTransferIn(minter, mintAmount);\n', '        if (vars.err != Error.NO_ERROR) {\n', '            return fail(vars.err, FailureInfo.MINT_TRANSFER_IN_NOT_POSSIBLE);\n', '        }\n', '\n', '        /*\n', '         * We get the current exchange rate and calculate the number of aTokens to be minted:\n', '         *  mintTokens = mintAmount / exchangeRate\n', '         */\n', '        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(mintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /*\n', '         * We calculate the new total supply of aTokens and minter token balance, checking for overflow:\n', '         *  totalSupplyNew = totalSupply + mintTokens\n', '         *  accountTokensNew = accountTokens[minter] + mintTokens\n', '         */\n', '        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /*\n', '         * We call doTransferIn for the minter and the mintAmount\n', '         *  Note: The aToken must handle variations between ERC-20 and ETH underlying.\n', '         *  On success, the aToken holds an additional mintAmount of cash.\n', '         *  If doTransferIn fails despite the fact we checked pre-conditions,\n', "         *   we revert because we can't be sure if side effects occurred.\n", '         */\n', '        vars.err = doTransferIn(minter, mintAmount);\n', '        if (vars.err != Error.NO_ERROR) {\n', '            return fail(vars.err, FailureInfo.MINT_TRANSFER_IN_FAILED);\n', '        }\n', '\n', '        /* We write previously calculated values into storage */\n', '        totalSupply = vars.totalSupplyNew;\n', '        accountTokens[minter] = vars.accountTokensNew;\n', '\n', '        /* We emit a Mint event, and a Transfer event */\n', '        emit Mint(minter, mintAmount, vars.mintTokens);\n', '        emit Transfer(address(this), minter, vars.mintTokens);\n', '\n', '        /* We call the defense hook */\n', '        controller.mintVerify(address(this), minter, mintAmount, vars.mintTokens);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender redeems aTokens in exchange for the underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param redeemTokens The number of aTokens to redeem into underlying\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n', '            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n", '        return redeemFresh(msg.sender, redeemTokens, 0);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender redeems aTokens in exchange for a specified amount of underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param redeemAmount The amount of underlying to redeem\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n', '            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n", '        return redeemFresh(msg.sender, 0, redeemAmount);\n', '    }\n', '\n', '    struct RedeemLocalVars {\n', '        Error err;\n', '        MathError mathErr;\n', '        uint exchangeRateMantissa;\n', '        uint redeemTokens;\n', '        uint redeemAmount;\n', '        uint totalSupplyNew;\n', '        uint accountTokensNew;\n', '    }\n', '\n', '    /**\n', '     * @notice User redeems aTokens in exchange for the underlying asset\n', '     * @dev Assumes interest has already been accrued up to the current block\n', '     * @param redeemer The address of the account which is redeeming the tokens\n', '     * @param redeemTokensIn The number of aTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be zero)\n', '     * @param redeemAmountIn The number of aTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be zero)\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n', '        require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of redeemTokensIn or redeemAmountIn must be zero");\n', '\n', '        RedeemLocalVars memory vars;\n', '\n', '        /* exchangeRate = invoke Exchange Rate Stored() */\n', '        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /* If redeemTokensIn > 0: */\n', '        if (redeemTokensIn > 0) {\n', '            /*\n', '             * We calculate the exchange rate and the amount of underlying to be redeemed:\n', '             *  redeemTokens = redeemTokensIn\n', '             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n', '             */\n', '            vars.redeemTokens = redeemTokensIn;\n', '\n', '            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n', '            if (vars.mathErr != MathError.NO_ERROR) {\n', '                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n', '            }\n', '        } else {\n', '            /*\n', '             * We get the current exchange rate and calculate the amount to be redeemed:\n', '             *  redeemTokens = redeemAmountIn / exchangeRate\n', '             *  redeemAmount = redeemAmountIn\n', '             */\n', '\n', '            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n', '            if (vars.mathErr != MathError.NO_ERROR) {\n', '                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n', '            }\n', '\n', '            vars.redeemAmount = redeemAmountIn;\n', '        }\n', '\n', '        /* Fail if redeem not allowed */\n', '        uint allowed = controller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.REDEEM_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', "        /* Verify market's block number equals current block number */\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n', '        }\n', '\n', '        /*\n', '         * We calculate the new total supply and redeemer balance, checking for underflow:\n', '         *  totalSupplyNew = totalSupply - redeemTokens\n', '         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n', '         */\n', '        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /* Fail gracefully if protocol has insufficient cash */\n', '        if (getCashPrior() < vars.redeemAmount) {\n', '            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /*\n', '         * We invoke doTransferOut for the redeemer and the redeemAmount.\n', '         *  Note: The aToken must handle variations between ERC-20 and ETH underlying.\n', '         *  On success, the aToken has redeemAmount less of cash.\n', '         *  If doTransferOut fails despite the fact we checked pre-conditions,\n', "         *   we revert because we can't be sure if side effects occurred.\n", '         */\n', '        vars.err = doTransferOut(redeemer, vars.redeemAmount);\n', '        require(vars.err == Error.NO_ERROR, "redeem transfer out failed");\n', '\n', '        /* We write previously calculated values into storage */\n', '        totalSupply = vars.totalSupplyNew;\n', '        accountTokens[redeemer] = vars.accountTokensNew;\n', '\n', '        /* We emit a Transfer event, and a Redeem event */\n', '        emit Transfer(redeemer, address(this), vars.redeemTokens);\n', '        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n', '\n', '        /* We call the defense hook */\n', '        controller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sender borrows assets from the protocol to their own address\n', '      * @param borrowAmount The amount of the underlying asset to borrow\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n', '            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n", '        return borrowFresh(msg.sender, borrowAmount);\n', '    }\n', '\n', '    struct BorrowLocalVars {\n', '        Error err;\n', '        MathError mathErr;\n', '        uint accountBorrows;\n', '        uint accountBorrowsNew;\n', '        uint totalBorrowsNew;\n', '    }\n', '\n', '    /**\n', '      * @notice Users borrow assets from the protocol to their own address\n', '      * @param borrowAmount The amount of the underlying asset to borrow\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\n', '        /* Fail if borrow not allowed */\n', '        uint allowed = controller.borrowAllowed(address(this), borrower, borrowAmount);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.BORROW_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', "        /* Verify market's block number equals current block number */\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n', '        }\n', '\n', '        /* Fail gracefully if protocol has insufficient underlying cash */\n', '        if (getCashPrior() < borrowAmount) {\n', '            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n', '        }\n', '\n', '        BorrowLocalVars memory vars;\n', '\n', '        /*\n', '         * We calculate the new borrower and total borrow balances, failing on overflow:\n', '         *  accountBorrowsNew = accountBorrows + borrowAmount\n', '         *  totalBorrowsNew = totalBorrows + borrowAmount\n', '         */\n', '        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /*\n', '         * We invoke doTransferOut for the borrower and the borrowAmount.\n', '         *  Note: The aToken must handle variations between ERC-20 and ETH underlying.\n', '         *  On success, the aToken borrowAmount less of cash.\n', '         *  If doTransferOut fails despite the fact we checked pre-conditions,\n', "         *   we revert because we can't be sure if side effects occurred.\n", '         */\n', '        vars.err = doTransferOut(borrower, borrowAmount);\n', '        require(vars.err == Error.NO_ERROR, "borrow transfer out failed");\n', '\n', '        /* We write the previously calculated values into storage */\n', '        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n', '        accountBorrows[borrower].interestIndex = borrowIndex;\n', '        totalBorrows = vars.totalBorrowsNew;\n', '\n', '        /* We emit a Borrow event */\n', '        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n', '\n', '        /* We call the defense hook */\n', '        controller.borrowVerify(address(this), borrower, borrowAmount);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender repays their own borrow\n', '     * @param repayAmount The amount to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n', '            return fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n", '        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender repays a borrow belonging to borrower\n', '     * @param borrower the account with the debt being payed off\n', '     * @param repayAmount The amount to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n', '            return fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n", '        return repayBorrowFresh(msg.sender, borrower, repayAmount);\n', '    }\n', '\n', '    struct RepayBorrowLocalVars {\n', '        Error err;\n', '        MathError mathErr;\n', '        uint repayAmount;\n', '        uint borrowerIndex;\n', '        uint accountBorrows;\n', '        uint accountBorrowsNew;\n', '        uint totalBorrowsNew;\n', '    }\n', '\n', '    /**\n', '     * @notice Borrows are repaid by another user (possibly the borrower).\n', '     * @param payer the account paying off the borrow\n', '     * @param borrower the account with the debt being payed off\n', '     * @param repayAmount the amount of undelrying tokens being returned\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint) {\n', '        /* Fail if repayBorrow not allowed */\n', '        uint allowed = controller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.REPAY_BORROW_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', "        /* Verify market's block number equals current block number */\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK);\n', '        }\n', '\n', '        RepayBorrowLocalVars memory vars;\n', '\n', '        /* We remember the original borrowerIndex for verification purposes */\n', '        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n', '\n', '        /* We fetch the amount the borrower owes, with accumulated interest */\n', '        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /* If repayAmount == -1, repayAmount = accountBorrows */\n', '        if (repayAmount == uint(-1)) {\n', '            vars.repayAmount = vars.accountBorrows;\n', '        } else {\n', '            vars.repayAmount = repayAmount;\n', '        }\n', '\n', '        /* Fail if checkTransferIn fails */\n', '        vars.err = checkTransferIn(payer, vars.repayAmount);\n', '        if (vars.err != Error.NO_ERROR) {\n', '            return fail(vars.err, FailureInfo.REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE);\n', '        }\n', '\n', '        /*\n', '         * We calculate the new borrower and total borrow balances, failing on underflow:\n', '         *  accountBorrowsNew = accountBorrows - repayAmount\n', '         *  totalBorrowsNew = totalBorrows - repayAmount\n', '         */\n', '        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.repayAmount);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.repayAmount);\n', '        if (vars.mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /*\n', '         * We call doTransferIn for the payer and the repayAmount\n', '         *  Note: The aToken must handle variations between ERC-20 and ETH underlying.\n', '         *  On success, the aToken holds an additional repayAmount of cash.\n', '         *  If doTransferIn fails despite the fact we checked pre-conditions,\n', "         *   we revert because we can't be sure if side effects occurred.\n", '         */\n', '        vars.err = doTransferIn(payer, vars.repayAmount);\n', '        require(vars.err == Error.NO_ERROR, "repay borrow transfer in failed");\n', '\n', '        /* We write the previously calculated values into storage */\n', '        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n', '        accountBorrows[borrower].interestIndex = borrowIndex;\n', '        totalBorrows = vars.totalBorrowsNew;\n', '\n', '        /* We emit a RepayBorrow event */\n', '        emit RepayBorrow(payer, borrower, vars.repayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n', '\n', '        /* We call the defense hook */\n', '        controller.repayBorrowVerify(address(this), payer, borrower, vars.repayAmount, vars.borrowerIndex);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice The sender liquidates the borrowers collateral.\n', '     *  The collateral seized is transferred to the liquidator.\n', '     * @param borrower The borrower of this aToken to be liquidated\n', '     * @param aTokenCollateral The market in which to seize collateral from the borrower\n', '     * @param repayAmount The amount of the underlying borrowed asset to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function liquidateBorrowInternal(address borrower, uint repayAmount, AToken aTokenCollateral) internal nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n', '            return fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED);\n', '        }\n', '\n', '        error = aTokenCollateral.accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n', '            return fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED);\n', '        }\n', '\n', "        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n", '        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, aTokenCollateral);\n', '    }\n', '\n', '    /**\n', '     * @notice The liquidator liquidates the borrowers collateral.\n', '     *  The collateral seized is transferred to the liquidator.\n', '     * @param borrower The borrower of this aToken to be liquidated\n', '     * @param liquidator The address repaying the borrow and seizing collateral\n', '     * @param aTokenCollateral The market in which to seize collateral from the borrower\n', '     * @param repayAmount The amount of the underlying borrowed asset to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, AToken aTokenCollateral) internal returns (uint) {\n', '        /* Fail if liquidate not allowed */\n', '        uint allowed = controller.liquidateBorrowAllowed(address(this), address(aTokenCollateral), liquidator, borrower, repayAmount);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.LIQUIDATE_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', "        /* Verify market's block number equals current block number */\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK);\n', '        }\n', '\n', "        /* Verify aTokenCollateral market's block number equals current block number */\n", '        if (aTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK);\n', '        }\n', '\n', '        /* Fail if borrower = liquidator */\n', '        if (borrower == liquidator) {\n', '            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER);\n', '        }\n', '\n', '        /* Fail if repayAmount = 0 */\n', '        if (repayAmount == 0) {\n', '            return fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO);\n', '        }\n', '\n', '        /* Fail if repayAmount = -1 */\n', '        if (repayAmount == uint(-1)) {\n', '            return fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX);\n', '        }\n', '\n', '        /* We calculate the number of collateral tokens that will be seized */\n', '        (uint amountSeizeError, uint seizeTokens) = controller.liquidateCalculateSeizeTokens(address(this), address(aTokenCollateral), repayAmount);\n', '        if (amountSeizeError != 0) {\n', '            return failOpaque(Error.CONTROLLER_CALCULATION_ERROR, FailureInfo.LIQUIDATE_CONTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED, amountSeizeError);\n', '        }\n', '\n', '        /* Fail if seizeTokens > borrower collateral token balance */\n', '        if (seizeTokens > aTokenCollateral.balanceOf(borrower)) {\n', '            return fail(Error.TOKEN_INSUFFICIENT_BALANCE, FailureInfo.LIQUIDATE_SEIZE_TOO_MUCH);\n', '        }\n', '\n', '        /* Fail if repayBorrow fails */\n', '        uint repayBorrowError = repayBorrowFresh(liquidator, borrower, repayAmount);\n', '        if (repayBorrowError != uint(Error.NO_ERROR)) {\n', '            return fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED);\n', '        }\n', '\n', '        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\n', '        uint seizeError = aTokenCollateral.seize(liquidator, borrower, seizeTokens);\n', '        require(seizeError == uint(Error.NO_ERROR), "token seizure failed");\n', '\n', '        /* We emit a LiquidateBorrow event */\n', '        emit LiquidateBorrow(liquidator, borrower, repayAmount, address(aTokenCollateral), seizeTokens);\n', '\n', '        /* We call the defense hook */\n', '        controller.liquidateBorrowVerify(address(this), address(aTokenCollateral), liquidator, borrower, repayAmount, seizeTokens);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers collateral tokens (this market) to the liquidator.\n', '     * @dev Will fail unless called by another aToken during the process of liquidation.\n', '     *  Its absolutely critical to use msg.sender as the borrowed aToken and not a parameter.\n', '     * @param liquidator The account receiving seized collateral\n', '     * @param borrower The account having collateral seized\n', '     * @param seizeTokens The number of aTokens to seize\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\n', '        /* Fail if seize not allowed */\n', '        uint allowed = controller.seizeAllowed(address(this), msg.sender, liquidator, borrower, seizeTokens);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.CONTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_CONTROLLER_REJECTION, allowed);\n', '        }\n', '\n', '        /* Fail if borrower = liquidator */\n', '        if (borrower == liquidator) {\n', '            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n', '        }\n', '\n', '        MathError mathErr;\n', '        uint borrowerTokensNew;\n', '        uint liquidatorTokensNew;\n', '\n', '        /*\n', '         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n', '         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n', '         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n', '         */\n', '        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\n', '        }\n', '\n', '        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        /* We write the previously calculated values into storage */\n', '        accountTokens[borrower] = borrowerTokensNew;\n', '        accountTokens[liquidator] = liquidatorTokensNew;\n', '\n', '        /* Emit a Transfer event */\n', '        emit Transfer(borrower, liquidator, seizeTokens);\n', '\n', '        /* We call the defense hook */\n', '        controller.seizeVerify(address(this), msg.sender, liquidator, borrower, seizeTokens);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '\n', '    /*** Admin Functions ***/\n', '\n', '    /**\n', '      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @param newPendingAdmin New pending admin.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      *\n', '      * TODO: Should we add a second arg to verify, like a checksum of `newAdmin` address?\n', '      */\n', '    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n', '        // Check caller = admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value, if any, for inclusion in log\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n', '      * @dev Admin function for pending admin to accept role and update admin\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _acceptAdmin() external returns (uint) {\n', '        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n', '        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets a new controller for the market\n', '      * @dev Admin function to set a new controller\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setController(ControllerInterface newController) public returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CONTROLLER_OWNER_CHECK);\n', '        }\n', '\n', '        ControllerInterface oldController = controller;\n', '        \n', '        // Ensure invoke controller.isController() returns true\n', '        require(newController.isController(), "marker method returned false");\n', '\n', "        // Set market's controller to newController\n", '        controller = newController;\n', '\n', '        // Emit NewControllerr(oldController, newController)\n', '        emit NewController(oldController, newController);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n', '      * @dev Admin function to accrue interest and set a new reserve factor\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n', '            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n", '        return _setReserveFactorFresh(newReserveFactorMantissa);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n', '      * @dev Admin function to set a new reserve factor\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n', '        }\n', '\n', "        // Verify market's block number equals current block number\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            // TODO: static_assert + no error code?\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n', '        }\n', '\n', '        // Check newReserveFactor ≤ maxReserveFactor\n', '        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n', '            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n', '        }\n', '\n', '        uint oldReserveFactorMantissa = reserveFactorMantissa;\n', '        reserveFactorMantissa = newReserveFactorMantissa;\n', '\n', '        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Accrues interest and reduces reserves by transferring to admin\n', '     * @param reduceAmount Amount of reduction to reserves\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n', '            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n", '        return _reduceReservesFresh(reduceAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Reduces reserves by transferring to admin\n', '     * @dev Requires fresh interest accrual\n', '     * @param reduceAmount Amount of reduction to reserves\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\n', '        Error err;\n', '        // totalReserves - reduceAmount\n', '        uint totalReservesNew;\n', '\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\n', '        }\n', '\n', "        // We fail gracefully unless market's block number equals current block number\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            // TODO: static_assert + no error code?\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n', '        }\n', '\n', '        // Fail gracefully if protocol has insufficient underlying cash\n', '        if (getCashPrior() < reduceAmount) {\n', '            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n', '        }\n', '\n', '        // Check reduceAmount ≤ reserves[n] (totalReserves)\n', "        // TODO: I'm following the spec literally here but I think we should we just use SafeMath instead and fail on an error (which would be underflow)\n", '        if (reduceAmount > totalReserves) {\n', '            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n', '        }\n', '\n', '        /////////////////////////\n', '        // EFFECTS & INTERACTIONS\n', '        // (No safe failures beyond this point)\n', '\n', '        totalReservesNew = totalReserves - reduceAmount;\n', '        // We checked reduceAmount <= totalReserves above, so this should never revert.\n', '        require(totalReservesNew <= totalReserves, "reduce reserves unexpected underflow");\n', '\n', '        // Store reserves[n+1] = reserves[n] - reduceAmount\n', '        totalReserves = totalReservesNew;\n', '\n', '        // invoke doTransferOut(reduceAmount, admin)\n', '        err = doTransferOut(admin, reduceAmount);\n', '        // we revert on the failure of this command\n', '        require(err == Error.NO_ERROR, "reduce reserves transfer out failed");\n', '\n', '        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n', '     * @dev Admin function to accrue interest and update the interest rate model\n', '     * @param newInterestRateModel the new interest rate model to use\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n', '        uint error = accrueInterest();\n', '        if (error != uint(Error.NO_ERROR)) {\n', '            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n', '            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n', '        }\n', "        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n", '        return _setInterestRateModelFresh(newInterestRateModel);\n', '    }\n', '\n', '    function _setInterestRateModel_init(InterestRateModel newInterestRateModel) public returns (uint) {\n', '        if (msg.sender != admin) {\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n', '        }\n', "        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n", '        interestRateModel = newInterestRateModel;\n', '        _setInterestRateModelFresh(interestRateModel);\n', '    }\n', '    \n', '    /**\n', '     * @notice updates the interest rate model (*requires fresh interest accrual)\n', '     * @dev Admin function to update the interest rate model\n', '     * @param newInterestRateModel the new interest rate model to use\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n', '\n', '        // Used to store old model for use in the event that is emitted on success\n', '        InterestRateModel oldInterestRateModel;\n', '\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n', '        }\n', '\n', "        // We fail gracefully unless market's block number equals current block number\n", '        if (accrualBlockNumber != getBlockNumber()) {\n', '            // TODO: static_assert + no error code?\n', '            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n', '        }\n', '\n', "        // Track the market's current interest rate model\n", '        oldInterestRateModel = interestRateModel;\n', '\n', '        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n', '        require(newInterestRateModel.isInterestRateModel(), "marker method returned false");\n', '\n', '        // Set the interest rate model to newInterestRateModel\n', '        interestRateModel = newInterestRateModel;\n', '\n', '        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n', '        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    \n', '    /*** Safe Token ***/\n', '\n', '    /**\n', '     * @notice Gets balance of this contract in terms of the underlying\n', '     * @dev This excludes the value of the current message, if any\n', '     * @return The quantity of underlying owned by this contract\n', '     */\n', '    function getCashPrior() internal view returns (uint);\n', '\n', '    /**\n', '     * @dev Checks whether or not there is sufficient allowance for this contract to move amount from `from` and\n', '     *      whether or not `from` has a balance of at least `amount`. Does NOT do a transfer.\n', '     */\n', '    function checkTransferIn(address from, uint amount) internal view returns (Error);\n', '\n', '    /**\n', '     * @dev Performs a transfer in, ideally returning an explanatory error code upon failure rather than reverting.\n', '     *  If caller has not called `checkTransferIn`, this may revert due to insufficient balance or insufficient allowance.\n', '     *  If caller has called `checkTransferIn` successfully, this should not revert in normal conditions.\n', '     */\n', '    function doTransferIn(address from, uint amount) internal returns (Error);\n', '\n', '    /**\n', '     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\n', "     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n", "     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n", '     */\n', '    function doTransferOut(address payable to, uint amount) internal returns (Error);\n', '}\n', '\n', '\n', '\n', 'contract AErc20 is AToken {\n', '\n', '    /**\n', '     * @notice Underlying asset for this AToken\n', '     */\n', '    address public underlying;\n', '\n', '    /*** User Interface ***/\n', '\n', '    /**\n', '     * @notice Sender supplies assets into the market and receives aTokens in exchange\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param mintAmount The amount of the underlying asset to supply\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function mint(uint mintAmount) external returns (uint) {\n', '        return mintInternal(mintAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender redeems aTokens in exchange for the underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param redeemTokens The number of aTokens to redeem into underlying\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeem(uint redeemTokens) external returns (uint) {\n', '        return redeemInternal(redeemTokens);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender redeems aTokens in exchange for a specified amount of underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param redeemAmount The amount of underlying to redeem\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n', '        return redeemUnderlyingInternal(redeemAmount);\n', '    }\n', '\n', '    /**\n', '      * @notice Sender borrows assets from the protocol to their own address\n', '      * @param borrowAmount The amount of the underlying asset to borrow\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function borrow(uint borrowAmount) external returns (uint) {\n', '        return borrowInternal(borrowAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender repays their own borrow\n', '     * @param repayAmount The amount to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrow(uint repayAmount) external returns (uint) {\n', '        return repayBorrowInternal(repayAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Sender repays a borrow belonging to borrower\n', '     * @param borrower the account with the debt being payed off\n', '     * @param repayAmount The amount to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\n', '        return repayBorrowBehalfInternal(borrower, repayAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice The sender liquidates the borrowers collateral.\n', '     *  The collateral seized is transferred to the liquidator.\n', '     * @param borrower The borrower of this aToken to be liquidated\n', '     * @param aTokenCollateral The market in which to seize collateral from the borrower\n', '     * @param repayAmount The amount of the underlying borrowed asset to repay\n', '     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function liquidateBorrow(address borrower, uint repayAmount, AToken aTokenCollateral) external returns (uint) {\n', '        return liquidateBorrowInternal(borrower, repayAmount, aTokenCollateral);\n', '    }\n', '\n', '    /*** Safe Token ***/\n', '\n', '    /**\n', '     * @notice Gets balance of this contract in terms of the underlying\n', '     * @dev This excludes the value of the current message, if any\n', '     * @return The quantity of underlying tokens owned by this contract\n', '     */\n', '    function getCashPrior() internal view returns (uint) {\n', '        EIP20Interface token = EIP20Interface(underlying);\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether or not there is sufficient allowance for this contract to move amount from `from` and\n', '     *      whether or not `from` has a balance of at least `amount`. Does NOT do a transfer.\n', '     */\n', '    function checkTransferIn(address from, uint amount) internal view returns (Error) {\n', '        EIP20Interface token = EIP20Interface(underlying);\n', '\n', '        if (token.allowance(from, address(this)) < amount) {\n', '            return Error.TOKEN_INSUFFICIENT_ALLOWANCE;\n', '        }\n', '\n', '        if (token.balanceOf(from) < amount) {\n', '            return Error.TOKEN_INSUFFICIENT_BALANCE;\n', '        }\n', '\n', '        return Error.NO_ERROR;\n', '    }\n', '\n', '    /**\n', '     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and returns an explanatory\n', '     *      error code rather than reverting.  If caller has not called `checkTransferIn`, this may revert due to\n', '     *      insufficient balance or insufficient allowance. If caller has called `checkTransferIn` prior to this call,\n', '     *      and it returned Error.NO_ERROR, this should not revert in normal conditions.\n', '     *\n', '     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n', '     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', '     */\n', '    function doTransferIn(address from, uint amount) internal returns (Error) {\n', '        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n', '        bool result;\n', '\n', '        token.transferFrom(from, address(this), amount);\n', '\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            switch returndatasize()\n', '                case 0 {                      // This is a non-standard ERC-20\n', '                    result := not(0)          // set result to true\n', '                }\n', '                case 32 {                     // This is a complaint ERC-20\n', '                    returndatacopy(0, 0, 32)\n', '                    result := mload(0)        // Set `result = returndata` of external call\n', '                }\n', '                default {                     // This is an excessively non-compliant ERC-20, revert.\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '\n', '        if (!result) {\n', '            return Error.TOKEN_TRANSFER_IN_FAILED;\n', '        }\n', '\n', '        return Error.NO_ERROR;\n', '    }\n', '\n', '    /**\n', '     * @dev Similar to EIP20 transfer, except it handles a False result from `transfer` and returns an explanatory\n', "     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n", "     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n", '     *      it is >= amount, this should not revert in normal conditions.\n', '     *\n', '     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n', '     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', '     */\n', '    function doTransferOut(address payable to, uint amount) internal returns (Error) {\n', '        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n', '        bool result;\n', '\n', '        token.transfer(to, amount);\n', '\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            switch returndatasize()\n', '                case 0 {                      // This is a non-standard ERC-20\n', '                    result := not(0)          // set result to true\n', '                }\n', '                case 32 {                     // This is a complaint ERC-20\n', '                    returndatacopy(0, 0, 32)\n', '                    result := mload(0)        // Set `result = returndata` of external call\n', '                }\n', '                default {                     // This is an excessively non-compliant ERC-20, revert.\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '\n', '        if (!result) {\n', '            return Error.TOKEN_TRANSFER_OUT_FAILED;\n', '        }\n', '\n', '        return Error.NO_ERROR;\n', '    }\n', '    \n', '    function _setUnderlying(address newunderlying) public returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CONTROLLER_OWNER_CHECK);\n', '        }\n', '\n', "        // Set market's controller to newController\n", '        underlying = newunderlying;\n', '        EIP20Interface(underlying).totalSupply(); // Sanity check the underlying\n', '        \n', '        return uint(Error.NO_ERROR);\n', '    } \n', '}']