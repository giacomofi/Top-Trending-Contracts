['/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-31\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not authorized operation");\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Address shouldn\'t be zero");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Simple ERC20 Token example, with mintable token creation only during the deployement of the token contract */\n', '\n', 'contract TokenContract is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '  address public tokenOwner;\n', '  address private ico;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping(address => bool) public vestedlist;\n', '\n', '  event SetICO(address indexed _ico);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event UnlockToken();\n', '  event LockToken();\n', '  event Burn();\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event addedToVestedlist(address indexed _vestedAddress);\n', '  event removedFromVestedlist(address indexed _vestedAddress);\n', '\n', '  \n', '  bool public mintingFinished = false;\n', '  bool public locked = true;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  \n', '  modifier canTransfer() {\n', '    require(!locked || msg.sender == owner || msg.sender == ico);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyAuthorized() {\n', '    require(msg.sender == owner || msg.sender == ico);\n', '    _;\n', '  }\n', '\n', '\n', '  constructor(string memory _name, string memory  _symbol, uint8 _decimals) public {\n', '    require (_decimals != 0);\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    totalSupply = 0;\n', '    balances[msg.sender] = totalSupply;\n', '    emit Transfer(address(0), msg.sender, totalSupply);\n', '\n', '\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyAuthorized canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(this), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyAuthorized canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '    require(_to != address(0));\n', '\trequire (!isVestedlisted(msg.sender));\n', '    require(_value <= balances[msg.sender]);\n', '    require (msg.sender != address(this));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function burn(address _who, uint256 _value) onlyAuthorized public returns (bool){\n', '    require(_who != address(0));\n', '    \n', '    totalSupply = totalSupply.sub(_value);\n', '    balances[_who] = balances[_who].sub(_value);\n', '    emit Burn();\n', '    emit Transfer(_who, address(0), _value);\n', '    return true;\n', '  }\n', '  \n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFromERC20Contract(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[address(this)]);\n', '    balances[address(this)] = balances[address(this)].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(address(this), _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function unlockToken() public onlyAuthorized returns (bool) {\n', '    locked = false;\n', '    emit UnlockToken();\n', '    return true;\n', '  }\n', '\n', '  function lockToken() public onlyAuthorized returns (bool) {\n', '    locked = true;\n', '    emit LockToken();\n', '    return true;\n', '  }\n', '  \n', '  function setICO(address _icocontract) public onlyOwner returns (bool) {\n', '    require(_icocontract != address(0));\n', '    ico = _icocontract;\n', '    emit SetICO(_icocontract);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '     * @dev Adds list of addresses to Vestedlist. Not overloaded due to limitations with truffle testing.\n', '     * @param _vestedAddress Addresses to be added to the Vestedlist\n', '     */\n', '    function addToVestedlist(address[] memory _vestedAddress) public onlyOwner {\n', '        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n', '            if (vestedlist[_vestedAddress[i]]) continue;\n', '            vestedlist[_vestedAddress[i]] = true;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Removes single address from Vestedlist.\n', '     * @param _vestedAddress Address to be removed to the Vestedlist\n', '     */\n', '    function removeFromVestedlist(address[] memory _vestedAddress) public onlyOwner {\n', '        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n', '            if (!vestedlist[_vestedAddress[i]]) continue;\n', '            vestedlist[_vestedAddress[i]] = false;\n', '        }\n', '    }\n', '\n', '\n', '    function isVestedlisted(address _vestedAddress) internal view returns (bool) {\n', '      return (vestedlist[_vestedAddress]);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public payments;\n', '\n', '    uint256 public totalPayments;\n', '\n', '    /**\n', '    * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '    * @param dest The destination address of the funds.\n', '    * @param amount The amount to transfer.\n', '    */\n', '    function asyncSend(address dest, uint256 amount) internal{\n', '        payments[dest] = payments[dest].add(amount);\n', '        totalPayments = totalPayments.add(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev withdraw accumulated balance, called by payee.\n', '    */\n', '    function withdrawPayments() internal{\n', '        address payable payee = msg.sender;\n', '        uint256 payment = payments[payee];\n', '\n', '        require(payment != 0);\n', '        require(address(this).balance >= payment);\n', '\n', '        totalPayments = totalPayments.sub(payment);\n', '        payments[payee] = 0;\n', '\n', '        assert(payee.send(payment));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ICO\n', ' * @dev ICO is a base contract for managing a public token sale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for a public sale. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of public token sales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', '\n', 'contract ICO is PullPayment, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  TokenContract public token;\n', '\n', '  // Address where funds are collected\n', '  address payable public wallet;\n', '\n', '  // Address to receive project tokens\n', '  address public projectOwner;\n', '\n', '  // Refund period if the ICO failed\n', '  uint256 public refundPeriod;\n', '\n', '  // How many token units a buyer gets per ETH/wei during Pre sale. The ETH price is fixed at 400$ during Pre sale.\n', '  uint256 public Presalerate = 0.00025 ether;   //  1 DCASH Token = 0.10 $ = 0.00025 Ether\n', '\n', '  // How many token units a buyer gets per ETH/wei during ICO. The ETH price is fixed at 400$ during the ICO to guarantee the 30 % discount rate with the presale rate\n', '  uint256 public Icorate = 0.000325 ether;    //  1 DCASH Token = 0.13 $ = 0.000325 Ether\n', ' \n', '  // Amount of ETH/Wei raised during the ICO period\n', '  uint256 public EthRaisedIco;\n', '\n', '  // Amount of ETH/wei raised during the Pre sale\n', '  uint256 public EthRaisedpresale;\n', '\n', '  // Token amount distributed during the ICO period\n', '  uint256 public tokenDistributed;\n', '\n', '  // Token amount distributed during the Pre sale\n', '  uint256 public tokenDistributedpresale;\n', '\n', '  // investors part according to the whitepaper 60 % (50% ICO + 10% PreSale) \n', '  uint256 public investors = 60;\n', '  \n', '  // Min purchase size of incoming ETH during pre sale period fixed at 2 ETH valued at 800 $ \n', '  uint256 public constant MIN_PURCHASE_Presale = 2 ether;\n', '\n', '  // Minimum purchase size of incoming ETH during ICO at 1$\n', '  uint256 public constant MIN_PURCHASE_ICO = 0.0025 ether;\n', '\n', '  // Hardcap cap in Ether raised during Pre sale fixed at $ 200 000 for ETH valued at 440$ \n', '  uint256 public PresaleSalemaxCap1 = 500 ether;\n', '\n', '  // Softcap funding goal during ICO in Ether raised fixed at $ 200 000 for ETH valued at 400$.\n', '  uint256 public ICOminCap = 500 ether;\n', '\n', '  // Hardcap goal in Ether during ICO in Ether raised fixed at $ 13 000 000 for ETH valued at 400$\n', '  uint256 public ICOmaxCap = 32500 ether;\n', '\n', '  // presale start/end\n', '  bool public presale = true;    // State of the ongoing sales Pre sale \n', '  \n', '  // ICO start/end\n', '  bool public ico = false;         // State of the ongoing sales ICO period\n', '\n', '  // Balances in incoming Ether\n', '  mapping(address => uint256) balances;\n', '  \n', '  // Bool to check that the Presalesale period is launch only one time\n', '  bool public statepresale = false;\n', '  \n', '  // Bool to check that the ico is launch only one time\n', '  bool public stateico = true;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event NewContract(address indexed _from, address indexed _contract, string _type);\n', '\n', '  /**\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the ERC20 Token\n', '   * @param _project Address where the Token of the project will be sent\n', '   */\n', '  constructor(address payable _wallet, address _token, address _project) public {\n', '    require(_wallet != address(0) && _token != address(0) && _project != address(0));\n', '    wallet = _wallet;\n', '    token = TokenContract(_token);    \n', '    projectOwner = _project;\n', '\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // ICO external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  receive() external payable {\n', '     if (presale) {\n', '      buypresaleTokens(msg.sender);\n', '    }\n', '\n', '    if (ico) {\n', '      buyICOTokens(msg.sender);\n', '    }\n', '  }\n', '\n', '  function buypresaleTokens (address _beneficiary) internal {\n', '    require(_beneficiary != address(0) , "Failed the wallet is not allowed");  \n', '    require(msg.value >= MIN_PURCHASE_Presale, "Failed the amount is not respecting the minimum deposit of Presale ");\n', '    // Check that if investors sends more than the MIN_PURCHASE_Presale\n', '    uint256 weiAmount = msg.value;\n', '\t// According to the whitepaper the backers who invested on Presale Sale have not possibilities to be refunded. Their ETH Balance is updated to zero value.\n', '\tbalances[msg.sender] = 0;\n', '    // calculate token amount to be created\n', '    uint256 tokensTocreate = _getTokenpresaleAmount(weiAmount);\n', '    _getRemainingTokenStock(_beneficiary, tokensTocreate);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokensTocreate);\n', '\n', '    // update state\n', '    EthRaisedpresale = EthRaisedpresale.add(weiAmount);\n', '    tokenDistributedpresale = tokenDistributedpresale.add(tokensTocreate);\n', '\n', '    // If Presale Sale softcap is reached then the ether on the ICO contract are send to project wallet\n', '    if (EthRaisedpresale <= PresaleSalemaxCap1) {\n', '      wallet.transfer(address(this).balance);\n', '    } else {\n', '      //If PresaleSalemaxCap1 is reached then the presale is closed\n', '      if (EthRaisedpresale >= PresaleSalemaxCap1) {\n', '        presale = false;\n', '      }\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyICOTokens(address _beneficiary) internal {\n', '\trequire(_beneficiary != address(0) , "Failed the wallet is not allowed");  \n', '    require(msg.value >= MIN_PURCHASE_ICO, "Failed the amount is not respecting the minimum deposit of ICO");\n', '    // Check that if investors sends more than the MIN_PURCHASE_ICO\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokensTocreate = _getTokenAmount(weiAmount);\n', '\n', '    // Look if there is token on the contract if he is not create the amount of token\n', '    _getRemainingTokenStock(_beneficiary, tokensTocreate);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokensTocreate);\n', '\n', '    // update state\n', '    EthRaisedIco = EthRaisedIco.add(weiAmount);\n', '\n', '    // Creation of the token and transfer to beneficiary\n', '    tokenDistributed = tokenDistributed.add(tokensTocreate);\n', '\n', '    // Update the balance of benificiary\n', '    balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\n', '\n', '    uint256 totalEthRaised = EthRaisedIco.add(EthRaisedpresale);\n', '\n', '    // If ICOminCap is reached then the ether on the ICO contract are send to project wallet\n', '    if (totalEthRaised >= ICOminCap && totalEthRaised <= ICOmaxCap) {\n', '      wallet.transfer(address(this).balance);\n', '    }\n', '\n', '    //If ICOmaxCap is reached then the ICO close\n', '    if (totalEthRaised >= ICOmaxCap) {\n', '      ico = false;\n', '    }\n', '  }\n', '\n', '  /* ADMINISTRATIVE FUNCTIONS */\n', '\n', '  // Update the ETH ICO rate  \n', '  function updateETHIcoRate(uint256 _EtherAmount) public onlyOwner {\n', '    Icorate = (_EtherAmount).mul(1 wei);\n', '  }\n', '  \n', '    // Update the ETH PreSale rate  \n', '  function updateETHPresaleRate(uint256 _EtherAmount) public onlyOwner {\n', '    Presalerate = (_EtherAmount).mul(1 wei);\n', '  }\n', '\n', '    // Update the ETH ICO MAX CAP  \n', '  function updateICOMaxcap(uint256 _EtherAmount) public onlyOwner {\n', '    ICOmaxCap = (_EtherAmount).mul(1 wei);\n', '  }\n', '\n', '  // start presale\n', '  function startpresale() public onlyOwner {\n', '    require(statepresale && !ico,"Failed the Presale was already started or another sale is ongoing");\n', '    presale = true;\n', '    statepresale = false;\n', '    token.lockToken();\n', '  }\n', '\n', '  // close Presale\n', '  function closepresale() public onlyOwner {\n', '    require(presale && !ico, "Failed it was already closed");\n', '    presale = false;\n', '  }\n', ' \n', ' // start ICO\n', '  function startICO() public onlyOwner {\n', '\n', '    // bool to see if the ico has already been launched and  presale is not in progress\n', '    require(stateico && !presale, "Failed the ICO was already started or another salae is ongoing");\n', '\n', '    refundPeriod = now.add(2764800);\n', '      // 32 days in seconds ==> 32*24*3600\n', '\n', '    ico = true;\n', '    token.lockToken();\n', '\n', '    // Put the bool to False to block the start of this function again\n', '    stateico = false;\n', '  }\n', '\n', '  // close ICO\n', '  function closeICO() public onlyOwner {\n', '    require(!presale && ico,"Failed it was already closed");\n', '    ico = false;\n', '  }\n', '\n', '  /* When ICO MIN_CAP is not reach the smart contract will be credited to make refund possible by backers\n', '   * 1) backer call the "refund" function of the ICO contract\n', '   * 2) backer call the "reimburse" function of the ICO contract to get a refund in ETH\n', '   */\n', '  function refund() public {\n', '    require(_refundPeriod());\n', '    require(balances[msg.sender] > 0);\n', '\n', '    uint256 ethToSend = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    asyncSend(msg.sender, ethToSend);\n', '  }\n', '\n', '  function reimburse() public {\n', '    require(_refundPeriod());\n', '    withdrawPayments();\n', '    EthRaisedIco = address(this).balance;\n', '  }\n', '\n', '  // Function to pay out if the ICO is successful\n', '  function WithdrawFunds() public onlyOwner {\n', '    require(!ico && !presale, "Failed a sales is ongoing");\n', '    require(now > refundPeriod.add(7776000) || _isSuccessful(), "Failed the refund period is not finished");\n', '    //  90 days in seconds ==> 2*30*24*3600\n', '    if (_isSuccessful()) {\n', '      uint256 _tokensProjectToSend = _getTokenAmountToDistribute(100 - investors);\n', '      _getRemainingTokenStock(projectOwner, _tokensProjectToSend);\n', '      token.unlockToken();\n', '    } else {\n', '      wallet.transfer(EthRaisedIco);\n', '    }\n', '    \n', '    // burn in case that there is some not distributed tokens on the contract\n', '    if (token.balanceOf(address(this)) > 0) {\n', '      uint256 totalDistributedToken = tokenDistributed;\n', '      token.burn(address(this),totalDistributedToken);\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '\n', '  // Calcul the amount of token the benifiaciary will get by buying during Presale \n', '  function _getTokenpresaleAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 _amountToSend = _weiAmount.div(Presalerate).mul(10 ** 10);\n', '    return _amountToSend;\n', '  }\n', '  \n', '  // Calcul the amount of token the benifiaciary will get by buying during Sale\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 _amountToSend = _weiAmount.div(Icorate).mul(10 ** 10);\n', '    return _amountToSend;\n', '  }\n', '\n', '  // Calcul the token amount to distribute in the forwardFunds for the project (team, bounty ...)\n', '  function _getTokenAmountToDistribute(uint _part) internal view returns (uint256) {\n', '    uint256 _delivredTokens = tokenDistributed.add(tokenDistributedpresale);\n', '    return (_part.mul(_delivredTokens).div(investors));\n', '\n', '  }\n', '\n', '  // verify the remaining token stock & deliver tokens to the beneficiary\n', '  function _getRemainingTokenStock(address _beneficiary, uint256 _tokenAmount) internal {\n', '    if (token.balanceOf(address(this)) >= _tokenAmount) {\n', '      require(token.transfer(_beneficiary, _tokenAmount));\n', '    }\n', '    else {\n', '      if (token.balanceOf(address(this)) == 0) {\n', '        require(token.mint(_beneficiary, _tokenAmount));\n', '      }\n', '      else {\n', '        uint256 remainingTokenTocreate = _tokenAmount.sub(token.balanceOf(address(this)));\n', '        require(token.transfer(_beneficiary, token.balanceOf(address(this))));\n', '        require(token.mint(_beneficiary, remainingTokenTocreate));\n', '      }\n', '    }\n', '  }\n', '\n', '  // Function to check the refund period\n', '  function _refundPeriod() internal view returns (bool){\n', '    require(!_isSuccessful(),"Failed refund period is not opened");\n', '    return ((!ico && !stateico) || (now > refundPeriod));\n', '  }\n', '\n', '  // check if the ico is successful\n', '  function _isSuccessful() internal view returns (bool){\n', '    return (EthRaisedIco.add(EthRaisedpresale) >= ICOminCap);\n', '  }\n', '\n', '}']