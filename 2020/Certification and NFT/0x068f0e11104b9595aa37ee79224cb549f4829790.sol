['pragma solidity 0.6.0;\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two unsigned integers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint value) external  returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '}\n', '\n', 'contract YLIQTokenLock {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public unlockDateRewards;\n', '  uint256 public unlockDateDev;\n', '  uint256 public YLIQLockedDev;\n', '  uint256 public YLIQLockedRewards;\n', '  address public owner;\n', '  ERC20 public YLIQToken;\n', '\n', '  constructor(address _wallet) public {\n', '    owner = msg.sender; \n', '    YLIQToken = ERC20(_wallet);\n', '  }\n', '\n', '   \n', '  function lockDevTokens (address _from, uint _amount) public {\n', '    require(_from == owner);\n', '    require(YLIQToken.balanceOf(_from) >= _amount);\n', '    YLIQLockedDev = _amount;\n', '    unlockDateDev = now;\n', '    YLIQToken.transferFrom(owner, address(this), _amount);\n', '  }\n', '\n', '  \n', '  function lockRewardsTokens (address _from, uint256 _amount) public {\n', '    require(_from == owner);\n', '    require(YLIQToken.balanceOf(_from) >= _amount);\n', '    YLIQLockedRewards = _amount;\n', '    unlockDateRewards = now;\n', '    YLIQToken.transferFrom(owner, address(this), _amount);\n', '  }\n', '\n', '  function withdrawDevTokens(address _to, uint256 _amount) public {\n', '    require(_to == owner);\n', '    require(_amount <= YLIQLockedDev);\n', '    require(now.sub(unlockDateDev) >= 56 days);\n', '    YLIQLockedDev = YLIQLockedDev.sub(_amount);\n', '    YLIQToken.transfer(_to, _amount);\n', '  }\n', '\n', '  function withdrawRewardsTokens(address _to, uint256 _amount) public {\n', '    require(_to == owner);\n', '    require(_amount <= YLIQLockedRewards);\n', '    require(now.sub(unlockDateRewards) >= 14 days);\n', '    YLIQLockedRewards = YLIQLockedRewards.sub(_amount);\n', '    YLIQToken.transfer(_to, _amount);\n', '  }\n', '\n', '  function balanceOf() public view returns (uint256) {\n', '    return YLIQLockedDev.add(YLIQLockedRewards);\n', '  }\n', '}']