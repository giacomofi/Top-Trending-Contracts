['// File: contracts/external/openzeppelin-solidity/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeMath64 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        uint64 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint64 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint64 a, uint64 b, string memory errorMessage) internal pure returns (uint64) {\n', '        require(b <= a, errorMessage);\n', '        uint64 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint64 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint64 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/external/proxy/Proxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function () external payable {\n', '        address _impl = implementation();\n', '        require(_impl != address(0));\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '            }\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function implementation() public view returns (address);\n', '}\n', '\n', '// File: contracts/external/proxy/UpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param implementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    // Storage position of the address of the current implementation\n', '    bytes32 private constant IMPLEMENTATION_POSITION = keccak256("org.govblocks.proxy.implementation");\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor() public {}\n', '\n', '    /**\n', '    * @dev Tells the address of the current implementation\n', '    * @return address of the current implementation\n', '    */\n', '    function implementation() public view returns (address impl) {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '            impl := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the current implementation\n', '    * @param _newImplementation address representing the new implementation to be set\n', '    */\n', '    function _setImplementation(address _newImplementation) internal {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '        sstore(position, _newImplementation)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Upgrades the implementation address\n', '    * @param _newImplementation representing the address of the new implementation to be set\n', '    */\n', '    function _upgradeTo(address _newImplementation) internal {\n', '        address currentImplementation = implementation();\n', '        require(currentImplementation != _newImplementation);\n', '        _setImplementation(_newImplementation);\n', '        emit Upgraded(_newImplementation);\n', '    }\n', '}\n', '\n', '// File: contracts/external/proxy/OwnedUpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '/**\n', ' * @title OwnedUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n', ' */\n', 'contract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    // Storage position of the owner of the contract\n', '    bytes32 private constant PROXY_OWNER_POSITION = keccak256("org.govblocks.proxy.owner");\n', '\n', '    /**\n', '    * @dev the constructor sets the original owner of the contract to the sender account.\n', '    */\n', '    constructor(address _implementation) public {\n', '        _setUpgradeabilityOwner(msg.sender);\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == proxyOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function proxyOwner() public view returns (address owner) {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            owner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n', '        require(_newOwner != address(0));\n', '        _setUpgradeabilityOwner(_newOwner);\n', '        emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n', '    * @param _implementation representing the address of the new implementation to be set.\n', '    */\n', '    function upgradeTo(address _implementation) public onlyProxyOwner {\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of the owner\n', '    */\n', '    function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            sstore(position, _newProxyOwner)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IMarketUtility.sol\n', '\n', 'pragma solidity 0.5.7;\n', 'contract IMarketUtility {\n', '\n', '    function initialize(address payable[] calldata _addressParams, address _initiater) external;\n', '\n', '\t/**\n', '     * @dev to Set authorized address to update parameters \n', '     */\n', '    function setAuthorizedAddres() public;\n', '\n', '\t/**\n', '     * @dev to update uint parameters in Market Config \n', '     */\n', '    function updateUintParameters(bytes8 code, uint256 value) external;\n', '\n', '    /**\n', '     * @dev to Update address parameters in Market Config \n', '     */\n', '    function updateAddressParameters(bytes8 code, address payable value) external;\n', ' \n', '     /**\n', '    * @dev Get Parameters required to initiate market\n', '    * @return Addresses of tokens to be distributed as incentives\n', '    * @return Cool down time for market\n', '    * @return Rate\n', '    * @return Commission percent for predictions with ETH\n', '    * @return Commission percent for predictions with PLOT\n', '    **/\n', '    function getMarketInitialParams() public view returns(address[] memory, uint , uint, uint, uint);\n', '\n', '    function getAssetPriceUSD(address _currencyAddress) external view returns(uint latestAnswer);\n', '    \n', '    function getPriceFeedDecimals(address _priceFeed) public view returns(uint8);\n', '\n', '    function getValueAndMultiplierParameters(address _asset, uint256 _amount)\n', '        public\n', '        view\n', '        returns (uint256, uint256);\n', '\n', '    function update() external;\n', '    \n', '    function calculatePredictionValue(uint[] memory params, address asset, address user, address marketFeedAddress, bool _checkMultiplier) public view returns(uint _predictionValue, bool _multiplierApplied);\n', '    \n', '    /**\n', '     * @dev Get basic market details\n', '     * @return Minimum amount required to predict in market\n', '     * @return Percentage of users leveraged amount to deduct when placed in wrong prediction\n', '     * @return Decimal points for prediction positions\n', '     **/\n', '    function getBasicMarketDetails()\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function getDisputeResolutionParams() public view returns (uint256);\n', '    function calculateOptionPrice(uint[] memory params, address marketFeedAddress) public view returns(uint _optionPrice);\n', '\n', '    /**\n', '     * @dev Get price of provided feed address\n', '     * @param _currencyFeedAddress  Feed Address of currency on which market options are based on\n', '     * @return Current price of the market currency\n', '     **/\n', '    function getSettlemetPrice(\n', '        address _currencyFeedAddress,\n', '        uint256 _settleTime\n', '    ) public view returns (uint256 latestAnswer, uint256 roundId);\n', '\n', '    /**\n', '     * @dev Get value of provided currency address in ETH\n', '     * @param _currencyAddress Address of currency\n', '     * @param _amount Amount of provided currency\n', '     * @return Value of provided amount in ETH\n', '     **/\n', '    function getAssetValueETH(address _currencyAddress, uint256 _amount)\n', '        public\n', '        view\n', '        returns (uint256 tokenEthValue);\n', '}\n', '\n', '// File: contracts/interfaces/IToken.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'contract IToken {\n', '\n', '    function decimals() external view returns(uint8);\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param account The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param recipient The address to transfer to.\n', '    * @param amount The amount to be transferred.\n', '    */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @dev function that mints an amount of the token and assigns it to\n', '    * an account.\n', '    * @param account The account that will receive the created tokens.\n', '    * @param amount The amount that will be created.\n', '    */\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '    \n', '     /**\n', '    * @dev burns an amount of the tokens of the message sender\n', '    * account.\n', '    * @param amount The amount that will be burnt.\n', '    */\n', '    function burn(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     * Returns a boolean value indicating whether the operation succeeded.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param sender address The address which you want to send tokens from\n', '    * @param recipient address The address which you want to transfer to\n', '    * @param amount uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ITokenController.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'contract ITokenController {\n', '\taddress public token;\n', '    address public bLOTToken;\n', '\n', '    /**\n', '    * @dev Swap BLOT token.\n', '    * account.\n', '    * @param amount The amount that will be swapped.\n', '    */\n', '    function swapBLOT(address _of, address _to, uint256 amount) public;\n', '\n', '    function totalBalanceOf(address _of)\n', '        public\n', '        view\n', '        returns (uint256 amount);\n', '\n', '    function transferFrom(address _token, address _of, address _to, uint256 amount) public;\n', '\n', '    /**\n', '     * @dev Returns tokens locked for a specified address for a\n', '     *      specified reason at a specific time\n', '     * @param _of The address whose tokens are locked\n', '     * @param _reason The reason to query the lock tokens for\n', '     * @param _time The timestamp to query the lock tokens for\n', '     */\n', '    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n', '        public\n', '        view\n', '        returns (uint256 amount);\n', '\n', '    /**\n', '    * @dev burns an amount of the tokens of the message sender\n', '    * account.\n', '    * @param amount The amount that will be burnt.\n', '    */\n', '    function burnCommissionTokens(uint256 amount) external returns(bool);\n', ' \n', '    function initiateVesting(address _vesting) external;\n', '\n', '    function lockForGovernanceVote(address _of, uint _days) public;\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function mint(address _member, uint _amount) public;\n', '\n', '}\n', '\n', '// File: contracts/interfaces/IMarketRegistry.sol\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'contract IMarketRegistry {\n', '\n', '    enum MarketType {\n', '      HourlyMarket,\n', '      DailyMarket,\n', '      WeeklyMarket\n', '    }\n', '    address public owner;\n', '    address public tokenController;\n', '    address public marketUtility;\n', '    bool public marketCreationPaused;\n', '\n', '    mapping(address => bool) public isMarket;\n', '    function() external payable{}\n', '\n', '    function marketDisputeStatus(address _marketAddress) public view returns(uint _status);\n', '\n', '    function burnDisputedProposalTokens(uint _proposaId) external;\n', '\n', '    function isWhitelistedSponsor(address _address) public view returns(bool);\n', '\n', '    function transferAssets(address _asset, address _to, uint _amount) external;\n', '\n', '    /**\n', '    * @dev Initialize the PlotX.\n', '    * @param _marketConfig The address of market config.\n', '    * @param _plotToken The address of PLOT token.\n', '    */\n', '    function initiate(address _defaultAddress, address _marketConfig, address _plotToken, address payable[] memory _configParams) public;\n', '\n', '    /**\n', '    * @dev Create proposal if user wants to raise the dispute.\n', '    * @param proposalTitle The title of proposal created by user.\n', '    * @param description The description of dispute.\n', '    * @param solutionHash The ipfs solution hash.\n', '    * @param actionHash The action hash for solution.\n', '    * @param stakeForDispute The token staked to raise the diospute.\n', '    * @param user The address who raises the dispute.\n', '    */\n', '    function createGovernanceProposal(string memory proposalTitle, string memory description, string memory solutionHash, bytes memory actionHash, uint256 stakeForDispute, address user, uint256 ethSentToPool, uint256 tokenSentToPool, uint256 proposedValue) public {\n', '    }\n', '\n', '    /**\n', '    * @dev Emits the PlacePrediction event and sets user data.\n', '    * @param _user The address who placed prediction.\n', '    * @param _value The amount of ether user staked.\n', '    * @param _predictionPoints The positions user will get.\n', '    * @param _predictionAsset The prediction assets user will get.\n', '    * @param _prediction The option range on which user placed prediction.\n', '    * @param _leverage The leverage selected by user at the time of place prediction.\n', '    */\n', '    function setUserGlobalPredictionData(address _user,uint _value, uint _predictionPoints, address _predictionAsset, uint _prediction,uint _leverage) public{\n', '    }\n', '\n', '    /**\n', '    * @dev Emits the claimed event.\n', '    * @param _user The address who claim their reward.\n', '    * @param _reward The reward which is claimed by user.\n', '    * @param incentives The incentives of user.\n', '    * @param incentiveToken The incentive tokens of user.\n', '    */\n', '    function callClaimedEvent(address _user , uint[] memory _reward, address[] memory predictionAssets, uint incentives, address incentiveToken) public {\n', '    }\n', '\n', '        /**\n', '    * @dev Emits the MarketResult event.\n', '    * @param _totalReward The amount of reward to be distribute.\n', '    * @param _winningOption The winning option of the market.\n', '    * @param _closeValue The closing value of the market currency.\n', '    */\n', '    function callMarketResultEvent(uint[] memory _totalReward, uint _winningOption, uint _closeValue, uint roundId) public {\n', '    }\n', '}\n', '\n', '// File: contracts/Market.sol\n', '\n', '/* Copyright (C) 2020 PlotX.io\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/ */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Market {\n', '    using SafeMath for *;\n', '\n', '    enum PredictionStatus {\n', '      Live,\n', '      InSettlement,\n', '      Cooling,\n', '      InDispute,\n', '      Settled\n', '    }\n', '    \n', '    struct option\n', '    {\n', '      uint predictionPoints;\n', '      mapping(address => uint256) assetStaked;\n', '      mapping(address => uint256) assetLeveraged;\n', '    }\n', '\n', '    struct MarketSettleData {\n', '      uint64 WinningOption;\n', '      uint64 settleTime;\n', '    }\n', '\n', '    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address constant marketFeedAddress = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\n', '    address constant plotToken = 0x72F020f8f3E8fd9382705723Cd26380f8D0c66Bb;\n', '\n', '    IMarketRegistry constant marketRegistry = IMarketRegistry(0xE210330d6768030e816d223836335079C7A0c851);\n', '    ITokenController constant tokenController = ITokenController(0x12d7053Efc680Ba6671F8Cb96d1421D906ce3dE2);\n', '    IMarketUtility constant marketUtility = IMarketUtility(0x2330058D49fA61D5C5405fA8B17fcD823c59F7Bb);\n', '\n', '    uint8 constant roundOfToNearest = 25;\n', '    uint constant totalOptions = 3;\n', '    uint constant MAX_LEVERAGE = 5;\n', '    uint constant ethCommissionPerc = 10; //with 2 decimals\n', '    uint constant plotCommissionPerc = 5; //with 2 decimals\n', '    bytes32 public constant marketCurrency = "B/USD";\n', '    \n', '    bool internal lockedForDispute;\n', '    address internal incentiveToken;\n', '    uint internal ethAmountToPool;\n', '    uint internal ethCommissionAmount;\n', '    uint internal plotCommissionAmount;\n', '    uint internal tokenAmountToPool;\n', '    uint internal incentiveToDistribute;\n', '    uint[] internal rewardToDistribute;\n', '    PredictionStatus internal predictionStatus;\n', '\n', '    \n', '    struct UserData {\n', '      bool claimedReward;\n', '      bool predictedWithBlot;\n', '      bool multiplierApplied;\n', '      mapping(uint => uint) predictionPoints;\n', '      mapping(address => mapping(uint => uint)) assetStaked;\n', '      mapping(address => mapping(uint => uint)) LeverageAsset;\n', '    }\n', '\n', '    struct MarketData {\n', '      uint64 startTime;\n', '      uint64 predictionTime;\n', '      uint64 neutralMinValue;\n', '      uint64 neutralMaxValue;\n', '    }\n', '\n', '    MarketData public marketData;\n', '    MarketSettleData public marketSettleData;\n', '\n', '    mapping(address => UserData) internal userData;\n', '\n', '    mapping(uint=>option) public optionsAvailable;\n', '\n', '    /**\n', '    * @dev Initialize the market.\n', '    * @param _startTime The time at which market will create.\n', '    * @param _predictionTime The time duration of market.\n', '    * @param _minValue The minimum value of neutral option range.\n', '    * @param _maxValue The maximum value of neutral option range.\n', '    */\n', '    function initiate(uint64 _startTime, uint64 _predictionTime, uint64 _minValue, uint64 _maxValue) public payable {\n', '      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));\n', '      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");\n', '      require(marketData.startTime == 0, "Already initialized");\n', '      require(_startTime.add(_predictionTime) > now);\n', '      marketData.startTime = _startTime;\n', '      marketData.predictionTime = _predictionTime;\n', '      \n', '      marketData.neutralMinValue = _minValue;\n', '      marketData.neutralMaxValue = _maxValue;\n', '    }\n', '\n', '    /**\n', '    * @dev Place prediction on the available options of the market.\n', '    * @param _asset The asset used by user during prediction whether it is plotToken address or in ether.\n', '    * @param _predictionStake The amount staked by user at the time of prediction.\n', '    * @param _prediction The option on which user placed prediction.\n', '    * @param _leverage The leverage opted by user at the time of prediction.\n', '    */\n', '    function placePrediction(address _asset, uint256 _predictionStake, uint256 _prediction,uint256 _leverage) public payable {\n', '      require(!marketRegistry.marketCreationPaused() && _prediction <= totalOptions && _leverage <= MAX_LEVERAGE);\n', '      require(now >= marketData.startTime && now <= marketExpireTime());\n', '\n', '      uint256 _commissionStake;\n', '      if(_asset == ETH_ADDRESS) {\n', '        require(_predictionStake == msg.value);\n', '        _commissionStake = _calculatePercentage(ethCommissionPerc, _predictionStake, 10000);\n', '        ethCommissionAmount = ethCommissionAmount.add(_commissionStake);\n', '      } else {\n', '        require(msg.value == 0);\n', '        if (_asset == plotToken){\n', '          tokenController.transferFrom(plotToken, msg.sender, address(this), _predictionStake);\n', '        } else {\n', '          require(_asset == tokenController.bLOTToken());\n', '          require(_leverage == MAX_LEVERAGE);\n', '          require(!userData[msg.sender].predictedWithBlot);\n', '          userData[msg.sender].predictedWithBlot = true;\n', '          tokenController.swapBLOT(msg.sender, address(this), _predictionStake);\n', '          _asset = plotToken;\n', '        }\n', '        _commissionStake = _calculatePercentage(plotCommissionPerc, _predictionStake, 10000);\n', '        plotCommissionAmount = plotCommissionAmount.add(_commissionStake);\n', '      }\n', '      _commissionStake = _predictionStake.sub(_commissionStake);\n', '\n', '\n', '      (uint predictionPoints, bool isMultiplierApplied) = calculatePredictionValue(_prediction, _commissionStake, _leverage, _asset);\n', '      if(isMultiplierApplied) {\n', '        userData[msg.sender].multiplierApplied = true; \n', '      }\n', '      require(predictionPoints > 0);\n', '\n', '      _storePredictionData(_prediction, _commissionStake, _asset, _leverage, predictionPoints);\n', '      marketRegistry.setUserGlobalPredictionData(msg.sender,_predictionStake, predictionPoints, _asset, _prediction, _leverage);\n', '    }\n', '\n', '    function calculatePredictionValue(uint _prediction, uint _predictionStake, uint _leverage, address _asset) internal view returns(uint predictionPoints, bool isMultiplierApplied) {\n', '      uint[] memory params = new uint[](11);\n', '      params[0] = _prediction;\n', '      params[1] = marketData.neutralMinValue;\n', '      params[2] = marketData.neutralMaxValue;\n', '      params[3] = marketData.startTime;\n', '      params[4] = marketExpireTime();\n', '      (params[5], params[6]) = getTotalAssetsStaked();\n', '      params[7] = optionsAvailable[_prediction].assetStaked[ETH_ADDRESS];\n', '      params[8] = optionsAvailable[_prediction].assetStaked[plotToken];\n', '      params[9] = _predictionStake;\n', '      params[10] = _leverage;\n', '      bool checkMultiplier;\n', '      if(!userData[msg.sender].multiplierApplied) {\n', '        checkMultiplier = true;\n', '      }\n', '      (predictionPoints, isMultiplierApplied) = marketUtility.calculatePredictionValue(params, _asset, msg.sender, marketFeedAddress, checkMultiplier);\n', '      \n', '    }\n', '\n', '    function getTotalAssetsStaked() public view returns(uint256 ethStaked, uint256 plotStaked) {\n', '      for(uint256 i = 1; i<= totalOptions;i++) {\n', '        ethStaked = ethStaked.add(optionsAvailable[i].assetStaked[ETH_ADDRESS]);\n', '        plotStaked = plotStaked.add(optionsAvailable[i].assetStaked[plotToken]);\n', '      }\n', '    }\n', '\n', '    function getTotalStakedValueInPLOT() public view returns(uint256) {\n', '      (uint256 ethStaked, uint256 plotStaked) = getTotalAssetsStaked();\n', '      (, ethStaked) = marketUtility.getValueAndMultiplierParameters(ETH_ADDRESS, ethStaked);\n', '      return plotStaked.add(ethStaked);\n', '    }\n', '\n', '    /**\n', '    * @dev Stores the prediction data.\n', '    * @param _prediction The option on which user place prediction.\n', '    * @param _predictionStake The amount staked by user at the time of prediction.\n', '    * @param _asset The asset used by user during prediction.\n', '    * @param _leverage The leverage opted by user during prediction.\n', '    * @param predictionPoints The positions user got during prediction.\n', '    */\n', '    function _storePredictionData(uint _prediction, uint _predictionStake, address _asset, uint _leverage, uint predictionPoints) internal {\n', '      userData[msg.sender].predictionPoints[_prediction] = userData[msg.sender].predictionPoints[_prediction].add(predictionPoints);\n', '      userData[msg.sender].assetStaked[_asset][_prediction] = userData[msg.sender].assetStaked[_asset][_prediction].add(_predictionStake);\n', '      userData[msg.sender].LeverageAsset[_asset][_prediction] = userData[msg.sender].LeverageAsset[_asset][_prediction].add(_predictionStake.mul(_leverage));\n', '      optionsAvailable[_prediction].predictionPoints = optionsAvailable[_prediction].predictionPoints.add(predictionPoints);\n', '      optionsAvailable[_prediction].assetStaked[_asset] = optionsAvailable[_prediction].assetStaked[_asset].add(_predictionStake);\n', '      optionsAvailable[_prediction].assetLeveraged[_asset] = optionsAvailable[_prediction].assetLeveraged[_asset].add(_predictionStake.mul(_leverage));\n', '    }\n', '\n', '    /**\n', '    * @dev Settle the market, setting the winning option\n', '    */\n', '    function settleMarket() external {\n', '      (uint256 _value, uint256 _roundId) = marketUtility.getSettlemetPrice(marketFeedAddress, uint256(marketSettleTime()));\n', '      if(marketStatus() == PredictionStatus.InSettlement) {\n', '        _postResult(_value, _roundId);\n', '      }\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the result of market.\n', '    * @param _value The current price of market currency.\n', '    */\n', '    function _postResult(uint256 _value, uint256 _roundId) internal {\n', '      require(now >= marketSettleTime(),"Time not reached");\n', '      require(_value > 0,"value should be greater than 0");\n', '      uint riskPercentage;\n', '      ( , riskPercentage, , ) = marketUtility.getBasicMarketDetails();\n', '      if(predictionStatus != PredictionStatus.InDispute) {\n', '        marketSettleData.settleTime = uint64(now);\n', '      } else {\n', '        delete marketSettleData.settleTime;\n', '      }\n', '      predictionStatus = PredictionStatus.Settled;\n', '      if(_value < marketData.neutralMinValue) {\n', '        marketSettleData.WinningOption = 1;\n', '      } else if(_value > marketData.neutralMaxValue) {\n', '        marketSettleData.WinningOption = 3;\n', '      } else {\n', '        marketSettleData.WinningOption = 2;\n', '      }\n', '      uint[] memory totalReward = new uint256[](2);\n', '      if(optionsAvailable[marketSettleData.WinningOption].assetStaked[ETH_ADDRESS] > 0 ||\n', '        optionsAvailable[marketSettleData.WinningOption].assetStaked[plotToken] > 0\n', '      ){\n', '        for(uint i=1;i <= totalOptions;i++){\n', '          if(i!=marketSettleData.WinningOption) {\n', '            uint256 leveragedAsset = _calculatePercentage(riskPercentage, optionsAvailable[i].assetLeveraged[plotToken], 100);\n', '            totalReward[0] = totalReward[0].add(leveragedAsset);\n', '            leveragedAsset = _calculatePercentage(riskPercentage, optionsAvailable[i].assetLeveraged[ETH_ADDRESS], 100);\n', '            totalReward[1] = totalReward[1].add(leveragedAsset);\n', '          }\n', '        }\n', '        rewardToDistribute = totalReward;\n', '      } else {\n', '        for(uint i=1;i <= totalOptions;i++){\n', '          uint256 leveragedAsset = _calculatePercentage(riskPercentage, optionsAvailable[i].assetLeveraged[plotToken], 100);\n', '          tokenAmountToPool = tokenAmountToPool.add(leveragedAsset);\n', '          leveragedAsset = _calculatePercentage(riskPercentage, optionsAvailable[i].assetLeveraged[ETH_ADDRESS], 100);\n', '          ethAmountToPool = ethAmountToPool.add(leveragedAsset);\n', '        }\n', '      }\n', '      _transferAsset(ETH_ADDRESS, address(marketRegistry), ethAmountToPool.add(ethCommissionAmount));\n', '      _transferAsset(plotToken, address(marketRegistry), tokenAmountToPool.add(plotCommissionAmount));\n', '      delete ethCommissionAmount;\n', '      delete plotCommissionAmount;\n', '      marketRegistry.callMarketResultEvent(rewardToDistribute, marketSettleData.WinningOption, _value, _roundId);\n', '    }\n', '\n', '    function _calculatePercentage(uint256 _percent, uint256 _value, uint256 _divisor) internal pure returns(uint256) {\n', '      return _percent.mul(_value).div(_divisor);\n', '    }\n', '\n', '    /**\n', '    * @dev Raise the dispute if wrong value passed at the time of market result declaration.\n', '    * @param proposedValue The proposed value of market currency.\n', '    * @param proposalTitle The title of proposal created by user.\n', '    * @param description The description of dispute.\n', '    * @param solutionHash The ipfs solution hash.\n', '    */\n', '    function raiseDispute(uint256 proposedValue, string memory proposalTitle, string memory description, string memory solutionHash) public {\n', '      require(getTotalStakedValueInPLOT() > 0, "No participation");\n', '      require(marketStatus() == PredictionStatus.Cooling);\n', '      uint _stakeForDispute =  marketUtility.getDisputeResolutionParams();\n', '      tokenController.transferFrom(plotToken, msg.sender, address(marketRegistry), _stakeForDispute);\n', '      lockedForDispute = true;\n', '      marketRegistry.createGovernanceProposal(proposalTitle, description, solutionHash, abi.encode(address(this), proposedValue), _stakeForDispute, msg.sender, ethAmountToPool, tokenAmountToPool, proposedValue);\n', '      delete ethAmountToPool;\n', '      delete tokenAmountToPool;\n', '      predictionStatus = PredictionStatus.InDispute;\n', '    }\n', '\n', '    /**\n', '    * @dev Resolve the dispute\n', '    * @param accepted Flag mentioning if dispute is accepted or not\n', '    * @param finalResult The final correct value of market currency.\n', '    */\n', '    function resolveDispute(bool accepted, uint256 finalResult) external payable {\n', '      require(msg.sender == address(marketRegistry) && marketStatus() == PredictionStatus.InDispute);\n', '      if(accepted) {\n', '        _postResult(finalResult, 0);\n', '      }\n', '      lockedForDispute = false;\n', '      predictionStatus = PredictionStatus.Settled;\n', '    }\n', '\n', '    function sponsorIncentives(address _token, uint256 _value) external {\n', '      require(marketRegistry.isWhitelistedSponsor(msg.sender));\n', '      require(marketStatus() <= PredictionStatus.InSettlement);\n', '      require(incentiveToken == address(0), "Already sponsored");\n', '      incentiveToken = _token;\n', '      incentiveToDistribute = _value;\n', '      tokenController.transferFrom(_token, msg.sender, address(this), _value);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Claim the return amount of the specified address.\n', '    * @param _user The address to query the claim return amount of.\n', '    * @return Flag, if 0:cannot claim, 1: Already Claimed, 2: Claimed\n', '    */\n', '    function claimReturn(address payable _user) public returns(uint256) {\n', '\n', '      if(lockedForDispute || marketStatus() != PredictionStatus.Settled || marketRegistry.marketCreationPaused()) {\n', '        return 0;\n', '      }\n', '      if(userData[_user].claimedReward) {\n', '        return 1;\n', '      }\n', '      userData[_user].claimedReward = true;\n', '      (uint[] memory _returnAmount, address[] memory _predictionAssets, uint _incentive, ) = getReturn(_user);\n', '      _transferAsset(plotToken, _user, _returnAmount[0]);\n', '      _transferAsset(ETH_ADDRESS, _user, _returnAmount[1]);\n', '      _transferAsset(incentiveToken, _user, _incentive);\n', '      marketRegistry.callClaimedEvent(_user, _returnAmount, _predictionAssets, _incentive, incentiveToken);\n', '      return 2;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the assets to specified address.\n', '    * @param _asset The asset transfer to the specific address.\n', '    * @param _recipient The address to transfer the asset of\n', '    * @param _amount The amount which is transfer.\n', '    */\n', '    function _transferAsset(address _asset, address payable _recipient, uint256 _amount) internal {\n', '      if(_amount > 0) { \n', '        if(_asset == ETH_ADDRESS) {\n', '          _recipient.transfer(_amount);\n', '        } else {\n', '          require(IToken(_asset).transfer(_recipient, _amount));\n', '        }\n', '      }\n', '    }\n', '\n', '    /**\n', '    * @dev Get market settle time\n', '    * @return the time at which the market result will be declared\n', '    */\n', '    function marketSettleTime() public view returns(uint64) {\n', '      if(marketSettleData.settleTime > 0) {\n', '        return marketSettleData.settleTime;\n', '      }\n', '      return uint64(marketData.startTime.add(marketData.predictionTime.mul(2)));\n', '    }\n', '\n', '    /**\n', '    * @dev Get market expire time\n', '    * @return the time upto which user can place predictions in market\n', '    */\n', '    function marketExpireTime() internal view returns(uint256) {\n', '      return marketData.startTime.add(marketData.predictionTime);\n', '    }\n', '\n', '    /**\n', '    * @dev Get market cooldown time\n', '    * @return the time upto which user can raise the dispute after the market is settled\n', '    */\n', '    function marketCoolDownTime() public view returns(uint256) {\n', '      return marketSettleData.settleTime.add(marketData.predictionTime.div(4));\n', '    }\n', '\n', '    /**\n', '    * @dev Get market Feed data\n', '    * @return market currency name\n', '    * @return market currency feed address\n', '    */\n', '    function getMarketFeedData() public view returns(uint8, bytes32, address) {\n', '      return (roundOfToNearest, marketCurrency, marketFeedAddress);\n', '    }\n', '\n', '   /**\n', '    * @dev Get estimated amount of prediction points for given inputs.\n', '    * @param _prediction The option on which user place prediction.\n', '    * @param _stakeValueInEth The amount staked by user.\n', '    * @param _leverage The leverage opted by user at the time of prediction.\n', '    * @return uint256 representing the prediction points.\n', '    */\n', '    function estimatePredictionValue(uint _prediction, uint _stakeValueInEth, uint _leverage) public view returns(uint _predictionValue){\n', '      (_predictionValue, ) = calculatePredictionValue(_prediction, _stakeValueInEth, _leverage, ETH_ADDRESS);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the price of specific option.\n', '    * @param _prediction The option number to query the balance of.\n', '    * @return Price of the option.\n', '    */\n', '    function getOptionPrice(uint _prediction) public view returns(uint) {\n', '      uint[] memory params = new uint[](9);\n', '      params[0] = _prediction;\n', '      params[1] = marketData.neutralMinValue;\n', '      params[2] = marketData.neutralMaxValue;\n', '      params[3] = marketData.startTime;\n', '      params[4] = marketExpireTime();\n', '      (params[5], params[6]) = getTotalAssetsStaked();\n', '      params[7] = optionsAvailable[_prediction].assetStaked[ETH_ADDRESS];\n', '      params[8] = optionsAvailable[_prediction].assetStaked[plotToken];\n', '      return marketUtility.calculateOptionPrice(params, marketFeedAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets number of positions user got in prediction\n', '    * @param _user Address of user\n', '    * @param _option Option Id\n', '    */\n', '    function getUserPredictionPoints(address _user, uint256 _option) external view returns(uint256) {\n', '      return userData[_user].predictionPoints[_option];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the market data.\n', '    * @return _marketCurrency bytes32 representing the currency or stock name of the market.\n', '    * @return minvalue uint[] memory representing the minimum range of all the options of the market.\n', '    * @return maxvalue uint[] memory representing the maximum range of all the options of the market.\n', '    * @return _optionPrice uint[] memory representing the option price of each option ranges of the market.\n', '    * @return _ethStaked uint[] memory representing the ether staked on each option ranges of the market.\n', '    * @return _plotStaked uint[] memory representing the plot staked on each option ranges of the market.\n', '    * @return _predictionTime uint representing the type of market.\n', '    * @return _expireTime uint representing the time at which market closes for prediction\n', '    * @return _predictionStatus uint representing the status of the market.\n', '    */\n', '    function getData() public view returns\n', '       (bytes32 _marketCurrency,uint[] memory minvalue,uint[] memory maxvalue,\n', '        uint[] memory _optionPrice, uint[] memory _ethStaked, uint[] memory _plotStaked,uint _predictionTime,uint _expireTime, uint _predictionStatus){\n', '        _marketCurrency = marketCurrency;\n', '        _predictionTime = marketData.predictionTime;\n', '        _expireTime =marketExpireTime();\n', '        _predictionStatus = uint(marketStatus());\n', '        minvalue = new uint[](totalOptions);\n', '        minvalue[1] = marketData.neutralMinValue;\n', '        minvalue[2] = marketData.neutralMaxValue.add(1);\n', '        maxvalue = new uint[](totalOptions);\n', '        maxvalue[0] = marketData.neutralMinValue.sub(1);\n', '        maxvalue[1] = marketData.neutralMaxValue;\n', '        maxvalue[2] = ~uint256(0);\n', '        \n', '        _optionPrice = new uint[](totalOptions);\n', '        _ethStaked = new uint[](totalOptions);\n', '        _plotStaked = new uint[](totalOptions);\n', '        for (uint i = 0; i < totalOptions; i++) {\n', '        _ethStaked[i] = optionsAvailable[i+1].assetStaked[ETH_ADDRESS];\n', '        _plotStaked[i] = optionsAvailable[i+1].assetStaked[plotToken];\n', '        _optionPrice[i] = getOptionPrice(i+1);\n', '       }\n', '    }\n', '\n', '   /**\n', '    * @dev Gets the result of the market.\n', '    * @return uint256 representing the winning option of the market.\n', '    * @return uint256 Value of market currently at the time closing market.\n', '    * @return uint256 representing the positions of the winning option.\n', '    * @return uint[] memory representing the reward to be distributed.\n', '    * @return uint256 representing the Eth staked on winning option.\n', '    * @return uint256 representing the PLOT staked on winning option.\n', '    */\n', '    function getMarketResults() public view returns(uint256, uint256, uint256[] memory, uint256, uint256) {\n', '      return (marketSettleData.WinningOption, optionsAvailable[marketSettleData.WinningOption].predictionPoints, rewardToDistribute, optionsAvailable[marketSettleData.WinningOption].assetStaked[ETH_ADDRESS], optionsAvailable[marketSettleData.WinningOption].assetStaked[plotToken]);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Gets the return amount of the specified address.\n', '    * @param _user The address to specify the return of\n', '    * @return returnAmount uint[] memory representing the return amount.\n', '    * @return incentive uint[] memory representing the amount incentive.\n', '    * @return _incentiveTokens address[] memory representing the incentive tokens.\n', '    */\n', '    function getReturn(address _user)public view returns (uint[] memory returnAmount, address[] memory _predictionAssets, uint incentive, address _incentiveToken){\n', '      (uint256 ethStaked, uint256 plotStaked) = getTotalAssetsStaked();\n', '      if(marketStatus() != PredictionStatus.Settled || ethStaked.add(plotStaked) ==0) {\n', '       return (returnAmount, _predictionAssets, incentive, incentiveToken);\n', '      }\n', '      _predictionAssets = new address[](2);\n', '      _predictionAssets[0] = plotToken;\n', '      _predictionAssets[1] = ETH_ADDRESS;\n', '\n', '      uint256 _totalUserPredictionPoints = 0;\n', '      uint256 _totalPredictionPoints = 0;\n', '      (returnAmount, _totalUserPredictionPoints, _totalPredictionPoints) = _calculateUserReturn(_user);\n', '      incentive = _calculateIncentives(_totalUserPredictionPoints, _totalPredictionPoints);\n', '      if(userData[_user].predictionPoints[marketSettleData.WinningOption] > 0) {\n', '        returnAmount = _addUserReward(_user, returnAmount);\n', '      }\n', '      return (returnAmount, _predictionAssets, incentive, incentiveToken);\n', '    }\n', '\n', '    /**\n', '    * @dev Get flags set for user\n', '    * @param _user User address\n', '    * @return Flag defining if user had availed multiplier\n', '    * @return Flag defining if user had predicted with bPLOT\n', '    */\n', '    function getUserFlags(address _user) external view returns(bool, bool) {\n', '      return (userData[_user].multiplierApplied, userData[_user].predictedWithBlot);\n', '    }\n', '\n', '    /**\n', '    * @dev Adds the reward in the total return of the specified address.\n', '    * @param _user The address to specify the return of.\n', '    * @param returnAmount The return amount.\n', '    * @return uint[] memory representing the return amount after adding reward.\n', '    */\n', '    function _addUserReward(address _user, uint[] memory returnAmount) internal view returns(uint[] memory){\n', '      uint reward;\n', '      for(uint j = 0; j< returnAmount.length; j++) {\n', '        reward = userData[_user].predictionPoints[marketSettleData.WinningOption].mul(rewardToDistribute[j]).div(optionsAvailable[marketSettleData.WinningOption].predictionPoints);\n', '        returnAmount[j] = returnAmount[j].add(reward);\n', '      }\n', '      return returnAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the return of the specified address.\n', '    * @param _user The address to query the return of.\n', '    * @return _return uint[] memory representing the return amount owned by the passed address.\n', '    * @return _totalUserPredictionPoints uint representing the positions owned by the passed address.\n', '    * @return _totalPredictionPoints uint representing the total positions of winners.\n', '    */\n', '    function _calculateUserReturn(address _user) internal view returns(uint[] memory _return, uint _totalUserPredictionPoints, uint _totalPredictionPoints){\n', '      ( , uint riskPercentage, , ) = marketUtility.getBasicMarketDetails();\n', '      _return = new uint256[](2);\n', '      for(uint  i=1;i<=totalOptions;i++){\n', '        _totalUserPredictionPoints = _totalUserPredictionPoints.add(userData[_user].predictionPoints[i]);\n', '        _totalPredictionPoints = _totalPredictionPoints.add(optionsAvailable[i].predictionPoints);\n', '        _return[0] =  _callReturn(_return[0], _user, i, riskPercentage, plotToken);\n', '        _return[1] =  _callReturn(_return[1], _user, i, riskPercentage, ETH_ADDRESS);\n', '      }\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the incentives.\n', '    * @param _totalUserPredictionPoints The positions of user.\n', '    * @param _totalPredictionPoints The total positions of winners.\n', '    * @return incentive the calculated incentive.\n', '    */\n', '    function _calculateIncentives(uint256 _totalUserPredictionPoints, uint256 _totalPredictionPoints) internal view returns(uint256 incentive){\n', '      incentive = _totalUserPredictionPoints.mul(incentiveToDistribute.div(_totalPredictionPoints));\n', '    }\n', '\n', '    // /**\n', '    // * @dev Gets the pending return.\n', '    // * @param _user The address to specify the return of.\n', '    // * @return uint representing the pending return amount.\n', '    // */\n', '    // function getPendingReturn(address _user) external view returns(uint[] memory returnAmount, address[] memory _predictionAssets, uint[] memory incentive, address[] memory _incentiveTokens){\n', '    //   if(userClaimedReward[_user]) return (0,0);\n', '    //   return getReturn(_user);\n', '    // }\n', '    \n', '    /**\n', '    * @dev Calls the total return amount internally.\n', '    */\n', '    function _callReturn(uint _return,address _user,uint i,uint riskPercentage, address _asset)internal view returns(uint){\n', '      if(i == marketSettleData.WinningOption) {\n', '        riskPercentage = 0;\n', '      }\n', '      uint256 leveragedAsset = _calculatePercentage(riskPercentage, userData[_user].LeverageAsset[_asset][i], 100);\n', '      return _return.add(userData[_user].assetStaked[_asset][i].sub(leveragedAsset));\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Gets the status of market.\n', '    * @return PredictionStatus representing the status of market.\n', '    */\n', '    function marketStatus() internal view returns(PredictionStatus){\n', '      if(predictionStatus == PredictionStatus.Live && now >= marketExpireTime()) {\n', '        return PredictionStatus.InSettlement;\n', '      } else if(predictionStatus == PredictionStatus.Settled && now <= marketCoolDownTime()) {\n', '        return PredictionStatus.Cooling;\n', '      }\n', '      return predictionStatus;\n', '    }\n', '\n', '}']