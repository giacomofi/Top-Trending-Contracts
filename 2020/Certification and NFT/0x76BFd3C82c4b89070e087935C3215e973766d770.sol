['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface Proxy {\n', '  function upgradeTo(address newImplementation) external;\n', '}\n', '\n', 'contract sbUpgrader {\n', '  event Upgraded(address indexed proxyAddress, address indexed implementationAddress);\n', '\n', '  address public admin;\n', '  address public pendingAdmin;\n', '  address public superAdmin;\n', '  address public pendingSuperAdmin;\n', '\n', '  constructor(address adminAddress, address superAdminAddress) public {\n', '    admin = adminAddress;\n', '    superAdmin = superAdminAddress;\n', '  }\n', '\n', '  // ADMIN\n', '  // *************************************************************************************\n', '  function setPendingAdmin(address newPendingAdmin) public {\n', "    require(msg.sender == admin, 'not admin');\n", '    pendingAdmin = newPendingAdmin;\n', '  }\n', '\n', '  function acceptAdmin() public {\n', "    require(msg.sender == pendingAdmin && msg.sender != address(0), 'not pendingAdmin');\n", '    admin = pendingAdmin;\n', '    pendingAdmin = address(0);\n', '  }\n', '\n', '  function setPendingSuperAdmin(address newPendingSuperAdmin) public {\n', "    require(msg.sender == superAdmin, 'not superAdmin');\n", '    pendingSuperAdmin = newPendingSuperAdmin;\n', '  }\n', '\n', '  function acceptSuperAdmin() public {\n', "    require(msg.sender == pendingSuperAdmin && msg.sender != address(0), 'not pendingSuperAdmin');\n", '    superAdmin = pendingSuperAdmin;\n', '    pendingSuperAdmin = address(0);\n', '  }\n', '\n', '  // UPGRADE\n', '  // *************************************************************************************\n', '  function upgrade(address proxyAddress, address implementationAddress) external {\n', "    require(msg.sender == admin || msg.sender == superAdmin, 'not admin');\n", '    Proxy proxy = Proxy(proxyAddress);\n', '    proxy.upgradeTo(implementationAddress);\n', '    emit Upgraded(proxyAddress, implementationAddress);\n', '  }\n', '}']