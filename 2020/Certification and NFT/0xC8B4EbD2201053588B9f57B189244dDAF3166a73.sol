['// File: contracts/helpers/Owned.sol\n', '\n', 'pragma solidity >=0.4.0 <0.6.0;\n', '\n', 'contract Owned {\n', '  address payable public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner, "Sender not owner");\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/Gems/Staking.sol\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '\n', '\n', 'interface IStakingErc20 {\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '  // This only applies to Cargo Credits \n', '  function increaseBalance(address user, uint balance) external;\n', '  function transfer(address to, uint256 value) external returns (bool success);\n', '}\n', '\n', 'interface IStakingCargoData {\n', '  function verifySigAndUuid(bytes32 hash, bytes calldata signature, bytes32 uuid) external;\n', '  function verifyContract(address contractAddress) external returns (bool);\n', '}\n', '\n', 'interface IStakingErc721 {\n', '  function ownerOf(uint256 tokenId) external view returns (address);\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', 'contract CargoGemsStaking is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event TotalStakeUpdated(uint totalStakedAmount);\n', '  event TokenStakeUpdated(\n', '    address indexed tokenContract, \n', '    uint256 indexed tokenId, \n', '    uint256 stakedAmount, \n', '    bool genesis\n', '  );\n', '  event Claim(\n', '    address indexed claimant, \n', '    address indexed tokenContractAddress, \n', '    uint256 indexed tokenId, \n', '    uint256 gemsReward, \n', '    uint256 creditsReward\n', '  );\n', '\n', '  IStakingCargoData cargoData;\n', '  IStakingErc20 cargoGems;\n', '  IStakingErc20 cargoCredits;\n', '\n', '  struct Stake {\n', '    uint amount;\n', '    uint lastBlockClaimed;\n', '    uint genesisBlock;\n', '    bool exists;\n', '  }\n', '\n', '  uint256 public totalStaked = 0;\n', '  mapping(string => bool) config;\n', '\n', '  // Token Contract Address => Token ID => Staked Amount\n', '  mapping(address => mapping(uint256 => Stake)) tokenStakes;\n', '  mapping(address => bool) public whiteList;\n', '  mapping(address => bool) public blackList;\n', '\n', '  constructor(address cargoDataAddress, address cargoGemsAddress, address cargoCreditsAddress) public {\n', '    cargoData = IStakingCargoData(cargoDataAddress);\n', '    cargoGems = IStakingErc20(cargoGemsAddress);\n', '    cargoCredits = IStakingErc20(cargoCreditsAddress);\n', '    config["enabled"] = true;\n', '    config["onlyCargoContracts"] = true;\n', '  }\n', '\n', '  modifier onlyEnabled() {\n', '    require(config["enabled"] == true, "Staking: Not enabled"); \n', '    _;\n', '  }\n', '\n', '  modifier onlyExists(address contractAddress, uint tokenId) {\n', '    require(tokenStakes[contractAddress][tokenId].exists, "Staking: Token ID at address not staked");\n', '    _;\n', '  }\n', '\n', '  function updateBlacklist(address contractAddress, bool val) external onlyOwner {\n', '    blackList[contractAddress] = val;\n', '  }\n', '\n', '  function updateWhitelist(address contractAddress, bool val) external onlyOwner {\n', '    whiteList[contractAddress] = val;\n', '  }\n', '\n', '  function updateConfig(string calldata key, bool value) external onlyOwner {\n', '    config[key] = value;\n', '  }\n', '\n', '  function getStakedAmount(address contractAddress, uint tokenId) onlyExists(contractAddress, tokenId) external view returns (uint) {\n', '    return tokenStakes[contractAddress][tokenId].amount;\n', '  }\n', '\n', '  function getLastBlockClaimed(address contractAddress, uint tokenId) onlyExists(contractAddress, tokenId) external view returns (uint) {\n', '    return tokenStakes[contractAddress][tokenId].lastBlockClaimed;\n', '  }\n', '\n', '  function getStakeGenesis(address contractAddress, uint tokenId) onlyExists(contractAddress, tokenId) external view returns (uint) {\n', '    return tokenStakes[contractAddress][tokenId].genesisBlock;\n', '  }\n', '\n', '  /** @notice Function to claim rewards. Rewards are calculated off-chain by using on-chain data */\n', '  function claim(\n', '    address tokenContractAddress, \n', '    uint tokenId, \n', '    uint gemsReward,\n', '    uint creditsReward,\n', '    uint blockNumber,\n', '    uint amountToWithdraw,\n', '    bytes32 uuid,\n', '    bytes calldata signature\n', '  ) external onlyEnabled {\n', '    cargoData.verifySigAndUuid(keccak256(\n', '      abi.encodePacked(\n', '        "CLAIM",\n', '        tokenContractAddress,\n', '        tokenId,\n', '        gemsReward,\n', '        creditsReward,\n', '        amountToWithdraw,\n', '        blockNumber,\n', '        uuid\n', '      )\n', '    ), signature, uuid);\n', '\n', '    IStakingErc721 erc721 = IStakingErc721(tokenContractAddress);\n', '    require(erc721.ownerOf(tokenId) == msg.sender, "Staking: Sender not owner");\n', '    require(tokenStakes[tokenContractAddress][tokenId].lastBlockClaimed < blockNumber, "Staking: block number invalid");\n', '\n', '    tokenStakes[tokenContractAddress][tokenId].amount = tokenStakes[tokenContractAddress][tokenId].amount.add(gemsReward);\n', '    totalStaked = totalStaked.add(gemsReward);\n', '\n', '    if(amountToWithdraw > 0) {\n', '      require(amountToWithdraw <= tokenStakes[tokenContractAddress][tokenId].amount, "Staking: Withdrawl amount must be lte staked amount");\n', '\n', '      // transfer rewards to sender\n', '      cargoGems.transfer(msg.sender, amountToWithdraw);\n', '      \n', '      // Decrease staked amount\n', '      tokenStakes[tokenContractAddress][tokenId].amount = tokenStakes[tokenContractAddress][tokenId].amount.sub(amountToWithdraw);\n', '      totalStaked = totalStaked.sub(amountToWithdraw);\n', '    }\n', '\n', '    // Regardless of whether its a withdrawl the user will still be rewarded credits.\n', '    cargoCredits.increaseBalance(msg.sender, creditsReward);\n', '\n', '    // Save block number \n', '    tokenStakes[tokenContractAddress][tokenId].lastBlockClaimed = block.number;\n', '\n', '    emit Claim(msg.sender, tokenContractAddress, tokenId, gemsReward, creditsReward);\n', '    emit TotalStakeUpdated(totalStaked);\n', '    emit TokenStakeUpdated(\n', '      tokenContractAddress, \n', '      tokenId, \n', '      tokenStakes[tokenContractAddress][tokenId].amount, \n', '      !tokenStakes[tokenContractAddress][tokenId].exists\n', '    );\n', '  }\n', '\n', '  /**\n', '    @notice function to stake \n', '    @param tokenContractAddress Address of ERC721 contract\n', '    @param tokenId ID of token\n', '    @param amountToStake Amount of Cargo gems, must account for decimals when sending this\n', '   */\n', '  function stake(address tokenContractAddress, uint tokenId, uint amountToStake) external onlyEnabled {\n', '    require(amountToStake > 0, "Staking: Amount must be gt 0");\n', '    if(config["onlyCargoContracts"]) {\n', '      require(cargoData.verifyContract(tokenContractAddress), "Staking: Must be a cargo contract");\n', '    }\n', '    IStakingErc721 erc721 = IStakingErc721(tokenContractAddress);\n', '    require(\n', '      (erc721.supportsInterface(0x80ac58cd) || whiteList[tokenContractAddress]) \n', '      && !blackList[tokenContractAddress], \n', '      "Staking: 721 not supported"\n', '    );\n', '    require(erc721.ownerOf(tokenId) == msg.sender, "Staking: Sender not owner");\n', '    // User must approve this contract to transfer the given amount\n', '    cargoGems.transferFrom(msg.sender, address(this), amountToStake);\n', '\n', "    // Increase token's staked amount\n", '    tokenStakes[tokenContractAddress][tokenId].amount = tokenStakes[tokenContractAddress][tokenId].amount.add(amountToStake);\n', '\n', '    // Increase the total staked amount\n', '    totalStaked = totalStaked.add(amountToStake);\n', '\n', '    emit TotalStakeUpdated(totalStaked);\n', '    emit TokenStakeUpdated(\n', '      tokenContractAddress, \n', '      tokenId, \n', '      tokenStakes[tokenContractAddress][tokenId].amount, \n', '      !tokenStakes[tokenContractAddress][tokenId].exists\n', '    );\n', '\n', '    if(!tokenStakes[tokenContractAddress][tokenId].exists) {\n', '      tokenStakes[tokenContractAddress][tokenId].genesisBlock = block.number;\n', '      tokenStakes[tokenContractAddress][tokenId].exists = true;\n', '    }\n', '  }\n', '}']