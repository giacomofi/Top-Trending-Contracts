['pragma solidity =0.6.6;\n', '\n', '/* \n', '* CrystalFinance - Hybrid DeFi Model\n', '*\n', '*    _____  _______     _______ _______       _      \n', '*   / ____|  __ \\ \\   / / ____|__   __|/\\   | |     \n', '*  | |    | |__) \\ \\_/ / (___    | |  /  \\  | |     \n', '*  | |    |  _  / \\   / \\___ \\   | | / /\\ \\ | |     \n', '*  | |____| | \\ \\  | |  ____) |  | |/ ____ \\| |____ \n', '*   \\_____|_|  \\_\\ |_| |_____/   |_/_/    \\_\\______|\n', '*\n', '* https://crystaldefi.net\n', '*/\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library ABDKMath64x64 {\n', '  /*\n', '   * Minimum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /*\n', '   * Maximum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromInt (int256 x) internal pure returns (int128) {\n', '    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 64-bit integer number\n', '   * rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64-bit integer number\n', '   */\n', '  function toInt (int128 x) internal pure returns (int64) {\n', '    return int64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n', '   * number rounding down.  Revert on underflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return unsigned 64-bit integer number\n', '   */\n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n', '   * number rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 128.128-bin fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function from128x128 (int256 x) internal pure returns (int128) {\n', '    int256 result = x >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n', '   * number.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 128.128 fixed point number\n', '   */\n', '  function to128x128 (int128 x) internal pure returns (int256) {\n', '    return int256 (x) << 64;\n', '  }\n', '\n', '  /**\n', '   * Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x - y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sub (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) - y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function mul (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) * y >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n', '   * number and y is signed 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 256-bit integer number\n', '   */\n', '  function muli (int128 x, int256 y) internal pure returns (int256) {\n', '    if (x == MIN_64x64) {\n', '      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n', '        y <= 0x1000000000000000000000000000000000000000000000000);\n', '      return -y << 63;\n', '    } else {\n', '      bool negativeResult = false;\n', '      if (x < 0) {\n', '        x = -x;\n', '        negativeResult = true;\n', '      }\n', '      if (y < 0) {\n', '        y = -y; // We rely on overflow behavior here\n', '        negativeResult = !negativeResult;\n', '      }\n', '      uint256 absoluteResult = mulu (x, uint256 (y));\n', '      if (negativeResult) {\n', '        require (absoluteResult <=\n', '          0x8000000000000000000000000000000000000000000000000000000000000000);\n', '        return -int256 (absoluteResult); // We rely on overflow behavior here\n', '      } else {\n', '        require (absoluteResult <=\n', '          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '        return int256 (absoluteResult);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function div (int128 x, int128 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    int256 result = (int256 (x) << 64) / y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divi (int256 x, int256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '\n', '    bool negativeResult = false;\n', '    if (x < 0) {\n', '      x = -x; // We rely on overflow behavior here\n', '      negativeResult = true;\n', '    }\n', '    if (y < 0) {\n', '      y = -y; // We rely on overflow behavior here\n', '      negativeResult = !negativeResult;\n', '    }\n', '    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divu (uint256 x, uint256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    uint128 result = divuu (x, y);\n', '    require (result <= uint128 (MAX_64x64));\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate -x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function neg (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return -x;\n', '  }\n', '\n', '  /**\n', '   * Calculate |x|.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function abs (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return x < 0 ? -x : x;\n', '  }\n', '\n', '  /**\n', '   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function inv (int128 x) internal pure returns (int128) {\n', '    require (x != 0);\n', '    int256 result = int256 (0x100000000000000000000000000000000) / x;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function avg (int128 x, int128 y) internal pure returns (int128) {\n', '    return int128 ((int256 (x) + int256 (y)) >> 1);\n', '  }\n', '\n', '  /**\n', '   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n', '   * Revert on overflow or in case x * y is negative.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function gavg (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 m = int256 (x) * int256 (y);\n', '    require (m >= 0);\n', '    require (m <\n', '        0x4000000000000000000000000000000000000000000000000000000000000000);\n', '    return int128 (sqrtu (uint256 (m)));\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down.  Revert if x < 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sqrt (int128 x) internal pure returns (int128) {\n', '    require (x >= 0);\n', '    return int128 (sqrtu (uint256 (x) << 64));\n', '  }\n', '\n', '  /**\n', '   * Calculate binary logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function log_2 (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    int256 msb = 0;\n', '    int256 xc = x;\n', '    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '    if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '    if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '    if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '    int256 result = msb - 64 << 64;\n', '    uint256 ux = uint256 (x) << uint256 (127 - msb);\n', '    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '      ux *= ux;\n', '      uint256 b = ux >> 255;\n', '      ux >>= 127 + b;\n', '      result += bit * int256 (b);\n', '    }\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function ln (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    return int128 (\n', '        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\n', '  }\n', '\n', '  /**\n', '   * Calculate binary exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp_2 (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    uint256 result = 0x80000000000000000000000000000000;\n', '\n', '    if (x & 0x8000000000000000 > 0)\n', '      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n', '    if (x & 0x4000000000000000 > 0)\n', '      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n', '    if (x & 0x2000000000000000 > 0)\n', '      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n', '    if (x & 0x1000000000000000 > 0)\n', '      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n', '    if (x & 0x800000000000000 > 0)\n', '      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n', '    if (x & 0x400000000000000 > 0)\n', '      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n', '    if (x & 0x200000000000000 > 0)\n', '      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n', '    if (x & 0x100000000000000 > 0)\n', '      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n', '    if (x & 0x80000000000000 > 0)\n', '      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n', '    if (x & 0x40000000000000 > 0)\n', '      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n', '    if (x & 0x20000000000000 > 0)\n', '      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n', '    if (x & 0x10000000000000 > 0)\n', '      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n', '    if (x & 0x8000000000000 > 0)\n', '      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n', '    if (x & 0x4000000000000 > 0)\n', '      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n', '    if (x & 0x2000000000000 > 0)\n', '      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n', '    if (x & 0x1000000000000 > 0)\n', '      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n', '    if (x & 0x800000000000 > 0)\n', '      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n', '    if (x & 0x400000000000 > 0)\n', '      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n', '    if (x & 0x200000000000 > 0)\n', '      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n', '    if (x & 0x100000000000 > 0)\n', '      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n', '    if (x & 0x80000000000 > 0)\n', '      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n', '    if (x & 0x40000000000 > 0)\n', '      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n', '    if (x & 0x20000000000 > 0)\n', '      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n', '    if (x & 0x10000000000 > 0)\n', '      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n', '    if (x & 0x8000000000 > 0)\n', '      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n', '    if (x & 0x4000000000 > 0)\n', '      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n', '    if (x & 0x2000000000 > 0)\n', '      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n', '    if (x & 0x1000000000 > 0)\n', '      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n', '    if (x & 0x800000000 > 0)\n', '      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n', '    if (x & 0x400000000 > 0)\n', '      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n', '    if (x & 0x200000000 > 0)\n', '      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n', '    if (x & 0x100000000 > 0)\n', '      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n', '    if (x & 0x80000000 > 0)\n', '      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n', '    if (x & 0x40000000 > 0)\n', '      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n', '    if (x & 0x20000000 > 0)\n', '      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n', '    if (x & 0x10000000 > 0)\n', '      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n', '    if (x & 0x8000000 > 0)\n', '      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n', '    if (x & 0x4000000 > 0)\n', '      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n', '    if (x & 0x2000000 > 0)\n', '      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n', '    if (x & 0x1000000 > 0)\n', '      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n', '    if (x & 0x800000 > 0)\n', '      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n', '    if (x & 0x400000 > 0)\n', '      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n', '    if (x & 0x200000 > 0)\n', '      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n', '    if (x & 0x100000 > 0)\n', '      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n', '    if (x & 0x80000 > 0)\n', '      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n', '    if (x & 0x40000 > 0)\n', '      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n', '    if (x & 0x20000 > 0)\n', '      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n', '    if (x & 0x10000 > 0)\n', '      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n', '    if (x & 0x8000 > 0)\n', '      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n', '    if (x & 0x4000 > 0)\n', '      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n', '    if (x & 0x2000 > 0)\n', '      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n', '    if (x & 0x1000 > 0)\n', '      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n', '    if (x & 0x800 > 0)\n', '      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n', '    if (x & 0x400 > 0)\n', '      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n', '    if (x & 0x200 > 0)\n', '      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n', '    if (x & 0x100 > 0)\n', '      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n', '    if (x & 0x80 > 0)\n', '      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n', '    if (x & 0x40 > 0)\n', '      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n', '    if (x & 0x20 > 0)\n', '      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n', '    if (x & 0x10 > 0)\n', '      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n', '    if (x & 0x8 > 0)\n', '      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n', '    if (x & 0x4 > 0)\n', '      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n', '    if (x & 0x2 > 0)\n', '      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n', '    if (x & 0x1 > 0)\n', '      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n', '\n', '    result >>= uint256 (63 - (x >> 64));\n', '    require (result <= uint256 (MAX_64x64));\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    return exp_2 (\n', '        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 64.64-bit fixed point number\n', '   */\n', '  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\n', '    require (y != 0);\n', '\n', '    uint256 result;\n', '\n', '    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '      result = (x << 64) / y;\n', '    else {\n', '      uint256 msb = 192;\n', '      uint256 xc = x >> 192;\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n', '      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 hi = result * (y >> 128);\n', '      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 xh = x >> 192;\n', '      uint256 xl = x << 64;\n', '\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '      lo = hi << 128;\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '\n', '      assert (xh == hi >> 128);\n', '\n', '      result += xl / y;\n', '    }\n', '\n', '    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= uint256 (xe);\n', '      else x <<= uint256 (-xe);\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= uint256 (re);\n', '      else if (re < 0) result >>= uint256 (-re);\n', '\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n', '   * number.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return unsigned 128-bit integer number\n', '   */\n', '  function sqrtu (uint256 x) private pure returns (uint128) {\n', '    if (x == 0) return 0;\n', '    else {\n', '      uint256 xx = x;\n', '      uint256 r = 1;\n', '      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\n', '      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\n', '      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\n', '      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\n', '      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\n', '      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\n', '      if (xx >= 0x8) { r <<= 1; }\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1;\n', '      r = (r + x / r) >> 1; // Seven iterations should be enough\n', '      uint256 r1 = x / r;\n', '      return uint128 (r < r1 ? r : r1);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract CrystalDeFi is ERC20, Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    uint256 public constant halfLifeTimeInSeconds = 86400;\n', '\n', '    uint256 public burnStartTimeStamp;\n', '\n', '    address public stakingVaultAddress = address(0);\n', '\n', '    bool public burnEnabled = false;\n', '\n', '    mapping(address => bool) public merchantAddresses;\n', '\n', '    uint256 private constant startingBurnPercentage = 50;\n', '\n', '    // plateau value of 3.125 using 3 digits precision\n', '    uint256 private constant _plateauBurnFactor = 3125;\n', '    \n', '    // just to do div/mul with 3 digits precision\n', '    uint256 private constant _PRECISIONCONVERT = 1000;\n', '    \n', '    uint256 private _PRECISIONCONVERT_TOPERCENT;\n', '\n', '    constructor(\n', '        address _presaleAddress,\n', '        address _liquidityAddress,\n', '        address _yieldFarmingAddress,\n', '        address _teamAddress,\n', '        address _promotionsAddress\n', '    )\n', '    public\n', '    Ownable()\n', '    ERC20("CrystalFinance", "CRSTL")\n', '    {   \n', '        _PRECISIONCONVERT_TOPERCENT = _PRECISIONCONVERT.mul(100);   \n', '        _mintAllTokens(_presaleAddress, _liquidityAddress, _yieldFarmingAddress, _teamAddress, _promotionsAddress);\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Sets a merchant address (liquidity provision)\n', '     */\n', '    function addMerchantAddress(address _address, bool _burnFlag) public onlyOwner {\n', '        merchantAddresses[_address] = _burnFlag;\n', '    }\n', '\n', '    function _mintAllTokens(\n', '        address _presaleAddress,\n', '        address _liquidityAddress,\n', '        address _yieldFarmingAddress,\n', '        address _teamAddress,\n', '        address _promotionsAddress\n', '    ) \n', '    internal\n', '    {\n', '        // presale 7000 tokens\n', '        _mint(_presaleAddress, 7000 * 1e18);\n', '\n', '        // liquidity provision 2500 tokens\n', '        _mint(_liquidityAddress, 2500 * 1e18);\n', '\n', '        // yield farming vault 9800 tokens\n', '        _mint(_yieldFarmingAddress, 9800 * 1e18);\n', '\n', '        // team 500 tokens\n', '        _mint(_teamAddress, 500 * 1e18);\n', '\n', '        // promotions 200 tokens\n', '        _mint(_promotionsAddress, 200 * 1e18);       \n', '    }\n', '\n', '    function _isMerchant(address _address) internal view returns (bool) {\n', '        return merchantAddresses[_address];\n', '    }\n', '\n', '    // updates the staking vault address on contract deploy\n', '    function setStakingVaultAddress(address _address) external onlyOwner {\n', '        stakingVaultAddress = _address;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount)\n', '        internal\n', '        virtual\n', '        override\n', '    {   \n', '        // if sending from merchant address\n', '        if(_isMerchant(sender)){\n', '            uint256 amountToBurn = amount.mul(getCurrentBurn()).div(_PRECISIONCONVERT_TOPERCENT);\n', '            super._transfer(sender, stakingVaultAddress, amountToBurn);\n', '            amount = amount.sub(amountToBurn);\n', '        }\n', '        super._transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function getCurrentBurn() internal view returns (uint256) {\n', '        // burn calculation with the help of ABDKMath library\n', '\n', '        // get time since burn started\n', '        uint256 _timeSinceBurnStart = now - burnStartTimeStamp;\n', '        \n', '        uint256 burnf;\n', '\n', '        // if 4 days have passed\n', '        if(_timeSinceBurnStart>345600){\n', '            burnf = _plateauBurnFactor;\n', '        } else{\n', '            int128 _normalizedTime = ABDKMath64x64.divu(_timeSinceBurnStart,86400);\n', '            int128 _halfLifeFraction = ABDKMath64x64.exp_2(_normalizedTime);\n', '            \n', '            // calculate the burn fraction with PRECISIONCONVERT\n', '            int128 burnFraction = ABDKMath64x64.mul(ABDKMath64x64.div(ABDKMath64x64.fromUInt(50), _halfLifeFraction), ABDKMath64x64.fromUInt(_PRECISIONCONVERT));\n', '            \n', '            burnf = uint256(ABDKMath64x64.toUInt(burnFraction));\n', '        }\n', '        return burnf;\n', '    }\n', '\n', '    // starts the burn timer on initial liquidity provision using blocktime\n', '    function startBurnTimer() external onlyOwner {\n', '        require(!burnEnabled, "Burn can only be enabled once");\n', '        burnStartTimeStamp = now;\n', '        burnEnabled = true;\n', '    }\n', '\n', '}']