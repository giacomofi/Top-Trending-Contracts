['/*\n', '   ____            __   __        __   _\n', '  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n', ' _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n', '/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n', '     /___/\n', '\n', '* Synthetix: YFIRewards.sol\n', '*\n', '* Docs: https://docs.synthetix.io/\n', '*\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 Synthetix\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal {}\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address account, uint amount) external;\n', '\n', '    function burn(uint amount) external;\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /** YFV, vUSD, vETH has minters **/\n', '    function minters(address account) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {codehash := extcodehash(account)}\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success,) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {// Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/IRewardDistributionRecipient.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract IRewardDistributionRecipient is Ownable {\n', '    address public rewardReferral;\n', '\n', '    function notifyRewardAmount(uint256 reward) external;\n', '\n', '    function setRewardReferral(address _rewardReferral) external onlyOwner {\n', '        rewardReferral = _rewardReferral;\n', '    }\n', '}\n', '\n', '// File: contracts/CurveRewards.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract LPTokenWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    IERC20 public yfv = IERC20(0x45f24BaEef268BB6d63AEe5129015d69702BCDfa);\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function tokenStake(uint256 amount, uint256 actualStakeAmount) internal {\n', '        _totalSupply = _totalSupply.add(actualStakeAmount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(actualStakeAmount);\n', '        yfv.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function tokenStakeOnBehalf(address stakeFor, uint256 amount, uint256 actualStakeAmount) internal {\n', '        _totalSupply = _totalSupply.add(actualStakeAmount);\n', '        _balances[stakeFor] = _balances[stakeFor].add(actualStakeAmount);\n', '        yfv.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function tokenWithdraw(uint256 amount, uint256 actualWithdrawAmount) internal {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        yfv.safeTransfer(msg.sender, actualWithdrawAmount);\n', '    }\n', '}\n', '\n', 'interface IYFVReferral {\n', '    function setReferrer(address farmer, address referrer) external;\n', '    function getReferrer(address farmer) external view returns (address);\n', '}\n', '\n', 'contract YFVStakeV2 is LPTokenWrapper, IRewardDistributionRecipient {\n', '    IERC20 public vUSD = IERC20(0x1B8E12F839BD4e73A47adDF76cF7F0097d74c14C);\n', '    IERC20 public vETH = IERC20(0x76A034e76Aa835363056dd418611E4f81870f16e);\n', '\n', '    uint256 public vETH_REWARD_FRACTION_RATE = 1000;\n', '\n', '    uint256 public constant DURATION = 7 days;\n', '    uint8 public constant NUMBER_EPOCHS = 38;\n', '\n', '    uint256 public constant REFERRAL_COMMISSION_PERCENT = 1;\n', '\n', '    uint256 public currentEpochReward = 0;\n', '    uint256 public totalAccumulatedReward = 0;\n', '    uint8 public currentEpoch = 0;\n', '    uint256 public starttime = 1598968800; // Tuesday, September 1, 2020 2:00:00 PM (GMT+0)\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '\n', '    uint256 public constant DEFAULT_EPOCH_REWARD = 230000 * (10 ** 9); // 230,000 vUSD (and 230 vETH)\n', '    uint256 public constant TOTAL_REWARD = DEFAULT_EPOCH_REWARD * NUMBER_EPOCHS; // 8,740,000 vUSD (and 8,740 vETH)\n', '\n', '    uint256 public epochReward = DEFAULT_EPOCH_REWARD;\n', '    uint256 public minStakingAmount = 90 ether;\n', '    uint256 public unstakingFrozenTime = 40 hours;\n', '\n', '    // ** DISABLED AT BEGINNING - WILL SET IT BY GOVERNANCE AFTER VIP-1.1\n', '    // ** unlockWithdrawFee = 0.1%: stakers will need to pay 0.1% (sent to insurance fund)of amount they want to withdraw if the coin still frozen\n', '    // ** lowStakeDepositFee = 0.1%: stakers still can stake with low amount but need to pay 0.1% (sent to insurance fund)\n', '    //    specially, if lowStakeDepositFee = 10000 -> low amount stakers will not pay anything (richmen pay tax, not poormen)\n', '    // ** highStakeDepositFee = 0.1%: stakers need to pay 0.1% of extra amount more than 90 YFV (sent to insurance fund)\n', '    uint256 public lowStakeDepositFee = 0; // per ten thousand (eg. 15 -> 0.15%)\n', '    uint256 public highStakeDepositFee = 0; // per ten thousand (eg. 15 -> 0.15%)\n', '    uint256 public unlockWithdrawFee = 0; // per ten thousand (eg. 15 -> 0.15%)\n', '\n', '    address public yfvInsuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '    mapping(address => uint256) public lastStakeTimes;\n', '\n', '    mapping(address => uint256) public accumulatedStakingPower; // will accumulate every time staker does getReward()\n', '\n', '    mapping(address => bool) public whitelistedPools; // for stake on behalf\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event YfvRewardAdded(uint256 reward);\n', '    event Burned(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount, uint256 actualStakeAmount);\n', '    event Withdrawn(address indexed user, uint256 amount, uint256 actualWithdrawAmount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event CommissionPaid(address indexed user, uint256 reward);\n', '\n', '    constructor() public {\n', '        whitelistedPools[0x62a9fE913eb596C8faC0936fd2F51064022ba22e] = true; // BAL Pool\n', '        whitelistedPools[0x70b83A7f5E83B3698d136887253E0bf426C9A117] = true; // YFI Pool\n', '        whitelistedPools[0x1c990fC37F399C935625b815975D0c9fAD5C31A1] = true; // BAT Pool\n', '        whitelistedPools[0x752037bfEf024Bd2669227BF9068cb22840174B0] = true; // REN Pool\n', '        whitelistedPools[0x9b74774f55C0351fD064CfdfFd35dB002C433092] = true; // KNC Pool\n', '        whitelistedPools[0xFBDE07329FFc9Ec1b70f639ad388B94532b5E063] = true; // BTC Pool\n', '        whitelistedPools[0x67FfB615EAEb8aA88fF37cCa6A32e322286a42bb] = true; // ETH Pool\n', '        whitelistedPools[0x196CF719251579cBc850dED0e47e972b3d7810Cd] = true; // LINK Pool\n', '        whitelistedPools[msg.sender] = true; // to be able to stakeOnBehalf farmer who have stucked fund in Pool Stake v1.\n', '    }\n', '\n', '    function addWhitelistedPool(address _addressPool) public onlyOwner {\n', '        whitelistedPools[_addressPool] = true;\n', '    }\n', '\n', '    function removeWhitelistedPool(address _addressPool) public onlyOwner {\n', '        whitelistedPools[_addressPool] = false;\n', '    }\n', '\n', '    function setYfvInsuranceFund(address _yfvInsuranceFund) public onlyOwner {\n', '        yfvInsuranceFund = _yfvInsuranceFund;\n', '    }\n', '\n', '    function setEpochReward(uint256 _epochReward) public onlyOwner {\n', '        require(_epochReward <= DEFAULT_EPOCH_REWARD * 10, "Insane big _epochReward!"); // At most 10x only\n', '        epochReward = _epochReward;\n', '    }\n', '\n', '    function setMinStakingAmount(uint256 _minStakingAmount) public onlyOwner {\n', '        minStakingAmount = _minStakingAmount;\n', '    }\n', '\n', '    function setUnstakingFrozenTime(uint256 _unstakingFrozenTime) public onlyOwner {\n', '        unstakingFrozenTime = _unstakingFrozenTime;\n', '    }\n', '\n', '    function setStakeDepositFee(uint256 _lowStakeDepositFee, uint256 _highStakeDepositFee) public onlyOwner {\n', '        require(_lowStakeDepositFee <= 100 || _lowStakeDepositFee == 10000, "Dont be too greedy"); // <= 1% OR set to 10000 to disable low stake fee\n', '        require(_highStakeDepositFee <= 100, "Dont be too greedy"); // <= 1%\n', '        lowStakeDepositFee = _lowStakeDepositFee;\n', '        highStakeDepositFee = _highStakeDepositFee;\n', '    }\n', '\n', '    function setUnlockWithdrawFee(uint256 _unlockWithdrawFee) public onlyOwner {\n', '        require(_unlockWithdrawFee <= 1000, "Dont be too greedy"); // <= 10%\n', '        unlockWithdrawFee = _unlockWithdrawFee;\n', '    }\n', '\n', '    // To upgrade vUSD contract (v1 is still experimental, we may need vUSDv2 with rebase() function working soon - then governance will call this upgrade)\n', '    function upgradeVUSDContract(address _vUSDContract) public onlyOwner {\n', '        vUSD = IERC20(_vUSDContract);\n', '    }\n', '\n', '    // To upgrade vETH contract (v1 is still experimental, we may need vETHv2 with rebase() function working soon - then governance will call this upgrade)\n', '    function upgradeVETHContract(address _vETHContract) public onlyOwner {\n', '        vETH = IERC20(_vETHContract);\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '        rewardPerTokenStored.add(\n', '            lastTimeRewardApplicable()\n', '            .sub(lastUpdateTime)\n', '            .mul(rewardRate)\n', '            .mul(1e18)\n', '            .div(totalSupply())\n', '        );\n', '    }\n', '\n', '    // vUSD balance\n', '    function earned(address account) public view returns (uint256) {\n', '        uint256 calculatedEarned = balanceOf(account)\n', '        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '        .div(1e18)\n', '        .add(rewards[account]);\n', '        uint256 poolBalance = vUSD.balanceOf(address(this));\n', '        // some rare case the reward can be slightly bigger than real number, we need to check against how much we have left in pool\n', '        if (calculatedEarned > poolBalance) return poolBalance;\n', '        return calculatedEarned;\n', '    }\n', '\n', '    function stakingPower(address account) public view returns (uint256) {\n', '        return accumulatedStakingPower[account].add(earned(account));\n', '    }\n', '\n', '    function vETHBalance(address account) public view returns (uint256) {\n', '        return earned(account).div(vETH_REWARD_FRACTION_RATE);\n', '    }\n', '\n', '    function stake(uint256 amount, address referrer) public updateReward(msg.sender) checkNextEpoch {\n', '        require(amount >= 1 szabo, "Do not stake dust");\n', '        require(referrer != msg.sender, "You cannot refer yourself.");\n', '        uint256 actualStakeAmount = amount;\n', '        uint256 depositFee = 0;\n', '        if (minStakingAmount > 0) {\n', '            if (amount < minStakingAmount && lowStakeDepositFee < 10000) {\n', '                // if amount is less than minStakingAmount and lowStakeDepositFee is not disabled\n', '\n', '                // if governance does not allow low stake\n', '                if (lowStakeDepositFee == 0) require(amount >= minStakingAmount, "Cannot stake below minStakingAmount");\n', '                // otherwise depositFee will be calculated based on the rate\n', '                else depositFee = amount.mul(lowStakeDepositFee).div(10000);\n', '            } else if (amount > minStakingAmount && highStakeDepositFee > 0) {\n', '                // if amount is greater than minStakingAmount and governance decides richman to pay tax (of the extra amount)\n', '                depositFee = amount.sub(minStakingAmount).mul(highStakeDepositFee).div(10000);\n', '            }\n', '            if (depositFee > 0) {\n', '                actualStakeAmount = amount.sub(depositFee);\n', '            }\n', '        }\n', '        super.tokenStake(amount, actualStakeAmount);\n', '        lastStakeTimes[msg.sender] = block.timestamp;\n', '        emit Staked(msg.sender, amount, actualStakeAmount);\n', '        if (depositFee > 0) {\n', '            if (yfvInsuranceFund != address(0)) { // send fee to insurance\n', '                yfv.safeTransfer(yfvInsuranceFund, depositFee);\n', '                emit RewardPaid(yfvInsuranceFund, depositFee);\n', '            } else { // or burn\n', '                yfv.burn(depositFee);\n', '                emit Burned(depositFee);\n', '            }\n', '        }\n', '        if (rewardReferral != address(0) && referrer != address(0)) {\n', '            IYFVReferral(rewardReferral).setReferrer(msg.sender, referrer);\n', '        }\n', '    }\n', '\n', '    function stakeOnBehalf(address stakeFor, uint256 amount) public updateReward(stakeFor) checkNextEpoch {\n', '        require(amount >= 1 szabo, "Do not stake dust");\n', '        require(whitelistedPools[msg.sender], "Sorry hackers, you should stay away from us (YFV community signed)");\n', '        uint256 actualStakeAmount = amount;\n', '        uint256 depositFee = 0;\n', '        if (minStakingAmount > 0) {\n', '            if (amount < minStakingAmount && lowStakeDepositFee < 10000) {\n', '                // if amount is less than minStakingAmount and lowStakeDepositFee is not disabled\n', '\n', '                // if governance does not allow low stake\n', '                if (lowStakeDepositFee == 0) require(amount >= minStakingAmount, "Cannot stake below minStakingAmount");\n', '\n', '                // otherwise depositFee will be calculated based on the rate\n', '                else depositFee = amount.mul(lowStakeDepositFee).div(10000);\n', '            } else if (amount > minStakingAmount && highStakeDepositFee > 0) {\n', '                // if amount is greater than minStakingAmount and governance decides richman to pay tax (of the extra amount)\n', '                depositFee = amount.sub(minStakingAmount).mul(highStakeDepositFee).div(10000);\n', '            }\n', '            if (depositFee > 0) {\n', '                actualStakeAmount = amount.sub(depositFee);\n', '            }\n', '        }\n', '        super.tokenStakeOnBehalf(stakeFor, amount, actualStakeAmount);\n', '        lastStakeTimes[stakeFor] = block.timestamp;\n', '        emit Staked(stakeFor, amount, actualStakeAmount);\n', '        if (depositFee > 0) {\n', '            actualStakeAmount = amount.sub(depositFee);\n', '            if (yfvInsuranceFund != address(0)) { // send fee to insurance\n', '                yfv.safeTransfer(yfvInsuranceFund, depositFee);\n', '                emit RewardPaid(yfvInsuranceFund, depositFee);\n', '            } else { // or burn\n', '                yfv.burn(depositFee);\n', '                emit Burned(depositFee);\n', '            }\n', '        }\n', '    }\n', '\n', '    function unfrozenStakeTime(address account) public view returns (uint256) {\n', '        return lastStakeTimes[account] + unstakingFrozenTime;\n', '    }\n', '\n', '    function withdraw(uint256 amount) public updateReward(msg.sender) checkNextEpoch {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        uint256 actualWithdrawAmount = amount;\n', '        if (block.timestamp < unfrozenStakeTime(msg.sender)) {\n', '            // if coin is still frozen and governance does not allow stakers to unstake before timer ends\n', '            if (unlockWithdrawFee == 0) revert("Coin is still frozen");\n', '\n', '            // otherwise withdrawFee will be calculated based on the rate\n', '            uint256 withdrawFee = amount.mul(unlockWithdrawFee).div(10000);\n', '            actualWithdrawAmount = amount.sub(withdrawFee);\n', '            if (yfvInsuranceFund != address(0)) { // send fee to insurance\n', '                yfv.safeTransfer(yfvInsuranceFund, withdrawFee);\n', '                emit RewardPaid(yfvInsuranceFund, withdrawFee);\n', '            } else { // or burn\n', '                yfv.burn(withdrawFee);\n', '                emit Burned(withdrawFee);\n', '            }\n', '        }\n', '        super.tokenWithdraw(amount, actualWithdrawAmount);\n', '        emit Withdrawn(msg.sender, amount, actualWithdrawAmount);\n', '    }\n', '\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '        getReward();\n', '    }\n', '\n', '    function getReward() public updateReward(msg.sender) checkNextEpoch {\n', '        uint256 reward = rewards[msg.sender];\n', '        if (reward > 0) {\n', '            accumulatedStakingPower[msg.sender] = accumulatedStakingPower[msg.sender].add(rewards[msg.sender]);\n', '            rewards[msg.sender] = 0;\n', '\n', '            vUSD.safeTransfer(msg.sender, reward);\n', '            vETH.safeTransfer(msg.sender, reward.div(vETH_REWARD_FRACTION_RATE));\n', '\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    modifier checkNextEpoch() {\n', '        require(periodFinish > 0, "Pool has not started");\n', '        if (block.timestamp >= periodFinish) {\n', '            currentEpochReward = epochReward;\n', '\n', '            if (totalAccumulatedReward.add(currentEpochReward) > TOTAL_REWARD) {\n', '                currentEpochReward = TOTAL_REWARD.sub(totalAccumulatedReward); // limit total reward\n', '            }\n', '\n', '            if (currentEpochReward > 0) {\n', '                if (!vUSD.minters(address(this)) || !vETH.minters(address(this))) {\n', '                    currentEpochReward = 0;\n', '                } else {\n', '                    vUSD.mint(address(this), currentEpochReward);\n', '                    vETH.mint(address(this), currentEpochReward.div(vETH_REWARD_FRACTION_RATE));\n', '                    totalAccumulatedReward = totalAccumulatedReward.add(currentEpochReward);\n', '                }\n', '                currentEpoch++;\n', '            }\n', '\n', '            rewardRate = currentEpochReward.div(DURATION);\n', '            lastUpdateTime = block.timestamp;\n', '            periodFinish = block.timestamp.add(DURATION);\n', '            emit RewardAdded(currentEpochReward);\n', '        }\n', '        _;\n', '    }\n', '\n', '    // Start the pool with reward amount for this epoch\n', '    function notifyRewardAmount(uint256 reward) external onlyOwner updateReward(address(0)) {\n', '        require(periodFinish == 0, "Only can call once to start staking");\n', '        currentEpochReward = reward;\n', '        if (totalAccumulatedReward.add(currentEpochReward) > TOTAL_REWARD) {\n', '            currentEpochReward = TOTAL_REWARD.sub(totalAccumulatedReward); // limit total reward\n', '        }\n', '        lastUpdateTime = block.timestamp;\n', '        if (block.timestamp < starttime) { // epoch zero\n', '            periodFinish = starttime;\n', '            rewardRate = reward.div(periodFinish.sub(block.timestamp));\n', '        } else { // 1st epoch\n', '            periodFinish = lastUpdateTime.add(DURATION);\n', '            rewardRate = reward.div(DURATION);\n', '            currentEpoch++;\n', '        }\n', '        vUSD.mint(address(this), reward);\n', '        vETH.mint(address(this), reward.div(vETH_REWARD_FRACTION_RATE));\n', '        totalAccumulatedReward = totalAccumulatedReward.add(reward);\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    // This function allows governance to take unsupported tokens out of the contract, since this pool exists longer than the other pools.\n', '    // This is in an effort to make someone whole, should they seriously mess up.\n', '    // There is no guarantee governance will vote to return these.\n', '    // It also allows for removal of airdropped tokens.\n', '    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\n', '        // only gov\n', '        require(msg.sender == owner(), "!governance");\n', '        // cant take staked asset\n', '        require(_token != yfv, "yfv");\n', '        // cant take reward asset\n', '        require(_token != vUSD, "vUSD");\n', '        require(_token != vETH, "vETH");\n', '\n', '        // transfer to\n', '        _token.safeTransfer(to, amount);\n', '    }\n', '}']