['/**\n', ' *Submitted for verification at Etherscan.io on 2020-02-11\n', '*/\n', '\n', '// File: @aragon/os/contracts/common/EtherTokenConstant.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n', '// contracts where both tokens and ETH are accepted\n', 'contract EtherTokenConstant {\n', '    address internal constant ETH = address(0);\n', '}\n', '\n', '// File: @aragon/apps-agent/contracts/standards/ERC1271.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\n', "// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\n", '// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\n', '\n', '\n', 'contract ERC1271 {\n', '    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\n', '\n', '    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\n', '    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\n', '\n', '    /**\n', '    * @dev Function must be implemented by deriving contract\n', '    * @param _hash Arbitrary length data signed on the behalf of address(this)\n', '    * @param _signature Signature byte array associated with _data\n', '    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n', '    *\n', '    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n', '    * MUST allow external calls\n', '    */\n', '    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\n', '\n', '    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\n', '        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC1271Bytes is ERC1271 {\n', '    /**\n', '    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\n', '    * @param _data Arbitrary length data signed on the behalf of address(this)\n', '    * @param _signature Signature byte array associated with _data\n', '    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n', '    *\n', '    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n', '    * MUST allow external calls\n', '    */\n', '    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\n', '        return isValidSignature(keccak256(_data), _signature);\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-agent/contracts/SignatureValidator.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// Inspired by https://github.com/horizon-games/multi-token-standard/blob/319740cf2a78b8816269ae49a09c537b3fd7303b/contracts/utils/SignatureValidator.sol\n', '// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\n', '\n', '\n', '\n', 'library SignatureValidator {\n', '    enum SignatureMode {\n', '        Invalid, // 0x00\n', '        EIP712,  // 0x01\n', '        EthSign, // 0x02\n', '        ERC1271, // 0x03\n', '        NMode    // 0x04, to check if mode is specified, leave at the end\n', '    }\n', '\n', '    // bytes4(keccak256("isValidSignature(bytes,bytes)")\n', '    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\n', '    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\n', '\n', '    string private constant ERROR_INVALID_LENGTH_POP_BYTE = "SIGVAL_INVALID_LENGTH_POP_BYTE";\n', '\n', '    /// @dev Validates that a hash was signed by a specified signer.\n', '    /// @param hash Hash which was signed.\n', '    /// @param signer Address of the signer.\n', '    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\n', '    /// @return Returns whether signature is from a specified user.\n', '    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\n', '        if (signature.length == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint8 modeByte = uint8(signature[0]);\n', '        if (modeByte >= uint8(SignatureMode.NMode)) {\n', '            return false;\n', '        }\n', '        SignatureMode mode = SignatureMode(modeByte);\n', '\n', '        if (mode == SignatureMode.EIP712) {\n', '            return ecVerify(hash, signer, signature);\n', '        } else if (mode == SignatureMode.EthSign) {\n', '            return ecVerify(\n', '                keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),\n', '                signer,\n', '                signature\n', '            );\n', '        } else if (mode == SignatureMode.ERC1271) {\n', '            // Pop the mode byte before sending it down the validation chain\n', '            return safeIsValidSignature(signer, hash, popFirstByte(signature));\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\n', '        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\n', '\n', '        if (badSig) {\n', '            return false;\n', '        }\n', '\n', '        return signer == ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\n', '        if (signature.length != 66) {\n', '            badSig = true;\n', '            return;\n', '        }\n', '\n', '        v = uint8(signature[65]);\n', '        assembly {\n', '            r := mload(add(signature, 33))\n', '            s := mload(add(signature, 65))\n', '        }\n', '\n', '        // Allow signature version to be 0 or 1\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        if (v != 27 && v != 28) {\n', '            badSig = true;\n', '        }\n', '    }\n', '\n', '    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\n', '        uint256 inputLength = input.length;\n', '        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\n', '\n', '        output = new bytes(inputLength - 1);\n', '\n', '        if (output.length == 0) {\n', '            return output;\n', '        }\n', '\n', '        uint256 inputPointer;\n', '        uint256 outputPointer;\n', '        assembly {\n', '            inputPointer := add(input, 0x21)\n', '            outputPointer := add(output, 0x20)\n', '        }\n', '        memcpy(outputPointer, inputPointer, output.length);\n', '    }\n', '\n', '    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\n', '        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\n', '        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\n', '        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\n', '    }\n', '\n', '    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\n', '        uint256 gasLeft = gasleft();\n', '\n', '        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\n', '        bool ok;\n', '        assembly {\n', '            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\n', '        }\n', '\n', '        if (!ok) {\n', '            return;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := returndatasize }\n', '        if (size != 32) {\n', '            return;\n', '        }\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)       // get next free memory ptr\n', '            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n', '            ret := mload(ptr)            // read data at ptr and set it to be returned\n', '        }\n', '\n', '        return ret;\n', '    }\n', '\n', '    // From: https://github.com/Arachnid/solidity-stringutils/blob/01e955c1d6/src/strings.sol\n', '    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\n', '        // Copy word-length chunks while possible\n', '        for (; len >= 32; len -= 32) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += 32;\n', '            src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (32 - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-agent/contracts/standards/IERC165.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface IERC165 {\n', '    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/UnstructuredStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library UnstructuredStorage {\n', '    function getStorageBool(bytes32 position) internal view returns (bool data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageAddress(bytes32 position) internal view returns (address data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function setStorageBool(bytes32 position, bool data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageAddress(bytes32 position, address data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageUint256(bytes32 position, uint256 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/IACL.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IACL {\n', '    function initialize(address permissionsCreator) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IVaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IVaultRecoverable {\n', '    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n', '\n', '    function transferToVault(address token) external;\n', '\n', '    function allowRecoverability(address token) external view returns (bool);\n', '    function getRecoveryVault() external view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/IKernel.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'interface IKernelEvents {\n', '    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n', '}\n', '\n', '\n', "// This should be an interface, but interfaces can't inherit yet :(\n", 'contract IKernel is IKernelEvents, IVaultRecoverable {\n', '    function acl() public view returns (IACL);\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '\n', '    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n', '    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract AppStorage {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_POSITION = keccak256("aragonOS.appStorage.kernel");\n', '    bytes32 internal constant APP_ID_POSITION = keccak256("aragonOS.appStorage.appId");\n', '    */\n', '    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n', '    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n', '\n', '    function kernel() public view returns (IKernel) {\n', '        return IKernel(KERNEL_POSITION.getStorageAddress());\n', '    }\n', '\n', '    function appId() public view returns (bytes32) {\n', '        return APP_ID_POSITION.getStorageBytes32();\n', '    }\n', '\n', '    function setKernel(IKernel _kernel) internal {\n', '        KERNEL_POSITION.setStorageAddress(address(_kernel));\n', '    }\n', '\n', '    function setAppId(bytes32 _appId) internal {\n', '        APP_ID_POSITION.setStorageBytes32(_appId);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ACLSyntaxSugar {\n', '    function arr() internal pure returns (uint256[]) {\n', '        return new uint256[](0);\n', '    }\n', '\n', '    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c, _d);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n', '    }\n', '\n', '    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(uint256 _a) internal pure returns (uint256[] r) {\n', '        r = new uint256[](1);\n', '        r[0] = _a;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        r = new uint256[](2);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        r = new uint256[](3);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        r = new uint256[](4);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        r = new uint256[](5);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '        r[4] = _e;\n', '    }\n', '}\n', '\n', '\n', 'contract ACLHelpers {\n', '    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 30));\n', '    }\n', '\n', '    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 31));\n', '    }\n', '\n', '    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n', '        a = uint32(_x);\n', '        b = uint32(_x >> (8 * 4));\n', '        c = uint32(_x >> (8 * 8));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Uint256Helpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library Uint256Helpers {\n', '    uint256 private constant MAX_UINT64 = uint64(-1);\n', '\n', '    string private constant ERROR_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";\n', '\n', '    function toUint64(uint256 a) internal pure returns (uint64) {\n', '        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n', '        return uint64(a);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/TimeHelpers.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract TimeHelpers {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /**\n', '    * @dev Returns the current block number.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current block number, converted to uint64.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber64() internal view returns (uint64) {\n', '        return getBlockNumber().toUint64();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp() internal view returns (uint256) {\n', '        return block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp, converted to uint64.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp64() internal view returns (uint64) {\n', '        return getTimestamp().toUint64();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Initializable.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract Initializable is TimeHelpers {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.initializable.initializationBlock")\n', '    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n', '\n', '    string private constant ERROR_ALREADY_INITIALIZED = "INIT_ALREADY_INITIALIZED";\n', '    string private constant ERROR_NOT_INITIALIZED = "INIT_NOT_INITIALIZED";\n', '\n', '    modifier onlyInit {\n', '        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    modifier isInitialized {\n', '        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return Block number in which the contract was initialized\n', '    */\n', '    function getInitializationBlock() public view returns (uint256) {\n', '        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n', '    }\n', '\n', '    /**\n', '    * @return Whether the contract has been initialized by the time of the current block\n', '    */\n', '    function hasInitialized() public view returns (bool) {\n', '        uint256 initializationBlock = getInitializationBlock();\n', '        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization has finished.\n', '    */\n', '    function initialized() internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization to enable the contract\n', '    *      at a future block number rather than immediately.\n', '    */\n', '    function initializedAt(uint256 _blockNumber) internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Petrifiable.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Petrifiable is Initializable {\n', '    // Use block UINT256_MAX (which should be never) as the initializable date\n', '    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n', '\n', '    function isPetrified() public view returns (bool) {\n', '        return getInitializationBlock() == PETRIFIED_BLOCK;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract to prevent being initialized.\n', "    *      Useful for freezing base contracts when they're used behind proxies.\n", '    */\n', '    function petrify() internal onlyInit {\n', '        initializedAt(PETRIFIED_BLOCK);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Autopetrified.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Autopetrified is Petrifiable {\n', '    constructor() public {\n', '        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n', '        // This renders them uninitializable (and unusable without a proxy).\n', '        petrify();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ConversionHelpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library ConversionHelpers {\n', '    string private constant ERROR_IMPROPER_LENGTH = "CONVERSION_IMPROPER_LENGTH";\n', '\n', '    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n', '        // Force cast the uint256[] into a bytes array, by overwriting its length\n', "        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 byteLength = _input.length * 32;\n', '        assembly {\n', '            output := _input\n', '            mstore(output, byteLength)\n', '        }\n', '    }\n', '\n', '    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n', '        // Force cast the bytes array into a uint256[], by overwriting its length\n', "        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 intsLength = _input.length / 32;\n', '        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n', '\n', '        assembly {\n', '            output := _input\n', '            mstore(output, intsLength)\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ReentrancyGuard.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract ReentrancyGuard {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256("aragonOS.reentrancyGuard.mutex");\n', '    */\n', '    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n', '\n', '    string private constant ERROR_REENTRANT = "REENTRANCY_REENTRANT_CALL";\n', '\n', '    modifier nonReentrant() {\n', '        // Ensure mutex is unlocked\n', '        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n', '\n', '        // Lock mutex before function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n', '\n', '        // Perform function call\n', '        _;\n', '\n', '        // Unlock mutex after function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/token/ERC20.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IsContract.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract IsContract {\n', '    /*\n', '    * NOTE: this should NEVER be used for authentication\n', '    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n', '    *\n', '    * This is only intended to be used as a sanity check that an address is actually a contract,\n', '    * RATHER THAN an address not being a contract.\n', '    */\n', '    function isContract(address _target) internal view returns (bool) {\n', '        if (_target == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := extcodesize(_target) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/SafeERC20.sol\n', '\n', '// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n', '// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n', '    // https://github.com/ethereum/solidity/issues/3544\n', '    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n', '\n', '    string private constant ERROR_TOKEN_BALANCE_REVERTED = "SAFE_ERC_20_BALANCE_REVERTED";\n', '    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = "SAFE_ERC_20_ALLOWANCE_REVERTED";\n', '\n', '    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n', '        private\n', '        returns (bool)\n', '    {\n', '        bool ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            let success := call(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                0,                    // no value\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                // Check number of bytes returned from last function call\n', '                switch returndatasize\n', '\n', '                // No bytes returned: assume success\n', '                case 0 {\n', '                    ret := 1\n', '                }\n', '\n', '                // 32 bytes returned: check if non-zero\n', '                case 0x20 {\n', '                    // Only return success if returned data was true\n', '                    // Already have output in ptr\n', '                    ret := eq(mload(ptr), 1)\n', '                }\n', '\n', "                // Not sure what was returned: don't mark as success\n", '                default { }\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    function staticInvoke(address _addr, bytes memory _calldata)\n', '        private\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        bool success;\n', '        uint256 ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            success := staticcall(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                ret := mload(ptr)\n', '            }\n', '        }\n', '        return (success, ret);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferCallData = abi.encodeWithSelector(\n', '            TRANSFER_SELECTOR,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferFromCallData = abi.encodeWithSelector(\n', '            _token.transferFrom.selector,\n', '            _from,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferFromCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n', '        bytes memory approveCallData = abi.encodeWithSelector(\n', '            _token.approve.selector,\n', '            _spender,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, approveCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.balanceOf().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n', '        bytes memory balanceOfCallData = abi.encodeWithSelector(\n', '            _token.balanceOf.selector,\n', '            _owner\n', '        );\n', '\n', '        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n', '        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n', '\n', '        return tokenBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.allowance().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n', '        bytes memory allowanceCallData = abi.encodeWithSelector(\n', '            _token.allowance.selector,\n', '            _owner,\n', '            _spender\n', '        );\n', '\n', '        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n', '        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n', '\n', '        return allowance;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/VaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n', '    using SafeERC20 for ERC20;\n', '\n', '    string private constant ERROR_DISALLOWED = "RECOVER_DISALLOWED";\n', '    string private constant ERROR_VAULT_NOT_CONTRACT = "RECOVER_VAULT_NOT_CONTRACT";\n', '    string private constant ERROR_TOKEN_TRANSFER_FAILED = "RECOVER_TOKEN_TRANSFER_FAILED";\n', '\n', '    /**\n', '     * @notice Send funds to recovery Vault. This contract should never receive funds,\n', '     *         but in case it does, this function allows one to recover them.\n', '     * @param _token Token balance to be sent to recovery vault.\n', '     */\n', '    function transferToVault(address _token) external {\n', '        require(allowRecoverability(_token), ERROR_DISALLOWED);\n', '        address vault = getRecoveryVault();\n', '        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n', '\n', '        uint256 balance;\n', '        if (_token == ETH) {\n', '            balance = address(this).balance;\n', '            vault.transfer(balance);\n', '        } else {\n', '            ERC20 token = ERC20(_token);\n', '            balance = token.staticBalanceOf(this);\n', '            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n', '        }\n', '\n', '        emit RecoverToVault(vault, _token, balance);\n', '    }\n', '\n', '    /**\n', '    * @dev By default deriving from AragonApp makes it recoverable\n', '    * @param token Token address that would be recovered\n', '    * @return bool whether the app allows the recovery\n', '    */\n', '    function allowRecoverability(address token) public view returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // Cast non-implemented interface to be public so we can use it internally\n', '    function getRecoveryVault() public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IEVMScriptExecutor {\n', '    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n', '    function executorType() external pure returns (bytes32);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract EVMScriptRegistryConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash("evmreg");\n', '    */\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n', '}\n', '\n', '\n', 'interface IEVMScriptRegistry {\n', '    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n', '    function disableScriptExecutor(uint256 executorId) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/KernelConstants.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract KernelAppIds {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash("kernel");\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash("acl");\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash("vault");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n', '}\n', '\n', '\n', 'contract KernelNamespaceConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256("core");\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256("base");\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256("app");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n', '    string private constant ERROR_EXECUTOR_UNAVAILABLE = "EVMRUN_EXECUTOR_UNAVAILABLE";\n', '    string private constant ERROR_PROTECTED_STATE_MODIFIED = "EVMRUN_PROTECTED_STATE_MODIFIED";\n', '\n', '    /* This is manually crafted in assembly\n', '    string private constant ERROR_EXECUTOR_INVALID_RETURN = "EVMRUN_EXECUTOR_INVALID_RETURN";\n', '    */\n', '\n', '    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n', '\n', '    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n', '        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n', '    }\n', '\n', '    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n', '        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n', '        return IEVMScriptRegistry(registryAddr);\n', '    }\n', '\n', '    function runScript(bytes _script, bytes _input, address[] _blacklist)\n', '        internal\n', '        isInitialized\n', '        protectState\n', '        returns (bytes)\n', '    {\n', '        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n', '        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n', '\n', '        bytes4 sig = executor.execScript.selector;\n', '        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n', '\n', '        bytes memory output;\n', '        assembly {\n', '            let success := delegatecall(\n', '                gas,                // forward all gas\n', '                executor,           // address\n', '                add(data, 0x20),    // calldata start\n', '                mload(data),        // calldata length\n', "                0,                  // don't write output (we'll handle this ourselves)\n", "                0                   // don't write output\n", '            )\n', '\n', '            output := mload(0x40) // free mem ptr get\n', '\n', '            switch success\n', '            case 0 {\n', '                // If the call errored, forward its full error data\n', '                returndatacopy(output, 0, returndatasize)\n', '                revert(output, returndatasize)\n', '            }\n', '            default {\n', '                switch gt(returndatasize, 0x3f)\n', '                case 0 {\n', '                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n', '                    // revert with "EVMRUN_EXECUTOR_INVALID_RETURN"\n', '                    // See remix: doing a `revert("EVMRUN_EXECUTOR_INVALID_RETURN")` always results in\n', '                    // this memory layout\n', '                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n', '                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n', '                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n', '                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n', '\n', '                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n', '                }\n', '                default {\n', '                    // Copy result\n', '                    //\n', '                    // Needs to perform an ABI decode for the expected `bytes` return type of\n', '                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n', '                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n', '                    //    [ output length (32 bytes) ]\n', '                    //    [ output content (N bytes) ]\n', '                    //\n', '                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n', '                    let copysize := sub(returndatasize, 0x20)\n', '                    returndatacopy(output, 0x20, copysize)\n', '\n', '                    mstore(0x40, add(output, copysize)) // free mem ptr set\n', '                }\n', '            }\n', '        }\n', '\n', '        emit ScriptResult(address(executor), _script, _input, output);\n', '\n', '        return output;\n', '    }\n', '\n', '    modifier protectState {\n', '        address preKernel = address(kernel());\n', '        bytes32 preAppId = appId();\n', '        _; // exec\n', '        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n', '        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AragonApp.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n', '// that they can never be initialized.\n', '// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n', '// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n', '// are included so that they are automatically usable by subclassing contracts\n', 'contract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n', '    string private constant ERROR_AUTH_FAILED = "APP_AUTH_FAILED";\n', '\n', '    modifier auth(bytes32 _role) {\n', '        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    modifier authP(bytes32 _role, uint256[] _params) {\n', '        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether an action can be performed by a sender for a particular role on this app\n', '    * @param _sender Sender of the call\n', '    * @param _role Role on this app\n', '    * @param _params Permission params for the role\n', '    * @return Boolean indicating whether the sender has the permissions to perform the action.\n', "    *         Always returns false if the app hasn't been initialized yet.\n", '    */\n', '    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n', '        if (!hasInitialized()) {\n', '            return false;\n', '        }\n', '\n', '        IKernel linkedKernel = kernel();\n', '        if (address(linkedKernel) == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        return linkedKernel.hasPermission(\n', '            _sender,\n', '            address(this),\n', '            _role,\n', '            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Get the recovery vault for the app\n', '    * @return Recovery vault address for the app\n', '    */\n', '    function getRecoveryVault() public view returns (address) {\n', '        // Funds recovery via a vault is only available when used with a kernel\n', '        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/DepositableStorage.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', 'contract DepositableStorage {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.depositableStorage.depositable")\n', '    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n', '\n', '    function isDepositable() public view returns (bool) {\n', '        return DEPOSITABLE_POSITION.getStorageBool();\n', '    }\n', '\n', '    function setDepositable(bool _depositable) internal {\n', '        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-vault/contracts/Vault.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n', '    using SafeERC20 for ERC20;\n', '\n', '    bytes32 public constant TRANSFER_ROLE = keccak256("TRANSFER_ROLE");\n', '\n', '    string private constant ERROR_DATA_NON_ZERO = "VAULT_DATA_NON_ZERO";\n', '    string private constant ERROR_NOT_DEPOSITABLE = "VAULT_NOT_DEPOSITABLE";\n', '    string private constant ERROR_DEPOSIT_VALUE_ZERO = "VAULT_DEPOSIT_VALUE_ZERO";\n', '    string private constant ERROR_TRANSFER_VALUE_ZERO = "VAULT_TRANSFER_VALUE_ZERO";\n', '    string private constant ERROR_SEND_REVERTED = "VAULT_SEND_REVERTED";\n', '    string private constant ERROR_VALUE_MISMATCH = "VAULT_VALUE_MISMATCH";\n', '    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = "VAULT_TOKEN_TRANSFER_FROM_REVERT";\n', '    string private constant ERROR_TOKEN_TRANSFER_REVERTED = "VAULT_TOKEN_TRANSFER_REVERTED";\n', '\n', '    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n', '    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n', '\n', '    /**\n', '    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n', '    *      intercepted by the Proxy (see aragonOS#281)\n', '    */\n', '    function () external payable isInitialized {\n', '        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n', '        _deposit(ETH, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize Vault app\n', '    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n', '    */\n', '    function initialize() external onlyInit {\n', '        initialized();\n', '        setDepositable(true);\n', '    }\n', '\n', '    /**\n', '    * @notice Deposit `_value` `_token` to the vault\n', '    * @param _token Address of the token being transferred\n', '    * @param _value Amount of tokens being transferred\n', '    */\n', '    function deposit(address _token, uint256 _value) external payable isInitialized {\n', '        _deposit(_token, _value);\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer `_value` `_token` from the Vault to `_to`\n', '    * @param _token Address of the token being transferred\n', '    * @param _to Address of the recipient of tokens\n', '    * @param _value Amount of tokens being transferred\n', '    */\n', '    /* solium-disable-next-line function-order */\n', '    function transfer(address _token, address _to, uint256 _value)\n', '        external\n', '        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n', '    {\n', '        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n', '\n', '        if (_token == ETH) {\n', '            require(_to.send(_value), ERROR_SEND_REVERTED);\n', '        } else {\n', '            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n', '        }\n', '\n', '        emit VaultTransfer(_token, _to, _value);\n', '    }\n', '\n', '    function balance(address _token) public view returns (uint256) {\n', '        if (_token == ETH) {\n', '            return address(this).balance;\n', '        } else {\n', '            return ERC20(_token).staticBalanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Disable recovery escape hatch, as it could be used\n', '    *      maliciously to transfer funds away from the vault\n', '    */\n', '    function allowRecoverability(address) public view returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function _deposit(address _token, uint256 _value) internal {\n', '        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n', '        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n', '\n', '        if (_token == ETH) {\n', '            // Deposit is implicit in this case\n', '            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n', '        } else {\n', '            require(\n', '                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n', '                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n', '            );\n', '        }\n', '\n', '        emit VaultDeposit(_token, msg.sender, _value);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IForwarder.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IForwarder {\n', '    function isForwarder() external pure returns (bool);\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function forward(bytes evmCallScript) public;\n', '}\n', '\n', '// File: @aragon/apps-agent/contracts/Agent.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Agent is IERC165, ERC1271Bytes, IForwarder, IsContract, Vault {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant EXECUTE_ROLE = keccak256("EXECUTE_ROLE");\n', '    bytes32 public constant SAFE_EXECUTE_ROLE = keccak256("SAFE_EXECUTE_ROLE");\n', '    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = keccak256("ADD_PROTECTED_TOKEN_ROLE");\n', '    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = keccak256("REMOVE_PROTECTED_TOKEN_ROLE");\n', '    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256("ADD_PRESIGNED_HASH_ROLE");\n', '    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256("DESIGNATE_SIGNER_ROLE");\n', '    bytes32 public constant RUN_SCRIPT_ROLE = keccak256("RUN_SCRIPT_ROLE");\n', '    */\n', '\n', '    bytes32 public constant EXECUTE_ROLE = 0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4;\n', '    bytes32 public constant SAFE_EXECUTE_ROLE = 0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694;\n', '    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = 0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa;\n', '    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = 0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a;\n', '    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = 0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c;\n', '    bytes32 public constant DESIGNATE_SIGNER_ROLE = 0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c;\n', '    bytes32 public constant RUN_SCRIPT_ROLE = 0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f;\n', '\n', '    uint256 public constant PROTECTED_TOKENS_CAP = 10;\n', '\n', '    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n', '\n', '    string private constant ERROR_TARGET_PROTECTED = "AGENT_TARGET_PROTECTED";\n', '    string private constant ERROR_PROTECTED_TOKENS_MODIFIED = "AGENT_PROTECTED_TOKENS_MODIFIED";\n', '    string private constant ERROR_PROTECTED_BALANCE_LOWERED = "AGENT_PROTECTED_BALANCE_LOWERED";\n', '    string private constant ERROR_TOKENS_CAP_REACHED = "AGENT_TOKENS_CAP_REACHED";\n', '    string private constant ERROR_TOKEN_NOT_ERC20 = "AGENT_TOKEN_NOT_ERC20";\n', '    string private constant ERROR_TOKEN_ALREADY_PROTECTED = "AGENT_TOKEN_ALREADY_PROTECTED";\n', '    string private constant ERROR_TOKEN_NOT_PROTECTED = "AGENT_TOKEN_NOT_PROTECTED";\n', '    string private constant ERROR_DESIGNATED_TO_SELF = "AGENT_DESIGNATED_TO_SELF";\n', '    string private constant ERROR_CAN_NOT_FORWARD = "AGENT_CAN_NOT_FORWARD";\n', '\n', '    mapping (bytes32 => bool) public isPresigned;\n', '    address public designatedSigner;\n', '    address[] public protectedTokens;\n', '\n', '    event SafeExecute(address indexed sender, address indexed target, bytes data);\n', '    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\n', '    event AddProtectedToken(address indexed token);\n', '    event RemoveProtectedToken(address indexed token);\n', '    event PresignHash(address indexed sender, bytes32 indexed hash);\n', '    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\n', '\n', '    /**\n', "    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\n", '    * @param _target Address where the action is being executed\n', '    * @param _ethValue Amount of ETH from the contract that is sent with the action\n', '    * @param _data Calldata for the action\n', '    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n', '    */\n', '    function execute(address _target, uint256 _ethValue, bytes _data)\n', '        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n', '        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n', '    {\n', '        bool result = _target.call.value(_ethValue)(_data);\n', '\n', '        if (result) {\n', '            emit Execute(msg.sender, _target, _ethValue, _data);\n', '        }\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, returndatasize)\n', '\n', '            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n', '            // if the call returned error data, forward it\n', '            switch result case 0 { revert(ptr, returndatasize) }\n', '            default { return(ptr, returndatasize) }\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @notice Execute '`@radspec(_target, _data)`' on `_target` ensuring that protected tokens can't be spent\n", '    * @param _target Address where the action is being executed\n', '    * @param _data Calldata for the action\n', '    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n', '    */\n', '    function safeExecute(address _target, bytes _data)\n', '        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n', '        authP(SAFE_EXECUTE_ROLE, arr(_target, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n', '    {\n', '        uint256 protectedTokensLength = protectedTokens.length;\n', '        address[] memory protectedTokens_ = new address[](protectedTokensLength);\n', '        uint256[] memory balances = new uint256[](protectedTokensLength);\n', '\n', '        for (uint256 i = 0; i < protectedTokensLength; i++) {\n', '            address token = protectedTokens[i];\n', '            require(_target != token, ERROR_TARGET_PROTECTED);\n', '            // we copy the protected tokens array to check whether the storage array has been modified during the underlying call\n', '            protectedTokens_[i] = token;\n', '            // we copy the balances to check whether they have been modified during the underlying call\n', '            balances[i] = balance(token);\n', '        }\n', '\n', '        bool result = _target.call(_data);\n', '\n', '        bytes32 ptr;\n', '        uint256 size;\n', '        assembly {\n', '            size := returndatasize\n', '            ptr := mload(0x40)\n', '            mstore(0x40, add(ptr, returndatasize))\n', '            returndatacopy(ptr, 0, returndatasize)\n', '        }\n', '\n', '        if (result) {\n', '            // if the underlying call has succeeded, we check that the protected tokens\n', "            // and their balances have not been modified and return the call's return data\n", '            require(protectedTokens.length == protectedTokensLength, ERROR_PROTECTED_TOKENS_MODIFIED);\n', '            for (uint256 j = 0; j < protectedTokensLength; j++) {\n', '                require(protectedTokens[j] == protectedTokens_[j], ERROR_PROTECTED_TOKENS_MODIFIED);\n', '                require(balance(protectedTokens[j]) >= balances[j], ERROR_PROTECTED_BALANCE_LOWERED);\n', '            }\n', '\n', '            emit SafeExecute(msg.sender, _target, _data);\n', '\n', '            assembly {\n', '                return(ptr, size)\n', '            }\n', '        } else {\n', '            // if the underlying call has failed, we revert and forward returned error data\n', '            assembly {\n', '                revert(ptr, size)\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Add `_token.symbol(): string` to the list of protected tokens\n', '    * @param _token Address of the token to be protected\n', '    */\n', '    function addProtectedToken(address _token) external authP(ADD_PROTECTED_TOKEN_ROLE, arr(_token)) {\n', '        require(protectedTokens.length < PROTECTED_TOKENS_CAP, ERROR_TOKENS_CAP_REACHED);\n', '        require(_isERC20(_token), ERROR_TOKEN_NOT_ERC20);\n', '        require(!_tokenIsProtected(_token), ERROR_TOKEN_ALREADY_PROTECTED);\n', '\n', '        _addProtectedToken(_token);\n', '    }\n', '\n', '    /**\n', '    * @notice Remove `_token.symbol(): string` from the list of protected tokens\n', '    * @param _token Address of the token to be unprotected\n', '    */\n', '    function removeProtectedToken(address _token) external authP(REMOVE_PROTECTED_TOKEN_ROLE, arr(_token)) {\n', '        require(_tokenIsProtected(_token), ERROR_TOKEN_NOT_PROTECTED);\n', '\n', '        _removeProtectedToken(_token);\n', '    }\n', '\n', '    /**\n', '    * @notice Pre-sign hash `_hash`\n', "    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\n", '    */\n', '    function presignHash(bytes32 _hash)\n', '        external\n', '        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\n', '    {\n', '        isPresigned[_hash] = true;\n', '\n', '        emit PresignHash(msg.sender, _hash);\n', '    }\n', '\n', '    /**\n', '    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\n', '    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\n', '    */\n', '    function setDesignatedSigner(address _designatedSigner)\n', '        external\n', '        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\n', '    {\n', '        // Prevent an infinite loop by setting the app itself as its designated signer.\n', '        // An undetectable loop can be created by setting a different contract as the\n', '        // designated signer which calls back into `isValidSignature`.\n', '        // Given that `isValidSignature` is always called with just 50k gas, the max\n', '        // damage of the loop is wasting 50k gas.\n', '        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\n', '\n', '        address oldDesignatedSigner = designatedSigner;\n', '        designatedSigner = _designatedSigner;\n', '\n', '        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\n', '    }\n', '\n', '    // Forwarding fns\n', '\n', '    /**\n', '    * @notice Tells whether the Agent app is a forwarder or not\n', '    * @dev IForwarder interface conformance\n', '    * @return Always true\n', '    */\n', '    function isForwarder() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Execute the script as the Agent app\n', '    * @dev IForwarder interface conformance. Forwards any token holder action.\n', '    * @param _evmScript Script being executed\n', '    */\n', '    function forward(bytes _evmScript) public {\n', '        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n', '\n', '        bytes memory input = ""; // no input\n', '        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\n', '        runScript(_evmScript, input, blacklist);\n', "        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\n", '    }\n', '\n', '    /**\n', '    * @notice Tells whether `_sender` can forward actions or not\n', '    * @dev IForwarder interface conformance\n', '    * @param _sender Address of the account intending to forward an action\n', '    * @return True if the given address can run scripts, false otherwise\n', '    */\n', '    function canForward(address _sender, bytes _evmScript) public view returns (bool) {\n', '        // Note that `canPerform()` implicitly does an initialization check itself\n', '        return canPerform(_sender, RUN_SCRIPT_ROLE, arr(_getScriptACLParam(_evmScript)));\n', '    }\n', '\n', '    // ERC-165 conformance\n', '\n', '    /**\n', '     * @notice Tells whether this contract supports a given ERC-165 interface\n', '     * @param _interfaceId Interface bytes to check\n', '     * @return True if this contract supports the interface\n', '     */\n', '    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\n', '        return\n', '            _interfaceId == ERC1271_INTERFACE_ID ||\n', '            _interfaceId == ERC165_INTERFACE_ID;\n', '    }\n', '\n', '    // ERC-1271 conformance\n', '\n', '    /**\n', '     * @notice Tells whether a signature is seen as valid by this contract through ERC-1271\n', '     * @param _hash Arbitrary length data signed on the behalf of address (this)\n', '     * @param _signature Signature byte array associated with _data\n', '     * @return The ERC-1271 magic value if the signature is valid\n', '     */\n', '    function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4) {\n', '        // Short-circuit in case the hash was presigned. Optimization as performing calls\n', '        // and ecrecover is more expensive than an SLOAD.\n', '        if (isPresigned[_hash]) {\n', '            return returnIsValidSignatureMagicNumber(true);\n', '        }\n', '\n', '        bool isValid;\n', '        if (designatedSigner == address(0)) {\n', '            isValid = false;\n', '        } else {\n', '            isValid = SignatureValidator.isValidSignature(_hash, designatedSigner, _signature);\n', '        }\n', '\n', '        return returnIsValidSignatureMagicNumber(isValid);\n', '    }\n', '\n', '    // Getters\n', '\n', '    function getProtectedTokensLength() public view isInitialized returns (uint256) {\n', '        return protectedTokens.length;\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    function _addProtectedToken(address _token) internal {\n', '        protectedTokens.push(_token);\n', '\n', '        emit AddProtectedToken(_token);\n', '    }\n', '\n', '    function _removeProtectedToken(address _token) internal {\n', '        protectedTokens[_protectedTokenIndex(_token)] = protectedTokens[protectedTokens.length - 1];\n', '        protectedTokens.length--;\n', '\n', '        emit RemoveProtectedToken(_token);\n', '    }\n', '\n', '    function _isERC20(address _token) internal view returns (bool) {\n', '        if (!isContract(_token)) {\n', '            return false;\n', '        }\n', '\n', "        // Throwaway sanity check to make sure the token's `balanceOf()` does not error (for now)\n", '        balance(_token);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _protectedTokenIndex(address _token) internal view returns (uint256) {\n', '        for (uint i = 0; i < protectedTokens.length; i++) {\n', '            if (protectedTokens[i] == _token) {\n', '              return i;\n', '            }\n', '        }\n', '\n', '        revert(ERROR_TOKEN_NOT_PROTECTED);\n', '    }\n', '\n', '    function _tokenIsProtected(address _token) internal view returns (bool) {\n', '        for (uint256 i = 0; i < protectedTokens.length; i++) {\n', '            if (protectedTokens[i] == _token) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _getScriptACLParam(bytes _evmScript) internal pure returns (uint256) {\n', '        return uint256(keccak256(abi.encodePacked(_evmScript)));\n', '    }\n', '\n', '    function _getSig(bytes _data) internal pure returns (bytes4 sig) {\n', '        if (_data.length < 4) {\n', '            return;\n', '        }\n', '\n', '        assembly { sig := mload(add(_data, 0x20)) }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath64.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n', '// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath64\n', ' * @dev Math operations for uint64 with safety checks that revert on error\n', ' */\n', 'library SafeMath64 {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint256 c = uint256(_a) * uint256(_b);\n', '        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n', '\n', '        return uint64(c);\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint64 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint64 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint64 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-shared-minime/contracts/ITokenController.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @dev The token controller contract must implement these functions\n', '\n', '\n', 'interface ITokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) external payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n', '}\n', '\n', '// File: @aragon/apps-shared-minime/contracts/MiniMeToken.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    address public controller;\n', '\n', '    function Controlled()  public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController  public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes _data\n', '    ) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        MiniMeTokenFactory _tokenFactory,\n', '        MiniMeToken _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    )  public\n', '    {\n', '        tokenFactory = _tokenFactory;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount)\n', '                return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '        require(parentSnapShotBlock < block.number);\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '        // Alerts the token controller of the transfer\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n', '        }\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        var previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '        // An event to make the transfer easy to find on the blockchain\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        _spender.receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '    ) public returns(MiniMeToken)\n', '    {\n', '        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n', '\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            snapshot,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), snapshot);\n', '        return cloneToken;\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController public {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0)\n', '            return false;\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () external payable {\n', '        require(isContract(controller));\n', '        // Adding the ` == true` makes the linter shut up so...\n', '        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController public {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        MiniMeToken _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken)\n', '    {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-voting/contracts/Voting.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Voting is IForwarder, AragonApp {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '\n', '    bytes32 public constant CREATE_VOTES_ROLE = keccak256("CREATE_VOTES_ROLE");\n', '    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256("MODIFY_SUPPORT_ROLE");\n', '    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256("MODIFY_QUORUM_ROLE");\n', '\n', '    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n', '\n', '    string private constant ERROR_NO_VOTE = "VOTING_NO_VOTE";\n', '    string private constant ERROR_INIT_PCTS = "VOTING_INIT_PCTS";\n', '    string private constant ERROR_CHANGE_SUPPORT_PCTS = "VOTING_CHANGE_SUPPORT_PCTS";\n', '    string private constant ERROR_CHANGE_QUORUM_PCTS = "VOTING_CHANGE_QUORUM_PCTS";\n', '    string private constant ERROR_INIT_SUPPORT_TOO_BIG = "VOTING_INIT_SUPPORT_TOO_BIG";\n', '    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = "VOTING_CHANGE_SUPP_TOO_BIG";\n', '    string private constant ERROR_CAN_NOT_VOTE = "VOTING_CAN_NOT_VOTE";\n', '    string private constant ERROR_CAN_NOT_EXECUTE = "VOTING_CAN_NOT_EXECUTE";\n', '    string private constant ERROR_CAN_NOT_FORWARD = "VOTING_CAN_NOT_FORWARD";\n', '    string private constant ERROR_NO_VOTING_POWER = "VOTING_NO_VOTING_POWER";\n', '\n', '    enum VoterState { Absent, Yea, Nay }\n', '\n', '    struct Vote {\n', '        bool executed;\n', '        uint64 startDate;\n', '        uint64 snapshotBlock;\n', '        uint64 supportRequiredPct;\n', '        uint64 minAcceptQuorumPct;\n', '        uint256 yea;\n', '        uint256 nay;\n', '        uint256 votingPower;\n', '        bytes executionScript;\n', '        mapping (address => VoterState) voters;\n', '    }\n', '\n', '    MiniMeToken public token;\n', '    uint64 public supportRequiredPct;\n', '    uint64 public minAcceptQuorumPct;\n', '    uint64 public voteTime;\n', '\n', '    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\n', '    mapping (uint256 => Vote) internal votes;\n', '    uint256 public votesLength;\n', '\n', '    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\n', '    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\n', '    event ExecuteVote(uint256 indexed voteId);\n', '    event ChangeSupportRequired(uint64 supportRequiredPct);\n', '    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\n', '\n', '    modifier voteExists(uint256 _voteId) {\n', '        require(_voteId < votesLength, ERROR_NO_VOTE);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\n', '    * @param _token MiniMeToken Address that will be used as governance token\n', '    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n', '    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n', '    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\n', '    */\n', '    function initialize(\n', '        MiniMeToken _token,\n', '        uint64 _supportRequiredPct,\n', '        uint64 _minAcceptQuorumPct,\n', '        uint64 _voteTime\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        initialized();\n', '\n', '        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\n', '        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\n', '\n', '        token = _token;\n', '        supportRequiredPct = _supportRequiredPct;\n', '        minAcceptQuorumPct = _minAcceptQuorumPct;\n', '        voteTime = _voteTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\n', '    * @param _supportRequiredPct New required support\n', '    */\n', '    function changeSupportRequiredPct(uint64 _supportRequiredPct)\n', '        external\n', '        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\n', '    {\n', '        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\n', '        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\n', '        supportRequiredPct = _supportRequiredPct;\n', '\n', '        emit ChangeSupportRequired(_supportRequiredPct);\n', '    }\n', '\n', '    /**\n', '    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\n', '    * @param _minAcceptQuorumPct New acceptance quorum\n', '    */\n', '    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\n', '        external\n', '        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\n', '    {\n', '        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\n', '        minAcceptQuorumPct = _minAcceptQuorumPct;\n', '\n', '        emit ChangeMinQuorum(_minAcceptQuorumPct);\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new vote about "`_metadata`"\n', '    * @param _executionScript EVM script to be executed on approval\n', '    * @param _metadata Vote metadata\n', '    * @return voteId Id for newly created vote\n', '    */\n', '    function newVote(bytes _executionScript, string _metadata) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\n', '        return _newVote(_executionScript, _metadata, true, true);\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new vote about "`_metadata`"\n', '    * @param _executionScript EVM script to be executed on approval\n', '    * @param _metadata Vote metadata\n', '    * @param _castVote Whether to also cast newly created vote\n', '    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\n', '    * @return voteId id for newly created vote\n', '    */\n', '    function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n', '        external\n', '        auth(CREATE_VOTES_ROLE)\n', '        returns (uint256 voteId)\n', '    {\n', '        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\n', '    }\n', '\n', '    /**\n', "    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\n", '    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n', '    *      created via `newVote(),` which requires initialization\n', '    * @param _voteId Id for vote\n', '    * @param _supports Whether voter supports the vote\n', '    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\n', '    */\n', '    function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) external voteExists(_voteId) {\n', '        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\n', '        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\n', '    }\n', '\n', '    /**\n', '    * @notice Execute vote #`_voteId`\n', '    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n', '    *      created via `newVote(),` which requires initialization\n', '    * @param _voteId Id for vote\n', '    */\n', '    function executeVote(uint256 _voteId) external voteExists(_voteId) {\n', '        _executeVote(_voteId);\n', '    }\n', '\n', '    // Forwarding fns\n', '\n', '    function isForwarder() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Creates a vote to execute the desired action, and casts a support vote if possible\n', '    * @dev IForwarder interface conformance\n', '    * @param _evmScript Start vote with script\n', '    */\n', '    function forward(bytes _evmScript) public {\n', '        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n', '        _newVote(_evmScript, "", true, true);\n', '    }\n', '\n', '    function canForward(address _sender, bytes) public view returns (bool) {\n', '        // Note that `canPerform()` implicitly does an initialization check itself\n', '        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    /**\n', '    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n', '    *      created via `newVote(),` which requires initialization\n', '    */\n', '    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\n', '        return _canExecute(_voteId);\n', '    }\n', '\n', '    /**\n', '    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n', '    *      created via `newVote(),` which requires initialization\n', '    */\n', '    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\n', '        return _canVote(_voteId, _voter);\n', '    }\n', '\n', '    function getVote(uint256 _voteId)\n', '        public\n', '        view\n', '        voteExists(_voteId)\n', '        returns (\n', '            bool open,\n', '            bool executed,\n', '            uint64 startDate,\n', '            uint64 snapshotBlock,\n', '            uint64 supportRequired,\n', '            uint64 minAcceptQuorum,\n', '            uint256 yea,\n', '            uint256 nay,\n', '            uint256 votingPower,\n', '            bytes script\n', '        )\n', '    {\n', '        Vote storage vote_ = votes[_voteId];\n', '\n', '        open = _isVoteOpen(vote_);\n', '        executed = vote_.executed;\n', '        startDate = vote_.startDate;\n', '        snapshotBlock = vote_.snapshotBlock;\n', '        supportRequired = vote_.supportRequiredPct;\n', '        minAcceptQuorum = vote_.minAcceptQuorumPct;\n', '        yea = vote_.yea;\n', '        nay = vote_.nay;\n', '        votingPower = vote_.votingPower;\n', '        script = vote_.executionScript;\n', '    }\n', '\n', '    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\n', '        return votes[_voteId].voters[_voter];\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    function _newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n', '        internal\n', '        returns (uint256 voteId)\n', '    {\n', '        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n', '        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\n', '        require(votingPower > 0, ERROR_NO_VOTING_POWER);\n', '\n', '        voteId = votesLength++;\n', '\n', '        Vote storage vote_ = votes[voteId];\n', '        vote_.startDate = getTimestamp64();\n', '        vote_.snapshotBlock = snapshotBlock;\n', '        vote_.supportRequiredPct = supportRequiredPct;\n', '        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\n', '        vote_.votingPower = votingPower;\n', '        vote_.executionScript = _executionScript;\n', '\n', '        emit StartVote(voteId, msg.sender, _metadata);\n', '\n', '        if (_castVote && _canVote(voteId, msg.sender)) {\n', '            _vote(voteId, true, msg.sender, _executesIfDecided);\n', '        }\n', '    }\n', '\n', '    function _vote(\n', '        uint256 _voteId,\n', '        bool _supports,\n', '        address _voter,\n', '        bool _executesIfDecided\n', '    ) internal\n', '    {\n', '        Vote storage vote_ = votes[_voteId];\n', '\n', '        // This could re-enter, though we can assume the governance token is not malicious\n', '        uint256 voterStake = token.balanceOfAt(_voter, vote_.snapshotBlock);\n', '        VoterState state = vote_.voters[_voter];\n', '\n', '        // If voter had previously voted, decrease count\n', '        if (state == VoterState.Yea) {\n', '            vote_.yea = vote_.yea.sub(voterStake);\n', '        } else if (state == VoterState.Nay) {\n', '            vote_.nay = vote_.nay.sub(voterStake);\n', '        }\n', '\n', '        if (_supports) {\n', '            vote_.yea = vote_.yea.add(voterStake);\n', '        } else {\n', '            vote_.nay = vote_.nay.add(voterStake);\n', '        }\n', '\n', '        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\n', '\n', '        emit CastVote(_voteId, _voter, _supports, voterStake);\n', '\n', '        if (_executesIfDecided && _canExecute(_voteId)) {\n', "            // We've already checked if the vote can be executed with `_canExecute()`\n", '            _unsafeExecuteVote(_voteId);\n', '        }\n', '    }\n', '\n', '    function _executeVote(uint256 _voteId) internal {\n', '        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\n', '        _unsafeExecuteVote(_voteId);\n', '    }\n', '\n', '    /**\n', '    * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed\n', '    */\n', '    function _unsafeExecuteVote(uint256 _voteId) internal {\n', '        Vote storage vote_ = votes[_voteId];\n', '\n', '        vote_.executed = true;\n', '\n', '        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\n', '        runScript(vote_.executionScript, input, new address[](0));\n', '\n', '        emit ExecuteVote(_voteId);\n', '    }\n', '\n', '    function _canExecute(uint256 _voteId) internal view returns (bool) {\n', '        Vote storage vote_ = votes[_voteId];\n', '\n', '        if (vote_.executed) {\n', '            return false;\n', '        }\n', '\n', '        // Voting is already decided\n', '        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\n', '            return true;\n', '        }\n', '\n', '        // Vote ended?\n', '        if (_isVoteOpen(vote_)) {\n', '            return false;\n', '        }\n', '        // Has enough support?\n', '        uint256 totalVotes = vote_.yea.add(vote_.nay);\n', '        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\n', '            return false;\n', '        }\n', '        // Has min quorum?\n', '        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\n', '        Vote storage vote_ = votes[_voteId];\n', '\n', '        return _isVoteOpen(vote_) && token.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\n', '    }\n', '\n', '    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\n', '        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\n', '    */\n', '    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\n', '        if (_total == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 computedPct = _value.mul(PCT_BASE) / _total;\n', '        return computedPct > _pct;\n', '    }\n', '}\n', '\n', '// File: @aragon/ppf-contracts/contracts/IFeed.sol\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'interface IFeed {\n', '    function ratePrecision() external pure returns (uint256);\n', '    function get(address base, address quote) external view returns (uint128 xrt, uint64 when);\n', '}\n', '\n', '// File: @aragon/apps-finance/contracts/Finance.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Finance is EtherTokenConstant, IsContract, AragonApp {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '    using SafeERC20 for ERC20;\n', '\n', '    bytes32 public constant CREATE_PAYMENTS_ROLE = keccak256("CREATE_PAYMENTS_ROLE");\n', '    bytes32 public constant CHANGE_PERIOD_ROLE = keccak256("CHANGE_PERIOD_ROLE");\n', '    bytes32 public constant CHANGE_BUDGETS_ROLE = keccak256("CHANGE_BUDGETS_ROLE");\n', '    bytes32 public constant EXECUTE_PAYMENTS_ROLE = keccak256("EXECUTE_PAYMENTS_ROLE");\n', '    bytes32 public constant MANAGE_PAYMENTS_ROLE = keccak256("MANAGE_PAYMENTS_ROLE");\n', '\n', '    uint256 internal constant NO_SCHEDULED_PAYMENT = 0;\n', '    uint256 internal constant NO_TRANSACTION = 0;\n', '    uint256 internal constant MAX_SCHEDULED_PAYMENTS_PER_TX = 20;\n', '    uint256 internal constant MAX_UINT256 = uint256(-1);\n', '    uint64 internal constant MAX_UINT64 = uint64(-1);\n', '    uint64 internal constant MINIMUM_PERIOD = uint64(1 days);\n', '\n', '    string private constant ERROR_COMPLETE_TRANSITION = "FINANCE_COMPLETE_TRANSITION";\n', '    string private constant ERROR_NO_SCHEDULED_PAYMENT = "FINANCE_NO_SCHEDULED_PAYMENT";\n', '    string private constant ERROR_NO_TRANSACTION = "FINANCE_NO_TRANSACTION";\n', '    string private constant ERROR_NO_PERIOD = "FINANCE_NO_PERIOD";\n', '    string private constant ERROR_VAULT_NOT_CONTRACT = "FINANCE_VAULT_NOT_CONTRACT";\n', '    string private constant ERROR_SET_PERIOD_TOO_SHORT = "FINANCE_SET_PERIOD_TOO_SHORT";\n', '    string private constant ERROR_NEW_PAYMENT_AMOUNT_ZERO = "FINANCE_NEW_PAYMENT_AMOUNT_ZERO";\n', '    string private constant ERROR_NEW_PAYMENT_INTERVAL_ZERO = "FINANCE_NEW_PAYMENT_INTRVL_ZERO";\n', '    string private constant ERROR_NEW_PAYMENT_EXECS_ZERO = "FINANCE_NEW_PAYMENT_EXECS_ZERO";\n', '    string private constant ERROR_NEW_PAYMENT_IMMEDIATE = "FINANCE_NEW_PAYMENT_IMMEDIATE";\n', '    string private constant ERROR_RECOVER_AMOUNT_ZERO = "FINANCE_RECOVER_AMOUNT_ZERO";\n', '    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = "FINANCE_DEPOSIT_AMOUNT_ZERO";\n', '    string private constant ERROR_ETH_VALUE_MISMATCH = "FINANCE_ETH_VALUE_MISMATCH";\n', '    string private constant ERROR_BUDGET = "FINANCE_BUDGET";\n', '    string private constant ERROR_EXECUTE_PAYMENT_NUM = "FINANCE_EXECUTE_PAYMENT_NUM";\n', '    string private constant ERROR_EXECUTE_PAYMENT_TIME = "FINANCE_EXECUTE_PAYMENT_TIME";\n', '    string private constant ERROR_PAYMENT_RECEIVER = "FINANCE_PAYMENT_RECEIVER";\n', '    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = "FINANCE_TKN_TRANSFER_FROM_REVERT";\n', '    string private constant ERROR_TOKEN_APPROVE_FAILED = "FINANCE_TKN_APPROVE_FAILED";\n', '    string private constant ERROR_PAYMENT_INACTIVE = "FINANCE_PAYMENT_INACTIVE";\n', '    string private constant ERROR_REMAINING_BUDGET = "FINANCE_REMAINING_BUDGET";\n', '\n', '    // Order optimized for storage\n', '    struct ScheduledPayment {\n', '        address token;\n', '        address receiver;\n', '        address createdBy;\n', '        bool inactive;\n', '        uint256 amount;\n', '        uint64 initialPaymentTime;\n', '        uint64 interval;\n', '        uint64 maxExecutions;\n', '        uint64 executions;\n', '    }\n', '\n', '    // Order optimized for storage\n', '    struct Transaction {\n', '        address token;\n', '        address entity;\n', '        bool isIncoming;\n', '        uint256 amount;\n', '        uint256 paymentId;\n', '        uint64 paymentExecutionNumber;\n', '        uint64 date;\n', '        uint64 periodId;\n', '    }\n', '\n', '    struct TokenStatement {\n', '        uint256 expenses;\n', '        uint256 income;\n', '    }\n', '\n', '    struct Period {\n', '        uint64 startTime;\n', '        uint64 endTime;\n', '        uint256 firstTransactionId;\n', '        uint256 lastTransactionId;\n', '        mapping (address => TokenStatement) tokenStatement;\n', '    }\n', '\n', '    struct Settings {\n', '        uint64 periodDuration;\n', '        mapping (address => uint256) budgets;\n', '        mapping (address => bool) hasBudget;\n', '    }\n', '\n', '    Vault public vault;\n', '    Settings internal settings;\n', '\n', '    // We are mimicing arrays, we use mappings instead to make app upgrade more graceful\n', '    mapping (uint256 => ScheduledPayment) internal scheduledPayments;\n', '    // Payments start at index 1, to allow us to use scheduledPayments[0] for transactions that are not\n', '    // linked to a scheduled payment\n', '    uint256 public paymentsNextIndex;\n', '\n', '    mapping (uint256 => Transaction) internal transactions;\n', '    uint256 public transactionsNextIndex;\n', '\n', '    mapping (uint64 => Period) internal periods;\n', '    uint64 public periodsLength;\n', '\n', '    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\n', '    event SetBudget(address indexed token, uint256 amount, bool hasBudget);\n', '    event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxExecutions, string reference);\n', '    event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference);\n', '    event ChangePaymentState(uint256 indexed paymentId, bool active);\n', '    event ChangePeriodDuration(uint64 newDuration);\n', '    event PaymentFailure(uint256 paymentId);\n', '\n', '    // Modifier used by all methods that impact accounting to make sure accounting period\n', '    // is changed before the operation if needed\n', '    // NOTE: its use **MUST** be accompanied by an initialization check\n', '    modifier transitionsPeriod {\n', '        bool completeTransition = _tryTransitionAccountingPeriod(getMaxPeriodTransitions());\n', '        require(completeTransition, ERROR_COMPLETE_TRANSITION);\n', '        _;\n', '    }\n', '\n', '    modifier scheduledPaymentExists(uint256 _paymentId) {\n', '        require(_paymentId > 0 && _paymentId < paymentsNextIndex, ERROR_NO_SCHEDULED_PAYMENT);\n', '        _;\n', '    }\n', '\n', '    modifier transactionExists(uint256 _transactionId) {\n', '        require(_transactionId > 0 && _transactionId < transactionsNextIndex, ERROR_NO_TRANSACTION);\n', '        _;\n', '    }\n', '\n', '    modifier periodExists(uint64 _periodId) {\n', '        require(_periodId < periodsLength, ERROR_NO_PERIOD);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit ETH to the Vault, to avoid locking them in this Finance app forever\n', '     * @dev Send ETH to Vault. Send all the available balance.\n', '     */\n', '    function () external payable isInitialized transitionsPeriod {\n', '        require(msg.value > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\n', '        _deposit(\n', '            ETH,\n', '            msg.value,\n', '            "Ether transfer to Finance app",\n', '            msg.sender,\n', '            true\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`\n', '    * @param _vault Address of the vault Finance will rely on (non changeable)\n', '    * @param _periodDuration Duration in seconds of each period\n', '    */\n', '    function initialize(Vault _vault, uint64 _periodDuration) external onlyInit {\n', '        initialized();\n', '\n', '        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\n', '        vault = _vault;\n', '\n', '        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\n', '        settings.periodDuration = _periodDuration;\n', '\n', '        // Reserve the first scheduled payment index as an unused index for transactions not linked\n', '        // to a scheduled payment\n', '        scheduledPayments[0].inactive = true;\n', '        paymentsNextIndex = 1;\n', '\n', '        // Reserve the first transaction index as an unused index for periods with no transactions\n', '        transactionsNextIndex = 1;\n', '\n', '        // Start the first period\n', '        _newPeriod(getTimestamp64());\n', '    }\n', '\n', '    /**\n', '    * @notice Deposit `@tokenAmount(_token, _amount)`\n', '    * @dev Deposit for approved ERC20 tokens or ETH\n', '    * @param _token Address of deposited token\n', '    * @param _amount Amount of tokens sent\n', '    * @param _reference Reason for payment\n', '    */\n', '    function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {\n', '        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\n', '        if (_token == ETH) {\n', '            // Ensure that the ETH sent with the transaction equals the amount in the deposit\n', '            require(msg.value == _amount, ERROR_ETH_VALUE_MISMATCH);\n', '        }\n', '\n', '        _deposit(\n', '            _token,\n', '            _amount,\n', '            _reference,\n', '            msg.sender,\n', '            true\n', '        );\n', '    }\n', '\n', '    /**\n', "    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for '`_reference`'\n", '    * @dev Note that this function is protected by the `CREATE_PAYMENTS_ROLE` but uses `MAX_UINT256`\n', '    *      as its interval auth parameter (as a sentinel value for "never repeating").\n', '    *      While this protects against most cases (you typically want to set a baseline requirement\n', '    *      for interval time), it does mean users will have to explicitly check for this case when\n', '    *      granting a permission that includes a upperbound requirement on the interval time.\n', '    * @param _token Address of token for payment\n', '    * @param _receiver Address that will receive payment\n', '    * @param _amount Tokens that are paid every time the payment is due\n', '    * @param _reference String detailing payment reason\n', '    */\n', '    function newImmediatePayment(address _token, address _receiver, uint256 _amount, string _reference)\n', '        external\n', '        // Use MAX_UINT256 as the interval parameter, as this payment will never repeat\n', '        // Payment time parameter is left as the last param as it was added later\n', '        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, MAX_UINT256, uint256(1), getTimestamp()))\n', '        transitionsPeriod\n', '    {\n', '        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\n', '\n', '        _makePaymentTransaction(\n', '            _token,\n', '            _receiver,\n', '            _amount,\n', "            NO_SCHEDULED_PAYMENT,   // unrelated to any payment id; it isn't created\n", '            0,   // also unrelated to any payment executions\n', '            _reference\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for `_reference`, executing `_maxExecutions` times at intervals of `@transformTime(_interval)`\n', '    * @dev See `newImmediatePayment()` for limitations on how the interval auth parameter can be used\n', '    * @param _token Address of token for payment\n', '    * @param _receiver Address that will receive payment\n', '    * @param _amount Tokens that are paid every time the payment is due\n', '    * @param _initialPaymentTime Timestamp for when the first payment is done\n', '    * @param _interval Number of seconds that need to pass between payment transactions\n', '    * @param _maxExecutions Maximum instances a payment can be executed\n', '    * @param _reference String detailing payment reason\n', '    */\n', '    function newScheduledPayment(\n', '        address _token,\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint64 _initialPaymentTime,\n', '        uint64 _interval,\n', '        uint64 _maxExecutions,\n', '        string _reference\n', '    )\n', '        external\n', '        // Payment time parameter is left as the last param as it was added later\n', '        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, uint256(_interval), uint256(_maxExecutions), uint256(_initialPaymentTime)))\n', '        transitionsPeriod\n', '        returns (uint256 paymentId)\n', '    {\n', '        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\n', '        require(_interval > 0, ERROR_NEW_PAYMENT_INTERVAL_ZERO);\n', '        require(_maxExecutions > 0, ERROR_NEW_PAYMENT_EXECS_ZERO);\n', '\n', '        // Token budget must not be set at all or allow at least one instance of this payment each period\n', '        require(!settings.hasBudget[_token] || settings.budgets[_token] >= _amount, ERROR_BUDGET);\n', '\n', "        // Don't allow creating single payments that are immediately executable, use `newImmediatePayment()` instead\n", '        if (_maxExecutions == 1) {\n', '            require(_initialPaymentTime > getTimestamp64(), ERROR_NEW_PAYMENT_IMMEDIATE);\n', '        }\n', '\n', '        paymentId = paymentsNextIndex++;\n', '        emit NewPayment(paymentId, _receiver, _maxExecutions, _reference);\n', '\n', '        ScheduledPayment storage payment = scheduledPayments[paymentId];\n', '        payment.token = _token;\n', '        payment.receiver = _receiver;\n', '        payment.amount = _amount;\n', '        payment.initialPaymentTime = _initialPaymentTime;\n', '        payment.interval = _interval;\n', '        payment.maxExecutions = _maxExecutions;\n', '        payment.createdBy = msg.sender;\n', '\n', '        // We skip checking how many times the new payment was executed to allow creating new\n', '        // scheduled payments before having enough vault balance\n', '        _executePayment(paymentId);\n', '    }\n', '\n', '    /**\n', '    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\n', '    * @param _periodDuration Duration in seconds for accounting periods\n', '    */\n', '    function setPeriodDuration(uint64 _periodDuration)\n', '        external\n', '        authP(CHANGE_PERIOD_ROLE, arr(uint256(_periodDuration), uint256(settings.periodDuration)))\n', '        transitionsPeriod\n', '    {\n', '        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\n', '        settings.periodDuration = _periodDuration;\n', '        emit ChangePeriodDuration(_periodDuration);\n', '    }\n', '\n', '    /**\n', '    * @notice Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately\n', '    * @param _token Address for token\n', '    * @param _amount New budget amount\n', '    */\n', '    function setBudget(\n', '        address _token,\n', '        uint256 _amount\n', '    )\n', '        external\n', '        authP(CHANGE_BUDGETS_ROLE, arr(_token, _amount, settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\n', '        transitionsPeriod\n', '    {\n', '        settings.budgets[_token] = _amount;\n', '        if (!settings.hasBudget[_token]) {\n', '            settings.hasBudget[_token] = true;\n', '        }\n', '        emit SetBudget(_token, _amount, true);\n', '    }\n', '\n', '    /**\n', '    * @notice Remove spending limit for `_token.symbol(): string`, effective immediately\n', '    * @param _token Address for token\n', '    */\n', '    function removeBudget(address _token)\n', '        external\n', '        authP(CHANGE_BUDGETS_ROLE, arr(_token, uint256(0), settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\n', '        transitionsPeriod\n', '    {\n', '        settings.budgets[_token] = 0;\n', '        settings.hasBudget[_token] = false;\n', '        emit SetBudget(_token, 0, false);\n', '    }\n', '\n', '    /**\n', '    * @notice Execute pending payment #`_paymentId`\n', '    * @dev Executes any payment (requires role)\n', '    * @param _paymentId Identifier for payment\n', '    */\n', '    function executePayment(uint256 _paymentId)\n', '        external\n', '        authP(EXECUTE_PAYMENTS_ROLE, arr(_paymentId, scheduledPayments[_paymentId].amount))\n', '        scheduledPaymentExists(_paymentId)\n', '        transitionsPeriod\n', '    {\n', '        _executePaymentAtLeastOnce(_paymentId);\n', '    }\n', '\n', '    /**\n', '    * @notice Execute pending payment #`_paymentId`\n', '    * @dev Always allow receiver of a payment to trigger execution\n', '    *      Initialization check is implicitly provided by `scheduledPaymentExists()` as new\n', '    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\n', '    * @param _paymentId Identifier for payment\n', '    */\n', '    function receiverExecutePayment(uint256 _paymentId) external scheduledPaymentExists(_paymentId) transitionsPeriod {\n', '        require(scheduledPayments[_paymentId].receiver == msg.sender, ERROR_PAYMENT_RECEIVER);\n', '        _executePaymentAtLeastOnce(_paymentId);\n', '    }\n', '\n', '    /**\n', "    * @notice `_active ? 'Activate' : 'Disable'` payment #`_paymentId`\n", "    * @dev Note that we do not require this action to transition periods, as it doesn't directly\n", '    *      impact any accounting periods.\n', '    *      Not having to transition periods also makes disabling payments easier to prevent funds\n', '    *      from being pulled out in the event of a breach.\n', '    * @param _paymentId Identifier for payment\n', '    * @param _active Whether it will be active or inactive\n', '    */\n', '    function setPaymentStatus(uint256 _paymentId, bool _active)\n', '        external\n', '        authP(MANAGE_PAYMENTS_ROLE, arr(_paymentId, uint256(_active ? 1 : 0)))\n', '        scheduledPaymentExists(_paymentId)\n', '    {\n', '        scheduledPayments[_paymentId].inactive = !_active;\n', '        emit ChangePaymentState(_paymentId, _active);\n', '    }\n', '\n', '    /**\n', '     * @notice Send tokens held in this contract to the Vault\n', '     * @dev Allows making a simple payment from this contract to the Vault, to avoid locked tokens.\n', '     *      This contract should never receive tokens with a simple transfer call, but in case it\n', '     *      happens, this function allows for their recovery.\n', '     * @param _token Token whose balance is going to be transferred.\n', '     */\n', '    function recoverToVault(address _token) external isInitialized transitionsPeriod {\n', '        uint256 amount = _token == ETH ? address(this).balance : ERC20(_token).staticBalanceOf(address(this));\n', '        require(amount > 0, ERROR_RECOVER_AMOUNT_ZERO);\n', '\n', '        _deposit(\n', '            _token,\n', '            amount,\n', '            "Recover to Vault",\n', '            address(this),\n', '            false\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Transition accounting period if needed\n', '    * @dev Transitions accounting periods if needed. For preventing OOG attacks, a maxTransitions\n', '    *      param is provided. If more than the specified number of periods need to be transitioned,\n', '    *      it will return false.\n', '    * @param _maxTransitions Maximum periods that can be transitioned\n', '    * @return success Boolean indicating whether the accounting period is the correct one (if false,\n', '    *                 maxTransitions was surpased and another call is needed)\n', '    */\n', '    function tryTransitionAccountingPeriod(uint64 _maxTransitions) external isInitialized returns (bool success) {\n', '        return _tryTransitionAccountingPeriod(_maxTransitions);\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    /**\n', '    * @dev Disable recovery escape hatch if the app has been initialized, as it could be used\n', '    *      maliciously to transfer funds in the Finance app to another Vault\n', "    *      finance#recoverToVault() should be used to recover funds to the Finance's vault\n", '    */\n', '    function allowRecoverability(address) public view returns (bool) {\n', '        return !hasInitialized();\n', '    }\n', '\n', '    function getPayment(uint256 _paymentId)\n', '        public\n', '        view\n', '        scheduledPaymentExists(_paymentId)\n', '        returns (\n', '            address token,\n', '            address receiver,\n', '            uint256 amount,\n', '            uint64 initialPaymentTime,\n', '            uint64 interval,\n', '            uint64 maxExecutions,\n', '            bool inactive,\n', '            uint64 executions,\n', '            address createdBy\n', '        )\n', '    {\n', '        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n', '\n', '        token = payment.token;\n', '        receiver = payment.receiver;\n', '        amount = payment.amount;\n', '        initialPaymentTime = payment.initialPaymentTime;\n', '        interval = payment.interval;\n', '        maxExecutions = payment.maxExecutions;\n', '        executions = payment.executions;\n', '        inactive = payment.inactive;\n', '        createdBy = payment.createdBy;\n', '    }\n', '\n', '    function getTransaction(uint256 _transactionId)\n', '        public\n', '        view\n', '        transactionExists(_transactionId)\n', '        returns (\n', '            uint64 periodId,\n', '            uint256 amount,\n', '            uint256 paymentId,\n', '            uint64 paymentExecutionNumber,\n', '            address token,\n', '            address entity,\n', '            bool isIncoming,\n', '            uint64 date\n', '        )\n', '    {\n', '        Transaction storage transaction = transactions[_transactionId];\n', '\n', '        token = transaction.token;\n', '        entity = transaction.entity;\n', '        isIncoming = transaction.isIncoming;\n', '        date = transaction.date;\n', '        periodId = transaction.periodId;\n', '        amount = transaction.amount;\n', '        paymentId = transaction.paymentId;\n', '        paymentExecutionNumber = transaction.paymentExecutionNumber;\n', '    }\n', '\n', '    function getPeriod(uint64 _periodId)\n', '        public\n', '        view\n', '        periodExists(_periodId)\n', '        returns (\n', '            bool isCurrent,\n', '            uint64 startTime,\n', '            uint64 endTime,\n', '            uint256 firstTransactionId,\n', '            uint256 lastTransactionId\n', '        )\n', '    {\n', '        Period storage period = periods[_periodId];\n', '\n', '        isCurrent = _currentPeriodId() == _periodId;\n', '\n', '        startTime = period.startTime;\n', '        endTime = period.endTime;\n', '        firstTransactionId = period.firstTransactionId;\n', '        lastTransactionId = period.lastTransactionId;\n', '    }\n', '\n', '    function getPeriodTokenStatement(uint64 _periodId, address _token)\n', '        public\n', '        view\n', '        periodExists(_periodId)\n', '        returns (uint256 expenses, uint256 income)\n', '    {\n', '        TokenStatement storage tokenStatement = periods[_periodId].tokenStatement[_token];\n', '        expenses = tokenStatement.expenses;\n', '        income = tokenStatement.income;\n', '    }\n', '\n', '    /**\n', '    * @dev We have to check for initialization as periods are only valid after initializing\n', '    */\n', '    function currentPeriodId() public view isInitialized returns (uint64) {\n', '        return _currentPeriodId();\n', '    }\n', '\n', '    /**\n', '    * @dev We have to check for initialization as periods are only valid after initializing\n', '    */\n', '    function getPeriodDuration() public view isInitialized returns (uint64) {\n', '        return settings.periodDuration;\n', '    }\n', '\n', '    /**\n', '    * @dev We have to check for initialization as budgets are only valid after initializing\n', '    */\n', '    function getBudget(address _token) public view isInitialized returns (uint256 budget, bool hasBudget) {\n', '        budget = settings.budgets[_token];\n', '        hasBudget = settings.hasBudget[_token];\n', '    }\n', '\n', '    /**\n', '    * @dev We have to check for initialization as budgets are only valid after initializing\n', '    */\n', '    function getRemainingBudget(address _token) public view isInitialized returns (uint256) {\n', '        return _getRemainingBudget(_token);\n', '    }\n', '\n', '    /**\n', '    * @dev We have to check for initialization as budgets are only valid after initializing\n', '    */\n', '    function canMakePayment(address _token, uint256 _amount) public view isInitialized returns (bool) {\n', '        return _canMakePayment(_token, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Initialization check is implicitly provided by `scheduledPaymentExists()` as new\n', '    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\n', '    */\n', '    function nextPaymentTime(uint256 _paymentId) public view scheduledPaymentExists(_paymentId) returns (uint64) {\n', '        return _nextPaymentTime(_paymentId);\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    function _deposit(address _token, uint256 _amount, string _reference, address _sender, bool _isExternalDeposit) internal {\n', '        _recordIncomingTransaction(\n', '            _token,\n', '            _sender,\n', '            _amount,\n', '            _reference\n', '        );\n', '\n', '        if (_token == ETH) {\n', '            vault.deposit.value(_amount)(ETH, _amount);\n', '        } else {\n', '            // First, transfer the tokens to Finance if necessary\n', '            // External deposit will be false when the assets were already in the Finance app\n', '            // and just need to be transferred to the Vault\n', '            if (_isExternalDeposit) {\n', '                // This assumes the sender has approved the tokens for Finance\n', '                require(\n', '                    ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount),\n', '                    ERROR_TOKEN_TRANSFER_FROM_REVERTED\n', '                );\n', '            }\n', '            // Approve the tokens for the Vault (it does the actual transferring)\n', '            require(ERC20(_token).safeApprove(vault, _amount), ERROR_TOKEN_APPROVE_FAILED);\n', '            // Finally, initiate the deposit\n', '            vault.deposit(_token, _amount);\n', '        }\n', '    }\n', '\n', '    function _executePayment(uint256 _paymentId) internal returns (uint256) {\n', '        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n', '        require(!payment.inactive, ERROR_PAYMENT_INACTIVE);\n', '\n', '        uint64 paid = 0;\n', '        while (_nextPaymentTime(_paymentId) <= getTimestamp64() && paid < MAX_SCHEDULED_PAYMENTS_PER_TX) {\n', '            if (!_canMakePayment(payment.token, payment.amount)) {\n', '                emit PaymentFailure(_paymentId);\n', '                break;\n', '            }\n', '\n', '            // The while() predicate prevents these two from ever overflowing\n', '            payment.executions += 1;\n', '            paid += 1;\n', '\n', "            // We've already checked the remaining budget with `_canMakePayment()`\n", '            _unsafeMakePaymentTransaction(\n', '                payment.token,\n', '                payment.receiver,\n', '                payment.amount,\n', '                _paymentId,\n', '                payment.executions,\n', '                ""\n', '            );\n', '        }\n', '\n', '        return paid;\n', '    }\n', '\n', '    function _executePaymentAtLeastOnce(uint256 _paymentId) internal {\n', '        uint256 paid = _executePayment(_paymentId);\n', '        if (paid == 0) {\n', '            if (_nextPaymentTime(_paymentId) <= getTimestamp64()) {\n', '                revert(ERROR_EXECUTE_PAYMENT_NUM);\n', '            } else {\n', '                revert(ERROR_EXECUTE_PAYMENT_TIME);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _makePaymentTransaction(\n', '        address _token,\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint256 _paymentId,\n', '        uint64 _paymentExecutionNumber,\n', '        string _reference\n', '    )\n', '        internal\n', '    {\n', '        require(_getRemainingBudget(_token) >= _amount, ERROR_REMAINING_BUDGET);\n', '        _unsafeMakePaymentTransaction(_token, _receiver, _amount, _paymentId, _paymentExecutionNumber, _reference);\n', '    }\n', '\n', '    /**\n', '    * @dev Unsafe version of _makePaymentTransaction that assumes you have already checked the\n', '    *      remaining budget\n', '    */\n', '    function _unsafeMakePaymentTransaction(\n', '        address _token,\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint256 _paymentId,\n', '        uint64 _paymentExecutionNumber,\n', '        string _reference\n', '    )\n', '        internal\n', '    {\n', '        _recordTransaction(\n', '            false,\n', '            _token,\n', '            _receiver,\n', '            _amount,\n', '            _paymentId,\n', '            _paymentExecutionNumber,\n', '            _reference\n', '        );\n', '\n', '        vault.transfer(_token, _receiver, _amount);\n', '    }\n', '\n', '    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\n', '        // There should be no way for this to overflow since each period is at least one day\n', '        uint64 newPeriodId = periodsLength++;\n', '\n', '        Period storage period = periods[newPeriodId];\n', '        period.startTime = _startTime;\n', '\n', '        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\n', "        // to MAX_UINT64 (let's assume that's the end of time for now).\n", '        uint64 endTime = _startTime + settings.periodDuration - 1;\n', '        if (endTime < _startTime) { // overflowed\n', '            endTime = MAX_UINT64;\n', '        }\n', '        period.endTime = endTime;\n', '\n', '        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\n', '\n', '        return period;\n', '    }\n', '\n', '    function _recordIncomingTransaction(\n', '        address _token,\n', '        address _sender,\n', '        uint256 _amount,\n', '        string _reference\n', '    )\n', '        internal\n', '    {\n', '        _recordTransaction(\n', '            true, // incoming transaction\n', '            _token,\n', '            _sender,\n', '            _amount,\n', '            NO_SCHEDULED_PAYMENT, // unrelated to any existing payment\n', '            0, // and no payment executions\n', '            _reference\n', '        );\n', '    }\n', '\n', '    function _recordTransaction(\n', '        bool _incoming,\n', '        address _token,\n', '        address _entity,\n', '        uint256 _amount,\n', '        uint256 _paymentId,\n', '        uint64 _paymentExecutionNumber,\n', '        string _reference\n', '    )\n', '        internal\n', '    {\n', '        uint64 periodId = _currentPeriodId();\n', '        TokenStatement storage tokenStatement = periods[periodId].tokenStatement[_token];\n', '        if (_incoming) {\n', '            tokenStatement.income = tokenStatement.income.add(_amount);\n', '        } else {\n', '            tokenStatement.expenses = tokenStatement.expenses.add(_amount);\n', '        }\n', '\n', '        uint256 transactionId = transactionsNextIndex++;\n', '\n', '        Transaction storage transaction = transactions[transactionId];\n', '        transaction.token = _token;\n', '        transaction.entity = _entity;\n', '        transaction.isIncoming = _incoming;\n', '        transaction.amount = _amount;\n', '        transaction.paymentId = _paymentId;\n', '        transaction.paymentExecutionNumber = _paymentExecutionNumber;\n', '        transaction.date = getTimestamp64();\n', '        transaction.periodId = periodId;\n', '\n', '        Period storage period = periods[periodId];\n', '        if (period.firstTransactionId == NO_TRANSACTION) {\n', '            period.firstTransactionId = transactionId;\n', '        }\n', '\n', '        emit NewTransaction(transactionId, _incoming, _entity, _amount, _reference);\n', '    }\n', '\n', '    function _tryTransitionAccountingPeriod(uint64 _maxTransitions) internal returns (bool success) {\n', '        Period storage currentPeriod = periods[_currentPeriodId()];\n', '        uint64 timestamp = getTimestamp64();\n', '\n', '        // Transition periods if necessary\n', '        while (timestamp > currentPeriod.endTime) {\n', '            if (_maxTransitions == 0) {\n', '                // Required number of transitions is over allowed number, return false indicating\n', "                // it didn't fully transition\n", '                return false;\n', '            }\n', "            // We're already protected from underflowing above\n", '            _maxTransitions -= 1;\n', '\n', '            // If there were any transactions in period, record which was the last\n', '            // In case 0 transactions occured, first and last tx id will be 0\n', '            if (currentPeriod.firstTransactionId != NO_TRANSACTION) {\n', '                currentPeriod.lastTransactionId = transactionsNextIndex.sub(1);\n', '            }\n', '\n', '            // New period starts at end time + 1\n', '            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _canMakePayment(address _token, uint256 _amount) internal view returns (bool) {\n', '        return _getRemainingBudget(_token) >= _amount && vault.balance(_token) >= _amount;\n', '    }\n', '\n', '    function _currentPeriodId() internal view returns (uint64) {\n', '        // There is no way for this to overflow if protected by an initialization check\n', '        return periodsLength - 1;\n', '    }\n', '\n', '    function _getRemainingBudget(address _token) internal view returns (uint256) {\n', '        if (!settings.hasBudget[_token]) {\n', '            return MAX_UINT256;\n', '        }\n', '\n', '        uint256 budget = settings.budgets[_token];\n', '        uint256 spent = periods[_currentPeriodId()].tokenStatement[_token].expenses;\n', '\n', '        // A budget decrease can cause the spent amount to be greater than period budget\n', '        // If so, return 0 to not allow more spending during period\n', '        if (spent >= budget) {\n', '            return 0;\n', '        }\n', '\n', "        // We're already protected from the overflow above\n", '        return budget - spent;\n', '    }\n', '\n', '    function _nextPaymentTime(uint256 _paymentId) internal view returns (uint64) {\n', '        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n', '\n', '        if (payment.executions >= payment.maxExecutions) {\n', '            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\n', '        }\n', '\n', '        // Split in multiple lines to circumvent linter warning\n', '        uint64 increase = payment.executions.mul(payment.interval);\n', '        uint64 nextPayment = payment.initialPaymentTime.add(increase);\n', '        return nextPayment;\n', '    }\n', '\n', '    // Syntax sugar\n', '\n', '    function _arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) internal pure returns (uint256[] r) {\n', '        r = new uint256[](6);\n', '        r[0] = uint256(_a);\n', '        r[1] = uint256(_b);\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '        r[4] = _e;\n', '        r[5] = _f;\n', '    }\n', '\n', '    // Mocked fns (overrided during testing)\n', '    // Must be view for mocking purposes\n', '\n', '    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\n', '}\n', '\n', '// File: @aragon/apps-payroll/contracts/Payroll.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Payroll in multiple currencies\n', ' */\n', 'contract Payroll is EtherTokenConstant, IForwarder, IsContract, AragonApp {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '\n', '    /* Hardcoded constants to save gas\n', '    * bytes32 constant public ADD_EMPLOYEE_ROLE = keccak256("ADD_EMPLOYEE_ROLE");\n', '    * bytes32 constant public TERMINATE_EMPLOYEE_ROLE = keccak256("TERMINATE_EMPLOYEE_ROLE");\n', '    * bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = keccak256("SET_EMPLOYEE_SALARY_ROLE");\n', '    * bytes32 constant public ADD_BONUS_ROLE = keccak256("ADD_BONUS_ROLE");\n', '    * bytes32 constant public ADD_REIMBURSEMENT_ROLE = keccak256("ADD_REIMBURSEMENT_ROLE");\n', '    * bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = keccak256("MANAGE_ALLOWED_TOKENS_ROLE");\n', '    * bytes32 constant public MODIFY_PRICE_FEED_ROLE = keccak256("MODIFY_PRICE_FEED_ROLE");\n', '    * bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = keccak256("MODIFY_RATE_EXPIRY_ROLE");\n', '    */\n', '\n', '    bytes32 constant public ADD_EMPLOYEE_ROLE = 0x9ecdc3c63716b45d0756eece5fe1614cae1889ec5a1ce62b3127c1f1f1615d6e;\n', '    bytes32 constant public TERMINATE_EMPLOYEE_ROLE = 0x69c67f914d12b6440e7ddf01961214818d9158fbcb19211e0ff42800fdea9242;\n', '    bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = 0xea9ac65018da2421cf419ee2152371440c08267a193a33ccc1e39545d197e44d;\n', '    bytes32 constant public ADD_BONUS_ROLE = 0xceca7e2f5eb749a87aaf68f3f76d6b9251aa2f4600f13f93c5a4adf7a72df4ae;\n', '    bytes32 constant public ADD_REIMBURSEMENT_ROLE = 0x90698b9d54427f1e41636025017309bdb1b55320da960c8845bab0a504b01a16;\n', '    bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = 0x0be34987c45700ee3fae8c55e270418ba903337decc6bacb1879504be9331c06;\n', '    bytes32 constant public MODIFY_PRICE_FEED_ROLE = 0x74350efbcba8b85341c5bbf70cc34e2a585fc1463524773a12fa0a71d4eb9302;\n', '    bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = 0x79fe989a8899060dfbdabb174ebb96616fa9f1d9dadd739f8d814cbab452404e;\n', '\n', '    uint256 internal constant MAX_ALLOWED_TOKENS = 20; // prevent OOG issues with `payday()`\n', '    uint64 internal constant MIN_RATE_EXPIRY = uint64(1 minutes); // 1 min == ~4 block window to mine both a price feed update and a payout\n', '\n', '    uint256 internal constant MAX_UINT256 = uint256(-1);\n', '    uint64 internal constant MAX_UINT64 = uint64(-1);\n', '\n', '    string private constant ERROR_EMPLOYEE_DOESNT_EXIST = "PAYROLL_EMPLOYEE_DOESNT_EXIST";\n', '    string private constant ERROR_NON_ACTIVE_EMPLOYEE = "PAYROLL_NON_ACTIVE_EMPLOYEE";\n', '    string private constant ERROR_SENDER_DOES_NOT_MATCH = "PAYROLL_SENDER_DOES_NOT_MATCH";\n', '    string private constant ERROR_FINANCE_NOT_CONTRACT = "PAYROLL_FINANCE_NOT_CONTRACT";\n', '    string private constant ERROR_TOKEN_ALREADY_SET = "PAYROLL_TOKEN_ALREADY_SET";\n', '    string private constant ERROR_MAX_ALLOWED_TOKENS = "PAYROLL_MAX_ALLOWED_TOKENS";\n', '    string private constant ERROR_MIN_RATES_MISMATCH = "PAYROLL_MIN_RATES_MISMATCH";\n', '    string private constant ERROR_TOKEN_ALLOCATION_MISMATCH = "PAYROLL_TOKEN_ALLOCATION_MISMATCH";\n', '    string private constant ERROR_NOT_ALLOWED_TOKEN = "PAYROLL_NOT_ALLOWED_TOKEN";\n', '    string private constant ERROR_DISTRIBUTION_NOT_FULL = "PAYROLL_DISTRIBUTION_NOT_FULL";\n', '    string private constant ERROR_INVALID_PAYMENT_TYPE = "PAYROLL_INVALID_PAYMENT_TYPE";\n', '    string private constant ERROR_NOTHING_PAID = "PAYROLL_NOTHING_PAID";\n', '    string private constant ERROR_CAN_NOT_FORWARD = "PAYROLL_CAN_NOT_FORWARD";\n', '    string private constant ERROR_EMPLOYEE_NULL_ADDRESS = "PAYROLL_EMPLOYEE_NULL_ADDRESS";\n', '    string private constant ERROR_EMPLOYEE_ALREADY_EXIST = "PAYROLL_EMPLOYEE_ALREADY_EXIST";\n', '    string private constant ERROR_FEED_NOT_CONTRACT = "PAYROLL_FEED_NOT_CONTRACT";\n', '    string private constant ERROR_EXPIRY_TIME_TOO_SHORT = "PAYROLL_EXPIRY_TIME_TOO_SHORT";\n', '    string private constant ERROR_PAST_TERMINATION_DATE = "PAYROLL_PAST_TERMINATION_DATE";\n', '    string private constant ERROR_EXCHANGE_RATE_TOO_LOW = "PAYROLL_EXCHANGE_RATE_TOO_LOW";\n', '    string private constant ERROR_LAST_PAYROLL_DATE_TOO_BIG = "PAYROLL_LAST_DATE_TOO_BIG";\n', '    string private constant ERROR_INVALID_REQUESTED_AMOUNT = "PAYROLL_INVALID_REQUESTED_AMT";\n', '\n', '    enum PaymentType { Payroll, Reimbursement, Bonus }\n', '\n', '    struct Employee {\n', '        address accountAddress; // unique, but can be changed over time\n', '        uint256 denominationTokenSalary; // salary per second in denomination Token\n', '        uint256 accruedSalary; // keep track of any leftover accrued salary when changing salaries\n', '        uint256 bonus;\n', '        uint256 reimbursements;\n', '        uint64 lastPayroll;\n', '        uint64 endDate;\n', '        address[] allocationTokenAddresses;\n', '        mapping(address => uint256) allocationTokens;\n', '    }\n', '\n', '    Finance public finance;\n', '    address public denominationToken;\n', '    IFeed public feed;\n', '    uint64 public rateExpiryTime;\n', '\n', '    // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\n', '    uint256 public nextEmployee;\n', '    mapping(uint256 => Employee) internal employees;     // employee ID -> employee\n', '    mapping(address => uint256) internal employeeIds;    // employee address -> employee ID\n', '\n', '    mapping(address => bool) internal allowedTokens;\n', '\n', '    event AddEmployee(\n', '        uint256 indexed employeeId,\n', '        address indexed accountAddress,\n', '        uint256 initialDenominationSalary,\n', '        uint64 startDate,\n', '        string role\n', '    );\n', '    event TerminateEmployee(uint256 indexed employeeId, uint64 endDate);\n', '    event SetEmployeeSalary(uint256 indexed employeeId, uint256 denominationSalary);\n', '    event AddEmployeeAccruedSalary(uint256 indexed employeeId, uint256 amount);\n', '    event AddEmployeeBonus(uint256 indexed employeeId, uint256 amount);\n', '    event AddEmployeeReimbursement(uint256 indexed employeeId, uint256 amount);\n', '    event ChangeAddressByEmployee(uint256 indexed employeeId, address indexed newAccountAddress, address indexed oldAccountAddress);\n', '    event DetermineAllocation(uint256 indexed employeeId);\n', '    event SendPayment(\n', '        uint256 indexed employeeId,\n', '        address indexed accountAddress,\n', '        address indexed token,\n', '        uint256 amount,\n', '        uint256 exchangeRate,\n', '        string paymentReference\n', '    );\n', '    event SetAllowedToken(address indexed token, bool allowed);\n', '    event SetPriceFeed(address indexed feed);\n', '    event SetRateExpiryTime(uint64 time);\n', '\n', '    // Check employee exists by ID\n', '    modifier employeeIdExists(uint256 _employeeId) {\n', '        require(_employeeExists(_employeeId), ERROR_EMPLOYEE_DOESNT_EXIST);\n', '        _;\n', '    }\n', '\n', '    // Check employee exists and is still active\n', '    modifier employeeActive(uint256 _employeeId) {\n', '        // No need to check for existence as _isEmployeeIdActive() is false for non-existent employees\n', '        require(_isEmployeeIdActive(_employeeId), ERROR_NON_ACTIVE_EMPLOYEE);\n', '        _;\n', '    }\n', '\n', '    // Check sender matches an existing employee\n', '    modifier employeeMatches {\n', '        require(employees[employeeIds[msg.sender]].accountAddress == msg.sender, ERROR_SENDER_DOES_NOT_MATCH);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Initialize Payroll app for Finance at `_finance` and price feed at `_priceFeed`, setting denomination token to `_token` and exchange rate expiry time to `@transformTime(_rateExpiryTime)`\n', '     * @dev Note that we do not require _denominationToken to be a contract, as it may be a "fake"\n', '     *      address used by the price feed to denominate fiat currencies\n', '     * @param _finance Address of the Finance app this Payroll app will rely on for payments (non-changeable)\n', '     * @param _denominationToken Address of the denomination token used for salary accounting\n', '     * @param _priceFeed Address of the price feed\n', "     * @param _rateExpiryTime Acceptable expiry time in seconds for the price feed's exchange rates\n", '     */\n', '    function initialize(Finance _finance, address _denominationToken, IFeed _priceFeed, uint64 _rateExpiryTime) external onlyInit {\n', '        initialized();\n', '\n', '        require(isContract(_finance), ERROR_FINANCE_NOT_CONTRACT);\n', '        finance = _finance;\n', '\n', '        denominationToken = _denominationToken;\n', '        _setPriceFeed(_priceFeed);\n', '        _setRateExpiryTime(_rateExpiryTime);\n', '\n', '        // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\n', '        nextEmployee = 1;\n', '    }\n', '\n', '    /**\n', "     * @notice `_allowed ? 'Add' : 'Remove'` `_token.symbol(): string` `_allowed ? 'to' : 'from'` the set of allowed tokens\n", '     * @param _token Address of the token to be added or removed from the list of allowed tokens for payments\n', '     * @param _allowed Boolean to tell whether the given token should be added or removed from the list\n', '     */\n', '    function setAllowedToken(address _token, bool _allowed) external authP(MANAGE_ALLOWED_TOKENS_ROLE, arr(_token)) {\n', '        require(allowedTokens[_token] != _allowed, ERROR_TOKEN_ALREADY_SET);\n', '        allowedTokens[_token] = _allowed;\n', '        emit SetAllowedToken(_token, _allowed);\n', '    }\n', '\n', '    /**\n', '     * @notice Set the price feed for exchange rates to `_feed`\n', '     * @param _feed Address of the new price feed instance\n', '     */\n', '    function setPriceFeed(IFeed _feed) external authP(MODIFY_PRICE_FEED_ROLE, arr(_feed, feed)) {\n', '        _setPriceFeed(_feed);\n', '    }\n', '\n', '    /**\n', "     * @notice Set the acceptable expiry time for the price feed's exchange rates to `@transformTime(_time)`\n", "     * @dev Exchange rates older than the given value won't be accepted for payments and will cause payouts to revert\n", '     * @param _time The expiration time in seconds for exchange rates\n', '     */\n', '    function setRateExpiryTime(uint64 _time) external authP(MODIFY_RATE_EXPIRY_ROLE, arr(uint256(_time), uint256(rateExpiryTime))) {\n', '        _setRateExpiryTime(_time);\n', '    }\n', '\n', '    /**\n', '     * @notice Add employee with address `_accountAddress` to payroll with an salary of `_initialDenominationSalary` per second, starting on `@formatDate(_startDate)`\n', "     * @param _accountAddress Employee's address to receive payroll\n", "     * @param _initialDenominationSalary Employee's salary, per second in denomination token\n", "     * @param _startDate Employee's starting timestamp in seconds (it actually sets their initial lastPayroll value)\n", "     * @param _role Employee's role\n", '     */\n', '    function addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role)\n', '        external\n', '        authP(ADD_EMPLOYEE_ROLE, arr(_accountAddress, _initialDenominationSalary, uint256(_startDate)))\n', '    {\n', '        _addEmployee(_accountAddress, _initialDenominationSalary, _startDate, _role);\n', '    }\n', '\n', '    /**\n', '     * @notice Add `_amount` to bonus for employee #`_employeeId`\n', "     * @param _employeeId Employee's identifier\n", "     * @param _amount Amount to be added to the employee's bonuses in denomination token\n", '     */\n', '    function addBonus(uint256 _employeeId, uint256 _amount)\n', '        external\n', '        authP(ADD_BONUS_ROLE, arr(_employeeId, _amount))\n', '        employeeActive(_employeeId)\n', '    {\n', '        _addBonus(_employeeId, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Add `_amount` to reimbursements for employee #`_employeeId`\n', "     * @param _employeeId Employee's identifier\n", "     * @param _amount Amount to be added to the employee's reimbursements in denomination token\n", '     */\n', '    function addReimbursement(uint256 _employeeId, uint256 _amount)\n', '        external\n', '        authP(ADD_REIMBURSEMENT_ROLE, arr(_employeeId, _amount))\n', '        employeeActive(_employeeId)\n', '    {\n', '        _addReimbursement(_employeeId, _amount);\n', '    }\n', '\n', '    /**\n', "     * @notice Set employee #`_employeeId`'s salary to `_denominationSalary` per second\n", "     * @dev This reverts if either the employee's owed salary or accrued salary overflows, to avoid\n", '     *      losing any accrued salary for an employee due to the employer changing their salary.\n', "     * @param _employeeId Employee's identifier\n", "     * @param _denominationSalary Employee's new salary, per second in denomination token\n", '     */\n', '    function setEmployeeSalary(uint256 _employeeId, uint256 _denominationSalary)\n', '        external\n', '        authP(SET_EMPLOYEE_SALARY_ROLE, arr(_employeeId, _denominationSalary, employees[_employeeId].denominationTokenSalary))\n', '        employeeActive(_employeeId)\n', '    {\n', '        Employee storage employee = employees[_employeeId];\n', '\n', "        // Accrue employee's owed salary; don't cap to revert on overflow\n", '        uint256 owed = _getOwedSalarySinceLastPayroll(employee, false);\n', '        _addAccruedSalary(_employeeId, owed);\n', '\n', '        // Update employee to track the new salary and payment date\n', '        employee.lastPayroll = getTimestamp64();\n', '        employee.denominationTokenSalary = _denominationSalary;\n', '\n', '        emit SetEmployeeSalary(_employeeId, _denominationSalary);\n', '    }\n', '\n', '    /**\n', '     * @notice Terminate employee #`_employeeId` on `@formatDate(_endDate)`\n', "     * @param _employeeId Employee's identifier\n", '     * @param _endDate Termination timestamp in seconds\n', '     */\n', '    function terminateEmployee(uint256 _employeeId, uint64 _endDate)\n', '        external\n', '        authP(TERMINATE_EMPLOYEE_ROLE, arr(_employeeId, uint256(_endDate)))\n', '        employeeActive(_employeeId)\n', '    {\n', '        _terminateEmployee(_employeeId, _endDate);\n', '    }\n', '\n', '    /**\n', '     * @notice Change your employee account address to `_newAccountAddress`\n', '     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\n', '     *      only be added via `addEmployee(),` which requires initialization.\n', '     *      As the employee is allowed to call this, we enforce non-reentrancy.\n', '     * @param _newAccountAddress New address to receive payments for the requesting employee\n', '     */\n', '    function changeAddressByEmployee(address _newAccountAddress) external employeeMatches nonReentrant {\n', '        uint256 employeeId = employeeIds[msg.sender];\n', '        address oldAddress = employees[employeeId].accountAddress;\n', '\n', '        _setEmployeeAddress(employeeId, _newAccountAddress);\n', "        // Don't delete the old address until after setting the new address to check that the\n", '        // employee specified a new address\n', '        delete employeeIds[oldAddress];\n', '\n', '        emit ChangeAddressByEmployee(employeeId, _newAccountAddress, oldAddress);\n', '    }\n', '\n', '    /**\n', '     * @notice Set the token distribution for your payments\n', '     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\n', '     *      only be added via `addEmployee(),` which requires initialization.\n', '     *      As the employee is allowed to call this, we enforce non-reentrancy.\n', '     * @param _tokens Array of token addresses; they must belong to the list of allowed tokens\n', "     * @param _distribution Array with each token's corresponding proportions (must be integers summing to 100)\n", '     */\n', '    function determineAllocation(address[] _tokens, uint256[] _distribution) external employeeMatches nonReentrant {\n', '        // Check array lengthes match\n', '        require(_tokens.length <= MAX_ALLOWED_TOKENS, ERROR_MAX_ALLOWED_TOKENS);\n', '        require(_tokens.length == _distribution.length, ERROR_TOKEN_ALLOCATION_MISMATCH);\n', '\n', '        uint256 employeeId = employeeIds[msg.sender];\n', '        Employee storage employee = employees[employeeId];\n', '\n', '        // Delete previous token allocations\n', '        address[] memory previousAllowedTokenAddresses = employee.allocationTokenAddresses;\n', '        for (uint256 j = 0; j < previousAllowedTokenAddresses.length; j++) {\n', '            delete employee.allocationTokens[previousAllowedTokenAddresses[j]];\n', '        }\n', '        delete employee.allocationTokenAddresses;\n', '\n', '        // Set distributions only if given tokens are allowed\n', '        for (uint256 i = 0; i < _tokens.length; i++) {\n', '            employee.allocationTokenAddresses.push(_tokens[i]);\n', '            employee.allocationTokens[_tokens[i]] = _distribution[i];\n', '        }\n', '\n', '        _ensureEmployeeTokenAllocationsIsValid(employee);\n', '        emit DetermineAllocation(employeeId);\n', '    }\n', '\n', '    /**\n', "     * @notice Request your `_type == 0 ? 'salary' : _type == 1 ? 'reimbursements' : 'bonus'`\n", '     * @dev Reverts if no payments were made.\n', '     *      Initialization check is implicitly provided by `employeeMatches` as new employees can\n', '     *      only be added via `addEmployee(),` which requires initialization.\n', '     *      As the employee is allowed to call this, we enforce non-reentrancy.\n', '     * @param _type Payment type being requested (Payroll, Reimbursement or Bonus)\n', '     * @param _requestedAmount Requested amount to pay for the payment type. Must be less than or equal to total owed amount for the payment type, or zero to request all.\n', "     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\n", '     */\n', '    function payday(PaymentType _type, uint256 _requestedAmount, uint256[] _minRates) external employeeMatches nonReentrant {\n', '        uint256 paymentAmount;\n', '        uint256 employeeId = employeeIds[msg.sender];\n', '        Employee storage employee = employees[employeeId];\n', '        _ensureEmployeeTokenAllocationsIsValid(employee);\n', '        require(_minRates.length == 0 || _minRates.length == employee.allocationTokenAddresses.length, ERROR_MIN_RATES_MISMATCH);\n', '\n', '        // Do internal employee accounting\n', '        if (_type == PaymentType.Payroll) {\n', '            // Salary is capped here to avoid reverting at this point if it becomes too big\n', "            // (so employees aren't DDOSed if their salaries get too large)\n", "            // If we do use a capped value, the employee's lastPayroll date will be adjusted accordingly\n", '            uint256 totalOwedSalary = _getTotalOwedCappedSalary(employee);\n', '            paymentAmount = _ensurePaymentAmount(totalOwedSalary, _requestedAmount);\n', '            _updateEmployeeAccountingBasedOnPaidSalary(employee, paymentAmount);\n', '        } else if (_type == PaymentType.Reimbursement) {\n', '            uint256 owedReimbursements = employee.reimbursements;\n', '            paymentAmount = _ensurePaymentAmount(owedReimbursements, _requestedAmount);\n', '            employee.reimbursements = owedReimbursements.sub(paymentAmount);\n', '        } else if (_type == PaymentType.Bonus) {\n', '            uint256 owedBonusAmount = employee.bonus;\n', '            paymentAmount = _ensurePaymentAmount(owedBonusAmount, _requestedAmount);\n', '            employee.bonus = owedBonusAmount.sub(paymentAmount);\n', '        } else {\n', '            revert(ERROR_INVALID_PAYMENT_TYPE);\n', '        }\n', '\n', '        // Actually transfer the owed funds\n', '        require(_transferTokensAmount(employeeId, _type, paymentAmount, _minRates), ERROR_NOTHING_PAID);\n', '        _removeEmployeeIfTerminatedAndPaidOut(employeeId);\n', '    }\n', '\n', '    // Forwarding fns\n', '\n', '    /**\n', '     * @dev IForwarder interface conformance. Tells whether the Payroll app is a forwarder or not.\n', '     * @return Always true\n', '     */\n', '    function isForwarder() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Execute desired action as an active employee\n', '     * @dev IForwarder interface conformance. Allows active employees to run EVMScripts in the context of the Payroll app.\n', '     * @param _evmScript Script being executed\n', '     */\n', '    function forward(bytes _evmScript) public {\n', '        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n', '        bytes memory input = new bytes(0); // TODO: Consider input for this\n', '\n', '        // Add the Finance app to the blacklist to disallow employees from executing actions on the\n', "        // Finance app from Payroll's context (since Payroll requires permissions on Finance)\n", '        address[] memory blacklist = new address[](1);\n', '        blacklist[0] = address(finance);\n', '\n', '        runScript(_evmScript, input, blacklist);\n', '    }\n', '\n', '    /**\n', '     * @dev IForwarder interface conformance. Tells whether a given address can forward actions or not.\n', '     * @param _sender Address of the account intending to forward an action\n', '     * @return True if the given address is an active employee, false otherwise\n', '     */\n', '    function canForward(address _sender, bytes) public view returns (bool) {\n', '        return _isEmployeeIdActive(employeeIds[_sender]);\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    /**\n', "     * @dev Return employee's identifier by their account address\n", "     * @param _accountAddress Employee's address to receive payments\n", "     * @return Employee's identifier\n", '     */\n', '    function getEmployeeIdByAddress(address _accountAddress) public view returns (uint256) {\n', '        require(employeeIds[_accountAddress] != uint256(0), ERROR_EMPLOYEE_DOESNT_EXIST);\n', '        return employeeIds[_accountAddress];\n', '    }\n', '\n', '    /**\n', '     * @dev Return all information for employee by their ID\n', "     * @param _employeeId Employee's identifier\n", "     * @return Employee's address to receive payments\n", "     * @return Employee's salary, per second in denomination token\n", "     * @return Employee's accrued salary\n", "     * @return Employee's bonus amount\n", "     * @return Employee's reimbursements amount\n", "     * @return Employee's last payment date\n", "     * @return Employee's termination date (max uint64 if none)\n", "     * @return Employee's allowed payment tokens\n", '     */\n', '    function getEmployee(uint256 _employeeId)\n', '        public\n', '        view\n', '        employeeIdExists(_employeeId)\n', '        returns (\n', '            address accountAddress,\n', '            uint256 denominationSalary,\n', '            uint256 accruedSalary,\n', '            uint256 bonus,\n', '            uint256 reimbursements,\n', '            uint64 lastPayroll,\n', '            uint64 endDate,\n', '            address[] allocationTokens\n', '        )\n', '    {\n', '        Employee storage employee = employees[_employeeId];\n', '\n', '        accountAddress = employee.accountAddress;\n', '        denominationSalary = employee.denominationTokenSalary;\n', '        accruedSalary = employee.accruedSalary;\n', '        bonus = employee.bonus;\n', '        reimbursements = employee.reimbursements;\n', '        lastPayroll = employee.lastPayroll;\n', '        endDate = employee.endDate;\n', '        allocationTokens = employee.allocationTokenAddresses;\n', '    }\n', '\n', '    /**\n', '     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\n', '     *      The result will be capped to max uint256 to avoid having an overflow.\n', "     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\n", '     */\n', '    function getTotalOwedSalary(uint256 _employeeId) public view employeeIdExists(_employeeId) returns (uint256) {\n', '        return _getTotalOwedCappedSalary(employees[_employeeId]);\n', '    }\n', '\n', '    /**\n', "     * @dev Get an employee's payment allocation for a token\n", "     * @param _employeeId Employee's identifier\n", '     * @param _token Token to query the payment allocation for\n', "     * @return Employee's payment allocation for the token being queried\n", '     */\n', '    function getAllocation(uint256 _employeeId, address _token) public view employeeIdExists(_employeeId) returns (uint256) {\n', '        return employees[_employeeId].allocationTokens[_token];\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a token is allowed to be used for payments\n', '     * @param _token Address of the token to be checked\n', '     * @return True if the given token is allowed, false otherwise\n', '     */\n', '    function isTokenAllowed(address _token) public view isInitialized returns (bool) {\n', '        return allowedTokens[_token];\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    /**\n', '     * @dev Set the price feed used for exchange rates\n', '     * @param _feed Address of the new price feed instance\n', '     */\n', '    function _setPriceFeed(IFeed _feed) internal {\n', '        require(isContract(_feed), ERROR_FEED_NOT_CONTRACT);\n', '        feed = _feed;\n', '        emit SetPriceFeed(feed);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the exchange rate expiry time in seconds.\n', "     *      Exchange rates older than the given value won't be accepted for payments and will cause\n", '     *      payouts to revert.\n', '     * @param _time The expiration time in seconds for exchange rates\n', '     */\n', '    function _setRateExpiryTime(uint64 _time) internal {\n', '        // Require a sane minimum for the rate expiry time\n', '        require(_time >= MIN_RATE_EXPIRY, ERROR_EXPIRY_TIME_TOO_SHORT);\n', '        rateExpiryTime = _time;\n', '        emit SetRateExpiryTime(rateExpiryTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new employee to Payroll\n', "     * @param _accountAddress Employee's address to receive payroll\n", "     * @param _initialDenominationSalary Employee's salary, per second in denomination token\n", "     * @param _startDate Employee's starting timestamp in seconds\n", "     * @param _role Employee's role\n", '     */\n', '    function _addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role) internal {\n', '        uint256 employeeId = nextEmployee++;\n', '\n', '        _setEmployeeAddress(employeeId, _accountAddress);\n', '\n', '        Employee storage employee = employees[employeeId];\n', '        employee.denominationTokenSalary = _initialDenominationSalary;\n', '        employee.lastPayroll = _startDate;\n', '        employee.endDate = MAX_UINT64;\n', '\n', '        emit AddEmployee(employeeId, _accountAddress, _initialDenominationSalary, _startDate, _role);\n', '    }\n', '\n', '    /**\n', "     * @dev Add amount to an employee's bonuses\n", "     * @param _employeeId Employee's identifier\n", "     * @param _amount Amount be added to the employee's bonuses in denomination token\n", '     */\n', '    function _addBonus(uint256 _employeeId, uint256 _amount) internal {\n', '        Employee storage employee = employees[_employeeId];\n', '        employee.bonus = employee.bonus.add(_amount);\n', '        emit AddEmployeeBonus(_employeeId, _amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Add amount to an employee's reimbursements\n", "     * @param _employeeId Employee's identifier\n", "     * @param _amount Amount be added to the employee's reimbursements in denomination token\n", '     */\n', '    function _addReimbursement(uint256 _employeeId, uint256 _amount) internal {\n', '        Employee storage employee = employees[_employeeId];\n', '        employee.reimbursements = employee.reimbursements.add(_amount);\n', '        emit AddEmployeeReimbursement(_employeeId, _amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Add amount to an employee's accrued salary\n", "     * @param _employeeId Employee's identifier\n", "     * @param _amount Amount be added to the employee's accrued salary in denomination token\n", '     */\n', '    function _addAccruedSalary(uint256 _employeeId, uint256 _amount) internal {\n', '        Employee storage employee = employees[_employeeId];\n', '        employee.accruedSalary = employee.accruedSalary.add(_amount);\n', '        emit AddEmployeeAccruedSalary(_employeeId, _amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Set an employee's account address\n", "     * @param _employeeId Employee's identifier\n", "     * @param _accountAddress Employee's address to receive payroll\n", '     */\n', '    function _setEmployeeAddress(uint256 _employeeId, address _accountAddress) internal {\n', '        // Check address is non-null\n', '        require(_accountAddress != address(0), ERROR_EMPLOYEE_NULL_ADDRESS);\n', "        // Check address isn't already being used\n", '        require(employeeIds[_accountAddress] == uint256(0), ERROR_EMPLOYEE_ALREADY_EXIST);\n', '\n', '        employees[_employeeId].accountAddress = _accountAddress;\n', '\n', '        // Create IDs mapping\n', '        employeeIds[_accountAddress] = _employeeId;\n', '    }\n', '\n', '    /**\n', '     * @dev Terminate employee on end date\n', "     * @param _employeeId Employee's identifier\n", '     * @param _endDate Termination timestamp in seconds\n', '     */\n', '    function _terminateEmployee(uint256 _employeeId, uint64 _endDate) internal {\n', '        // Prevent past termination dates\n', '        require(_endDate >= getTimestamp64(), ERROR_PAST_TERMINATION_DATE);\n', '        employees[_employeeId].endDate = _endDate;\n', '        emit TerminateEmployee(_employeeId, _endDate);\n', '    }\n', '\n', '    /**\n', '     * @dev Loop over allowed tokens to send requested amount to the employee in their desired allocation\n', "     * @param _employeeId Employee's identifier\n", "     * @param _totalAmount Total amount to be transferred to the employee distributed in accordance to the employee's token allocation.\n", '     * @param _type Payment type being transferred (Payroll, Reimbursement or Bonus)\n', "     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\n", '     * @return True if there was at least one token transfer\n', '     */\n', '    function _transferTokensAmount(uint256 _employeeId, PaymentType _type, uint256 _totalAmount, uint256[] _minRates) internal returns (bool somethingPaid) {\n', '        if (_totalAmount == 0) {\n', '            return false;\n', '        }\n', '\n', '        Employee storage employee = employees[_employeeId];\n', '        address employeeAddress = employee.accountAddress;\n', '        string memory paymentReference = _paymentReferenceFor(_type);\n', '\n', '        address[] storage allocationTokenAddresses = employee.allocationTokenAddresses;\n', '        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\n', '            address token = allocationTokenAddresses[i];\n', '            uint256 tokenAllocation = employee.allocationTokens[token];\n', '            if (tokenAllocation != uint256(0)) {\n', '                // Get the exchange rate for the payout token in denomination token,\n', '                // as we do accounting in denomination tokens\n', '                uint256 exchangeRate = _getExchangeRateInDenominationToken(token);\n', '                require(_minRates.length > 0 ? exchangeRate >= _minRates[i] : exchangeRate > 0, ERROR_EXCHANGE_RATE_TOO_LOW);\n', '\n', '                // Convert amount (in denomination tokens) to payout token and apply allocation\n', '                uint256 tokenAmount = _totalAmount.mul(exchangeRate).mul(tokenAllocation);\n', '                // Divide by 100 for the allocation percentage and by the exchange rate precision\n', '                tokenAmount = tokenAmount.div(100).div(feed.ratePrecision());\n', '\n', "                // Finance reverts if the payment wasn't possible\n", '                finance.newImmediatePayment(token, employeeAddress, tokenAmount, paymentReference);\n', '                emit SendPayment(_employeeId, employeeAddress, token, tokenAmount, exchangeRate, paymentReference);\n', '                somethingPaid = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Remove employee if there are no owed funds and employee's end date has been reached\n", "     * @param _employeeId Employee's identifier\n", '     */\n', '    function _removeEmployeeIfTerminatedAndPaidOut(uint256 _employeeId) internal {\n', '        Employee storage employee = employees[_employeeId];\n', '\n', '        if (\n', '            employee.lastPayroll == employee.endDate &&\n', '            (employee.accruedSalary == 0 && employee.bonus == 0 && employee.reimbursements == 0)\n', '        ) {\n', '            delete employeeIds[employee.accountAddress];\n', '            delete employees[_employeeId];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Updates the accrued salary and payroll date of an employee based on a payment amount and\n', '     *      their currently owed salary since last payroll date\n', '     * @param _employee Employee struct in storage\n', '     * @param _paymentAmount Amount being paid to the employee\n', '     */\n', '    function _updateEmployeeAccountingBasedOnPaidSalary(Employee storage _employee, uint256 _paymentAmount) internal {\n', '        uint256 accruedSalary = _employee.accruedSalary;\n', '\n', '        if (_paymentAmount <= accruedSalary) {\n', "            // Employee is only cashing out some previously owed salary so we don't need to update\n", '            // their last payroll date\n', '            // No need to use SafeMath as we already know _paymentAmount <= accruedSalary\n', '            _employee.accruedSalary = accruedSalary - _paymentAmount;\n', '            return;\n', '        }\n', '\n', '        // Employee is cashing out some of their currently owed salary so their last payroll date\n', '        // needs to be modified based on the amount of salary paid\n', '        uint256 currentSalaryPaid = _paymentAmount;\n', '        if (accruedSalary > 0) {\n', '            // Employee is cashing out a mixed amount between previous and current owed salaries;\n', '            // first use up their accrued salary\n', '            // No need to use SafeMath here as we already know _paymentAmount > accruedSalary\n', '            currentSalaryPaid = _paymentAmount - accruedSalary;\n', '            // We finally need to clear their accrued salary\n', '            _employee.accruedSalary = 0;\n', '        }\n', '\n', '        uint256 salary = _employee.denominationTokenSalary;\n', '        uint256 timeDiff = currentSalaryPaid.div(salary);\n', '\n', "        // If they're being paid an amount that doesn't match perfectly with the adjusted time\n", "        // (up to a seconds' worth of salary), add the second and put the extra remaining salary\n", '        // into their accrued salary\n', '        uint256 extraSalary = currentSalaryPaid % salary;\n', '        if (extraSalary > 0) {\n', '            timeDiff = timeDiff.add(1);\n', '            _employee.accruedSalary = salary - extraSalary;\n', '        }\n', '\n', '        uint256 lastPayrollDate = uint256(_employee.lastPayroll).add(timeDiff);\n', '        // Even though this function should never receive a currentSalaryPaid value that would\n', '        // result in the lastPayrollDate being higher than the current time,\n', "        // let's double check to be safe\n", '        require(lastPayrollDate <= uint256(getTimestamp64()), ERROR_LAST_PAYROLL_DATE_TOO_BIG);\n', '        // Already know lastPayrollDate must fit in uint64 from above\n', '        _employee.lastPayroll = uint64(lastPayrollDate);\n', '    }\n', '\n', '    /**\n', '     * @dev Tell whether an employee is registered in this Payroll or not\n', "     * @param _employeeId Employee's identifier\n", '     * @return True if the given employee ID belongs to an registered employee, false otherwise\n', '     */\n', '    function _employeeExists(uint256 _employeeId) internal view returns (bool) {\n', '        return employees[_employeeId].accountAddress != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Tell whether an employee has a valid token allocation or not.\n', '     *      A valid allocation is one that sums to 100 and only includes allowed tokens.\n', '     * @param _employee Employee struct in storage\n', "     * @return Reverts if employee's allocation is invalid\n", '     */\n', '    function _ensureEmployeeTokenAllocationsIsValid(Employee storage _employee) internal view {\n', '        uint256 sum = 0;\n', '        address[] memory allocationTokenAddresses = _employee.allocationTokenAddresses;\n', '        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\n', '            address token = allocationTokenAddresses[i];\n', '            require(allowedTokens[token], ERROR_NOT_ALLOWED_TOKEN);\n', '            sum = sum.add(_employee.allocationTokens[token]);\n', '        }\n', '        require(sum == 100, ERROR_DISTRIBUTION_NOT_FULL);\n', '    }\n', '\n', '    /**\n', '     * @dev Tell whether an employee is still active or not\n', '     * @param _employee Employee struct in storage\n', '     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\n', '     */\n', '    function _isEmployeeActive(Employee storage _employee) internal view returns (bool) {\n', '        return _employee.endDate >= getTimestamp64();\n', '    }\n', '\n', '    /**\n', '     * @dev Tell whether an employee id is still active or not\n', "     * @param _employeeId Employee's identifier\n", '     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\n', '     */\n', '    function _isEmployeeIdActive(uint256 _employeeId) internal view returns (bool) {\n', '        return _isEmployeeActive(employees[_employeeId]);\n', '    }\n', '\n', '    /**\n', '     * @dev Get exchange rate for a token based on the denomination token.\n', "     *      As an example, if the denomination token was USD and ETH's price was 100USD,\n", '     *      this would return 0.01 * precision rate for ETH.\n', '     * @param _token Token to get price of in denomination tokens\n', '     * @return Exchange rate (multiplied by the PPF rate precision)\n', '     */\n', '    function _getExchangeRateInDenominationToken(address _token) internal view returns (uint256) {\n', '        // xrt is the number of `_token` that can be exchanged for one `denominationToken`\n', '        (uint128 xrt, uint64 when) = feed.get(\n', '            denominationToken,  // Base (e.g. USD)\n', '            _token              // Quote (e.g. ETH)\n', '        );\n', '\n', '        // Check the price feed is recent enough\n', '        if (getTimestamp64().sub(when) >= rateExpiryTime) {\n', '            return 0;\n', '        }\n', '\n', '        return uint256(xrt);\n', '    }\n', '\n', '    /**\n', '     * @dev Get owed salary since last payroll for an employee\n', '     * @param _employee Employee struct in storage\n', '     * @param _capped Safely cap the owed salary at max uint\n', '     * @return Owed salary in denomination tokens since last payroll for the employee.\n', '     *         If _capped is false, it reverts in case of an overflow.\n', '     */\n', '    function _getOwedSalarySinceLastPayroll(Employee storage _employee, bool _capped) internal view returns (uint256) {\n', '        uint256 timeDiff = _getOwedPayrollPeriod(_employee);\n', '        if (timeDiff == 0) {\n', '            return 0;\n', '        }\n', '        uint256 salary = _employee.denominationTokenSalary;\n', '\n', '        if (_capped) {\n', '            // Return max uint if the result overflows\n', '            uint256 result = salary * timeDiff;\n', '            return (result / timeDiff != salary) ? MAX_UINT256 : result;\n', '        } else {\n', '            return salary.mul(timeDiff);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get owed payroll period for an employee\n', '     * @param _employee Employee struct in storage\n', "     * @return Owed time in seconds since the employee's last payroll date\n", '     */\n', '    function _getOwedPayrollPeriod(Employee storage _employee) internal view returns (uint256) {\n', '        // Get the min of current date and termination date\n', '        uint64 date = _isEmployeeActive(_employee) ? getTimestamp64() : _employee.endDate;\n', '\n', "        // Make sure we don't revert if we try to get the owed salary for an employee whose last\n", '        // payroll date is now or in the future\n', '        // This can happen either by adding new employees with start dates in the future, to allow\n', '        // us to change their salary before their start date, or by terminating an employee and\n', '        // paying out their full owed salary\n', '        if (date <= _employee.lastPayroll) {\n', '            return 0;\n', '        }\n', '\n', '        // Return time diff in seconds, no need to use SafeMath as the underflow was covered by the previous check\n', '        return uint256(date - _employee.lastPayroll);\n', '    }\n', '\n', '    /**\n', '     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\n', '     *      The result will be capped to max uint256 to avoid having an overflow.\n', '     * @param _employee Employee struct in storage\n', "     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\n", '     */\n', '    function _getTotalOwedCappedSalary(Employee storage _employee) internal view returns (uint256) {\n', '        uint256 currentOwedSalary = _getOwedSalarySinceLastPayroll(_employee, true); // cap amount\n', '        uint256 totalOwedSalary = currentOwedSalary + _employee.accruedSalary;\n', '        if (totalOwedSalary < currentOwedSalary) {\n', '            totalOwedSalary = MAX_UINT256;\n', '        }\n', '        return totalOwedSalary;\n', '    }\n', '\n', '    /**\n', '     * @dev Get payment reference for a given payment type\n', '     * @param _type Payment type to query the reference of\n', '     * @return Payment reference for the given payment type\n', '     */\n', '    function _paymentReferenceFor(PaymentType _type) internal pure returns (string memory) {\n', '        if (_type == PaymentType.Payroll) {\n', '            return "Employee salary";\n', '        } else if (_type == PaymentType.Reimbursement) {\n', '            return "Employee reimbursement";\n', '        } if (_type == PaymentType.Bonus) {\n', '            return "Employee bonus";\n', '        }\n', '        revert(ERROR_INVALID_PAYMENT_TYPE);\n', '    }\n', '\n', '    function _ensurePaymentAmount(uint256 _owedAmount, uint256 _requestedAmount) private pure returns (uint256) {\n', '        require(_owedAmount > 0, ERROR_NOTHING_PAID);\n', '        require(_owedAmount >= _requestedAmount, ERROR_INVALID_REQUESTED_AMOUNT);\n', '        return _requestedAmount > 0 ? _requestedAmount : _owedAmount;\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-token-manager/contracts/TokenManager.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', '/* solium-disable function-order */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenManager is ITokenController, IForwarder, AragonApp {\n', '    using SafeMath for uint256;\n', '\n', '    bytes32 public constant MINT_ROLE = keccak256("MINT_ROLE");\n', '    bytes32 public constant ISSUE_ROLE = keccak256("ISSUE_ROLE");\n', '    bytes32 public constant ASSIGN_ROLE = keccak256("ASSIGN_ROLE");\n', '    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256("REVOKE_VESTINGS_ROLE");\n', '    bytes32 public constant BURN_ROLE = keccak256("BURN_ROLE");\n', '\n', '    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\n', '\n', '    string private constant ERROR_CALLER_NOT_TOKEN = "TM_CALLER_NOT_TOKEN";\n', '    string private constant ERROR_NO_VESTING = "TM_NO_VESTING";\n', '    string private constant ERROR_TOKEN_CONTROLLER = "TM_TOKEN_CONTROLLER";\n', '    string private constant ERROR_MINT_RECEIVER_IS_TM = "TM_MINT_RECEIVER_IS_TM";\n', '    string private constant ERROR_VESTING_TO_TM = "TM_VESTING_TO_TM";\n', '    string private constant ERROR_TOO_MANY_VESTINGS = "TM_TOO_MANY_VESTINGS";\n', '    string private constant ERROR_WRONG_CLIFF_DATE = "TM_WRONG_CLIFF_DATE";\n', '    string private constant ERROR_VESTING_NOT_REVOKABLE = "TM_VESTING_NOT_REVOKABLE";\n', '    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = "TM_REVOKE_TRANSFER_FROM_REVERTED";\n', '    string private constant ERROR_CAN_NOT_FORWARD = "TM_CAN_NOT_FORWARD";\n', '    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = "TM_BALANCE_INC_NOT_ALLOWED";\n', '    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = "TM_ASSIGN_TRANSFER_FROM_REVERTED";\n', '\n', '    struct TokenVesting {\n', '        uint256 amount;\n', '        uint64 start;\n', '        uint64 cliff;\n', '        uint64 vesting;\n', '        bool revokable;\n', '    }\n', '\n', '    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\n', '    MiniMeToken public token;\n', '    uint256 public maxAccountTokens;\n', '\n', '    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\n', '    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\n', '    mapping (address => uint256) public vestingsLengths;\n', '\n', '    // Other token specific events can be watched on the token address directly (avoids duplication)\n', '    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\n', '    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\n', '\n', '    modifier onlyToken() {\n', '        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\n', '        _;\n', '    }\n', '\n', '    modifier vestingExists(address _holder, uint256 _vestingId) {\n', "        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\n", '        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\n', '        _;\n', '    }\n', '\n', '    /**\n', "    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\n", '    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\n', '    * @param _transferable whether the token can be transferred by holders\n', '    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\n', '    */\n', '    function initialize(\n', '        MiniMeToken _token,\n', '        bool _transferable,\n', '        uint256 _maxAccountTokens\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        initialized();\n', '\n', '        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\n', '\n', '        token = _token;\n', '        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\n', '\n', '        if (token.transfersEnabled() != _transferable) {\n', '            token.enableTransfers(_transferable);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\n', '    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\n', '    * @param _amount Number of tokens minted\n', '    */\n', '    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\n', '        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\n', '        _mint(_receiver, _amount);\n', '    }\n', '\n', '    /**\n', '    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\n', '    * @param _amount Number of tokens minted\n', '    */\n', '    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\n', '        _mint(address(this), _amount);\n', '    }\n', '\n', '    /**\n', "    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\n", '    * @param _receiver The address receiving the tokens\n', '    * @param _amount Number of tokens transferred\n', '    */\n', '    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\n', '        _assign(_receiver, _amount);\n', '    }\n', '\n', '    /**\n', '    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\n', '    * @param _holder Holder of tokens being burned\n', '    * @param _amount Number of tokens being burned\n', '    */\n', '    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\n', '        // minime.destroyTokens() never returns false, only reverts on failure\n', '        token.destroyTokens(_holder, _amount);\n', '    }\n', '\n', '    /**\n', "    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\n", '    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\n', '    * @param _amount Number of tokens vested\n', '    * @param _start Date the vesting calculations start\n', '    * @param _cliff Date when the initial portion of tokens are transferable\n', '    * @param _vested Date when all tokens are transferable\n', '    * @param _revokable Whether the vesting can be revoked by the Token Manager\n', '    */\n', '    function assignVested(\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint64 _start,\n', '        uint64 _cliff,\n', '        uint64 _vested,\n', '        bool _revokable\n', '    )\n', '        external\n', '        authP(ASSIGN_ROLE, arr(_receiver, _amount))\n', '        returns (uint256)\n', '    {\n', '        require(_receiver != address(this), ERROR_VESTING_TO_TM);\n', '        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\n', '        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\n', '\n', '        uint256 vestingId = vestingsLengths[_receiver]++;\n', '        vestings[_receiver][vestingId] = TokenVesting(\n', '            _amount,\n', '            _start,\n', '            _cliff,\n', '            _vested,\n', '            _revokable\n', '        );\n', '\n', '        _assign(_receiver, _amount);\n', '\n', '        emit NewVesting(_receiver, vestingId, _amount);\n', '\n', '        return vestingId;\n', '    }\n', '\n', '    /**\n', '    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\n', '    * @param _holder Address whose vesting to revoke\n', '    * @param _vestingId Numeric id of the vesting\n', '    */\n', '    function revokeVesting(address _holder, uint256 _vestingId)\n', '        external\n', '        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\n', '        vestingExists(_holder, _vestingId)\n', '    {\n', '        TokenVesting storage v = vestings[_holder][_vestingId];\n', '        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\n', '\n', '        uint256 nonVested = _calculateNonVestedTokens(\n', '            v.amount,\n', '            getTimestamp(),\n', '            v.start,\n', '            v.cliff,\n', '            v.vesting\n', '        );\n', '\n', '        // To make vestingIds immutable over time, we just zero out the revoked vesting\n', '        // Clearing this out also allows the token transfer back to the Token Manager to succeed\n', '        delete vestings[_holder][_vestingId];\n', '\n', '        // transferFrom always works as controller\n', '        // onTransfer hook always allows if transfering to token controller\n', '        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\n', '\n', '        emit RevokeVesting(_holder, _vestingId, nonVested);\n', '    }\n', '\n', '    // ITokenController fns\n', '    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\n', '    // contract and are only meant to be called through the managed MiniMe token that gets assigned\n', '    // during initialization.\n', '\n', '    /*\n', '    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\n', '    *      to allow it or react if desired (only callable from the token).\n', '    *      Initialization check is implicitly provided by `onlyToken()`.\n', '    * @param _from The origin of the transfer\n', '    * @param _to The destination of the transfer\n', '    * @param _amount The amount of the transfer\n', '    * @return False if the controller does not authorize the transfer\n', '    */\n', '    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\n', '        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\n', '    }\n', '\n', '    /**\n', '    * @dev Notifies the controller about an approval allowing the controller to react if desired\n', '    *      Initialization check is implicitly provided by `onlyToken()`.\n', '    * @return False if the controller does not authorize the approval\n', '    */\n', '    function onApprove(address, address, uint) external onlyToken returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Called when ether is sent to the MiniMe Token contract\n', '    *      Initialization check is implicitly provided by `onlyToken()`.\n', '    * @return True if the ether is accepted, false for it to throw\n', '    */\n', '    function proxyPayment(address) external payable onlyToken returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    // Forwarding fns\n', '\n', '    function isForwarder() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Execute desired action as a token holder\n', '    * @dev IForwarder interface conformance. Forwards any token holder action.\n', '    * @param _evmScript Script being executed\n', '    */\n', '    function forward(bytes _evmScript) public {\n', '        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n', '        bytes memory input = new bytes(0); // TODO: Consider input for this\n', '\n', '        // Add the managed token to the blacklist to disallow a token holder from executing actions\n', "        // on the token controller's (this contract) behalf\n", '        address[] memory blacklist = new address[](1);\n', '        blacklist[0] = address(token);\n', '\n', '        runScript(_evmScript, input, blacklist);\n', '    }\n', '\n', '    function canForward(address _sender, bytes) public view returns (bool) {\n', '        return hasInitialized() && token.balanceOf(_sender) > 0;\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    function getVesting(\n', '        address _recipient,\n', '        uint256 _vestingId\n', '    )\n', '        public\n', '        view\n', '        vestingExists(_recipient, _vestingId)\n', '        returns (\n', '            uint256 amount,\n', '            uint64 start,\n', '            uint64 cliff,\n', '            uint64 vesting,\n', '            bool revokable\n', '        )\n', '    {\n', '        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\n', '        amount = tokenVesting.amount;\n', '        start = tokenVesting.start;\n', '        cliff = tokenVesting.cliff;\n', '        vesting = tokenVesting.vesting;\n', '        revokable = tokenVesting.revokable;\n', '    }\n', '\n', '    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\n', '        return _transferableBalance(_holder, getTimestamp());\n', '    }\n', '\n', '    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\n', '        return _transferableBalance(_holder, _time);\n', '    }\n', '\n', '    /**\n', '    * @dev Disable recovery escape hatch for own token,\n', '    *      as the it has the concept of issuing tokens without assigning them\n', '    */\n', '    function allowRecoverability(address _token) public view returns (bool) {\n', '        return _token != address(token);\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    function _assign(address _receiver, uint256 _amount) internal {\n', '        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n', '        // Must use transferFrom() as transfer() does not give the token controller full control\n', '        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\n', '    }\n', '\n', '    function _mint(address _receiver, uint256 _amount) internal {\n', '        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n', '        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\n', '    }\n', '\n', '    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\n', "        // Max balance doesn't apply to the token manager itself\n", '        if (_receiver == address(this)) {\n', '            return true;\n', '        }\n', '        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate amount of non-vested tokens at a specifc time\n', '    * @param tokens The total amount of tokens vested\n', '    * @param time The time at which to check\n', '    * @param start The date vesting started\n', '    * @param cliff The cliff period\n', '    * @param vested The fully vested date\n', '    * @return The amount of non-vested tokens of a specific grant\n', '    *  transferableTokens\n', '    *   |                         _/--------   vestedTokens rect\n', '    *   |                       _/\n', '    *   |                     _/\n', '    *   |                   _/\n', '    *   |                 _/\n', '    *   |                /\n', '    *   |              .|\n', '    *   |            .  |\n', '    *   |          .    |\n', '    *   |        .      |\n', '    *   |      .        |\n', '    *   |    .          |\n', '    *   +===+===========+---------+----------> time\n', '    *      Start       Cliff    Vested\n', '    */\n', '    function _calculateNonVestedTokens(\n', '        uint256 tokens,\n', '        uint256 time,\n', '        uint256 start,\n', '        uint256 cliff,\n', '        uint256 vested\n', '    )\n', '        private\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // Shortcuts for before cliff and after vested cases.\n', '        if (time >= vested) {\n', '            return 0;\n', '        }\n', '        if (time < cliff) {\n', '            return tokens;\n', '        }\n', '\n', '        // Interpolate all vested tokens.\n', '        // As before cliff the shortcut returns 0, we can just calculate a value\n', "        // in the vesting rect (as shown in above's figure)\n", '\n', '        // vestedTokens = tokens * (time - start) / (vested - start)\n', '        // In assignVesting we enforce start <= cliff <= vested\n', '        // Here we shortcut time >= vested and time < cliff,\n', '        // so no division by 0 is possible\n', '        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\n', '\n', '        // tokens - vestedTokens\n', '        return tokens.sub(vestedTokens);\n', '    }\n', '\n', '    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\n', '        uint256 transferable = token.balanceOf(_holder);\n', '\n', '        // This check is not strictly necessary for the current version of this contract, as\n', '        // Token Managers now cannot assign vestings to themselves.\n', '        // However, this was a possibility in the past, so in case there were vestings assigned to\n', '        // themselves, this will still return the correct value (entire balance, as the Token\n', '        // Manager does not have a spending limit on its own balance).\n', '        if (_holder != address(this)) {\n', '            uint256 vestingsCount = vestingsLengths[_holder];\n', '            for (uint256 i = 0; i < vestingsCount; i++) {\n', '                TokenVesting storage v = vestings[_holder][i];\n', '                uint256 nonTransferable = _calculateNonVestedTokens(\n', '                    v.amount,\n', '                    _time,\n', '                    v.start,\n', '                    v.cliff,\n', '                    v.vesting\n', '                );\n', '                transferable = transferable.sub(nonTransferable);\n', '            }\n', '        }\n', '\n', '        return transferable;\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-survey/contracts/Survey.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Survey is AragonApp {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '\n', '    bytes32 public constant CREATE_SURVEYS_ROLE = keccak256("CREATE_SURVEYS_ROLE");\n', '    bytes32 public constant MODIFY_PARTICIPATION_ROLE = keccak256("MODIFY_PARTICIPATION_ROLE");\n', '\n', '    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n', '    uint256 public constant ABSTAIN_VOTE = 0;\n', '\n', '    string private constant ERROR_MIN_PARTICIPATION = "SURVEY_MIN_PARTICIPATION";\n', '    string private constant ERROR_NO_SURVEY = "SURVEY_NO_SURVEY";\n', '    string private constant ERROR_NO_VOTING_POWER = "SURVEY_NO_VOTING_POWER";\n', '    string private constant ERROR_CAN_NOT_VOTE = "SURVEY_CAN_NOT_VOTE";\n', '    string private constant ERROR_VOTE_WRONG_INPUT = "SURVEY_VOTE_WRONG_INPUT";\n', '    string private constant ERROR_VOTE_WRONG_OPTION = "SURVEY_VOTE_WRONG_OPTION";\n', '    string private constant ERROR_NO_STAKE = "SURVEY_NO_STAKE";\n', '    string private constant ERROR_OPTIONS_NOT_ORDERED = "SURVEY_OPTIONS_NOT_ORDERED";\n', '    string private constant ERROR_NO_OPTION = "SURVEY_NO_OPTION";\n', '\n', '    struct OptionCast {\n', '        uint256 optionId;\n', '        uint256 stake;\n', '    }\n', '\n', '    /* Allows for multiple option votes.\n', "     * Index 0 is always used for the ABSTAIN_VOTE option, that's calculated automatically by the\n", '     * contract.\n', '     */\n', '    struct MultiOptionVote {\n', '        uint256 optionsCastedLength;\n', '        // `castedVotes` simulates an array\n', '        // Each OptionCast in `castedVotes` must be ordered by ascending option IDs\n', '        mapping (uint256 => OptionCast) castedVotes;\n', '    }\n', '\n', '    struct SurveyStruct {\n', '        uint64 startDate;\n', '        uint64 snapshotBlock;\n', '        uint64 minParticipationPct;\n', '        uint256 options;\n', '        uint256 votingPower;                    // total tokens that can cast a vote\n', '        uint256 participation;                  // tokens that casted a vote\n', '\n', '        // Note that option IDs are from 1 to `options`, due to ABSTAIN_VOTE taking 0\n', '        mapping (uint256 => uint256) optionPower;       // option ID -> voting power for option\n', '        mapping (address => MultiOptionVote) votes;     // voter -> options voted, with its stakes\n', '    }\n', '\n', '    MiniMeToken public token;\n', '    uint64 public minParticipationPct;\n', '    uint64 public surveyTime;\n', '\n', '    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\n', '    mapping (uint256 => SurveyStruct) internal surveys;\n', '    uint256 public surveysLength;\n', '\n', '    event StartSurvey(uint256 indexed surveyId, address indexed creator, string metadata);\n', '    event CastVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 stake, uint256 optionPower);\n', '    event ResetVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 previousStake, uint256 optionPower);\n', '    event ChangeMinParticipation(uint64 minParticipationPct);\n', '\n', '    modifier acceptableMinParticipationPct(uint64 _minParticipationPct) {\n', '        require(_minParticipationPct > 0 && _minParticipationPct <= PCT_BASE, ERROR_MIN_PARTICIPATION);\n', '        _;\n', '    }\n', '\n', '    modifier surveyExists(uint256 _surveyId) {\n', '        require(_surveyId < surveysLength, ERROR_NO_SURVEY);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize Survey app with `_token.symbol(): string` for governance, minimum acceptance participation of `@formatPct(_minParticipationPct)`%, and a voting duration of `@transformTime(_surveyTime)`\n', '    * @param _token MiniMeToken address that will be used as governance token\n', '    * @param _minParticipationPct Percentage of total voting power that must participate in a survey for it to be taken into account (expressed as a 10^18 percentage, (eg 10^16 = 1%, 10^18 = 100%)\n', '    * @param _surveyTime Seconds that a survey will be open for token holders to vote\n', '    */\n', '    function initialize(\n', '        MiniMeToken _token,\n', '        uint64 _minParticipationPct,\n', '        uint64 _surveyTime\n', '    )\n', '        external\n', '        onlyInit\n', '        acceptableMinParticipationPct(_minParticipationPct)\n', '    {\n', '        initialized();\n', '\n', '        token = _token;\n', '        minParticipationPct = _minParticipationPct;\n', '        surveyTime = _surveyTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Change minimum acceptance participation to `@formatPct(_minParticipationPct)`%\n', '    * @param _minParticipationPct New acceptance participation\n', '    */\n', '    function changeMinAcceptParticipationPct(uint64 _minParticipationPct)\n', '        external\n', '        authP(MODIFY_PARTICIPATION_ROLE, arr(uint256(_minParticipationPct), uint256(minParticipationPct)))\n', '        acceptableMinParticipationPct(_minParticipationPct)\n', '    {\n', '        minParticipationPct = _minParticipationPct;\n', '\n', '        emit ChangeMinParticipation(_minParticipationPct);\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new non-binding survey about "`_metadata`"\n', '    * @param _metadata Survey metadata\n', '    * @param _options Number of options voters can decide between\n', '    * @return surveyId id for newly created survey\n', '    */\n', '    function newSurvey(string _metadata, uint256 _options) external auth(CREATE_SURVEYS_ROLE) returns (uint256 surveyId) {\n', '        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n', '        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\n', '        require(votingPower > 0, ERROR_NO_VOTING_POWER);\n', '\n', '        surveyId = surveysLength++;\n', '\n', '        SurveyStruct storage survey = surveys[surveyId];\n', '        survey.startDate = getTimestamp64();\n', '        survey.snapshotBlock = snapshotBlock; // avoid double voting in this very block\n', '        survey.minParticipationPct = minParticipationPct;\n', '        survey.options = _options;\n', '        survey.votingPower = votingPower;\n', '\n', '        emit StartSurvey(surveyId, msg.sender, _metadata);\n', '    }\n', '\n', '    /**\n', '    * @notice Reset previously casted vote in survey #`_surveyId`, if any.\n', '    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n', '    *      be created via `newSurvey(),` which requires initialization\n', '    * @param _surveyId Id for survey\n', '    */\n', '    function resetVote(uint256 _surveyId) external surveyExists(_surveyId) {\n', '        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n', '\n', '        _resetVote(_surveyId);\n', '    }\n', '\n', '    /**\n', '    * @notice Vote for multiple options in survey #`_surveyId`.\n', '    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n', '    *      be created via `newSurvey(),` which requires initialization\n', '    * @param _surveyId Id for survey\n', '    * @param _optionIds Array with indexes of supported options\n', '    * @param _stakes Number of tokens assigned to each option\n', '    */\n', '    function voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes)\n', '        external\n', '        surveyExists(_surveyId)\n', '    {\n', '        require(_optionIds.length == _stakes.length && _optionIds.length > 0, ERROR_VOTE_WRONG_INPUT);\n', '        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n', '\n', '        _voteOptions(_surveyId, _optionIds, _stakes);\n', '    }\n', '\n', '    /**\n', '    * @notice Vote option #`_optionId` in survey #`_surveyId`.\n', '    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n', '    *      be created via `newSurvey(),` which requires initialization\n', '    * @dev It will use the whole balance.\n', '    * @param _surveyId Id for survey\n', '    * @param _optionId Index of supported option\n', '    */\n', '    function voteOption(uint256 _surveyId, uint256 _optionId) external surveyExists(_surveyId) {\n', '        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n', '\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '        // This could re-enter, though we can asume the governance token is not maliciuous\n', '        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n', '        uint256[] memory options = new uint256[](1);\n', '        uint256[] memory stakes = new uint256[](1);\n', '        options[0] = _optionId;\n', '        stakes[0] = voterStake;\n', '\n', '        _voteOptions(_surveyId, options, stakes);\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    function canVote(uint256 _surveyId, address _voter) public view surveyExists(_surveyId) returns (bool) {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '\n', '        return _isSurveyOpen(survey) && token.balanceOfAt(_voter, survey.snapshotBlock) > 0;\n', '    }\n', '\n', '    function getSurvey(uint256 _surveyId)\n', '        public\n', '        view\n', '        surveyExists(_surveyId)\n', '        returns (\n', '            bool open,\n', '            uint64 startDate,\n', '            uint64 snapshotBlock,\n', '            uint64 minParticipation,\n', '            uint256 votingPower,\n', '            uint256 participation,\n', '            uint256 options\n', '        )\n', '    {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '\n', '        open = _isSurveyOpen(survey);\n', '        startDate = survey.startDate;\n', '        snapshotBlock = survey.snapshotBlock;\n', '        minParticipation = survey.minParticipationPct;\n', '        votingPower = survey.votingPower;\n', '        participation = survey.participation;\n', '        options = survey.options;\n', '    }\n', '\n', '    /**\n', '    * @dev This is not meant to be used on-chain\n', '    */\n', '    /* solium-disable-next-line function-order */\n', '    function getVoterState(uint256 _surveyId, address _voter)\n', '        external\n', '        view\n', '        surveyExists(_surveyId)\n', '        returns (uint256[] options, uint256[] stakes)\n', '    {\n', '        MultiOptionVote storage vote = surveys[_surveyId].votes[_voter];\n', '\n', '        if (vote.optionsCastedLength == 0) {\n', '            return (new uint256[](0), new uint256[](0));\n', '        }\n', '\n', '        options = new uint256[](vote.optionsCastedLength + 1);\n', '        stakes = new uint256[](vote.optionsCastedLength + 1);\n', '        for (uint256 i = 0; i <= vote.optionsCastedLength; i++) {\n', '            options[i] = vote.castedVotes[i].optionId;\n', '            stakes[i] = vote.castedVotes[i].stake;\n', '        }\n', '    }\n', '\n', '    function getOptionPower(uint256 _surveyId, uint256 _optionId) public view surveyExists(_surveyId) returns (uint256) {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '        require(_optionId <= survey.options, ERROR_NO_OPTION);\n', '\n', '        return survey.optionPower[_optionId];\n', '    }\n', '\n', '    function isParticipationAchieved(uint256 _surveyId) public view surveyExists(_surveyId) returns (bool) {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '        // votingPower is always > 0\n', '        uint256 participationPct = survey.participation.mul(PCT_BASE) / survey.votingPower;\n', '        return participationPct >= survey.minParticipationPct;\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    /*\n', '    * @dev Assumes the survey exists and that msg.sender can vote\n', '    */\n', '    function _resetVote(uint256 _surveyId) internal {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '        MultiOptionVote storage previousVote = survey.votes[msg.sender];\n', '        if (previousVote.optionsCastedLength > 0) {\n', '            // Voter removes their vote (index 0 is the abstain vote)\n', '            for (uint256 i = 1; i <= previousVote.optionsCastedLength; i++) {\n', '                OptionCast storage previousOptionCast = previousVote.castedVotes[i];\n', '                uint256 previousOptionPower = survey.optionPower[previousOptionCast.optionId];\n', '                uint256 currentOptionPower = previousOptionPower.sub(previousOptionCast.stake);\n', '                survey.optionPower[previousOptionCast.optionId] = currentOptionPower;\n', '\n', '                emit ResetVote(_surveyId, msg.sender, previousOptionCast.optionId, previousOptionCast.stake, currentOptionPower);\n', '            }\n', '\n', '            // Compute previously casted votes (i.e. substract non-used tokens from stake)\n', '            uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n', '            uint256 previousParticipation = voterStake.sub(previousVote.castedVotes[0].stake);\n', '            // And remove it from total participation\n', '            survey.participation = survey.participation.sub(previousParticipation);\n', '\n', '            // Reset previously voted options\n', '            delete survey.votes[msg.sender];\n', '        }\n', '    }\n', '\n', '    /*\n', '    * @dev Assumes the survey exists and that msg.sender can vote\n', '    */\n', '    function _voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes) internal {\n', '        SurveyStruct storage survey = surveys[_surveyId];\n', '        MultiOptionVote storage senderVotes = survey.votes[msg.sender];\n', '\n', '        // Revert previous votes, if any\n', '        _resetVote(_surveyId);\n', '\n', '        uint256 totalVoted = 0;\n', '        // Reserve first index for ABSTAIN_VOTE\n', '        senderVotes.castedVotes[0] = OptionCast({ optionId: ABSTAIN_VOTE, stake: 0 });\n', '        for (uint256 optionIndex = 1; optionIndex <= _optionIds.length; optionIndex++) {\n', "            // Voters don't specify that they're abstaining,\n", "            // but we still keep track of this by reserving the first index of a survey's votes.\n", '            // We subtract 1 from the indexes of the arrays passed in by the voter to account for this.\n', '            uint256 optionId = _optionIds[optionIndex - 1];\n', '            uint256 stake = _stakes[optionIndex - 1];\n', '\n', '            require(optionId != ABSTAIN_VOTE && optionId <= survey.options, ERROR_VOTE_WRONG_OPTION);\n', '            require(stake > 0, ERROR_NO_STAKE);\n', "            // Let's avoid repeating an option by making sure that ascending order is preserved in\n", '            // the options array by checking that the current optionId is larger than the last one\n', '            // we added\n', '            require(senderVotes.castedVotes[optionIndex - 1].optionId < optionId, ERROR_OPTIONS_NOT_ORDERED);\n', '\n', '            // Register voter amount\n', '            senderVotes.castedVotes[optionIndex] = OptionCast({ optionId: optionId, stake: stake });\n', '\n', '            // Add to total option support\n', '            survey.optionPower[optionId] = survey.optionPower[optionId].add(stake);\n', '\n', '            // Keep track of stake used so far\n', '            totalVoted = totalVoted.add(stake);\n', '\n', '            emit CastVote(_surveyId, msg.sender, optionId, stake, survey.optionPower[optionId]);\n', '        }\n', '\n', '        // Compute and register non used tokens\n', '        // Implictly we are doing require(totalVoted <= voterStake) too\n', '        // (as stated before, index 0 is for ABSTAIN_VOTE option)\n', '        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n', '        senderVotes.castedVotes[0].stake = voterStake.sub(totalVoted);\n', '\n', '        // Register number of options voted\n', '        senderVotes.optionsCastedLength = _optionIds.length;\n', '\n', '        // Add voter tokens to participation\n', '        survey.participation = survey.participation.add(totalVoted);\n', '        assert(survey.participation <= survey.votingPower);\n', '    }\n', '\n', '    function _isSurveyOpen(SurveyStruct storage _survey) internal view returns (bool) {\n', '        return getTimestamp64() < _survey.startDate.add(surveyTime);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/IACLOracle.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IACLOracle {\n', '    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/ACL.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/* solium-disable function-order */\n', '// Allow public initialize() to be first\n', 'contract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256("CREATE_PERMISSIONS_ROLE");\n', '    */\n', '    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\n', '\n', '    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\n', '\n', '    struct Param {\n', '        uint8 id;\n', '        uint8 op;\n', '        uint240 value; // even though value is an uint240 it can store addresses\n', "        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\n", '        // op and id take less than 1 byte each so it can be kept in 1 sstore\n', '    }\n', '\n', '    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\n', '    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\n', '    // 202 is unused\n', '    uint8 internal constant ORACLE_PARAM_ID       = 203;\n', '    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\n', '    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\n', '    // TODO: Add execution times param type?\n', '\n', '    /* Hardcoded constant to save gas\n', '    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\n', '    */\n', '    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n', '    bytes32 public constant NO_PERMISSION = bytes32(0);\n', '    address public constant ANY_ENTITY = address(-1);\n', '    address public constant BURN_ENTITY = address(1); // address(0) is already used as "no permission manager"\n', '\n', '    uint256 internal constant ORACLE_CHECK_GAS = 30000;\n', '\n', '    string private constant ERROR_AUTH_INIT_KERNEL = "ACL_AUTH_INIT_KERNEL";\n', '    string private constant ERROR_AUTH_NO_MANAGER = "ACL_AUTH_NO_MANAGER";\n', '    string private constant ERROR_EXISTENT_MANAGER = "ACL_EXISTENT_MANAGER";\n', '\n', '    // Whether someone has a permission\n', '    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\n', '    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\n', '\n', '    // Who is the manager of a permission\n', '    mapping (bytes32 => address) internal permissionManager;\n', '\n', '    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\n', '    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\n', '    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\n', '\n', '    modifier onlyPermissionManager(address _app, bytes32 _role) {\n', '        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\n', '        _;\n', '    }\n', '\n', '    modifier noPermissionManager(address _app, bytes32 _role) {\n', '        // only allow permission creation (or re-creation) when there is no manager\n', '        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n', '    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\n', '    * @param _permissionsCreator Entity that will be given permission over createPermission\n', '    */\n', '    function initialize(address _permissionsCreator) public onlyInit {\n', '        initialized();\n', '        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\n', '\n', '        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\n', '    }\n', '\n', '    /**\n', "    * @dev Creates a permission that wasn't previously set and managed.\n", '    *      If a created permission is removed it is possible to reset it with createPermission.\n', "    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\n", '    *      have a manager.\n', '    *      In terms of the ACL being initialized, this function implicitly protects all the other\n', '    *      state-changing external functions, as they all require the sender to be a manager.\n', "    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\n", '    * @param _entity Address of the whitelisted entity that will be able to perform the role\n', '    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n', '    * @param _role Identifier for the group of actions in app given access to perform\n', '    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\n', '    */\n', '    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\n', '        external\n', '        auth(CREATE_PERMISSIONS_ROLE)\n', '        noPermissionManager(_app, _role)\n', '    {\n', '        _createPermission(_entity, _app, _role, _manager);\n', '    }\n', '\n', '    /**\n', '    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\n', '    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n', '    * @param _entity Address of the whitelisted entity that will be able to perform the role\n', '    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n', '    * @param _role Identifier for the group of actions in app given access to perform\n', '    */\n', '    function grantPermission(address _entity, address _app, bytes32 _role)\n', '        external\n', '    {\n', '        grantPermissionP(_entity, _app, _role, new uint256[](0));\n', '    }\n', '\n', '    /**\n', '    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\n', '    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n', '    * @param _entity Address of the whitelisted entity that will be able to perform the role\n', '    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n', '    * @param _role Identifier for the group of actions in app given access to perform\n', '    * @param _params Permission parameters\n', '    */\n', '    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n', '        public\n', '        onlyPermissionManager(_app, _role)\n', '    {\n', '        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\n', '        _setPermission(_entity, _app, _role, paramsHash);\n', '    }\n', '\n', '    /**\n', '    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\n', '    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\n', '    * @param _entity Address of the whitelisted entity to revoke access from\n', '    * @param _app Address of the app in which the role will be revoked\n', '    * @param _role Identifier for the group of actions in app being revoked\n', '    */\n', '    function revokePermission(address _entity, address _app, bytes32 _role)\n', '        external\n', '        onlyPermissionManager(_app, _role)\n', '    {\n', '        _setPermission(_entity, _app, _role, NO_PERMISSION);\n', '    }\n', '\n', '    /**\n', '    * @notice Set `_newManager` as the manager of `_role` in `_app`\n', '    * @param _newManager Address for the new manager\n', '    * @param _app Address of the app in which the permission management is being transferred\n', '    * @param _role Identifier for the group of actions being transferred\n', '    */\n', '    function setPermissionManager(address _newManager, address _app, bytes32 _role)\n', '        external\n', '        onlyPermissionManager(_app, _role)\n', '    {\n', '        _setPermissionManager(_newManager, _app, _role);\n', '    }\n', '\n', '    /**\n', '    * @notice Remove the manager of `_role` in `_app`\n', '    * @param _app Address of the app in which the permission is being unmanaged\n', '    * @param _role Identifier for the group of actions being unmanaged\n', '    */\n', '    function removePermissionManager(address _app, bytes32 _role)\n', '        external\n', '        onlyPermissionManager(_app, _role)\n', '    {\n', '        _setPermissionManager(address(0), _app, _role);\n', '    }\n', '\n', '    /**\n', '    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n', '    * @param _app Address of the app in which the permission is being burned\n', '    * @param _role Identifier for the group of actions being burned\n', '    */\n', '    function createBurnedPermission(address _app, bytes32 _role)\n', '        external\n', '        auth(CREATE_PERMISSIONS_ROLE)\n', '        noPermissionManager(_app, _role)\n', '    {\n', '        _setPermissionManager(BURN_ENTITY, _app, _role);\n', '    }\n', '\n', '    /**\n', '    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n', '    * @param _app Address of the app in which the permission is being burned\n', '    * @param _role Identifier for the group of actions being burned\n', '    */\n', '    function burnPermissionManager(address _app, bytes32 _role)\n', '        external\n', '        onlyPermissionManager(_app, _role)\n', '    {\n', '        _setPermissionManager(BURN_ENTITY, _app, _role);\n', '    }\n', '\n', '    /**\n', '     * @notice Get parameters for permission array length\n', '     * @param _entity Address of the whitelisted entity that will be able to perform the role\n', '     * @param _app Address of the app\n', '     * @param _role Identifier for a group of actions in app\n', '     * @return Length of the array\n', '     */\n', '    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\n', '        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\n', '    }\n', '\n', '    /**\n', '    * @notice Get parameter for permission\n', '    * @param _entity Address of the whitelisted entity that will be able to perform the role\n', '    * @param _app Address of the app\n', '    * @param _role Identifier for a group of actions in app\n', '    * @param _index Index of parameter in the array\n', '    * @return Parameter (id, op, value)\n', '    */\n', '    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\n', '        external\n', '        view\n', '        returns (uint8, uint8, uint240)\n', '    {\n', '        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\n', '        return (param.id, param.op, param.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Get manager for permission\n', '    * @param _app Address of the app\n', '    * @param _role Identifier for a group of actions in app\n', '    * @return address of the manager for the permission\n', '    */\n', '    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\n', '        return permissionManager[roleHash(_app, _role)];\n', '    }\n', '\n', '    /**\n', '    * @dev Function called by apps to check ACL on kernel or to check permission statu\n', '    * @param _who Sender of the original call\n', '    * @param _where Address of the app\n', '    * @param _where Identifier for a group of actions in app\n', '    * @param _how Permission parameters\n', '    * @return boolean indicating whether the ACL allows the role or not\n', '    */\n', '    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n', '        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\n', '    }\n', '\n', '    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\n', '        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\n', '        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n', '            return true;\n', '        }\n', '\n', '        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\n', '        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\n', '        uint256[] memory empty = new uint256[](0);\n', '        return hasPermission(_who, _where, _what, empty);\n', '    }\n', '\n', '    function evalParams(\n', '        bytes32 _paramsHash,\n', '        address _who,\n', '        address _where,\n', '        bytes32 _what,\n', '        uint256[] _how\n', '    ) public view returns (bool)\n', '    {\n', '        if (_paramsHash == EMPTY_PARAM_HASH) {\n', '            return true;\n', '        }\n', '\n', '        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal createPermission for access inside the kernel (on instantiation)\n', '    */\n', '    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\n', '        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\n', '        _setPermissionManager(_manager, _app, _role);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function called to actually save the permission\n', '    */\n', '    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\n', '        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\n', '        bool entityHasPermission = _paramsHash != NO_PERMISSION;\n', '        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\n', '\n', '        emit SetPermission(_entity, _app, _role, entityHasPermission);\n', '        if (permissionHasParams) {\n', '            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\n', '        }\n', '    }\n', '\n', '    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\n', '        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\n', '        Param[] storage params = permissionParams[paramHash];\n', '\n', '        if (params.length == 0) { // params not saved before\n', '            for (uint256 i = 0; i < _encodedParams.length; i++) {\n', '                uint256 encodedParam = _encodedParams[i];\n', '                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\n', '                params.push(param);\n', '            }\n', '        }\n', '\n', '        return paramHash;\n', '    }\n', '\n', '    function _evalParam(\n', '        bytes32 _paramsHash,\n', '        uint32 _paramId,\n', '        address _who,\n', '        address _where,\n', '        bytes32 _what,\n', '        uint256[] _how\n', '    ) internal view returns (bool)\n', '    {\n', '        if (_paramId >= permissionParams[_paramsHash].length) {\n', '            return false; // out of bounds\n', '        }\n', '\n', '        Param memory param = permissionParams[_paramsHash][_paramId];\n', '\n', '        if (param.id == LOGIC_OP_PARAM_ID) {\n', '            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\n', '        }\n', '\n', '        uint256 value;\n', '        uint256 comparedTo = uint256(param.value);\n', '\n', '        // get value\n', '        if (param.id == ORACLE_PARAM_ID) {\n', '            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\n', '            comparedTo = 1;\n', '        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\n', '            value = getBlockNumber();\n', '        } else if (param.id == TIMESTAMP_PARAM_ID) {\n', '            value = getTimestamp();\n', '        } else if (param.id == PARAM_VALUE_PARAM_ID) {\n', '            value = uint256(param.value);\n', '        } else {\n', '            if (param.id >= _how.length) {\n', '                return false;\n', '            }\n', '            value = uint256(uint240(_how[param.id])); // force lost precision\n', '        }\n', '\n', '        if (Op(param.op) == Op.RET) {\n', '            return uint256(value) > 0;\n', '        }\n', '\n', '        return compare(value, Op(param.op), comparedTo);\n', '    }\n', '\n', '    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (Op(_param.op) == Op.IF_ELSE) {\n', '            uint32 conditionParam;\n', '            uint32 successParam;\n', '            uint32 failureParam;\n', '\n', '            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\n', '            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\n', '\n', '            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\n', '        }\n', '\n', '        uint32 param1;\n', '        uint32 param2;\n', '\n', '        (param1, param2,) = decodeParamsList(uint256(_param.value));\n', '        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\n', '\n', '        if (Op(_param.op) == Op.NOT) {\n', '            return !r1;\n', '        }\n', '\n', '        if (r1 && Op(_param.op) == Op.OR) {\n', '            return true;\n', '        }\n', '\n', '        if (!r1 && Op(_param.op) == Op.AND) {\n', '            return false;\n', '        }\n', '\n', '        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\n', '\n', '        if (Op(_param.op) == Op.XOR) {\n', '            return r1 != r2;\n', '        }\n', '\n', '        return r2; // both or and and depend on result of r2 after checks\n', '    }\n', '\n', '    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\n', '        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\n', '        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\n', '        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\n', '        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\n', '        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\n', '        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\n', '        return false;\n', '    }\n', '\n', '    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n', '        bytes4 sig = _oracleAddr.canPerform.selector;\n', '\n', '        // a raw call is required so we can return false if the call reverts, rather than reverting\n', '        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\n', '        uint256 oracleCheckGas = ORACLE_CHECK_GAS;\n', '\n', '        bool ok;\n', '        assembly {\n', '            ok := staticcall(oracleCheckGas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\n', '        }\n', '\n', '        if (!ok) {\n', '            return false;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := returndatasize }\n', '        if (size != 32) {\n', '            return false;\n', '        }\n', '\n', '        bool result;\n', '        assembly {\n', '            let ptr := mload(0x40)       // get next free memory ptr\n', '            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n', '            result := mload(ptr)         // read data at ptr and set it to result\n', '            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that sets management\n', '    */\n', '    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\n', '        permissionManager[roleHash(_app, _role)] = _newManager;\n', '        emit ChangePermissionManager(_app, _role, _newManager);\n', '    }\n', '\n', '    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked("ROLE", _where, _what));\n', '    }\n', '\n', '    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked("PERMISSION", _who, _where, _what));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apm/Repo.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/* solium-disable function-order */\n', '// Allow public initialize() to be first\n', 'contract Repo is AragonApp {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant CREATE_VERSION_ROLE = keccak256("CREATE_VERSION_ROLE");\n', '    */\n', '    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\n', '\n', '    string private constant ERROR_INVALID_BUMP = "REPO_INVALID_BUMP";\n', '    string private constant ERROR_INVALID_VERSION = "REPO_INVALID_VERSION";\n', '    string private constant ERROR_INEXISTENT_VERSION = "REPO_INEXISTENT_VERSION";\n', '\n', '    struct Version {\n', '        uint16[3] semanticVersion;\n', '        address contractAddress;\n', '        bytes contentURI;\n', '    }\n', '\n', '    uint256 internal versionsNextIndex;\n', '    mapping (uint256 => Version) internal versions;\n', '    mapping (bytes32 => uint256) internal versionIdForSemantic;\n', '    mapping (address => uint256) internal latestVersionIdForContract;\n', '\n', '    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\n', '\n', '    /**\n', '    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n', '    * @notice Initialize this Repo\n', '    */\n', '    function initialize() public onlyInit {\n', '        initialized();\n', '        versionsNextIndex = 1;\n', '    }\n', '\n', '    /**\n', '    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\n', '    * @param _newSemanticVersion Semantic version for new repo version\n', "    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\n", "    * @param _contentURI External URI for fetching new version's content\n", '    */\n', '    function newVersion(\n', '        uint16[3] _newSemanticVersion,\n', '        address _contractAddress,\n', '        bytes _contentURI\n', '    ) public auth(CREATE_VERSION_ROLE)\n', '    {\n', '        address contractAddress = _contractAddress;\n', '        uint256 lastVersionIndex = versionsNextIndex - 1;\n', '\n', '        uint16[3] memory lastSematicVersion;\n', '\n', '        if (lastVersionIndex > 0) {\n', '            Version storage lastVersion = versions[lastVersionIndex];\n', '            lastSematicVersion = lastVersion.semanticVersion;\n', '\n', '            if (contractAddress == address(0)) {\n', '                contractAddress = lastVersion.contractAddress;\n', '            }\n', '            // Only allows smart contract change on major version bumps\n', '            require(\n', '                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\n', '                ERROR_INVALID_VERSION\n', '            );\n', '        }\n', '\n', '        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\n', '\n', '        uint256 versionId = versionsNextIndex++;\n', '        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\n', '        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\n', '        latestVersionIdForContract[contractAddress] = versionId;\n', '\n', '        emit NewVersion(versionId, _newSemanticVersion);\n', '    }\n', '\n', '    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\n', '        return getByVersionId(versionsNextIndex - 1);\n', '    }\n', '\n', '    function getLatestForContractAddress(address _contractAddress)\n', '        public\n', '        view\n', '        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\n', '    {\n', '        return getByVersionId(latestVersionIdForContract[_contractAddress]);\n', '    }\n', '\n', '    function getBySemanticVersion(uint16[3] _semanticVersion)\n', '        public\n', '        view\n', '        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\n', '    {\n', '        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\n', '    }\n', '\n', '    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\n', '        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\n', '        Version storage version = versions[_versionId];\n', '        return (version.semanticVersion, version.contractAddress, version.contentURI);\n', '    }\n', '\n', '    function getVersionsCount() public view returns (uint256) {\n', '        return versionsNextIndex - 1;\n', '    }\n', '\n', '    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\n', '        bool hasBumped;\n', '        uint i = 0;\n', '        while (i < 3) {\n', '            if (hasBumped) {\n', '                if (_newVersion[i] != 0) {\n', '                    return false;\n', '                }\n', '            } else if (_newVersion[i] != _oldVersion[i]) {\n', '                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\n', '                    return false;\n', '                }\n', '                hasBumped = true;\n', '            }\n', '            i++;\n', '        }\n', '        return hasBumped;\n', '    }\n', '\n', '    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apm/APMNamehash.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract APMNamehash {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant APM_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, keccak256(abi.encodePacked("aragonpm"))));\n', '    */\n', '    bytes32 internal constant APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\n', '\n', '    function apmNamehash(string name) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(APM_NODE, keccak256(bytes(name))));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/KernelStorage.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract KernelStorage {\n', '    // namespace => app id => address\n', '    mapping (bytes32 => mapping (bytes32 => address)) public apps;\n', '    bytes32 public recoveryVaultAppId;\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/misc/ERCProxy.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERCProxy {\n', '    uint256 internal constant FORWARDING = 1;\n', '    uint256 internal constant UPGRADEABLE = 2;\n', '\n', '    function proxyType() public pure returns (uint256 proxyTypeId);\n', '    function implementation() public view returns (address codeAddr);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/DelegateProxy.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract DelegateProxy is ERCProxy, IsContract {\n', '    uint256 internal constant FWD_GAS_LIMIT = 10000;\n', '\n', '    /**\n', '    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n', '    * @param _dst Destination address to perform the delegatecall\n', '    * @param _calldata Calldata for the delegatecall\n', '    */\n', '    function delegatedFwd(address _dst, bytes _calldata) internal {\n', '        require(isContract(_dst));\n', '        uint256 fwdGasLimit = FWD_GAS_LIMIT;\n', '\n', '        assembly {\n', '            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n', '            let size := returndatasize\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n', '            // if the call returned error data, forward it\n', '            switch result case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/DepositableDelegateProxy.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\n', '    event ProxyDeposit(address sender, uint256 value);\n', '\n', '    function () external payable {\n', '        // send / transfer\n', '        if (gasleft() < FWD_GAS_LIMIT) {\n', '            require(msg.value > 0 && msg.data.length == 0);\n', '            require(isDepositable());\n', '            emit ProxyDeposit(msg.sender, msg.value);\n', '        } else { // all calls except for send or transfer\n', '            address target = implementation();\n', '            delegatedFwd(target, msg.data);\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppProxyBase.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\n', '    /**\n', '    * @dev Initialize AppProxy\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\n', '        setKernel(_kernel);\n', '        setAppId(_appId);\n', '\n', '        // Implicit check that kernel is actually a Kernel\n', "        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\n", '        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\n', '        // it.\n', '        address appCode = getAppBase(_appId);\n', '\n', '        // If initialize payload is provided, it will be executed\n', '        if (_initializePayload.length > 0) {\n', '            require(isContract(appCode));\n', '            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\n', '            // returns ending execution context and halts contract deployment\n', '            require(appCode.delegatecall(_initializePayload));\n', '        }\n', '    }\n', '\n', '    function getAppBase(bytes32 _appId) internal view returns (address) {\n', '        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppProxyUpgradeable.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', 'contract AppProxyUpgradeable is AppProxyBase {\n', '    /**\n', '    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n', '        AppProxyBase(_kernel, _appId, _initializePayload)\n', '        public // solium-disable-line visibility-first\n', '    {\n', '        // solium-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev ERC897, the address the proxy would delegate calls to\n', '     */\n', '    function implementation() public view returns (address) {\n', '        return getAppBase(appId());\n', '    }\n', '\n', '    /**\n', '     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n', '     */\n', '    function proxyType() public pure returns (uint256 proxyTypeId) {\n', '        return UPGRADEABLE;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppProxyPinned.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract AppProxyPinned is IsContract, AppProxyBase {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.appStorage.pinnedCode")\n', '    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n', '\n', '    /**\n', '    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n', '        AppProxyBase(_kernel, _appId, _initializePayload)\n', '        public // solium-disable-line visibility-first\n', '    {\n', '        setPinnedCode(getAppBase(_appId));\n', '        require(isContract(pinnedCode()));\n', '    }\n', '\n', '    /**\n', '     * @dev ERC897, the address the proxy would delegate calls to\n', '     */\n', '    function implementation() public view returns (address) {\n', '        return pinnedCode();\n', '    }\n', '\n', '    /**\n', '     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n', '     */\n', '    function proxyType() public pure returns (uint256 proxyTypeId) {\n', '        return FORWARDING;\n', '    }\n', '\n', '    function setPinnedCode(address _pinnedCode) internal {\n', '        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\n', '    }\n', '\n', '    function pinnedCode() internal view returns (address) {\n', '        return PINNED_CODE_POSITION.getStorageAddress();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/factory/AppProxyFactory.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract AppProxyFactory {\n', '    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\n', '\n', '    /**\n', '    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\n', "    * @param _kernel App's Kernel reference\n", '    * @param _appId Identifier for app\n', '    * @return AppProxyUpgradeable\n', '    */\n', '    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n', '        return newAppProxy(_kernel, _appId, new bytes(0));\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n', "    * @param _kernel App's Kernel reference\n", '    * @param _appId Identifier for app\n', '    * @return AppProxyUpgradeable\n', '    */\n', '    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n', '        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n', '        emit NewAppProxy(address(proxy), true, _appId);\n', '        return proxy;\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\n', "    * @param _kernel App's Kernel reference\n", '    * @param _appId Identifier for app\n', '    * @return AppProxyPinned\n', '    */\n', '    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n', '        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n', "    * @param _kernel App's Kernel reference\n", '    * @param _appId Identifier for app\n', '    * @param _initializePayload Proxy initialization payload\n', '    * @return AppProxyPinned\n', '    */\n', '    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n', '        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n', '        emit NewAppProxy(address(proxy), false, _appId);\n', '        return proxy;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/Kernel.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// solium-disable-next-line max-len\n', 'contract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant APP_MANAGER_ROLE = keccak256("APP_MANAGER_ROLE");\n', '    */\n', '    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\n', '\n', '    string private constant ERROR_APP_NOT_CONTRACT = "KERNEL_APP_NOT_CONTRACT";\n', '    string private constant ERROR_INVALID_APP_CHANGE = "KERNEL_INVALID_APP_CHANGE";\n', '    string private constant ERROR_AUTH_FAILED = "KERNEL_AUTH_FAILED";\n', '\n', '    /**\n', '    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\n', '    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\n', '    */\n', '    constructor(bool _shouldPetrify) public {\n', '        if (_shouldPetrify) {\n', '            petrify();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n', '    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\n', '    * @param _baseAcl Address of base ACL app\n', '    * @param _permissionsCreator Entity that will be given permission over createPermission\n', '    */\n', '    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\n', '        initialized();\n', '\n', '        // Set ACL base\n', '        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\n', '\n', '        // Create ACL instance and attach it as the default ACL app\n', '        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\n', '        acl.initialize(_permissionsCreator);\n', '        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\n', '\n', '        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new instance of an app linked to this kernel\n', '    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\n', '    * @param _appId Identifier for app\n', "    * @param _appBase Address of the app's base implementation\n", '    * @return AppProxy instance\n', '    */\n', '    function newAppInstance(bytes32 _appId, address _appBase)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n', '        returns (ERCProxy appProxy)\n', '    {\n', '        return newAppInstance(_appId, _appBase, new bytes(0), false);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new instance of an app linked to this kernel and set its base\n', '    *      implementation if it was not already set\n', "    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n", '    * @param _appId Identifier for app\n', "    * @param _appBase Address of the app's base implementation\n", '    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n', '    * @param _setDefault Whether the app proxy app is the default one.\n', '    *        Useful when the Kernel needs to know of an instance of a particular app,\n', '    *        like Vault for escape hatch mechanism.\n', '    * @return AppProxy instance\n', '    */\n', '    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n', '        returns (ERCProxy appProxy)\n', '    {\n', '        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n', '        appProxy = newAppProxy(this, _appId, _initializePayload);\n', '        // By calling setApp directly and not the internal functions, we make sure the params are checked\n', '        // and it will only succeed if sender has permissions to set something to the namespace.\n', '        if (_setDefault) {\n', '            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new pinned instance of an app linked to this kernel\n', '    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\n', '    * @param _appId Identifier for app\n', "    * @param _appBase Address of the app's base implementation\n", '    * @return AppProxy instance\n', '    */\n', '    function newPinnedAppInstance(bytes32 _appId, address _appBase)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n', '        returns (ERCProxy appProxy)\n', '    {\n', '        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new pinned instance of an app linked to this kernel and set\n', '    *      its base implementation if it was not already set\n', "    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n", '    * @param _appId Identifier for app\n', "    * @param _appBase Address of the app's base implementation\n", '    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n', '    * @param _setDefault Whether the app proxy app is the default one.\n', '    *        Useful when the Kernel needs to know of an instance of a particular app,\n', '    *        like Vault for escape hatch mechanism.\n', '    * @return AppProxy instance\n', '    */\n', '    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n', '        returns (ERCProxy appProxy)\n', '    {\n', '        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n', '        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\n', '        // By calling setApp directly and not the internal functions, we make sure the params are checked\n', '        // and it will only succeed if sender has permissions to set something to the namespace.\n', '        if (_setDefault) {\n', '            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Set the resolving address of an app instance or base implementation\n', '    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\n', '    * @param _namespace App namespace to use\n', '    * @param _appId Identifier for app\n', '    * @param _app Address of the app instance or base implementation\n', '    * @return ID of app\n', '    */\n', '    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\n', '    {\n', '        _setApp(_namespace, _appId, _app);\n', '    }\n', '\n', '    /**\n', '    * @dev Set the default vault id for the escape hatch mechanism\n', '    * @param _recoveryVaultAppId Identifier of the recovery vault app\n', '    */\n', '    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\n', '        public\n', '        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\n', '    {\n', '        recoveryVaultAppId = _recoveryVaultAppId;\n', '    }\n', '\n', '    // External access to default app id and namespace constants to mimic default getters for constants\n', '    /* solium-disable function-order, mixedcase */\n', '    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\n', '    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\n', '    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\n', '    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\n', '    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\n', '    /* solium-enable function-order, mixedcase */\n', '\n', '    /**\n', '    * @dev Get the address of an app instance or base implementation\n', '    * @param _namespace App namespace to use\n', '    * @param _appId Identifier for app\n', '    * @return Address of the app\n', '    */\n', '    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\n', '        return apps[_namespace][_appId];\n', '    }\n', '\n', '    /**\n', '    * @dev Get the address of the recovery Vault instance (to recover funds)\n', '    * @return Address of the Vault\n', '    */\n', '    function getRecoveryVault() public view returns (address) {\n', '        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\n', '    }\n', '\n', '    /**\n', '    * @dev Get the installed ACL app\n', '    * @return ACL app\n', '    */\n', '    function acl() public view returns (IACL) {\n', '        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\n', '    }\n', '\n', '    /**\n', '    * @dev Function called by apps to check ACL on kernel or to check permission status\n', '    * @param _who Sender of the original call\n', '    * @param _where Address of the app\n', '    * @param _what Identifier for a group of actions in app\n', '    * @param _how Extra data for ACL auth\n', '    * @return Boolean indicating whether the ACL allows the role or not.\n', "    *         Always returns false if the kernel hasn't been initialized yet.\n", '    */\n', '    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n', '        IACL defaultAcl = acl();\n', "        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\n", '            defaultAcl.hasPermission(_who, _where, _what, _how);\n', '    }\n', '\n', '    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\n', '        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\n', '        apps[_namespace][_appId] = _app;\n', '        emit SetApp(_namespace, _appId, _app);\n', '    }\n', '\n', '    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\n', '        address app = getApp(_namespace, _appId);\n', '        if (app != address(0)) {\n', '            // The only way to set an app is if it passes the isContract check, so no need to check it again\n', '            require(app == _app, ERROR_INVALID_APP_CHANGE);\n', '        } else {\n', '            _setApp(_namespace, _appId, _app);\n', '        }\n', '    }\n', '\n', '    modifier auth(bytes32 _role, uint256[] memory _params) {\n', '        require(\n', '            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\n', '            ERROR_AUTH_FAILED\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/ens/AbstractENS.sol\n', '\n', '// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '\n', 'interface AbstractENS {\n', '    function owner(bytes32 _node) public constant returns (address);\n', '    function resolver(bytes32 _node) public constant returns (address);\n', '    function ttl(bytes32 _node) public constant returns (uint64);\n', '    function setOwner(bytes32 _node, address _owner) public;\n', '    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\n', '    function setResolver(bytes32 _node, address _resolver) public;\n', '    function setTTL(bytes32 _node, uint64 _ttl) public;\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed _node, address _owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed _node, address _resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed _node, uint64 _ttl);\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/ens/ENS.sol\n', '\n', '// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\n', '\n', 'pragma solidity ^0.4.0;\n', '\n', '\n', '/**\n', ' * The ENS registry contract.\n', ' */\n', 'contract ENS is AbstractENS {\n', '    struct Record {\n', '        address owner;\n', '        address resolver;\n', '        uint64 ttl;\n', '    }\n', '\n', '    mapping(bytes32=>Record) records;\n', '\n', '    // Permits modifications only by the owner of the specified node.\n', '    modifier only_owner(bytes32 node) {\n', '        if (records[node].owner != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructs a new ENS registrar.\n', '     */\n', '    function ENS() public {\n', '        records[0].owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Returns the address that owns the specified node.\n', '     */\n', '    function owner(bytes32 node) public constant returns (address) {\n', '        return records[node].owner;\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the resolver for the specified node.\n', '     */\n', '    function resolver(bytes32 node) public constant returns (address) {\n', '        return records[node].resolver;\n', '    }\n', '\n', '    /**\n', '     * Returns the TTL of a node, and any records associated with it.\n', '     */\n', '    function ttl(bytes32 node) public constant returns (uint64) {\n', '        return records[node].ttl;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a node to a new address. May only be called by the current\n', '     * owner of the node.\n', '     * @param node The node to transfer ownership of.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setOwner(bytes32 node, address owner) only_owner(node) public {\n', '        Transfer(node, owner);\n', '        records[node].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\n', '     * called by the owner of the parent node.\n', '     * @param node The parent node.\n', '     * @param label The hash of the label specifying the subnode.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\n', '        var subnode = keccak256(node, label);\n', '        NewOwner(node, label, owner);\n', '        records[subnode].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Sets the resolver address for the specified node.\n', '     * @param node The node to update.\n', '     * @param resolver The address of the resolver.\n', '     */\n', '    function setResolver(bytes32 node, address resolver) only_owner(node) public {\n', '        NewResolver(node, resolver);\n', '        records[node].resolver = resolver;\n', '    }\n', '\n', '    /**\n', '     * Sets the TTL for the specified node.\n', '     * @param node The node to update.\n', '     * @param ttl The TTL in seconds.\n', '     */\n', '    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\n', '        NewTTL(node, ttl);\n', '        records[node].ttl = ttl;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/ens/PublicResolver.sol\n', '\n', '// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\n', '\n', 'pragma solidity ^0.4.0;\n', '\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n', '    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n', '    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n', '\n', '    event AddrChanged(bytes32 indexed node, address a);\n', '    event ContentChanged(bytes32 indexed node, bytes32 hash);\n', '    event NameChanged(bytes32 indexed node, string name);\n', '    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n', '    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n', '    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n', '\n', '    struct PublicKey {\n', '        bytes32 x;\n', '        bytes32 y;\n', '    }\n', '\n', '    struct Record {\n', '        address addr;\n', '        bytes32 content;\n', '        string name;\n', '        PublicKey pubkey;\n', '        mapping(string=>string) text;\n', '        mapping(uint256=>bytes) abis;\n', '    }\n', '\n', '    AbstractENS ens;\n', '    mapping(bytes32=>Record) records;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        if (ens.owner(node) != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(AbstractENS ensAddr) public {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n', '        return interfaceID == ADDR_INTERFACE_ID ||\n', '               interfaceID == CONTENT_INTERFACE_ID ||\n', '               interfaceID == NAME_INTERFACE_ID ||\n', '               interfaceID == ABI_INTERFACE_ID ||\n', '               interfaceID == PUBKEY_INTERFACE_ID ||\n', '               interfaceID == TEXT_INTERFACE_ID ||\n', '               interfaceID == INTERFACE_META_ID;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) public constant returns (address ret) {\n', '        ret = records[node].addr;\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) only_owner(node) public {\n', '        records[node].addr = addr;\n', '        AddrChanged(node, addr);\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) public constant returns (bytes32 ret) {\n', '        ret = records[node].content;\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\n', '        records[node].content = hash;\n', '        ContentChanged(node, hash);\n', '    }\n', '\n', '    /**\n', '     * Returns the name associated with an ENS node, for reverse records.\n', '     * Defined in EIP181.\n', '     * @param node The ENS node to query.\n', '     * @return The associated name.\n', '     */\n', '    function name(bytes32 node) public constant returns (string ret) {\n', '        ret = records[node].name;\n', '    }\n', '\n', '    /**\n', '     * Sets the name associated with an ENS node, for reverse records.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param name The name to set.\n', '     */\n', '    function setName(bytes32 node, string name) only_owner(node) public {\n', '        records[node].name = name;\n', '        NameChanged(node, name);\n', '    }\n', '\n', '    /**\n', '     * Returns the ABI associated with an ENS node.\n', '     * Defined in EIP205.\n', '     * @param node The ENS node to query\n', '     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n', '     * @return contentType The content type of the return value\n', '     * @return data The ABI data\n', '     */\n', '    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\n', '        var record = records[node];\n', '        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n', '            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n', '                data = record.abis[contentType];\n', '                return;\n', '            }\n', '        }\n', '        contentType = 0;\n', '    }\n', '\n', '    /**\n', '     * Sets the ABI associated with an ENS node.\n', '     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n', '     * the empty string.\n', '     * @param node The node to update.\n', '     * @param contentType The content type of the ABI\n', '     * @param data The ABI data.\n', '     */\n', '    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\n', '        // Content types must be powers of 2\n', '        if (((contentType - 1) & contentType) != 0) throw;\n', '\n', '        records[node].abis[contentType] = data;\n', '        ABIChanged(node, contentType);\n', '    }\n', '\n', '    /**\n', '     * Returns the SECP256k1 public key associated with an ENS node.\n', '     * Defined in EIP 619.\n', '     * @param node The ENS node to query\n', '     * @return x, y the X and Y coordinates of the curve point for the public key.\n', '     */\n', '    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\n', '        return (records[node].pubkey.x, records[node].pubkey.y);\n', '    }\n', '\n', '    /**\n', '     * Sets the SECP256k1 public key associated with an ENS node.\n', '     * @param node The ENS node to query\n', '     * @param x the X coordinate of the curve point for the public key.\n', '     * @param y the Y coordinate of the curve point for the public key.\n', '     */\n', '    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\n', '        records[node].pubkey = PublicKey(x, y);\n', '        PubkeyChanged(node, x, y);\n', '    }\n', '\n', '    /**\n', '     * Returns the text data associated with an ENS node and key.\n', '     * @param node The ENS node to query.\n', '     * @param key The text data key to query.\n', '     * @return The associated text data.\n', '     */\n', '    function text(bytes32 node, string key) public constant returns (string ret) {\n', '        ret = records[node].text[key];\n', '    }\n', '\n', '    /**\n', '     * Sets the text data associated with an ENS node and key.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param key The key to set.\n', '     * @param value The text data value to set.\n', '     */\n', '    function setText(bytes32 node, string key, string value) only_owner(node) public {\n', '        records[node].text[key] = value;\n', '        TextChanged(node, key, key);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/KernelProxy.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\n', '    /**\n', '    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\n', '    *      can update the reference, which effectively upgrades the contract\n', '    * @param _kernelImpl Address of the contract used as implementation for kernel\n', '    */\n', '    constructor(IKernel _kernelImpl) public {\n', '        require(isContract(address(_kernelImpl)));\n', '        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\n', '\n', '        // Note that emitting this event is important for verifying that a KernelProxy instance\n', '        // was never upgraded to a malicious Kernel logic contract over its lifespan.\n', '        // This starts the "chain of trust", that can be followed through later SetApp() events\n', '        // emitted during kernel upgrades.\n', '        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\n', '    }\n', '\n', '    /**\n', '     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n', '     */\n', '    function proxyType() public pure returns (uint256 proxyTypeId) {\n', '        return UPGRADEABLE;\n', '    }\n', '\n', '    /**\n', '    * @dev ERC897, the address the proxy would delegate calls to\n', '    */\n', '    function implementation() public view returns (address) {\n', '        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/ScriptHelpers.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library ScriptHelpers {\n', '    function getSpecId(bytes _script) internal pure returns (uint32) {\n', '        return uint32At(_script, 0);\n', '    }\n', '\n', '    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n', '        assembly {\n', '            result := mload(add(_data, add(0x20, _location)))\n', '        }\n', '    }\n', '\n', '    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\n', '        uint256 word = uint256At(_data, _location);\n', '\n', '        assembly {\n', '            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\n', '            0x1000000000000000000000000)\n', '        }\n', '    }\n', '\n', '    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\n', '        uint256 word = uint256At(_data, _location);\n', '\n', '        assembly {\n', '            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\n', '            0x100000000000000000000000000000000000000000000000000000000)\n', '        }\n', '    }\n', '\n', '    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n', '        assembly {\n', '            result := add(_data, add(0x20, _location))\n', '        }\n', '    }\n', '\n', '    function toBytes(bytes4 _sig) internal pure returns (bytes) {\n', '        bytes memory payload = new bytes(4);\n', '        assembly { mstore(add(payload, 0x20), _sig) }\n', '        return payload;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/EVMScriptRegistry.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/* solium-disable function-order */\n', '// Allow public initialize() to be first\n', 'contract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\n', '    using ScriptHelpers for bytes;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256("REGISTRY_ADD_EXECUTOR_ROLE");\n', '    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256("REGISTRY_MANAGER_ROLE");\n', '    */\n', '    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\n', '    // WARN: Manager can censor all votes and the like happening in an org\n', '    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\n', '\n', '    uint256 internal constant SCRIPT_START_LOCATION = 4;\n', '\n', '    string private constant ERROR_INEXISTENT_EXECUTOR = "EVMREG_INEXISTENT_EXECUTOR";\n', '    string private constant ERROR_EXECUTOR_ENABLED = "EVMREG_EXECUTOR_ENABLED";\n', '    string private constant ERROR_EXECUTOR_DISABLED = "EVMREG_EXECUTOR_DISABLED";\n', '    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = "EVMREG_SCRIPT_LENGTH_TOO_SHORT";\n', '\n', '    struct ExecutorEntry {\n', '        IEVMScriptExecutor executor;\n', '        bool enabled;\n', '    }\n', '\n', '    uint256 private executorsNextIndex;\n', '    mapping (uint256 => ExecutorEntry) public executors;\n', '\n', '    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\n', '    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\n', '\n', '    modifier executorExists(uint256 _executorId) {\n', '        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize the registry\n', '    */\n', '    function initialize() public onlyInit {\n', '        initialized();\n', '        // Create empty record to begin executor IDs at 1\n', '        executorsNextIndex = 1;\n', '    }\n', '\n', '    /**\n', '    * @notice Add a new script executor with address `_executor` to the registry\n', '    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\n', '    * @return id Identifier of the executor in the registry\n', '    */\n', '    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\n', '        uint256 executorId = executorsNextIndex++;\n', '        executors[executorId] = ExecutorEntry(_executor, true);\n', '        emit EnableExecutor(executorId, _executor);\n', '        return executorId;\n', '    }\n', '\n', '    /**\n', '    * @notice Disable script executor with ID `_executorId`\n', '    * @param _executorId Identifier of the executor in the registry\n', '    */\n', '    function disableScriptExecutor(uint256 _executorId)\n', '        external\n', '        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n', '    {\n', "        // Note that we don't need to check for an executor's existence in this case, as only\n", '        // existing executors can be enabled\n', '        ExecutorEntry storage executorEntry = executors[_executorId];\n', '        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\n', '        executorEntry.enabled = false;\n', '        emit DisableExecutor(_executorId, executorEntry.executor);\n', '    }\n', '\n', '    /**\n', '    * @notice Enable script executor with ID `_executorId`\n', '    * @param _executorId Identifier of the executor in the registry\n', '    */\n', '    function enableScriptExecutor(uint256 _executorId)\n', '        external\n', '        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n', '        executorExists(_executorId)\n', '    {\n', '        ExecutorEntry storage executorEntry = executors[_executorId];\n', '        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\n', '        executorEntry.enabled = true;\n', '        emit EnableExecutor(_executorId, executorEntry.executor);\n', '    }\n', '\n', '    /**\n', '    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\n', '    * @param _script EVMScript being inspected\n', '    */\n', '    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n', '        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\n', '        uint256 id = _script.getSpecId();\n', '\n', "        // Note that we don't need to check for an executor's existence in this case, as only\n", '        // existing executors can be enabled\n', '        ExecutorEntry storage entry = executors[id];\n', '        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\n', '    uint256 internal constant SCRIPT_START_LOCATION = 4;\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/executors/CallsScript.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// Inspired by https://github.com/reverendus/tx-manager\n', '\n', '\n', '\n', '\n', 'contract CallsScript is BaseEVMScriptExecutor {\n', '    using ScriptHelpers for bytes;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant EXECUTOR_TYPE = keccak256("CALLS_SCRIPT");\n', '    */\n', '    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\n', '\n', '    string private constant ERROR_BLACKLISTED_CALL = "EVMCALLS_BLACKLISTED_CALL";\n', '    string private constant ERROR_INVALID_LENGTH = "EVMCALLS_INVALID_LENGTH";\n', '\n', '    /* This is manually crafted in assembly\n', '    string private constant ERROR_CALL_REVERTED = "EVMCALLS_CALL_REVERTED";\n', '    */\n', '\n', '    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\n', '\n', '    /**\n', '    * @notice Executes a number of call scripts\n', '    * @param _script [ specId (uint32) ] many calls with this structure ->\n', '    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\n', '    * @param _blacklist Addresses the script cannot call to, or will revert.\n', '    * @return Always returns empty byte array\n', '    */\n', '    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\n', '        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\n', '        while (location < _script.length) {\n', "            // Check there's at least address + calldataLength available\n", '            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\n', '\n', '            address contractAddress = _script.addressAt(location);\n', '            // Check address being called is not blacklist\n', '            for (uint256 i = 0; i < _blacklist.length; i++) {\n', '                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\n', '            }\n', '\n', '            // logged before execution to ensure event ordering in receipt\n', '            // if failed entire execution is reverted regardless\n', '            emit LogScriptCall(msg.sender, address(this), contractAddress);\n', '\n', '            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\n', '            uint256 startOffset = location + 0x14 + 0x04;\n', '            uint256 calldataStart = _script.locationOf(startOffset);\n', '\n', '            // compute end of script / next location\n', '            location = startOffset + calldataLength;\n', '            require(location <= _script.length, ERROR_INVALID_LENGTH);\n', '\n', '            bool success;\n', '            assembly {\n', '                success := call(\n', '                    sub(gas, 5000),       // forward gas left - 5000\n', '                    contractAddress,      // address\n', '                    0,                    // no value\n', '                    calldataStart,        // calldata start\n', '                    calldataLength,       // calldata length\n', "                    0,                    // don't write output\n", "                    0                     // don't write output\n", '                )\n', '\n', '                switch success\n', '                case 0 {\n', '                    let ptr := mload(0x40)\n', '\n', '                    switch returndatasize\n', '                    case 0 {\n', '                        // No error data was returned, revert with "EVMCALLS_CALL_REVERTED"\n', '                        // See remix: doing a `revert("EVMCALLS_CALL_REVERTED")` always results in\n', '                        // this memory layout\n', '                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n', '                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n', '                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\n', '                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\n', '\n', '                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n', '                    }\n', '                    default {\n', '                        // Forward the full error data\n', '                        returndatacopy(ptr, 0, returndatasize)\n', '                        revert(ptr, returndatasize)\n', '                    }\n', '                }\n', '                default { }\n', '            }\n', '        }\n', '        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\n', '        // (due to the isInitialized modifier)\n', '    }\n', '\n', '    function executorType() external pure returns (bytes32) {\n', '        return EXECUTOR_TYPE;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\n', '    EVMScriptRegistry public baseReg;\n', '    IEVMScriptExecutor public baseCallScript;\n', '\n', '    /**\n', '    * @notice Create a new EVMScriptRegistryFactory.\n', '    */\n', '    constructor() public {\n', '        baseReg = new EVMScriptRegistry();\n', '        baseCallScript = IEVMScriptExecutor(new CallsScript());\n', '    }\n', '\n', '    /**\n', '    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\n', '    * @param _dao Kernel\n', '    * @return Installed EVMScriptRegistry\n', '    */\n', '    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\n', '        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\n', '        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\n', '\n', '        ACL acl = ACL(_dao.acl());\n', '\n', '        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\n', '\n', '        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\n', '\n', '        // Clean up the permissions\n', '        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n', '        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n', '\n', '        return reg;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/factory/DAOFactory.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DAOFactory {\n', '    IKernel public baseKernel;\n', '    IACL public baseACL;\n', '    EVMScriptRegistryFactory public regFactory;\n', '\n', '    event DeployDAO(address dao);\n', '    event DeployEVMScriptRegistry(address reg);\n', '\n', '    /**\n', '    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\n', '    * @param _baseKernel Base Kernel\n', '    * @param _baseACL Base ACL\n', '    * @param _regFactory EVMScriptRegistry factory\n', '    */\n', '    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\n', '        // No need to init as it cannot be killed by devops199\n', '        if (address(_regFactory) != address(0)) {\n', '            regFactory = _regFactory;\n', '        }\n', '\n', '        baseKernel = _baseKernel;\n', '        baseACL = _baseACL;\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new DAO with `_root` set as the initial admin\n', '    * @param _root Address that will be granted control to setup DAO permissions\n', '    * @return Newly created DAO\n', '    */\n', '    function newDAO(address _root) public returns (Kernel) {\n', '        Kernel dao = Kernel(new KernelProxy(baseKernel));\n', '\n', '        if (address(regFactory) == address(0)) {\n', '            dao.initialize(baseACL, _root);\n', '        } else {\n', '            dao.initialize(baseACL, this);\n', '\n', '            ACL acl = ACL(dao.acl());\n', '            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\n', '            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\n', '\n', '            acl.grantPermission(regFactory, acl, permRole);\n', '\n', '            acl.createPermission(regFactory, dao, appManagerRole, this);\n', '\n', '            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\n', '            emit DeployEVMScriptRegistry(address(reg));\n', '\n', '            // Clean up permissions\n', '            // First, completely reset the APP_MANAGER_ROLE\n', '            acl.revokePermission(regFactory, dao, appManagerRole);\n', '            acl.removePermissionManager(dao, appManagerRole);\n', '\n', '            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\n', '            acl.revokePermission(regFactory, acl, permRole);\n', '            acl.revokePermission(this, acl, permRole);\n', '            acl.grantPermission(_root, acl, permRole);\n', '            acl.setPermissionManager(_root, acl, permRole);\n', '        }\n', '\n', '        emit DeployDAO(address(dao));\n', '\n', '        return dao;\n', '    }\n', '}\n', '\n', '// File: @aragon/id/contracts/ens/IPublicResolver.sol\n', '\n', 'pragma solidity ^0.4.0;\n', '\n', '\n', 'interface IPublicResolver {\n', '    function supportsInterface(bytes4 interfaceID) constant returns (bool);\n', '    function addr(bytes32 node) constant returns (address ret);\n', '    function setAddr(bytes32 node, address addr);\n', '    function hash(bytes32 node) constant returns (bytes32 ret);\n', '    function setHash(bytes32 node, bytes32 hash);\n', '}\n', '\n', '// File: @aragon/id/contracts/IFIFSResolvingRegistrar.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', 'interface IFIFSResolvingRegistrar {\n', '    function register(bytes32 _subnode, address _owner) external;\n', '    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public;\n', '}\n', '\n', '// File: @aragon/templates-shared/contracts/BaseTemplate.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseTemplate is APMNamehash, IsContract {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /* Hardcoded constant to save gas\n', '    * bytes32 constant internal AGENT_APP_ID = apmNamehash("agent");                  // agent.aragonpm.eth\n', '    * bytes32 constant internal VAULT_APP_ID = apmNamehash("vault");                  // vault.aragonpm.eth\n', '    * bytes32 constant internal VOTING_APP_ID = apmNamehash("voting");                // voting.aragonpm.eth\n', '    * bytes32 constant internal SURVEY_APP_ID = apmNamehash("survey");                // survey.aragonpm.eth\n', '    * bytes32 constant internal PAYROLL_APP_ID = apmNamehash("payroll");              // payroll.aragonpm.eth\n', '    * bytes32 constant internal FINANCE_APP_ID = apmNamehash("finance");              // finance.aragonpm.eth\n', '    * bytes32 constant internal TOKEN_MANAGER_APP_ID = apmNamehash("token-manager");  // token-manager.aragonpm.eth\n', '    */\n', '    bytes32 constant internal AGENT_APP_ID = 0x9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a;\n', '    bytes32 constant internal VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n', '    bytes32 constant internal VOTING_APP_ID = 0x9fa3927f639745e587912d4b0fea7ef9013bf93fb907d29faeab57417ba6e1d4;\n', '    bytes32 constant internal PAYROLL_APP_ID = 0x463f596a96d808cb28b5d080181e4a398bc793df2c222f6445189eb801001991;\n', '    bytes32 constant internal FINANCE_APP_ID = 0xbf8491150dafc5dcaee5b861414dca922de09ccffa344964ae167212e8c673ae;\n', '    bytes32 constant internal TOKEN_MANAGER_APP_ID = 0x6b20a3010614eeebf2138ccec99f028a61c811b3b1a3343b6ff635985c75c91f;\n', '    bytes32 constant internal SURVEY_APP_ID = 0x030b2ab880b88e228f2da5a3d19a2a31bc10dbf91fb1143776a6de489389471e;\n', '\n', '    string constant private ERROR_ENS_NOT_CONTRACT = "TEMPLATE_ENS_NOT_CONTRACT";\n', '    string constant private ERROR_DAO_FACTORY_NOT_CONTRACT = "TEMPLATE_DAO_FAC_NOT_CONTRACT";\n', '    string constant private ERROR_ARAGON_ID_NOT_PROVIDED = "TEMPLATE_ARAGON_ID_NOT_PROVIDED";\n', '    string constant private ERROR_ARAGON_ID_NOT_CONTRACT = "TEMPLATE_ARAGON_ID_NOT_CONTRACT";\n', '    string constant private ERROR_MINIME_FACTORY_NOT_PROVIDED = "TEMPLATE_MINIME_FAC_NOT_PROVIDED";\n', '    string constant private ERROR_MINIME_FACTORY_NOT_CONTRACT = "TEMPLATE_MINIME_FAC_NOT_CONTRACT";\n', '    string constant private ERROR_CANNOT_CAST_VALUE_TO_ADDRESS = "TEMPLATE_CANNOT_CAST_VALUE_TO_ADDRESS";\n', '    string constant private ERROR_INVALID_ID = "TEMPLATE_INVALID_ID";\n', '\n', '    ENS internal ens;\n', '    DAOFactory internal daoFactory;\n', '    MiniMeTokenFactory internal miniMeFactory;\n', '    IFIFSResolvingRegistrar internal aragonID;\n', '\n', '    event DeployDao(address dao);\n', '    event SetupDao(address dao);\n', '    event DeployToken(address token);\n', '    event InstalledApp(address appProxy, bytes32 appId);\n', '\n', '    constructor(DAOFactory _daoFactory, ENS _ens, MiniMeTokenFactory _miniMeFactory, IFIFSResolvingRegistrar _aragonID) public {\n', '        require(isContract(address(_ens)), ERROR_ENS_NOT_CONTRACT);\n', '        require(isContract(address(_daoFactory)), ERROR_DAO_FACTORY_NOT_CONTRACT);\n', '\n', '        ens = _ens;\n', '        aragonID = _aragonID;\n', '        daoFactory = _daoFactory;\n', '        miniMeFactory = _miniMeFactory;\n', '    }\n', '\n', '    /**\n', '    * @dev Create a DAO using the DAO Factory and grant the template root permissions so it has full\n', '    *      control during setup. Once the DAO setup has finished, it is recommended to call the\n', '    *      `_transferRootPermissionsFromTemplateAndFinalizeDAO()` helper to transfer the root\n', '    *      permissions to the end entity in control of the organization.\n', '    */\n', '    function _createDAO() internal returns (Kernel dao, ACL acl) {\n', '        dao = daoFactory.newDAO(this);\n', '        emit DeployDao(address(dao));\n', '        acl = ACL(dao.acl());\n', '        _createPermissionForTemplate(acl, dao, dao.APP_MANAGER_ROLE());\n', '    }\n', '\n', '    /* ACL */\n', '\n', '    function _createPermissions(ACL _acl, address[] memory _grantees, address _app, bytes32 _permission, address _manager) internal {\n', '        _acl.createPermission(_grantees[0], _app, _permission, address(this));\n', '        for (uint256 i = 1; i < _grantees.length; i++) {\n', '            _acl.grantPermission(_grantees[i], _app, _permission);\n', '        }\n', '        _acl.revokePermission(address(this), _app, _permission);\n', '        _acl.setPermissionManager(_manager, _app, _permission);\n', '    }\n', '\n', '    function _createPermissionForTemplate(ACL _acl, address _app, bytes32 _permission) internal {\n', '        _acl.createPermission(address(this), _app, _permission, address(this));\n', '    }\n', '\n', '    function _removePermissionFromTemplate(ACL _acl, address _app, bytes32 _permission) internal {\n', '        _acl.revokePermission(address(this), _app, _permission);\n', '        _acl.removePermissionManager(_app, _permission);\n', '    }\n', '\n', '    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to) internal {\n', '        _transferRootPermissionsFromTemplateAndFinalizeDAO(_dao, _to, _to);\n', '    }\n', '\n', '    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to, address _manager) internal {\n', '        ACL _acl = ACL(_dao.acl());\n', '        _transferPermissionFromTemplate(_acl, _dao, _to, _dao.APP_MANAGER_ROLE(), _manager);\n', '        _transferPermissionFromTemplate(_acl, _acl, _to, _acl.CREATE_PERMISSIONS_ROLE(), _manager);\n', '        emit SetupDao(_dao);\n', '    }\n', '\n', '    function _transferPermissionFromTemplate(ACL _acl, address _app, address _to, bytes32 _permission, address _manager) internal {\n', '        _acl.grantPermission(_to, _app, _permission);\n', '        _acl.revokePermission(address(this), _app, _permission);\n', '        _acl.setPermissionManager(_manager, _app, _permission);\n', '    }\n', '\n', '    /* AGENT */\n', '\n', '    function _installDefaultAgentApp(Kernel _dao) internal returns (Agent) {\n', '        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\n', '        Agent agent = Agent(_installDefaultApp(_dao, AGENT_APP_ID, initializeData));\n', '        // We assume that installing the Agent app as a default app means the DAO should have its\n', "        // Vault replaced by the Agent. Thus, we also set the DAO's recovery app to the Agent.\n", '        _dao.setRecoveryVaultAppId(AGENT_APP_ID);\n', '        return agent;\n', '    }\n', '\n', '    function _installNonDefaultAgentApp(Kernel _dao) internal returns (Agent) {\n', '        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\n', '        return Agent(_installNonDefaultApp(_dao, AGENT_APP_ID, initializeData));\n', '    }\n', '\n', '    function _createAgentPermissions(ACL _acl, Agent _agent, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _agent, _agent.EXECUTE_ROLE(), _manager);\n', '        _acl.createPermission(_grantee, _agent, _agent.RUN_SCRIPT_ROLE(), _manager);\n', '    }\n', '\n', '    /* VAULT */\n', '\n', '    function _installVaultApp(Kernel _dao) internal returns (Vault) {\n', '        bytes memory initializeData = abi.encodeWithSelector(Vault(0).initialize.selector);\n', '        return Vault(_installDefaultApp(_dao, VAULT_APP_ID, initializeData));\n', '    }\n', '\n', '    function _createVaultPermissions(ACL _acl, Vault _vault, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _vault, _vault.TRANSFER_ROLE(), _manager);\n', '    }\n', '\n', '    /* VOTING */\n', '\n', '    function _installVotingApp(Kernel _dao, MiniMeToken _token, uint64[3] memory _votingSettings) internal returns (Voting) {\n', '        return _installVotingApp(_dao, _token, _votingSettings[0], _votingSettings[1], _votingSettings[2]);\n', '    }\n', '\n', '    function _installVotingApp(\n', '        Kernel _dao,\n', '        MiniMeToken _token,\n', '        uint64 _support,\n', '        uint64 _acceptance,\n', '        uint64 _duration\n', '    )\n', '        internal returns (Voting)\n', '    {\n', '        bytes memory initializeData = abi.encodeWithSelector(Voting(0).initialize.selector, _token, _support, _acceptance, _duration);\n', '        return Voting(_installNonDefaultApp(_dao, VOTING_APP_ID, initializeData));\n', '    }\n', '\n', '    function _createVotingPermissions(\n', '        ACL _acl,\n', '        Voting _voting,\n', '        address _settingsGrantee,\n', '        address _createVotesGrantee,\n', '        address _manager\n', '    )\n', '        internal\n', '    {\n', '        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_QUORUM_ROLE(), _manager);\n', '        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_SUPPORT_ROLE(), _manager);\n', '        _acl.createPermission(_createVotesGrantee, _voting, _voting.CREATE_VOTES_ROLE(), _manager);\n', '    }\n', '\n', '    /* SURVEY */\n', '\n', '    function _installSurveyApp(Kernel _dao, MiniMeToken _token, uint64 _minParticipationPct, uint64 _surveyTime) internal returns (Survey) {\n', '        bytes memory initializeData = abi.encodeWithSelector(Survey(0).initialize.selector, _token, _minParticipationPct, _surveyTime);\n', '        return Survey(_installNonDefaultApp(_dao, SURVEY_APP_ID, initializeData));\n', '    }\n', '\n', '    function _createSurveyPermissions(ACL _acl, Survey _survey, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _survey, _survey.CREATE_SURVEYS_ROLE(), _manager);\n', '        _acl.createPermission(_grantee, _survey, _survey.MODIFY_PARTICIPATION_ROLE(), _manager);\n', '    }\n', '\n', '    /* PAYROLL */\n', '\n', '    function _installPayrollApp(\n', '        Kernel _dao,\n', '        Finance _finance,\n', '        address _denominationToken,\n', '        IFeed _priceFeed,\n', '        uint64 _rateExpiryTime\n', '    )\n', '        internal returns (Payroll)\n', '    {\n', '        bytes memory initializeData = abi.encodeWithSelector(\n', '            Payroll(0).initialize.selector,\n', '            _finance,\n', '            _denominationToken,\n', '            _priceFeed,\n', '            _rateExpiryTime\n', '        );\n', '        return Payroll(_installNonDefaultApp(_dao, PAYROLL_APP_ID, initializeData));\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to configure payroll permissions. Note that we allow defining different managers for\n', '    *      payroll since it may be useful to have one control the payroll settings (rate expiration, price feed,\n', '    *      and allowed tokens), and another one to control the employee functionality (bonuses, salaries,\n', '    *      reimbursements, employees, etc).\n', '    * @param _acl ACL instance being configured\n', '    * @param _acl Payroll app being configured\n', '    * @param _employeeManager Address that will receive permissions to handle employee payroll functionality\n', '    * @param _settingsManager Address that will receive permissions to manage payroll settings\n', '    * @param _permissionsManager Address that will be the ACL manager for the payroll permissions\n', '    */\n', '    function _createPayrollPermissions(\n', '        ACL _acl,\n', '        Payroll _payroll,\n', '        address _employeeManager,\n', '        address _settingsManager,\n', '        address _permissionsManager\n', '    )\n', '        internal\n', '    {\n', '        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_BONUS_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_EMPLOYEE_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_REIMBURSEMENT_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_employeeManager, _payroll, _payroll.TERMINATE_EMPLOYEE_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_employeeManager, _payroll, _payroll.SET_EMPLOYEE_SALARY_ROLE(), _permissionsManager);\n', '\n', '        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_PRICE_FEED_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_RATE_EXPIRY_ROLE(), _permissionsManager);\n', '        _acl.createPermission(_settingsManager, _payroll, _payroll.MANAGE_ALLOWED_TOKENS_ROLE(), _permissionsManager);\n', '    }\n', '\n', '    function _unwrapPayrollSettings(\n', '        uint256[4] memory _payrollSettings\n', '    )\n', '        internal pure returns (address denominationToken, IFeed priceFeed, uint64 rateExpiryTime, address employeeManager)\n', '    {\n', '        denominationToken = _toAddress(_payrollSettings[0]);\n', '        priceFeed = IFeed(_toAddress(_payrollSettings[1]));\n', '        rateExpiryTime = _payrollSettings[2].toUint64();\n', '        employeeManager = _toAddress(_payrollSettings[3]);\n', '    }\n', '\n', '    /* FINANCE */\n', '\n', '    function _installFinanceApp(Kernel _dao, Vault _vault, uint64 _periodDuration) internal returns (Finance) {\n', '        bytes memory initializeData = abi.encodeWithSelector(Finance(0).initialize.selector, _vault, _periodDuration);\n', '        return Finance(_installNonDefaultApp(_dao, FINANCE_APP_ID, initializeData));\n', '    }\n', '\n', '    function _createFinancePermissions(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _finance, _finance.EXECUTE_PAYMENTS_ROLE(), _manager);\n', '        _acl.createPermission(_grantee, _finance, _finance.MANAGE_PAYMENTS_ROLE(), _manager);\n', '    }\n', '\n', '    function _createFinanceCreatePaymentsPermission(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _finance, _finance.CREATE_PAYMENTS_ROLE(), _manager);\n', '    }\n', '\n', '    function _grantCreatePaymentPermission(ACL _acl, Finance _finance, address _to) internal {\n', '        _acl.grantPermission(_to, _finance, _finance.CREATE_PAYMENTS_ROLE());\n', '    }\n', '\n', '    function _transferCreatePaymentManagerFromTemplate(ACL _acl, Finance _finance, address _manager) internal {\n', '        _acl.setPermissionManager(_manager, _finance, _finance.CREATE_PAYMENTS_ROLE());\n', '    }\n', '\n', '    /* TOKEN MANAGER */\n', '\n', '    function _installTokenManagerApp(\n', '        Kernel _dao,\n', '        MiniMeToken _token,\n', '        bool _transferable,\n', '        uint256 _maxAccountTokens\n', '    )\n', '        internal returns (TokenManager)\n', '    {\n', '        TokenManager tokenManager = TokenManager(_installNonDefaultApp(_dao, TOKEN_MANAGER_APP_ID));\n', '        _token.changeController(tokenManager);\n', '        tokenManager.initialize(_token, _transferable, _maxAccountTokens);\n', '        return tokenManager;\n', '    }\n', '\n', '    function _createTokenManagerPermissions(ACL _acl, TokenManager _tokenManager, address _grantee, address _manager) internal {\n', '        _acl.createPermission(_grantee, _tokenManager, _tokenManager.MINT_ROLE(), _manager);\n', '        _acl.createPermission(_grantee, _tokenManager, _tokenManager.BURN_ROLE(), _manager);\n', '    }\n', '\n', '    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256[] memory _stakes) internal {\n', '        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            _tokenManager.mint(_holders[i], _stakes[i]);\n', '        }\n', '        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '    }\n', '\n', '    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256 _stake) internal {\n', '        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            _tokenManager.mint(_holders[i], _stake);\n', '        }\n', '        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '    }\n', '\n', '    function _mintTokens(ACL _acl, TokenManager _tokenManager, address _holder, uint256 _stake) internal {\n', '        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '        _tokenManager.mint(_holder, _stake);\n', '        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n', '    }\n', '\n', '    /* EVM SCRIPTS */\n', '\n', '    function _createEvmScriptsRegistryPermissions(ACL _acl, address _grantee, address _manager) internal {\n', '        EVMScriptRegistry registry = EVMScriptRegistry(_acl.getEVMScriptRegistry());\n', '        _acl.createPermission(_grantee, registry, registry.REGISTRY_MANAGER_ROLE(), _manager);\n', '        _acl.createPermission(_grantee, registry, registry.REGISTRY_ADD_EXECUTOR_ROLE(), _manager);\n', '    }\n', '\n', '    /* APPS */\n', '\n', '    function _installNonDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\n', '        return _installNonDefaultApp(_dao, _appId, new bytes(0));\n', '    }\n', '\n', '    function _installNonDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\n', '        return _installApp(_dao, _appId, _initializeData, false);\n', '    }\n', '\n', '    function _installDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\n', '        return _installDefaultApp(_dao, _appId, new bytes(0));\n', '    }\n', '\n', '    function _installDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\n', '        return _installApp(_dao, _appId, _initializeData, true);\n', '    }\n', '\n', '    function _installApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData, bool _setDefault) internal returns (address) {\n', '        address latestBaseAppAddress = _latestVersionAppBase(_appId);\n', '        address instance = address(_dao.newAppInstance(_appId, latestBaseAppAddress, _initializeData, _setDefault));\n', '        emit InstalledApp(instance, _appId);\n', '        return instance;\n', '    }\n', '\n', '    function _latestVersionAppBase(bytes32 _appId) internal view returns (address base) {\n', '        Repo repo = Repo(PublicResolver(ens.resolver(_appId)).addr(_appId));\n', '        (,base,) = repo.getLatest();\n', '    }\n', '\n', '    /* TOKEN */\n', '\n', '    function _createToken(string memory _name, string memory _symbol, uint8 _decimals) internal returns (MiniMeToken) {\n', '        require(address(miniMeFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\n', '        MiniMeToken token = miniMeFactory.createCloneToken(MiniMeToken(address(0)), 0, _name, _decimals, _symbol, true);\n', '        emit DeployToken(address(token));\n', '        return token;\n', '    }\n', '\n', '    function _ensureMiniMeFactoryIsValid(address _miniMeFactory) internal view {\n', '        require(isContract(address(_miniMeFactory)), ERROR_MINIME_FACTORY_NOT_CONTRACT);\n', '    }\n', '\n', '    /* IDS */\n', '\n', '    function _validateId(string memory _id) internal pure {\n', '        require(bytes(_id).length > 0, ERROR_INVALID_ID);\n', '    }\n', '\n', '    function _registerID(string memory _name, address _owner) internal {\n', '        require(address(aragonID) != address(0), ERROR_ARAGON_ID_NOT_PROVIDED);\n', '        aragonID.register(keccak256(abi.encodePacked(_name)), _owner);\n', '    }\n', '\n', '    function _ensureAragonIdIsValid(address _aragonID) internal view {\n', '        require(isContract(address(_aragonID)), ERROR_ARAGON_ID_NOT_CONTRACT);\n', '    }\n', '\n', '    /* HELPERS */\n', '\n', '    function _toAddress(uint256 _value) private pure returns (address) {\n', '        require(_value <= uint160(-1), ERROR_CANNOT_CAST_VALUE_TO_ADDRESS);\n', '        return address(_value);\n', '    }\n', '}\n', '\n', '// File: @ablack/fundraising-bancor-formula/contracts/interfaces/IBancorFormula.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '/*\n', '    Bancor Formula interface\n', '*/\n', 'contract IBancorFormula {\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public view returns (uint256);\n', '    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public view returns (uint256);\n', '    function calculateCrossConnectorReturn(uint256 _fromConnectorBalance, uint32 _fromConnectorWeight, uint256 _toConnectorBalance, uint32 _toConnectorWeight, uint256 _amount) public view returns (uint256);\n', '}\n', '\n', '// File: @ablack/fundraising-bancor-formula/contracts/utility/Utils.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '/*\n', '    Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    constructor() public {\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: @ablack/fundraising-bancor-formula/contracts/BancorFormula.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract BancorFormula is IBancorFormula, Utils {\n', '    using SafeMath for uint256;\n', '\n', '\n', "    string public version = '0.3';\n", '\n', '    uint256 private constant ONE = 1;\n', '    uint32 private constant MAX_WEIGHT = 1000000;\n', '    uint8 private constant MIN_PRECISION = 32;\n', '    uint8 private constant MAX_PRECISION = 127;\n', '\n', '    /**\n', "        Auto-generated via 'PrintIntScalingFactors.py'\n", '    */\n', '    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\n', '    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\n', '    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\n', '\n', '    /**\n', "        Auto-generated via 'PrintLn2ScalingFactors.py'\n", '    */\n', '    uint256 private constant LN2_NUMERATOR   = 0x3f80fe03f80fe03f80fe03f80fe03f8;\n', '    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\n', '\n', '    /**\n', "        Auto-generated via 'PrintFunctionOptimalLog.py' and 'PrintFunctionOptimalExp.py'\n", '    */\n', '    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\n', '    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\n', '\n', '    /**\n', "        Auto-generated via 'PrintFunctionConstructor.py'\n", '    */\n', '    uint256[128] private maxExpArray;\n', '    constructor() public {\n', '    //  maxExpArray[  0] = 0x6bffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  1] = 0x67ffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  2] = 0x637fffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  3] = 0x5f6fffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  4] = 0x5b77ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  5] = 0x57b3ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  6] = 0x5419ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  7] = 0x50a2ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  8] = 0x4d517fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[  9] = 0x4a233fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 10] = 0x47165fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 11] = 0x4429afffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 12] = 0x415bc7ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 13] = 0x3eab73ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 14] = 0x3c1771ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 15] = 0x399e96ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 16] = 0x373fc47fffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 17] = 0x34f9e8ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 18] = 0x32cbfd5fffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 19] = 0x30b5057fffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 20] = 0x2eb40f9fffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 21] = 0x2cc8340fffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 22] = 0x2af09481ffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 23] = 0x292c5bddffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 24] = 0x277abdcdffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 25] = 0x25daf6657fffffffffffffffffffffffff;\n', '    //  maxExpArray[ 26] = 0x244c49c65fffffffffffffffffffffffff;\n', '    //  maxExpArray[ 27] = 0x22ce03cd5fffffffffffffffffffffffff;\n', '    //  maxExpArray[ 28] = 0x215f77c047ffffffffffffffffffffffff;\n', '    //  maxExpArray[ 29] = 0x1fffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[ 30] = 0x1eaefdbdabffffffffffffffffffffffff;\n', '    //  maxExpArray[ 31] = 0x1d6bd8b2ebffffffffffffffffffffffff;\n', '        maxExpArray[ 32] = 0x1c35fedd14ffffffffffffffffffffffff;\n', '        maxExpArray[ 33] = 0x1b0ce43b323fffffffffffffffffffffff;\n', '        maxExpArray[ 34] = 0x19f0028ec1ffffffffffffffffffffffff;\n', '        maxExpArray[ 35] = 0x18ded91f0e7fffffffffffffffffffffff;\n', '        maxExpArray[ 36] = 0x17d8ec7f0417ffffffffffffffffffffff;\n', '        maxExpArray[ 37] = 0x16ddc6556cdbffffffffffffffffffffff;\n', '        maxExpArray[ 38] = 0x15ecf52776a1ffffffffffffffffffffff;\n', '        maxExpArray[ 39] = 0x15060c256cb2ffffffffffffffffffffff;\n', '        maxExpArray[ 40] = 0x1428a2f98d72ffffffffffffffffffffff;\n', '        maxExpArray[ 41] = 0x13545598e5c23fffffffffffffffffffff;\n', '        maxExpArray[ 42] = 0x1288c4161ce1dfffffffffffffffffffff;\n', '        maxExpArray[ 43] = 0x11c592761c666fffffffffffffffffffff;\n', '        maxExpArray[ 44] = 0x110a688680a757ffffffffffffffffffff;\n', '        maxExpArray[ 45] = 0x1056f1b5bedf77ffffffffffffffffffff;\n', '        maxExpArray[ 46] = 0x0faadceceeff8bffffffffffffffffffff;\n', '        maxExpArray[ 47] = 0x0f05dc6b27edadffffffffffffffffffff;\n', '        maxExpArray[ 48] = 0x0e67a5a25da4107fffffffffffffffffff;\n', '        maxExpArray[ 49] = 0x0dcff115b14eedffffffffffffffffffff;\n', '        maxExpArray[ 50] = 0x0d3e7a392431239fffffffffffffffffff;\n', '        maxExpArray[ 51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\n', '        maxExpArray[ 52] = 0x0c2d415c3db974afffffffffffffffffff;\n', '        maxExpArray[ 53] = 0x0bad03e7d883f69bffffffffffffffffff;\n', '        maxExpArray[ 54] = 0x0b320d03b2c343d5ffffffffffffffffff;\n', '        maxExpArray[ 55] = 0x0abc25204e02828dffffffffffffffffff;\n', '        maxExpArray[ 56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\n', '        maxExpArray[ 57] = 0x09deaf736ac1f569ffffffffffffffffff;\n', '        maxExpArray[ 58] = 0x0976bd9952c7aa957fffffffffffffffff;\n', '        maxExpArray[ 59] = 0x09131271922eaa606fffffffffffffffff;\n', '        maxExpArray[ 60] = 0x08b380f3558668c46fffffffffffffffff;\n', '        maxExpArray[ 61] = 0x0857ddf0117efa215bffffffffffffffff;\n', '        maxExpArray[ 62] = 0x07ffffffffffffffffffffffffffffffff;\n', '        maxExpArray[ 63] = 0x07abbf6f6abb9d087fffffffffffffffff;\n', '        maxExpArray[ 64] = 0x075af62cbac95f7dfa7fffffffffffffff;\n', '        maxExpArray[ 65] = 0x070d7fb7452e187ac13fffffffffffffff;\n', '        maxExpArray[ 66] = 0x06c3390ecc8af379295fffffffffffffff;\n', '        maxExpArray[ 67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\n', '        maxExpArray[ 68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\n', '        maxExpArray[ 69] = 0x05f63b1fc104dbd39587ffffffffffffff;\n', '        maxExpArray[ 70] = 0x05b771955b36e12f7235ffffffffffffff;\n', '        maxExpArray[ 71] = 0x057b3d49dda84556d6f6ffffffffffffff;\n', '        maxExpArray[ 72] = 0x054183095b2c8ececf30ffffffffffffff;\n', '        maxExpArray[ 73] = 0x050a28be635ca2b888f77fffffffffffff;\n', '        maxExpArray[ 74] = 0x04d5156639708c9db33c3fffffffffffff;\n', '        maxExpArray[ 75] = 0x04a23105873875bd52dfdfffffffffffff;\n', '        maxExpArray[ 76] = 0x0471649d87199aa990756fffffffffffff;\n', '        maxExpArray[ 77] = 0x04429a21a029d4c1457cfbffffffffffff;\n', '        maxExpArray[ 78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\n', '        maxExpArray[ 79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\n', '        maxExpArray[ 80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\n', '        maxExpArray[ 81] = 0x0399e96897690418f785257fffffffffff;\n', '        maxExpArray[ 82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\n', '        maxExpArray[ 83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\n', '        maxExpArray[ 84] = 0x032cbfd4a7adc790560b3337ffffffffff;\n', '        maxExpArray[ 85] = 0x030b50570f6e5d2acca94613ffffffffff;\n', '        maxExpArray[ 86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\n', '        maxExpArray[ 87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\n', '        maxExpArray[ 88] = 0x02af09481380a0a35cf1ba02ffffffffff;\n', '        maxExpArray[ 89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\n', '        maxExpArray[ 90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\n', '        maxExpArray[ 91] = 0x025daf6654b1eaa55fd64df5efffffffff;\n', '        maxExpArray[ 92] = 0x0244c49c648baa98192dce88b7ffffffff;\n', '        maxExpArray[ 93] = 0x022ce03cd5619a311b2471268bffffffff;\n', '        maxExpArray[ 94] = 0x0215f77c045fbe885654a44a0fffffffff;\n', '        maxExpArray[ 95] = 0x01ffffffffffffffffffffffffffffffff;\n', '        maxExpArray[ 96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\n', '        maxExpArray[ 97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\n', '        maxExpArray[ 98] = 0x01c35fedd14b861eb0443f7f133fffffff;\n', '        maxExpArray[ 99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\n', '        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\n', '        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\n', '        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\n', '        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\n', '        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\n', '        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\n', '        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\n', '        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\n', '        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\n', '        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\n', '        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\n', '        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\n', '        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\n', '        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\n', '        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\n', '        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\n', '        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\n', '        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\n', '        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\n', '        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\n', '        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\n', '        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\n', '        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\n', '        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\n', '        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\n', '        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\n', '        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\n', '        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\n', '    }\n', '\n', '    /**\n', '        @dev given a token supply, connector balance, weight and a deposit amount (in the connector token),\n', '        calculates the return for a given conversion (in the main token)\n', '\n', '        Formula:\n', '        Return = _supply * ((1 + _depositAmount / _connectorBalance) ^ (_connectorWeight / 1000000) - 1)\n', '\n', '        @param _supply              token total supply\n', '        @param _connectorBalance    total connector balance\n', '        @param _connectorWeight     connector weight, represented in ppm, 1-1000000\n', '        @param _depositAmount       deposit amount, in connector token\n', '\n', '        @return purchase return amount\n', '    */\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public view returns (uint256) {\n', '        // validate input\n', '        require(_supply > 0 && _connectorBalance > 0 && _connectorWeight > 0 && _connectorWeight <= MAX_WEIGHT);\n', '\n', '        // special case for 0 deposit amount\n', '        if (_depositAmount == 0)\n', '            return 0;\n', '\n', '        // special case if the weight = 100%\n', '        if (_connectorWeight == MAX_WEIGHT)\n', '            return _supply.mul(_depositAmount) / _connectorBalance;\n', '\n', '        uint256 result;\n', '        uint8 precision;\n', '        uint256 baseN = _depositAmount.add(_connectorBalance);\n', '        (result, precision) = power(baseN, _connectorBalance, _connectorWeight, MAX_WEIGHT);\n', '        uint256 temp = _supply.mul(result) >> precision;\n', '        return temp - _supply;\n', '    }\n', '\n', '    /**\n', '        @dev given a token supply, connector balance, weight and a sell amount (in the main token),\n', '        calculates the return for a given conversion (in the connector token)\n', '\n', '        Formula:\n', '        Return = _connectorBalance * (1 - (1 - _sellAmount / _supply) ^ (1 / (_connectorWeight / 1000000)))\n', '\n', '        @param _supply              token total supply\n', '        @param _connectorBalance    total connector\n', '        @param _connectorWeight     constant connector Weight, represented in ppm, 1-1000000\n', '        @param _sellAmount          sell amount, in the token itself\n', '\n', '        @return sale return amount\n', '    */\n', '    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public view returns (uint256) {\n', '        // validate input\n', '        require(_supply > 0 && _connectorBalance > 0 && _connectorWeight > 0 && _connectorWeight <= MAX_WEIGHT && _sellAmount <= _supply);\n', '\n', '        // special case for 0 sell amount\n', '        if (_sellAmount == 0)\n', '            return 0;\n', '\n', '        // special case for selling the entire supply\n', '        if (_sellAmount == _supply)\n', '            return _connectorBalance;\n', '\n', '        // special case if the weight = 100%\n', '        if (_connectorWeight == MAX_WEIGHT)\n', '            return _connectorBalance.mul(_sellAmount) / _supply;\n', '\n', '        uint256 result;\n', '        uint8 precision;\n', '        uint256 baseD = _supply - _sellAmount;\n', '        (result, precision) = power(_supply, baseD, MAX_WEIGHT, _connectorWeight);\n', '        uint256 temp1 = _connectorBalance.mul(result);\n', '        uint256 temp2 = _connectorBalance << precision;\n', '        return (temp1 - temp2) / result;\n', '    }\n', '\n', '    /**\n', '        @dev given two connector balances/weights and a sell amount (in the first connector token),\n', '        calculates the return for a conversion from the first connector token to the second connector token (in the second connector token)\n', '\n', '        Formula:\n', '        Return = _toConnectorBalance * (1 - (_fromConnectorBalance / (_fromConnectorBalance + _amount)) ^ (_fromConnectorWeight / _toConnectorWeight))\n', '\n', '        @param _fromConnectorBalance    input connector balance\n', '        @param _fromConnectorWeight     input connector weight, represented in ppm, 1-1000000\n', '        @param _toConnectorBalance      output connector balance\n', '        @param _toConnectorWeight       output connector weight, represented in ppm, 1-1000000\n', '        @param _amount                  input connector amount\n', '\n', '        @return second connector amount\n', '    */\n', '    function calculateCrossConnectorReturn(uint256 _fromConnectorBalance, uint32 _fromConnectorWeight, uint256 _toConnectorBalance, uint32 _toConnectorWeight, uint256 _amount) public view returns (uint256) {\n', '        // validate input\n', '        require(_fromConnectorBalance > 0 && _fromConnectorWeight > 0 && _fromConnectorWeight <= MAX_WEIGHT && _toConnectorBalance > 0 && _toConnectorWeight > 0 && _toConnectorWeight <= MAX_WEIGHT);\n', '\n', '        // special case for equal weights\n', '        if (_fromConnectorWeight == _toConnectorWeight)\n', '            return _toConnectorBalance.mul(_amount) / _fromConnectorBalance.add(_amount);\n', '\n', '        uint256 result;\n', '        uint8 precision;\n', '        uint256 baseN = _fromConnectorBalance.add(_amount);\n', '        (result, precision) = power(baseN, _fromConnectorBalance, _fromConnectorWeight, _toConnectorWeight);\n', '        uint256 temp1 = _toConnectorBalance.mul(result);\n', '        uint256 temp2 = _toConnectorBalance << precision;\n', '        return (temp1 - temp2) / result;\n', '    }\n', '\n', '    /**\n', '        General Description:\n', '            Determine a value of precision.\n', '            Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n', '            Return the result along with the precision used.\n', '\n', '        Detailed Description:\n', '            Instead of calculating "base ^ exp", we calculate "e ^ (log(base) * exp)".\n', '            The value of "log(base)" is represented with an integer slightly smaller than "log(base) * 2 ^ precision".\n', '            The larger "precision" is, the more accurately this value represents the real value.\n', '            However, the larger "precision" is, the more bits are required in order to store this value.\n', '            And the exponentiation function, which takes "x" and calculates "e ^ x", is limited to a maximum exponent (maximum value of "x").\n', '            This maximum exponent depends on the "precision" used, and it is given by "maxExpArray[precision] >> (MAX_PRECISION - precision)".\n', '            Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n', '            This allows us to compute "base ^ exp" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n', '            This functions assumes that "_expN < 2 ^ 256 / log(MAX_NUM - 1)", otherwise the multiplication should be replaced with a "safeMul".\n', '    */\n', '    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) internal view returns (uint256, uint8) {\n', '        require(_baseN < MAX_NUM);\n', '\n', '        uint256 baseLog;\n', '        uint256 base = _baseN * FIXED_1 / _baseD;\n', '        if (base < OPT_LOG_MAX_VAL) {\n', '            baseLog = optimalLog(base);\n', '        }\n', '        else {\n', '            baseLog = generalLog(base);\n', '        }\n', '\n', '        uint256 baseLogTimesExp = baseLog * _expN / _expD;\n', '        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\n', '            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\n', '        }\n', '        else {\n', '            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\n', '            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\n', '        }\n', '    }\n', '\n', '    /**\n', '        Compute log(x / FIXED_1) * FIXED_1.\n', '        This functions assumes that "x >= FIXED_1", because the output would be negative otherwise.\n', '    */\n', '    function generalLog(uint256 x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '\n', '        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n', '        if (x >= FIXED_2) {\n', '            uint8 count = floorLog2(x / FIXED_1);\n', '            x >>= count; // now x < 2\n', '            res = count * FIXED_1;\n', '        }\n', '\n', '        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n', '        if (x > FIXED_1) {\n', '            for (uint8 i = MAX_PRECISION; i > 0; --i) {\n', '                x = (x * x) / FIXED_1; // now 1 < x < 4\n', '                if (x >= FIXED_2) {\n', '                    x >>= 1; // now 1 < x < 2\n', '                    res += ONE << (i - 1);\n', '                }\n', '            }\n', '        }\n', '\n', '        return res * LN2_NUMERATOR / LN2_DENOMINATOR;\n', '    }\n', '\n', '    /**\n', '        Compute the largest integer smaller than or equal to the binary logarithm of the input.\n', '    */\n', '    function floorLog2(uint256 _n) internal pure returns (uint8) {\n', '        uint8 res = 0;\n', '\n', '        if (_n < 256) {\n', '            // At most 8 iterations\n', '            while (_n > 1) {\n', '                _n >>= 1;\n', '                res += 1;\n', '            }\n', '        }\n', '        else {\n', '            // Exactly 8 iterations\n', '            for (uint8 s = 128; s > 0; s >>= 1) {\n', '                if (_n >= (ONE << s)) {\n', '                    _n >>= s;\n', '                    res |= s;\n', '                }\n', '            }\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '        The global "maxExpArray" is sorted in descending order, and therefore the following statements are equivalent:\n', '        - This function finds the position of [the smallest value in "maxExpArray" larger than or equal to "x"]\n', '        - This function finds the highest position of [a value in "maxExpArray" larger than or equal to "x"]\n', '    */\n', '    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\n', '        uint8 lo = MIN_PRECISION;\n', '        uint8 hi = MAX_PRECISION;\n', '\n', '        while (lo + 1 < hi) {\n', '            uint8 mid = (lo + hi) / 2;\n', '            if (maxExpArray[mid] >= _x)\n', '                lo = mid;\n', '            else\n', '                hi = mid;\n', '        }\n', '\n', '        if (maxExpArray[hi] >= _x)\n', '            return hi;\n', '        if (maxExpArray[lo] >= _x)\n', '            return lo;\n', '\n', '        require(false);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', "        This function can be auto-generated by the script 'PrintFunctionGeneralExp.py'.\n", '        It approximates "e ^ x" via maclaurin summation: "(x^0)/0! + (x^1)/1! + ... + (x^n)/n!".\n', '        It returns "e ^ (x / 2 ^ precision) * 2 ^ precision", that is, the result is upshifted for accuracy.\n', '        The global "maxExpArray" maps each "precision" to "((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1".\n', '        The maximum permitted value for "x" is therefore given by "maxExpArray[precision] >> (MAX_PRECISION - precision)".\n', '    */\n', '    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\n', '        uint256 xi = _x;\n', '        uint256 res = 0;\n', '\n', '        xi = (xi * _x) >> _precision; res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\n', '\n', '        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision); // divide by 33! and then add x^1 / 1! + x^0 / 0!\n', '    }\n', '\n', '    /**\n', '        Return log(x / FIXED_1) * FIXED_1\n', '        Input range: FIXED_1 <= x <= LOG_EXP_MAX_VAL - 1\n', "        Auto-generated via 'PrintFunctionOptimalLog.py'\n", '        Detailed description:\n', '        - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n', '        - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n', '        - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n', '        - The natural logarithm of the input is calculated by summing up the intermediate results above\n', '        - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n', '    */\n', '    function optimalLog(uint256 x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '\n', '        uint256 y;\n', '        uint256 z;\n', '        uint256 w;\n', '\n', '        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {res += 0x40000000000000000000000000000000; x = x * FIXED_1 / 0xd3094c70f034de4b96ff7d5b6f99fcd8;} // add 1 / 2^1\n', '        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {res += 0x20000000000000000000000000000000; x = x * FIXED_1 / 0xa45af1e1f40c333b3de1db4dd55f29a7;} // add 1 / 2^2\n', '        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {res += 0x10000000000000000000000000000000; x = x * FIXED_1 / 0x910b022db7ae67ce76b441c27035c6a1;} // add 1 / 2^3\n', '        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {res += 0x08000000000000000000000000000000; x = x * FIXED_1 / 0x88415abbe9a76bead8d00cf112e4d4a8;} // add 1 / 2^4\n', '        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {res += 0x04000000000000000000000000000000; x = x * FIXED_1 / 0x84102b00893f64c705e841d5d4064bd3;} // add 1 / 2^5\n', '        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {res += 0x02000000000000000000000000000000; x = x * FIXED_1 / 0x8204055aaef1c8bd5c3259f4822735a2;} // add 1 / 2^6\n', '        if (x >= 0x810100ab00222d861931c15e39b44e99) {res += 0x01000000000000000000000000000000; x = x * FIXED_1 / 0x810100ab00222d861931c15e39b44e99;} // add 1 / 2^7\n', '        if (x >= 0x808040155aabbbe9451521693554f733) {res += 0x00800000000000000000000000000000; x = x * FIXED_1 / 0x808040155aabbbe9451521693554f733;} // add 1 / 2^8\n', '\n', '        z = y = x - FIXED_1;\n', '        w = y * y / FIXED_1;\n', '        res += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n', '        res += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n', '        res += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n', '        res += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n', '        res += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n', '        res += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n', '        res += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n', '        res += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '        Return e ^ (x / FIXED_1) * FIXED_1\n', '        Input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\n', "        Auto-generated via 'PrintFunctionOptimalExp.py'\n", '        Detailed description:\n', '        - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\n', '        - The exponentiation of each binary exponent is given (pre-calculated)\n', '        - The exponentiation of r is calculated via Taylor series for e^x, where x = r\n', '        - The exponentiation of the input is calculated by multiplying the intermediate results above\n', '        - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\n', '    */\n', '    function optimalExp(uint256 x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '\n', '        uint256 y;\n', '        uint256 z;\n', '\n', '        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\n', '        z = z * y / FIXED_1; res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n', '        z = z * y / FIXED_1; res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n', '        z = z * y / FIXED_1; res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n', '        z = z * y / FIXED_1; res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n', '        z = z * y / FIXED_1; res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n', '        z = z * y / FIXED_1; res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n', '        z = z * y / FIXED_1; res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n', '        z = z * y / FIXED_1; res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n', '        z = z * y / FIXED_1; res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n', '        z = z * y / FIXED_1; res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n', '        z = z * y / FIXED_1; res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n', '        z = z * y / FIXED_1; res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n', '        z = z * y / FIXED_1; res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n', '        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n', '\n', '        if ((x & 0x010000000000000000000000000000000) != 0) res = res * 0x1c3d6a24ed82218787d624d3e5eba95f9 / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\n', '        if ((x & 0x020000000000000000000000000000000) != 0) res = res * 0x18ebef9eac820ae8682b9793ac6d1e778 / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\n', '        if ((x & 0x040000000000000000000000000000000) != 0) res = res * 0x1368b2fc6f9609fe7aceb46aa619baed5 / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\n', '        if ((x & 0x080000000000000000000000000000000) != 0) res = res * 0x0bc5ab1b16779be3575bd8f0520a9f21e / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\n', '        if ((x & 0x100000000000000000000000000000000) != 0) res = res * 0x0454aaa8efe072e7f6ddbab84b40a55c5 / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\n', '        if ((x & 0x200000000000000000000000000000000) != 0) res = res * 0x00960aadc109e7a3bf4578099615711d7 / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\n', '        if ((x & 0x400000000000000000000000000000000) != 0) res = res * 0x0002bf84208204f5977f9a8cf01fdc307 / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\n', '\n', '        return res;\n', '    }\n', '}\n', '\n', '// File: @ablack/fundraising-shared-interfaces/contracts/IAragonFundraisingController.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract IAragonFundraisingController {\n', '    function openTrading() external;\n', '    function updateTappedAmount(address _token) external;\n', '    function collateralsToBeClaimed(address _collateral) public view returns (uint256);\n', '    function balanceOf(address _who, address _token) public view returns (uint256);\n', '}\n', '\n', '// File: @ablack/fundraising-batched-bancor-market-maker/contracts/BatchedBancorMarketMaker.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BatchedBancorMarketMaker is EtherTokenConstant, IsContract, AragonApp {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath  for uint256;\n', '\n', '    /**\n', '    Hardcoded constants to save gas\n', '    bytes32 public constant OPEN_ROLE                    = keccak256("OPEN_ROLE");\n', '    bytes32 public constant UPDATE_FORMULA_ROLE          = keccak256("UPDATE_FORMULA_ROLE");\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE      = keccak256("UPDATE_BENEFICIARY_ROLE");\n', '    bytes32 public constant UPDATE_FEES_ROLE             = keccak256("UPDATE_FEES_ROLE");\n', '    bytes32 public constant ADD_COLLATERAL_TOKEN_ROLE    = keccak256("ADD_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant REMOVE_COLLATERAL_TOKEN_ROLE = keccak256("REMOVE_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant UPDATE_COLLATERAL_TOKEN_ROLE = keccak256("UPDATE_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant OPEN_BUY_ORDER_ROLE          = keccak256("OPEN_BUY_ORDER_ROLE");\n', '    bytes32 public constant OPEN_SELL_ORDER_ROLE         = keccak256("OPEN_SELL_ORDER_ROLE");\n', '    */\n', '    bytes32 public constant OPEN_ROLE                    = 0xefa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4;\n', '    bytes32 public constant UPDATE_FORMULA_ROLE          = 0xbfb76d8d43f55efe58544ea32af187792a7bdb983850d8fed33478266eec3cbb;\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE      = 0xf7ea2b80c7b6a2cab2c11d2290cb005c3748397358a25e17113658c83b732593;\n', '    bytes32 public constant UPDATE_FEES_ROLE             = 0x5f9be2932ed3a723f295a763be1804c7ebfd1a41c1348fb8bdf5be1c5cdca822;\n', '    bytes32 public constant ADD_COLLATERAL_TOKEN_ROLE    = 0x217b79cb2bc7760defc88529853ef81ab33ae5bb315408ce9f5af09c8776662d;\n', '    bytes32 public constant REMOVE_COLLATERAL_TOKEN_ROLE = 0x2044e56de223845e4be7d0a6f4e9a29b635547f16413a6d1327c58d9db438ee2;\n', '    bytes32 public constant UPDATE_COLLATERAL_TOKEN_ROLE = 0xe0565c2c43e0d841e206bb36a37f12f22584b4652ccee6f9e0c071b697a2e13d;\n', '    bytes32 public constant OPEN_BUY_ORDER_ROLE          = 0xa589c8f284b76fc8d510d9d553485c47dbef1b0745ae00e0f3fd4e28fcd77ea7;\n', '    bytes32 public constant OPEN_SELL_ORDER_ROLE         = 0xd68ba2b769fa37a2a7bd4bed9241b448bc99eca41f519ef037406386a8f291c0;\n', '\n', '    uint256 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\n', '    uint32  public constant PPM      = 1000000;\n', '\n', '    string private constant ERROR_CONTRACT_IS_EOA                = "MM_CONTRACT_IS_EOA";\n', '    string private constant ERROR_INVALID_BENEFICIARY            = "MM_INVALID_BENEFICIARY";\n', '    string private constant ERROR_INVALID_BATCH_BLOCKS           = "MM_INVALID_BATCH_BLOCKS";\n', '    string private constant ERROR_INVALID_PERCENTAGE             = "MM_INVALID_PERCENTAGE";\n', '    string private constant ERROR_INVALID_RESERVE_RATIO          = "MM_INVALID_RESERVE_RATIO";\n', '    string private constant ERROR_INVALID_TM_SETTING             = "MM_INVALID_TM_SETTING";\n', '    string private constant ERROR_INVALID_COLLATERAL             = "MM_INVALID_COLLATERAL";\n', '    string private constant ERROR_INVALID_COLLATERAL_VALUE       = "MM_INVALID_COLLATERAL_VALUE";\n', '    string private constant ERROR_INVALID_BOND_AMOUNT            = "MM_INVALID_BOND_AMOUNT";\n', '    string private constant ERROR_ALREADY_OPEN                   = "MM_ALREADY_OPEN";\n', '    string private constant ERROR_NOT_OPEN                       = "MM_NOT_OPEN";\n', '    string private constant ERROR_COLLATERAL_ALREADY_WHITELISTED = "MM_COLLATERAL_ALREADY_WHITELISTED";\n', '    string private constant ERROR_COLLATERAL_NOT_WHITELISTED     = "MM_COLLATERAL_NOT_WHITELISTED";\n', '    string private constant ERROR_NOTHING_TO_CLAIM               = "MM_NOTHING_TO_CLAIM";\n', '    string private constant ERROR_BATCH_NOT_OVER                 = "MM_BATCH_NOT_OVER";\n', '    string private constant ERROR_BATCH_CANCELLED                = "MM_BATCH_CANCELLED";\n', '    string private constant ERROR_BATCH_NOT_CANCELLED            = "MM_BATCH_NOT_CANCELLED";\n', '    string private constant ERROR_SLIPPAGE_EXCEEDS_LIMIT         = "MM_SLIPPAGE_EXCEEDS_LIMIT";\n', '    string private constant ERROR_INSUFFICIENT_POOL_BALANCE      = "MM_INSUFFICIENT_POOL_BALANCE";\n', '    string private constant ERROR_TRANSFER_FROM_FAILED           = "MM_TRANSFER_FROM_FAILED";\n', '\n', '    struct Collateral {\n', '        bool    whitelisted;\n', '        uint256 virtualSupply;\n', '        uint256 virtualBalance;\n', '        uint32  reserveRatio;\n', '        uint256 slippage;\n', '    }\n', '\n', '    struct MetaBatch {\n', '        bool           initialized;\n', '        uint256        realSupply;\n', '        uint256        buyFeePct;\n', '        uint256        sellFeePct;\n', '        IBancorFormula formula;\n', '        mapping(address => Batch) batches;\n', '    }\n', '\n', '    struct Batch {\n', '        bool    initialized;\n', '        bool    cancelled;\n', '        uint256 supply;\n', '        uint256 balance;\n', '        uint32  reserveRatio;\n', '        uint256 slippage;\n', '        uint256 totalBuySpend;\n', '        uint256 totalBuyReturn;\n', '        uint256 totalSellSpend;\n', '        uint256 totalSellReturn;\n', '        mapping(address => uint256) buyers;\n', '        mapping(address => uint256) sellers;\n', '    }\n', '\n', '    IAragonFundraisingController   public controller;\n', '    TokenManager                   public tokenManager;\n', '    ERC20                          public token;\n', '    Vault                          public reserve;\n', '    address                        public beneficiary;\n', '    IBancorFormula                 public formula;\n', '\n', '    uint256                        public batchBlocks;\n', '    uint256                        public buyFeePct;\n', '    uint256                        public sellFeePct;\n', '\n', '    bool                           public isOpen;\n', '    uint256                        public tokensToBeMinted;\n', '    mapping(address => uint256)    public collateralsToBeClaimed;\n', '    mapping(address => Collateral) public collaterals;\n', '    mapping(uint256 => MetaBatch)  public metaBatches;\n', '\n', '    event UpdateBeneficiary      (address indexed beneficiary);\n', '    event UpdateFormula          (address indexed formula);\n', '    event UpdateFees             (uint256 buyFeePct, uint256 sellFeePct);\n', '    event NewMetaBatch           (uint256 indexed id, uint256 supply, uint256 buyFeePct, uint256 sellFeePct, address formula);\n', '    event NewBatch               (\n', '        uint256 indexed id,\n', '        address indexed collateral,\n', '        uint256 supply,\n', '        uint256 balance,\n', '        uint32  reserveRatio,\n', '        uint256 slippage)\n', '    ;\n', '    event CancelBatch            (uint256 indexed id, address indexed collateral);\n', '    event AddCollateralToken     (\n', '        address indexed collateral,\n', '        uint256 virtualSupply,\n', '        uint256 virtualBalance,\n', '        uint32  reserveRatio,\n', '        uint256 slippage\n', '    );\n', '    event RemoveCollateralToken  (address indexed collateral);\n', '    event UpdateCollateralToken  (\n', '        address indexed collateral,\n', '        uint256 virtualSupply,\n', '        uint256 virtualBalance,\n', '        uint32  reserveRatio,\n', '        uint256 slippage\n', '    );\n', '    event Open                   ();\n', '    event OpenBuyOrder           (address indexed buyer, uint256 indexed batchId, address indexed collateral, uint256 fee, uint256 value);\n', '    event OpenSellOrder          (address indexed seller, uint256 indexed batchId, address indexed collateral, uint256 amount);\n', '    event ClaimBuyOrder          (address indexed buyer, uint256 indexed batchId, address indexed collateral, uint256 amount);\n', '    event ClaimSellOrder         (address indexed seller, uint256 indexed batchId, address indexed collateral, uint256 fee, uint256 value);\n', '    event ClaimCancelledBuyOrder (address indexed buyer, uint256 indexed batchId, address indexed collateral, uint256 value);\n', '    event ClaimCancelledSellOrder(address indexed seller, uint256 indexed batchId, address indexed collateral, uint256 amount);\n', '    event UpdatePricing          (\n', '        uint256 indexed batchId,\n', '        address indexed collateral,\n', '        uint256 totalBuySpend,\n', '        uint256 totalBuyReturn,\n', '        uint256 totalSellSpend,\n', '        uint256 totalSellReturn\n', '    );\n', '\n', '\n', '    /***** external function *****/\n', '\n', '    /**\n', '     * @notice Initialize market maker\n', '     * @param _controller   The address of the controller contract\n', '     * @param _tokenManager The address of the [bonded token] token manager contract\n', '     * @param _reserve      The address of the reserve [pool] contract\n', '     * @param _beneficiary  The address of the beneficiary [to whom fees are to be sent]\n', '     * @param _formula      The address of the BancorFormula [computation] contract\n', '     * @param _batchBlocks  The number of blocks batches are to last\n', '     * @param _buyFeePct    The fee to be deducted from buy orders [in PCT_BASE]\n', '     * @param _sellFeePct   The fee to be deducted from sell orders [in PCT_BASE]\n', '    */\n', '    function initialize(\n', '        IAragonFundraisingController _controller,\n', '        TokenManager                 _tokenManager,\n', '        IBancorFormula               _formula,\n', '        Vault                        _reserve,\n', '        address                      _beneficiary,\n', '        uint256                      _batchBlocks,\n', '        uint256                      _buyFeePct,\n', '        uint256                      _sellFeePct\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        initialized();\n', '\n', '        require(isContract(_controller),                             ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_tokenManager),                           ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_formula),                                ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_reserve),                                ERROR_CONTRACT_IS_EOA);\n', '        require(_beneficiaryIsValid(_beneficiary),                   ERROR_INVALID_BENEFICIARY);\n', '        require(_batchBlocks > 0,                                    ERROR_INVALID_BATCH_BLOCKS);\n', '        require(_feeIsValid(_buyFeePct) && _feeIsValid(_sellFeePct), ERROR_INVALID_PERCENTAGE);\n', '        require(_tokenManagerSettingIsValid(_tokenManager),          ERROR_INVALID_TM_SETTING);\n', '\n', '        controller = _controller;\n', '        tokenManager = _tokenManager;\n', '        token = ERC20(tokenManager.token());\n', '        formula = _formula;\n', '        reserve = _reserve;\n', '        beneficiary = _beneficiary;\n', '        batchBlocks = _batchBlocks;\n', '        buyFeePct = _buyFeePct;\n', '        sellFeePct = _sellFeePct;\n', '    }\n', '\n', '    /* generic settings related function */\n', '\n', '    /**\n', '     * @notice Open market making [enabling users to open buy and sell orders]\n', '    */\n', '    function open() external auth(OPEN_ROLE) {\n', '        require(!isOpen, ERROR_ALREADY_OPEN);\n', '\n', '        _open();\n', '    }\n', '\n', '    /**\n', '     * @notice Update formula to `_formula`\n', '     * @param _formula The address of the new BancorFormula [computation] contract\n', '    */\n', '    function updateFormula(IBancorFormula _formula) external auth(UPDATE_FORMULA_ROLE) {\n', '        require(isContract(_formula), ERROR_CONTRACT_IS_EOA);\n', '\n', '        _updateFormula(_formula);\n', '    }\n', '\n', '    /**\n', '     * @notice Update beneficiary to `_beneficiary`\n', '     * @param _beneficiary The address of the new beneficiary [to whom fees are to be sent]\n', '    */\n', '    function updateBeneficiary(address _beneficiary) external auth(UPDATE_BENEFICIARY_ROLE) {\n', '        require(_beneficiaryIsValid(_beneficiary), ERROR_INVALID_BENEFICIARY);\n', '\n', '        _updateBeneficiary(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @notice Update fees deducted from buy and sell orders to respectively `@formatPct(_buyFeePct)`% and `@formatPct(_sellFeePct)`%\n', '     * @param _buyFeePct  The new fee to be deducted from buy orders [in PCT_BASE]\n', '     * @param _sellFeePct The new fee to be deducted from sell orders [in PCT_BASE]\n', '    */\n', '    function updateFees(uint256 _buyFeePct, uint256 _sellFeePct) external auth(UPDATE_FEES_ROLE) {\n', '        require(_feeIsValid(_buyFeePct) && _feeIsValid(_sellFeePct), ERROR_INVALID_PERCENTAGE);\n', '\n', '        _updateFees(_buyFeePct, _sellFeePct);\n', '    }\n', '\n', '    /* collateral tokens related functions */\n', '\n', '    /**\n', '     * @notice Add `_collateral.symbol(): string` as a whitelisted collateral token\n', '     * @param _collateral     The address of the collateral token to be whitelisted\n', '     * @param _virtualSupply  The virtual supply to be used for that collateral token [in wei]\n', '     * @param _virtualBalance The virtual balance to be used for that collateral token [in wei]\n', '     * @param _reserveRatio   The reserve ratio to be used for that collateral token [in PPM]\n', '     * @param _slippage       The price slippage below which each batch is to be kept for that collateral token [in PCT_BASE]\n', '    */\n', '    function addCollateralToken(address _collateral, uint256 _virtualSupply, uint256 _virtualBalance, uint32 _reserveRatio, uint256 _slippage)\n', '        external\n', '        auth(ADD_COLLATERAL_TOKEN_ROLE)\n', '    {\n', '        require(isContract(_collateral) || _collateral == ETH, ERROR_INVALID_COLLATERAL);\n', '        require(!_collateralIsWhitelisted(_collateral),        ERROR_COLLATERAL_ALREADY_WHITELISTED);\n', '        require(_reserveRatioIsValid(_reserveRatio),           ERROR_INVALID_RESERVE_RATIO);\n', '\n', '        _addCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    /**\n', '      * @notice Remove `_collateral.symbol(): string` as a whitelisted collateral token\n', '      * @param _collateral The address of the collateral token to be un-whitelisted\n', '    */\n', '    function removeCollateralToken(address _collateral) external auth(REMOVE_COLLATERAL_TOKEN_ROLE) {\n', '        require(_collateralIsWhitelisted(_collateral), ERROR_COLLATERAL_NOT_WHITELISTED);\n', '\n', '        _removeCollateralToken(_collateral);\n', '    }\n', '\n', '    /**\n', '     * @notice Update `_collateral.symbol(): string` collateralization settings\n', '     * @param _collateral     The address of the collateral token whose collateralization settings are to be updated\n', '     * @param _virtualSupply  The new virtual supply to be used for that collateral token [in wei]\n', '     * @param _virtualBalance The new virtual balance to be used for that collateral token [in wei]\n', '     * @param _reserveRatio   The new reserve ratio to be used for that collateral token [in PPM]\n', '     * @param _slippage       The new price slippage below which each batch is to be kept for that collateral token [in PCT_BASE]\n', '    */\n', '    function updateCollateralToken(address _collateral, uint256 _virtualSupply, uint256 _virtualBalance, uint32 _reserveRatio, uint256 _slippage)\n', '        external\n', '        auth(UPDATE_COLLATERAL_TOKEN_ROLE)\n', '    {\n', '        require(_collateralIsWhitelisted(_collateral), ERROR_COLLATERAL_NOT_WHITELISTED);\n', '        require(_reserveRatioIsValid(_reserveRatio),   ERROR_INVALID_RESERVE_RATIO);\n', '\n', '        _updateCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    /* market making related functions */\n', '\n', '    /**\n', '     * @notice Open a buy order worth `@tokenAmount(_collateral, _value)`\n', '     * @param _buyer      The address of the buyer\n', '     * @param _collateral The address of the collateral token to be spent\n', '     * @param _value      The amount of collateral token to be spent\n', '    */\n', '    function openBuyOrder(address _buyer, address _collateral, uint256 _value) external payable auth(OPEN_BUY_ORDER_ROLE) {\n', '        require(isOpen,                                                          ERROR_NOT_OPEN);\n', '        require(_collateralIsWhitelisted(_collateral),                           ERROR_COLLATERAL_NOT_WHITELISTED);\n', '        require(!_batchIsCancelled(_currentBatchId(), _collateral),              ERROR_BATCH_CANCELLED);\n', '        require(_collateralValueIsValid(_buyer, _collateral, _value, msg.value), ERROR_INVALID_COLLATERAL_VALUE);\n', '\n', '        _openBuyOrder(_buyer, _collateral, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Open a sell order worth `@tokenAmount(self.token(): address, _amount)` against `_collateral.symbol(): string`\n', '     * @param _seller     The address of the seller\n', '     * @param _collateral The address of the collateral token to be returned\n', '     * @param _amount     The amount of bonded token to be spent\n', '    */\n', '    function openSellOrder(address _seller, address _collateral, uint256 _amount) external auth(OPEN_SELL_ORDER_ROLE) {\n', '        require(isOpen,                                             ERROR_NOT_OPEN);\n', '        require(_collateralIsWhitelisted(_collateral),              ERROR_COLLATERAL_NOT_WHITELISTED);\n', '        require(!_batchIsCancelled(_currentBatchId(), _collateral), ERROR_BATCH_CANCELLED);\n', '        require(_bondAmountIsValid(_seller, _amount),               ERROR_INVALID_BOND_AMOUNT);\n', '\n', '        _openSellOrder(_seller, _collateral, _amount);\n', '    }\n', '\n', '    /**\n', "     * @notice Claim the results of `_buyer`'s `_collateral.symbol(): string` buy orders from batch #`_batchId`\n", '     * @param _buyer      The address of the user whose buy orders are to be claimed\n', '     * @param _batchId    The id of the batch in which buy orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which buy orders are to be claimed\n', '    */\n', '    function claimBuyOrder(address _buyer, uint256 _batchId, address _collateral) external nonReentrant isInitialized {\n', '        require(_collateralIsWhitelisted(_collateral),       ERROR_COLLATERAL_NOT_WHITELISTED);\n', '        require(_batchIsOver(_batchId),                      ERROR_BATCH_NOT_OVER);\n', '        require(!_batchIsCancelled(_batchId, _collateral),   ERROR_BATCH_CANCELLED);\n', '        require(_userIsBuyer(_batchId, _collateral, _buyer), ERROR_NOTHING_TO_CLAIM);\n', '\n', '        _claimBuyOrder(_buyer, _batchId, _collateral);\n', '    }\n', '\n', '    /**\n', "     * @notice Claim the results of `_seller`'s `_collateral.symbol(): string` sell orders from batch #`_batchId`\n", '     * @param _seller     The address of the user whose sell orders are to be claimed\n', '     * @param _batchId    The id of the batch in which sell orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which sell orders are to be claimed\n', '    */\n', '    function claimSellOrder(address _seller, uint256 _batchId, address _collateral) external nonReentrant isInitialized {\n', '        require(_collateralIsWhitelisted(_collateral),         ERROR_COLLATERAL_NOT_WHITELISTED);\n', '        require(_batchIsOver(_batchId),                        ERROR_BATCH_NOT_OVER);\n', '        require(!_batchIsCancelled(_batchId, _collateral),     ERROR_BATCH_CANCELLED);\n', '        require(_userIsSeller(_batchId, _collateral, _seller), ERROR_NOTHING_TO_CLAIM);\n', '\n', '        _claimSellOrder(_seller, _batchId, _collateral);\n', '    }\n', '\n', '    /**\n', "     * @notice Claim the investments of `_buyer`'s `_collateral.symbol(): string` buy orders from cancelled batch #`_batchId`\n", '     * @param _buyer      The address of the user whose cancelled buy orders are to be claimed\n', '     * @param _batchId    The id of the batch in which cancelled buy orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which cancelled buy orders are to be claimed\n', '    */\n', '    function claimCancelledBuyOrder(address _buyer, uint256 _batchId, address _collateral) external nonReentrant isInitialized {\n', '        require(_batchIsCancelled(_batchId, _collateral),    ERROR_BATCH_NOT_CANCELLED);\n', '        require(_userIsBuyer(_batchId, _collateral, _buyer), ERROR_NOTHING_TO_CLAIM);\n', '\n', '        _claimCancelledBuyOrder(_buyer, _batchId, _collateral);\n', '    }\n', '\n', '    /**\n', "     * @notice Claim the investments of `_seller`'s `_collateral.symbol(): string` sell orders from cancelled batch #`_batchId`\n", '     * @param _seller     The address of the user whose cancelled sell orders are to be claimed\n', '     * @param _batchId    The id of the batch in which cancelled sell orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which cancelled sell orders are to be claimed\n', '    */\n', '    function claimCancelledSellOrder(address _seller, uint256 _batchId, address _collateral) external nonReentrant isInitialized {\n', '        require(_batchIsCancelled(_batchId, _collateral),      ERROR_BATCH_NOT_CANCELLED);\n', '        require(_userIsSeller(_batchId, _collateral, _seller), ERROR_NOTHING_TO_CLAIM);\n', '\n', '        _claimCancelledSellOrder(_seller, _batchId, _collateral);\n', '    }\n', '\n', '    /***** public view functions *****/\n', '\n', '    function getCurrentBatchId() public view isInitialized returns (uint256) {\n', '        return _currentBatchId();\n', '    }\n', '\n', '    function getCollateralToken(address _collateral) public view isInitialized returns (bool, uint256, uint256, uint32, uint256) {\n', '        Collateral storage collateral = collaterals[_collateral];\n', '\n', '        return (collateral.whitelisted, collateral.virtualSupply, collateral.virtualBalance, collateral.reserveRatio, collateral.slippage);\n', '    }\n', '\n', '    function getBatch(uint256 _batchId, address _collateral)\n', '        public view isInitialized\n', '        returns (bool, bool, uint256, uint256, uint32, uint256, uint256, uint256, uint256, uint256)\n', '    {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '\n', '        return (\n', '            batch.initialized,\n', '            batch.cancelled,\n', '            batch.supply,\n', '            batch.balance,\n', '            batch.reserveRatio,\n', '            batch.slippage,\n', '            batch.totalBuySpend,\n', '            batch.totalBuyReturn,\n', '            batch.totalSellSpend,\n', '            batch.totalSellReturn\n', '        );\n', '    }\n', '\n', '    function getStaticPricePPM(uint256 _supply, uint256 _balance, uint32 _reserveRatio) public view isInitialized returns (uint256) {\n', '        return _staticPricePPM(_supply, _balance, _reserveRatio);\n', '    }\n', '\n', '    /***** internal functions *****/\n', '\n', '    /* computation functions */\n', '\n', '    function _staticPricePPM(uint256 _supply, uint256 _balance, uint32 _reserveRatio) internal pure returns (uint256) {\n', '        return uint256(PPM).mul(uint256(PPM)).mul(_balance).div(_supply.mul(uint256(_reserveRatio)));\n', '    }\n', '\n', '    function _currentBatchId() internal view returns (uint256) {\n', '        return (block.number.div(batchBlocks)).mul(batchBlocks);\n', '    }\n', '\n', '    /* check functions */\n', '\n', '    function _beneficiaryIsValid(address _beneficiary) internal pure returns (bool) {\n', '        return _beneficiary != address(0);\n', '    }\n', '\n', '    function _feeIsValid(uint256 _fee) internal pure returns (bool) {\n', '        return _fee < PCT_BASE;\n', '    }\n', '\n', '    function _reserveRatioIsValid(uint32 _reserveRatio) internal pure returns (bool) {\n', '        return _reserveRatio <= PPM;\n', '    }\n', '\n', '    function _tokenManagerSettingIsValid(TokenManager _tokenManager) internal view returns (bool) {\n', '        return _tokenManager.maxAccountTokens() == uint256(-1);\n', '    }\n', '\n', '    function _collateralValueIsValid(address _buyer, address _collateral, uint256 _value, uint256 _msgValue) internal view returns (bool) {\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        if (_collateral == ETH) {\n', '            return _msgValue == _value;\n', '        }\n', '\n', '        return (\n', '            _msgValue == 0 &&\n', '            controller.balanceOf(_buyer, _collateral) >= _value &&\n', '            ERC20(_collateral).allowance(_buyer, address(this)) >= _value\n', '        );\n', '    }\n', '\n', '    function _bondAmountIsValid(address _seller, uint256 _amount) internal view returns (bool) {\n', '        return _amount != 0 && tokenManager.spendableBalanceOf(_seller) >= _amount;\n', '    }\n', '\n', '    function _collateralIsWhitelisted(address _collateral) internal view returns (bool) {\n', '        return collaterals[_collateral].whitelisted;\n', '    }\n', '\n', '    function _batchIsOver(uint256 _batchId) internal view returns (bool) {\n', '        return _batchId < _currentBatchId();\n', '    }\n', '\n', '    function _batchIsCancelled(uint256 _batchId, address _collateral) internal view returns (bool) {\n', '        return metaBatches[_batchId].batches[_collateral].cancelled;\n', '    }\n', '\n', '    function _userIsBuyer(uint256 _batchId, address _collateral, address _user) internal view returns (bool) {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '        return batch.buyers[_user] > 0;\n', '    }\n', '\n', '    function _userIsSeller(uint256 _batchId, address _collateral, address _user) internal view returns (bool) {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '        return batch.sellers[_user] > 0;\n', '    }\n', '\n', '    function _poolBalanceIsSufficient(address _collateral) internal view returns (bool) {\n', '        return controller.balanceOf(address(reserve), _collateral) >= collateralsToBeClaimed[_collateral];\n', '    }\n', '\n', '    function _slippageIsValid(Batch storage _batch, address _collateral) internal view returns (bool) {\n', '        uint256 staticPricePPM = _staticPricePPM(_batch.supply, _batch.balance, _batch.reserveRatio);\n', '        uint256 maximumSlippage = _batch.slippage;\n', '\n', "        // if static price is zero let's consider that every slippage is valid\n", '        if (staticPricePPM == 0) {\n', '            return true;\n', '        }\n', '\n', '        return _buySlippageIsValid(_batch, staticPricePPM, maximumSlippage) && _sellSlippageIsValid(_batch, staticPricePPM, maximumSlippage);\n', '    }\n', '\n', '    function _buySlippageIsValid(Batch storage _batch, uint256 _startingPricePPM, uint256 _maximumSlippage) internal view returns (bool) {\n', '        /**\n', '         * NOTE\n', '         * the case where starting price is zero is handled\n', '         * in the meta function _slippageIsValid()\n', '        */\n', '\n', '        /**\n', '         * NOTE\n', '         * slippage is valid if:\n', '         * totalBuyReturn >= totalBuySpend / (startingPrice * (1 + maxSlippage))\n', '         * totalBuyReturn >= totalBuySpend / ((startingPricePPM / PPM) * (1 + maximumSlippage / PCT_BASE))\n', '         * totalBuyReturn >= totalBuySpend / ((startingPricePPM / PPM) * (1 + maximumSlippage / PCT_BASE))\n', '         * totalBuyReturn >= totalBuySpend / ((startingPricePPM / PPM) * (PCT + maximumSlippage) / PCT_BASE)\n', '         * totalBuyReturn * startingPrice * ( PCT + maximumSlippage) >= totalBuySpend * PCT_BASE * PPM\n', '        */\n', '        if (\n', '            _batch.totalBuyReturn.mul(_startingPricePPM).mul(PCT_BASE.add(_maximumSlippage)) >=\n', '            _batch.totalBuySpend.mul(PCT_BASE).mul(uint256(PPM))\n', '        ) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _sellSlippageIsValid(Batch storage _batch, uint256 _startingPricePPM, uint256 _maximumSlippage) internal view returns (bool) {\n', '        /**\n', '         * NOTE\n', '         * the case where starting price is zero is handled\n', '         * in the meta function _slippageIsValid()\n', '        */\n', '\n', '        // if allowed sell slippage >= 100%\n', '        // then any sell slippage is valid\n', '        if (_maximumSlippage >= PCT_BASE) {\n', '            return true;\n', '        }\n', '\n', '        /**\n', '         * NOTE\n', '         * slippage is valid if\n', '         * totalSellReturn >= startingPrice * (1 - maxSlippage) * totalBuySpend\n', '         * totalSellReturn >= (startingPricePPM / PPM) * (1 - maximumSlippage / PCT_BASE) * totalBuySpend\n', '         * totalSellReturn >= (startingPricePPM / PPM) * (PCT_BASE - maximumSlippage) * totalBuySpend / PCT_BASE\n', '         * totalSellReturn * PCT_BASE * PPM = startingPricePPM * (PCT_BASE - maximumSlippage) * totalBuySpend\n', '        */\n', '\n', '        if (\n', '            _batch.totalSellReturn.mul(PCT_BASE).mul(uint256(PPM)) >=\n', '            _startingPricePPM.mul(PCT_BASE.sub(_maximumSlippage)).mul(_batch.totalSellSpend)\n', '        ) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /* initialization functions */\n', '\n', '    function _currentBatch(address _collateral) internal returns (uint256, Batch storage) {\n', '        uint256 batchId = _currentBatchId();\n', '        MetaBatch storage metaBatch = metaBatches[batchId];\n', '        Batch storage batch = metaBatch.batches[_collateral];\n', '\n', '        if (!metaBatch.initialized) {\n', '            /**\n', '             * NOTE\n', '             * all collateral batches should be initialized with the same supply to\n', '             * avoid price manipulation between different collaterals in the same meta-batch\n', "             * we don't need to do the same with collateral balances as orders against one collateral\n", "             * can't affect the pool's balance against another collateral and tap is a step-function\n", '             * of the meta-batch duration\n', '            */\n', '\n', '            /**\n', '             * NOTE\n', '             * realSupply(metaBatch) = totalSupply(metaBatchInitialization) + tokensToBeMinted(metaBatchInitialization)\n', '             * 1. buy and sell orders incoming during the current meta-batch and affecting totalSupply or tokensToBeMinted\n', '             * should not be taken into account in the price computation [they are already a part of the batched pricing computation]\n', '             * 2. the only way for totalSupply to be modified during a meta-batch [outside of incoming buy and sell orders]\n', '             * is for buy orders from previous meta-batches to be claimed [and tokens to be minted]:\n', '             * as such totalSupply(metaBatch) + tokenToBeMinted(metaBatch) will always equal totalSupply(metaBatchInitialization) + tokenToBeMinted(metaBatchInitialization)\n', '            */\n', '            metaBatch.realSupply = token.totalSupply().add(tokensToBeMinted);\n', '            metaBatch.buyFeePct = buyFeePct;\n', '            metaBatch.sellFeePct = sellFeePct;\n', '            metaBatch.formula = formula;\n', '            metaBatch.initialized = true;\n', '\n', '            emit NewMetaBatch(batchId, metaBatch.realSupply, metaBatch.buyFeePct, metaBatch.sellFeePct, metaBatch.formula);\n', '        }\n', '\n', '        if (!batch.initialized) {\n', '            /**\n', '             * NOTE\n', '             * supply(batch) = realSupply(metaBatch) + virtualSupply(batchInitialization)\n', '             * virtualSupply can technically be updated during a batch: the on-going batch will still use\n', "             * its value at the time of initialization [it's up to the updater to act wisely]\n", '            */\n', '\n', '            /**\n', '             * NOTE\n', '             * balance(batch) = poolBalance(batchInitialization) - collateralsToBeClaimed(batchInitialization) + virtualBalance(metaBatchInitialization)\n', '             * 1. buy and sell orders incoming during the current batch and affecting poolBalance or collateralsToBeClaimed\n', '             * should not be taken into account in the price computation [they are already a part of the batched price computation]\n', '             * 2. the only way for poolBalance to be modified during a batch [outside of incoming buy and sell orders]\n', '             * is for sell orders from previous meta-batches to be claimed [and collateral to be transfered] as the tap is a step-function of the meta-batch duration:\n', '             * as such poolBalance(batch) - collateralsToBeClaimed(batch) will always equal poolBalance(batchInitialization) - collateralsToBeClaimed(batchInitialization)\n', '             * 3. virtualBalance can technically be updated during a batch: the on-going batch will still use\n', "             * its value at the time of initialization [it's up to the updater to act wisely]\n", '            */\n', '            controller.updateTappedAmount(_collateral);\n', '            batch.supply = metaBatch.realSupply.add(collaterals[_collateral].virtualSupply);\n', '            batch.balance = controller.balanceOf(address(reserve), _collateral).add(collaterals[_collateral].virtualBalance).sub(collateralsToBeClaimed[_collateral]);\n', '            batch.reserveRatio = collaterals[_collateral].reserveRatio;\n', '            batch.slippage = collaterals[_collateral].slippage;\n', '            batch.initialized = true;\n', '\n', '            emit NewBatch(batchId, _collateral, batch.supply, batch.balance, batch.reserveRatio, batch.slippage);\n', '        }\n', '\n', '        return (batchId, batch);\n', '    }\n', '\n', '    /* state modifiying functions */\n', '\n', '    function _open() internal {\n', '        isOpen = true;\n', '\n', '        emit Open();\n', '    }\n', '\n', '    function _updateBeneficiary(address _beneficiary) internal {\n', '        beneficiary = _beneficiary;\n', '\n', '        emit UpdateBeneficiary(_beneficiary);\n', '    }\n', '\n', '    function _updateFormula(IBancorFormula _formula) internal {\n', '        formula = _formula;\n', '\n', '        emit UpdateFormula(address(_formula));\n', '    }\n', '\n', '    function _updateFees(uint256 _buyFeePct, uint256 _sellFeePct) internal {\n', '        buyFeePct = _buyFeePct;\n', '        sellFeePct = _sellFeePct;\n', '\n', '        emit UpdateFees(_buyFeePct, _sellFeePct);\n', '    }\n', '\n', '    function _cancelCurrentBatch(address _collateral) internal {\n', '        (uint256 batchId, Batch storage batch) = _currentBatch(_collateral);\n', '        if (!batch.cancelled) {\n', '            batch.cancelled = true;\n', '\n', '            // bought bonds are cancelled but sold bonds are due back\n', '            // bought collaterals are cancelled but sold collaterals are due back\n', '            tokensToBeMinted = tokensToBeMinted.sub(batch.totalBuyReturn).add(batch.totalSellSpend);\n', '            collateralsToBeClaimed[_collateral] = collateralsToBeClaimed[_collateral].add(batch.totalBuySpend).sub(batch.totalSellReturn);\n', '\n', '            emit CancelBatch(batchId, _collateral);\n', '        }\n', '    }\n', '\n', '    function _addCollateralToken(address _collateral, uint256 _virtualSupply, uint256 _virtualBalance, uint32 _reserveRatio, uint256 _slippage)\n', '        internal\n', '    {\n', '        collaterals[_collateral].whitelisted = true;\n', '        collaterals[_collateral].virtualSupply = _virtualSupply;\n', '        collaterals[_collateral].virtualBalance = _virtualBalance;\n', '        collaterals[_collateral].reserveRatio = _reserveRatio;\n', '        collaterals[_collateral].slippage = _slippage;\n', '\n', '        emit AddCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    function _removeCollateralToken(address _collateral) internal {\n', '        _cancelCurrentBatch(_collateral);\n', '\n', '        Collateral storage collateral = collaterals[_collateral];\n', '        delete collateral.whitelisted;\n', '        delete collateral.virtualSupply;\n', '        delete collateral.virtualBalance;\n', '        delete collateral.reserveRatio;\n', '        delete collateral.slippage;\n', '\n', '        emit RemoveCollateralToken(_collateral);\n', '    }\n', '\n', '    function _updateCollateralToken(\n', '        address _collateral,\n', '        uint256 _virtualSupply,\n', '        uint256 _virtualBalance,\n', '        uint32  _reserveRatio,\n', '        uint256 _slippage\n', '    )\n', '        internal\n', '    {\n', '        collaterals[_collateral].virtualSupply = _virtualSupply;\n', '        collaterals[_collateral].virtualBalance = _virtualBalance;\n', '        collaterals[_collateral].reserveRatio = _reserveRatio;\n', '        collaterals[_collateral].slippage = _slippage;\n', '\n', '        emit UpdateCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    function _openBuyOrder(address _buyer, address _collateral, uint256 _value) internal {\n', '        (uint256 batchId, Batch storage batch) = _currentBatch(_collateral);\n', '\n', '        // deduct fee\n', '        uint256 fee = _value.mul(metaBatches[batchId].buyFeePct).div(PCT_BASE);\n', '        uint256 value = _value.sub(fee);\n', '\n', '        // collect fee and collateral\n', '        if (fee > 0) {\n', '            _transfer(_buyer, beneficiary, _collateral, fee);\n', '        }\n', '        _transfer(_buyer, address(reserve), _collateral, value);\n', '\n', '        // save batch\n', '        uint256 deprecatedBuyReturn = batch.totalBuyReturn;\n', '        uint256 deprecatedSellReturn = batch.totalSellReturn;\n', '\n', '        // update batch\n', '        batch.totalBuySpend = batch.totalBuySpend.add(value);\n', '        batch.buyers[_buyer] = batch.buyers[_buyer].add(value);\n', '\n', '        // update pricing\n', '        _updatePricing(batch, batchId, _collateral);\n', '\n', '        // update the amount of tokens to be minted and collaterals to be claimed\n', '        tokensToBeMinted = tokensToBeMinted.sub(deprecatedBuyReturn).add(batch.totalBuyReturn);\n', '        collateralsToBeClaimed[_collateral] = collateralsToBeClaimed[_collateral].sub(deprecatedSellReturn).add(batch.totalSellReturn);\n', '\n', '        // sanity checks\n', '        require(_slippageIsValid(batch, _collateral), ERROR_SLIPPAGE_EXCEEDS_LIMIT);\n', '\n', '        emit OpenBuyOrder(_buyer, batchId, _collateral, fee, value);\n', '    }\n', '\n', '    function _openSellOrder(address _seller, address _collateral, uint256 _amount) internal {\n', '        (uint256 batchId, Batch storage batch) = _currentBatch(_collateral);\n', '\n', '        // burn bonds\n', '        tokenManager.burn(_seller, _amount);\n', '\n', '        // save batch\n', '        uint256 deprecatedBuyReturn = batch.totalBuyReturn;\n', '        uint256 deprecatedSellReturn = batch.totalSellReturn;\n', '\n', '        // update batch\n', '        batch.totalSellSpend = batch.totalSellSpend.add(_amount);\n', '        batch.sellers[_seller] = batch.sellers[_seller].add(_amount);\n', '\n', '        // update pricing\n', '        _updatePricing(batch, batchId, _collateral);\n', '\n', '        // update the amount of tokens to be minted and collaterals to be claimed\n', '        tokensToBeMinted = tokensToBeMinted.sub(deprecatedBuyReturn).add(batch.totalBuyReturn);\n', '        collateralsToBeClaimed[_collateral] = collateralsToBeClaimed[_collateral].sub(deprecatedSellReturn).add(batch.totalSellReturn);\n', '\n', '        // sanity checks\n', '        require(_slippageIsValid(batch, _collateral), ERROR_SLIPPAGE_EXCEEDS_LIMIT);\n', '        require(_poolBalanceIsSufficient(_collateral), ERROR_INSUFFICIENT_POOL_BALANCE);\n', '\n', '        emit OpenSellOrder(_seller, batchId, _collateral, _amount);\n', '    }\n', '\n', '    function _claimBuyOrder(address _buyer, uint256 _batchId, address _collateral) internal {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '        uint256 buyReturn = (batch.buyers[_buyer].mul(batch.totalBuyReturn)).div(batch.totalBuySpend);\n', '\n', '        batch.buyers[_buyer] = 0;\n', '\n', '        if (buyReturn > 0) {\n', '            tokensToBeMinted = tokensToBeMinted.sub(buyReturn);\n', '            tokenManager.mint(_buyer, buyReturn);\n', '        }\n', '\n', '        emit ClaimBuyOrder(_buyer, _batchId, _collateral, buyReturn);\n', '    }\n', '\n', '    function _claimSellOrder(address _seller, uint256 _batchId, address _collateral) internal {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '        uint256 saleReturn = (batch.sellers[_seller].mul(batch.totalSellReturn)).div(batch.totalSellSpend);\n', '        uint256 fee = saleReturn.mul(metaBatches[_batchId].sellFeePct).div(PCT_BASE);\n', '        uint256 value = saleReturn.sub(fee);\n', '\n', '        batch.sellers[_seller] = 0;\n', '\n', '        if (value > 0) {\n', '            collateralsToBeClaimed[_collateral] = collateralsToBeClaimed[_collateral].sub(saleReturn);\n', '            reserve.transfer(_collateral, _seller, value);\n', '        }\n', '        if (fee > 0) {\n', '            reserve.transfer(_collateral, beneficiary, fee);\n', '        }\n', '\n', '\n', '        emit ClaimSellOrder(_seller, _batchId, _collateral, fee, value);\n', '    }\n', '\n', '    function _claimCancelledBuyOrder(address _buyer, uint256 _batchId, address _collateral) internal {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '\n', '        uint256 value = batch.buyers[_buyer];\n', '        batch.buyers[_buyer] = 0;\n', '\n', '        if (value > 0) {\n', '            collateralsToBeClaimed[_collateral] = collateralsToBeClaimed[_collateral].sub(value);\n', '            reserve.transfer(_collateral, _buyer, value);\n', '        }\n', '\n', '        emit ClaimCancelledBuyOrder(_buyer, _batchId, _collateral, value);\n', '    }\n', '\n', '    function _claimCancelledSellOrder(address _seller, uint256 _batchId, address _collateral) internal {\n', '        Batch storage batch = metaBatches[_batchId].batches[_collateral];\n', '\n', '        uint256 amount = batch.sellers[_seller];\n', '        batch.sellers[_seller] = 0;\n', '\n', '        if (amount > 0) {\n', '            tokensToBeMinted = tokensToBeMinted.sub(amount);\n', '            tokenManager.mint(_seller, amount);\n', '        }\n', '\n', '        emit ClaimCancelledSellOrder(_seller, _batchId, _collateral, amount);\n', '    }\n', '\n', '    function _updatePricing(Batch storage batch, uint256 _batchId, address _collateral) internal {\n', "        // the situation where there are no buy nor sell orders can't happen [keep commented]\n", '        // if (batch.totalSellSpend == 0 && batch.totalBuySpend == 0)\n', '        //     return;\n', '\n', '        // static price is the current exact price in collateral\n', '        // per token according to the initial state of the batch\n', '        // [expressed in PPM for precision sake]\n', '        uint256 staticPricePPM = _staticPricePPM(batch.supply, batch.balance, batch.reserveRatio);\n', '\n', '        // [NOTE]\n', '        // if staticPrice is zero then resultOfSell [= 0] <= batch.totalBuySpend\n', '        // so totalSellReturn will be zero and totalBuyReturn will be\n', '        // computed normally along the formula\n', '\n', '        // 1. we want to find out if buy orders are worth more sell orders [or vice-versa]\n', '        // 2. we thus check the return of sell orders at the current exact price\n', '        // 3. if the return of sell orders is larger than the pending buys,\n', '        //    there are more sells than buys [and vice-versa]\n', '        uint256 resultOfSell = batch.totalSellSpend.mul(staticPricePPM).div(uint256(PPM));\n', '\n', '        if (resultOfSell > batch.totalBuySpend) {\n', '            // >> sell orders are worth more than buy orders\n', '\n', '            // 1. first we execute all pending buy orders at the current exact\n', '            // price because there is at least one sell order for each buy order\n', '            // 2. then the final sell return is the addition of this first\n', '            // matched return with the remaining bonding curve return\n', '\n', '            // the number of tokens bought as a result of all buy orders matched at the\n', '            // current exact price [which is less than the total amount of tokens to be sold]\n', '            batch.totalBuyReturn = batch.totalBuySpend.mul(uint256(PPM)).div(staticPricePPM);\n', '            // the number of tokens left over to be sold along the curve which is the difference\n', '            // between the original total sell order and the result of all the buy orders\n', '            uint256 remainingSell = batch.totalSellSpend.sub(batch.totalBuyReturn);\n', '            // the amount of collateral generated by selling tokens left over to be sold\n', '            // along the bonding curve in the batch initial state [as if the buy orders\n', '            // never existed and the sell order was just smaller than originally thought]\n', '            uint256 remainingSellReturn = metaBatches[_batchId].formula.calculateSaleReturn(batch.supply, batch.balance, batch.reserveRatio, remainingSell);\n', '            // the total result of all sells is the original amount of buys which were matched\n', '            // plus the remaining sells which were executed along the bonding curve\n', '            batch.totalSellReturn = batch.totalBuySpend.add(remainingSellReturn);\n', '        } else {\n', '            // >> buy orders are worth more than sell orders\n', '\n', '            // 1. first we execute all pending sell orders at the current exact\n', '            // price because there is at least one buy order for each sell order\n', '            // 2. then the final buy return is the addition of this first\n', '            // matched return with the remaining bonding curve return\n', '\n', '            // the number of collaterals bought as a result of all sell orders matched at the\n', '            // current exact price [which is less than the total amount of collateral to be spent]\n', '            batch.totalSellReturn = resultOfSell;\n', '            // the number of collaterals left over to be spent along the curve which is the difference\n', '            // between the original total buy order and the result of all the sell orders\n', '            uint256 remainingBuy = batch.totalBuySpend.sub(resultOfSell);\n', '            // the amount of tokens generated by selling collaterals left over to be spent\n', '            // along the bonding curve in the batch initial state [as if the sell orders\n', '            // never existed and the buy order was just smaller than originally thought]\n', '            uint256 remainingBuyReturn = metaBatches[_batchId].formula.calculatePurchaseReturn(batch.supply, batch.balance, batch.reserveRatio, remainingBuy);\n', '            // the total result of all buys is the original amount of buys which were matched\n', '            // plus the remaining buys which were executed along the bonding curve\n', '            batch.totalBuyReturn = batch.totalSellSpend.add(remainingBuyReturn);\n', '        }\n', '\n', '\n', '        emit UpdatePricing(_batchId, _collateral, batch.totalBuySpend, batch.totalBuyReturn, batch.totalSellSpend, batch.totalSellReturn);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, address _collateralToken, uint256 _amount) internal {\n', '        if (_collateralToken == ETH) {\n', '            _to.transfer(_amount);\n', '        } else {\n', '            require(ERC20(_collateralToken).safeTransferFrom(_from, _to, _amount), ERROR_TRANSFER_FROM_FAILED);\n', '        }\n', '    }\n', '}\n', '\n', '// File: @ablack/fundraising-shared-interfaces/contracts/IPresale.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract IPresale {\n', '    function open() external;\n', '    function close() external;\n', '    function contribute(address _contributor, uint256 _value) external payable;\n', '    function refund(address _contributor, uint256 _vestedPurchaseId) external;\n', '    function contributionToTokens(uint256 _value) public view returns (uint256);\n', '    function contributionToken() public view returns (address);\n', ' }\n', '\n', '// File: @ablack/fundraising-shared-interfaces/contracts/ITap.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract ITap {\n', '     function updateBeneficiary(address _beneficiary) external;\n', '     function updateMaximumTapRateIncreasePct(uint256 _maximumTapRateIncreasePct) external;\n', '     function updateMaximumTapFloorDecreasePct(uint256 _maximumTapFloorDecreasePct) external;\n', '     function addTappedToken(address _token, uint256 _rate, uint256 _floor) external;\n', '     function updateTappedToken(address _token, uint256 _rate, uint256 _floor) external;\n', '     function resetTappedToken(address _token) external;\n', '     function updateTappedAmount(address _token) external;\n', '     function withdraw(address _token) external;\n', '     function getMaximumWithdrawal(address _token) public view returns (uint256);\n', '     function rates(address _token) public view returns (uint256);\n', ' }\n', '\n', '// File: @ablack/fundraising-aragon-fundraising/contracts/AragonFundraisingController.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AragonFundraisingController is EtherTokenConstant, IsContract, IAragonFundraisingController, AragonApp {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath  for uint256;\n', '\n', '    /**\n', '    Hardcoded constants to save gas\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE                    = keccak256("UPDATE_BENEFICIARY_ROLE");\n', '    bytes32 public constant UPDATE_FEES_ROLE                           = keccak256("UPDATE_FEES_ROLE");\n', '    bytes32 public constant ADD_COLLATERAL_TOKEN_ROLE                  = keccak256("ADD_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant REMOVE_COLLATERAL_TOKEN_ROLE               = keccak256("REMOVE_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant UPDATE_COLLATERAL_TOKEN_ROLE               = keccak256("UPDATE_COLLATERAL_TOKEN_ROLE");\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE  = keccak256("UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE");\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE = keccak256("UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE");\n', '    bytes32 public constant ADD_TOKEN_TAP_ROLE                         = keccak256("ADD_TOKEN_TAP_ROLE");\n', '    bytes32 public constant UPDATE_TOKEN_TAP_ROLE                      = keccak256("UPDATE_TOKEN_TAP_ROLE");\n', '    bytes32 public constant OPEN_PRESALE_ROLE                          = keccak256("OPEN_PRESALE_ROLE");\n', '    bytes32 public constant OPEN_TRADING_ROLE                          = keccak256("OPEN_TRADING_ROLE");\n', '    bytes32 public constant CONTRIBUTE_ROLE                            = keccak256("CONTRIBUTE_ROLE");\n', '    bytes32 public constant OPEN_BUY_ORDER_ROLE                        = keccak256("OPEN_BUY_ORDER_ROLE");\n', '    bytes32 public constant OPEN_SELL_ORDER_ROLE                       = keccak256("OPEN_SELL_ORDER_ROLE");\n', '    bytes32 public constant WITHDRAW_ROLE                              = keccak256("WITHDRAW_ROLE");\n', '    */\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE                    = 0xf7ea2b80c7b6a2cab2c11d2290cb005c3748397358a25e17113658c83b732593;\n', '    bytes32 public constant UPDATE_FEES_ROLE                           = 0x5f9be2932ed3a723f295a763be1804c7ebfd1a41c1348fb8bdf5be1c5cdca822;\n', '    bytes32 public constant ADD_COLLATERAL_TOKEN_ROLE                  = 0x217b79cb2bc7760defc88529853ef81ab33ae5bb315408ce9f5af09c8776662d;\n', '    bytes32 public constant REMOVE_COLLATERAL_TOKEN_ROLE               = 0x2044e56de223845e4be7d0a6f4e9a29b635547f16413a6d1327c58d9db438ee2;\n', '    bytes32 public constant UPDATE_COLLATERAL_TOKEN_ROLE               = 0xe0565c2c43e0d841e206bb36a37f12f22584b4652ccee6f9e0c071b697a2e13d;\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE  = 0x5d94de7e429250eee4ff97e30ab9f383bea3cd564d6780e0a9e965b1add1d207;\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE = 0x57c9c67896cf0a4ffe92cbea66c2f7c34380af06bf14215dabb078cf8a6d99e1;\n', '    bytes32 public constant ADD_TOKEN_TAP_ROLE                         = 0xbc9cb5e3f7ce81c4fd021d86a4bcb193dee9df315b540808c3ed59a81e596207;\n', '    bytes32 public constant UPDATE_TOKEN_TAP_ROLE                      = 0xdb8c88bedbc61ea0f92e1ce46da0b7a915affbd46d1c76c4bbac9a209e4a8416;\n', '    bytes32 public constant OPEN_PRESALE_ROLE                          = 0xf323aa41eef4850a8ae7ebd047d4c89f01ce49c781f3308be67303db9cdd48c2;\n', '    bytes32 public constant OPEN_TRADING_ROLE                          = 0x26ce034204208c0bbca4c8a793d17b99e546009b1dd31d3c1ef761f66372caf6;\n', '    bytes32 public constant CONTRIBUTE_ROLE                            = 0x9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07;\n', '    bytes32 public constant OPEN_BUY_ORDER_ROLE                        = 0xa589c8f284b76fc8d510d9d553485c47dbef1b0745ae00e0f3fd4e28fcd77ea7;\n', '    bytes32 public constant OPEN_SELL_ORDER_ROLE                       = 0xd68ba2b769fa37a2a7bd4bed9241b448bc99eca41f519ef037406386a8f291c0;\n', '    bytes32 public constant WITHDRAW_ROLE                              = 0x5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec;\n', '\n', '    uint256 public constant TO_RESET_CAP = 10;\n', '\n', '    string private constant ERROR_CONTRACT_IS_EOA = "FUNDRAISING_CONTRACT_IS_EOA";\n', '    string private constant ERROR_INVALID_TOKENS  = "FUNDRAISING_INVALID_TOKENS";\n', '\n', '    IPresale                 public presale;\n', '    BatchedBancorMarketMaker public marketMaker;\n', '    Agent                    public reserve;\n', '    ITap                     public tap;\n', '    address[]                public toReset;\n', '\n', '\n', '    /***** external functions *****/\n', '\n', '    /**\n', '     * @notice Initialize Aragon Fundraising controller\n', '     * @param _presale     The address of the presale contract\n', '     * @param _marketMaker The address of the market maker contract\n', '     * @param _reserve     The address of the reserve [pool] contract\n', '     * @param _tap         The address of the tap contract\n', '     * @param _toReset     The addresses of the tokens whose tap timestamps are to be reset [when presale is closed and trading is open]\n', '    */\n', '    function initialize(\n', '        IPresale                 _presale,\n', '        BatchedBancorMarketMaker _marketMaker,\n', '        Agent                    _reserve,\n', '        ITap                     _tap,\n', '        address[]                _toReset\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        require(isContract(_presale),           ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_marketMaker),       ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_reserve),           ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_tap),               ERROR_CONTRACT_IS_EOA);\n', '        require(_toReset.length < TO_RESET_CAP, ERROR_INVALID_TOKENS);\n', '\n', '        initialized();\n', '\n', '        presale = _presale;\n', '        marketMaker = _marketMaker;\n', '        reserve = _reserve;\n', '        tap = _tap;\n', '\n', '        for (uint256 i = 0; i < _toReset.length; i++) {\n', '            require(_tokenIsContractOrETH(_toReset[i]), ERROR_INVALID_TOKENS);\n', '            toReset.push(_toReset[i]);\n', '        }\n', '    }\n', '\n', '    /* generic settings related function */\n', '\n', '    /**\n', '     * @notice Update beneficiary to `_beneficiary`\n', '     * @param _beneficiary The address of the new beneficiary\n', '    */\n', '    function updateBeneficiary(address _beneficiary) external auth(UPDATE_BENEFICIARY_ROLE) {\n', '        marketMaker.updateBeneficiary(_beneficiary);\n', '        tap.updateBeneficiary(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @notice Update fees deducted from buy and sell orders to respectively `@formatPct(_buyFeePct)`% and `@formatPct(_sellFeePct)`%\n', '     * @param _buyFeePct  The new fee to be deducted from buy orders [in PCT_BASE]\n', '     * @param _sellFeePct The new fee to be deducted from sell orders [in PCT_BASE]\n', '    */\n', '    function updateFees(uint256 _buyFeePct, uint256 _sellFeePct) external auth(UPDATE_FEES_ROLE) {\n', '        marketMaker.updateFees(_buyFeePct, _sellFeePct);\n', '    }\n', '\n', '    /* presale related functions */\n', '\n', '    /**\n', '     * @notice Open presale\n', '    */\n', '    function openPresale() external auth(OPEN_PRESALE_ROLE) {\n', '        presale.open();\n', '    }\n', '\n', '    /**\n', '     * @notice Close presale and open trading\n', '    */\n', '    function closePresale() external isInitialized {\n', '        presale.close();\n', '    }\n', '\n', '    /**\n', '     * @notice Contribute to the presale up to `@tokenAmount(self.contributionToken(): address, _value)`\n', '     * @param _value The amount of contribution token to be spent\n', '    */\n', '    function contribute(uint256 _value) external payable auth(CONTRIBUTE_ROLE) {\n', '        presale.contribute.value(msg.value)(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', "     * @notice Refund `_contributor`'s presale contribution #`_vestedPurchaseId`\n", '     * @param _contributor      The address of the contributor whose presale contribution is to be refunded\n', '     * @param _vestedPurchaseId The id of the contribution to be refunded\n', '    */\n', '    function refund(address _contributor, uint256 _vestedPurchaseId) external isInitialized {\n', '        presale.refund(_contributor, _vestedPurchaseId);\n', '    }\n', '\n', '    /* market making related functions */\n', '\n', '    /**\n', '     * @notice Open trading [enabling users to open buy and sell orders]\n', '    */\n', '    function openTrading() external auth(OPEN_TRADING_ROLE) {\n', '        for (uint256 i = 0; i < toReset.length; i++) {\n', '            if (tap.rates(toReset[i]) != uint256(0)) {\n', '                tap.resetTappedToken(toReset[i]);\n', '            }\n', '        }\n', '\n', '        marketMaker.open();\n', '    }\n', '\n', '    /**\n', '     * @notice Open a buy order worth `@tokenAmount(_collateral, _value)`\n', '     * @param _collateral The address of the collateral token to be spent\n', '     * @param _value      The amount of collateral token to be spent\n', '    */\n', '    function openBuyOrder(address _collateral, uint256 _value) external payable auth(OPEN_BUY_ORDER_ROLE) {\n', '        marketMaker.openBuyOrder.value(msg.value)(msg.sender, _collateral, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Open a sell order worth `@tokenAmount(self.token(): address, _amount)` against `_collateral.symbol(): string`\n', '     * @param _collateral The address of the collateral token to be returned\n', '     * @param _amount     The amount of bonded token to be spent\n', '    */\n', '    function openSellOrder(address _collateral, uint256 _amount) external auth(OPEN_SELL_ORDER_ROLE) {\n', '        marketMaker.openSellOrder(msg.sender, _collateral, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim the results of `_collateral.symbol(): string` buy orders from batch #`_batchId`\n', '     * @param _buyer      The address of the user whose buy orders are to be claimed\n', '     * @param _batchId    The id of the batch in which buy orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which buy orders are to be claimed\n', '    */\n', '    function claimBuyOrder(address _buyer, uint256 _batchId, address _collateral) external isInitialized {\n', '        marketMaker.claimBuyOrder(_buyer, _batchId, _collateral);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim the results of `_collateral.symbol(): string` sell orders from batch #`_batchId`\n', '     * @param _seller     The address of the user whose sell orders are to be claimed\n', '     * @param _batchId    The id of the batch in which sell orders are to be claimed\n', '     * @param _collateral The address of the collateral token against which sell orders are to be claimed\n', '    */\n', '    function claimSellOrder(address _seller, uint256 _batchId, address _collateral) external isInitialized {\n', '        marketMaker.claimSellOrder(_seller, _batchId, _collateral);\n', '    }\n', '\n', '    /* collateral tokens related functions */\n', '\n', '    /**\n', '     * @notice Add `_collateral.symbol(): string` as a whitelisted collateral token\n', '     * @param _collateral     The address of the collateral token to be whitelisted\n', '     * @param _virtualSupply  The virtual supply to be used for that collateral token [in wei]\n', '     * @param _virtualBalance The virtual balance to be used for that collateral token [in wei]\n', '     * @param _reserveRatio   The reserve ratio to be used for that collateral token [in PPM]\n', '     * @param _slippage       The price slippage below which each market making batch is to be kept for that collateral token [in PCT_BASE]\n', '     * @param _rate           The rate at which that token is to be tapped [in wei / block]\n', '     * @param _floor          The floor above which the reserve [pool] balance for that token is to be kept [in wei]\n', '    */\n', '    function addCollateralToken(\n', '        address _collateral,\n', '        uint256 _virtualSupply,\n', '        uint256 _virtualBalance,\n', '        uint32  _reserveRatio,\n', '        uint256 _slippage,\n', '        uint256 _rate,\n', '        uint256 _floor\n', '    )\n', '    \texternal\n', '        auth(ADD_COLLATERAL_TOKEN_ROLE)\n', '    {\n', '        marketMaker.addCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '        if (_collateral != ETH) {\n', '            reserve.addProtectedToken(_collateral);\n', '        }\n', '        if (_rate > 0) {\n', '            tap.addTappedToken(_collateral, _rate, _floor);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Re-add `_collateral.symbol(): string` as a whitelisted collateral token [if it has been un-whitelisted in the past]\n', '     * @param _collateral     The address of the collateral token to be whitelisted\n', '     * @param _virtualSupply  The virtual supply to be used for that collateral token [in wei]\n', '     * @param _virtualBalance The virtual balance to be used for that collateral token [in wei]\n', '     * @param _reserveRatio   The reserve ratio to be used for that collateral token [in PPM]\n', '     * @param _slippage       The price slippage below which each market making batch is to be kept for that collateral token [in PCT_BASE]\n', '    */\n', '    function reAddCollateralToken(\n', '        address _collateral,\n', '        uint256 _virtualSupply,\n', '        uint256 _virtualBalance,\n', '        uint32  _reserveRatio,\n', '        uint256 _slippage\n', '    )\n', '    \texternal\n', '        auth(ADD_COLLATERAL_TOKEN_ROLE)\n', '    {\n', '        marketMaker.addCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    /**\n', '      * @notice Remove `_collateral.symbol(): string` as a whitelisted collateral token\n', '      * @param _collateral The address of the collateral token to be un-whitelisted\n', '    */\n', '    function removeCollateralToken(address _collateral) external auth(REMOVE_COLLATERAL_TOKEN_ROLE) {\n', '        marketMaker.removeCollateralToken(_collateral);\n', '        // the token should still be tapped to avoid being locked\n', '        // the token should still be protected to avoid being spent\n', '    }\n', '\n', '    /**\n', '     * @notice Update `_collateral.symbol(): string` collateralization settings\n', '     * @param _collateral     The address of the collateral token whose collateralization settings are to be updated\n', '     * @param _virtualSupply  The new virtual supply to be used for that collateral token [in wei]\n', '     * @param _virtualBalance The new virtual balance to be used for that collateral token [in wei]\n', '     * @param _reserveRatio   The new reserve ratio to be used for that collateral token [in PPM]\n', '     * @param _slippage       The new price slippage below which each market making batch is to be kept for that collateral token [in PCT_BASE]\n', '    */\n', '    function updateCollateralToken(\n', '        address _collateral,\n', '        uint256 _virtualSupply,\n', '        uint256 _virtualBalance,\n', '        uint32  _reserveRatio,\n', '        uint256 _slippage\n', '    )\n', '        external\n', '        auth(UPDATE_COLLATERAL_TOKEN_ROLE)\n', '    {\n', '        marketMaker.updateCollateralToken(_collateral, _virtualSupply, _virtualBalance, _reserveRatio, _slippage);\n', '    }\n', '\n', '    /* tap related functions */\n', '\n', '    /**\n', '     * @notice Update maximum tap rate increase percentage to `@formatPct(_maximumTapRateIncreasePct)`%\n', '     * @param _maximumTapRateIncreasePct The new maximum tap rate increase percentage to be allowed [in PCT_BASE]\n', '    */\n', '    function updateMaximumTapRateIncreasePct(uint256 _maximumTapRateIncreasePct) external auth(UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE) {\n', '        tap.updateMaximumTapRateIncreasePct(_maximumTapRateIncreasePct);\n', '    }\n', '\n', '    /**\n', '     * @notice Update maximum tap floor decrease percentage to `@formatPct(_maximumTapFloorDecreasePct)`%\n', '     * @param _maximumTapFloorDecreasePct The new maximum tap floor decrease percentage to be allowed [in PCT_BASE]\n', '    */\n', '    function updateMaximumTapFloorDecreasePct(uint256 _maximumTapFloorDecreasePct) external auth(UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE) {\n', '        tap.updateMaximumTapFloorDecreasePct(_maximumTapFloorDecreasePct);\n', '    }\n', '\n', '    /**\n', '     * @notice Add tap for `_token.symbol(): string` with a rate of `@tokenAmount(_token, _rate)` per block and a floor of `@tokenAmount(_token, _floor)`\n', '     * @param _token The address of the token to be tapped\n', '     * @param _rate  The rate at which that token is to be tapped [in wei / block]\n', '     * @param _floor The floor above which the reserve [pool] balance for that token is to be kept [in wei]\n', '    */\n', '    function addTokenTap(address _token, uint256 _rate, uint256 _floor) external auth(ADD_TOKEN_TAP_ROLE) {\n', '        tap.addTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    /**\n', '     * @notice Update tap for `_token.symbol(): string` with a rate of about `@tokenAmount(_token, 4 * 60 * 24 * 30 * _rate)` per month and a floor of `@tokenAmount(_token, _floor)`\n', '     * @param _token The address of the token whose tap is to be updated\n', '     * @param _rate  The new rate at which that token is to be tapped [in wei / block]\n', '     * @param _floor The new floor above which the reserve [pool] balance for that token is to be kept [in wei]\n', '    */\n', '    function updateTokenTap(address _token, uint256 _rate, uint256 _floor) external auth(UPDATE_TOKEN_TAP_ROLE) {\n', '        tap.updateTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    /**\n', '     * @notice Update tapped amount for `_token.symbol(): string`\n', '     * @param _token The address of the token whose tapped amount is to be updated\n', '    */\n', '    function updateTappedAmount(address _token) external {\n', '        tap.updateTappedAmount(_token);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer about `@tokenAmount(_token, self.getMaximumWithdrawal(_token): uint256)` from the reserve to the beneficiary\n', '     * @param _token The address of the token to be transfered from the reserve to the beneficiary\n', '    */\n', '    function withdraw(address _token) external auth(WITHDRAW_ROLE) {\n', '        tap.withdraw(_token);\n', '    }\n', '\n', '    /***** public view functions *****/\n', '\n', '    function token() public view isInitialized returns (address) {\n', '        return marketMaker.token();\n', '    }\n', '\n', '    function contributionToken() public view isInitialized returns (address) {\n', '        return presale.contributionToken();\n', '    }\n', '\n', '    function getMaximumWithdrawal(address _token) public view isInitialized returns (uint256) {\n', '        return tap.getMaximumWithdrawal(_token);\n', '    }\n', '\n', '    function collateralsToBeClaimed(address _collateral) public view isInitialized returns (uint256) {\n', '        return marketMaker.collateralsToBeClaimed(_collateral);\n', '    }\n', '\n', '    function balanceOf(address _who, address _token) public view isInitialized returns (uint256) {\n', '        uint256 balance = _token == ETH ? _who.balance : ERC20(_token).staticBalanceOf(_who);\n', '\n', '        if (_who == address(reserve)) {\n', '            return balance.sub(tap.getMaximumWithdrawal(_token));\n', '        } else {\n', '            return balance;\n', '        }\n', '    }\n', '\n', '    /***** internal functions *****/\n', '\n', '     function _tokenIsContractOrETH(address _token) internal view returns (bool) {\n', '        return isContract(_token) || _token == ETH;\n', '    }\n', '}\n', '\n', '// File: @ablack/fundraising-presale/contracts/Presale.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Presale is IPresale, EtherTokenConstant, IsContract, AragonApp {\n', '    using SafeERC20  for ERC20;\n', '    using SafeMath   for uint256;\n', '    using SafeMath64 for uint64;\n', '\n', '    /**\n', '    Hardcoded constants to save gas\n', '    bytes32 public constant OPEN_ROLE       = keccak256("OPEN_ROLE");\n', '    bytes32 public constant CONTRIBUTE_ROLE = keccak256("CONTRIBUTE_ROLE");\n', '    */\n', '    bytes32 public constant OPEN_ROLE       = 0xefa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4;\n', '    bytes32 public constant CONTRIBUTE_ROLE = 0x9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07;\n', '\n', '    uint256 public constant PPM = 1000000; // 0% = 0 * 10 ** 4; 1% = 1 * 10 ** 4; 100% = 100 * 10 ** 4\n', '\n', '    string private constant ERROR_CONTRACT_IS_EOA          = "PRESALE_CONTRACT_IS_EOA";\n', '    string private constant ERROR_INVALID_BENEFICIARY      = "PRESALE_INVALID_BENEFICIARY";\n', '    string private constant ERROR_INVALID_CONTRIBUTE_TOKEN = "PRESALE_INVALID_CONTRIBUTE_TOKEN";\n', '    string private constant ERROR_INVALID_GOAL             = "PRESALE_INVALID_GOAL";\n', '    string private constant ERROR_INVALID_EXCHANGE_RATE    = "PRESALE_INVALID_EXCHANGE_RATE";\n', '    string private constant ERROR_INVALID_TIME_PERIOD      = "PRESALE_INVALID_TIME_PERIOD";\n', '    string private constant ERROR_INVALID_PCT              = "PRESALE_INVALID_PCT";\n', '    string private constant ERROR_INVALID_STATE            = "PRESALE_INVALID_STATE";\n', '    string private constant ERROR_INVALID_CONTRIBUTE_VALUE = "PRESALE_INVALID_CONTRIBUTE_VALUE";\n', '    string private constant ERROR_INSUFFICIENT_BALANCE     = "PRESALE_INSUFFICIENT_BALANCE";\n', '    string private constant ERROR_INSUFFICIENT_ALLOWANCE   = "PRESALE_INSUFFICIENT_ALLOWANCE";\n', '    string private constant ERROR_NOTHING_TO_REFUND        = "PRESALE_NOTHING_TO_REFUND";\n', '    string private constant ERROR_TOKEN_TRANSFER_REVERTED  = "PRESALE_TOKEN_TRANSFER_REVERTED";\n', '\n', '    enum State {\n', '        Pending,     // presale is idle and pending to be started\n', '        Funding,     // presale has started and contributors can purchase tokens\n', '        Refunding,   // presale has not reached goal within period and contributors can claim refunds\n', '        GoalReached, // presale has reached goal within period and trading is ready to be open\n', '        Closed       // presale has reached goal within period, has been closed and trading has been open\n', '    }\n', '\n', '    IAragonFundraisingController                    public controller;\n', '    TokenManager                                    public tokenManager;\n', '    ERC20                                           public token;\n', '    address                                         public reserve;\n', '    address                                         public beneficiary;\n', '    address                                         public contributionToken;\n', '\n', '    uint256                                         public goal;\n', '    uint64                                          public period;\n', '    uint256                                         public exchangeRate;\n', '    uint64                                          public vestingCliffPeriod;\n', '    uint64                                          public vestingCompletePeriod;\n', '    uint256                                         public supplyOfferedPct;\n', '    uint256                                         public fundingForBeneficiaryPct;\n', '    uint64                                          public openDate;\n', '\n', '    bool                                            public isClosed;\n', '    uint64                                          public vestingCliffDate;\n', '    uint64                                          public vestingCompleteDate;\n', '    uint256                                         public totalRaised;\n', '    mapping(address => mapping(uint256 => uint256)) public contributions; // contributor => (vestedPurchaseId => tokensSpent)\n', '\n', '    event SetOpenDate (uint64 date);\n', '    event Close       ();\n', '    event Contribute  (address indexed contributor, uint256 value, uint256 amount, uint256 vestedPurchaseId);\n', '    event Refund      (address indexed contributor, uint256 value, uint256 amount, uint256 vestedPurchaseId);\n', '\n', '\n', '    /***** external function *****/\n', '\n', '    /**\n', '     * @notice Initialize presale\n', '     * @param _controller               The address of the controller contract\n', '     * @param _tokenManager             The address of the [bonded] token manager contract\n', '     * @param _reserve                  The address of the reserve [pool] contract\n', '     * @param _beneficiary              The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]\n', '     * @param _contributionToken        The address of the token to be used to contribute\n', '     * @param _goal                     The goal to be reached by the end of that presale [in contribution token wei]\n', '     * @param _period                   The period within which to accept contribution for that presale\n', '     * @param _exchangeRate             The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]\n', '     * @param _vestingCliffPeriod       The period during which purchased [bonded] tokens are to be cliffed\n', '     * @param _vestingCompletePeriod    The complete period during which purchased [bonded] tokens are to be vested\n', '     * @param _supplyOfferedPct         The percentage of the initial supply of [bonded] tokens to be offered during that presale [in PPM]\n', '     * @param _fundingForBeneficiaryPct The percentage of the raised contribution tokens to be sent to the beneficiary [instead of the fundraising reserve] when that presale is closed [in PPM]\n', '     * @param _openDate                 The date upon which that presale is to be open [ignored if 0]\n', '    */\n', '    function initialize(\n', '        IAragonFundraisingController _controller,\n', '        TokenManager                 _tokenManager,\n', '        address                      _reserve,\n', '        address                      _beneficiary,\n', '        address                      _contributionToken,\n', '        uint256                      _goal,\n', '        uint64                       _period,\n', '        uint256                      _exchangeRate,\n', '        uint64                       _vestingCliffPeriod,\n', '        uint64                       _vestingCompletePeriod,\n', '        uint256                      _supplyOfferedPct,\n', '        uint256                      _fundingForBeneficiaryPct,\n', '        uint64                       _openDate\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        require(isContract(_controller),                                            ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_tokenManager),                                          ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_reserve),                                               ERROR_CONTRACT_IS_EOA);\n', '        require(_beneficiary != address(0),                                         ERROR_INVALID_BENEFICIARY);\n', '        require(isContract(_contributionToken) || _contributionToken == ETH,        ERROR_INVALID_CONTRIBUTE_TOKEN);\n', '        require(_goal > 0,                                                          ERROR_INVALID_GOAL);\n', '        require(_period > 0,                                                        ERROR_INVALID_TIME_PERIOD);\n', '        require(_exchangeRate > 0,                                                  ERROR_INVALID_EXCHANGE_RATE);\n', '        require(_vestingCliffPeriod > _period,                                      ERROR_INVALID_TIME_PERIOD);\n', '        require(_vestingCompletePeriod > _vestingCliffPeriod,                       ERROR_INVALID_TIME_PERIOD);\n', '        require(_supplyOfferedPct > 0 && _supplyOfferedPct <= PPM,                  ERROR_INVALID_PCT);\n', '        require(_fundingForBeneficiaryPct >= 0 && _fundingForBeneficiaryPct <= PPM, ERROR_INVALID_PCT);\n', '\n', '        initialized();\n', '\n', '        controller = _controller;\n', '        tokenManager = _tokenManager;\n', '        token = ERC20(_tokenManager.token());\n', '        reserve = _reserve;\n', '        beneficiary = _beneficiary;\n', '        contributionToken = _contributionToken;\n', '        goal = _goal;\n', '        period = _period;\n', '        exchangeRate = _exchangeRate;\n', '        vestingCliffPeriod = _vestingCliffPeriod;\n', '        vestingCompletePeriod = _vestingCompletePeriod;\n', '        supplyOfferedPct = _supplyOfferedPct;\n', '        fundingForBeneficiaryPct = _fundingForBeneficiaryPct;\n', '\n', '        if (_openDate != 0) {\n', '            _setOpenDate(_openDate);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Open presale [enabling users to contribute]\n', '    */\n', '    function open() external auth(OPEN_ROLE) {\n', '        require(state() == State.Pending, ERROR_INVALID_STATE);\n', '        require(openDate == 0,            ERROR_INVALID_STATE);\n', '\n', '        _open();\n', '    }\n', '\n', '    /**\n', '     * @notice Contribute to the presale up to `@tokenAmount(self.contributionToken(): address, _value)`\n', '     * @param _contributor The address of the contributor\n', '     * @param _value       The amount of contribution token to be spent\n', '    */\n', '    function contribute(address _contributor, uint256 _value) external payable nonReentrant auth(CONTRIBUTE_ROLE) {\n', '        require(state() == State.Funding, ERROR_INVALID_STATE);\n', '        require(_value != 0,              ERROR_INVALID_CONTRIBUTE_VALUE);\n', '\n', '        if (contributionToken == ETH) {\n', '            require(msg.value == _value, ERROR_INVALID_CONTRIBUTE_VALUE);\n', '        } else {\n', '            require(msg.value == 0,      ERROR_INVALID_CONTRIBUTE_VALUE);\n', '        }\n', '\n', '        _contribute(_contributor, _value);\n', '    }\n', '\n', '    /**\n', "     * @notice Refund `_contributor`'s presale contribution #`_vestedPurchaseId`\n", '     * @param _contributor      The address of the contributor whose presale contribution is to be refunded\n', '     * @param _vestedPurchaseId The id of the contribution to be refunded\n', '    */\n', '    function refund(address _contributor, uint256 _vestedPurchaseId) external nonReentrant isInitialized {\n', '        require(state() == State.Refunding, ERROR_INVALID_STATE);\n', '\n', '        _refund(_contributor, _vestedPurchaseId);\n', '    }\n', '\n', '    /**\n', '     * @notice Close presale and open trading\n', '    */\n', '    function close() external nonReentrant isInitialized {\n', '        require(state() == State.GoalReached, ERROR_INVALID_STATE);\n', '\n', '        _close();\n', '    }\n', '\n', '    /***** public view functions *****/\n', '\n', '    /**\n', '     * @notice Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`\n', '     * @param _value The amount of contribution tokens to be used in that computation\n', '    */\n', '    function contributionToTokens(uint256 _value) public view isInitialized returns (uint256) {\n', '        return _value.mul(exchangeRate).div(PPM);\n', '    }\n', '\n', '    function contributionToken() public view isInitialized returns (address) {\n', '        return contributionToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the current state of that presale\n', '    */\n', '    function state() public view isInitialized returns (State) {\n', '        if (openDate == 0 || openDate > getTimestamp64()) {\n', '            return State.Pending;\n', '        }\n', '\n', '        if (totalRaised >= goal) {\n', '            if (isClosed) {\n', '                return State.Closed;\n', '            } else {\n', '                return State.GoalReached;\n', '            }\n', '        }\n', '\n', '        if (_timeSinceOpen() < period) {\n', '            return State.Funding;\n', '        } else {\n', '            return State.Refunding;\n', '        }\n', '    }\n', '\n', '    /***** internal functions *****/\n', '\n', '    function _timeSinceOpen() internal view returns (uint64) {\n', '        if (openDate == 0) {\n', '            return 0;\n', '        } else {\n', '            return getTimestamp64().sub(openDate);\n', '        }\n', '    }\n', '\n', '    function _setOpenDate(uint64 _date) internal {\n', '        require(_date >= getTimestamp64(), ERROR_INVALID_TIME_PERIOD);\n', '\n', '        openDate = _date;\n', '        _setVestingDatesWhenOpenDateIsKnown();\n', '\n', '        emit SetOpenDate(_date);\n', '    }\n', '\n', '    function _setVestingDatesWhenOpenDateIsKnown() internal {\n', '        vestingCliffDate = openDate.add(vestingCliffPeriod);\n', '        vestingCompleteDate = openDate.add(vestingCompletePeriod);\n', '    }\n', '\n', '    function _open() internal {\n', '        _setOpenDate(getTimestamp64());\n', '    }\n', '\n', '    function _contribute(address _contributor, uint256 _value) internal {\n', '        uint256 value = totalRaised.add(_value) > goal ? goal.sub(totalRaised) : _value;\n', '        if (contributionToken == ETH && _value > value) {\n', '            msg.sender.transfer(_value.sub(value));\n', '        }\n', '\n', '        // (contributor) ~~~> contribution tokens ~~~> (presale)\n', '        if (contributionToken != ETH) {\n', '            require(ERC20(contributionToken).balanceOf(_contributor) >= value,                ERROR_INSUFFICIENT_BALANCE);\n', '            require(ERC20(contributionToken).allowance(_contributor, address(this)) >= value, ERROR_INSUFFICIENT_ALLOWANCE);\n', '            _transfer(contributionToken, _contributor, address(this), value);\n', '        }\n', '        // (mint ✨) ~~~> project tokens ~~~> (contributor)\n', '        uint256 tokensToSell = contributionToTokens(value);\n', '        tokenManager.issue(tokensToSell);\n', '        uint256 vestedPurchaseId = tokenManager.assignVested(\n', '            _contributor,\n', '            tokensToSell,\n', '            openDate,\n', '            vestingCliffDate,\n', '            vestingCompleteDate,\n', '            true /* revokable */\n', '        );\n', '        totalRaised = totalRaised.add(value);\n', '        // register contribution tokens spent in this purchase for a possible upcoming refund\n', '        contributions[_contributor][vestedPurchaseId] = value;\n', '\n', '        emit Contribute(_contributor, value, tokensToSell, vestedPurchaseId);\n', '    }\n', '\n', '    function _refund(address _contributor, uint256 _vestedPurchaseId) internal {\n', '        // recall how much contribution tokens are to be refund for this purchase\n', '        uint256 tokensToRefund = contributions[_contributor][_vestedPurchaseId];\n', '        require(tokensToRefund > 0, ERROR_NOTHING_TO_REFUND);\n', '        contributions[_contributor][_vestedPurchaseId] = 0;\n', '        // (presale) ~~~> contribution tokens ~~~> (contributor)\n', '        _transfer(contributionToken, address(this), _contributor, tokensToRefund);\n', '        /**\n', '         * NOTE\n', '         * the following lines assume that _contributor has not transfered any of its vested tokens\n', '         * for now TokenManager does not handle switching the transferrable status of its underlying token\n', '         * there is thus no way to enforce non-transferrability during the presale phase only\n', '         * this will be updated in a later version\n', '        */\n', '        // (contributor) ~~~> project tokens ~~~> (token manager)\n', '        (uint256 tokensSold,,,,) = tokenManager.getVesting(_contributor, _vestedPurchaseId);\n', '        tokenManager.revokeVesting(_contributor, _vestedPurchaseId);\n', '        // (token manager) ~~~> project tokens ~~~> (burn 💥)\n', '        tokenManager.burn(address(tokenManager), tokensSold);\n', '\n', '        emit Refund(_contributor, tokensToRefund, tokensSold, _vestedPurchaseId);\n', '    }\n', '\n', '    function _close() internal {\n', '        isClosed = true;\n', '\n', '        // (presale) ~~~> contribution tokens ~~~> (beneficiary)\n', '        uint256 fundsForBeneficiary = totalRaised.mul(fundingForBeneficiaryPct).div(PPM);\n', '        if (fundsForBeneficiary > 0) {\n', '            _transfer(contributionToken, address(this), beneficiary, fundsForBeneficiary);\n', '        }\n', '        // (presale) ~~~> contribution tokens ~~~> (reserve)\n', '        uint256 tokensForReserve = contributionToken == ETH ? address(this).balance : ERC20(contributionToken).balanceOf(address(this));\n', '\n', '        _transfer(contributionToken, address(this), reserve, tokensForReserve);\n', '        // (mint ✨) ~~~> project tokens ~~~> (beneficiary)\n', '        uint256 tokensForBeneficiary = token.totalSupply().mul(PPM.sub(supplyOfferedPct)).div(supplyOfferedPct);\n', '        tokenManager.issue(tokensForBeneficiary);\n', '        tokenManager.assignVested(\n', '            beneficiary,\n', '            tokensForBeneficiary,\n', '            openDate,\n', '            vestingCliffDate,\n', '            vestingCompleteDate,\n', '            false /* revokable */\n', '        );\n', '        // open trading\n', '        controller.openTrading();\n', '\n', '        emit Close();\n', '    }\n', '\n', '    function _transfer(address _token, address _from, address _to, uint256 _amount) internal {\n', '        if (_token == ETH) {\n', '            require(_from == address(this), ERROR_TOKEN_TRANSFER_REVERTED);\n', '            require(_to != address(this),   ERROR_TOKEN_TRANSFER_REVERTED);\n', '            _to.transfer(_amount);\n', '        } else {\n', '            if (_from == address(this)) {\n', '                require(ERC20(_token).safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\n', '            } else {\n', '                require(ERC20(_token).safeTransferFrom(_from, _to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @ablack/fundraising-tap/contracts/Tap.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Tap is ITap, TimeHelpers, EtherTokenConstant, IsContract, AragonApp {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath  for uint256;\n', '\n', '    /**\n', '    Hardcoded constants to save gas\n', '    bytes32 public constant UPDATE_CONTROLLER_ROLE                     = keccak256("UPDATE_CONTROLLER_ROLE");\n', '    bytes32 public constant UPDATE_RESERVE_ROLE                        = keccak256("UPDATE_RESERVE_ROLE");\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE                    = keccak256("UPDATE_BENEFICIARY_ROLE");\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE  = keccak256("UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE");\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE = keccak256("UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE");\n', '    bytes32 public constant ADD_TAPPED_TOKEN_ROLE                      = keccak256("ADD_TAPPED_TOKEN_ROLE");\n', '    bytes32 public constant REMOVE_TAPPED_TOKEN_ROLE                   = keccak256("REMOVE_TAPPED_TOKEN_ROLE");\n', '    bytes32 public constant UPDATE_TAPPED_TOKEN_ROLE                   = keccak256("UPDATE_TAPPED_TOKEN_ROLE");\n', '    bytes32 public constant RESET_TAPPED_TOKEN_ROLE                    = keccak256("RESET_TAPPED_TOKEN_ROLE");\n', '    bytes32 public constant WITHDRAW_ROLE                              = keccak256("WITHDRAW_ROLE");\n', '    */\n', '    bytes32 public constant UPDATE_CONTROLLER_ROLE                     = 0x454b5d0dbb74f012faf1d3722ea441689f97dc957dd3ca5335b4969586e5dc30;\n', '    bytes32 public constant UPDATE_RESERVE_ROLE                        = 0x7984c050833e1db850f5aa7476710412fd2983fcec34da049502835ad7aed4f7;\n', '    bytes32 public constant UPDATE_BENEFICIARY_ROLE                    = 0xf7ea2b80c7b6a2cab2c11d2290cb005c3748397358a25e17113658c83b732593;\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE  = 0x5d94de7e429250eee4ff97e30ab9f383bea3cd564d6780e0a9e965b1add1d207;\n', '    bytes32 public constant UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE = 0x57c9c67896cf0a4ffe92cbea66c2f7c34380af06bf14215dabb078cf8a6d99e1;\n', '    bytes32 public constant ADD_TAPPED_TOKEN_ROLE                      = 0x5bc3b608e6be93b75a1c472a4a5bea3d31eabae46bf968e4bc4c7701562114dc;\n', '    bytes32 public constant REMOVE_TAPPED_TOKEN_ROLE                   = 0xd76960be78bfedc5b40ce4fa64a2f8308f39dd2cbb1f9676dbc4ce87b817befd;\n', '    bytes32 public constant UPDATE_TAPPED_TOKEN_ROLE                   = 0x83201394534c53ae0b4696fd49a933082d3e0525aa5a3d0a14a2f51e12213288;\n', '    bytes32 public constant RESET_TAPPED_TOKEN_ROLE                    = 0x294bf52c518669359157a9fe826e510dfc3dbd200d44bf77ec9536bff34bc29e;\n', '    bytes32 public constant WITHDRAW_ROLE                              = 0x5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec;\n', '\n', '    uint256 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\n', '\n', '    string private constant ERROR_CONTRACT_IS_EOA            = "TAP_CONTRACT_IS_EOA";\n', '    string private constant ERROR_INVALID_BENEFICIARY        = "TAP_INVALID_BENEFICIARY";\n', '    string private constant ERROR_INVALID_BATCH_BLOCKS       = "TAP_INVALID_BATCH_BLOCKS";\n', '    string private constant ERROR_INVALID_FLOOR_DECREASE_PCT = "TAP_INVALID_FLOOR_DECREASE_PCT";\n', '    string private constant ERROR_INVALID_TOKEN              = "TAP_INVALID_TOKEN";\n', '    string private constant ERROR_INVALID_TAP_RATE           = "TAP_INVALID_TAP_RATE";\n', '    string private constant ERROR_INVALID_TAP_UPDATE         = "TAP_INVALID_TAP_UPDATE";\n', '    string private constant ERROR_TOKEN_ALREADY_TAPPED       = "TAP_TOKEN_ALREADY_TAPPED";\n', '    string private constant ERROR_TOKEN_NOT_TAPPED           = "TAP_TOKEN_NOT_TAPPED";\n', '    string private constant ERROR_WITHDRAWAL_AMOUNT_ZERO     = "TAP_WITHDRAWAL_AMOUNT_ZERO";\n', '\n', '    IAragonFundraisingController public controller;\n', '    Vault                        public reserve;\n', '    address                      public beneficiary;\n', '    uint256                      public batchBlocks;\n', '    uint256                      public maximumTapRateIncreasePct;\n', '    uint256                      public maximumTapFloorDecreasePct;\n', '\n', '    mapping (address => uint256) public tappedAmounts;\n', '    mapping (address => uint256) public rates;\n', '    mapping (address => uint256) public floors;\n', '    mapping (address => uint256) public lastTappedAmountUpdates; // batch ids [block numbers]\n', '    mapping (address => uint256) public lastTapUpdates;  // timestamps\n', '\n', '    event UpdateBeneficiary               (address indexed beneficiary);\n', '    event UpdateMaximumTapRateIncreasePct (uint256 maximumTapRateIncreasePct);\n', '    event UpdateMaximumTapFloorDecreasePct(uint256 maximumTapFloorDecreasePct);\n', '    event AddTappedToken                  (address indexed token, uint256 rate, uint256 floor);\n', '    event RemoveTappedToken               (address indexed token);\n', '    event UpdateTappedToken               (address indexed token, uint256 rate, uint256 floor);\n', '    event ResetTappedToken                (address indexed token);\n', '    event UpdateTappedAmount              (address indexed token, uint256 tappedAmount);\n', '    event Withdraw                        (address indexed token, uint256 amount);\n', '\n', '\n', '    /***** external functions *****/\n', '\n', '    /**\n', '     * @notice Initialize tap\n', '     * @param _controller                 The address of the controller contract\n', '     * @param _reserve                    The address of the reserve [pool] contract\n', '     * @param _beneficiary                The address of the beneficiary [to whom funds are to be withdrawn]\n', '     * @param _batchBlocks                The number of blocks batches are to last\n', '     * @param _maximumTapRateIncreasePct  The maximum tap rate increase percentage allowed [in PCT_BASE]\n', '     * @param _maximumTapFloorDecreasePct The maximum tap floor decrease percentage allowed [in PCT_BASE]\n', '    */\n', '    function initialize(\n', '        IAragonFundraisingController _controller,\n', '        Vault                        _reserve,\n', '        address                      _beneficiary,\n', '        uint256                      _batchBlocks,\n', '        uint256                      _maximumTapRateIncreasePct,\n', '        uint256                      _maximumTapFloorDecreasePct\n', '    )\n', '        external\n', '        onlyInit\n', '    {\n', '        require(isContract(_controller),                                         ERROR_CONTRACT_IS_EOA);\n', '        require(isContract(_reserve),                                            ERROR_CONTRACT_IS_EOA);\n', '        require(_beneficiaryIsValid(_beneficiary),                               ERROR_INVALID_BENEFICIARY);\n', '        require(_batchBlocks != 0,                                               ERROR_INVALID_BATCH_BLOCKS);\n', '        require(_maximumTapFloorDecreasePctIsValid(_maximumTapFloorDecreasePct), ERROR_INVALID_FLOOR_DECREASE_PCT);\n', '\n', '        initialized();\n', '\n', '        controller = _controller;\n', '        reserve = _reserve;\n', '        beneficiary = _beneficiary;\n', '        batchBlocks = _batchBlocks;\n', '        maximumTapRateIncreasePct = _maximumTapRateIncreasePct;\n', '        maximumTapFloorDecreasePct = _maximumTapFloorDecreasePct;\n', '    }\n', '\n', '    /**\n', '     * @notice Update beneficiary to `_beneficiary`\n', '     * @param _beneficiary The address of the new beneficiary [to whom funds are to be withdrawn]\n', '    */\n', '    function updateBeneficiary(address _beneficiary) external auth(UPDATE_BENEFICIARY_ROLE) {\n', '        require(_beneficiaryIsValid(_beneficiary), ERROR_INVALID_BENEFICIARY);\n', '\n', '        _updateBeneficiary(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @notice Update maximum tap rate increase percentage to `@formatPct(_maximumTapRateIncreasePct)`%\n', '     * @param _maximumTapRateIncreasePct The new maximum tap rate increase percentage to be allowed [in PCT_BASE]\n', '    */\n', '    function updateMaximumTapRateIncreasePct(uint256 _maximumTapRateIncreasePct) external auth(UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE) {\n', '        _updateMaximumTapRateIncreasePct(_maximumTapRateIncreasePct);\n', '    }\n', '\n', '    /**\n', '     * @notice Update maximum tap floor decrease percentage to `@formatPct(_maximumTapFloorDecreasePct)`%\n', '     * @param _maximumTapFloorDecreasePct The new maximum tap floor decrease percentage to be allowed [in PCT_BASE]\n', '    */\n', '    function updateMaximumTapFloorDecreasePct(uint256 _maximumTapFloorDecreasePct) external auth(UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE) {\n', '        require(_maximumTapFloorDecreasePctIsValid(_maximumTapFloorDecreasePct), ERROR_INVALID_FLOOR_DECREASE_PCT);\n', '\n', '        _updateMaximumTapFloorDecreasePct(_maximumTapFloorDecreasePct);\n', '    }\n', '\n', '    /**\n', '     * @notice Add tap for `_token.symbol(): string` with a rate of `@tokenAmount(_token, _rate)` per block and a floor of `@tokenAmount(_token, _floor)`\n', '     * @param _token The address of the token to be tapped\n', '     * @param _rate  The rate at which that token is to be tapped [in wei / block]\n', '     * @param _floor The floor above which the reserve [pool] balance for that token is to be kept [in wei]\n', '    */\n', '    function addTappedToken(address _token, uint256 _rate, uint256 _floor) external auth(ADD_TAPPED_TOKEN_ROLE) {\n', '        require(_tokenIsContractOrETH(_token), ERROR_INVALID_TOKEN);\n', '        require(!_tokenIsTapped(_token),       ERROR_TOKEN_ALREADY_TAPPED);\n', '        require(_tapRateIsValid(_rate),        ERROR_INVALID_TAP_RATE);\n', '\n', '        _addTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    /**\n', '     * @notice Remove tap for `_token.symbol(): string`\n', '     * @param _token The address of the token to be un-tapped\n', '    */\n', '    function removeTappedToken(address _token) external auth(REMOVE_TAPPED_TOKEN_ROLE) {\n', '        require(_tokenIsTapped(_token), ERROR_TOKEN_NOT_TAPPED);\n', '\n', '        _removeTappedToken(_token);\n', '    }\n', '\n', '    /**\n', '     * @notice Update tap for `_token.symbol(): string` with a rate of `@tokenAmount(_token, _rate)` per block and a floor of `@tokenAmount(_token, _floor)`\n', '     * @param _token The address of the token whose tap is to be updated\n', '     * @param _rate  The new rate at which that token is to be tapped [in wei / block]\n', '     * @param _floor The new floor above which the reserve [pool] balance for that token is to be kept [in wei]\n', '    */\n', '    function updateTappedToken(address _token, uint256 _rate, uint256 _floor) external auth(UPDATE_TAPPED_TOKEN_ROLE) {\n', '        require(_tokenIsTapped(_token),                   ERROR_TOKEN_NOT_TAPPED);\n', '        require(_tapRateIsValid(_rate),                   ERROR_INVALID_TAP_RATE);\n', '        require(_tapUpdateIsValid(_token, _rate, _floor), ERROR_INVALID_TAP_UPDATE);\n', '\n', '        _updateTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    /**\n', '     * @notice Reset tap timestamps for `_token.symbol(): string`\n', '     * @param _token The address of the token whose tap timestamps are to be reset\n', '    */\n', '    function resetTappedToken(address _token) external auth(RESET_TAPPED_TOKEN_ROLE) {\n', '        require(_tokenIsTapped(_token), ERROR_TOKEN_NOT_TAPPED);\n', '\n', '        _resetTappedToken(_token);\n', '    }\n', '\n', '    /**\n', '     * @notice Update tapped amount for `_token.symbol(): string`\n', '     * @param _token The address of the token whose tapped amount is to be updated\n', '    */\n', '    function updateTappedAmount(address _token) external {\n', '        require(_tokenIsTapped(_token), ERROR_TOKEN_NOT_TAPPED);\n', '\n', '        _updateTappedAmount(_token);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer about `@tokenAmount(_token, self.getMaximalWithdrawal(_token): uint256)` from `self.reserve()` to `self.beneficiary()`\n', '     * @param _token The address of the token to be transfered\n', '    */\n', '    function withdraw(address _token) external auth(WITHDRAW_ROLE) {\n', '        require(_tokenIsTapped(_token), ERROR_TOKEN_NOT_TAPPED);\n', '        uint256 amount = _updateTappedAmount(_token);\n', '        require(amount > 0, ERROR_WITHDRAWAL_AMOUNT_ZERO);\n', '\n', '        _withdraw(_token, amount);\n', '    }\n', '\n', '    /***** public view functions *****/\n', '\n', '    function getMaximumWithdrawal(address _token) public view isInitialized returns (uint256) {\n', '        return _tappedAmount(_token);\n', '    }\n', '\n', '    function rates(address _token) public view isInitialized returns (uint256) {\n', '        return rates[_token];\n', '    }\n', '\n', '    /***** internal functions *****/\n', '\n', '    /* computation functions */\n', '\n', '    function _currentBatchId() internal view returns (uint256) {\n', '        return (block.number.div(batchBlocks)).mul(batchBlocks);\n', '    }\n', '\n', '    function _tappedAmount(address _token) internal view returns (uint256) {\n', '        uint256 toBeKept = controller.collateralsToBeClaimed(_token).add(floors[_token]);\n', '        uint256 balance = _token == ETH ? address(reserve).balance : ERC20(_token).staticBalanceOf(reserve);\n', '        uint256 flow = (_currentBatchId().sub(lastTappedAmountUpdates[_token])).mul(rates[_token]);\n', '        uint256 tappedAmount = tappedAmounts[_token].add(flow);\n', '        /**\n', '         * whatever happens enough collateral should be\n', '         * kept in the reserve pool to guarantee that\n', '         * its balance is kept above the floor once\n', '         * all pending sell orders are claimed\n', '        */\n', '\n', '        /**\n', "         * the reserve's balance is already below the balance to be kept\n", '         * the tapped amount should be reset to zero\n', '        */\n', '        if (balance <= toBeKept) {\n', '            return 0;\n', '        }\n', '\n', '        /**\n', "         * the reserve's balance minus the upcoming tap flow would be below the balance to be kept\n", '         * the flow should be reduced to balance - toBeKept\n', '        */\n', '        if (balance <= toBeKept.add(tappedAmount)) {\n', '            return balance.sub(toBeKept);\n', '        }\n', '\n', '        /**\n', "         * the reserve's balance minus the upcoming flow is above the balance to be kept\n", '         * the flow can be added to the tapped amount\n', '        */\n', '        return tappedAmount;\n', '    }\n', '\n', '    /* check functions */\n', '\n', '    function _beneficiaryIsValid(address _beneficiary) internal pure returns (bool) {\n', '        return _beneficiary != address(0);\n', '    }\n', '\n', '    function _maximumTapFloorDecreasePctIsValid(uint256 _maximumTapFloorDecreasePct) internal pure returns (bool) {\n', '        return _maximumTapFloorDecreasePct <= PCT_BASE;\n', '    }\n', '\n', '    function _tokenIsContractOrETH(address _token) internal view returns (bool) {\n', '        return isContract(_token) || _token == ETH;\n', '    }\n', '\n', '    function _tokenIsTapped(address _token) internal view returns (bool) {\n', '        return rates[_token] != uint256(0);\n', '    }\n', '\n', '    function _tapRateIsValid(uint256 _rate) internal pure returns (bool) {\n', '        return _rate != 0;\n', '    }\n', '\n', '    function _tapUpdateIsValid(address _token, uint256 _rate, uint256 _floor) internal view returns (bool) {\n', '        return _tapRateUpdateIsValid(_token, _rate) && _tapFloorUpdateIsValid(_token, _floor);\n', '    }\n', '\n', '    function _tapRateUpdateIsValid(address _token, uint256 _rate) internal view returns (bool) {\n', '        uint256 rate = rates[_token];\n', '\n', '        if (_rate <= rate) {\n', '            return true;\n', '        }\n', '\n', '        if (getTimestamp() < lastTapUpdates[_token] + 30 days) {\n', '            return false;\n', '        }\n', '\n', '        if (_rate.mul(PCT_BASE) <= rate.mul(PCT_BASE.add(maximumTapRateIncreasePct))) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _tapFloorUpdateIsValid(address _token, uint256 _floor) internal view returns (bool) {\n', '        uint256 floor = floors[_token];\n', '\n', '        if (_floor >= floor) {\n', '            return true;\n', '        }\n', '\n', '        if (getTimestamp() < lastTapUpdates[_token] + 30 days) {\n', '            return false;\n', '        }\n', '\n', '        if (maximumTapFloorDecreasePct >= PCT_BASE) {\n', '            return true;\n', '        }\n', '\n', '        if (_floor.mul(PCT_BASE) >= floor.mul(PCT_BASE.sub(maximumTapFloorDecreasePct))) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /* state modifying functions */\n', '\n', '    function _updateTappedAmount(address _token) internal returns (uint256) {\n', '        uint256 tappedAmount = _tappedAmount(_token);\n', '        lastTappedAmountUpdates[_token] = _currentBatchId();\n', '        tappedAmounts[_token] = tappedAmount;\n', '\n', '        emit UpdateTappedAmount(_token, tappedAmount);\n', '\n', '        return tappedAmount;\n', '    }\n', '\n', '    function _updateBeneficiary(address _beneficiary) internal {\n', '        beneficiary = _beneficiary;\n', '\n', '        emit UpdateBeneficiary(_beneficiary);\n', '    }\n', '\n', '    function _updateMaximumTapRateIncreasePct(uint256 _maximumTapRateIncreasePct) internal {\n', '        maximumTapRateIncreasePct = _maximumTapRateIncreasePct;\n', '\n', '        emit UpdateMaximumTapRateIncreasePct(_maximumTapRateIncreasePct);\n', '    }\n', '\n', '    function _updateMaximumTapFloorDecreasePct(uint256 _maximumTapFloorDecreasePct) internal {\n', '        maximumTapFloorDecreasePct = _maximumTapFloorDecreasePct;\n', '\n', '        emit UpdateMaximumTapFloorDecreasePct(_maximumTapFloorDecreasePct);\n', '    }\n', '\n', '    function _addTappedToken(address _token, uint256 _rate, uint256 _floor) internal {\n', '        /**\n', '         * NOTE\n', '         * 1. if _token is tapped in the middle of a batch it will\n', '         * reach the next batch faster than what it normally takes\n', '         * to go through a batch [e.g. one block later]\n', '         * 2. this will allow for a higher withdrawal than expected\n', '         * a few blocks after _token is tapped\n', '         * 3. this is not a problem because this extra amount is\n', '         * static [at most rates[_token] * batchBlocks] and does\n', '         * not increase in time\n', '        */\n', '        rates[_token] = _rate;\n', '        floors[_token] = _floor;\n', '        lastTappedAmountUpdates[_token] = _currentBatchId();\n', '        lastTapUpdates[_token] = getTimestamp();\n', '\n', '        emit AddTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    function _removeTappedToken(address _token) internal {\n', '        delete tappedAmounts[_token];\n', '        delete rates[_token];\n', '        delete floors[_token];\n', '        delete lastTappedAmountUpdates[_token];\n', '        delete lastTapUpdates[_token];\n', '\n', '        emit RemoveTappedToken(_token);\n', '    }\n', '\n', '    function _updateTappedToken(address _token, uint256 _rate, uint256 _floor) internal {\n', '        /**\n', '         * NOTE\n', '         * withdraw before updating to keep the reserve\n', '         * actual balance [balance - virtual withdrawal]\n', '         * continuous in time [though a floor update can\n', '         * still break this continuity]\n', '        */\n', '        uint256 amount = _updateTappedAmount(_token);\n', '        if (amount > 0) {\n', '            _withdraw(_token, amount);\n', '        }\n', '\n', '        rates[_token] = _rate;\n', '        floors[_token] = _floor;\n', '        lastTapUpdates[_token] = getTimestamp();\n', '\n', '        emit UpdateTappedToken(_token, _rate, _floor);\n', '    }\n', '\n', '    function _resetTappedToken(address _token) internal {\n', '        tappedAmounts[_token] = 0;\n', '        lastTappedAmountUpdates[_token] = _currentBatchId();\n', '        lastTapUpdates[_token] = getTimestamp();\n', '\n', '        emit ResetTappedToken(_token);\n', '    }\n', '\n', '    function _withdraw(address _token, uint256 _amount) internal {\n', '        tappedAmounts[_token] = tappedAmounts[_token].sub(_amount);\n', "        reserve.transfer(_token, beneficiary, _amount); // vault contract's transfer method already reverts on error\n", '\n', '        emit Withdraw(_token, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/AavegotchiTBCTemplate.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AavegotchiTBCTemplate is EtherTokenConstant, BaseTemplate {\n', '    string    private constant ERROR_BAD_SETTINGS     = "FM_BAD_SETTINGS";\n', '    string    private constant ERROR_MISSING_CACHE    = "FM_MISSING_CACHE";\n', '\n', '    bool      private constant BOARD_TRANSFERABLE     = false;\n', '    uint8     private constant BOARD_TOKEN_DECIMALS   = uint8(0);\n', '    uint256   private constant BOARD_MAX_PER_ACCOUNT  = uint256(1);\n', '\n', '    bool      private constant SHARE_TRANSFERABLE     = true;\n', '    uint8     private constant SHARE_TOKEN_DECIMALS   = uint8(18);\n', '    uint256   private constant SHARE_MAX_PER_ACCOUNT  = uint256(0);\n', '\n', '    uint64    private constant DEFAULT_FINANCE_PERIOD = uint64(30 days);\n', '\n', '    uint256   private constant BUY_FEE_PCT            = 0;\n', '    uint256   private constant SELL_FEE_PCT           = 0;\n', '\n', '    uint32    private constant DAI_RESERVE_RATIO      = 333333; // 33%\n', '    uint32    private constant ANT_RESERVE_RATIO      = 10000;  // 1%\n', '\n', '    bytes32   private constant BANCOR_FORMULA_ID      = 0xd71dde5e4bea1928026c1779bde7ed27bd7ef3d0ce9802e4117631eb6fa4ed7d;\n', '    bytes32   private constant PRESALE_ID             = 0x5de9bbdeaf6584c220c7b7f1922383bcd8bbcd4b48832080afd9d5ebf9a04df5;\n', '    bytes32   private constant MARKET_MAKER_ID        = 0xc2bb88ab974c474221f15f691ed9da38be2f5d37364180cec05403c656981bf0;\n', '    bytes32   private constant ARAGON_FUNDRAISING_ID  = 0x668ac370eed7e5861234d1c0a1e512686f53594fcb887e5bcecc35675a4becac;\n', '    bytes32   private constant TAP_ID                 = 0x82967efab7144b764bc9bca2f31a721269b6618c0ff4e50545737700a5e9c9dc;\n', '\n', '    struct Cache {\n', '        address dao;\n', '        address boardTokenManager;\n', '        address boardVoting;\n', '        address vault;\n', '        address finance;\n', '        address shareVoting;\n', '        address shareTokenManager;\n', '        address reserve;\n', '        address presale;\n', '        address marketMaker;\n', '        address tap;\n', '        address controller;\n', '    }\n', '\n', '    address[] public collaterals;\n', '    mapping (address => Cache) private cache;\n', '\n', '    constructor(\n', '        DAOFactory              _daoFactory,\n', '        ENS                     _ens,\n', '        MiniMeTokenFactory      _miniMeFactory,\n', '        IFIFSResolvingRegistrar _aragonID,\n', '        address                 _dai,\n', '        address                 _ant\n', '    )\n', '        BaseTemplate(_daoFactory, _ens, _miniMeFactory, _aragonID)\n', '        public\n', '    {\n', '        _ensureAragonIdIsValid(_aragonID);\n', '        _ensureMiniMeFactoryIsValid(_miniMeFactory);\n', '        require(isContract(_dai), ERROR_BAD_SETTINGS);\n', '        require(isContract(_ant), ERROR_BAD_SETTINGS);\n', '        require(_dai != _ant,     ERROR_BAD_SETTINGS);\n', '\n', '        collaterals.push(_dai);\n', '        collaterals.push(_ant);\n', '    }\n', '\n', '    /***** external functions *****/\n', '\n', '    function prepareInstance(\n', '        string    _boardTokenName,\n', '        string    _boardTokenSymbol,\n', '        address[] _boardMembers,\n', '        uint64[3] _boardVotingSettings,\n', '        uint64    _financePeriod\n', '    )\n', '        external\n', '    {\n', '        require(_boardMembers.length > 0,         ERROR_BAD_SETTINGS);\n', '        require(_boardVotingSettings.length == 3, ERROR_BAD_SETTINGS);\n', '\n', '        // deploy DAO\n', '        (Kernel dao, ACL acl) = _createDAO();\n', '        // deploy board token\n', '        MiniMeToken boardToken = _createToken(_boardTokenName, _boardTokenSymbol, BOARD_TOKEN_DECIMALS);\n', '        // install board apps\n', '        TokenManager tm = _installBoardApps(dao, boardToken, _boardVotingSettings, _financePeriod);\n', '        // mint board tokens\n', '        _mintTokens(acl, tm, _boardMembers, 1);\n', '        // cache DAO\n', '        _cacheDao(dao);\n', '    }\n', '\n', '    function installShareApps(\n', '        string    _shareTokenName,\n', '        string    _shareTokenSymbol,\n', '        uint64[3] _shareVotingSettings\n', '    )\n', '        external\n', '    {\n', '        require(_shareVotingSettings.length == 3, ERROR_BAD_SETTINGS);\n', '        _ensureBoardAppsCache();\n', '\n', '        Kernel dao = _daoCache();\n', '        // deploy share token\n', '        MiniMeToken shareToken = _createToken(_shareTokenName, _shareTokenSymbol, SHARE_TOKEN_DECIMALS);\n', '        // install share apps\n', '        _installShareApps(dao, shareToken, _shareVotingSettings);\n', '        // setup board apps permissions [now that share apps have been installed]\n', '        _setupBoardPermissions(dao);\n', '    }\n', '\n', '    function installFundraisingApps(\n', '        uint256 _goal,\n', '        uint64  _period,\n', '        uint256 _exchangeRate,\n', '        uint64  _vestingCliffPeriod,\n', '        uint64  _vestingCompletePeriod,\n', '        uint256 _supplyOfferedPct,\n', '        uint256 _fundingForBeneficiaryPct,\n', '        uint64  _openDate,\n', '        uint256 _batchBlocks,\n', '        uint256 _maxTapRateIncreasePct,\n', '        uint256 _maxTapFloorDecreasePct\n', '    )\n', '        external\n', '    {\n', '        _ensureShareAppsCache();\n', '\n', '        Kernel dao = _daoCache();\n', '        // install fundraising apps\n', '        _installFundraisingApps(\n', '            dao,\n', '            _goal,\n', '            _period,\n', '            _exchangeRate,\n', '            _vestingCliffPeriod,\n', '            _vestingCompletePeriod,\n', '            _supplyOfferedPct,\n', '            _fundingForBeneficiaryPct,\n', '            _openDate,\n', '            _batchBlocks,\n', '            _maxTapRateIncreasePct,\n', '            _maxTapFloorDecreasePct\n', '        );\n', '        // setup share apps permissions [now that fundraising apps have been installed]\n', '        _setupSharePermissions(dao);\n', '        // setup fundraising apps permissions\n', '        _setupFundraisingPermissions(dao);\n', '    }\n', '\n', '    function finalizeInstance(\n', '        string     _id,\n', '        uint256[2] _virtualSupplies,\n', '        uint256[2] _virtualBalances,\n', '        uint256[2] _slippages,\n', '        uint256    _rateDAI,\n', '        uint256    _floorDAI\n', '    )\n', '        external\n', '    {\n', '        require(bytes(_id).length > 0,        ERROR_BAD_SETTINGS);\n', '        require(_virtualSupplies.length == 2, ERROR_BAD_SETTINGS);\n', '        require(_virtualBalances.length == 2, ERROR_BAD_SETTINGS);\n', '        require(_slippages.length == 2,       ERROR_BAD_SETTINGS);\n', '        _ensureFundraisingAppsCache();\n', '\n', '        Kernel dao = _daoCache();\n', '        ACL acl = ACL(dao.acl());\n', '        (, Voting shareVoting) = _shareAppsCache();\n', '\n', '        // setup collaterals\n', '        _setupCollaterals(dao, _virtualSupplies, _virtualBalances, _slippages, _rateDAI, _floorDAI);\n', '        // setup EVM script registry permissions\n', '        _createEvmScriptsRegistryPermissions(acl, shareVoting, shareVoting);\n', '        // clear DAO permissions\n', '        _transferRootPermissionsFromTemplateAndFinalizeDAO(dao, shareVoting, shareVoting);\n', '        // register id\n', '        _registerID(_id, address(dao));\n', '        // clear cache\n', '        _clearCache();\n', '    }\n', '\n', '    /***** internal apps installation functions *****/\n', '\n', '    function _installBoardApps(Kernel _dao, MiniMeToken _token, uint64[3] _votingSettings, uint64 _financePeriod)\n', '        internal\n', '        returns (TokenManager)\n', '    {\n', '        TokenManager tm = _installTokenManagerApp(_dao, _token, BOARD_TRANSFERABLE, BOARD_MAX_PER_ACCOUNT);\n', '        Voting voting = _installVotingApp(_dao, _token, _votingSettings);\n', '        Vault vault = _installVaultApp(_dao);\n', '        Finance finance = _installFinanceApp(_dao, vault, _financePeriod == 0 ? DEFAULT_FINANCE_PERIOD : _financePeriod);\n', '\n', '        _cacheBoardApps(tm, voting, vault, finance);\n', '\n', '        return tm;\n', '    }\n', '\n', '    function _installShareApps(Kernel _dao, MiniMeToken _shareToken, uint64[3] _shareVotingSettings)\n', '        internal\n', '    {\n', '        TokenManager tm = _installTokenManagerApp(_dao, _shareToken, SHARE_TRANSFERABLE, SHARE_MAX_PER_ACCOUNT);\n', '        Voting voting = _installVotingApp(_dao, _shareToken, _shareVotingSettings);\n', '\n', '        _cacheShareApps(tm, voting);\n', '    }\n', '\n', '    function _installFundraisingApps(\n', '        Kernel  _dao,\n', '        uint256 _goal,\n', '        uint64  _period,\n', '        uint256 _exchangeRate,\n', '        uint64  _vestingCliffPeriod,\n', '        uint64  _vestingCompletePeriod,\n', '        uint256 _supplyOfferedPct,\n', '        uint256 _fundingForBeneficiaryPct,\n', '        uint64  _openDate,\n', '        uint256 _batchBlocks,\n', '        uint256 _maxTapRateIncreasePct,\n', '        uint256 _maxTapFloorDecreasePct\n', '    )\n', '        internal\n', '    {\n', '        _proxifyFundraisingApps(_dao);\n', '\n', '        _initializePresale(\n', '            _goal,\n', '            _period,\n', '            _exchangeRate,\n', '            _vestingCliffPeriod,\n', '            _vestingCompletePeriod,\n', '            _supplyOfferedPct,\n', '            _fundingForBeneficiaryPct,\n', '            _openDate\n', '        );\n', '        _initializeMarketMaker(_batchBlocks);\n', '        _initializeTap(_batchBlocks, _maxTapRateIncreasePct, _maxTapFloorDecreasePct);\n', '        _initializeController();\n', '    }\n', '\n', '    function _proxifyFundraisingApps(Kernel _dao) internal {\n', '        Agent reserve = _installNonDefaultAgentApp(_dao);\n', '        Presale presale = Presale(_registerApp(_dao, PRESALE_ID));\n', '        BatchedBancorMarketMaker marketMaker = BatchedBancorMarketMaker(_registerApp(_dao, MARKET_MAKER_ID));\n', '        Tap tap = Tap(_registerApp(_dao, TAP_ID));\n', '        AragonFundraisingController controller = AragonFundraisingController(_registerApp(_dao, ARAGON_FUNDRAISING_ID));\n', '\n', '        _cacheFundraisingApps(reserve, presale, marketMaker, tap, controller);\n', '    }\n', '\n', '    /***** internal apps initialization functions *****/\n', '\n', '    function _initializePresale(\n', '        uint256 _goal,\n', '        uint64  _period,\n', '        uint256 _exchangeRate,\n', '        uint64  _vestingCliffPeriod,\n', '        uint64  _vestingCompletePeriod,\n', '        uint256 _supplyOfferedPct,\n', '        uint256 _fundingForBeneficiaryPct,\n', '        uint64  _openDate\n', '    )\n', '        internal\n', '    {\n', '        _presaleCache().initialize(\n', '            _controllerCache(),\n', '            _shareTMCache(),\n', '            _reserveCache(),\n', '            _vaultCache(),\n', '            collaterals[0],\n', '            _goal,\n', '            _period,\n', '            _exchangeRate,\n', '            _vestingCliffPeriod,\n', '            _vestingCompletePeriod,\n', '            _supplyOfferedPct,\n', '            _fundingForBeneficiaryPct,\n', '            _openDate\n', '        );\n', '    }\n', '\n', '    function _initializeMarketMaker(uint256 _batchBlocks) internal {\n', '        IBancorFormula bancorFormula = IBancorFormula(_latestVersionAppBase(BANCOR_FORMULA_ID));\n', '\n', '        (,, Vault beneficiary,) = _boardAppsCache();\n', '        (TokenManager shareTM,) = _shareAppsCache();\n', '        (Agent reserve,, BatchedBancorMarketMaker marketMaker,, AragonFundraisingController controller) = _fundraisingAppsCache();\n', '\n', '        marketMaker.initialize(controller, shareTM, bancorFormula, reserve, beneficiary, _batchBlocks, BUY_FEE_PCT, SELL_FEE_PCT);\n', '    }\n', '\n', '    function _initializeTap(uint256 _batchBlocks, uint256 _maxTapRateIncreasePct, uint256 _maxTapFloorDecreasePct) internal {\n', '        (,, Vault beneficiary,) = _boardAppsCache();\n', '        (Agent reserve,,, Tap tap, AragonFundraisingController controller) = _fundraisingAppsCache();\n', '\n', '        tap.initialize(controller, reserve, beneficiary, _batchBlocks, _maxTapRateIncreasePct, _maxTapFloorDecreasePct);\n', '    }\n', '\n', '    function _initializeController() internal {\n', '        (Agent reserve, Presale presale, BatchedBancorMarketMaker marketMaker, Tap tap, AragonFundraisingController controller) = _fundraisingAppsCache();\n', '        address[] memory toReset = new address[](1);\n', '        toReset[0] = collaterals[0];\n', '        controller.initialize(presale, marketMaker, reserve, tap, toReset);\n', '    }\n', '\n', '    /***** internal setup functions *****/\n', '\n', '    function _setupCollaterals(\n', '        Kernel     _dao,\n', '        uint256[2] _virtualSupplies,\n', '        uint256[2] _virtualBalances,\n', '        uint256[2] _slippages,\n', '        uint256    _rateDAI,\n', '        uint256    _floorDAI\n', '    )\n', '        internal\n', '    {\n', '        ACL acl = ACL(_dao.acl());\n', '        (, Voting shareVoting) = _shareAppsCache();\n', '        (,,,, AragonFundraisingController controller) = _fundraisingAppsCache();\n', '\n', '        // create and grant ADD_COLLATERAL_TOKEN_ROLE to this template\n', '        _createPermissionForTemplate(acl, address(controller), controller.ADD_COLLATERAL_TOKEN_ROLE());\n', '        // add DAI both as a protected collateral and a tapped token\n', '        controller.addCollateralToken(\n', '            collaterals[0],\n', '            _virtualSupplies[0],\n', '            _virtualBalances[0],\n', '            DAI_RESERVE_RATIO,\n', '            _slippages[0],\n', '            _rateDAI,\n', '            _floorDAI\n', '        );\n', '        // add ANT as a protected collateral [but not as a tapped token]\n', '        controller.addCollateralToken(\n', '            collaterals[1],\n', '            _virtualSupplies[1],\n', '            _virtualBalances[1],\n', '            ANT_RESERVE_RATIO,\n', '            _slippages[1],\n', '            0,\n', '            0\n', '        );\n', '        // transfer ADD_COLLATERAL_TOKEN_ROLE\n', '        _transferPermissionFromTemplate(acl, controller, shareVoting, controller.ADD_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '    }\n', '\n', '    /***** internal permissions functions *****/\n', '\n', '    function _setupBoardPermissions(Kernel _dao) internal {\n', '        ACL acl = ACL(_dao.acl());\n', '\n', '        (TokenManager boardTM, Voting boardVoting, Vault vault, Finance finance) = _boardAppsCache();\n', '        (, Voting shareVoting) = _shareAppsCache();\n', '\n', '        // token manager\n', '        _createTokenManagerPermissions(acl, boardTM, boardVoting, shareVoting);\n', '        // voting\n', '        _createVotingPermissions(acl, boardVoting, boardVoting, boardTM, shareVoting);\n', '        // vault\n', '        _createVaultPermissions(acl, vault, finance, shareVoting);\n', '        // finance\n', '        _createFinancePermissions(acl, finance, boardVoting, shareVoting);\n', '        _createFinanceCreatePaymentsPermission(acl, finance, boardVoting, shareVoting);\n', '    }\n', '\n', '    function _setupSharePermissions(Kernel _dao) internal {\n', '        ACL acl = ACL(_dao.acl());\n', '\n', '        (TokenManager boardTM,,,) = _boardAppsCache();\n', '        (TokenManager shareTM, Voting shareVoting) = _shareAppsCache();\n', '        (, Presale presale, BatchedBancorMarketMaker marketMaker,,) = _fundraisingAppsCache();\n', '\n', '        // token manager\n', '        address[] memory grantees = new address[](2);\n', '        grantees[0] = address(marketMaker);\n', '        grantees[1] = address(presale);\n', '        acl.createPermission(marketMaker, shareTM, shareTM.MINT_ROLE(),shareVoting);\n', '        acl.createPermission(presale, shareTM, shareTM.ISSUE_ROLE(),shareVoting);\n', '        acl.createPermission(presale, shareTM, shareTM.ASSIGN_ROLE(),shareVoting);\n', '        acl.createPermission(presale, shareTM, shareTM.REVOKE_VESTINGS_ROLE(), shareVoting);\n', '        _createPermissions(acl, grantees, shareTM, shareTM.BURN_ROLE(), shareVoting);\n', '        // voting\n', '        _createVotingPermissions(acl, shareVoting, shareVoting, boardTM, shareVoting);\n', '    }\n', '\n', '    function _setupFundraisingPermissions(Kernel _dao) internal {\n', '        ACL acl = ACL(_dao.acl());\n', '\n', '        (, Voting boardVoting,,) = _boardAppsCache();\n', '        (, Voting shareVoting) = _shareAppsCache();\n', '        (Agent reserve, Presale presale, BatchedBancorMarketMaker marketMaker, Tap tap, AragonFundraisingController controller) = _fundraisingAppsCache();\n', '\n', '        // reserve\n', '        address[] memory grantees = new address[](2);\n', '        grantees[0] = address(tap);\n', '        grantees[1] = address(marketMaker);\n', '        acl.createPermission(shareVoting, reserve, reserve.SAFE_EXECUTE_ROLE(), shareVoting);\n', '        acl.createPermission(controller, reserve, reserve.ADD_PROTECTED_TOKEN_ROLE(), shareVoting);\n', '        _createPermissions(acl, grantees, reserve, reserve.TRANSFER_ROLE(), shareVoting);\n', '        // presale\n', '        acl.createPermission(controller, presale, presale.OPEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, presale, presale.CONTRIBUTE_ROLE(), shareVoting);\n', '        // market maker\n', '        acl.createPermission(controller, marketMaker, marketMaker.OPEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.UPDATE_BENEFICIARY_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.UPDATE_FEES_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.ADD_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.REMOVE_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.UPDATE_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.OPEN_BUY_ORDER_ROLE(), shareVoting);\n', '        acl.createPermission(controller, marketMaker, marketMaker.OPEN_SELL_ORDER_ROLE(), shareVoting);\n', '        // tap\n', '        acl.createPermission(controller, tap, tap.UPDATE_BENEFICIARY_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.ADD_TAPPED_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.UPDATE_TAPPED_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.RESET_TAPPED_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(controller, tap, tap.WITHDRAW_ROLE(), shareVoting);\n', '        // controller\n', '        // ADD_COLLATERAL_TOKEN_ROLE is handled later [after collaterals have been added]\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_BENEFICIARY_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_FEES_ROLE(), shareVoting);\n', '        // acl.createPermission(shareVoting, controller, controller.ADD_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.REMOVE_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_COLLATERAL_TOKEN_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.ADD_TOKEN_TAP_ROLE(), shareVoting);\n', '        acl.createPermission(shareVoting, controller, controller.UPDATE_TOKEN_TAP_ROLE(), shareVoting);\n', '        acl.createPermission(boardVoting, controller, controller.OPEN_PRESALE_ROLE(), shareVoting);\n', '        acl.createPermission(presale, controller, controller.OPEN_TRADING_ROLE(), shareVoting);\n', '        acl.createPermission(address(-1), controller, controller.CONTRIBUTE_ROLE(), shareVoting);\n', '        acl.createPermission(address(-1), controller, controller.OPEN_BUY_ORDER_ROLE(), shareVoting);\n', '        acl.createPermission(address(-1), controller, controller.OPEN_SELL_ORDER_ROLE(), shareVoting);\n', '        acl.createPermission(address(-1), controller, controller.WITHDRAW_ROLE(), shareVoting);\n', '    }\n', '\n', '    /***** internal cache functions *****/\n', '\n', '    function _cacheDao(Kernel _dao) internal {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        c.dao = address(_dao);\n', '    }\n', '\n', '    function _cacheBoardApps(TokenManager _boardTM, Voting _boardVoting, Vault _vault, Finance _finance) internal {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        c.boardTokenManager = address(_boardTM);\n', '        c.boardVoting = address(_boardVoting);\n', '        c.vault = address(_vault);\n', '        c.finance = address(_finance);\n', '    }\n', '\n', '    function _cacheShareApps(TokenManager _shareTM, Voting _shareVoting) internal {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        c.shareTokenManager = address(_shareTM);\n', '        c.shareVoting = address(_shareVoting);\n', '    }\n', '\n', '    function _cacheFundraisingApps(Agent _reserve, Presale _presale, BatchedBancorMarketMaker _marketMaker, Tap _tap, AragonFundraisingController _controller) internal {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        c.reserve = address(_reserve);\n', '        c.presale = address(_presale);\n', '        c.marketMaker = address(_marketMaker);\n', '        c.tap = address(_tap);\n', '        c.controller = address(_controller);\n', '    }\n', '\n', '    function _daoCache() internal view returns (Kernel dao) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        dao = Kernel(c.dao);\n', '    }\n', '\n', '    function _boardAppsCache() internal view returns (TokenManager boardTM, Voting boardVoting, Vault vault, Finance finance) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        boardTM = TokenManager(c.boardTokenManager);\n', '        boardVoting = Voting(c.boardVoting);\n', '        vault = Vault(c.vault);\n', '        finance = Finance(c.finance);\n', '    }\n', '\n', '    function _shareAppsCache() internal view returns (TokenManager shareTM, Voting shareVoting) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        shareTM = TokenManager(c.shareTokenManager);\n', '        shareVoting = Voting(c.shareVoting);\n', '    }\n', '\n', '    function _fundraisingAppsCache() internal view returns (\n', '        Agent reserve,\n', '        Presale presale,\n', '        BatchedBancorMarketMaker marketMaker,\n', '        Tap tap,\n', '        AragonFundraisingController controller\n', '    )\n', '    {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        reserve = Agent(c.reserve);\n', '        presale = Presale(c.presale);\n', '        marketMaker = BatchedBancorMarketMaker(c.marketMaker);\n', '        tap = Tap(c.tap);\n', '        controller = AragonFundraisingController(c.controller);\n', '    }\n', '\n', '    function _clearCache() internal {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        delete c.dao;\n', '        delete c.boardTokenManager;\n', '        delete c.boardVoting;\n', '        delete c.vault;\n', '        delete c.finance;\n', '        delete c.shareVoting;\n', '        delete c.shareTokenManager;\n', '        delete c.reserve;\n', '        delete c.presale;\n', '        delete c.marketMaker;\n', '        delete c.tap;\n', '        delete c.controller;\n', '    }\n', '\n', '    /**\n', '     * NOTE\n', '     * the following functions are only needed for the presale\n', "     * initialization function [which we can't compile otherwise\n", '     * because of a `stack too deep` error]\n', '    */\n', '\n', '    function _vaultCache() internal view returns (Vault vault) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        vault = Vault(c.vault);\n', '    }\n', '\n', '    function _shareTMCache() internal view returns (TokenManager shareTM) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        shareTM = TokenManager(c.shareTokenManager);\n', '    }\n', '\n', '    function _reserveCache() internal view returns (Agent reserve) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        reserve = Agent(c.reserve);\n', '    }\n', '\n', '    function _presaleCache() internal view returns (Presale presale) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        presale = Presale(c.presale);\n', '    }\n', '\n', '    function _controllerCache() internal view returns (AragonFundraisingController controller) {\n', '        Cache storage c = cache[msg.sender];\n', '\n', '        controller = AragonFundraisingController(c.controller);\n', '    }\n', '\n', '    /***** internal check functions *****/\n', '\n', '    function _ensureBoardAppsCache() internal view {\n', '        Cache storage c = cache[msg.sender];\n', '        require(\n', '            c.boardTokenManager != address(0) &&\n', '            c.boardVoting != address(0) &&\n', '            c.vault != address(0) &&\n', '            c.finance != address(0),\n', '            ERROR_MISSING_CACHE\n', '        );\n', '    }\n', '\n', '    function _ensureShareAppsCache() internal view {\n', '        Cache storage c = cache[msg.sender];\n', '        require(\n', '            c.shareTokenManager != address(0) &&\n', '            c.shareVoting != address(0),\n', '            ERROR_MISSING_CACHE\n', '        );\n', '    }\n', '\n', '    function _ensureFundraisingAppsCache() internal view {\n', '        Cache storage c = cache[msg.sender];\n', '        require(\n', '            c.reserve != address(0) &&\n', '            c.presale != address(0) &&\n', '            c.marketMaker != address(0) &&\n', '            c.tap != address(0) &&\n', '            c.controller != address(0),\n', '            ERROR_MISSING_CACHE\n', '        );\n', '    }\n', '\n', '    /***** internal utils functions *****/\n', '\n', '    function _registerApp(Kernel _dao, bytes32 _appId) internal returns (address) {\n', '        address proxy = _dao.newAppInstance(_appId, _latestVersionAppBase(_appId));\n', '\n', '        emit InstalledApp(proxy, _appId);\n', '\n', '        return proxy;\n', '    }\n', '}']