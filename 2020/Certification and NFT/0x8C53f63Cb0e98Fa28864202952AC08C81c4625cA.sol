['// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n', '    external returns (bytes4);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: orchestrator\\IEthItemOrchestrator.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IEthItemOrchestrator is IERC721Receiver, IERC1155Receiver {\n', '\n', '    function factories() external view returns(address[] memory);\n', '\n', '    function factory() external view returns(address);\n', '\n', '    function setFactory(address newFactory) external;\n', '\n', '    function knowledgeBases() external view returns(address[] memory);\n', '\n', '    function knowledgeBase() external view returns(address);\n', '\n', '    function setKnowledgeBase(address newKnowledgeBase) external;\n', '\n', '    /**\n', '     * @dev GET - The DoubleProxy of the DFO linked to this Contract\n', '     */\n', '    function doubleProxy() external view returns (address);\n', '\n', '    /**\n', '     * @dev SET - The DoubleProxy of the DFO linked to this Contract\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     * @param newDoubleProxy the new DoubleProxy address\n', '     */\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC1155Model(address erc1155ModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\n', '\n', '    function createERC1155(bytes calldata modelInitPayload)\n', '        external\n', '        returns (address newNFT1155Address, bytes memory modelInitCallResponse);\n', '}\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: orchestrator\\IEthItemOrchestratorDependantElement.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IEthItemOrchestratorDependantElement is IERC165 {\n', '\n', '    /**\n', '     * @dev GET - The DoubleProxy of the DFO linked to this Contract\n', '     */\n', '    function doubleProxy() external view returns (address);\n', '\n', '    /**\n', '     * @dev SET - The DoubleProxy of the DFO linked to this Contract\n', '     * It can be done only by the Factory controller\n', '     * @param newDoubleProxy the new DoubleProxy address\n', '     */\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '\n', '    function isAuthorizedOrchestrator(address operator) external view returns(bool);\n', '}\n', '\n', '// File: factory\\IEthItemFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title IEthItemFactory\n', ' * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\n', ' */\n', 'interface IEthItemFactory is IEthItemOrchestratorDependantElement {\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     */\n', '    function ethItemERC20WrapperModel() external view returns (address ethItemERC20WrapperModelAddress);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the ERC1155 NFT-Based EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function erc1155Model() external view returns (address erc1155ModelAddress, uint256 erc1155ModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC1155Model(address erc1155ModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     */\n', '    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     */\n', '    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\n', '     */\n', '    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\n', '     * @param erc20WrapperAmount The amount of minted EthItem\n', '     */\n', '    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\n', '     */\n', '    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\n', '     * @param erc20WrapperAmount The amount of burned EthItem\n', '     */\n', '    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev Business Logic to create a brand-new EthItem.\n', "     * It raises the 'NewERC1155Created' event.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC1155Created' event.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC20Created' event.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC721Created' event.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC721(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '}\n', '\n', '// File: knowledgeBase\\IKnowledgeBase.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title IKnowledgeBase\n', ' * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\n', ' */\n', 'interface IKnowledgeBase is IEthItemOrchestratorDependantElement {\n', '\n', '    function setEthItem(address ethItem) external;\n', '\n', '    function isEthItem(address ethItem) external view returns(bool);\n', '\n', '    function setWrapped(address wrappedAddress, address ethItem) external;\n', '\n', '    function wrapper(address wrappedAddress, uint256 version) external returns (address ethItem);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: orchestrator\\EthItemOrchestrator.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract EthItemOrchestrator is IEthItemOrchestrator, ERC165 {\n', '\n', '    address private _doubleProxy;\n', '    address[] private _factories;\n', '    address[] private _knowledgeBases;\n', '\n', '    constructor(\n', '        address doubleProxy,\n', '        address[] memory factoriesArray,\n', '        address[] memory knowledgeBasesArray\n', '    ) public {\n', '        _doubleProxy = doubleProxy;\n', '        _factories = factoriesArray;\n', '        _knowledgeBases = knowledgeBasesArray;\n', '    }\n', '\n', '    function factories() public view override returns(address[] memory) {\n', '        return _factories;\n', '    }\n', '\n', '    function factory() public view override returns(address) {\n', '        return _factories[_factories.length - 1];\n', '    }\n', '\n', '    function knowledgeBases() public view override returns(address[] memory) {\n', '        return _knowledgeBases;\n', '    }\n', '\n', '    function knowledgeBase() public view override returns(address) {\n', '        return _knowledgeBases[_knowledgeBases.length - 1];\n', '    }\n', '\n', '    modifier byDFO virtual {\n', '        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized Action!");\n', '        _;\n', '    }\n', '\n', '    function doubleProxy() public view override returns (address) {\n', '        return _doubleProxy;\n', '    }\n', '\n', '    function setDoubleProxy(address newDoubleProxy) public override byDFO {\n', '        _doubleProxy = newDoubleProxy;\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_factories[i]);\n', '            if(element.supportsInterface(this.setDoubleProxy.selector)) {\n', '                element.setDoubleProxy(_doubleProxy);\n', '            }\n', '        }\n', '        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\n', '            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_knowledgeBases[i]);\n', '            if(element.supportsInterface(this.setDoubleProxy.selector)) {\n', '                element.setDoubleProxy(_doubleProxy);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byDFO {\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemFactory element = IEthItemFactory(_factories[i]);\n', '            if(element.supportsInterface(this.setMintFeePercentage.selector)) {\n', '                element.setMintFeePercentage(mintFeePercentageNumerator, mintFeePercentageDenominator);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byDFO {\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemFactory element = IEthItemFactory(_factories[i]);\n', '            if(element.supportsInterface(this.setBurnFeePercentage.selector)) {\n', '                element.setBurnFeePercentage(burnFeePercentageNumerator, burnFeePercentageDenominator);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setFactory(address newFactory) public override byDFO {\n', '        require(IEthItemOrchestratorDependantElement(newFactory).doubleProxy() == _doubleProxy, "Wrong Double Proxy");\n', '        _factories.push(newFactory);\n', '    }\n', '\n', '    function setKnowledgeBase(address newKnowledgeBase) public override byDFO {\n', '        require(IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy() == _doubleProxy, "Wrong Double Proxy");\n', '        _knowledgeBases.push(newKnowledgeBase);\n', '    }\n', '\n', '    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setEthItemERC20WrapperModel.selector)) {\n', '            element.setEthItemERC20WrapperModel(ethItemERC20WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC1155Model(address erc1155ModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC1155Model.selector)) {\n', '            element.setERC1155Model(erc1155ModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC1155WrapperModel.selector)) {\n', '            element.setERC1155WrapperModel(erc1155WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC20WrapperModel.selector)) {\n', '            element.setERC20WrapperModel(erc20WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC721WrapperModel.selector)) {\n', '            element.setERC721WrapperModel(erc721WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function onERC1155Received(\n', '        address operator,\n', '        address owner,\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes memory\n', '    ) public virtual override returns (bytes4) {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address owner,\n', '        uint256[] memory objectIds,\n', '        uint256[] memory amounts,\n', '        bytes memory payload\n', '    ) public virtual override returns (bytes4) {\n', '        for(uint256 i = 0; i < objectIds.length; i++) {\n', '            onERC1155Received(operator, owner, objectIds[i], amounts[i], payload);\n', '        }\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '\n', '    function onERC721Received(\n', '        address operator,\n', '        address owner,\n', '        uint256 objectId,\n', '        bytes memory payload\n', '    ) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '\n', '    function createERC1155(bytes memory modelInitCallPayload) public override\n', '        returns (address newNFT1155Address, bytes memory modelInitCallResponse) {\n', '        (newNFT1155Address, modelInitCallResponse) = IEthItemFactory(factory()).createERC1155(modelInitCallPayload);\n', '        IKnowledgeBase(knowledgeBase()).setEthItem(newNFT1155Address);\n', '    }\n', '}']