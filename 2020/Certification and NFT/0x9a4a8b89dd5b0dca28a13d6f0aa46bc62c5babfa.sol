['/**\n', ' *Submitted for verification at Etherscan.io on 2020-01-31\n', '*/\n', '\n', '/**\n', '*\n', '*   ,d8888b                                                    \n', "*   88P'                                                       \n", '*d888888P                                                      \n', "*  ?88'     d8888b   88bd88b .d888b, d888b8b   d888b8b   d8888b\n", "*  88P     d8P' ?88  88P'  ` ?8b,   d8P' ?88  d8P' ?88  d8b_,dP\n", '* d88      88b  d88 d88        `?8b 88b  ,88b 88b  ,88b 88b    \n', "*d88'      `?8888P'd88'     `?888P' `?88P'`88b`?88P'`88b`?888P'\n", '*                                                    )88       \n', '*                                                   ,88P       \n', '*                                               `?8888P        \n', '*\n', '* \n', '* SmartWay Forsage\n', '* https://forsage.smartway.run\n', '* (only for SmartWay.run members)\n', '* \n', '**/\n', '\n', '\n', 'pragma solidity >=0.4.23 <0.6.0;\n', '\n', 'contract SmartMatrixForsage {\n', '\n', '    struct User {\n', '        uint id;\n', '        address referrer; //推荐人\n', '        uint partnersCount; //合作伙伴数量\n', '\n', '        mapping(uint8 => bool) activeX3Levels; //X3等级\n', '        mapping(uint8 => bool) activeX6Levels; //X6等级\n', '\n', '        mapping(uint8 => X3) x3Matrix; //X3矩阵--等级1-12\n', '        mapping(uint8 => X6) x6Matrix; //X6矩阵--等级1-12\n', '    }\n', '\n', '    struct X3 {\n', '        address currentReferrer; //当前推荐人\n', '        address[] referrals; //下线\n', '        bool blocked; //冻结\n', '        uint reinvestCount; //复投次数\n', '    }\n', '\n', '    struct X6 {\n', '        address currentReferrer;  //当前推荐人\n', '        address[] firstLevelReferrals; //第一等级下线\n', '        address[] secondLevelReferrals; //第二等级下线\n', '        bool blocked;//冻结\n', '        uint reinvestCount; //复投次数\n', '\n', '        address closedPart; //TODO 封闭角色？\n', '    }\n', '\n', '    uint8 public constant LAST_LEVEL = 12; //最大等级\n', '\n', '    mapping(address => User) public users; //用户\n', '    mapping(uint => address) public idToAddress; //id -》地址\n', '    mapping(uint => address) public userIds; //TODO 区别\n', '    mapping(address => uint) public balances; //地址的余额\n', '\n', '    uint public lastUserId = 2; //起始id\n', '    address public owner; //合约所有人\n', '\n', '    mapping(uint8 => uint) public levelPrice; //等级价格\n', '\n', '    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\n', '    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\n', '    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\n', '    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place, uint256 reinvestCount);\n', '    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\n', '    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\n', '\n', '\n', '    constructor(address ownerAddress) public {\n', '        levelPrice[1] = 0.001 ether;\n', '        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\n', '            levelPrice[i] = levelPrice[i-1] * 2; //0.001 0.01 0.02 0.04 0.08 0.16 0.32 0.64 1.28 2.56 5.12 10.24\n', '        }\n', '\n', '        owner = ownerAddress; //合约所有人\n', '\n', '        User memory user = User({\n', '            id: 1,\n', '            referrer: address(0),\n', '            partnersCount: uint(0)\n', '            });\n', '\n', '        users[ownerAddress] = user;\n', '        idToAddress[1] = ownerAddress; //合约第一人\n', '\n', '        for (uint8 j = 1; j <= LAST_LEVEL; j++) {\n', '            users[ownerAddress].activeX3Levels[j] = true;\n', '            users[ownerAddress].activeX6Levels[j] = true;\n', '        }\n', '\n', '        userIds[1] = ownerAddress; //TODO 和 IdToAddress 有什么区别\n', '    }\n', '\n', '    function() external payable {\n', '        if(msg.data.length == 0) {\n', '            return registration(msg.sender, owner);\n', '        }\n', '\n', '        registration(msg.sender, bytesToAddress(msg.data));\n', '    }\n', '\n', '    function registrationExt(address referrerAddress) external payable {\n', '        registration(msg.sender, referrerAddress);\n', '    }\n', '\n', '    function buyNewLevel(uint8 matrix, uint8 level) external payable {\n', '        require(isUserExists(msg.sender), "user is not exists. Register first.");\n', '        require(matrix == 1 || matrix == 2, "invalid matrix");\n', '        require(msg.value == levelPrice[level], "invalid price");\n', '        require(level > 1 && level <= LAST_LEVEL, "invalid level");\n', '\n', '        if (matrix == 1) {\n', '            require(!users[msg.sender].activeX3Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x3Matrix[level-1].blocked) {\n', '                users[msg.sender].x3Matrix[level-1].blocked = false;\n', '            } //关闭冻结，购买了下个等级\n', '\n', '            address freeX3Referrer = findFreeX3Referrer(msg.sender, level); //找到上个推荐人的等级\n', '            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer; //X3当前等级的推荐人\n', '            users[msg.sender].activeX3Levels[level] = true; //激活对应等级\n', '            updateX3Referrer(msg.sender, freeX3Referrer, level);\n', '\n', '            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\n', '\n', '        } else {\n', '            require(!users[msg.sender].activeX6Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x6Matrix[level-1].blocked) {\n', '                users[msg.sender].x6Matrix[level-1].blocked = false;\n', '            }\n', '\n', '            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\n', '\n', '            users[msg.sender].activeX6Levels[level] = true;\n', '            updateX6Referrer(msg.sender, freeX6Referrer, level);\n', '\n', '            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\n', '        }\n', '    }\n', '\n', '    function registration(address userAddress, address referrerAddress) private {\n', '        require(msg.value == 0.002 ether, "registration cost 0.002");\n', '        require(!isUserExists(userAddress), "user exists");\n', '        require(isUserExists(referrerAddress), "referrer not exists");\n', '\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(userAddress)\n', '        }\n', '        require(size == 0, "cannot be a contract");\n', '\n', '        User memory user = User({\n', '            id: lastUserId,\n', '            referrer: referrerAddress,\n', '            partnersCount: 0\n', '            });\n', '\n', '        users[userAddress] = user;\n', '        idToAddress[lastUserId] = userAddress;\n', '\n', '        users[userAddress].referrer = referrerAddress;\n', '\n', '        users[userAddress].activeX3Levels[1] = true;\n', '        users[userAddress].activeX6Levels[1] = true;\n', '\n', '\n', '        userIds[lastUserId] = userAddress;\n', '        lastUserId++;\n', '\n', '        users[referrerAddress].partnersCount++;\n', '\n', '        address freeX3Referrer = findFreeX3Referrer(userAddress, 1); //找到上线X3的1层推荐人\n', '        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer; //保存X3现在1层的推荐人\n', '        updateX3Referrer(userAddress, freeX3Referrer, 1);\n', '\n', '        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\n', '\n', '        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\n', '    }\n', '\n', '    //更新X3推荐人---买等级\n', '    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        users[referrerAddress].x3Matrix[level].referrals.push(userAddress); //推荐人的X3对应的等级的下线\n', '\n', '        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\n', '            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length), uint256(users[referrerAddress].x3Matrix[level].reinvestCount));\n', '            return sendETHDividends(referrerAddress, userAddress, 1, level); //发送以太坊分红\n', '        } //下线小于3个人\n', '\n', '        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3, uint256(users[referrerAddress].x3Matrix[level].reinvestCount));\n', '        //close matrix\n', '        users[referrerAddress].x3Matrix[level].referrals = new address[](0); //下线等于三个人，重新清空地址\n', '        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\n', '            users[referrerAddress].x3Matrix[level].blocked = true;\n', '        } //TODO 冻结 超过三个，但是没有启动下个等级\n', '\n', '        //create new one by recursion\n', '        if (referrerAddress != owner) { //推荐人不是合约所有人\n', '            //check referrer active level\n', '            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level); //超过3人数，送给上线推荐人\n', '            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\n', '                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\n', '            } //TODO 替换推荐人？\n', '\n', '            users[referrerAddress].x3Matrix[level].reinvestCount++; //开启新的一轮\n', '            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\n', '            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\n', '        } else { //推荐人是合约所有人\n', '            sendETHDividends(owner, userAddress, 1, level);\n', '            users[owner].x3Matrix[level].reinvestCount++;\n', '            emit Reinvest(owner, address(0), userAddress, 1, level);\n', '        }\n', '    }\n', '\n', '    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\n', '        require(users[referrerAddress].activeX6Levels[level], "500. Referrer level is inactive");\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\n', '            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length), uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\n', '\n', '            if (referrerAddress == owner) {\n', '                return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '            }\n', '\n', '            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;\n', '            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '\n', '            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\n', '\n', '            if ((len == 2) &&\n', '            (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\n', '                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                }\n', '            }  else if ((len == 1 || len == 2) &&\n', '            users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 3, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 4, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                }\n', '            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6, uint256(users[referrerAddress].x6Matrix[level].reinvestCount));\n', '                }\n', '            }\n', '\n', '            return updateX6ReferrerSecondLevel(userAddress, ref, level);\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\n', '            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '            users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\n', '                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart)) {\n', '\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart) {\n', '                updateX6(userAddress, referrerAddress, level, true);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            } else {\n', '                updateX6(userAddress, referrerAddress, level, false);\n', '                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '            }\n', '        }\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '        }\n', '\n', '        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <=\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\n', '            updateX6(userAddress, referrerAddress, level, false);\n', '        } else {\n', '            updateX6(userAddress, referrerAddress, level, true);\n', '        }\n', '\n', '        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\n', '    }\n', '\n', '    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\n', '        if (!x2) {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length), uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].reinvestCount));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length), uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].reinvestCount));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\n', '        } else {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length), uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].reinvestCount));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length), uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].reinvestCount));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\n', '        }\n', '    }\n', '\n', '    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\n', '        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\n', '            return sendETHDividends(referrerAddress, userAddress, 2, level);\n', '        }\n', '\n', '        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\n', '\n', '        if (x6.length == 2) {\n', '            if (x6[0] == referrerAddress ||\n', '            x6[1] == referrerAddress) {\n', '                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '            } else if (x6.length == 1) {\n', '                if (x6[0] == referrerAddress) {\n', '                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '                }\n', '            }\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].closedPart = address(0);\n', '\n', '        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\n', '            users[referrerAddress].x6Matrix[level].blocked = true;\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].reinvestCount++;\n', '\n', '        if (referrerAddress != owner) {\n', '            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\n', '\n', '            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\n', '            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\n', '        } else {\n', '            emit Reinvest(owner, address(0), userAddress, 2, level);\n', '            sendETHDividends(owner, userAddress, 2, level);\n', '        }\n', '    }\n', '\n', '    //推荐人的等级\n', '    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX3Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            } //X3推荐人的等级是否存在\n', '\n', '            userAddress = users[userAddress].referrer; //往推荐人的推荐人找---找到对应等级的推荐人\n', '        }\n', '    }\n', '\n', '    //推荐人的等级\n', '    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX6Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            }\n', '\n', '            userAddress = users[userAddress].referrer; //往推荐人的推荐人找---找到对应等级的推荐人\n', '        }\n', '    }\n', '\n', '    //用户等级是否存在\n', '    function usersActiveX3Levels(address userAddress, uint8 level) public view returns(bool) {\n', '        return users[userAddress].activeX3Levels[level];\n', '    }\n', '\n', '    //用户等级是否存在\n', '    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\n', '        return users[userAddress].activeX6Levels[level];\n', '    }\n', '\n', '    //对应等级的推荐人、下线、冻结状态\n', '    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\n', '        return (users[userAddress].x3Matrix[level].currentReferrer,\n', '        users[userAddress].x3Matrix[level].referrals,\n', '        users[userAddress].x3Matrix[level].blocked);\n', '    }\n', '\n', '    //对应等级的推荐人、下线、冻结状态、闭环\n', '    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\n', '        return (users[userAddress].x6Matrix[level].currentReferrer,\n', '        users[userAddress].x6Matrix[level].firstLevelReferrals,\n', '        users[userAddress].x6Matrix[level].secondLevelReferrals,\n', '        users[userAddress].x6Matrix[level].blocked,\n', '        users[userAddress].x6Matrix[level].closedPart);\n', '    }\n', '\n', '    function isUserExists(address user) public view returns (bool) {\n', '        return (users[user].id != 0);\n', '    }\n', '\n', '    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\n', '        address receiver = userAddress;\n', '        bool isExtraDividends;\n', '        if (matrix == 1) {\n', '            while (true) {\n', '                if (users[receiver].x3Matrix[level].blocked) {\n', '                    emit MissedEthReceive(receiver, _from, 1, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x3Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        } else {\n', '            while (true) {\n', '                if (users[receiver].x6Matrix[level].blocked) {\n', '                    emit MissedEthReceive(receiver, _from, 2, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x6Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    //转账\n', '    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\n', '        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\n', '\n', '        if (!address(uint160(receiver)).send(levelPrice[level])) {\n', '            return address(uint160(receiver)).transfer(address(this).balance);\n', '        }\n', '\n', '        if (isExtraDividends) {\n', '            emit SentExtraEthDividends(_from, receiver, matrix, level);\n', '        }\n', '    }\n', '\n', '    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '}']