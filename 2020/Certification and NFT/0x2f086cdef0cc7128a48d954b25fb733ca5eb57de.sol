['// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _governance;\n', '\n', '    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _governance = msgSender;\n', '        emit GovernanceTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _governance;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(_governance == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferGovernance(address newOwner) internal virtual onlyGovernance {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit GovernanceTransferred(_governance, newOwner);\n', '        _governance = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/StabilizeStrategyPickle.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '// This is a strategy that utilizes UNI ETH/USDT token in the Pickle.Finance protocol\n', '// It deposits the LP token for pJar tokens\n', '// It then deposits the pJar tokens into the pickle farm to earn pickle tokens\n', '// It then uses the earned pickle tokens and stakes it into pickle staking to earn WETH\n', '// It then collects the earn WETH and splits it among the depositors, the STBZ staking pool and the STBZ treasury\n', "// The strategy doesn't sell any tokens via Uniswap so it shouldn't affect Pickle adversely\n", '// The pickle earned via the farm are constantly being staked to earn more WETH for the users\n', '// When a user withdraws, he/she receives a proportion of the total shares in LP token, Pickle and WETH\n', '\n', '// Used to convert weth to eth upon withdraw\n', 'interface WrappedEther {\n', '    function withdraw(uint) external; \n', '}\n', '\n', 'interface PickleJar {\n', '    function getRatio() external view returns (uint256);\n', '    function deposit(uint256) external;\n', '    function withdraw(uint256) external;\n', '    function withdrawAll() external;\n', '}\n', '\n', 'interface PickleFarm {\n', '    function deposit(uint256, uint256) external;\n', '    function withdraw(uint256, uint256) external;\n', '    function userInfo(uint256, address) external view returns (uint256, uint256);\n', '}\n', '\n', 'interface PickleStake {\n', '    function stake(uint256) external;\n', '    function withdraw(uint256) external;\n', '    function exit() external;\n', '    function earned(address) external view returns (uint256);\n', '    function getReward() external;\n', '}\n', '\n', 'interface StabilizeStakingPool {\n', '    function notifyRewardAmount(uint256) external;\n', '}\n', '\n', 'contract StabilizeStrategyPickleDAIV1 is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    \n', '    address public treasuryAddress; // Address of the treasury\n', '    address public stakingAddress; // Address to the STBZ staking pool\n', '    address public zsTokenAddress; // The address of the controlling zs-Token\n', '    \n', '    uint256 constant divisionFactor = 100000;\n', '    uint256 public percentLPDepositor = 50000; // 1000 = 1%, depositors earn 50% of all WETH produced, 100% of everything else\n', '    uint256 public percentStakers = 50000; // 50% of non-depositors WETH goes to stakers, can be changed\n', '    \n', '    // Reward tokens tokens list\n', '    address[] rewardTokenList;\n', '    \n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 depositTime; // The time the user made the last deposit, token share is calculated from this\n', '        uint256 balanceEstimate;\n', '    }\n', '    \n', '    mapping(address => UserInfo) private userInfo;\n', '    uint256 public weightedAverageDepositTime = 0; // Average time to enter\n', '    \n', '    // Strategy specific variables\n', '    uint256 private _totalBalancePTokens = 0; // The total amount of pTokens currently staked/stored in contract\n', '    uint256 private _stakedPickle = 0; // The amount of pickles being staked\n', '    address constant wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant pickleAddress = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n', '    address constant pJarAddress = address(0x6949Bb624E8e8A90F87cD2058139fcd77D2F3F87); // Pickle jar address / pToken address\n', '    address constant pFarmAddress = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d); // Pickle farming contract aka MasterChef\n', '    address constant underlyingAddress = address(0x6B175474E89094C44Da98b954EedeAC495271d0F); // Address of the underlying token\n', '    uint256 constant pTokenID = 16; // The location of the pToken in the pickle staking farm\n', '    address constant pickleStakeAddress = address(0xa17a8883dA1aBd57c690DF9Ebf58fC194eDAb66F); // Pickle staking address\n', '    uint256 constant minETH = 1000000000; // 0.000000001 ETH / 1 Gwei\n', '\n', '    constructor(\n', '        address _treasury,\n', '        address _staking,\n', '        address _zsToken\n', '    ) public {\n', '        treasuryAddress = _treasury;\n', '        stakingAddress = _staking;\n', '        zsTokenAddress = _zsToken;\n', '        setupRewardTokens();\n', '    }\n', '\n', '    // Initialization functions\n', '    \n', '    function setupRewardTokens() internal {\n', '        // Reward tokens\n', '        rewardTokenList.push(underlyingAddress); // DAI token\n', '        rewardTokenList.push(pickleAddress); // Picke token\n', '        rewardTokenList.push(wethAddress); // Wrapped Ether token\n', '    }\n', '    \n', '    // Modifier\n', '    modifier onlyZSToken() {\n', '        require(zsTokenAddress == _msgSender(), "Call not sent from the zs-Token");\n', '        _;\n', '    }\n', '    \n', '    // Read functions\n', '    \n', '    function rewardTokensCount() external view returns (uint256) {\n', '        return rewardTokenList.length;\n', '    }\n', '    \n', '    function rewardTokenAddress(uint256 _pos) external view returns (address) {\n', '        require(_pos < rewardTokenList.length,"No token at that position");\n', '        return rewardTokenList[_pos];\n', '    }\n', '    \n', '    function balance() external view returns (uint256) {\n', '        return _totalBalancePTokens;\n', '    }\n', '    \n', '    function pricePerToken() external view returns (uint256) {\n', '        return PickleJar(pJarAddress).getRatio();\n', '    }\n', '    \n', '    // Write functions\n', '    \n', '    function enter() external onlyZSToken {\n', '        deposit(_msgSender());\n', '    }\n', '    \n', '    function exit() external onlyZSToken {\n', '        // The ZS token vault is removing all tokens from this strategy\n', '        withdraw(_msgSender(),1,1);\n', '    }\n', '    \n', '    function withdraw(address payable _depositor, uint256 _share, uint256 _total) public onlyZSToken returns (uint256) {\n', '        require(_totalBalancePTokens > 0, "There are no LP tokens in this strategy");\n', "        // When a user withdraws, we need to pull the user's share out from all the contracts and split its tokens\n", '        checkWETHAndPay(); // First check if we have unclaimed WETH and claim it\n', '        \n', '        // Next we need to calculate our percent of pTokens\n', '        bool _takeAll = false;\n', '        if(_share == _total){\n', '            _takeAll = true; // Remove everything to this user\n', '        }\n', '        \n', '        uint256 pTokenAmount = _totalBalancePTokens;\n', '        if(_takeAll == false){\n', '            pTokenAmount = _totalBalancePTokens.mul(_share).div(_total);\n', '        }else{\n', '            (pTokenAmount, ) = PickleFarm(pFarmAddress).userInfo(pTokenID, address(this)); // Get the total amount at the farm\n', '            _totalBalancePTokens = pTokenAmount;\n', '        }\n', '        \n', '        // Lower the amount of pTokens\n', '         _totalBalancePTokens = _totalBalancePTokens.sub(pTokenAmount);\n', '\n', '         // Now withdraw the pLP from Pickle Farm\n', '        PickleFarm(pFarmAddress).withdraw(pTokenID, pTokenAmount); // This function also returns Pickle earned\n', '        \n', '        // Update user balance\n', '        if(_depositor != zsTokenAddress){\n', '            if(pTokenAmount >= userInfo[_depositor].balanceEstimate){\n', '                userInfo[_depositor].balanceEstimate = 0;\n', '            }else{\n', '                userInfo[_depositor].balanceEstimate = userInfo[_depositor].balanceEstimate.sub(pTokenAmount);\n', '            }\n', '            if(_takeAll == true){\n', '                userInfo[_depositor].balanceEstimate = 0;\n', '            }\n', '        }\n', '        \n', '        // Now exchange the pJar token for the LP token\n', '        IERC20 _lpToken = IERC20(rewardTokenList[0]);\n', '        uint256 lpWithdrawAmount = 0;\n', '        if(_takeAll == false){\n', '            uint256 _before = _lpToken.balanceOf(address(this));\n', '            PickleJar(pJarAddress).withdraw(pTokenAmount);\n', '            lpWithdrawAmount = _lpToken.balanceOf(address(this)).sub(_before);\n', '        }else{\n', '            PickleJar(pJarAddress).withdrawAll();\n', '            lpWithdrawAmount = _lpToken.balanceOf(address(this)); // Get all LP tokens here\n', '        }\n', '        require(lpWithdrawAmount > 0,"Failed to withdraw from the Pickle Jar");\n', '\n', '        // Transfer the accessory tokens\n', '        transferAccessoryTokens(_depositor, _share, _total);\n', '        \n', '        // Now we withdraw the LP to the user\n', '        _lpToken.safeTransfer(_depositor, lpWithdrawAmount);\n', '        return lpWithdrawAmount;\n', '    }\n', '    \n', '    function transferAccessoryTokens(address payable _depositor, uint256 _share, uint256 _total) internal {\n', '        bool _takeAll = false;\n', '        if(_share == _total){\n', '            _takeAll = true;\n', '        }\n', '        if(_takeAll == false){\n', '            // We need to now calculate the percent of accessory tokens going to this depositor\n', '            // It is based on how long the depositor is in the contract and their share\n', '            \n', '            uint256 exitTime = now;\n', '            uint256 enterTime = userInfo[_depositor].depositTime;\n', '            if(userInfo[_depositor].depositTime == 0){ // User has never deposited into the contract at this address\n', '                enterTime = now; // No access to pickle or weth reward\n', '            }else{\n', '                if(_share > userInfo[_depositor].balanceEstimate){\n', "                    // This shouldn't happen under normal circumstances\n", '                    _share = userInfo[_depositor].balanceEstimate; // The user has withdrawn more tokens than attributed to this address, put share to estimate\n', '                }\n', '            }\n', '            uint256 numerator = exitTime.sub(enterTime);\n', '            uint256 denominator = exitTime.sub(weightedAverageDepositTime);\n', '            uint256 timeShare = 0;\n', '            if(numerator > denominator){\n', '                // This user has been in the contract longer than the average, allow up to 100% of tokens based on share\n', '                timeShare = divisionFactor; // 100%\n', '            }else{\n', '                // User has been in less than or equal to average, limit token amount based on that\n', '                if(denominator > 0){\n', '                    timeShare = numerator.mul(divisionFactor).div(denominator);\n', '                }else{\n', '                    timeShare = 0;\n', '                }\n', '            }\n', '            \n', '            // Now withdraw the tokens based on the timeshare and share\n', '            IERC20 _token = IERC20(pickleAddress);\n', '            uint256 _tokenBalance = _token.balanceOf(address(this)); // Get balance of pickle in contract not staked\n', '            uint256 tokenWithdrawAmount = _tokenBalance.add(_stakedPickle).mul(_share).div(_total); // First based on our share %\n', '            tokenWithdrawAmount = tokenWithdrawAmount.mul(timeShare).div(divisionFactor); // Then on time in contract\n', '            if(tokenWithdrawAmount > _tokenBalance){\n', '                // Must remove some from the staking pool to fill this amount\n', '                uint256 _removeAmount = tokenWithdrawAmount.sub(_tokenBalance);\n', '                _stakedPickle = _stakedPickle.sub(_removeAmount);\n', '                PickleStake(pickleStakeAddress).withdraw(_removeAmount);\n', '            }\n', '            // Send the Pickle to the user\n', '            if(tokenWithdrawAmount > 0){\n', '                _token.safeTransfer(_depositor, tokenWithdrawAmount);\n', '            }\n', '            \n', '            // Now do the same for WETH\n', '            _token = IERC20(wethAddress);\n', '            _tokenBalance = _token.balanceOf(address(this)); // Weth is just stored in this contract until removed\n', '            tokenWithdrawAmount = _tokenBalance.mul(_share).div(_total); // First based on our share %\n', '            tokenWithdrawAmount = tokenWithdrawAmount.mul(timeShare).div(divisionFactor); // Then on time in contract\n', '            // Convert and send ETH to user\n', '            if(tokenWithdrawAmount > 0){\n', '                WrappedEther(wethAddress).withdraw(tokenWithdrawAmount); // This will send ETH to this contract and burn WETH\n', '                // Now send the Ether to user\n', '                _depositor.transfer(tokenWithdrawAmount); // Transfer has low gas allocation, preventing re-entrancy\n', '            }\n', '        }else{\n', '            // Just pull all pickle and all WETH\n', '            if(_stakedPickle > 0){\n', '                PickleStake(pickleStakeAddress).exit(); // Will pull all pickle and all WETH (should be near empty)\n', '                _stakedPickle = 0;\n', '            }\n', '            IERC20 _token = IERC20(pickleAddress);\n', '            if( _token.balanceOf(address(this)) > 0){\n', '                _token.safeTransfer(_depositor, _token.balanceOf(address(this)));\n', '            }\n', '            _token = IERC20(wethAddress);\n', '            uint256 wethBalance = _token.balanceOf(address(this));\n', '            if(wethBalance > 0){\n', '                if(_depositor != zsTokenAddress){\n', '                    WrappedEther(wethAddress).withdraw(wethBalance); // This will send ETH to this contract and burn WETH\n', '                    _depositor.transfer(wethBalance);\n', '                }else{\n', '                    // Keep it as ERC20\n', '                    _token.safeTransfer(_depositor, wethBalance);\n', '                }                \n', '            }\n', '        }        \n', '    }\n', '\n', '    receive() external payable {\n', '        // We need an anonymous fallback function to accept ether into this contract\n', '    }\n', '    \n', '    function deposit(address _depositor) public onlyZSToken {\n', '        // Only the ZS token can call the function\n', '        \n', '        // Get the balance of the reward token sent here\n', '        IERC20 _token = IERC20(rewardTokenList[0]);\n', '        uint256 _lpBalance = _token.balanceOf(address(this));\n', '        \n', '        // Now deposit it into the pickle jar\n', '        _token.safeApprove(pJarAddress ,_lpBalance); // Approve for transfer\n', '        PickleJar(pJarAddress).deposit(_lpBalance); // Send the LP, get the pLP\n', '        IERC20 _pToken = IERC20(pJarAddress);\n', '        uint256 _pBalance = _pToken.balanceOf(address(this));\n', '        require(_pBalance > 0,"Failed to get pTokens from the Pickle Jar");\n', '        \n', '        // Calculate the new weighted average\n', '        if(_depositor != zsTokenAddress){\n', '            // Calculate the deposit time\n', '            userInfo[_depositor].depositTime = now;\n', '            userInfo[_depositor].balanceEstimate += _pBalance;\n', '            \n', '            weightedAverageDepositTime = weightedAverageDepositTime.mul(_totalBalancePTokens)\n', '                                        .div(_pBalance.add(_totalBalancePTokens));\n', '            \n', '            weightedAverageDepositTime = userInfo[_depositor].depositTime.mul(_pBalance)\n', '                                        .div(_pBalance.add(_totalBalancePTokens))\n', '                                        .add(weightedAverageDepositTime);\n', '        }else{\n', '            if(weightedAverageDepositTime == 0){\n', '                weightedAverageDepositTime = now;\n', '            }\n', '        }\n', '        \n', '        // Now deposit these tokens into the farm contract\n', '        _pToken.safeApprove(pFarmAddress, _pBalance); // Approve for transfer\n', '        PickleFarm(pFarmAddress).deposit(pTokenID, _pBalance); // This function also returns Pickle earned\n', '        _totalBalancePTokens += _pBalance; // Add to our pTokens accounted for\n', '        \n', '        // Now check to see if we should claim and stake pickle\n', '        checkPickleAndStake();\n', '        \n', '        // Now check to see if we should claim and payout WETH\n', '        checkWETHAndPay();\n', '    }\n', '    \n', '    function checkPickleAndStake() internal {\n', '        // Check if we have pickle in this contract then stake if we do\n', '        IERC20 _pickle = IERC20(pickleAddress);\n', '        uint256 _balance = _pickle.balanceOf(address(this));\n', '        if(_balance > 0){\n', "            // We have pickle, let's stake it\n", '            _pickle.safeApprove(pickleStakeAddress, _balance);\n', '            PickleStake(pickleStakeAddress).stake(_balance);\n', '            _stakedPickle += _balance;\n', '        }\n', '    }\n', '    \n', '    function checkWETHAndPay() internal {\n', '        // Check if we have earned WETH from the staked pickle\n', '        uint256 _balance = PickleStake(pickleStakeAddress).earned(address(this)); // This will return the WETH earned balance\n', '        if(_balance > minETH){\n', '            // Claim the reward and split it between the depositors, treasury and stakers\n', '            IERC20 _token = IERC20(wethAddress);\n', '            uint256 _before = _token.balanceOf(address(this));\n', '            PickleStake(pickleStakeAddress).getReward(); // Pull the WETH from the staking address\n', '            uint256 amount = _token.balanceOf(address(this)).sub(_before);\n', '            require(amount > 0,"Pickle staking should have returned some WETH");\n', '            uint256 depositorsAmount = amount.mul(percentLPDepositor).div(divisionFactor); // This amount remains in contract\n', '            uint256 holdersAmount = amount.sub(depositorsAmount);\n', '            uint256 stakersAmount = holdersAmount.mul(percentStakers).div(divisionFactor);\n', '            uint256 treasuryAmount = holdersAmount.sub(stakersAmount);\n', '            if(treasuryAmount > 0){\n', '                _token.safeTransfer(treasuryAddress, treasuryAmount);\n', '            }\n', '            if(stakersAmount > 0){\n', '                _token.safeTransfer(stakingAddress, stakersAmount);\n', '                StabilizeStakingPool(stakingAddress).notifyRewardAmount(stakersAmount);\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    // Governance functions\n', '    // Timelock variables\n', '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant _timelockDuration = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    address private _timelock_address;\n', '    uint256 private _timelock_data_1;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        if(_totalBalancePTokens > 0){ // Timelock only applies when balance exists\n', '            require(now >= _timelockStart + _timelockDuration, "Timelock time not met");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    // Change the owner of the token contract\n', '    // --------------------\n', '    function startGovernanceChange(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address = _address;       \n', '    }\n', '    \n', '    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\n', '        transferGovernance(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the treasury address\n', '    // --------------------\n', '    function startChangeTreasury(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeTreasury() external onlyGovernance timelockConditionsMet(2) {\n', '        treasuryAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the percent going to depositors for WETH\n', '    // --------------------\n', '    function startChangeDepositorPercent(uint256 _percent) external onlyGovernance {\n', '        require(_percent <= 100000,"Percent cannot be greater than 100%");\n', '        _timelockStart = now;\n', '        _timelockType = 3;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeDepositorPercent() external onlyGovernance timelockConditionsMet(3) {\n', '        percentLPDepositor = _timelock_data_1;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the staking address\n', '    // --------------------\n', '    function startChangeStakingPool(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 4;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeStakingPool() external onlyGovernance timelockConditionsMet(4) {\n', '        stakingAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the zsToken address\n', '    // --------------------\n', '    function startChangeZSToken(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 5;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(5) {\n', '        zsTokenAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the percent going to stakers for WETH\n', '    // --------------------\n', '    function startChangeStakersPercent(uint256 _percent) external onlyGovernance {\n', '        require(_percent <= 100000,"Percent cannot be greater than 100%");\n', '        _timelockStart = now;\n', '        _timelockType = 6;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeStakersPercent() external onlyGovernance timelockConditionsMet(6) {\n', '        percentStakers = _timelock_data_1;\n', '    }\n', '    // --------------------\n', '}']