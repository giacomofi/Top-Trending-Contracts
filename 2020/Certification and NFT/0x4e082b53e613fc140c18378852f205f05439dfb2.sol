['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/CMRewards.sol\n', '\n', '// Expirmental! v0.6.1\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '// CMRewards is a contract for calculating rewards\n', '// based the amount a user has staked.\n', 'contract CMRewards {\n', '    using SafeMath for uint256;\n', '\n', '    // rewards rate = rewardRate / rewardMin\n', '    uint256 public rewardMin    =       1e10; // wont calculate rewards on smaller.\n', '    uint256 public rewardRate   =       5;    // 5/1e10 ~ .001 per share\n', '\n', '    mapping(address => UserStake) public users;\n', '\n', '    /** @dev\n', '     * This keeps track of a users stake for calculating payouts and\n', '     * rewards\n', '    */\n', '    struct UserStake {\n', '        uint256 staked;\n', '        uint256 lastUpdated;\n', '        uint256 rewardDebt;\n', '    }\n', '\n', '    /** @dev adds pending rewards to reward debt. */\n', '    function _updateUser(address u) internal {\n', '        if (users[u].staked > rewardMin) {\n', '            users[u].rewardDebt = users[u].rewardDebt.add(_pendingRewards(u));\n', '        }\n', '        users[u].lastUpdated = block.number;\n', '    }\n', '\n', '    /** @dev calculates a users rewards that accumilated since the last update*/\n', '    function _pendingRewards(address u) internal view returns (uint256) {\n', '        uint256 _duration = block.number.sub(users[u].lastUpdated);\n', '        uint256 _rewards = rewardRate.mul(users[u].staked).div(rewardMin);\n', '        return _duration.mul(_rewards);\n', '    }\n', '\n', '    /** @dev adds staked amount to the user safely. (Updates user before) */\n', '    function _userAddStake(address _addr, uint256 _value) internal {\n', '        require(_value > 0, "staked value must be greated than 0");\n', '        _updateUser(_addr);\n', '        users[_addr].staked = users[_addr].staked.add(_value);\n', '    }\n', '\n', '    /** @dev safely removes from a users stake. (Updates user before) */\n', '    function _usersRemoveStake(address _addr, uint256 _value) internal {\n', '        require(users[_addr].staked >= _value, "Cannot remove more than the user has staked");\n', '        _updateUser(_addr);\n', '        users[_addr].staked = users[_addr].staked.sub(_value);\n', '    }\n', '}\n', '\n', '// File: contracts/DiFyDAIWallet.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '\n', '\n', 'interface IYDAI {\n', '    function deposit(uint256 _amount) external;\n', '    function withdraw(uint256 _amount) external;\n', '    function balanceOf(address account) external view returns(uint256);\n', '    function getPricePerFullShare() external view returns(uint256);\n', '}\n', '\n', 'contract DiFyDAIWallet is Ownable, CMRewards {\n', '    using SafeMath for uint256;\n', '    uint256 constant BP = 10**12;\n', '\n', '    IERC20 yfiii;\n', '    IERC20 dai;\n', '    IYDAI ydai;\n', '\n', '    uint256 public adminFee = 5;              // 0.5%\n', '    uint256 constant public adminFeeMax = 150; // 15%\n', '    uint256 constant adminFeeFull = 1000;\n', '\n', '    constructor(address daiAddress, address ydaiAddress, address yfiiiAddress) public {\n', '        dai = IERC20(daiAddress);\n', '        ydai = IYDAI(ydaiAddress);\n', '        yfiii = IERC20(yfiiiAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev deposit dai and stake the recieved ydai for rewards\n', '    */\n', '    function deposit(uint256 _amount) public {\n', '        // transfer dai\n', '        require(dai.transferFrom(msg.sender, address(this), _amount), "deposit failed");\n', '\n', '        // starting ydai balance:\n', '        uint256 startBal = ydai.balanceOf(address(this));\n', '        // invest with ydai\n', '        ydai.deposit(_amount);\n', '        // endind ydai balance:\n', '        uint256 endBal = ydai.balanceOf(address(this));\n', '\n', '        // update the user\n', '        _userAddStake(msg.sender, endBal.sub(startBal));\n', '    }\n', '\n', '    /**\n', "     * @dev withdraw msg.sender's staked ydai from yearn, take admin fee and\n", '     * and send dai the dai to msg.sender\n', '    */\n', '    function withdraw(uint256 _amount) public {\n', '        require(_amount <= users[msg.sender].staked, "Cannot withdraw more than your balance");\n', '        require(_amount > 0, "Cannot withdraw 0");\n', '\n', '        // update user and subtract withdrawed amount\n', '        _usersRemoveStake(msg.sender, _amount);\n', '\n', '        // withdraw from ydai\n', '        uint256 startBal = dai.balanceOf(address(this));\n', '        ydai.withdraw(_amount);\n', '        uint256 endBal = dai.balanceOf(address(this));\n', '\n', '        // send to user\n', '        uint256 _avaliable = endBal.sub(startBal);\n', '        uint256 _fee = _avaliable.mul(adminFee).div(adminFeeFull);\n', '\n', '        require(dai.transfer(msg.sender, _avaliable.sub(_fee)), "withdraw failed");\n', '        //dai.transfer(owner(), _fee);\n', '    }\n', '\n', '    /**\n', '     * @dev claim reward debt\n', '    */\n', '    function claim() public {\n', '        // update the user – calculating any rewards\n', '        _updateUser(msg.sender);\n', '\n', '        // transfer the rewards\n', '        uint256 _rewards = users[msg.sender].rewardDebt;\n', '        users[msg.sender].rewardDebt = 0;\n', '\n', '        // transfer\n', '        require(yfiii.transfer(msg.sender, _rewards), "transfer failed");\n', '    }\n', '\n', '    // Helper methods:\n', '\n', '    /**\n', '     * @dev see a users total rewards. reward_debt + rewards_pending\n', '    */\n', '    function userRewards(address u) public view returns(uint256) {\n', '        return users[u].rewardDebt.add(_pendingRewards(u));\n', '    }\n', '\n', '    /**\n', '     * @dev see a users current amount of ydai staked. Alias for users[u].staked\n', '    */\n', '    function userStake(address u) public view returns(uint256) {\n', '        return users[u].staked;\n', '    }\n', '\n', '    /**\n', '     * @dev force update yourself to lock in rewards. (This shouldnt need to be called).\n', '    */\n', '    function updateSelf() public {\n', '        _updateUser(msg.sender);\n', '    }\n', '\n', '    /**\n', '     *  @dev total DAI balance of this contract\n', '    */\n', '    function balanceDAI() public view returns(uint256) {\n', '        return dai.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     *  @dev total YDAI balance\n', '    */\n', '    function balanceYDAI() public view returns(uint256) {\n', '        return ydai.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw ETH token to a given address.\n', '    */\n', '    function safeWithdrawETH(address payable to, uint256 amount) public onlyOwner {\n', '        to.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev dai balance\n', '    */\n', '    function safeWithdrawDAI(address payable to, uint256 amount) public onlyOwner {\n', '        dai.transfer(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw an erc20 token to a given address.\n', '     * cannot withdraw yDAI\n', '    */\n', '    function safeWithdrawERC20(address token, address to, uint amount) public onlyOwner {\n', '        // This method is only for removing tokens that were accidentally sent here.\n', '        // Therefore, owner cannot remove ydai, as these are held on behalf of the users.\n', '        require(token != address(ydai), "cannot withdraw ydai");\n', '        IERC20(token).transfer(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev set reward rate. reward rate = rate / reward_min\n', '    */\n', '    function setRewardRate(uint _newRate) public onlyOwner {\n', '        rewardRate = _newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev sets minimum stake to recieve rewards\n', '    */\n', '    function setRewardMin(uint _newMin) public onlyOwner {\n', '        rewardMin = _newMin;\n', '    }\n', '\n', '    /**\n', '     * @dev sets new admin fee. Must be smaller than adminFeeMax\n', '    */\n', '    function setAdminFee(uint256 _newFee) public onlyOwner {\n', '        require(_newFee < adminFeeMax, "fee must be less than max fee");\n', '        adminFee = _newFee;\n', '    }\n', '\n', '    function approve() public onlyOwner {\n', '        dai.approve(address(ydai), 2**256 - 1);\n', '    }\n', '\n', '}']