['// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Zapper\n', '///@notice this contract swaps between two assets utilizing various liquidity pools.\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'interface IBFactory {\n', '    function isBPool(address b) external view returns (bool);\n', '}\n', '\n', 'interface IBpool {\n', '    function isPublicSwap() external view returns (bool);\n', '\n', '    function isBound(address t) external view returns (bool);\n', '\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint256 tokenAmountIn,\n', '        address tokenOut,\n', '        uint256 minAmountOut,\n', '        uint256 maxPrice\n', '    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\n', '\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint256 maxAmountIn,\n', '        address tokenOut,\n', '        uint256 tokenAmountOut,\n', '        uint256 maxPrice\n', '    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\n', '\n', '    function getSpotPrice(address tokenIn, address tokenOut)\n', '        external\n', '        view\n', '        returns (uint256 spotPrice);\n', '}\n', '\n', 'interface IUniswapRouter02 {\n', '    //get estimated amountOut\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    //token 2 token\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    //eth 2 token\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    //token 2 eth\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface ICurve {\n', '    function underlying_coins(int128 index) external view returns (address);\n', '\n', '    function coins(int128 index) external view returns (address);\n', '\n', '    function get_dy_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external view returns (uint256 dy);\n', '\n', '    function exchange_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 minDy\n', '    ) external;\n', '\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 minDy\n', '    ) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 amount) external;\n', '}\n', '\n', 'interface ICompound {\n', '    function markets(address cToken)\n', '        external\n', '        view\n', '        returns (bool isListed, uint256 collateralFactorMantissa);\n', '\n', '    function underlying() external returns (address);\n', '}\n', '\n', 'interface ICompoundToken {\n', '    function underlying() external view returns (address);\n', '\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    function mint(uint256 mintAmount) external returns (uint256);\n', '\n', '    function redeem(uint256 redeemTokens) external returns (uint256);\n', '}\n', '\n', 'interface ICompoundEther {\n', '    function mint() external payable;\n', '\n', '    function redeem(uint256 redeemTokens) external returns (uint256);\n', '}\n', '\n', 'interface IIearn {\n', '    function token() external view returns (address);\n', '\n', '    function calcPoolValueInToken() external view returns (uint256);\n', '\n', '    function deposit(uint256 _amount) external;\n', '\n', '    function withdraw(uint256 _shares) external;\n', '}\n', '\n', 'interface IAToken {\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function underlyingAssetAddress() external returns (address);\n', '}\n', '\n', 'interface IAaveLendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '\n', '    function getLendingPoolCore() external view returns (address payable);\n', '}\n', '\n', 'interface IAaveLendingPool {\n', '    function deposit(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint16 _referralCode\n', '    ) external payable;\n', '}\n', '\n', 'contract Zapper_Swap_General_V1_1 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '\n', '    IAaveLendingPoolAddressesProvider\n', '        private constant lendingPoolAddressProvider = IAaveLendingPoolAddressesProvider(\n', '        0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n', '    );\n', '\n', '    IBFactory private constant BalancerFactory = IBFactory(\n', '        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\n', '    );\n', '\n', '    address private constant renBTCCurveSwapContract = address(\n', '        0x93054188d876f558f4a66B2EF1d97d16eDf0895B\n', '    );\n', '\n', '    address private constant sBTCCurveSwapContract = address(\n', '        0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714\n', '    );\n', '\n', '    IWETH private constant wethContract = IWETH(\n', '        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    );\n', '\n', '    address private constant ETHAddress = address(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    mapping(address => address) public cToken;\n', '    mapping(address => address) public yToken;\n', '    mapping(address => address) public aToken;\n', '\n', '    constructor() public {\n', '        //mapping for cETH\n', '        cToken[address(\n', '            0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5\n', '        )] = ETHAddress;\n', '    }\n', '\n', '    /**\n', '\t\t@notice This function adds c token addresses to a mapping\n', '\t\t@dev For cETH token, mapping is already added in constructor\n', '    @param _cToken token address of c-token for given underlying asset\n', '\t\t */\n', '    function addCToken(address[] memory _cToken) public onlyOwner {\n', '        for (uint256 i = 0; i < _cToken.length; i++) {\n', '            cToken[_cToken[i]] = ICompound(_cToken[i]).underlying();\n', '        }\n', '    }\n', '\n', '    /**\n', '\t\t@notice This function adds y token addresses to a mapping\n', '    @param _yToken token address of y-token\n', '\t\t*/\n', '    function addYToken(address[] memory _yToken) public onlyOwner {\n', '        for (uint256 i = 0; i < _yToken.length; i++) {\n', '            yToken[_yToken[i]] = IIearn(_yToken[i]).token();\n', '        }\n', '    }\n', '\n', '    /**\n', '\t\t@notice This function adds a token addresses to a mapping\n', '    @param _aToken token address of a-token for given underlying asset\n', '\t\t */\n', '    function addAToken(address[] memory _aToken) public onlyOwner {\n', '        for (uint256 i = 0; i < _aToken.length; i++) {\n', '            aToken[_aToken[i]] = IAToken(_aToken[i]).underlyingAssetAddress();\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function is used swap tokens using multiple exchanges\n', '    @param toWhomToIssue address to which tokens should be sent after swap\n', '\t\t@param path token addresses indicating the conversion path\n', '\t\t@param amountIn amount of tokens to swap\n', '    @param minTokenOut min amount of expected tokens\n', '    @param withPool indicates the exchange and its sequence we want to swap from\n', '    @param poolData pool or token addresses needed for swapping tokens according to the exchange\n', '\t\t@param starts indicates the index of poolData array for each swap\n', '    @return amount of tokens received after swap\n', '     */\n', '    function MultiExchangeSwap(\n', '        address payable toWhomToIssue,\n', '        address[] calldata path,\n', '        uint256 amountIn,\n', '        uint256 minTokenOut,\n', '        uint8[] calldata starts,\n', '        uint8[] calldata withPool,\n', '        address[] calldata poolData\n', '    ) external payable nonReentrant returns (uint256 tokensBought) {\n', '        require(toWhomToIssue != address(0), "Invalid receiver address");\n', '        require(path[0] != path[path.length - 1], "Cannot swap same tokens");\n', '\n', '        tokensBought = _swap(\n', '            path,\n', '            _getTokens(path[0], amountIn),\n', '            starts,\n', '            withPool,\n', '            poolData\n', '        );\n', '\n', '        require(tokensBought >= minTokenOut, "High Slippage");\n', '        _sendTokens(toWhomToIssue, path[path.length - 1], tokensBought);\n', '    }\n', '\n', '    //swap function\n', '    function _swap(\n', '        address[] memory path,\n', '        uint256 tokensToSwap,\n', '        uint8[] memory starts,\n', '        uint8[] memory withPool,\n', '        address[] memory poolData\n', '    ) internal returns (uint256) {\n', '        address _to;\n', '        uint8 poolIndex = 0;\n', '        address[] memory _poolData;\n', '        address _from = path[starts[0]];\n', '\n', '        for (uint256 index = 0; index < withPool.length; index++) {\n', '            uint256 endIndex = index == withPool.length.sub(1)\n', '                ? path.length - 1\n', '                : starts[index + 1];\n', '\n', '            _to = path[endIndex];\n', '\n', '            {\n', '                if (withPool[index] == 2) {\n', '                    _poolData = _getPath(path, starts[index], endIndex + 1);\n', '                } else {\n', '                    _poolData = new address[](1);\n', '                    _poolData[0] = poolData[poolIndex++];\n', '                }\n', '            }\n', '\n', '            tokensToSwap = _swapFromPool(\n', '                _from,\n', '                _to,\n', '                tokensToSwap,\n', '                withPool[index],\n', '                _poolData\n', '            );\n', '\n', '            _from = _to;\n', '        }\n', '        return tokensToSwap;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used swap tokens using multiple exchanges\n', '    @param fromToken token addresses to swap from\n', '\t\t@param toToken token addresses to swap into\n', '\t\t@param amountIn amount of tokens to swap\n', '    @param withPool indicates the exchange we want to swap from\n', '    @param poolData pool or token addresses needed for swapping tokens according to the exchange\n', '\t\t@return amount of tokens received after swap\n', '     */\n', '    function _swapFromPool(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 amountIn,\n', '        uint256 withPool,\n', '        address[] memory poolData\n', '    ) internal returns (uint256) {\n', '        require(fromToken != toToken, "Cannot swap same tokens");\n', '        require(withPool <= 3, "Invalid Exchange");\n', '\n', '        if (withPool == 1) {\n', '            return\n', '                _swapWithBalancer(poolData[0], fromToken, toToken, amountIn, 1);\n', '        } else if (withPool == 2) {\n', '            return\n', '                _swapWithUniswapV2(fromToken, toToken, poolData, amountIn, 1);\n', '        } else if (withPool == 3) {\n', '            return _swapWithCurve(poolData[0], fromToken, toToken, amountIn, 1);\n', '        }\n', '    }\n', '\n', '    /**\n', '\t\t@notice This function returns part of the given array \n', '    @param addresses address array to copy from\n', '\t\t@param _start start index\n', '\t\t@param _end end index\n', '    @return addressArray copied from given array\n', '\t\t */\n', '    function _getPath(\n', '        address[] memory addresses,\n', '        uint256 _start,\n', '        uint256 _end\n', '    ) internal pure returns (address[] memory addressArray) {\n', '        uint256 len = _end.sub(_start);\n', '        require(len > 1, "ERR_UNIV2_PATH");\n', '        addressArray = new address[](len);\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            if (\n', '                addresses[_start + i] == address(0) ||\n', '                addresses[_start + i] == ETHAddress\n', '            ) {\n', '                addressArray[i] = address(wethContract);\n', '            } else {\n', '                addressArray[i] = addresses[_start + i];\n', '            }\n', '        }\n', '    }\n', '\n', '    function _sendTokens(\n', '        address payable toWhomToIssue,\n', '        address token,\n', '        uint256 amount\n', '    ) internal {\n', '        if (token == ETHAddress || token == address(0)) {\n', '            toWhomToIssue.transfer(amount);\n', '        } else {\n', '            IERC20(token).safeTransfer(toWhomToIssue, amount);\n', '        }\n', '    }\n', '\n', '    function _swapWithBalancer(\n', '        address bpoolAddress,\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 amountIn,\n', '        uint256 minTokenOut\n', '    ) internal returns (uint256 tokenBought) {\n', '        require(BalancerFactory.isBPool(bpoolAddress), "Invalid balancer pool");\n', '\n', '        IBpool bpool = IBpool(bpoolAddress);\n', '        require(bpool.isPublicSwap(), "Swap not allowed for this pool");\n', '\n', '        address _to = toToken;\n', '        if (fromToken == address(0)) {\n', '            wethContract.deposit.value(amountIn)();\n', '            fromToken = address(wethContract);\n', '        } else if (toToken == address(0)) {\n', '            _to = address(wethContract);\n', '        }\n', '        require(bpool.isBound(fromToken), "From Token not bound");\n', '        require(bpool.isBound(_to), "To Token not bound");\n', '\n', '        //approve it to exchange address\n', '        IERC20(fromToken).safeApprove(bpoolAddress, amountIn);\n', '\n', '        //swap tokens\n', '        (tokenBought, ) = bpool.swapExactAmountIn(\n', '            fromToken,\n', '            amountIn,\n', '            _to,\n', '            minTokenOut,\n', '            uint256(-1)\n', '        );\n', '\n', '        if (toToken == address(0)) {\n', '            wethContract.withdraw(tokenBought);\n', '        }\n', '    }\n', '\n', '    function _swapWithUniswapV2(\n', '        address fromToken,\n', '        address toToken,\n', '        address[] memory path,\n', '        uint256 amountIn,\n', '        uint256 minTokenOut\n', '    ) internal returns (uint256 tokenBought) {\n', '        //unwrap & approve it to router contract\n', '        uint256 tokensUnwrapped = amountIn;\n', '        address _fromToken = fromToken;\n', '        if (fromToken != address(0)) {\n', '            (tokensUnwrapped, _fromToken) = _unwrap(fromToken, amountIn);\n', '            IERC20(_fromToken).safeApprove(\n', '                address(uniswapRouter),\n', '                tokensUnwrapped\n', '            );\n', '        }\n', '\n', '        //swap and transfer tokens\n', '        if (fromToken == address(0)) {\n', '            tokenBought = uniswapRouter.swapExactETHForTokens.value(\n', '                tokensUnwrapped\n', '            )(minTokenOut, path, address(this), deadline)[path.length - 1];\n', '        } else if (toToken == address(0)) {\n', '            tokenBought = uniswapRouter.swapExactTokensForETH(\n', '                tokensUnwrapped,\n', '                minTokenOut,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            )[path.length - 1];\n', '        } else {\n', '            tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                tokensUnwrapped,\n', '                minTokenOut,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            )[path.length - 1];\n', '        }\n', '    }\n', '\n', '    function _swapWithCurve(\n', '        address curveExchangeAddress,\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 amountIn,\n', '        uint256 minTokenOut\n', '    ) internal returns (uint256 tokenBought) {\n', '        require(\n', '            curveExchangeAddress != address(0),\n', '            "ERR_Invaid_curve_exchange"\n', '        );\n', '        ICurve curveExchange = ICurve(curveExchangeAddress);\n', '\n', '        (uint256 tokensUnwrapped, address _fromToken) = _unwrap(\n', '            fromToken,\n', '            amountIn\n', '        );\n', '\n', '        //approve it to exchange address\n', '        IERC20(_fromToken).safeApprove(curveExchangeAddress, tokensUnwrapped);\n', '\n', '        int128 i;\n', '        int128 j;\n', '\n', '        //swap tokens\n', '        if (\n', '            curveExchangeAddress == renBTCCurveSwapContract ||\n', '            curveExchangeAddress == sBTCCurveSwapContract\n', '        ) {\n', '            int128 length = (curveExchangeAddress == renBTCCurveSwapContract)\n', '                ? 2\n', '                : 3;\n', '\n', '            for (int128 index = 0; index < length; index++) {\n', '                if (curveExchange.coins(index) == _fromToken) {\n', '                    i = index;\n', '                } else if (curveExchange.coins(index) == toToken) {\n', '                    j = index;\n', '                }\n', '            }\n', '\n', '            curveExchange.exchange(i, j, tokensUnwrapped, minTokenOut);\n', '        } else {\n', '            address compCurveSwapContract = address(\n', '                0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56\n', '            );\n', '            address usdtCurveSwapContract = address(\n', '                0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C\n', '            );\n', '\n', '            int128 length = 4;\n', '            if (curveExchangeAddress == compCurveSwapContract) {\n', '                length = 2;\n', '            } else if (curveExchangeAddress == usdtCurveSwapContract) {\n', '                length = 3;\n', '            }\n', '\n', '            for (int128 index = 0; index < length; index++) {\n', '                if (curveExchange.underlying_coins(index) == _fromToken) {\n', '                    i = index;\n', '                } else if (curveExchange.underlying_coins(index) == toToken) {\n', '                    j = index;\n', '                }\n', '            }\n', '\n', '            curveExchange.exchange_underlying(\n', '                i,\n', '                j,\n', '                tokensUnwrapped,\n', '                minTokenOut\n', '            );\n', '        }\n', '\n', '        if (toToken == ETHAddress || toToken == address(0)) {\n', '            tokenBought = address(this).balance;\n', '        } else {\n', '            tokenBought = IERC20(toToken).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function unwrap(\n', '        address payable _toWhomToIssue,\n', '        address _FromTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        uint256 minTokens\n', '    ) public returns (uint256 tokensUnwrapped, address toToken) {\n', '        require(_toWhomToIssue != address(0), "Invalid receiver address");\n', '        uint256 tokensToSwap = _getTokens(\n', '            _FromTokenContractAddress,\n', '            tokens2Trade\n', '        );\n', '\n', '        (tokensUnwrapped, toToken) = _unwrap(\n', '            _FromTokenContractAddress,\n', '            tokensToSwap\n', '        );\n', '\n', '        require(tokensUnwrapped >= minTokens, "High Slippage");\n', '\n', '        //transfer\n', '        _sendTokens(_toWhomToIssue, toToken, tokensUnwrapped);\n', '    }\n', '\n', '    function _unwrap(address _FromTokenContractAddress, uint256 tokens2Trade)\n', '        internal\n', '        returns (uint256 tokensUnwrapped, address toToken)\n', '    {\n', '        uint256 initialEthbalance = address(this).balance;\n', '        if (cToken[_FromTokenContractAddress] != address(0)) {\n', '            require(\n', '                ICompoundToken(_FromTokenContractAddress).redeem(\n', '                    tokens2Trade\n', '                ) == 0,\n', '                "Error in unwrapping"\n', '            );\n', '            toToken = cToken[_FromTokenContractAddress];\n', '            if (toToken == ETHAddress) {\n', '                tokensUnwrapped = address(this).balance;\n', '                tokensUnwrapped = tokensUnwrapped.sub(initialEthbalance);\n', '            } else {\n', '                tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\n', '            }\n', '        } else if (yToken[_FromTokenContractAddress] != address(0)) {\n', '            IIearn(_FromTokenContractAddress).withdraw(tokens2Trade);\n', '            toToken = IIearn(_FromTokenContractAddress).token();\n', '            tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\n', '        } else if (aToken[_FromTokenContractAddress] != address(0)) {\n', '            IAToken(_FromTokenContractAddress).redeem(tokens2Trade);\n', '            toToken = IAToken(_FromTokenContractAddress)\n', '                .underlyingAssetAddress();\n', '            if (toToken == ETHAddress) {\n', '                tokensUnwrapped = address(this).balance;\n', '                tokensUnwrapped = tokensUnwrapped.sub(initialEthbalance);\n', '            } else {\n', '                tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\n', '            }\n', '        } else {\n', '            toToken = _FromTokenContractAddress;\n', '            tokensUnwrapped = tokens2Trade;\n', '        }\n', '    }\n', '\n', '    function wrap(\n', '        address payable _toWhomToIssue,\n', '        address _FromTokenContractAddress,\n', '        address _ToTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        uint256 minTokens,\n', '        uint256 _wrapInto\n', '    ) public payable returns (uint256 tokensWrapped) {\n', '        require(_toWhomToIssue != address(0), "Invalid receiver address");\n', '        require(_wrapInto <= 3, "Invalid to Token");\n', '        uint256 tokensToSwap = _getTokens(\n', '            _FromTokenContractAddress,\n', '            tokens2Trade\n', '        );\n', '\n', '        tokensWrapped = _wrap(\n', '            _FromTokenContractAddress,\n', '            _ToTokenContractAddress,\n', '            tokensToSwap,\n', '            _wrapInto\n', '        );\n', '\n', '        require(tokensWrapped >= minTokens, "High Slippage");\n', '\n', '        //transfer tokens\n', '        _sendTokens(_toWhomToIssue, _ToTokenContractAddress, tokensWrapped);\n', '    }\n', '\n', '    function _wrap(\n', '        address _FromTokenContractAddress,\n', '        address _ToTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        uint256 _wrapInto\n', '    ) internal returns (uint256 tokensWrapped) {\n', '        //weth\n', '        if (_wrapInto == 0) {\n', '            require(\n', '                _FromTokenContractAddress == address(0),\n', '                "Cannot wrap into WETH"\n', '            );\n', '            require(\n', '                _ToTokenContractAddress == address(wethContract),\n', '                "Invalid toToken"\n', '            );\n', '\n', '            wethContract.deposit.value(tokens2Trade)();\n', '            return tokens2Trade;\n', '        } else if (_wrapInto == 1) {\n', '            //Compound\n', '            if (_FromTokenContractAddress == address(0)) {\n', '                ICompoundEther(_ToTokenContractAddress).mint.value(\n', '                    tokens2Trade\n', '                )();\n', '            } else {\n', '                IERC20(_FromTokenContractAddress).safeApprove(\n', '                    address(_ToTokenContractAddress),\n', '                    tokens2Trade\n', '                );\n', '                ICompoundToken(_ToTokenContractAddress).mint(tokens2Trade);\n', '            }\n', '        } else if (_wrapInto == 2) {\n', '            //IEarn\n', '            IERC20(_FromTokenContractAddress).safeApprove(\n', '                address(_ToTokenContractAddress),\n', '                tokens2Trade\n', '            );\n', '            IIearn(_ToTokenContractAddress).deposit(tokens2Trade);\n', '        } else {\n', '            // Aave\n', '            if (_FromTokenContractAddress == address(0)) {\n', '                IAaveLendingPool(lendingPoolAddressProvider.getLendingPool())\n', '                    .deposit\n', '                    .value(tokens2Trade)(ETHAddress, tokens2Trade, 0);\n', '            } else {\n', '                //approve lending pool core\n', '                IERC20(_FromTokenContractAddress).safeApprove(\n', '                    address(lendingPoolAddressProvider.getLendingPoolCore()),\n', '                    tokens2Trade\n', '                );\n', '\n', '                //get lending pool and call deposit\n', '                IAaveLendingPool(lendingPoolAddressProvider.getLendingPool())\n', '                    .deposit(_FromTokenContractAddress, tokens2Trade, 0);\n', '            }\n', '        }\n', '        tokensWrapped = IERC20(_ToTokenContractAddress).balanceOf(\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    function _getTokens(address token, uint256 amount)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        if (token == address(0)) {\n', '            require(msg.value > 0, "No eth sent");\n', '            return msg.value;\n', '        }\n', '        require(amount > 0, "Invalid token amount");\n', '        require(msg.value == 0, "Eth sent with token");\n', '\n', '        //transfer token\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '        return amount;\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != tx.origin, "Do not send ETH directly");\n', '    }\n', '}']