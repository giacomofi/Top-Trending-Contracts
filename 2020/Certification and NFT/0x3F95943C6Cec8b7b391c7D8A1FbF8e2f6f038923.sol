['// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/libraries/UniswapV3Lib.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint112 x, uint112 y) internal pure returns (uint112 z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint112 x, uint112 y) internal pure returns (uint112 z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint112 x, uint112 y) internal pure returns (uint112 z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', 'library UniswapV3Lib {\n', '    using SafeMath for uint112;\n', '\n', '    function checkAndConvertETHToWETH(address token) internal pure returns(address) {\n', '        \n', '        if(token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n', '            return address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '        }\n', '        return token;\n', '    }\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\n', '        tokenA = checkAndConvertETHToWETH(tokenA);\n', '        tokenB = checkAndConvertETHToWETH(tokenB);\n', '        return(tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA));\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        return(address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            )))));\n', '    }\n', '\n', '    function getReservesByPair(address pair, address tokenA, address tokenB) internal view returns (uint112 reserveA, uint112 reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint112 amountIn, uint112 reserveIn, uint112 reserveOut) internal pure returns (uint112 amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", '        uint112 amountInWithFee = amountIn.mul(997);\n', '        uint112 numerator = amountInWithFee.mul(reserveOut);\n', '        uint112 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    function getAmountOutByPair(uint112 amountIn, address pair, address tokenA, address tokenB) internal view returns(uint112 amountOut) {\n', '        (uint112 reserveIn, uint112 reserveOut) = getReservesByPair(pair, tokenA, tokenB);\n', '        return (getAmountOut(amountIn, reserveIn, reserveOut));\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// File: contracts/UniswapV3Router.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract UniswapV3Router {\n', '    using SafeMath for uint;\n', '\n', '    address public immutable factory;\n', '    address public immutable WETH;\n', '    address public constant ETH_IDENTIFIER = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '\n', '    constructor(address _factory, address _WETH) public {\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function swap(\n', '        uint112 amountIn,\n', '        uint112 amountOutMin,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        payable\n', '        returns (uint112 tokensBought)\n', '    {\n', '        require(path.length > 1, "More then 1 token required");\n', '        uint8 pairs = uint8(path.length - 1);\n', '        address tokenBought;\n', '        tokensBought = amountIn;\n', '        address receiver;\n', '\n', '        for(uint8 i = 0; i < pairs; i++) {\n', '            address tokenSold = path[i];\n', '            tokenBought = path[i+1];\n', '\n', '            address currentPair = receiver;\n', '            if (currentPair == address(0)) {\n', '                currentPair = UniswapV3Lib.pairFor(factory, tokenSold, tokenBought);\n', '            }\n', '            if (i == 0) {\n', '                if (tokenSold == ETH_IDENTIFIER) {\n', '                    tokenSold = WETH;\n', '                    uint256 amount = msg.value;\n', '                    IWETH(WETH).deposit{value: amount}();\n', '                    assert(IWETH(WETH).transfer(currentPair, amount));\n', '                }\n', '                else {\n', '                    TransferHelper.safeTransferFrom(\n', '                        tokenSold, msg.sender, currentPair, amountIn\n', '                    );\n', '                }\n', '            }\n', '\n', '            //AmountIn for this hop is amountOut of previous hop\n', '            tokensBought = UniswapV3Lib.getAmountOutByPair(tokensBought, currentPair, tokenSold, tokenBought);\n', '\n', '            if ((i + 1) == pairs) {\n', '                if ( tokenBought == ETH_IDENTIFIER ) {\n', '                    receiver = address(this);\n', '                }\n', '                else {\n', '                    receiver = msg.sender;\n', '                }   \n', '            }\n', '            else {\n', '                receiver = UniswapV3Lib.pairFor(factory, tokenBought, path[i+2]);\n', '            }\n', '\n', '            (address token0,) = UniswapV3Lib.sortTokens(tokenSold, tokenBought);\n', '            (uint112 amount0Out, uint112 amount1Out) = tokenSold == token0 ? (uint112(0), tokensBought) : (tokensBought, uint112(0));\n', '            IUniswapV2Pair(currentPair).swap(\n', '                amount0Out, amount1Out, receiver, new bytes(0)\n', '            );\n', '            \n', '        }\n', '\n', '        if (tokenBought == ETH_IDENTIFIER) {\n', '            IWETH(WETH).withdraw(tokensBought);\n', '            TransferHelper.safeTransferETH(msg.sender, tokensBought);\n', '        }\n', '\n', '        require(tokensBought >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");\n', '\n', '    }\n', '}']