['pragma solidity 0.5.11;\n', '/*\n', ' * Origin Protocol\n', ' * https://originprotocol.com\n', ' *\n', ' * Released under the MIT license\n', ' * https://github.com/OriginProtocol\n', ' *\n', ' * Copyright 2019 Origin Protocol, Inc\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in\n', ' * all copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', '\n', '// File: origin-dollar/contracts/interfaces/ITimelock.sol\n', '\n', 'interface ITimelock {\n', '    function delay() external view returns (uint256);\n', '\n', '    function GRACE_PERIOD() external view returns (uint256);\n', '\n', '    function acceptAdmin() external;\n', '\n', '    function queuedTransactions(bytes32 hash) external view returns (bool);\n', '\n', '    function queueTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external returns (bytes32);\n', '\n', '    function cancelTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external;\n', '\n', '    function executeTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external payable returns (bytes memory);\n', '}\n', '\n', '// File: origin-dollar/contracts/governance/Governor.sol\n', '\n', 'pragma solidity ^0.5.11;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', "// Modeled off of Compound's Governor Alpha\n", '//    https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n', 'contract Governor {\n', '    /// @notice The address of the  Timelock\n', '    ITimelock public timelock;\n', '\n', '    /// @notice The address of the Governor Guardian\n', '    address public guardian;\n', '\n', '    /// @notice The total number of proposals\n', '    uint256 public proposalCount;\n', '\n', '    struct Proposal {\n', '        /// @notice Unique id for looking up a proposal\n', '        uint256 id;\n', '        /// @notice Creator of the proposal\n', '        address proposer;\n', '        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n', '        uint256 eta;\n', '        /// @notice the ordered list of target addresses for calls to be made\n', '        address[] targets;\n', '        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '        uint256[] values;\n', '        /// @notice The ordered list of function signatures to be called\n', '        string[] signatures;\n', '        /// @notice The ordered list of calldata to be passed to each call\n', '        bytes[] calldatas;\n', '        /// @notice Flag marking whether the proposal has been executed\n', '        bool executed;\n', '    }\n', '\n', '    /// @notice The official record of all proposals ever proposed\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    /// @notice An event emitted when a new proposal is created\n', '    event ProposalCreated(\n', '        uint256 id,\n', '        address proposer,\n', '        address[] targets,\n', '        uint256[] values,\n', '        string[] signatures,\n', '        bytes[] calldatas,\n', '        string description\n', '    );\n', '\n', '    /// @notice An event emitted when a proposal has been queued in the Timelock\n', '    event ProposalQueued(uint256 id, uint256 eta);\n', '\n', '    /// @notice An event emitted when a proposal has been executed in the Timelock\n', '    event ProposalExecuted(uint256 id);\n', '\n', '    uint256 public constant MAX_OPERATIONS = 16;\n', '\n', '    /// @notice Possible states that a proposal may be in\n', '    enum ProposalState { Pending, Queued, Expired, Executed }\n', '\n', '    constructor(address timelock_, address guardian_) public {\n', '        timelock = ITimelock(timelock_);\n', '        guardian = guardian_;\n', '    }\n', '\n', '    function propose(\n', '        address[] memory targets,\n', '        uint256[] memory values,\n', '        string[] memory signatures,\n', '        bytes[] memory calldatas,\n', '        string memory description\n', '    ) public returns (uint256) {\n', '        // allow anyone to propose for now, since only guardian can queue the transaction it should be harmless, you just need to pay the gas\n', '        require(\n', '            targets.length == values.length &&\n', '                targets.length == signatures.length &&\n', '                targets.length == calldatas.length,\n', '            "Governor::propose: proposal function information arity mismatch"\n', '        );\n', '        require(targets.length != 0, "Governor::propose: must provide actions");\n', '        require(\n', '            targets.length <= MAX_OPERATIONS,\n', '            "Governor::propose: too many actions"\n', '        );\n', '\n', '        proposalCount++;\n', '        Proposal memory newProposal = Proposal({\n', '            id: proposalCount,\n', '            proposer: msg.sender,\n', '            eta: 0,\n', '            targets: targets,\n', '            values: values,\n', '            signatures: signatures,\n', '            calldatas: calldatas,\n', '            executed: false\n', '        });\n', '\n', '        proposals[newProposal.id] = newProposal;\n', '\n', '        emit ProposalCreated(\n', '            newProposal.id,\n', '            msg.sender,\n', '            targets,\n', '            values,\n', '            signatures,\n', '            calldatas,\n', '            description\n', '        );\n', '        return newProposal.id;\n', '    }\n', '\n', '    function queue(uint256 proposalId) public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::queue: sender must be gov guardian"\n', '        );\n', '        require(\n', '            state(proposalId) == ProposalState.Pending,\n', '            "Governor::queue: proposal can only be queued if it is pending"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        proposal.eta = add256(block.timestamp, timelock.delay());\n', '\n', '        for (uint256 i = 0; i < proposal.targets.length; i++) {\n', '            _queueOrRevert(\n', '                proposal.targets[i],\n', '                proposal.values[i],\n', '                proposal.signatures[i],\n', '                proposal.calldatas[i],\n', '                proposal.eta\n', '            );\n', '        }\n', '\n', '        emit ProposalQueued(proposal.id, proposal.eta);\n', '    }\n', '\n', '    function state(uint256 proposalId) public view returns (ProposalState) {\n', '        require(\n', '            proposalCount >= proposalId && proposalId > 0,\n', '            "Governor::state: invalid proposal id"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        if (proposal.executed) {\n', '            return ProposalState.Executed;\n', '        } else if (proposal.eta == 0) {\n', '            return ProposalState.Pending;\n', '        } else if (\n', '            block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\n', '        ) {\n', '            return ProposalState.Expired;\n', '        } else {\n', '            return ProposalState.Queued;\n', '        }\n', '    }\n', '\n', '    function _queueOrRevert(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data,\n', '        uint256 eta\n', '    ) internal {\n', '        require(\n', '            !timelock.queuedTransactions(\n', '                keccak256(abi.encode(target, value, signature, data, eta))\n', '            ),\n', '            "Governor::_queueOrRevert: proposal action already queued at eta"\n', '        );\n', '        timelock.queueTransaction(target, value, signature, data, eta);\n', '    }\n', '\n', '    function execute(uint256 proposalId) public payable {\n', '        require(\n', '            state(proposalId) == ProposalState.Queued,\n', '            "Governor::execute: proposal can only be executed if it is queued"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        proposal.executed = true;\n', '        for (uint256 i = 0; i < proposal.targets.length; i++) {\n', '            timelock.executeTransaction.value(proposal.values[i])(\n', '                proposal.targets[i],\n', '                proposal.values[i],\n', '                proposal.signatures[i],\n', '                proposal.calldatas[i],\n', '                proposal.eta\n', '            );\n', '        }\n', '        emit ProposalExecuted(proposalId);\n', '    }\n', '\n', '    function getActions(uint256 proposalId)\n', '        public\n', '        view\n', '        returns (\n', '            address[] memory targets,\n', '            uint256[] memory values,\n', '            string[] memory signatures,\n', '            bytes[] memory calldatas\n', '        )\n', '    {\n', '        Proposal storage p = proposals[proposalId];\n', '        return (p.targets, p.values, p.signatures, p.calldatas);\n', '    }\n', '\n', '    function __acceptAdmin() public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::__acceptAdmin: sender must be gov guardian"\n', '        );\n', '        timelock.acceptAdmin();\n', '    }\n', '\n', '    function __queueSetTimelockPendingAdmin(\n', '        address newPendingAdmin,\n', '        uint256 eta\n', '    ) public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian"\n', '        );\n', '        timelock.queueTransaction(\n', '            address(timelock),\n', '            0,\n', '            "setPendingAdmin(address)",\n', '            abi.encode(newPendingAdmin),\n', '            eta\n', '        );\n', '    }\n', '\n', '    function __executeSetTimelockPendingAdmin(\n', '        address newPendingAdmin,\n', '        uint256 eta\n', '    ) public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian"\n', '        );\n', '        timelock.executeTransaction(\n', '            address(timelock),\n', '            0,\n', '            "setPendingAdmin(address)",\n', '            abi.encode(newPendingAdmin),\n', '            eta\n', '        );\n', '    }\n', '\n', '    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "subtraction underflow");\n', '        return a - b;\n', '    }\n', '}']