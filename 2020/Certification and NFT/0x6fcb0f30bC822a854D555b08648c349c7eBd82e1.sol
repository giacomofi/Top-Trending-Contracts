['pragma solidity ^0.4.26;\n', '\n', 'contract AdoreCoin{\n', '    \n', '    /*=====================================\n', '    =           EVENTS                    =\n', '    =====================================*/\n', '    \n', '    event Approval(\n', '        address indexed tokenOwner, \n', '        address indexed spender,\n', '        uint tokens\n', '    );\n', '    \n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Adore Coin";\n', '    string public symbol = "ADR";\n', '    uint256 constant public totalSupply_ = 51000000;\n', '    uint256 constant public decimals = 0;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    /*=====================================\n', '    =            FUNCTIONS                =\n', '    =====================================*/\n', '    constructor() public\n', '    {\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '    \n', '    function totalSupply() public pure returns (uint256) {\n', '      return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '      return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver,uint numTokens) public returns (bool) {\n', '      require(numTokens <= balances[msg.sender]);\n', '      balances[msg.sender] = SafeMath.sub(balances[msg.sender],numTokens);\n', '      balances[receiver] = SafeMath.add(balances[receiver],numTokens);\n', '      emit Transfer(msg.sender, receiver, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    \n', '    function approve(address delegate,\n', '                uint numTokens) public returns (bool) {\n', '      allowed[msg.sender][delegate] = numTokens;\n', '      emit Approval(msg.sender, delegate, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    function allowance(address owner,\n', '                  address delegate) public view returns (uint) {\n', '      return allowed[owner][delegate];\n', '    }\n', '    \n', '    function transferFrom(address owner, address buyer,\n', '                     uint numTokens) public returns (bool) {\n', '      require(numTokens <= balances[owner]);\n', '      require(numTokens <= allowed[owner][msg.sender]);\n', '      balances[owner] = SafeMath.sub(balances[owner],numTokens);\n', '      allowed[owner][msg.sender] =SafeMath.sub(allowed[owner][msg.sender],numTokens);\n', '      balances[buyer] = balances[buyer] + numTokens;\n', '      emit Transfer(owner, buyer, numTokens);\n', '      return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']