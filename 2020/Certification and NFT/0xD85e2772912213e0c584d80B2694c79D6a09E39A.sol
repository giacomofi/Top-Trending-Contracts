['/*\n', '\n', '    /     |  __    / ____|\n', '   /      | |__) | | |\n', '  / /    |  _  /  | |\n', ' / ____   | |    | |____\n', '/_/    _ |_|  _  _____|\n', '\n', '* ARC: token/KYFToken.sol\n', '*\n', '* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/token/KYFToken.sol\n', '*\n', '* Contract Dependencies: \n', '*\t- Context\n', '*\t- Ownable\n', '* Libraries: (none)\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 ARC\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '/* ===============================================\n', '* Flattened with Solidifier by Coinage\n', '* \n', '* https://solidifier.coina.ge\n', '* ===============================================\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IKYFV2 {\n', '\n', '    function checkVerified(\n', '        address _user\n', '    )\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'contract KYFToken is Ownable {\n', '\n', '    /* ========== Variables ========== */\n', '\n', '    mapping (address => bool) public kyfInstances;\n', '\n', '    address[] public kyfInstancesArray;\n', '\n', '    /* ========== Events ========== */\n', '\n', '    event KyfStatusUpdated(address _address, bool _status);\n', '\n', '    /* ========== View Functions ========== */\n', '\n', '    function isVerified(\n', '        address _user\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < kyfInstancesArray.length; i++) {\n', '            IKYFV2 kyfContract = IKYFV2(kyfInstancesArray[i]);\n', '            if (kyfContract.checkVerified(_user) == true) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /* ========== Owner Functions ========== */\n', '\n', '    function setApprovedKYFInstance(\n', '        address _kyfContract,\n', '        bool _status\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (_status == true) {\n', '            kyfInstancesArray.push(_kyfContract);\n', '            kyfInstances[_kyfContract] = true;\n', '            emit KyfStatusUpdated(_kyfContract, true);\n', '            return;\n', '        }\n', '\n', '        // Remove the kyfContract from the kyfInstancesArray array.\n', '        for (uint i = 0; i < kyfInstancesArray.length; i++) {\n', '            if (address(kyfInstancesArray[i]) == _kyfContract) {\n', '                delete kyfInstancesArray[i];\n', '                kyfInstancesArray[i] = kyfInstancesArray[kyfInstancesArray.length - 1];\n', '\n', '                // Decrease the size of the array by one.\n', '                kyfInstancesArray.length--;\n', '                break;\n', '            }\n', '        }\n', '\n', '        // And remove it from the synths mapping\n', '        delete kyfInstances[_kyfContract];\n', '        emit KyfStatusUpdated(_kyfContract, false);\n', '    }\n', '\n', '    /* ========== ERC20 Functions ========== */\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name()\n', '        public\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return "ARC KYF Token";\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return "ARCKYF";\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return kyfInstancesArray.length;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(\n', '        address account\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (isVerified(account)) {\n', '            return 1;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(\n', '        address spender,\n', '        uint256 amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        return false;\n', '    }\n', '\n', '}']