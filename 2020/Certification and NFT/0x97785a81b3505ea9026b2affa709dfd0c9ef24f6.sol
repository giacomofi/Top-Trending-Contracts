['// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\strategies\\Interfaces\\Compound\\CTokenI.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface CTokenI{\n', '\n', '    /*** Market Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when interest is accrued\n', '     */\n', '    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are minted\n', '     */\n', '    event Mint(address minter, uint mintAmount, uint mintTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are redeemed\n', '     */\n', '    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when underlying is borrowed\n', '     */\n', '    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is repaid\n', '     */\n', '    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is liquidated\n', '     */\n', '    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\n', '\n', '\n', '    /*** Admin Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when pendingAdmin is changed\n', '     */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n', '     */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserve factor is changed\n', '     */\n', '    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserves are added\n', '     */\n', '    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserves are reduced\n', '     */\n', '    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\n', '\n', '    /**\n', '     * @notice EIP20 Transfer event\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /**\n', '     * @notice EIP20 Approval event\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /**\n', '     * @notice Failure event\n', '     */\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    function transfer(address dst, uint amount) external returns (bool);\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function balanceOfUnderlying(address owner) external returns (uint);\n', '    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n', '    function borrowRatePerBlock() external view returns (uint);\n', '    function supplyRatePerBlock() external view returns (uint);\n', '    function totalBorrowsCurrent() external returns (uint);\n', '    function borrowBalanceCurrent(address account) external returns (uint);\n', '    function borrowBalanceStored(address account) external view returns (uint);\n', '    function exchangeRateCurrent() external returns (uint);\n', '    function accrualBlockNumber() external view returns (uint);\n', '    function exchangeRateStored() external view returns (uint);\n', '    function getCash() external view returns (uint);\n', '    function accrueInterest() external returns (uint);\n', '    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\n', '\n', '    function totalBorrows() external view returns (uint);\n', '    function totalSupply() external view returns (uint);\n', '\n', '}\n', '\n', '// File: contracts\\strategies\\Interfaces\\Compound\\CEtherI.sol\n', '\n', 'pragma solidity >=0.5.16;\n', '\n', 'interface CEtherI is CTokenI{\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '      function redeem(uint redeemTokens) external returns (uint);\n', '    function liquidateBorrow(address borrower, CTokenI cTokenCollateral) external payable;\n', '    function mint() external payable;\n', '}\n', '\n', '// File: contracts\\strategies\\Interfaces\\UniswapInterfaces\\IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '}\n', '\n', '// File: contracts\\strategies\\Interfaces\\Yearn\\IController.sol\n', '\n', 'pragma solidity >=0.6.9;\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function earn(address, uint256) external;\n', '\n', '    function want(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function vaults(address) external view returns (address);\n', '\n', '    function approveStrategy(address, address) external;\n', '\n', '    function setStrategy(address, address) external;\n', '\n', '    function strategies(address) external view returns (address);\n', '}\n', '\n', '// File: contracts\\strategies\\BaseStrategy.sol\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtLimit;\n', '    uint256 rateLimit;\n', '    uint256 lastSync;\n', '    uint256 totalDebt;\n', '    uint256 totalReturns;\n', '}\n', '\n', 'interface VaultAPI {\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    /*\n', "     * View how much the Vault would increase this strategy's borrow limit,\n", "     * based on it's present performance (since its last report). Can be used to\n", '     * determine expectedReturn in your strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /*\n', '     * View how much the Vault would like to pull back from the Strategy,\n', "     * based on it's present performance (since its last report). Can be used to\n", '     * determine expectedReturn in your strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /*\n', '     * View how much the Vault expect this strategy to return at the current block,\n', "     * based on it's present performance (since its last report). Can be used to\n", '     * determine expectedReturn in your strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /*\n', '     * This is the main contact point where the strategy interacts with the Vault.\n', '     * It is critical that this call is handled as intended by the Strategy.\n', '     * Therefore, this function will be called by BaseStrategy to make sure the\n', '     * integration is correct.\n', '     */\n', '    function report(uint256 _harvest) external returns (uint256);\n', '\n', '    /*\n', '     * This function is used in the scenario where there is a newer strategy that\n', '     * would hold the same positions as this one, and those positions are easily\n', '     * transferrable to the newer strategy. These positions must be able to be\n', '     * transferred at the moment this call is made, if any prep is required to\n', '     * execute a full transfer in one transaction, that must be accounted for\n', '     * separately from this call.\n', '     */\n', '    function migrateStrategy(address _newStrategy) external;\n', '\n', '    /*\n', '     * This function should only be used in the scenario where the strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', "     * exits it's position as fast as possible, such as a sudden change in market\n", '     * conditions leading to losses, or an imminent failure in an external\n', '     * dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /*\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     *\n', '     */\n', '    function governance() external view returns (address);\n', '}\n', '\n', '/*\n', ' * This interface is here for the keeper bot to use\n', ' */\n', 'interface StrategyAPI {\n', '    function vault() external view returns (address);\n', '\n', '    function keeper() external view returns (address);\n', '\n', '    function tendTrigger(uint256 gasCost) external view returns (bool);\n', '\n', '    function tend() external;\n', '\n', '    function harvestTrigger(uint256 gasCost) external view returns (bool);\n', '\n', '    function harvest() external;\n', '\n', '    event Harvested(uint256 wantEarned, uint256 lifetimeEarned);\n', '}\n', '\n', '/*\n', ' * BaseStrategy implements all of the required functionality to interoperate closely\n', ' * with the core protocol. This contract should be inherited and the abstract methods\n', ' * implemented to adapt the strategy to the particular needs it has to create a return.\n', ' */\n', '\n', 'abstract contract BaseStrategy {\n', '    using SafeMath for uint256;\n', '\n', '    // Version of this contract\n', '    function version() external pure returns (string memory) {\n', '        return "0.1.1";\n', '    }\n', '\n', '    VaultAPI public vault;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    IERC20 public want;\n', '\n', '    // So indexers can keep track of this\n', '    event Harvested(uint256 wantEarned, uint256 lifetimeEarned);\n', '\n', '    // Adjust this to keep some of the position in reserve in the strategy,\n', "    // to accomodate larger variations needed to sustain the strategy's core positon(s)\n", '    uint256 public reserve = 0;\n', '\n', '    // This gets adjusted every time the Strategy reports to the Vault,\n', '    // and should be used during adjustment of the strategy\'s positions to "deleverage"\n', '    // in order to pay back the amount the next time it reports.\n', '    //\n', '    // NOTE: Do not edit this variable, for safe usage (only read from it)\n', "    // NOTE: Strategy should not expect to increase it's working capital until this value\n", '    //       is zero.\n', '    uint256 public outstanding = 0;\n', '\n', '    bool public emergencyExit;\n', '\n', '    constructor(address _vault) public {\n', '\n', '        vault = VaultAPI(_vault);\n', '        want = IERC20(vault.token());\n', '        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n', '        strategist = msg.sender;\n', '        keeper = msg.sender;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == strategist || msg.sender == governance(), "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setKeeper(address _keeper) external {\n', '        require(msg.sender == strategist || msg.sender == governance(), "!governance");\n', '        keeper = _keeper;\n', '    }\n', '\n', '    /*\n', '     * Resolve governance address from Vault contract, used to make\n', '     * assertions on protected functions in the Strategy\n', '     */\n', '    function governance() internal view returns (address) {\n', '        return vault.governance();\n', '    }\n', '\n', '    /*\n', '     * Provide an accurate expected value for the return this strategy\n', '     * would provide to the Vault the next time `report()` is called\n', '     * (since the last time it was called)\n', '     */\n', '    function expectedReturn() public virtual view returns (uint256);\n', '\n', '    /*\n', '     * Provide an accurate estimate for the total amount of assets (principle + return)\n', '     * that this strategy is currently managing, denominated in terms of `want` tokens.\n', '     * This total should be "realizable" e.g. the total value that could *actually* be\n', "     * obtained from this strategy if it were to divest it's entire position based on\n", '     * current on-chain conditions.\n', '     *\n', '     * NOTE: care must be taken in using this function, since it relies on external\n', '     *       systems, which could be manipulated by the attacker to give an inflated\n', '     *       (or reduced) value produced by this function, based on current on-chain\n', '     *       conditions (e.g. this function is possible to influence through flashloan\n', '     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\n', '     *\n', '     * NOTE: It is up to governance to use this function in order to correctly order\n', '     *       this strategy relative to its peers in order to minimize losses for the\n', '     *       Vault based on sudden withdrawals. This value should be higher than the\n', '     *       total debt of the strategy and higher than it\'s expected value to be "safe".\n', '     */\n', '    function estimatedTotalAssets() public virtual view returns (uint256);\n', '\n', '    /*\n', '     * Perform any strategy unwinding or other calls necessary to capture\n', '     * the "free return" this strategy has generated since the last time it\'s\n', '     * core position(s) were adusted. Examples include unwrapping extra rewards.\n', '     * This call is only used during "normal operation" of a Strategy, and should\n', '     * be optimized to minimize losses as much as possible. It is okay to report\n', '     * "no returns", however this will affect the credit limit extended to the\n', "     * strategy and reduce it's overall position if lower than expected returns\n", '     * are sustained for long periods of time.\n', '     */\n', '    function prepareReturn() internal virtual;\n', '\n', '    /*\n', '     * Perform any adjustments to the core position(s) of this strategy given\n', '     * what change the Vault made in the "investable capital" available to the\n', '     * strategy. Note that all "free capital" in the strategy after the report\n', '     * was made is available for reinvestment. Also note that this number could\n', '     * be 0, and you should handle that scenario accordingly.\n', '     */\n', '    function adjustPosition() internal virtual;\n', '\n', '    /*\n', '     * Make as much capital as possible "free" for the Vault to take. Some slippage\n', '     * is allowed, since when this method is called the strategist is no longer receiving\n', '     * their performance fee. The goal is for the strategy to divest as quickly as possible\n', '     * while not suffering exorbitant losses. This function is used during emergency exit\n', '     * instead of `prepareReturn()`\n', '     */\n', '    function exitPosition() internal virtual;\n', '\n', '    /*\n', '     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\n', '     * the estimated gas cost that they would pay to call `tend()`, and this function should\n', '     * use that estimate to make a determination if calling it is "worth it" for the keeper.\n', '     * This is not the only consideration into issuing this trigger, for example if the position\n', '     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\n', '     * even if the keeper might be "at a loss" (keepers are always reimbursed by yEarn)\n', '     *\n', '     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\n', '     * NOTE: if `tend()` is never intended to be called, it should always return `false`\n', '     */\n', '    function tendTrigger(uint256 gasCost) public virtual view returns (bool);\n', '\n', '    function tend() external {\n', '        if (keeper != address(0)) require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance());\n', "        // NOTE: Don't take profits with this call, but adjust for better gains\n", '        adjustPosition();\n', '    }\n', '\n', '    /*\n', '     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\n', '     * the estimated gas cost that they would pay to call `harvest()`, and this function should\n', '     * use that estimate to make a determination if calling it is "worth it" for the keeper.\n', '     * This is not the only consideration into issuing this trigger, for example if the position\n', '     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\n', '     * even if the keeper might be "at a loss" (keepers are always reimbursed by yEarn)\n', '     *\n', '     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\n', '     */\n', '    function harvestTrigger(uint256 gasCost) public virtual view returns (bool);\n', '\n', '    function harvest() external {\n', '        if (keeper != address(0)) require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance());\n', '\n', '        if (emergencyExit) {\n', '            exitPosition(); // Free up as much capital as possible\n', "            // NOTE: Don't take performance fee in this scenario\n", '        } else {\n', '            prepareReturn(); // Free up returns for Vault to pull\n', '        }\n', '\n', '        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\n', '\n', '        // Allow Vault to take up to the "harvested" balance of this contract, which is\n', '        // the amount it has earned since the last time it reported to the Vault\n', '        uint256 wantEarned = want.balanceOf(address(this)).sub(reserve);\n', '        outstanding = vault.report(wantEarned);\n', '\n', '        adjustPosition(); // Check if free returns are left, and re-invest them\n', '\n', '        emit Harvested(wantEarned, vault.strategies(address(this)).totalReturns);\n', '    }\n', '\n', '    /*\n', '     * Liquidate as many assets as possible to `want`, irregardless of slippage,\n', '     * up to `_amount`. Any excess should be re-invested here as well.\n', '     */\n', '    function liquidatePosition(uint256 _amount) internal virtual;\n', '\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == address(vault), "!vault");\n', '        liquidatePosition(_amount); // Liquidates as much as possible to `want`, up to `_amount`\n', '        want.transfer(msg.sender, want.balanceOf(address(this)).sub(reserve));\n', '    }\n', '\n', '    /*\n', '     * Do anything necesseary to prepare this strategy for migration, such\n', '     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\n', '     */\n', '    function prepareMigration(address _newStrategy) internal virtual;\n', '\n', '    function migrate(address _newStrategy) external {\n', '        require(msg.sender == address(vault) || msg.sender == governance());\n', '        require(BaseStrategy(_newStrategy).vault() == vault);\n', '        prepareMigration(_newStrategy);\n', '    }\n', '\n', '    function setEmergencyExit() external {\n', '        require(msg.sender == strategist || msg.sender == governance());\n', '        emergencyExit = true;\n', '        exitPosition();\n', '        vault.revokeStrategy();\n', '        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\n', '        outstanding = vault.report(want.balanceOf(address(this)).sub(reserve));\n', '    }\n', '\n', '    // Override this to add all tokens this contract manages on a *persistant* basis\n', '    // (e.g. not just for swapping back to want ephemerally)\n', '    // NOTE: Must inclide `want` token\n', '    function protectedTokens() internal virtual view returns (address[] memory) {\n', '        address[] memory protected = new address[](1);\n', '        protected[0] = address(want);\n', '        return protected;\n', '    }\n', '\n', '    function sweep(address _token) external {\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// File: contracts\\strategies\\YearnWethCreamStratV2.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '//cream is fork of compound and has same interface\n', '\n', '\n', '\n', '\n', '\n', '\n', '/********************\n', " *   An ETH Cream strategy with a liquidity buffer to ensure we don't end up in crisis.\n", ' *   Made by SamPriestley.com\n', ' *   https://github.com/Grandthrax/yearnv2/blob/master/contracts/YearnWethCreamStratV2.sol\n', ' *\n', ' ********************* */\n', '\n', 'contract YearnWethCreamStratV2 is BaseStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "YearnWethCreamStratV2";\n', '\n', '    //Only three tokens we use\n', '    CEtherI public constant crETH = CEtherI(address(0xD06527D5e56A3495252A528C4987003b712860eE));\n', '\n', '    IWETH public constant weth = IWETH(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));\n', '\n', '    uint256 public maxReportDelay = 50; //6300 is once a day. lower vaule used for testing\n', '\n', '    //Operating variables\n', '    uint256 public liquidityCushion = 3000 ether; // 3000 ether ~ 1m usd\n', '\n', '    uint256 public profitFactor = 50; // multiple before triggering harvest\n', '    uint256 public dustThreshold = 0.01 ether; // multiple before triggering harvest\n', '\n', '\n', '    constructor(address _vault) public BaseStrategy(_vault) {\n', '        //only accept ETH vault\n', '        require(vault.token() == address(weth), "!WETH");\n', '    }\n', '\n', '    //to receive eth from weth\n', '    receive() external payable {}\n', '\n', '    /*\n', '     * Control Functions\n', '     */\n', '    function setProfitFactor(uint256 _profitFactor) external {\n', '        require(msg.sender == governance() || msg.sender == strategist, "!management"); // dev: not governance or strategist\n', '        profitFactor = _profitFactor;\n', '    }\n', '    function setLiquidityCushion(uint256 _liquidityCushion) external {\n', '        require(msg.sender == governance() || msg.sender == strategist, "!management"); // dev: not governance or strategist\n', '        liquidityCushion = _liquidityCushion;\n', '    }\n', '\n', '    /*\n', '     * Base External Facing Functions\n', '     */\n', '\n', '    /*\n', '     * Expected return this strategy would provide to the Vault the next time `report()` is called\n', '     *\n', '     * The total assets currently in strategy minus what vault believes we have\n', '     */\n', '    function expectedReturn() public override view returns (uint256) {\n', '        uint256 estimateAssets = estimatedTotalAssets();\n', '\n', '        uint256 debt = vault.strategies(address(this)).totalDebt;\n', '        if (debt > estimateAssets) {\n', '            return 0;\n', '        } else {\n', '            return estimateAssets - debt;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Our balance in CrETH plus balance of want\n', '     */\n', '    function estimatedTotalAssets() public override view returns (uint256) {\n', '\n', '        uint256 underlying = underlyingBalanceStored();\n', '\n', '        return want.balanceOf(address(this)).add(underlying);\n', '    }\n', '\n', '    /*\n', '     * Provide a signal to the keeper that `tend()` should be called.\n', '     * (keepers are always reimbursed by yEarn)\n', '     *\n', '     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\n', '     * If we are in liquidation cushion we move\n', '     */\n', '    function tendTrigger(uint256 gasCost) public override view returns (bool) {\n', '        gasCost; // silence UI warning\n', '        if (harvestTrigger(gasCost)) {\n', '            //harvest takes priority\n', '            return false;\n', '        }\n', '        \n', '        //we want to tend if there is a liquidity crisis\n', '        uint256 cashAvailable = crETH.getCash();        \n', '        \n', '        if(cashAvailable == 0){\n', '            return false;\n', '        }\n', '\n', '        uint wethBalance = weth.balanceOf(address(this));\n', '\n', '        uint256 toKeep = 0;\n', '\n', '        //to keep is the amount we need to hold to make the liqudity cushion full\n', '        if(cashAvailable.add(wethBalance.mul(2)) < liquidityCushion){\n', '            toKeep = liquidityCushion.sub(cashAvailable.add(wethBalance));\n', '        }\n', '\n', '        if (toKeep > wethBalance.add(dustThreshold) && cashAvailable <= liquidityCushion && cashAvailable > dustThreshold && underlyingBalanceStored() > dustThreshold) {\n', '            return true;\n', '        }\n', '\n', '        // if liquidity crisis is over\n', '        if(wethBalance > 0 && liquidityCushion < cashAvailable){\n', '            if(cashAvailable - liquidityCushion > gasCost.mul(profitFactor) && wethBalance > gasCost.mul(profitFactor)){\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function underlyingBalanceStored() public view returns (uint256 balance){\n', '        uint256 currentCrETH = crETH.balanceOf(address(this));\n', '        if(currentCrETH == 0){\n', '            balance = 0;\n', '        }else{\n', '            balance = currentCrETH.mul(crETH.exchangeRateStored()).div(1e18);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Provide a signal to the keeper that `harvest()` should be called.\n', '     * gasCost is expected_gas_use * gas_price\n', '     * (keepers are always reimbursed by yEarn)\n', '     *\n', '     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\n', '     */\n', '    function harvestTrigger(uint256 gasCost) public override view returns (bool) {\n', '         StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // Should not trigger if strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should trigger if hadn't been called in a while\n", '        if (block.number.sub(params.lastSync) >= maxReportDelay) return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\n', '        //       because the resulting change should be large (might not always be the case)\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > dustThreshold && crETH.getCash().add(want.balanceOf(address(this))) > 0) return true;\n', '\n', '         // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        if (total.add(dustThreshold) < params.totalDebt) return true; // We have a loss to report!\n', '\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // Otherwise, only trigger if it "makes sense" economically (gas cost is <N% of value moved)\n', '        uint256 credit = vault.creditAvailable();\n', '        return (profitFactor * gasCost < credit.add(profit));\n', '    }\n', '\n', '    /***********\n', '     * internal core logic\n', '     *********** */\n', '    /*\n', '     * A core method.\n', '     */\n', '    function prepareReturn() internal override {\n', '\n', '        if (crETH.balanceOf(address(this)) == 0) {\n', '            //no position to harvest\n', '            reserve = weth.balanceOf(address(this));\n', '            return;\n', '        }\n', '        if (reserve != 0) {\n', '            //reset reserve so it doesnt interfere anywhere else\n', '            reserve = 0;\n', '        }\n', '\n', '        uint256 balanceInCr = crETH.balanceOfUnderlying(address(this));\n', '        uint256 balanceInWeth = weth.balanceOf(address(this));\n', '        uint256 total = balanceInCr.add(balanceInWeth);\n', '\n', '        uint256 debt = vault.strategies(address(this)).totalDebt;\n', '\n', '        if(total > debt){\n', '            uint profit = total-debt;\n', '            uint amountToFree = profit.add(outstanding);\n', '\n', '            //we need to add outstanding to our profit\n', '            if(balanceInWeth >= amountToFree){\n', '                reserve = weth.balanceOf(address(this)) - amountToFree;\n', '            }else{\n', '                //change profit to what we can withdraw\n', '                _withdrawSome(amountToFree.sub(balanceInWeth));\n', '                balanceInWeth = weth.balanceOf(address(this));\n', '\n', '                if(balanceInWeth > amountToFree){\n', '                    reserve = balanceInWeth - amountToFree;\n', '                }else{\n', '                    reserve = 0;\n', '                }\n', '\n', '                \n', '            }\n', '            \n', '        }else{\n', '            uint256 bal = weth.balanceOf(address(this));\n', '            if(bal <= outstanding){\n', '                    reserve = 0;\n', '            }else{\n', '                reserve = bal - outstanding;\n', '            }\n', '        }\n', '\n', '        \n', '    }\n', '\n', '    /*\n', '     * Second core function. Happens after report call.\n', '     *\n', '     */\n', '\n', '    function adjustPosition() internal override {\n', '        //emergency exit is dealt with in prepareReturn\n', '        if (emergencyExit) {\n', '            return;\n', '        }\n', '\n', '        //we did state changing call in prepare return so this will be accurate\n', '        uint liquidity = crETH.getCash();\n', '\n', '        if(liquidity == 0){\n', '            return;\n', '        }\n', '\n', '        uint wethBalance = weth.balanceOf(address(this));\n', '\n', '        uint256 toKeep = 0;\n', '\n', '        //to keep is the amount we need to hold to make the liqudity cushion full\n', '        if(liquidity < liquidityCushion){\n', '            toKeep = liquidityCushion.sub(liquidity);\n', '        }\n', '        toKeep = toKeep.add(outstanding);\n', '        //if we have more than enough weth then invest the extra\n', '        if(wethBalance > toKeep){\n', '\n', '            uint toInvest = wethBalance.sub(toKeep);\n', '\n', '            //turn weth into eth first\n', '            weth.withdraw(toInvest);\n', '            //mint\n', '            crETH.mint{value: toInvest}();\n', '\n', '        }else if(wethBalance < toKeep){\n', '            //free up the difference if we can\n', '            uint toWithdraw = toKeep.sub(wethBalance);\n', '\n', '            _withdrawSome(toWithdraw);\n', '        }\n', '\n', '    }\n', '\n', '    /*************\n', '     * Withdraw Up to the amount asked for\n', '     * returns amount we really withdrew\n', '     ******************** */\n', '    function _withdrawSome(uint256 _amount) internal returns(uint256 amountWithdrawn) {\n', '        \n', '        //state changing\n', '        uint balance = crETH.balanceOfUnderlying(address(this));\n', '        if(_amount > balance){\n', '            //cant withdraw more than we own\n', '            _amount = balance;\n', '        }\n', '\n', '        //not state changing but OK because of previous call\n', '        uint liquidity = crETH.getCash();\n', '        amountWithdrawn = 0;\n', '        if(liquidity == 0){\n', '            return amountWithdrawn;\n', '        }\n', '\n', '        if(_amount <= liquidity){\n', '                amountWithdrawn = _amount;\n', '                //we can take all\n', '                crETH.redeemUnderlying(amountWithdrawn);\n', '            }else{\n', '                //take all we can\n', '                amountWithdrawn = liquidity-1;\n', '                crETH.redeemUnderlying(amountWithdrawn); //safe as we return if liquidity == 0\n', '        }\n', '\n', '        //remember to turn eth to weth\n', '        weth.deposit{value: address(this).balance}();\n', '    }\n', '\n', '    /*\n', '     * Liquidate as many assets as possible to `want`, irregardless of slippage,\n', '     * up to `_amount`. Any excess should be re-invested here as well.\n', '     */\n', '    function liquidatePosition(uint256 _amount) internal override {\n', '        uint256 _balance = want.balanceOf(address(this));\n', '\n', '        if(_balance >= _amount){\n', "            //if we don't set reserve here withdrawer will be sent our full balance\n", '            reserve = _balance.sub(_amount);\n', '            return;\n', '        }else{\n', '            _withdrawSome(_amount - _balance);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Make as much capital as possible "free" for the Vault to take. Some slippage\n', '     * is allowed.\n', '     */\n', '    function exitPosition() internal override {\n', '        \n', '        uint balance = crETH.balanceOfUnderlying(address(this));\n', '        if(balance > 0){\n', '            _withdrawSome(balance);\n', '        }\n', '        reserve = 0;\n', '\n', '    }\n', '\n', '    //lets leave\n', '    function prepareMigration(address _newStrategy) internal override {\n', '        crETH.transfer(_newStrategy, crETH.balanceOf(address(this)));\n', '        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n', '    }\n', '\n', '    function protectedTokens() internal override view returns (address[] memory) {\n', '        address[] memory protected = new address[](2);\n', '        protected[0] = address(want);\n', '        protected[1] = address(crETH);\n', '        return protected;\n', '    }\n', '\n', '   \n', '}']