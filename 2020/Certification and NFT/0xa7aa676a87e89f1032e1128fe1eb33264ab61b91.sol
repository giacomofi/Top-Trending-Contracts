['// File: contracts/capabilities/Proxiable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract Proxiable {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '\n', '    event CodeAddressUpdated(address newAddress);\n', '\n', '    function _updateCodeAddress(address newAddress) internal {\n', '        require(\n', '            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\n', '            "Not compatible"\n', '        );\n', '        assembly { // solium-disable-line\n', '            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\n', '        }\n', '\n', '        emit CodeAddressUpdated(newAddress);\n', '    }\n', '\n', '    function getLogicAddress() public view returns (address logicAddress) {\n', '        assembly { // solium-disable-line\n', '            logicAddress := sload(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7)\n', '        }\n', '    }\n', '\n', '    function proxiableUUID() public pure returns (bytes32) {\n', '        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is Initializable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/ERC1404.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract ERC1404 is IERC20 {\n', '    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\n', '    /// @param from Sending address\n', '    /// @param to Receiving address\n', '    /// @param value Amount of tokens being transferred\n', '    /// @return Code by which to reference message for rejection reasoning\n', '    /// @dev Overwrite with your custom transfer restriction logic\n', '    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\n', '\n', '    /// @notice Returns a human-readable message for a given restriction code\n', '    /// @param restrictionCode Identifier for looking up a message\n', "    /// @return Text showing the restriction's reasoning\n", '    /// @dev Overwrite with your custom message and restrictionCode handling\n', '    function messageForTransferRestriction (uint8 restrictionCode) public view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/roles/OwnerRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract OwnerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event OwnerAdded(address indexed addedOwner, address indexed addedBy);\n', '    event OwnerRemoved(address indexed removedOwner, address indexed removedBy);\n', '\n', '    Roles.Role private _owners;\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender), "OwnerRole: caller does not have the Owner role");\n', '        _;\n', '    }\n', '\n', '    function isOwner(address account) public view returns (bool) {\n', '        return _owners.has(account);\n', '    }\n', '\n', '    function addOwner(address account) public onlyOwner {\n', '        _addOwner(account);\n', '    }\n', '\n', '    function removeOwner(address account) public onlyOwner {\n', '        _removeOwner(account);\n', '    }\n', '\n', '    function _addOwner(address account) internal {\n', '        _owners.add(account);\n', '        emit OwnerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeOwner(address account) internal {\n', '        _owners.remove(account);\n', '        emit OwnerRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/roles/WhitelisterRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract WhitelisterRole is OwnerRole {\n', '\n', '    event WhitelisterAdded(address indexed addedWhitelister, address indexed addedBy);\n', '    event WhitelisterRemoved(address indexed removedWhitelister, address indexed removedBy);\n', '\n', '    Roles.Role private _whitelisters;\n', '\n', '    modifier onlyWhitelister() {\n', '        require(isWhitelister(msg.sender), "WhitelisterRole: caller does not have the Whitelister role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelister(address account) public view returns (bool) {\n', '        return _whitelisters.has(account);\n', '    }\n', '\n', '    function _addWhitelister(address account) internal {\n', '        _whitelisters.add(account);\n', '        emit WhitelisterAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeWhitelister(address account) internal {\n', '        _whitelisters.remove(account);\n', '        emit WhitelisterRemoved(account, msg.sender);\n', '    }\n', '\n', '    function addWhitelister(address account) public onlyOwner {\n', '        _addWhitelister(account);\n', '    }\n', '\n', '    function removeWhitelister(address account) public onlyOwner {\n', '        _removeWhitelister(account);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Whitelistable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', 'Keeps track of whitelists and can check if sender and reciever are configured to allow a transfer.\n', 'Only administrators can update the whitelists.\n', 'Any address can only be a member of one whitelist at a time.\n', ' */\n', 'contract Whitelistable is WhitelisterRole {\n', '    // Track whether whitelisting is enabled\n', '    bool public isWhitelistEnabled;\n', '\n', '    // Zero is reserved for indicating it is not on a whitelist\n', '    uint8 constant NO_WHITELIST = 0;\n', '\n', '    // The mapping to keep track of which whitelist any address belongs to.\n', '    // 0 is reserved for no whitelist and is the default for all addresses.\n', '    mapping (address => uint8) public addressWhitelists;\n', '\n', "    // The mapping to keep track of each whitelist's outbound whitelist flags.\n", '    // Boolean flag indicates whether outbound transfers are enabled.\n', '    mapping(uint8 => mapping (uint8 => bool)) public outboundWhitelistsEnabled;\n', '\n', '    // Events to allow tracking add/remove.\n', '    event AddressAddedToWhitelist(address indexed addedAddress, uint8 indexed whitelist, address indexed addedBy);\n', '    event AddressRemovedFromWhitelist(address indexed removedAddress, uint8 indexed whitelist, address indexed removedBy);\n', '    event OutboundWhitelistUpdated(\n', '        address indexed updatedBy, uint8 indexed sourceWhitelist, uint8 indexed destinationWhitelist, bool from, bool to);\n', '    event WhitelistEnabledUpdated(address indexed updatedBy, bool indexed enabled);\n', '\n', '    function _setWhitelistEnabled(bool enabled) internal {\n', '        isWhitelistEnabled = enabled;\n', '        emit WhitelistEnabledUpdated(msg.sender, enabled);\n', '    }\n', '\n', '    /**\n', "    Sets an address's white list ID.  Only administrators should be allowed to update this.\n", '    If an address is on an existing whitelist, it will just get updated to the new value (removed from previous).\n', '     */\n', '    function _addToWhitelist(address addressToAdd, uint8 whitelist) internal {\n', '        // Verify a valid address was passed in\n', '        require(addressToAdd != address(0), "Cannot add address 0x0 to a whitelist.");\n', '\n', '        // Verify the whitelist is valid\n', '        require(whitelist != NO_WHITELIST, "Invalid whitelist ID supplied");\n', '\n', '        // Save off the previous white list\n', '        uint8 previousWhitelist = addressWhitelists[addressToAdd];\n', '\n', "        // Set the address's white list ID\n", '        addressWhitelists[addressToAdd] = whitelist;\n', '\n', '        // If the previous whitelist existed then we want to indicate it has been removed\n', '        if(previousWhitelist != NO_WHITELIST) {\n', '            // Emit the event for tracking\n', '            emit AddressRemovedFromWhitelist(addressToAdd, previousWhitelist, msg.sender);\n', '        }\n', '\n', '        // Emit the event for new whitelist\n', '        emit AddressAddedToWhitelist(addressToAdd, whitelist, msg.sender);\n', '    }\n', '\n', '    /**\n', "    Clears out an address's white list ID.  Only administrators should be allowed to update this.\n", '     */\n', '    function _removeFromWhitelist(address addressToRemove) internal {\n', '        // Verify a valid address was passed in\n', '        require(addressToRemove != address(0), "Cannot remove address 0x0 from a whitelist.");\n', '\n', '        // Save off the previous white list\n', '        uint8 previousWhitelist = addressWhitelists[addressToRemove];\n', '\n', '        // Verify the address was actually on a whitelist\n', '        require(previousWhitelist != NO_WHITELIST, "Address cannot be removed from invalid whitelist.");\n', '\n', '        // Zero out the previous white list\n', '        addressWhitelists[addressToRemove] = NO_WHITELIST;\n', '\n', '        // Emit the event for tracking\n', '        emit AddressRemovedFromWhitelist(addressToRemove, previousWhitelist, msg.sender);\n', '    }\n', '\n', '    /**\n', '    Sets the flag to indicate whether source whitelist is allowed to send to destination whitelist.\n', '    Only administrators should be allowed to update this.\n', '     */\n', '    function _updateOutboundWhitelistEnabled(uint8 sourceWhitelist, uint8 destinationWhitelist, bool newEnabledValue) internal {\n', '        // Get the old enabled flag\n', '        bool oldEnabledValue = outboundWhitelistsEnabled[sourceWhitelist][destinationWhitelist];\n', '\n', '        // Update to the new value\n', '        outboundWhitelistsEnabled[sourceWhitelist][destinationWhitelist] = newEnabledValue;\n', '\n', '        // Emit event for tracking\n', '        emit OutboundWhitelistUpdated(msg.sender, sourceWhitelist, destinationWhitelist, oldEnabledValue, newEnabledValue);\n', '    }\n', '\n', '    /**\n', '    Determine if the a sender is allowed to send to the receiver.\n', '    The source whitelist must be enabled to send to the whitelist where the receive exists.\n', '     */\n', '    function checkWhitelistAllowed(address sender, address receiver) public view returns (bool) {\n', '        // If whitelist enforcement is not enabled, then allow all\n', '        if(!isWhitelistEnabled){\n', '            return true;\n', '        }\n', '\n', '        // First get each address white list\n', '        uint8 senderWhiteList = addressWhitelists[sender];\n', '        uint8 receiverWhiteList = addressWhitelists[receiver];\n', '\n', '        // If either address is not on a white list then the check should fail\n', '        if(senderWhiteList == NO_WHITELIST || receiverWhiteList == NO_WHITELIST){\n', '            return false;\n', '        }\n', '\n', '        // Determine if the sending whitelist is allowed to send to the destination whitelist\n', '        return outboundWhitelistsEnabled[senderWhiteList][receiverWhiteList];\n', '    }\n', '\n', '    /**\n', '     * Enable or disable the whitelist enforcement\n', '     */\n', '    function setWhitelistEnabled(bool enabled) public onlyOwner {\n', '        _setWhitelistEnabled(enabled);\n', '    }\n', '\n', '    /**\n', '    Public function that allows admins to remove an address from a whitelist\n', '     */\n', '    function addToWhitelist(address addressToAdd, uint8 whitelist) public onlyWhitelister {\n', '        _addToWhitelist(addressToAdd, whitelist);\n', '    }\n', '\n', '    /**\n', '    Public function that allows admins to remove an address from a whitelist\n', '     */\n', '    function removeFromWhitelist(address addressToRemove) public onlyWhitelister {\n', '        _removeFromWhitelist(addressToRemove);\n', '    }\n', '\n', '    /**\n', '    Public function that allows admins to update outbound whitelists\n', '     */\n', '    function updateOutboundWhitelistEnabled(uint8 sourceWhitelist, uint8 destinationWhitelist, bool newEnabledValue) public onlyWhitelister {\n', '        _updateOutboundWhitelistEnabled(sourceWhitelist, destinationWhitelist, newEnabledValue);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/roles/MinterRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract MinterRole is OwnerRole {\n', '\n', '    event MinterAdded(address indexed addedMinter, address indexed addedBy);\n', '    event MinterRemoved(address indexed removedMinter, address indexed removedBy);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account, msg.sender);\n', '    }\n', '\n', '    function addMinter(address account) public onlyOwner {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function removeMinter(address account) public onlyOwner {\n', '        _removeMinter(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/capabilities/Mintable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', 'contract Mintable is ERC20, MinterRole {\n', '  event Mint(address indexed minter, address indexed to, uint256 amount);\n', '\n', '  function _mint(address minter, address to, uint256 amount) internal returns (bool) {\n', '      ERC20._mint(to, amount);\n', '      emit Mint(minter, to, amount);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  Allow Owners to mint tokens to valid addresses\n', '  */\n', '  function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '      return Mintable._mint(msg.sender, account, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/roles/BurnerRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract BurnerRole is OwnerRole {\n', '\n', '    event BurnerAdded(address indexed addedBurner, address indexed addedBy);\n', '    event BurnerRemoved(address indexed removedBurner, address indexed removedBy);\n', '\n', '    Roles.Role private _burners;\n', '\n', '    modifier onlyBurner() {\n', '        require(isBurner(msg.sender), "BurnerRole: caller does not have the Burner role");\n', '        _;\n', '    }\n', '\n', '    function isBurner(address account) public view returns (bool) {\n', '        return _burners.has(account);\n', '    }\n', '\n', '    function _addBurner(address account) internal {\n', '        _burners.add(account);\n', '        emit BurnerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeBurner(address account) internal {\n', '        _burners.remove(account);\n', '        emit BurnerRemoved(account, msg.sender);\n', '    }\n', '\n', '    function addBurner(address account) public onlyOwner {\n', '        _addBurner(account);\n', '    }\n', '\n', '    function removeBurner(address account) public onlyOwner {\n', '        _removeBurner(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/capabilities/Burnable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', 'contract Burnable is ERC20, BurnerRole {\n', '  event Burn(address indexed burner, address indexed from, uint256 amount);\n', '\n', '  function _burn(address burner, address from, uint256 amount) internal returns (bool) {\n', '      ERC20._burn(from, amount);\n', '      emit Burn(burner, from, amount);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  Allow Burners to burn tokens from valid addresses\n', '  */\n', '  function burn(address account, uint256 amount) public onlyBurner returns (bool) {\n', '      return _burn(msg.sender, account, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/roles/RevokerRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract RevokerRole is OwnerRole {\n', '\n', '    event RevokerAdded(address indexed addedRevoker, address indexed addedBy);\n', '    event RevokerRemoved(address indexed removedRevoker, address indexed removedBy);\n', '\n', '    Roles.Role private _revokers;\n', '\n', '    modifier onlyRevoker() {\n', '        require(isRevoker(msg.sender), "RevokerRole: caller does not have the Revoker role");\n', '        _;\n', '    }\n', '\n', '    function isRevoker(address account) public view returns (bool) {\n', '        return _revokers.has(account);\n', '    }\n', '\n', '    function _addRevoker(address account) internal {\n', '        _revokers.add(account);\n', '        emit RevokerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeRevoker(address account) internal {\n', '        _revokers.remove(account);\n', '        emit RevokerRemoved(account, msg.sender);\n', '    }\n', '\n', '    function addRevoker(address account) public onlyOwner {\n', '        _addRevoker(account);\n', '    }\n', '\n', '    function removeRevoker(address account) public onlyOwner {\n', '        _removeRevoker(account);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Revocable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', 'contract Revocable is ERC20, RevokerRole {\n', '\n', '  event Revoke(address indexed revoker, address indexed from, uint256 amount);\n', '\n', '  function _revoke(\n', '    address _from,\n', '    uint256 _amount\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    ERC20._transfer(_from, msg.sender, _amount);\n', '    emit Revoke(msg.sender, _from, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  Allow Admins to revoke tokens from any address\n', '    */\n', '  function revoke(address from, uint256 amount) public onlyRevoker returns (bool) {\n', '      return _revoke(from, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/roles/PauserRole.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract PauserRole is OwnerRole {\n', '\n', '    event PauserAdded(address indexed addedPauser, address indexed addedBy);\n', '    event PauserRemoved(address indexed removedPauser, address indexed removedBy);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account, msg.sender);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Pausable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by an Owner to pause, triggers stopped state.\n', '     */\n', '    function _pause() internal {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by an Owner to unpause, returns to normal state.\n', '     */\n', '    function _unpause() internal {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by an Owner to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        Pausable._pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Called by an Owner to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        Pausable._unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/TokenSoftToken.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenSoftToken is Proxiable, ERC20Detailed, ERC1404, OwnerRole, Whitelistable, Mintable, Burnable, Revocable, Pausable {\n', '\n', '    // ERC1404 Error codes and messages\n', '    uint8 public constant SUCCESS_CODE = 0;\n', '    uint8 public constant FAILURE_NON_WHITELIST = 1;\n', '    uint8 public constant FAILURE_PAUSED = 2;\n', '    string public constant SUCCESS_MESSAGE = "SUCCESS";\n', '    string public constant FAILURE_NON_WHITELIST_MESSAGE = "The transfer was restricted due to white list configuration.";\n', '    string public constant FAILURE_PAUSED_MESSAGE = "The transfer was restricted due to the contract being paused.";\n', '    string public constant UNKNOWN_ERROR = "Unknown Error Code";\n', '\n', '\n', '    /**\n', '    Constructor for the token to set readable details and mint all tokens\n', '    to the specified owner.\n', '     */\n', '    function initialize (address owner, string memory name, string memory symbol, uint8 decimals, uint256 initialSupply, bool whitelistEnabled)\n', '        public\n', '        initializer\n', '    {\n', '        ERC20Detailed.initialize(name, symbol, decimals);\n', '        Mintable._mint(msg.sender, owner, initialSupply);\n', '        OwnerRole._addOwner(owner);\n', '        Whitelistable._setWhitelistEnabled(whitelistEnabled);\n', '    }\n', '\n', '    /**\n', '    Public function to update the address of the code contract, retricted to owner\n', '     */\n', '    function updateCodeAddress (address newAddress) public onlyOwner {\n', '        Proxiable._updateCodeAddress(newAddress);\n', '    }\n', '\n', '    /**\n', '    This function detects whether a transfer should be restricted and not allowed.\n', '    If the function returns SUCCESS_CODE (0) then it should be allowed.\n', '     */\n', '    function detectTransferRestriction (address from, address to, uint256)\n', '        public\n', '        view\n', '        returns (uint8)\n', '    {\n', '        // Check the paused status of the contract\n', '        if (Pausable.paused()) {\n', '            return FAILURE_PAUSED;\n', '        }\n', '\n', '        // If an owner transferring, then ignore whitelist restrictions\n', '        if(OwnerRole.isOwner(from)) {\n', '            return SUCCESS_CODE;\n', '        }\n', '\n', '        // Restrictions are enabled, so verify the whitelist config allows the transfer.\n', '        // Logic defined in Whitelistable parent class\n', '        if(!checkWhitelistAllowed(from, to)) {\n', '            return FAILURE_NON_WHITELIST;\n', '        }\n', '\n', '        // If no restrictions were triggered return success\n', '        return SUCCESS_CODE;\n', '    }\n', '\n', '    /**\n', '    This function allows a wallet or other client to get a human readable string to show\n', '    a user if a transfer was restricted.  It should return enough information for the user\n', '    to know why it failed.\n', '     */\n', '    function messageForTransferRestriction (uint8 restrictionCode)\n', '        public\n', '        view\n', '        returns (string memory)\n', '    {\n', '        if (restrictionCode == SUCCESS_CODE) {\n', '            return SUCCESS_MESSAGE;\n', '        }\n', '\n', '        if (restrictionCode == FAILURE_NON_WHITELIST) {\n', '            return FAILURE_NON_WHITELIST_MESSAGE;\n', '        }\n', '\n', '        if (restrictionCode == FAILURE_PAUSED) {\n', '            return FAILURE_PAUSED_MESSAGE;\n', '        }\n', '\n', '        // An unknown error code was passed in.\n', '        return UNKNOWN_ERROR;\n', '    }\n', '\n', '    /**\n', '    Evaluates whether a transfer should be allowed or not.\n', '     */\n', '    modifier notRestricted (address from, address to, uint256 value) {\n', '        uint8 restrictionCode = detectTransferRestriction(from, to, value);\n', '        require(restrictionCode == SUCCESS_CODE, messageForTransferRestriction(restrictionCode));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    Overrides the parent class token transfer function to enforce restrictions.\n', '     */\n', '    function transfer (address to, uint256 value)\n', '        public\n', '        notRestricted(msg.sender, to, value)\n', '        returns (bool success)\n', '    {\n', '        success = ERC20.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '    Overrides the parent class token transferFrom function to enforce restrictions.\n', '     */\n', '    function transferFrom (address from, address to, uint256 value)\n', '        public\n', '        notRestricted(from, to, value)\n', '        returns (bool success)\n', '    {\n', '        success = ERC20.transferFrom(from, to, value);\n', '    }\n', '}']