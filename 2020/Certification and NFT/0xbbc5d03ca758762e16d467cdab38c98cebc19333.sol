['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-14\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b <= a, errorMessage);\n', '      uint256 c = a - b;\n', '\n', '      return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "      // benefit is lost if 'b' is also tested.\n", '      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '      if (a == 0) {\n', '        return 0;\n', '      }\n', '\n', '      uint256 c = a * b;\n', '      require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '      return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b > 0, errorMessage);\n', '      uint256 c = a / b;\n', "      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '      return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b != 0, errorMessage);\n', '      return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0)\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data);\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)));\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', '* @title IFlashLoanReceiver interface\n', '* @notice Interface for the Aave fee IFlashLoanReceiver.\n', '* @author Aave\n', '* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n', '**/\n', 'interface IFlashLoanReceiver {\n', '    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\n', '}\n', '\n', '/**\n', '    @title ILendingPoolAddressesProvider interface\n', '    @notice provides the interface to fetch the LendingPoolCore address\n', ' */\n', 'interface ILendingPoolAddressesProvider {\n', '    function getLendingPoolCore() external view returns (address payable);\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '    Ensures that any contract that inherits from this contract is able to\n', '    withdraw funds that are accidentally received or stuck.\n', ' */\n', 'contract Withdrawable is Ownable {\n', '    using SafeERC20 for IERC20;\n', '    address constant ETHER = address(0);\n', '\n', '    event LogWithdraw(\n', '        address indexed _from,\n', '        address indexed _assetAddress,\n', '        uint amount\n', '    );\n', '\n', '    /**\n', '     * @dev Withdraw asset.\n', '     * @param _assetAddress Asset to be withdrawn.\n', '     */\n', '    function withdraw(address _assetAddress) public onlyOwner {\n', '        uint assetBalance;\n', '        if (_assetAddress == ETHER) {\n', '            address self = address(this); // workaround for a possible solidity bug\n', '            assetBalance = self.balance;\n', '            msg.sender.transfer(assetBalance);\n', '        } else {\n', '            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\n', '            IERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\n', '        }\n', '        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\n', '    }\n', '}\n', '\n', 'abstract contract FlashLoanReceiverBase is IFlashLoanReceiver, Withdrawable {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    address constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    ILendingPoolAddressesProvider public addressesProvider;\n', '\n', '    constructor(address _addressProvider) public {\n', '        addressesProvider = ILendingPoolAddressesProvider(_addressProvider);\n', '    }\n', '\n', '    receive() payable external {}\n', '\n', '    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\n', '        address payable core = addressesProvider.getLendingPoolCore();\n', '        transferInternal(core, _reserve, _amount);\n', '    }\n', '\n', '    function transferInternal(address payable _destination, address _reserve, uint256 _amount) internal {\n', '        if(_reserve == ethAddress) {\n', '            (bool success, ) = _destination.call{value: _amount}("");\n', '            require(success == true, "Couldn\'t transfer ETH");\n', '            return;\n', '        }\n', '        IERC20(_reserve).safeTransfer(_destination, _amount);\n', '    }\n', '\n', '    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\n', '        if(_reserve == ethAddress) {\n', '            return _target.balance;\n', '        }\n', '        return IERC20(_reserve).balanceOf(_target);\n', '    }\n', '}\n', '\n', 'interface ILendingPool {\n', '  function addressesProvider () external view returns ( address );\n', '  function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\n', '  function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\n', '  function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\n', '  function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\n', '  function swapBorrowRateMode ( address _reserve ) external;\n', '  function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\n', '  function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\n', '  function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\n', '  function flashLoan ( address _receiver, address _reserve, uint256 _amount, bytes calldata _params ) external;\n', '  function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\n', '  function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\n', '  function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\n', '  function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\n', '  function getReserves () external view;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       The type of position denoted as a uint8\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /* ============ Functions ============ */\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function pushPosition(Position memory _position) external;\n', '    function popPosition() external;\n', '    function editPosition(uint256 _index, Position memory _position) external;\n', '    function batchEditPositions(uint256[] memory _indices, ISetToken.Position[] memory _positions) external;\n', '    function setPositions(ISetToken.Position[] memory _positions) external;\n', '\n', '    function editPositionUnit(uint256 _index, int256 _newUnit) external;\n', '    function batchEditPositionUnits(uint256[] memory _indices, int256[] memory _newUnits) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns(address);\n', '    function getModules() external view returns (address[] memory);\n', '    function getPositions() external view returns (Position[] memory);\n', '\n', '    function isModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    \n', '*/\n', 'interface IBasicIssuanceModule {\n', '    function getRequiredComponentUnitsForIssue(\n', '        ISetToken _setToken,\n', '        uint256 _quantity\n', '    ) external returns(address[] memory, uint256[] memory);\n', '    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\n', '    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\n', '}\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    \n', '*/\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', '\n', 'contract DefiPulseIndexTrade is FlashLoanReceiverBase {\n', '  address immutable factory;\n', '  address immutable setController;\n', '  address immutable issueModule;\n', '  address immutable WETH;\n', '  IUniswapV2Router02 immutable router;\n', '  uint256 MAX_INT = 2**256 - 1;\n', '\n', '\n', '  constructor(address _factory, address _router,  address _setController, address _issueModule, address _addressProvider) \n', '  FlashLoanReceiverBase(_addressProvider) public {\n', '    factory = _factory; // Uniswap Factory V02\n', '    router = IUniswapV2Router02(_router);  // Uniswap Router\n', '    setController = _setController;        // Set Controller\n', '    issueModule = _issueModule;            // Set Token Issue Module\n', '    WETH = IUniswapV2Router01(_router).WETH();\n', '  }\n', '\n', '\n', '  function initiateArbitrage(address _indexToken, uint256 _targetPriceInEther) public payable returns (uint256 profit) {\n', '    if(msg.value > 0) IWETH(WETH).deposit{value: msg.value}();\n', '    (bool aToB, uint256 indexAmount, address pairAddress) = getIndexAmountToBuyOrSell(_indexToken, _targetPriceInEther);\n', '    if(aToB) {\n', '      flashBuyIndex(_indexToken, indexAmount, pairAddress);\n', '    } else {\n', '      if(indexAmount < 1 ether) indexAmount = 1 ether;\n', '      flashSellIndex(_indexToken, indexAmount, pairAddress);\n', '    }\n', '    profit = address(this).balance;\n', '    msg.sender.transfer(profit);\n', '  }\n', '\n', '  function approveToken(address _token) public {\n', '    IERC20(_token).approve(address(router), MAX_INT); //  Set Max Approval for neccessary tokens;\n', '    IERC20(_token).approve(setController, MAX_INT); //  Set Max Approval for neccessary tokens;\n', '    IERC20(_token).approve(issueModule, MAX_INT); //  Set Max Approval for neccessary tokens;\n', '  }\n', '\n', '  function approveSetToken(address _index) public {\n', '    IERC20(_index).approve(address(router), MAX_INT); //  Set Max Approval for neccessary tokens;\n', '    ISetToken.Position[] memory positions = ISetToken(_index).getPositions();\n', '\n', '    for(uint256 i=0; i<positions.length; i++) {\n', '      IERC20(positions[i].component).approve(setController, MAX_INT); // Set Max Approval for Set Contract;\n', '      IERC20(positions[i].component).approve(issueModule, MAX_INT); // Set Max Approval for Set Contract;\n', '      IERC20(positions[i].component).approve(address(router), MAX_INT); //  Set Max Approval for neccessary tokens;\n', '    }\n', '\n', '  }\n', '\n', '  function issueSetToken(address _index, uint256 _amount, address _recipient) private {\n', '    IBasicIssuanceModule(issueModule).issue(ISetToken(_index), _amount, _recipient);\n', '  }\n', '\n', '  function redeemSetToken(address _index, uint256 _amount) private {\n', '    IBasicIssuanceModule(issueModule).redeem(ISetToken(_index), _amount, address(this));\n', '  }\n', '\n', '  function getIndexAmountToBuyOrSell(address _index, uint256 _targetPriceInEther) public view returns (bool isBuy, uint256 amountIn, address pairAddress_) {\n', '    address pairAddress = IUniswapV2Factory(factory).getPair(WETH, _index);\n', '\n', '    (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(factory, WETH, _index);\n', '    (bool aToB, uint256 _amount) = computeProfitMaximizingTrade(_targetPriceInEther, 1000000000, reserveA, reserveB);\n', '\n', '    uint256 maxAmount = _amount < reserveB ? _amount : reserveB;\n', '\n', '    return (aToB, maxAmount, pairAddress);\n', '  }\n', '\n', '  // Buy Index and return to user (no flash loans) - Same as flashSellIndex but send user the token\n', '  function obtainIndexTokens(address _index, uint256 amountIndexToBuy, address pairAddress) public payable {\n', '    (uint256 totalEthNeeded, uint256[] memory tokenAmounts, address[] memory tokens) = calculatePositionsNeededToBuyIndex(_index, amountIndexToBuy);\n', '    require(msg.value >= totalEthNeeded, "did not send enough ether");\n', '\n', '    IWETH(WETH).deposit{value: totalEthNeeded}();\n', '\n', '    acquireTokensOfSet(tokens, tokenAmounts);\n', '\n', '\n', '    issueSetToken(_index, amountIndexToBuy, msg.sender);\n', '\n', '    if(address(this).balance > 0) msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '  function calculatePositionsNeededToBuyIndex(address _index, uint256 indexAmount) public view returns (uint256 totalEthNeeded, uint256[] memory tokenAmounts, address[] memory tokens) {\n', '    ISetToken.Position[] memory positions = ISetToken(_index).getPositions();\n', '\n', '    totalEthNeeded = 0;\n', '    tokenAmounts = new uint256[](positions.length);\n', '    tokens = new address[](positions.length);\n', '    for(uint256 i=0; i<positions.length; i++) {\n', '      (uint256 tokenReserveA, uint256 tokenReserveB) = UniswapV2Library.getReserves(factory, WETH, positions[i].component);\n', '      uint256 tokensNeeded = preciseMulCeil(uint256(positions[i].unit), indexAmount);\n', '      tokenAmounts[i] = tokensNeeded;\n', '      tokens[i] = positions[i].component;\n', '\n', '      uint256 ethNeeded = router.getAmountIn(tokensNeeded, tokenReserveA, tokenReserveB);\n', '      totalEthNeeded = totalEthNeeded.add(ethNeeded);\n', '    }\n', '  }\n', '\n', '  //  Loan WETH and trade for individual parts, then redeem and sell Index (will trigger executeOperation);\n', '  function flashSellIndex(address _index, uint256 amountIndexToSell, address pairAddress) internal {\n', '    // Second calculate amount of ETH needed to get individual tokens\n', '    (uint256 totalEthNeeded, uint256[] memory tokenAmounts, address[] memory tokens) = calculatePositionsNeededToBuyIndex(_index, amountIndexToSell);\n', '\n', '    // Wrap Ether\n', '    if(address(this).balance > 0) IWETH(WETH).deposit{value: address(this).balance}();\n', '\n', '    acquireTokensOfSet(tokens, tokenAmounts);\n', '    bytes memory data = abi.encode(_index, amountIndexToSell, tokenAmounts, tokens);\n', '\n', '    //\xa0Third get Flash Loan, and execute rest once funds are received from aave (executeOperation) \n', '    ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\n', '    lendingPool.flashLoan(address(this), 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, totalEthNeeded, data);\n', '  }\n', '\n', '  function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params)\n', '        external override {\n', '        require(_amount <= getBalanceInternal(address(this), _reserve), "Invalid balance, was the flashLoan successful?");\n', '        uint totalDebt = _amount.add(_fee);\n', '\n', '        // Wrap Ether\n', '        IWETH(WETH).deposit{value: address(this).balance}();\n', '\n', '        (address _index, uint256 _indexAmount, uint256[] memory tokenAmounts, address[] memory tokens) = abi.decode(_params, (address, uint256, uint256[], address[]));\n', '\n', '\n', '        acquireTokensOfSet(tokens, tokenAmounts);\n', '\n', '        // issue Set Token\n', '        issueSetToken(_index, _indexAmount, address(this));\n', '\n', '        \n', '        address[] memory path = new address[](2);\n', '        path[0] = _index;\n', '        path[1] = WETH;\n', '\n', '        router.swapExactTokensForTokens(_indexAmount, 0, path, address(this), block.timestamp);\n', '\n', '\n', '        IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\n', '\n', '        transferFundsBackToPoolInternal(_reserve, totalDebt);\n', '\n', '    }\n', '\n', '        \n', '\n', '\n', '  // Loan Index and Sell for Individual Parts\n', '  function flashBuyIndex(address _index, uint256 amountIndexToBuy, address pairAddress) internal returns (address t0, address t1, uint256 a0, uint256 a1) {\n', '    \n', '    bytes memory data = abi.encode(_index, amountIndexToBuy, pairAddress);\n', '\n', '    address token0 = IUniswapV2Pair(pairAddress).token0();\n', '    address token1 = IUniswapV2Pair(pairAddress).token1();\n', '    uint amount0Out = _index == token0 ? amountIndexToBuy : 0;\n', '    uint amount1Out = _index == token1 ? amountIndexToBuy : 0;\n', '\n', '    IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\n', '\n', '    return (token0, token1, amount0Out, amount1Out);\n', '  }\n', '\n', '  function completeBuyIndex(address _index, uint256 _amountIndexToBuy) private {\n', '    redeemSetToken(_index, _amountIndexToBuy);\n', '\n', '    liquidateSetPositions(_index);\n', '  }\n', '\n', '  function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\n', '      address token0 = IUniswapV2Pair(msg.sender).token0(); // fetch the address of token0\n', '      address token1 = IUniswapV2Pair(msg.sender).token1(); // fetch the address of token1\n', '      assert(msg.sender == IUniswapV2Factory(factory).getPair(token0, token1));\n', '\n', '      (address _index, uint256 _indexAmount) = abi.decode(_data, (address, uint256));\n', '\n', '      completeBuyIndex(_index, _indexAmount);\n', '\n', '      uint256 amount = token0 == address(WETH) ? _amount1 : _amount0;\n', '\n', '\n', '      address[] memory path = new address[](2);\n', '      path[0] = _amount0 == 0 ? token0 : token1;\n', '      path[1] = _amount0 == 0 ? token1 : token0;\n', '\n', '      IERC20(WETH).transfer(msg.sender, amount);\n', '      IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\n', '  }\n', '\n', '  function acquireTokensOfSet(address[] memory tokens, uint256[] memory tokenAmounts) private {\n', '\n', '    for(uint256 i=0; i<tokens.length; i++) {\n', '      address[] memory path = new address[](2);\n', '      path[0] = WETH;\n', '      path[1] = tokens[i];\n', '      router.swapTokensForExactTokens(tokenAmounts[i], MAX_INT, path, address(this), block.timestamp); \n', '    }\n', '\n', '  }\n', '\n', '  function liquidateSetPositions(address _index) private {\n', '    ISetToken.Position[] memory positions = ISetToken(_index).getPositions();\n', '\n', '    for(uint256 i=0; i<positions.length; i++) {\n', '      uint256 tokenBalance = IERC20(positions[i].component).balanceOf(address(this));\n', '      address[] memory path = new address[](2);\n', '      path[0] = positions[i].component;\n', '      path[1] = WETH;\n', '      router.swapExactTokensForTokens(tokenBalance, 0, path, address(this), block.timestamp); \n', '    }\n', '  }\n', '\n', '  // computes the direction and magnitude of the profit-maximizing trade\n', '  // https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleSwapToPrice.sol\n', '  function computeProfitMaximizingTrade(\n', '    uint256 truePriceTokenA,\n', '    uint256 truePriceTokenB,\n', '    uint256 reserveA,\n', '    uint256 reserveB\n', '  ) private pure returns (bool aToB, uint256 amountIn) {\n', '    aToB = reserveA.mul(truePriceTokenB) / reserveB < truePriceTokenA;\n', '\n', '    uint256 invariant = reserveA.mul(reserveB);\n', '\n', '    uint256 leftSide = Babylonian.sqrt(\n', '      invariant.mul(aToB ? truePriceTokenA : truePriceTokenB).mul(1000) /\n', '      uint256(aToB ? truePriceTokenB : truePriceTokenA).mul(997)\n', '    );\n', '    uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\n', '\n', '    // compute the amount that must be sent to move the price to the profit-maximizing price\n', '    amountIn = leftSide.sub(rightSide);\n', '  }\n', '\n', '\n', '  // From Precise Unit SafeMath\n', '  function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0) {\n', '      return 0;\n', '    }\n', '    return a.mul(b).sub(1).div(10 ** 18).add(1);\n', '  }\n', '\n', '}']