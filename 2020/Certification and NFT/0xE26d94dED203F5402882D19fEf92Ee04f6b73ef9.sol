['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/curve/interfaces/Gauge.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface Gauge {\n', '    function deposit(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(uint) external;\n', '    function user_checkpoint(address) external;\n', '}\n', '\n', 'interface VotingEscrow {\n', '    function create_lock(uint256 v, uint256 time) external;\n', '    function increase_amount(uint256 _value) external;\n', '    function increase_unlock_time(uint256 _unlock_time) external;\n', '    function withdraw() external;\n', '}\n', '\n', 'interface Mintr {\n', '    function mint(address) external;\n', '}\n', '\n', '// File: contracts/strategies/curve/interfaces/ICurveTBTC.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface ICurveTBTC {\n', '    function add_liquidity(\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external returns (uint256);\n', '}\n', '\n', '// File: contracts/uniswap/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/uniswap/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', 'interface IUniswapV2Router02 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/hardworkInterface/IStrategy.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IStrategy {\n', '    \n', '    function unsalvagableTokens(address tokens) external view returns (bool);\n', '    \n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function vault() external view returns (address);\n', '\n', '    function withdrawAllToVault() external;\n', '    function withdrawToVault(uint256 amount) external;\n', '\n', '    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\n', '\n', '    // should only be called by controller\n', '    function salvage(address recipient, address token, uint256 amount) external;\n', '\n', '    function doHardWork() external;\n', '    function depositArbCheck() external view returns(bool);\n', '}\n', '\n', '// File: contracts/hardworkInterface/IVault.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IVault {\n', '\n', '    function underlyingBalanceInVault() external view returns (uint256);\n', '    function underlyingBalanceWithInvestment() external view returns (uint256);\n', '\n', '    // function store() external view returns (address);\n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function strategy() external view returns (address);\n', '\n', '    function setStrategy(address _strategy) external;\n', '    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\n', '\n', '    function deposit(uint256 amountWei) external;\n', '    function depositFor(uint256 amountWei, address holder) external;\n', '\n', '    function withdrawAll() external;\n', '    function withdraw(uint256 numberOfShares) external;\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\n', '\n', '    // hard work should be callable only by the controller (by the hard worker) or by governance\n', '    function doHardWork() external;\n', '    function rebalance() external;\n', '}\n', '\n', '// File: contracts/Storage.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract Storage {\n', '\n', '  address public governance;\n', '  address public controller;\n', '\n', '  constructor() public {\n', '    governance = msg.sender;\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setGovernance(address _governance) public onlyGovernance {\n', '    require(_governance != address(0), "new governance shouldn\'t be empty");\n', '    governance = _governance;\n', '  }\n', '\n', '  function setController(address _controller) public onlyGovernance {\n', '    require(_controller != address(0), "new controller shouldn\'t be empty");\n', '    controller = _controller;\n', '  }\n', '\n', '  function isGovernance(address account) public view returns (bool) {\n', '    return account == governance;\n', '  }\n', '\n', '  function isController(address account) public view returns (bool) {\n', '    return account == controller;\n', '  }\n', '}\n', '\n', '// File: contracts/Governable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Governable {\n', '\n', '  Storage public store;\n', '\n', '  constructor(address _store) public {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(store.isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setStorage(address _store) public onlyGovernance {\n', '    require(_store != address(0), "new storage shouldn\'t be empty");\n', '    store = Storage(_store);\n', '  }\n', '\n', '  function governance() public view returns (address) {\n', '    return store.governance();\n', '  }\n', '}\n', '\n', '// File: contracts/Controllable.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract Controllable is Governable {\n', '\n', '  constructor(address _storage) Governable(_storage) public {\n', '  }\n', '\n', '  modifier onlyController() {\n', '    require(store.isController(msg.sender), "Not a controller");\n', '    _;\n', '  }\n', '\n', '  modifier onlyControllerOrGovernance(){\n', '    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\n', '      "The caller must be controller or governance");\n', '    _;\n', '  }\n', '\n', '  function controller() public view returns (address) {\n', '    return store.controller();\n', '  }\n', '}\n', '\n', '// File: contracts/hardworkInterface/IController.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IController {\n', '    // [Grey list]\n', '    // An EOA can safely interact with the system no matter what.\n', "    // If you're using Metamask, you're using an EOA.\n", '    // Only smart contracts may be affected by this grey list.\n', '    //\n', '    // This contract will not be able to ban any EOA from the system\n', '    // even if an EOA is being added to the greyList, he/she will still be able\n', '    // to interact with the whole system as if nothing happened.\n', '    // Only smart contracts will be affected by being added to the greyList.\n', '    // This grey list is only used in Vault.sol, see the code there for reference\n', '    function greyList(address _target) external view returns(bool);\n', '\n', '    function addVaultAndStrategy(address _vault, address _strategy) external;\n', '    function doHardWork(address _vault) external;\n', '    function hasVault(address _vault) external returns(bool);\n', '\n', '    function salvage(address _token, uint256 amount) external;\n', '    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\n', '\n', '    function notifyFee(address _underlying, uint256 fee) external;\n', '    function profitSharingNumerator() external view returns (uint256);\n', '    function profitSharingDenominator() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/strategies/ProfitNotifier.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ProfitNotifier is Controllable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  uint256 public profitSharingNumerator;\n', '  uint256 public profitSharingDenominator;\n', '  address public underlying;\n', '\n', '  event ProfitLog(\n', '    uint256 oldBalance,\n', '    uint256 newBalance,\n', '    uint256 feeAmount,\n', '    uint256 timestamp\n', '  );\n', '\n', '  constructor(\n', '    address _storage,\n', '    address _underlying\n', '  ) public Controllable(_storage){\n', '    underlying = _underlying;\n', '    // persist in the state for immutability of the fee\n', '    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\n', '    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\n', '    require(profitSharingNumerator < profitSharingDenominator, "invalid profit share");\n', '  }\n', '\n', '  function notifyProfit(uint256 oldBalance, uint256 newBalance) internal {\n', '    if (newBalance > oldBalance) {\n', '      uint256 profit = newBalance.sub(oldBalance);\n', '      uint256 feeAmount = profit.mul(profitSharingNumerator).div(profitSharingDenominator);\n', '      emit ProfitLog(oldBalance, newBalance, feeAmount, block.timestamp);\n', '\n', '      IERC20(underlying).safeApprove(controller(), 0);\n', '      IERC20(underlying).safeApprove(controller(), feeAmount);\n', '      IController(controller()).notifyFee(\n', '        underlying,\n', '        feeAmount\n', '      );\n', '    } else {\n', '      emit ProfitLog(oldBalance, newBalance, 0, block.timestamp);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/strategies/curve/CRVStrategyTBTCMixed.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IKeepRewardsClaimable {\n', '  function claim_rewards() external;\n', '}\n', '\n', 'contract CRVStrategyTBTCMixed is IStrategy, ProfitNotifier {\n', '\n', '  using SafeERC20 for IERC20;\n', '  using Address for address;\n', '  using SafeMath for uint256;\n', '\n', '  event Liquidating(address rewardToken, uint256 amount);\n', '  event ProfitsNotCollected(address rewardToken);\n', '\n', '  // the mixed token\n', '  address public underlying;\n', '  address public pool;\n', '  address public mintr;\n', '  address public crv;\n', '\n', '  address public curve;\n', '  address public weth;\n', '  address public wbtc;\n', '  address public keep;\n', '  address public keepRewards;\n', '\n', '  address public uni;\n', '\n', '  // these tokens cannot be claimed by the governance\n', '  mapping(address => bool) public unsalvagableTokens;\n', '\n', '  address public vault;\n', '\n', '  uint256 maxUint = uint256(~0);\n', '  address[] public uniswap_CRV2WBTC;\n', '  address[] public uniswap_KEEP2WBTC;\n', '\n', '  // a flag for disabling selling for simplified emergency exit\n', '  bool public sellCrv = true;\n', '  bool public sellKeep = true;\n', '\n', '  // minimum CRV, KEEP, or WBTC amounts to be liquidated\n', '  uint256 public sellFloorCrv = 1e18;\n', '  uint256 public sellFloorKeep = 1e15;\n', '  uint256 public sellFloorWbtc = 10;\n', '\n', '  modifier restricted() {\n', '    require(msg.sender == vault || msg.sender == controller()\n', '      || msg.sender == governance(),\n', '      "The sender has to be the controller, governance, or vault");\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _storage,\n', '    address _vault,\n', '    address _underlying,\n', '    address _gauge,\n', '    address _mintr,\n', '    address _crv,\n', '    address _curve,\n', '    address _weth,\n', '    address _wbtc,\n', '    address _uniswap,\n', '    address _keep,\n', '    address _keepRewards\n', '  )\n', '  ProfitNotifier(_storage, _wbtc) public {\n', '    require(IVault(_vault).underlying() == _underlying, "vault does not support TBTC-mixed");\n', '    vault = _vault;\n', '    underlying = _underlying;\n', '    pool = _gauge;\n', '    mintr = _mintr;\n', '    crv = _crv;\n', '    curve = _curve;\n', '    weth = _weth;\n', '    wbtc = _wbtc;\n', '    uni = _uniswap;\n', '    keep = _keep;\n', '    keepRewards = _keepRewards;\n', '    uniswap_CRV2WBTC = [crv, weth, wbtc];\n', '    uniswap_KEEP2WBTC = [keep, weth, wbtc];\n', '    // set these tokens to be not salvageable\n', '    unsalvagableTokens[underlying] = true;\n', '    unsalvagableTokens[crv] = true;\n', '    unsalvagableTokens[keep] = true;\n', '  }\n', '\n', '  function depositArbCheck() public view returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * Salvages a token. We should not be able to salvage CRV, KEEP, and the mixed token (underlying).\n', '  */\n', '  function salvage(address recipient, address token, uint256 amount) public onlyGovernance {\n', '    // To make sure that governance cannot come in and take away the coins\n', '    require(!unsalvagableTokens[token], "token is defined as not salvageable");\n', '    IERC20(token).safeTransfer(recipient, amount);\n', '  }\n', '\n', '  /**\n', '  * Withdraws the mixed token from the investment pool that mints crops.\n', '  */\n', '  function withdrawMixedFromPool(uint256 amount) internal {\n', '    Gauge(pool).withdraw(\n', '      Math.min(Gauge(pool).balanceOf(address(this)), amount)\n', '    );\n', '  }\n', '\n', '  /**\n', '  * Withdraws the the mixed token tokens to the pool in the specified amount.\n', '  */\n', '  function withdrawToVault(uint256 amountUnderlying) external restricted {\n', '    withdrawMixedFromPool(amountUnderlying);\n', '    if (IERC20(underlying).balanceOf(address(this)) < amountUnderlying) {\n', '      claimAndLiquidateCrvAndKeep();\n', '    }\n', '    uint256 toTransfer = Math.min(IERC20(underlying).balanceOf(address(this)), amountUnderlying);\n', '    IERC20(underlying).safeTransfer(vault, toTransfer);\n', '  }\n', '\n', '  /**\n', '  * Withdraws all the the mixed token tokens to the pool.\n', '  */\n', '  function withdrawAllToVault() external restricted {\n', '    claimAndLiquidateCrvAndKeep();\n', '    withdrawMixedFromPool(maxUint);\n', '    uint256 balance = IERC20(underlying).balanceOf(address(this));\n', '    IERC20(underlying).safeTransfer(vault, balance);\n', '  }\n', '\n', '  /**\n', '  * Invests all the underlying the mixed token into the pool that mints crops.\n', '  */\n', '  function investAllUnderlying() public restricted {\n', '    uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n', '    if (underlyingBalance > 0) {\n', '      IERC20(underlying).safeApprove(pool, 0);\n', '      IERC20(underlying).safeApprove(pool, underlyingBalance);\n', '      Gauge(pool).deposit(underlyingBalance);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * Claims the CRV and KEEP crops, converts them into WBTC on Uniswap, and then uses WBTC to mint the mixed token using the\n', '  * Curve protocol.\n', '  */\n', '  function claimAndLiquidateCrvAndKeep() internal {\n', '    uint256 wbtcBalanceBefore = IERC20(wbtc).balanceOf(address(this));\n', '\n', '    if (!sellCrv) {\n', '      emit ProfitsNotCollected(crv);\n', '    } else {\n', '      Mintr(mintr).mint(pool); // this also sends KEEP to keepRewards contract\n', '      uint256 crvBalance = IERC20(crv).balanceOf(address(this));\n', '      if (crvBalance < sellFloorCrv) {\n', '        emit ProfitsNotCollected(crv);\n', '      } else {\n', '        emit Liquidating(crv, crvBalance);\n', '        IERC20(crv).safeApprove(uni, 0);\n', '        IERC20(crv).safeApprove(uni, crvBalance);\n', '        // we can accept 1 as the minimum because this will be called only by a trusted worker\n', '        IUniswapV2Router02(uni).swapExactTokensForTokens(\n', '          crvBalance, 1, uniswap_CRV2WBTC, address(this), block.timestamp\n', '        );\n', '      }\n', '    }\n', '\n', '    if (!sellKeep) {\n', '      emit ProfitsNotCollected(keep);\n', '    } else {\n', '      IKeepRewardsClaimable(keepRewards).claim_rewards();\n', '      uint256 keepBalance = IERC20(keep).balanceOf(address(this));\n', '      if (keepBalance < sellFloorKeep) {\n', '        emit ProfitsNotCollected(keep);\n', '      } else {\n', '        emit Liquidating(keep, keepBalance);\n', '        IERC20(keep).safeApprove(uni, 0);\n', '        IERC20(keep).safeApprove(uni, keepBalance);\n', '        // we can accept 1 as the minimum because this will be called only by a trusted worker\n', '        IUniswapV2Router02(uni).swapExactTokensForTokens(\n', '          keepBalance, 1, uniswap_KEEP2WBTC, address(this), block.timestamp\n', '        );\n', '      }\n', '    }\n', '\n', '    uint256 wbtcBalanceAfter = IERC20(wbtc).balanceOf(address(this));\n', '    if (wbtcBalanceAfter < sellFloorWbtc) {\n', '      emit ProfitsNotCollected(wbtc);\n', '    } else {\n', '      notifyProfit(wbtcBalanceBefore, wbtcBalanceAfter);\n', '      curveMixedFromWBTC();\n', '    }\n', '  }\n', '\n', '  /**\n', '  * Claims and liquidates CRV into the mixed token, and then invests all underlying.\n', '  */\n', '  function doHardWork() public restricted {\n', '    claimAndLiquidateCrvAndKeep();\n', '    investAllUnderlying();\n', '  }\n', '\n', '  /**\n', '  * Investing all underlying.\n', '  */\n', '  function investedUnderlyingBalance() public view returns (uint256) {\n', '    return Gauge(pool).balanceOf(address(this)).add(\n', '      IERC20(underlying).balanceOf(address(this))\n', '    );\n', '  }\n', '\n', '  /**\n', '  * Uses the Curve protocol to convert the underlying asset into the mixed token.\n', '  */\n', '  function curveMixedFromWBTC() internal {\n', '    uint256 wbtcBalance = IERC20(wbtc).balanceOf(address(this));\n', '    if (wbtcBalance > 0) {\n', '      IERC20(wbtc).safeApprove(curve, 0);\n', '      IERC20(wbtc).safeApprove(curve, wbtcBalance);\n', '      uint256 minimum = 0;\n', '      ICurveTBTC(curve).add_liquidity([0, 0, wbtcBalance, 0], minimum);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * Can completely disable claiming CRV rewards and selling. Good for emergency withdraw in the\n', '  * simplest possible way.\n', '  */\n', '  function setSellCrv(bool s) public onlyGovernance {\n', '    sellCrv = s;\n', '  }\n', '\n', '  /**\n', '  * Can completely disable claiming KEEP rewards and selling. Good for emergency withdraw in the\n', '  * simplest possible way.\n', '  */\n', '  function setSellKeep(bool s) public onlyGovernance {\n', '    sellKeep = s;\n', '  }\n', '\n', '  /**\n', '  * Sets the minimum amount of CRV needed to trigger a sale.\n', '  */\n', '  function setSellFloorCrv(uint256 floor) public onlyGovernance {\n', '    sellFloorCrv = floor;\n', '  }\n', '\n', '  /**\n', '  * Sets the minimum amount of WBTC needed to trigger a sale.\n', '  */\n', '  function setSellFloorWbtc(uint256 floor) public onlyGovernance {\n', '    sellFloorWbtc = floor;\n', '  }\n', '\n', '  /**\n', '  * Sets the minimum amount of KEEP needed to trigger a sale.\n', '  */\n', '  function setSellFloorKeep(uint256 floor) public onlyGovernance {\n', '    sellFloorKeep = floor;\n', '  }\n', '\n', '  function setLiquidationPaths(address[] memory _crvPath, address[] memory _keepPath) public onlyGovernance {\n', '    uniswap_CRV2WBTC = _crvPath;\n', '    uniswap_KEEP2WBTC = _keepPath;\n', '  }\n', '}\n', '\n', '// File: contracts/strategies/curve/CRVStrategyTBTCMixedMainnet.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '/**\n', '* This strategy is for the TBTC-mixed vault. It is not to accept\n', '* stable coins. It will farm the CRV and KEEP crop. For liquidation, it swaps CRV and KEEP into WBTC and uses WBTC\n', '* to produce the TBTC-mixed token.\n', '*/\n', 'contract CRVStrategyTBTCMixedMainnet is CRVStrategyTBTCMixed {\n', '\n', '  constructor(\n', '    address _storage,\n', '    address _vault\n', '  ) CRVStrategyTBTCMixed(\n', '    _storage,\n', '    _vault,\n', '    address(0x64eda51d3Ad40D56b9dFc5554E06F94e1Dd786Fd), // underlying\n', '    address(0x6828bcF74279eE32f2723eC536c22c51Eed383C6), // _gauge\n', '    address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0), // _mintr\n', '    address(0xD533a949740bb3306d119CC777fa900bA034cd52), // _crv\n', '    address(0xaa82ca713D94bBA7A89CEAB55314F9EfFEdDc78c), // _curve\n', '    address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // _weth\n', '    address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599), // _wbtc\n', '    address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D), // _uniswap\n', '    address(0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC), // _keep\n', '    address(0x6828bcF74279eE32f2723eC536c22c51Eed383C6)  // _keepRewards\n', '  ) public {\n', '  }\n', '}']