['/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-31\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IPepemonFactory {\n', '    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n', '    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n', '    function mint(address _to, uint256 _id, uint256 _quantity, bytes calldata _data) external;\n', '    function burn(address _account, uint256 _id, uint256 _amount) external;\n', '    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n', '    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\n', '}\n', '\n', 'contract PepemonStake is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    IPepemonFactory public pepemonFactory;\n', '\n', '    struct StakingEvent {\n', '        uint256[] cardIdList;\n', '        uint256 cardAmountAny; // If this is > 0, cardAmountList will be ignored, and user will be able to stake multiple cards of any card accepted\n', '        uint256[] cardAmountList; // Will be ignored if cardAmountAny > 0\n', '        uint256 cardRewardId;\n', '        uint256 blockStakeLength; // Amounts of blocks of staking required to complete the event\n', '        uint256 blockEventClose; // Block at which this event will not accept any new stake\n', '        uint256[] toBurnIdList; // Id list of cards to burn on completion of event\n', '        uint256[] toBurnAmountList; // Amount list of cards to burn on completion of event\n', '    }\n', '\n', '    struct UserInfo {\n', '        bool isCompleted;\n', '        uint256 blockEnd; // Block at which user will have completed the event (If this is not 0, user is currently staking)\n', '    }\n', '\n', '    StakingEvent[] public stakingEvents;\n', '    mapping (address => mapping(uint256 => UserInfo)) public userInfo;\n', '    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public cardsStaked; // address => eventId => cardId => amountStaked\n', '\n', '    ////\n', '    // Events\n', '    ////\n', '\n', '    event StakingEventCreated(uint256 eventId);\n', '    event StakingEventEntered(address indexed user, uint256 eventId);\n', '    event StakingEventCompleted(address indexed user, uint256 eventId);\n', '    event StakingEventCancelled(address indexed user, uint256 eventId);\n', '\n', '    //////////////\n', '\n', '    constructor(IPepemonFactory _pepemonFactoryAddress) public {\n', '        pepemonFactory = _pepemonFactoryAddress;\n', '    }\n', '\n', '    ////\n', '    // View\n', '    ////\n', '\n', '    function getStakingEventsLength() external view returns(uint256) {\n', '        return stakingEvents.length;\n', '    }\n', '\n', '    // Return all staking events\n', '    function getAllEvents() public view returns(StakingEvent[] memory) {\n', '        return stakingEvents;\n', '    }\n', '\n', '    // Returns the id list of all active events\n', '    function getActiveEvents() external view returns(uint256[] memory) {\n', '        StakingEvent[] memory _events = getAllEvents();\n', '\n', '        uint256 nbActive = 0;\n', '        for (uint256 i = 0; i < _events.length; i++) {\n', '            if (_events[i].blockEventClose >= block.number) {\n', '                nbActive++;\n', '            }\n', '        }\n', '\n', '        uint256[] memory _result = new uint256[](nbActive);\n', '        uint256 idx = 0;\n', '        for (uint256 i = 0; i < _events.length; i++) {\n', '            if (_events[i].blockEventClose >= block.number) {\n', '                _result[idx] = i;\n', '                idx++;\n', '            }\n', '        }\n', '\n', '        return _result;\n', '    }\n', '\n', '    // Returns the id list of all closed events\n', '    function getClosedEvents() external view returns(uint256[] memory) {\n', '        StakingEvent[] memory _events = getAllEvents();\n', '\n', '        uint256 nbCompleted = 0;\n', '        for (uint256 i = 0; i < _events.length; i++) {\n', '            if (_events[i].blockEventClose < block.number) {\n', '                nbCompleted++;\n', '            }\n', '        }\n', '\n', '        uint256[] memory _result = new uint256[](nbCompleted);\n', '        uint256 idx = 0;\n', '        for (uint256 i = 0; i < _events.length; i++) {\n', '            if (_events[i].blockEventClose < block.number) {\n', '                _result[idx] = i;\n', '                idx++;\n', '            }\n', '        }\n', '\n', '        return _result;\n', '    }\n', '\n', '    function getCardIdListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {\n', '        return stakingEvents[_eventId].cardIdList;\n', '    }\n', '\n', '    function getCardAmountListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {\n', '        return stakingEvents[_eventId].cardAmountList;\n', '    }\n', '\n', '    // Returns the % progress of the user towards completion of the event (100% = 1e5)\n', '    function getUserProgress(address _user, uint256 _eventId) external view returns(uint256) {\n', '        StakingEvent memory _event = stakingEvents[_eventId];\n', '        UserInfo memory _userInfo = userInfo[_user][_eventId];\n', '\n', '        if (_userInfo.blockEnd == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if (_userInfo.isCompleted || block.number >= _userInfo.blockEnd) {\n', '            return 1e5;\n', '        }\n', '\n', '        uint256 blocksLeft = _userInfo.blockEnd.sub(block.number);\n', '        // Amount of blocks the user has been staked for this event\n', '        uint256 blocksStaked = _event.blockStakeLength.sub(blocksLeft);\n', '\n', '        return blocksStaked.mul(1e5).div(_event.blockStakeLength);\n', '    }\n', '\n', '\n', '    //////////////\n', '\n', '    // Create a new staking event\n', '    function createStakingEvent(uint256[] memory _cardIdList, uint256 _cardAmountAny, uint256[] memory _cardAmountList, uint256 _cardRewardId,\n', '        uint256 _blockStakeLength, uint256 _blockEventClose, uint256[] memory _toBurnIdList, uint256[] memory _toBurnAmountList) public onlyOwner {\n', '\n', '        require(_cardIdList.length > 0, "Accepted card list is empty");\n', '        require(_cardAmountAny > 0 || _cardAmountList.length > 0, "Card amount required not specified");\n', '        require(_blockEventClose > block.number, "blockEventClose < current block");\n', '        require(_toBurnIdList.length == _toBurnAmountList.length, "ToBurn arrays have different length");\n', '        require(_cardAmountAny == 0 || _toBurnIdList.length == 0, "ToBurn not supported with anyEvent");\n', '\n', '        stakingEvents.push(StakingEvent({\n', '        cardIdList: _cardIdList,\n', '        cardAmountAny: _cardAmountAny,\n', '        cardAmountList: _cardAmountList,\n', '        cardRewardId: _cardRewardId,\n', '        blockStakeLength: _blockStakeLength,\n', '        blockEventClose: _blockEventClose,\n', '        toBurnIdList: _toBurnIdList,\n', '        toBurnAmountList: _toBurnAmountList\n', '        }));\n', '\n', '        emit StakingEventCreated(stakingEvents.length - 1);\n', '    }\n', '\n', '    // Close prematurely a staking event\n', '    function closeStakingEvent(uint256 _eventId) public onlyOwner {\n', '        require(stakingEvents[_eventId].blockEventClose > block.number, "Event already closed");\n', '        stakingEvents[_eventId].blockEventClose = block.number;\n', '    }\n', '\n', '    //////////////\n', '\n', '    // Stake cards into a staking event\n', '    function stakeAny(uint256 _eventId, uint256[] memory _cardIdList, uint256[] memory _cardAmountList) public {\n', '        require(_cardIdList.length == _cardAmountList.length, "Arrays have different length");\n', '\n', '        StakingEvent storage _event = stakingEvents[_eventId];\n', '        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n', '\n', '        require(block.number <= _event.blockEventClose, "Event is closed");\n', '        require(_userInfo.isCompleted == false, "Address already completed event");\n', '        require(_userInfo.blockEnd == 0, "Address already staked for this event");\n', '        require(_event.cardAmountAny > 0, "Not a stakeAny event");\n', '\n', '        for (uint256 i = 0; i < _cardIdList.length; i++) {\n', '            require(_isInArray(_cardIdList[i], _event.cardIdList), "Card not accepted");\n', '        }\n', '\n', '        uint256 total = 0;\n', '        for (uint256 i = 0; i < _cardAmountList.length; i++) {\n', '            total = total.add(_cardAmountList[i]);\n', '        }\n', '\n', '        require(total == _event.cardAmountAny, "Wrong card total");\n', '\n', '        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _cardIdList, _cardAmountList, "");\n', '\n', '        // Save list cards staked in storage\n', '        for (uint256 i = 0; i < _cardIdList.length; i++) {\n', '            uint256 cardId = _cardIdList[i];\n', '            uint256 amount = _cardAmountList[i];\n', '\n', '            cardsStaked[msg.sender][_eventId][cardId] = amount;\n', '        }\n', '\n', '        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\n', '\n', '        emit StakingEventEntered(msg.sender, _eventId);\n', '    }\n', '\n', '    // Function to use for staking with an event where cardId and cardAmount are fixed\n', '    function stake(uint256 _eventId) public {\n', '        StakingEvent storage _event = stakingEvents[_eventId];\n', '        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n', '\n', '        require(block.number <= _event.blockEventClose, "Event is closed");\n', '        require(_userInfo.isCompleted == false, "Address already completed event");\n', '        require(_userInfo.blockEnd == 0, "Address already staked for this event");\n', '\n', '        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _event.cardIdList, _event.cardAmountList, "");\n', '\n', '        // Save list cards staked in storage\n', '        for (uint256 i = 0; i < _event.cardIdList.length; i++) {\n', '            uint256 cardId = _event.cardIdList[i];\n', '            uint256 amount = _event.cardAmountList[i];\n', '\n', '            cardsStaked[msg.sender][_eventId][cardId] = amount;\n', '        }\n', '\n', '        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\n', '\n', '        emit StakingEventEntered(msg.sender, _eventId);\n', '    }\n', '\n', '    // Claim staked cards + reward\n', '    function claim(uint256 _eventId) public {\n', '        StakingEvent storage _event = stakingEvents[_eventId];\n', '        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n', '\n', '        require(block.number >= _userInfo.blockEnd, "BlockEnd not reached");\n', '\n', '        _userInfo.isCompleted = true;\n', '        pepemonFactory.mint(msg.sender, _event.cardRewardId, 1, "");\n', '        _withdrawCardsStaked(_eventId, true);\n', '\n', '        emit StakingEventCompleted(msg.sender, _eventId);\n', '    }\n', '\n', '    // Withdraw staked cards, but reset event progress\n', '    function cancel(uint256 _eventId) public {\n', '        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n', '\n', '        require(_userInfo.isCompleted == false, "Address already completed event");\n', '        require(_userInfo.blockEnd != 0, "Address is not staked for this event");\n', '\n', '        delete _userInfo.isCompleted;\n', '        delete _userInfo.blockEnd;\n', '\n', '        _withdrawCardsStaked(_eventId, false);\n', '\n', '        emit StakingEventCancelled(msg.sender, _eventId);\n', '    }\n', '\n', '    function _withdrawCardsStaked(uint256 _eventId, bool _burn) internal {\n', '        StakingEvent storage _event = stakingEvents[_eventId];\n', '\n', '        uint256[] memory _cardIdList = _event.cardIdList;\n', '        uint256[] memory _cardAmountList = new uint256[](_cardIdList.length);\n', '\n', '        uint256[] memory _toBurnIdList = _event.toBurnIdList;\n', '        uint256[] memory _toBurnAmountList = _event.toBurnAmountList;\n', '\n', '\n', '        // Burn cards which needs to be burn to complete the evend\n', '        if (_burn == true) {\n', '            for (uint256 i = 0; i < _toBurnIdList.length; i++) {\n', '                uint256 cardId = _toBurnIdList[i];\n', '                uint256 amount = _toBurnAmountList[i];\n', '\n', '                cardsStaked[msg.sender][_eventId][cardId] = cardsStaked[msg.sender][_eventId][cardId].sub(amount);\n', '                pepemonFactory.burn(address(this), cardId, amount);\n', '            }\n', '        }\n', '\n', '        // Get all cards staked by address, and set to 0 amount staked\n', '        for (uint256 i = 0; i < _cardIdList.length; i++) {\n', '            uint256 cardId = _cardIdList[i];\n', '            _cardAmountList[i] = cardsStaked[msg.sender][_eventId][cardId];\n', '            delete cardsStaked[msg.sender][_eventId][cardId];\n', '        }\n', '\n', '        pepemonFactory.safeBatchTransferFrom(address(this), msg.sender, _cardIdList, _cardAmountList, "");\n', '    }\n', '\n', '    // Utility function to check if a value is inside an array\n', '    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\n', '        uint256 length = _array.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            if (_array[i] == _value) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /////////\n', '    /////////\n', '    /////////\n', '\n', '    /**\n', '     * @notice Handle the receipt of a single ERC1155 token type\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\n', '     * This function MAY throw to revert and reject the transfer\n', '     * Return of other amount than the magic value MUST result in the transaction being reverted\n', '     * Note: The token contract address is always the message sender\n', '     * @param _operator  The address which called the `safeTransferFrom` function\n', '     * @param _from      The address which previously owned the token\n', '     * @param _id        The id of the token being transferred\n', '     * @param _amount    The amount of tokens being transferred\n', '     * @param _data      Additional data with no specified format\n', '     * @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '     */\n', '    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\n', '        return 0xf23a6e61;\n', '    }\n', '\n', '    /**\n', '     * @notice Handle the receipt of multiple ERC1155 token types\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\n', '     * This function MAY throw to revert and reject the transfer\n', '     * Return of other amount than the magic value WILL result in the transaction being reverted\n', '     * Note: The token contract address is always the message sender\n', '     * @param _operator  The address which called the `safeBatchTransferFrom` function\n', '     * @param _from      The address which previously owned the token\n', '     * @param _ids       An array containing ids of each token being transferred\n', '     * @param _amounts   An array containing amounts of each token being transferred\n', '     * @param _data      Additional data with no specified format\n', '     * @return           `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '     */\n', '    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\n', '        return 0xbc197c81;\n', '    }\n', '\n', '    /**\n', '     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\n', '     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\n', '     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\n', '     *      This function MUST NOT consume more than 5,000 gas.\n', '     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n', "        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\n", '        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) ^ bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).\n', '    }\n', '}']