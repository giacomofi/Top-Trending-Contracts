['// File: contracts/intf/IDODO.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface IDODO {\n', '    function init(\n', '        address owner,\n', '        address supervisor,\n', '        address maintainer,\n', '        address baseToken,\n', '        address quoteToken,\n', '        address oracle,\n', '        uint256 lpFeeRate,\n', '        uint256 mtFeeRate,\n', '        uint256 k,\n', '        uint256 gasPriceLimit\n', '    ) external;\n', '\n', '    function transferOwnership(address newOwner) external;\n', '\n', '    function claimOwnership() external;\n', '\n', '    function sellBaseToken(\n', '        uint256 amount,\n', '        uint256 minReceiveQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function buyBaseToken(\n', '        uint256 amount,\n', '        uint256 maxPayQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\n', '\n', '    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\n', '\n', '    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n', '\n', '    function getLpBaseBalance(address lp) external view returns (uint256 lpBalance);\n', '\n', '    function getLpQuoteBalance(address lp) external view returns (uint256 lpBalance);\n', '\n', '    function depositBaseTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawBase(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllBase() external returns (uint256);\n', '\n', '    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawQuote(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllQuote() external returns (uint256);\n', '\n', '    function _BASE_CAPITAL_TOKEN_() external view returns (address);\n', '\n', '    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\n', '\n', '    function _BASE_TOKEN_() external returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external returns (address);\n', '}\n', '\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/token/DODOMineReader.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', 'interface IDODOMine {\n', '    function getUserLpBalance(address _lpToken, address _user) external view returns (uint256);\n', '}\n', '\n', '\n', 'contract DODOMineReader {\n', '    using SafeMath for uint256;\n', '\n', '    function getUserStakedBalance(\n', '        address _dodoMine,\n', '        address _dodo,\n', '        address _user\n', '    ) public view returns (uint256 baseBalance, uint256 quoteBalance) {\n', '        address baseLpToken = IDODO(_dodo)._BASE_CAPITAL_TOKEN_();\n', '        address quoteLpToken = IDODO(_dodo)._QUOTE_CAPITAL_TOKEN_();\n', '\n', '        uint256 baseLpBalance = IDODOMine(_dodoMine).getUserLpBalance(baseLpToken, _user);\n', '        uint256 quoteLpBalance = IDODOMine(_dodoMine).getUserLpBalance(quoteLpToken, _user);\n', '\n', '        uint256 baseLpTotalSupply = IERC20(baseLpToken).totalSupply();\n', '        uint256 quoteLpTotalSupply = IERC20(quoteLpToken).totalSupply();\n', '\n', '        (uint256 baseTarget, uint256 quoteTarget) = IDODO(_dodo).getExpectedTarget();\n', '        baseBalance = baseTarget.mul(baseLpBalance).div(baseLpTotalSupply);\n', '        quoteBalance = quoteTarget.mul(quoteLpBalance).div(quoteLpTotalSupply);\n', '\n', '        return (baseBalance, quoteBalance);\n', '    }\n', '\n', '    function getUserTotalBalance(\n', '        address _dodoMine,\n', '        address _dodo,\n', '        address _user\n', '    ) external view returns (uint256 baseBalance, uint256 quoteBalance) {\n', '        (uint256 stakedBase, uint256 stakedQuote) = getUserStakedBalance(_dodoMine, _dodo, _user);\n', '        baseBalance = IDODO(_dodo).getLpBaseBalance(_user).add(stakedBase);\n', '        quoteBalance = IDODO(_dodo).getLpQuoteBalance(_user).add(stakedQuote);\n', '        return (baseBalance, quoteBalance);\n', '    }\n', '}']