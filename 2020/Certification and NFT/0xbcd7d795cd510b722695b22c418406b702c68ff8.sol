['pragma solidity =0.6.12;\n', '\n', '\n', 'interface ITitanFeeMaker {\n', '    function depositLp(address _lpToken,uint256 _amount) external;\n', '    function withdrawLp(address _lpToken,uint256 _amount) external;\n', '    \n', '    function withdrawETH(address to) external;\n', '    function withdrawUSDT(address to) external;\n', '    function withdrawTitan(uint256 amount) external;\n', '    \n', '    function chargeTitan(uint256 amount) external;\n', '    function adjustTitanBonus(uint256 _BONUS_MULTIPLIER) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ITitanSwapV1ERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'interface ITitanSwapV1Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface ITitanSwapV1Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract TitanFeeMaker is Ownable,ITitanFeeMaker{\n', '    using SafeMath for uint256;\n', '\n', '    ITitanSwapV1Factory public factory;\n', '    address public weth;\n', '    address public titan;\n', '    address public usdt;\n', '    address public routerAddress;\n', '    \n', '    // Bonus muliplier for early sushi makers.\n', '    uint256 public BONUS_MULTIPLIER = 100;\n', '    // Bonus muliplier for early sushi makers.\n', '    uint256 public constant BONUS_BASE_RATE = 100;\n', '    // record need reward titan amount\n', '    uint256 public titanRewardAmount = 0;\n', '    // recod already transfer titan reward\n', '    uint256 public titanRewardAmountAlready = 0;\n', '    \n', '\n', '    // Info of each lp pool\n', '    struct PoolInfo {\n', '        address lpToken;\n', '        uint256 lastRewardBlock;\n', '        uint256 accTitanPerShare;\n', '    }\n', '\n', '    // Info of each user;\n', '    struct UserInfo {\n', '        uint256 amount; // How many lp tokens the user has provided;\n', '        uint256 rewardDebt; // Reward debt;\n', '    }\n', '\n', '    // info of lp pool\n', '    mapping (address => PoolInfo) public poolInfo;\n', '    mapping (address => mapping(address => UserInfo)) public userInfo;\n', '    \n', '    // add this function to receive eth\n', '    receive() external payable {\n', '        assert(msg.sender == weth); // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '    constructor(ITitanSwapV1Factory _factory,address _routerAddress,address _titan,address _weth,address _usdt) public {\n', '        factory = _factory;\n', '        titan = _titan;\n', '        weth = _weth;\n', '        usdt = _usdt;\n', '        routerAddress = _routerAddress;\n', '    }\n', '    \n', '    event createPool(address indexed lpToken,uint256 blockNumber);\n', '   \n', '\n', '    // Update reward variables of the given pool;\n', '    function updatePool(address _lpToken,uint256 _addLpAmount) private {\n', '        PoolInfo storage pool =  poolInfo[_lpToken];\n', '        // create pool\n', '        if(pool.lastRewardBlock == 0) {\n', '            poolInfo[_lpToken] = PoolInfo({\n', '            lpToken: _lpToken,\n', '            lastRewardBlock: block.number,\n', '            accTitanPerShare: 0\n', '            });\n', '            pool = poolInfo[_lpToken];\n', '            emit createPool(_lpToken,block.number);\n', '        }\n', '        \n', '        if(block.number < pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        \n', '        pool.lastRewardBlock = block.number;\n', '        uint256 feeLpBalance = ITitanSwapV1Pair(pool.lpToken).balanceOf(address(this));\n', '        if(feeLpBalance == 0) {\n', '           return;\n', '        }\n', '        uint256 titanFeeReward = convertLpToTitan(ITitanSwapV1Pair(pool.lpToken),feeLpBalance);\n', '        if(titanFeeReward == 0) {\n', '            return;\n', '        }\n', '        // maybe reward more\n', '        titanFeeReward = titanFeeReward.mul(BONUS_MULTIPLIER).div(BONUS_BASE_RATE);\n', '        titanRewardAmount = titanRewardAmount.add(titanFeeReward);\n', '        uint256 lpSupply = ITitanSwapV1Pair(pool.lpToken).totalSupply().sub(_addLpAmount);\n', '        pool.accTitanPerShare = pool.accTitanPerShare.add(titanFeeReward.mul(1e18).div(lpSupply));\n', '    }\n', '\n', '    // call when add Liquidity，\n', '    function depositLp(address _lpToken,uint256 _amount) external override {\n', '        if(_amount > 0) {\n', "            require(msg.sender == routerAddress,'TitanSwapV1FeeMaker: must call by router');\n", '        }\n', '        updatePool(_lpToken,_amount);\n', '        PoolInfo storage pool = poolInfo[_lpToken];\n', '        UserInfo storage user = userInfo[_lpToken][tx.origin];\n', '        if(user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accTitanPerShare).div(1e18).sub(user.rewardDebt);\n', '            if(pending > 0) {\n', "                require(IERC20(titan).balanceOf(address(this)) >= pending,'TitanSwapV1FeeMaker: titan not enough');\n", '                TransferHelper.safeTransfer(titan,tx.origin,pending);\n', '                titanRewardAmountAlready = titanRewardAmountAlready.add(pending);\n', '            }\n', '        }\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accTitanPerShare).div(1e18);\n', '    }\n', '    // call when remove Liquidity\n', '    function withdrawLp(address _lpToken,uint256 _amount) external override {\n', '        if(_amount > 0) {\n', "            require(msg.sender == routerAddress,'TitanSwapV1FeeMaker: must call by router');\n", '        }\n', '        updatePool(_lpToken,0);\n', '        PoolInfo storage pool = poolInfo[_lpToken];\n', '        UserInfo storage user = userInfo[_lpToken][tx.origin];\n', "        require(user.amount >= _amount,'remove lp not good');\n", '        uint256 pending = user.amount.mul(pool.accTitanPerShare).div(1e18).sub(user.rewardDebt);\n', '        if(pending > 0) {\n', "             require(IERC20(titan).balanceOf(address(this)) >= pending,'TitanSwapV1FeeMaker: titan not enough');\n", '            TransferHelper.safeTransfer(titan,tx.origin,pending);\n', '            titanRewardAmountAlready = titanRewardAmountAlready.add(pending);\n', '        }\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accTitanPerShare).div(1e18);\n', '    }\n', '\n', '\n', '    \n', '    function convertLpToTitan(ITitanSwapV1Pair _pair,uint256 _feeLpBalance) private returns(uint256){\n', '       \n', '        uint256 beforeTitan = IERC20(titan).balanceOf(address(this));\n', '        uint256 beforeWeth = IERC20(weth).balanceOf(address(this));\n', '        uint256 beforeUsdt = IERC20(usdt).balanceOf(address(this));\n', '        \n', '        _pair.transfer(address(_pair),_feeLpBalance);\n', '        _pair.burn(address(this));\n', '       \n', '        address token0 = _pair.token0();\n', '        address token1 = _pair.token1();\n', '        \n', '        if(token0 == weth || token1 == weth) {\n', '           // convert token to weth\n', '           _toWETH(token0);\n', '           _toWETH(token1);\n', '           uint256 wethAmount = IERC20(weth).balanceOf(address(this)).sub(beforeWeth);\n', '           if(token0 == titan || token1 == titan) {\n', '                ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(titan,weth));\n', '                (uint reserve0, uint reserve1,) = pair.getReserves();\n', '                address _token0 = pair.token0();\n', '                (uint reserveIn, uint reserveOut) = _token0 == titan ? (reserve0, reserve1) : (reserve1, reserve0);\n', '                uint titanAmount = IERC20(titan).balanceOf(address(this)).sub(beforeTitan);\n', '                uint256 titanWethAmount = reserveOut.mul(titanAmount).div(reserveIn);\n', '                wethAmount = wethAmount.add(titanWethAmount);\n', '           }\n', '           // convert to titan\n', '           return _wethToTitan(wethAmount);\n', '        }\n', '        \n', '        if(token0 == usdt || token1 == usdt) {\n', '            // convert token to usdt\n', '            _toUSDT(token0);\n', '            _toUSDT(token1);\n', '           uint256 usdtAmount = IERC20(usdt).balanceOf(address(this)).sub(beforeUsdt);\n', '           if(token0 == titan || token1 == titan) {\n', '                ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(titan,usdt));\n', '                (uint reserve0, uint reserve1,) = pair.getReserves();\n', '                address _token0 = pair.token0();\n', '                (uint reserveIn, uint reserveOut) = _token0 == titan ? (reserve0, reserve1) : (reserve1, reserve0);\n', '                uint titanAmount = IERC20(titan).balanceOf(address(this)).sub(beforeTitan);\n', '                uint256 titanUsdtAmount = reserveOut.mul(titanAmount).div(reserveIn);\n', '                usdtAmount = usdtAmount.add(titanUsdtAmount);\n', '           }\n', '            // convert to titan\n', '           return _usdtToTitan(usdtAmount);\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function _toUSDT(address token) private returns (uint256) {\n', '        if(token == usdt || token == titan) {\n', '            return 0;\n', '        }\n', '        ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(token,usdt));\n', '        if(address(pair) == address(0)) {\n', '           return 0;\n', '        }\n', '        (uint reserve0, uint reserve1,) = pair.getReserves();\n', '        address token0 = pair.token0();\n', '        (uint reserveIn, uint reserveOut) = token0 == token ? (reserve0, reserve1) : (reserve1, reserve0);\n', '        \n', '        return swapTokenForWethOrUsdt(token,token0,pair,reserveIn,reserveOut);\n', '    }\n', '\n', '    function _toWETH(address token) private returns (uint256) {\n', '        if(token == weth || token == titan) {\n', '            return 0;\n', '        }\n', '        ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(token,weth));\n', '        if(address(pair) == address(0)) {\n', '            return 0;\n', '        }\n', '        (uint reserve0, uint reserve1,) = pair.getReserves();\n', '        address token0 = pair.token0();\n', '        (uint reserveIn, uint reserveOut) = token0 == token ? (reserve0, reserve1) : (reserve1, reserve0);\n', '\n', '        return swapTokenForWethOrUsdt(token,token0,pair,reserveIn,reserveOut);\n', '    }\n', '    \n', '    function swapTokenForWethOrUsdt(address token,address token0,ITitanSwapV1Pair pair,uint reserveIn,uint reserveOut) private returns (uint256) {\n', '         // contract token balance\n', '        uint amountIn = IERC20(token).balanceOf(address(this));\n', '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        uint amountOut = numerator / denominator;\n', '        (uint amount0Out, uint amount1Out) = token0 == token ? (uint(0), amountOut) : (amountOut, uint(0));\n', '        TransferHelper.safeTransfer(token,address(pair),amountIn);\n', '        // swap token for eth\n', '        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n', '        return amountOut;\n', '    }\n', '\n', '    function _wethToTitan(uint256 amountIn) internal view returns (uint256) {\n', '        ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(titan,weth));\n', "        require(address(pair) != address(0),'TitanSwapV1FeeMaker: titan/eth not exist');\n", '        (uint reserve0, uint reserve1,) = pair.getReserves();\n', '        address token0 = pair.token0();\n', '        (uint reserveIn, uint reserveOut) = token0 == weth ? (reserve0, reserve1) : (reserve1, reserve0);\n', '        return reserveOut.mul(amountIn).div(reserveIn);\n', '    }\n', '    \n', '    function _usdtToTitan(uint256 amountIn) internal view returns (uint256) {\n', '        ITitanSwapV1Pair pair = ITitanSwapV1Pair(factory.getPair(titan,usdt));\n', "        require(address(pair) != address(0),'TitanSwapV1FeeMaker: titan/usdt not exist');\n", '        (uint reserve0, uint reserve1,) = pair.getReserves();\n', '        address token0 = pair.token0();\n', '        (uint reserveIn, uint reserveOut) = token0 == usdt ? (reserve0, reserve1) : (reserve1, reserve0);\n', '        return reserveOut.mul(amountIn).div(reserveIn);\n', '    }\n', '\n', '    function withdrawETH(address to) external override onlyOwner{\n', '        uint256 wethBalance = IERC20(weth).balanceOf(address(this));\n', "        // require(wethBalance > 0,'TitanSwapV1FeeMaker: weth amount == 0');\n", '        IWETH(weth).withdraw(wethBalance);\n', '        TransferHelper.safeTransferETH(to,wethBalance);\n', '        // TransferHelper.safeTransfer(weth,to,wethBalance);\n', '    }\n', '    \n', '     function withdrawUSDT(address to) external override onlyOwner{\n', '        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\n', "        require(usdtBalance > 0,'TitanSwapV1FeeMaker: usdt amount == 0');\n", '        TransferHelper.safeTransfer(usdt,to,usdtBalance);\n', '    }\n', '\n', '    function chargeTitan(uint256 _amount) external override {\n', '        TransferHelper.safeTransferFrom(titan,msg.sender,address(this),_amount);\n', '    }\n', '\n', '    function withdrawTitan(uint256 _amount) external override onlyOwner {\n', '        uint256 balance = IERC20(titan).balanceOf(address(this));\n', "        require(balance >= _amount,'balance not enough');\n", '        TransferHelper.safeTransfer(titan,msg.sender,_amount);\n', '    }\n', '    \n', '    function adjustTitanBonus(uint256 _BONUS_MULTIPLIER) external override onlyOwner {\n', "        require(_BONUS_MULTIPLIER >= 100,'number must >= 100');\n", '        BONUS_MULTIPLIER = _BONUS_MULTIPLIER;\n', '    }\n', '    \n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'library TitanSwapV1Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'TitanSwapV1Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'TitanSwapV1Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\n', '        pair = ITitanSwapV1Factory(factory).getPair(tokenA,tokenB);\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = ITitanSwapV1Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'TitanSwapV1Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'TitanSwapV1Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'TitanSwapV1Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'TitanSwapV1Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'TitanSwapV1Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}']