['// File: @aragon/os/contracts/lib/token/ERC20.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/disputable/IAgreement.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract IAgreement {\n', '\n', '    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\n', '    event ActionClosed(uint256 indexed actionId);\n', '    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\n', '    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\n', '    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\n', '    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\n', '    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\n', '    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\n', '\n', '    enum ChallengeState {\n', '        Waiting,\n', '        Settled,\n', '        Disputed,\n', '        Rejected,\n', '        Accepted,\n', '        Voided\n', '    }\n', '\n', '    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\n', '\n', '    function closeAction(uint256 _actionId) external;\n', '\n', '    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\n', '\n', '    function settleAction(uint256 _actionId) external;\n', '\n', '    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/standards/ERC165.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC165 {\n', '    // Includes supportsInterface method:\n', '    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\n', '\n', '    /**\n', '    * @dev Query if a contract implements a certain interface\n', '    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n', '    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n', '    */\n', '    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n', '        return _interfaceId == ERC165_INTERFACE_ID;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/disputable/IDisputable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract IDisputable is ERC165 {\n', '    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\n', '    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\n', '    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\n', '\n', '    event AgreementSet(IAgreement indexed agreement);\n', '\n', '    function setAgreement(IAgreement _agreement) external;\n', '\n', '    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\n', '\n', '    function onDisputableActionAllowed(uint256 _disputableActionId) external;\n', '\n', '    function onDisputableActionRejected(uint256 _disputableActionId) external;\n', '\n', '    function onDisputableActionVoided(uint256 _disputableActionId) external;\n', '\n', '    function getAgreement() external view returns (IAgreement);\n', '\n', '    function canChallenge(uint256 _disputableActionId) external view returns (bool);\n', '\n', '    function canClose(uint256 _disputableActionId) external view returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/IACL.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IACL {\n', '    function initialize(address permissionsCreator) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IVaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IVaultRecoverable {\n', '    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n', '\n', '    function transferToVault(address token) external;\n', '\n', '    function allowRecoverability(address token) external view returns (bool);\n', '    function getRecoveryVault() external view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/IKernel.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'interface IKernelEvents {\n', '    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n', '}\n', '\n', '\n', "// This should be an interface, but interfaces can't inherit yet :(\n", 'contract IKernel is IKernelEvents, IVaultRecoverable {\n', '    function acl() public view returns (IACL);\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '\n', '    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n', '    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/IAragonApp.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract IAragonApp {\n', '    // Includes appId and kernel methods:\n', '    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\n', '\n', '    function kernel() public view returns (IKernel);\n', '    function appId() public view returns (bytes32);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/UnstructuredStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library UnstructuredStorage {\n', '    function getStorageBool(bytes32 position) internal view returns (bool data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageAddress(bytes32 position) internal view returns (address data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function setStorageBool(bytes32 position, bool data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageAddress(bytes32 position, address data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageUint256(bytes32 position, uint256 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract AppStorage is IAragonApp {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_POSITION = keccak256("aragonOS.appStorage.kernel");\n', '    bytes32 internal constant APP_ID_POSITION = keccak256("aragonOS.appStorage.appId");\n', '    */\n', '    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n', '    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n', '\n', '    function kernel() public view returns (IKernel) {\n', '        return IKernel(KERNEL_POSITION.getStorageAddress());\n', '    }\n', '\n', '    function appId() public view returns (bytes32) {\n', '        return APP_ID_POSITION.getStorageBytes32();\n', '    }\n', '\n', '    function setKernel(IKernel _kernel) internal {\n', '        KERNEL_POSITION.setStorageAddress(address(_kernel));\n', '    }\n', '\n', '    function setAppId(bytes32 _appId) internal {\n', '        APP_ID_POSITION.setStorageBytes32(_appId);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ACLSyntaxSugar {\n', '    function arr() internal pure returns (uint256[]) {\n', '        return new uint256[](0);\n', '    }\n', '\n', '    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c, _d);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n', '    }\n', '\n', '    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(uint256 _a) internal pure returns (uint256[] r) {\n', '        r = new uint256[](1);\n', '        r[0] = _a;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        r = new uint256[](2);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        r = new uint256[](3);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        r = new uint256[](4);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        r = new uint256[](5);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '        r[4] = _e;\n', '    }\n', '}\n', '\n', '\n', 'contract ACLHelpers {\n', '    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 30));\n', '    }\n', '\n', '    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 31));\n', '    }\n', '\n', '    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n', '        a = uint32(_x);\n', '        b = uint32(_x >> (8 * 4));\n', '        c = uint32(_x >> (8 * 8));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Uint256Helpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library Uint256Helpers {\n', '    uint256 private constant MAX_UINT64 = uint64(-1);\n', '\n', '    string private constant ERROR_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";\n', '\n', '    function toUint64(uint256 a) internal pure returns (uint64) {\n', '        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n', '        return uint64(a);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/TimeHelpers.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract TimeHelpers {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /**\n', '    * @dev Returns the current block number.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current block number, converted to uint64.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber64() internal view returns (uint64) {\n', '        return getBlockNumber().toUint64();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp() internal view returns (uint256) {\n', '        return block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp, converted to uint64.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp64() internal view returns (uint64) {\n', '        return getTimestamp().toUint64();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Initializable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract Initializable is TimeHelpers {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.initializable.initializationBlock")\n', '    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n', '\n', '    string private constant ERROR_ALREADY_INITIALIZED = "INIT_ALREADY_INITIALIZED";\n', '    string private constant ERROR_NOT_INITIALIZED = "INIT_NOT_INITIALIZED";\n', '\n', '    modifier onlyInit {\n', '        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    modifier isInitialized {\n', '        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return Block number in which the contract was initialized\n', '    */\n', '    function getInitializationBlock() public view returns (uint256) {\n', '        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n', '    }\n', '\n', '    /**\n', '    * @return Whether the contract has been initialized by the time of the current block\n', '    */\n', '    function hasInitialized() public view returns (bool) {\n', '        uint256 initializationBlock = getInitializationBlock();\n', '        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization has finished.\n', '    */\n', '    function initialized() internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization to enable the contract\n', '    *      at a future block number rather than immediately.\n', '    */\n', '    function initializedAt(uint256 _blockNumber) internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Petrifiable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Petrifiable is Initializable {\n', '    // Use block UINT256_MAX (which should be never) as the initializable date\n', '    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n', '\n', '    function isPetrified() public view returns (bool) {\n', '        return getInitializationBlock() == PETRIFIED_BLOCK;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract to prevent being initialized.\n', "    *      Useful for freezing base contracts when they're used behind proxies.\n", '    */\n', '    function petrify() internal onlyInit {\n', '        initializedAt(PETRIFIED_BLOCK);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Autopetrified.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Autopetrified is Petrifiable {\n', '    constructor() public {\n', '        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n', '        // This renders them uninitializable (and unusable without a proxy).\n', '        petrify();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ConversionHelpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library ConversionHelpers {\n', '    string private constant ERROR_IMPROPER_LENGTH = "CONVERSION_IMPROPER_LENGTH";\n', '\n', '    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n', '        // Force cast the uint256[] into a bytes array, by overwriting its length\n', "        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 byteLength = _input.length * 32;\n', '        assembly {\n', '            output := _input\n', '            mstore(output, byteLength)\n', '        }\n', '    }\n', '\n', '    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n', '        // Force cast the bytes array into a uint256[], by overwriting its length\n', "        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 intsLength = _input.length / 32;\n', '        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n', '\n', '        assembly {\n', '            output := _input\n', '            mstore(output, intsLength)\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ReentrancyGuard.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract ReentrancyGuard {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256("aragonOS.reentrancyGuard.mutex");\n', '    */\n', '    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n', '\n', '    string private constant ERROR_REENTRANT = "REENTRANCY_REENTRANT_CALL";\n', '\n', '    modifier nonReentrant() {\n', '        // Ensure mutex is unlocked\n', '        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n', '\n', '        // Lock mutex before function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n', '\n', '        // Perform function call\n', '        _;\n', '\n', '        // Unlock mutex after function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/EtherTokenConstant.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n', '// contracts where both tokens and ETH are accepted\n', 'contract EtherTokenConstant {\n', '    address internal constant ETH = address(0);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IsContract.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract IsContract {\n', '    /*\n', '    * NOTE: this should NEVER be used for authentication\n', '    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n', '    *\n', '    * This is only intended to be used as a sanity check that an address is actually a contract,\n', '    * RATHER THAN an address not being a contract.\n', '    */\n', '    function isContract(address _target) internal view returns (bool) {\n', '        if (_target == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := extcodesize(_target) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/SafeERC20.sol\n', '\n', '// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n', '// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n', '    // https://github.com/ethereum/solidity/issues/3544\n', '    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n', '\n', '    string private constant ERROR_TOKEN_BALANCE_REVERTED = "SAFE_ERC_20_BALANCE_REVERTED";\n', '    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = "SAFE_ERC_20_ALLOWANCE_REVERTED";\n', '\n', '    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n', '        private\n', '        returns (bool)\n', '    {\n', '        bool ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            let success := call(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                0,                    // no value\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                // Check number of bytes returned from last function call\n', '                switch returndatasize\n', '\n', '                // No bytes returned: assume success\n', '                case 0 {\n', '                    ret := 1\n', '                }\n', '\n', '                // 32 bytes returned: check if non-zero\n', '                case 0x20 {\n', '                    // Only return success if returned data was true\n', '                    // Already have output in ptr\n', '                    ret := eq(mload(ptr), 1)\n', '                }\n', '\n', "                // Not sure what was returned: don't mark as success\n", '                default { }\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    function staticInvoke(address _addr, bytes memory _calldata)\n', '        private\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        bool success;\n', '        uint256 ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            success := staticcall(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                ret := mload(ptr)\n', '            }\n', '        }\n', '        return (success, ret);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferCallData = abi.encodeWithSelector(\n', '            TRANSFER_SELECTOR,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferFromCallData = abi.encodeWithSelector(\n', '            _token.transferFrom.selector,\n', '            _from,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferFromCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n', '        bytes memory approveCallData = abi.encodeWithSelector(\n', '            _token.approve.selector,\n', '            _spender,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, approveCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.balanceOf().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n', '        bytes memory balanceOfCallData = abi.encodeWithSelector(\n', '            _token.balanceOf.selector,\n', '            _owner\n', '        );\n', '\n', '        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n', '        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n', '\n', '        return tokenBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.allowance().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n', '        bytes memory allowanceCallData = abi.encodeWithSelector(\n', '            _token.allowance.selector,\n', '            _owner,\n', '            _spender\n', '        );\n', '\n', '        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n', '        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n', '\n', '        return allowance;\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.totalSupply().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\n', '        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\n', '\n', '        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\n', '        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n', '\n', '        return totalSupply;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/VaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n', '    using SafeERC20 for ERC20;\n', '\n', '    string private constant ERROR_DISALLOWED = "RECOVER_DISALLOWED";\n', '    string private constant ERROR_VAULT_NOT_CONTRACT = "RECOVER_VAULT_NOT_CONTRACT";\n', '    string private constant ERROR_TOKEN_TRANSFER_FAILED = "RECOVER_TOKEN_TRANSFER_FAILED";\n', '\n', '    /**\n', '     * @notice Send funds to recovery Vault. This contract should never receive funds,\n', '     *         but in case it does, this function allows one to recover them.\n', '     * @param _token Token balance to be sent to recovery vault.\n', '     */\n', '    function transferToVault(address _token) external {\n', '        require(allowRecoverability(_token), ERROR_DISALLOWED);\n', '        address vault = getRecoveryVault();\n', '        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n', '\n', '        uint256 balance;\n', '        if (_token == ETH) {\n', '            balance = address(this).balance;\n', '            vault.transfer(balance);\n', '        } else {\n', '            ERC20 token = ERC20(_token);\n', '            balance = token.staticBalanceOf(this);\n', '            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n', '        }\n', '\n', '        emit RecoverToVault(vault, _token, balance);\n', '    }\n', '\n', '    /**\n', '    * @dev By default deriving from AragonApp makes it recoverable\n', '    * @param token Token address that would be recovered\n', '    * @return bool whether the app allows the recovery\n', '    */\n', '    function allowRecoverability(address token) public view returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // Cast non-implemented interface to be public so we can use it internally\n', '    function getRecoveryVault() public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IEVMScriptExecutor {\n', '    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n', '    function executorType() external pure returns (bytes32);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract EVMScriptRegistryConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash("evmreg");\n', '    */\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n', '}\n', '\n', '\n', 'interface IEVMScriptRegistry {\n', '    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n', '    function disableScriptExecutor(uint256 executorId) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/KernelConstants.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract KernelAppIds {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash("kernel");\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash("acl");\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash("vault");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n', '}\n', '\n', '\n', 'contract KernelNamespaceConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256("core");\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256("base");\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256("app");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n', '    string private constant ERROR_EXECUTOR_UNAVAILABLE = "EVMRUN_EXECUTOR_UNAVAILABLE";\n', '    string private constant ERROR_PROTECTED_STATE_MODIFIED = "EVMRUN_PROTECTED_STATE_MODIFIED";\n', '\n', '    /* This is manually crafted in assembly\n', '    string private constant ERROR_EXECUTOR_INVALID_RETURN = "EVMRUN_EXECUTOR_INVALID_RETURN";\n', '    */\n', '\n', '    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n', '\n', '    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n', '        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n', '    }\n', '\n', '    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n', '        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n', '        return IEVMScriptRegistry(registryAddr);\n', '    }\n', '\n', '    function runScript(bytes _script, bytes _input, address[] _blacklist)\n', '        internal\n', '        isInitialized\n', '        protectState\n', '        returns (bytes)\n', '    {\n', '        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n', '        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n', '\n', '        bytes4 sig = executor.execScript.selector;\n', '        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n', '\n', '        bytes memory output;\n', '        assembly {\n', '            let success := delegatecall(\n', '                gas,                // forward all gas\n', '                executor,           // address\n', '                add(data, 0x20),    // calldata start\n', '                mload(data),        // calldata length\n', "                0,                  // don't write output (we'll handle this ourselves)\n", "                0                   // don't write output\n", '            )\n', '\n', '            output := mload(0x40) // free mem ptr get\n', '\n', '            switch success\n', '            case 0 {\n', '                // If the call errored, forward its full error data\n', '                returndatacopy(output, 0, returndatasize)\n', '                revert(output, returndatasize)\n', '            }\n', '            default {\n', '                switch gt(returndatasize, 0x3f)\n', '                case 0 {\n', '                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n', '                    // revert with "EVMRUN_EXECUTOR_INVALID_RETURN"\n', '                    // See remix: doing a `revert("EVMRUN_EXECUTOR_INVALID_RETURN")` always results in\n', '                    // this memory layout\n', '                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n', '                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n', '                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n', '                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n', '\n', '                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n', '                }\n', '                default {\n', '                    // Copy result\n', '                    //\n', '                    // Needs to perform an ABI decode for the expected `bytes` return type of\n', '                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n', '                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n', '                    //    [ output length (32 bytes) ]\n', '                    //    [ output content (N bytes) ]\n', '                    //\n', '                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n', '                    let copysize := sub(returndatasize, 0x20)\n', '                    returndatacopy(output, 0x20, copysize)\n', '\n', '                    mstore(0x40, add(output, copysize)) // free mem ptr set\n', '                }\n', '            }\n', '        }\n', '\n', '        emit ScriptResult(address(executor), _script, _input, output);\n', '\n', '        return output;\n', '    }\n', '\n', '    modifier protectState {\n', '        address preKernel = address(kernel());\n', '        bytes32 preAppId = appId();\n', '        _; // exec\n', '        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n', '        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AragonApp.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n', '// that they can never be initialized.\n', '// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n', '// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n', '// are included so that they are automatically usable by subclassing contracts\n', 'contract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n', '    string private constant ERROR_AUTH_FAILED = "APP_AUTH_FAILED";\n', '\n', '    modifier auth(bytes32 _role) {\n', '        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    modifier authP(bytes32 _role, uint256[] _params) {\n', '        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether an action can be performed by a sender for a particular role on this app\n', '    * @param _sender Sender of the call\n', '    * @param _role Role on this app\n', '    * @param _params Permission params for the role\n', '    * @return Boolean indicating whether the sender has the permissions to perform the action.\n', "    *         Always returns false if the app hasn't been initialized yet.\n", '    */\n', '    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n', '        if (!hasInitialized()) {\n', '            return false;\n', '        }\n', '\n', '        IKernel linkedKernel = kernel();\n', '        if (address(linkedKernel) == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        return linkedKernel.hasPermission(\n', '            _sender,\n', '            address(this),\n', '            _role,\n', '            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Get the recovery vault for the app\n', '    * @return Recovery vault address for the app\n', '    */\n', '    function getRecoveryVault() public view returns (address) {\n', '        // Funds recovery via a vault is only available when used with a kernel\n', '        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n', '    }\n', '\n', '    /**\n', '    * @dev Query if a contract implements a certain interface\n', '    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n', '    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n', '    */\n', '    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n', '        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath64.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n', '// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath64\n', ' * @dev Math operations for uint64 with safety checks that revert on error\n', ' */\n', 'library SafeMath64 {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint256 c = uint256(_a) * uint256(_b);\n', '        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n', '\n', '        return uint64(c);\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint64 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint64 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint64 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DisputableAragonApp is IDisputable, AragonApp {\n', '    /* Validation errors */\n', '    string internal constant ERROR_SENDER_NOT_AGREEMENT = "DISPUTABLE_SENDER_NOT_AGREEMENT";\n', '    string internal constant ERROR_AGREEMENT_STATE_INVALID = "DISPUTABLE_AGREEMENT_STATE_INVAL";\n', '\n', '    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\n', '    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\n', '    // bytes32 public constant CHALLENGE_ROLE = keccak256("CHALLENGE_ROLE");\n', '    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\n', '\n', '    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256("SET_AGREEMENT_ROLE");\n', '    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\n', '\n', '    // bytes32 internal constant AGREEMENT_POSITION = keccak256("aragonOS.appStorage.agreement");\n', '    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\n', '\n', '    modifier onlyAgreement() {\n', '        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Challenge disputable action #`_disputableActionId`\n', '    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n', '    *      is included. Subclasses should implement the internal implementation of the hook.\n', '    * @param _disputableActionId Identifier of the action to be challenged\n', '    * @param _challengeId Identifier of the challenge in the context of the Agreement\n', '    * @param _challenger Address that submitted the challenge\n', '    */\n', '    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\n', '        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\n', '    }\n', '\n', '    /**\n', '    * @notice Allow disputable action #`_disputableActionId`\n', '    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n', '    *      is included. Subclasses should implement the internal implementation of the hook.\n', '    * @param _disputableActionId Identifier of the action to be allowed\n', '    */\n', '    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\n', '        _onDisputableActionAllowed(_disputableActionId);\n', '    }\n', '\n', '    /**\n', '    * @notice Reject disputable action #`_disputableActionId`\n', '    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n', '    *      is included. Subclasses should implement the internal implementation of the hook.\n', '    * @param _disputableActionId Identifier of the action to be rejected\n', '    */\n', '    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\n', '        _onDisputableActionRejected(_disputableActionId);\n', '    }\n', '\n', '    /**\n', '    * @notice Void disputable action #`_disputableActionId`\n', '    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n', '    *      is included. Subclasses should implement the internal implementation of the hook.\n', '    * @param _disputableActionId Identifier of the action to be voided\n', '    */\n', '    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\n', '        _onDisputableActionVoided(_disputableActionId);\n', '    }\n', '\n', '    /**\n', '    * @notice Set Agreement to `_agreement`\n', '    * @param _agreement Agreement instance to be set\n', '    */\n', '    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\n', '        IAgreement agreement = _getAgreement();\n', '        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\n', '\n', '        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\n', '        emit AgreementSet(_agreement);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the linked Agreement\n', '    * @return Agreement\n', '    */\n', '    function getAgreement() external view returns (IAgreement) {\n', '        return _getAgreement();\n', '    }\n', '\n', '    /**\n', '    * @dev Query if a contract implements a certain interface\n', '    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n', '    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n', '    */\n', '    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n', '        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal implementation of the `onDisputableActionChallenged` hook\n', '    * @param _disputableActionId Identifier of the action to be challenged\n', '    * @param _challengeId Identifier of the challenge in the context of the Agreement\n', '    * @param _challenger Address that submitted the challenge\n', '    */\n', '    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\n', '\n', '    /**\n', '    * @dev Internal implementation of the `onDisputableActionRejected` hook\n', '    * @param _disputableActionId Identifier of the action to be rejected\n', '    */\n', '    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\n', '\n', '    /**\n', '    * @dev Internal implementation of the `onDisputableActionAllowed` hook\n', '    * @param _disputableActionId Identifier of the action to be allowed\n', '    */\n', '    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\n', '\n', '    /**\n', '    * @dev Internal implementation of the `onDisputableActionVoided` hook\n', '    * @param _disputableActionId Identifier of the action to be voided\n', '    */\n', '    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\n', '\n', '    /**\n', '    * @dev Register a new disputable action in the Agreement\n', '    * @param _disputableActionId Identifier of the action in the context of the Disputable\n', '    * @param _context Link to human-readable context for the given action\n', '    * @param _submitter Address that submitted the action\n', '    * @return Unique identifier for the created action in the context of the Agreement\n', '    */\n', '    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\n', '        IAgreement agreement = _ensureAgreement();\n', '        return agreement.newAction(_disputableActionId, _context, _submitter);\n', '    }\n', '\n', '    /**\n', '    * @dev Close disputable action in the Agreement\n', '    * @param _actionId Identifier of the action in the context of the Agreement\n', '    */\n', '    function _closeDisputableAction(uint256 _actionId) internal {\n', '        IAgreement agreement = _ensureAgreement();\n', '        agreement.closeAction(_actionId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the linked Agreement\n', '    * @return Agreement\n', '    */\n', '    function _getAgreement() internal view returns (IAgreement) {\n', '        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the linked Agreement or revert if it has not been set\n', '    * @return Agreement\n', '    */\n', '    function _ensureAgreement() internal view returns (IAgreement) {\n', '        IAgreement agreement = _getAgreement();\n', '        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\n', '        return agreement;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/forwarding/IAbstractForwarder.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', '* @title Abstract forwarder interface\n', '* @dev This is the base interface for all forwarders.\n', '*      Forwarding allows separately installed applications (smart contracts implementing the forwarding interface) to execute multi-step actions via EVM scripts.\n', '*      You should only support the forwarding interface if your "action step" is asynchronous (e.g. requiring a delay period or a voting period).\n', '*      Note: you should **NOT** directly inherit from this interface; see one of the other, non-abstract interfaces available.\n', '*/\n', 'contract IAbstractForwarder {\n', '    enum ForwarderType {\n', '        NOT_IMPLEMENTED,\n', '        NO_CONTEXT,\n', '        WITH_CONTEXT\n', '    }\n', '\n', '    /**\n', '    * @dev Tell whether the proposed forwarding path (an EVM script) from the given sender is allowed.\n', '    *      However, this is not a strict guarantee of safety: the implemented `forward()` method is\n', '    *      still allowed to revert even if `canForward()` returns true for the same parameters.\n', "    * @return True if the sender's proposed path is allowed\n", '    */\n', '    function canForward(address sender, bytes evmScript) external view returns (bool);\n', '\n', '    /**\n', '    * @dev Tell the forwarder type\n', '    * @return Forwarder type\n', '    */\n', '    function forwarderType() external pure returns (ForwarderType);\n', '\n', '    /**\n', '    * @dev Report whether the implementing app is a forwarder\n', '    *      Required for backwards compatibility with aragonOS 4\n', '    * @return Always true\n', '    */\n', '    function isForwarder() external pure returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/forwarding/IForwarderWithContext.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', '* @title Forwarder interface requiring context information\n', '* @dev This forwarder interface allows for additional context to be attached to the action by the sender.\n', '*/\n', 'contract IForwarderWithContext is IAbstractForwarder {\n', '    /**\n', '    * @dev Forward an EVM script with an attached context\n', '    */\n', '    function forward(bytes evmScript, bytes context) external;\n', '\n', '    /**\n', '    * @dev Tell the forwarder type\n', '    * @return Always 2 (ForwarderType.WITH_CONTEXT)\n', '    */\n', '    function forwarderType() external pure returns (ForwarderType) {\n', '        return ForwarderType.WITH_CONTEXT;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/minime/contracts/ITokenController.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @dev The token controller contract must implement these functions\n', '\n', '\n', 'interface ITokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) external payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n', '}\n', '\n', '// File: @aragon/minime/contracts/MiniMeToken.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    address public controller;\n', '\n', '    function Controlled()  public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController  public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes _data\n', '    ) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        MiniMeTokenFactory _tokenFactory,\n', '        MiniMeToken _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    )  public\n', '    {\n', '        tokenFactory = _tokenFactory;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount)\n', '                return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '        require(parentSnapShotBlock < block.number);\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '        // Alerts the token controller of the transfer\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n', '        }\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        var previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '        // An event to make the transfer easy to find on the blockchain\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        _spender.receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '    ) public returns(MiniMeToken)\n', '    {\n', '        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n', '\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            snapshot,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), snapshot);\n', '        return cloneToken;\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController public {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        require(_value <= uint128(-1));\n', '\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0)\n', '            return false;\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () external payable {\n', '        require(isContract(controller));\n', '        // Adding the ` == true` makes the linter shut up so...\n', '        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController public {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        MiniMeToken _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken)\n', '    {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        newToken.changeController(msg.sender);\n', '        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '// File: contracts/DisputableVoting.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DisputableVoting is IForwarderWithContext, DisputableAragonApp {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '\n', '    // bytes32 public constant CREATE_VOTES_ROLE = keccak256("CREATE_VOTES_ROLE");\n', '    bytes32 public constant CREATE_VOTES_ROLE = 0xe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc;\n', '\n', '    // bytes32 public constant CHANGE_VOTE_TIME_ROLE = keccak256("CHANGE_VOTE_TIME_ROLE");\n', '    bytes32 public constant CHANGE_VOTE_TIME_ROLE = 0xbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f86;\n', '\n', '    // bytes32 public constant CHANGE_SUPPORT_ROLE = keccak256("CHANGE_SUPPORT_ROLE");\n', '    bytes32 public constant CHANGE_SUPPORT_ROLE = 0xf3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c90;\n', '\n', '    // bytes32 public constant CHANGE_QUORUM_ROLE = keccak256("CHANGE_QUORUM_ROLE");\n', '    bytes32 public constant CHANGE_QUORUM_ROLE = 0xa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a82;\n', '\n', '    // bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = keccak256("CHANGE_DELEGATED_VOTING_PERIOD_ROLE");\n', '    bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = 0x59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d;\n', '\n', '    // bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = keccak256("CHANGE_EXECUTION_DELAY_ROLE");\n', '    bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = 0x5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee7;\n', '\n', '    // bytes32 public constant CHANGE_QUIET_ENDING_ROLE = keccak256("CHANGE_QUIET_ENDING_ROLE");\n', '    bytes32 public constant CHANGE_QUIET_ENDING_ROLE = 0x4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c2;\n', '\n', '    uint256 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n', '    uint256 public constant MAX_VOTES_DELEGATION_SET_LENGTH = 70;\n', '\n', '    // Validation errors\n', '    string private constant ERROR_NO_VOTE = "VOTING_NO_VOTE";\n', '    string private constant ERROR_VOTE_TIME_ZERO = "VOTING_VOTE_TIME_ZERO";\n', '    string private constant ERROR_TOKEN_NOT_CONTRACT = "VOTING_TOKEN_NOT_CONTRACT";\n', '    string private constant ERROR_SETTING_DOES_NOT_EXIST = "VOTING_SETTING_DOES_NOT_EXIST";\n', '    string private constant ERROR_CHANGE_QUORUM_TOO_BIG = "VOTING_CHANGE_QUORUM_TOO_BIG";\n', '    string private constant ERROR_CHANGE_SUPPORT_TOO_SMALL = "VOTING_CHANGE_SUPPORT_TOO_SMALL";\n', '    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = "VOTING_CHANGE_SUPPORT_TOO_BIG";\n', '    string private constant ERROR_INVALID_DELEGATED_VOTING_PERIOD = "VOTING_INVALID_DLGT_VOTE_PERIOD";\n', '    string private constant ERROR_INVALID_QUIET_ENDING_PERIOD = "VOTING_INVALID_QUIET_END_PERIOD";\n', '    string private constant ERROR_INVALID_EXECUTION_SCRIPT = "VOTING_INVALID_EXECUTION_SCRIPT";\n', '\n', '    // Workflow errors\n', '    string private constant ERROR_CANNOT_FORWARD = "VOTING_CANNOT_FORWARD";\n', '    string private constant ERROR_NO_TOTAL_VOTING_POWER = "VOTING_NO_TOTAL_VOTING_POWER";\n', '    string private constant ERROR_CANNOT_VOTE = "VOTING_CANNOT_VOTE";\n', '    string private constant ERROR_NOT_REPRESENTATIVE = "VOTING_NOT_REPRESENTATIVE";\n', '    string private constant ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW = "VOTING_PAST_REP_VOTING_WINDOW";\n', '    string private constant ERROR_DELEGATES_EXCEEDS_MAX_LEN = "VOTING_DELEGATES_EXCEEDS_MAX_LEN";\n', '    string private constant ERROR_CANNOT_PAUSE_VOTE = "VOTING_CANNOT_PAUSE_VOTE";\n', '    string private constant ERROR_VOTE_NOT_PAUSED = "VOTING_VOTE_NOT_PAUSED";\n', '    string private constant ERROR_CANNOT_EXECUTE = "VOTING_CANNOT_EXECUTE";\n', '\n', '    enum VoterState { Absent, Yea, Nay }\n', '\n', '    enum VoteStatus {\n', '        Normal,                         // A vote in a "normal" state of operation (not one of the below)--note that this state is not related to the vote being open\n', '        Paused,                         // A vote that is paused due to it having an open challenge or dispute\n', '        Cancelled,                      // A vote that has been explicitly cancelled due to a challenge or dispute\n', '        Executed                        // A vote that has been executed\n', '    }\n', '\n', '    struct Setting {\n', '        // "Base" duration of each vote -- vote lifespans may be adjusted by pause and extension durations\n', '        uint64 voteTime;\n', '\n', '        // Required voter support % (yes power / voted power) for a vote to pass\n', '        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\n', '        uint64 supportRequiredPct;\n', '\n', '        // Required voter quorum % (yes power / total power) for a vote to pass\n', '        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\n', '        // Must be <= supportRequiredPct to avoid votes being impossible to pass\n', '        uint64 minAcceptQuorumPct;\n', '\n', '        // Duration from the start of a vote that representatives are allowed to vote on behalf of principals\n', '        // Must be <= voteTime; duration is bound as [)\n', '        uint64 delegatedVotingPeriod;\n', '\n', '        // Duration before the end of a vote to detect non-quiet endings\n', '        // Must be <= voteTime; duration is bound as [)\n', '        uint64 quietEndingPeriod;\n', '\n', '        // Duration to extend a vote in case of non-quiet ending\n', '        uint64 quietEndingExtension;\n', '\n', '        // Duration to wait before a passed vote can be executed\n', '        // Duration is bound as [)\n', '        uint64 executionDelay;\n', '    }\n', '\n', '    struct VoteCast {\n', '        VoterState state;\n', '        address caster;                                     // Caster of the vote (only stored if caster was not the representative)\n', '    }\n', '\n', '    struct Vote {\n', '        uint256 yea;                                        // Voting power for\n', '        uint256 nay;                                        // Voting power against\n', '        uint256 totalPower;                                 // Total voting power (based on the snapshot block)\n', '\n', '        uint64 startDate;                                   // Datetime when the vote was created\n', '        uint64 snapshotBlock;                               // Block number used to check voting power on attached token\n', '        VoteStatus status;                                  // Status of the vote\n', '\n', '        uint256 settingId;                                  // Identification number of the setting applicable to the vote\n', '        uint256 actionId;                                   // Identification number of the associated disputable action on the attached Agreement\n', '\n', '        uint64 pausedAt;                                    // Datetime when the vote was paused\n', '        uint64 pauseDuration;                               // Duration of the pause (only updated once resumed)\n', '        uint64 quietEndingExtensionDuration;                // Duration a vote was extended due to non-quiet endings\n', "        VoterState quietEndingSnapshotSupport;              // Snapshot of the vote's support at the beginning of the first quiet ending period\n", '\n', '        bytes32 executionScriptHash;                        // Hash of the EVM script attached to the vote\n', '        mapping (address => VoteCast) castVotes;            // Mapping of voter address => more information about their cast vote\n', '    }\n', '\n', "    MiniMeToken public token;                               // Token for determining voting power; we assume it's not malicious\n", '\n', '    uint256 public settingsLength;                          // Number of settings created\n', '    mapping (uint256 => Setting) internal settings;         // List of settings indexed by ID (starting at 0)\n', '\n', '    uint256 public votesLength;                             // Number of votes created\n', '    mapping (uint256 => Vote) internal votes;               // List of votes indexed by ID (starting at 0)\n', '    mapping (address => address) internal representatives;  // Mapping of voter => allowed representative\n', '\n', '    event NewSetting(uint256 settingId);\n', '    event ChangeVoteTime(uint64 voteTime);\n', '    event ChangeSupportRequired(uint64 supportRequiredPct);\n', '    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\n', '    event ChangeDelegatedVotingPeriod(uint64 delegatedVotingPeriod);\n', '    event ChangeQuietEndingConfiguration(uint64 quietEndingPeriod, uint64 quietEndingExtension);\n', '    event ChangeExecutionDelay(uint64 executionDelay);\n', '\n', '    event StartVote(uint256 indexed voteId, address indexed creator, bytes context, bytes executionScript);\n', '    event PauseVote(uint256 indexed voteId, uint256 indexed challengeId);\n', '    event ResumeVote(uint256 indexed voteId);\n', '    event CancelVote(uint256 indexed voteId);\n', '    event ExecuteVote(uint256 indexed voteId);\n', '    event QuietEndingExtendVote(uint256 indexed voteId, bool passing);\n', '\n', '    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, address caster);\n', '    event ChangeRepresentative(address indexed voter, address indexed representative);\n', '    event ProxyVoteFailure(uint256 indexed voteId, address indexed voter, address indexed representative);\n', '\n', '    /**\n', '    * @notice Initialize Disputable Voting with `_token.symbol(): string` for governance, a voting duration of `@transformTime(_voteTime)`, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, a delegated voting period of `@transformTime(_delegatedVotingPeriod), and a execution delay of `@transformTime(_executionDelay)`\n', '    * @param _token MiniMeToken Address that will be used as governance token\n', '    * @param _voteTime Base duration a vote will be open for voting\n', '    * @param _supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\n', '    * @param _minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\n', '    * @param _delegatedVotingPeriod Duration from the start of a vote that representatives are allowed to vote on behalf of principals\n', '    * @param _quietEndingPeriod Duration to detect non-quiet endings\n', '    * @param _quietEndingExtension Duration to extend a vote in case of non-quiet ending\n', '    * @param _executionDelay Duration to wait before a passed vote can be executed\n', '    */\n', '    function initialize(\n', '        MiniMeToken _token,\n', '        uint64 _voteTime,\n', '        uint64 _supportRequiredPct,\n', '        uint64 _minAcceptQuorumPct,\n', '        uint64 _delegatedVotingPeriod,\n', '        uint64 _quietEndingPeriod,\n', '        uint64 _quietEndingExtension,\n', '        uint64 _executionDelay\n', '    )\n', '        external\n', '    {\n', '        initialized();\n', '\n', '        require(isContract(_token), ERROR_TOKEN_NOT_CONTRACT);\n', '        token = _token;\n', '\n', '        (Setting storage setting, ) = _newSetting();\n', '        _changeVoteTime(setting, _voteTime);\n', '        _changeSupportRequiredPct(setting, _supportRequiredPct);\n', '        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\n', '        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\n', '        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\n', '        _changeExecutionDelay(setting, _executionDelay);\n', '    }\n', '\n', '    /**\n', '    * @notice Change vote time to `@transformTime(_voteTime)`\n', '    * @param _voteTime New vote time\n', '    */\n', '    function changeVoteTime(uint64 _voteTime) external authP(CHANGE_VOTE_TIME_ROLE, arr(uint256(_voteTime))) {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeVoteTime(setting, _voteTime);\n', '    }\n', '\n', '    /**\n', '    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\n', '    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\n', '    */\n', '    function changeSupportRequiredPct(uint64 _supportRequiredPct) external authP(CHANGE_SUPPORT_ROLE, arr(uint256(_supportRequiredPct))) {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeSupportRequiredPct(setting, _supportRequiredPct);\n', '    }\n', '\n', '    /**\n', '    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\n', '    * @param _minAcceptQuorumPct New minimum acceptance quorum; expressed as a percentage of 10^18\n', '    */\n', '    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) external authP(CHANGE_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct))) {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\n', '    }\n', '\n', '    /**\n', '    * @notice Change delegated voting period to `@transformTime(_delegatedVotingPeriod)`\n', '    * @param _delegatedVotingPeriod New delegated voting period\n', '    */\n', '    function changeDelegatedVotingPeriod(uint64 _delegatedVotingPeriod) external authP(CHANGE_DELEGATED_VOTING_PERIOD_ROLE, arr(uint256(_delegatedVotingPeriod))) {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\n', '    }\n', '\n', '    /**\n', '    * @notice Change quiet ending period to `@transformTime(_quietEndingPeriod)` with extensions of `@transformTime(_quietEndingExtension)`\n', '    * @param _quietEndingPeriod New quiet ending period\n', '    * @param _quietEndingExtension New quiet ending extension\n', '    */\n', '    function changeQuietEndingConfiguration(uint64 _quietEndingPeriod, uint64 _quietEndingExtension)\n', '        external\n', '        authP(CHANGE_QUIET_ENDING_ROLE, arr(uint256(_quietEndingPeriod), uint256(_quietEndingExtension)))\n', '    {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\n', '    }\n', '\n', '    /**\n', '    * @notice Change execution delay to `@transformTime(_executionDelay)`\n', '    * @param _executionDelay New execution delay\n', '    */\n', '    function changeExecutionDelay(uint64 _executionDelay) external authP(CHANGE_EXECUTION_DELAY_ROLE, arr(uint256(_executionDelay))) {\n', '        Setting storage setting = _newCopiedSettings();\n', '        _changeExecutionDelay(setting, _executionDelay);\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new vote about "`_context`"\n', '    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\n', "    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\n", '    * @return Identification number of the newly created vote\n', '    */\n', '    function newVote(bytes _executionScript, bytes _context) external auth(CREATE_VOTES_ROLE) returns (uint256) {\n', '        return _newVote(_executionScript, _context);\n', '    }\n', '\n', '    /**\n', "    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\n", '    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote\n', '    * @param _supports Whether voter supports the vote\n', '    */\n', '    function vote(uint256 _voteId, bool _supports) external {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        require(_canVote(vote_, msg.sender), ERROR_CANNOT_VOTE);\n', '\n', '        _castVote(vote_, _voteId, _supports, msg.sender, address(0));\n', '    }\n', '\n', '    /**\n', "    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId` on behalf of delegated voters\n", '    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote\n', '    * @param _supports Whether the representative supports the vote\n', '    * @param _voters Addresses of the delegated voters to vote on behalf of\n', '    */\n', '    function voteOnBehalfOf(uint256 _voteId, bool _supports, address[] _voters) external {\n', '        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\n', '\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        // Note that the period for representatives to vote can never go into a quiet ending\n', "        // extension, and so we don't need to check other timing-based pre-conditions\n", '        require(_canRepresentativesVote(vote_), ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW);\n', '\n', '        for (uint256 i = 0; i < _voters.length; i++) {\n', '            address voter = _voters[i];\n', '            require(_hasVotingPower(vote_, voter), ERROR_CANNOT_VOTE);\n', '            require(_isRepresentativeOf(voter, msg.sender), ERROR_NOT_REPRESENTATIVE);\n', '\n', '            if (!_hasCastVote(vote_, voter)) {\n', '                _castVote(vote_, _voteId, _supports, voter, msg.sender);\n', '            } else {\n', '                emit ProxyVoteFailure(_voteId, voter, msg.sender);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Execute vote #`_voteId`\n', '    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote\n', '    * @param _executionScript Action (encoded as an EVM script) to be executed, must match the one used when the vote was created\n', '    */\n', '    function executeVote(uint256 _voteId, bytes _executionScript) external {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        require(_canExecute(vote_), ERROR_CANNOT_EXECUTE);\n', '        require(vote_.executionScriptHash == keccak256(_executionScript), ERROR_INVALID_EXECUTION_SCRIPT);\n', '\n', '        vote_.status = VoteStatus.Executed;\n', '        _closeDisputableAction(vote_.actionId);\n', '\n', '        // Add attached Agreement to blacklist to disallow the stored EVMScript from directly calling\n', "        // the Agreement from this app's context (e.g. maliciously closing a different action)\n", '        address[] memory blacklist = new address[](1);\n', '        blacklist[0] = address(_getAgreement());\n', '        runScript(_executionScript, new bytes(0), blacklist);\n', '        emit ExecuteVote(_voteId);\n', '    }\n', '\n', '    /**\n', "    * @notice `_representative == 0x0 ? 'Set your voting representative to ' + _representative : 'Remove your representative'`\n", '    * @param _representative Address of the representative who is allowed to vote on behalf of the sender. Use the zero address for none.\n', '    */\n', '    function setRepresentative(address _representative) external isInitialized {\n', '        representatives[msg.sender] = _representative;\n', '        emit ChangeRepresentative(msg.sender, _representative);\n', '    }\n', '\n', '    // Forwarding external fns\n', '\n', '    /**\n', '    * @notice Create a vote to execute the desired action\n', '    * @dev IForwarderWithContext interface conformance.\n', '    *      This app (as a DisputableAragonApp) is required to be the initial step in the forwarding chain.\n', '    * @param _evmScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\n', "    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\n", '    */\n', '    function forward(bytes _evmScript, bytes _context) external {\n', '        require(_canForward(msg.sender, _evmScript), ERROR_CANNOT_FORWARD);\n', '        _newVote(_evmScript, _context);\n', '    }\n', '\n', '    // Forwarding getter fns\n', '\n', '    /**\n', '    * @dev Tell if an address can forward actions (by creating a vote)\n', '    *      IForwarderWithContext interface conformance\n', '    * @param _sender Address intending to forward an action\n', '    * @param _evmScript EVM script being forwarded\n', '    * @return True if the address is allowed create a vote containing the action\n', '    */\n', '    function canForward(address _sender, bytes _evmScript) external view returns (bool) {\n', '        return _canForward(_sender, _evmScript);\n', '    }\n', '\n', '    // Disputable getter fns\n', '\n', '    /**\n', '    * @dev Tell if a vote can be challenged\n', '    *      Called by the attached Agreement when a challenge is requested for the associated vote\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @return True if the vote can be challenged\n', '    */\n', '    function canChallenge(uint256 _voteId) external view returns (bool) {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        // Votes can only be challenged once\n', '        return vote_.pausedAt == 0 && _isVoteOpenForVoting(vote_, settings[vote_.settingId]);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote can be closed\n', '    *      Called by the attached Agreement when the action associated with the vote is requested to be manually closed\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @return True if the vote can be closed\n', '    */\n', '    function canClose(uint256 _voteId) external view returns (bool) {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        return (_isNormal(vote_) || _isExecuted(vote_)) && _hasEnded(vote_, settings[vote_.settingId]);\n', '    }\n', '\n', '    // Getter fns\n', '\n', '    /**\n', '    * @dev Tell the information for a setting\n', '    *      Initialization check is implicitly provided by `_getSetting()` as new settings can only be\n', '    *      created via `change*()` functions which require initialization\n', '    * @param _settingId Identification number of the setting\n', '    * @return voteTime Base vote duration\n', '    * @return supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\n', '    * @return minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\n', '    * @return delegatedVotingPeriod Duration of the delegated voting period\n', '    * @return quietEndingPeriod Duration to detect non-quiet endings\n', '    * @return quietEndingExtension Duration to extend a vote in case of non-quiet ending\n', '    * @return executionDelay Duration to wait before a passed vote can be executed\n', '    */\n', '    function getSetting(uint256 _settingId)\n', '        external\n', '        view\n', '        returns (\n', '            uint64 voteTime,\n', '            uint64 supportRequiredPct,\n', '            uint64 minAcceptQuorumPct,\n', '            uint64 delegatedVotingPeriod,\n', '            uint64 quietEndingPeriod,\n', '            uint64 quietEndingExtension,\n', '            uint64 executionDelay\n', '        )\n', '    {\n', '        Setting storage setting = _getSetting(_settingId);\n', '        voteTime = setting.voteTime;\n', '        supportRequiredPct = setting.supportRequiredPct;\n', '        minAcceptQuorumPct = setting.minAcceptQuorumPct;\n', '        delegatedVotingPeriod = setting.delegatedVotingPeriod;\n', '        quietEndingPeriod = setting.quietEndingPeriod;\n', '        quietEndingExtension = setting.quietEndingExtension;\n', '        executionDelay = setting.executionDelay;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for a vote\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote\n', '    * @return yea Voting power for\n', '    * @return nay Voting power against\n', '    * @return totalPower Total voting power available (based on the snapshot block)\n', '    * @return startDate Datetime when the vote was created\n', '    * @return snapshotBlock Block number used to check voting power on attached token\n', '    * @return status Status of the vote\n', '    * @return settingId Identification number of the setting applicable to the vote\n', '    * @return actionId Identification number of the associated disputable action on the attached Agreement\n', '    * @return pausedAt Datetime when the vote was paused\n', '    * @return pauseDuration Duration of the pause (only updated once resumed)\n', '    * @return quietEndingExtensionDuration Duration a vote was extended due to non-quiet endings\n', "    * @return quietEndingSnapshotSupport Snapshot of the vote's support at the beginning of the first quiet ending period\n", '    * @return executionScriptHash Hash of the EVM script attached to the vote\n', '    */\n', '    function getVote(uint256 _voteId)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 yea,\n', '            uint256 nay,\n', '            uint256 totalPower,\n', '            uint64 startDate,\n', '            uint64 snapshotBlock,\n', '            VoteStatus status,\n', '            uint256 settingId,\n', '            uint256 actionId,\n', '            uint64 pausedAt,\n', '            uint64 pauseDuration,\n', '            uint64 quietEndingExtensionDuration,\n', '            VoterState quietEndingSnapshotSupport,\n', '            bytes32 executionScriptHash\n', '        )\n', '    {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '\n', '        yea = vote_.yea;\n', '        nay = vote_.nay;\n', '        totalPower = vote_.totalPower;\n', '        startDate = vote_.startDate;\n', '        snapshotBlock = vote_.snapshotBlock;\n', '        status = vote_.status;\n', '        settingId = vote_.settingId;\n', '        actionId = vote_.actionId;\n', '        pausedAt = vote_.pausedAt;\n', '        pauseDuration = vote_.pauseDuration;\n', '        quietEndingExtensionDuration = vote_.quietEndingExtensionDuration;\n', '        quietEndingSnapshotSupport = vote_.quietEndingSnapshotSupport;\n', '        executionScriptHash = vote_.executionScriptHash;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the state of a voter for a vote\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote\n', '    * @param _voter Address of the voter being queried\n', "    * @return state Voter's cast state being queried\n", "    * @return caster Address of the vote's caster\n", '    */\n', '    function getCastVote(uint256 _voteId, address _voter) external view returns (VoterState state, address caster) {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        state = _voterState(vote_, _voter);\n', '        caster = _voteCaster(vote_, _voter);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a voter can participate in a vote\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @param _voter Address of the voter being queried\n', '    * @return True if the voter can participate in the vote\n', '    */\n', '    function canVote(uint256 _voteId, address _voter) external view returns (bool) {\n', '        return _canVote(_getVote(_voteId), _voter);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a representative can vote on behalf of delegated voters in a vote\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @param _voters Addresses of the delegated voters being queried\n', '    * @param _representative Address of the representative being queried\n', '    * @return True if the representative can vote on behalf of the delegated voters in the vote\n', '    */\n', '    function canVoteOnBehalfOf(uint256 _voteId, address[] _voters, address _representative) external view returns (bool) {\n', '        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\n', '\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        if (!_canRepresentativesVote(vote_)) {\n', '            return false;\n', '        }\n', '\n', '        for (uint256 i = 0; i < _voters.length; i++) {\n', '            address voter = _voters[i];\n', '            if (!_hasVotingPower(vote_, voter) || !_isRepresentativeOf(voter, _representative) || _hasCastVote(vote_, voter)) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote can be executed\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @return True if the vote can be executed\n', '    */\n', '    function canExecute(uint256 _voteId) external view returns (bool) {\n', '        return _canExecute(_getVote(_voteId));\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote is open for voting\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Identification number of the vote being queried\n', '    * @return True if the vote is open for voting\n', '    */\n', '    function isVoteOpenForVoting(uint256 _voteId) external view returns (bool) {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        Setting storage setting = settings[vote_.settingId];\n', '        return _isVoteOpenForVoting(vote_, setting);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote currently allows representatives to vote for delegated voters\n', '    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\n', '    *      created via `newVote()`, which requires initialization\n', '    * @param _voteId Vote identifier\n', '    * @return True if the vote currently allows representatives to vote\n', '    */\n', '    function canRepresentativesVote(uint256 _voteId) external view returns (bool) {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        return _canRepresentativesVote(vote_);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a representative currently represents another voter\n', '    * @param _voter Address of the delegated voter being queried\n', '    * @param _representative Address of the representative being queried\n', '    * @return True if the representative currently represents the voter\n', '    */\n', '    function isRepresentativeOf(address _voter, address _representative) external view isInitialized returns (bool) {\n', '        return _isRepresentativeOf(_voter, _representative);\n', '    }\n', '\n', '    // DisputableAragonApp callback implementations\n', '\n', '    /**\n', '    * @dev Received when a vote is challenged\n', '    * @param _voteId Identification number of the vote\n', '    * @param _challengeId Identification number of the challenge associated to the vote on the attached Agreement\n', '    */\n', '    function _onDisputableActionChallenged(uint256 _voteId, uint256 _challengeId, address /* _challenger */) internal {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        require(_isNormal(vote_), ERROR_CANNOT_PAUSE_VOTE);\n', '\n', '        vote_.status = VoteStatus.Paused;\n', '        vote_.pausedAt = getTimestamp64();\n', '        emit PauseVote(_voteId, _challengeId);\n', '    }\n', '\n', '    /**\n', '    * @dev Received when a vote was ruled in favour of the submitter\n', '    * @param _voteId Identification number of the vote\n', '    */\n', '    function _onDisputableActionAllowed(uint256 _voteId) internal {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\n', '\n', '        vote_.status = VoteStatus.Normal;\n', '        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\n', '        emit ResumeVote(_voteId);\n', '    }\n', '\n', '    /**\n', '    * @dev Received when a vote was ruled in favour of the challenger\n', '    * @param _voteId Identification number of the vote\n', '    */\n', '    function _onDisputableActionRejected(uint256 _voteId) internal {\n', '        Vote storage vote_ = _getVote(_voteId);\n', '        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\n', '\n', '        vote_.status = VoteStatus.Cancelled;\n', '        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\n', '        emit CancelVote(_voteId);\n', '    }\n', '\n', '    /**\n', '    * @dev Received when a vote was ruled as void\n', '    * @param _voteId Identification number of the vote\n', '    */\n', '    function _onDisputableActionVoided(uint256 _voteId) internal {\n', '        // When a challenged vote is ruled as voided, it is considered as being allowed.\n', "        // This could be the case for challenges where the attached Agreement's arbitrator refuses to rule the case.\n", '        _onDisputableActionAllowed(_voteId);\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    /**\n', '    * @dev Create a new empty setting instance\n', "    * @return New setting's instance\n", "    * @return New setting's identification number\n", '    */\n', '    function _newSetting() internal returns (Setting storage setting, uint256 settingId) {\n', '        settingId = settingsLength++;\n', '        setting = settings[settingId];\n', '        emit NewSetting(settingId);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a copy of the current settings as a new setting instance\n', "    * @return New setting's instance\n", '    */\n', '    function _newCopiedSettings() internal returns (Setting storage) {\n', '        (Setting storage to, uint256 settingId) = _newSetting();\n', '        Setting storage from = _getSetting(settingId - 1);\n', '        to.voteTime = from.voteTime;\n', '        to.supportRequiredPct = from.supportRequiredPct;\n', '        to.minAcceptQuorumPct = from.minAcceptQuorumPct;\n', '        to.delegatedVotingPeriod = from.delegatedVotingPeriod;\n', '        to.quietEndingPeriod = from.quietEndingPeriod;\n', '        to.quietEndingExtension = from.quietEndingExtension;\n', '        to.executionDelay = from.executionDelay;\n', '        return to;\n', '    }\n', '\n', '    /**\n', '    * @dev Change vote time\n', '    * @param _setting Setting instance to update\n', '    * @param _voteTime New vote time\n', '    */\n', '    function _changeVoteTime(Setting storage _setting, uint64 _voteTime) internal {\n', '        require(_voteTime > 0, ERROR_VOTE_TIME_ZERO);\n', '\n', '        _setting.voteTime = _voteTime;\n', '        emit ChangeVoteTime(_voteTime);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the required support\n', '    * @param _setting Setting instance to update\n', '    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\n', '    */\n', '    function _changeSupportRequiredPct(Setting storage _setting, uint64 _supportRequiredPct) internal {\n', '        require(_setting.minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_TOO_SMALL);\n', '        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\n', '\n', '        _setting.supportRequiredPct = _supportRequiredPct;\n', '        emit ChangeSupportRequired(_supportRequiredPct);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the minimum acceptance quorum\n', '    * @param _setting Setting instance to update\n', '    * @param _minAcceptQuorumPct New acceptance quorum; expressed as a percentage of 10^18\n', '    */\n', '    function _changeMinAcceptQuorumPct(Setting storage _setting, uint64 _minAcceptQuorumPct) internal {\n', '        require(_minAcceptQuorumPct <= _setting.supportRequiredPct, ERROR_CHANGE_QUORUM_TOO_BIG);\n', '\n', '        _setting.minAcceptQuorumPct = _minAcceptQuorumPct;\n', '        emit ChangeMinQuorum(_minAcceptQuorumPct);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the delegated voting period\n', '    * @param _setting Setting instance to update\n', '    * @param _delegatedVotingPeriod New delegated voting period\n', '    */\n', '    function _changeDelegatedVotingPeriod(Setting storage _setting, uint64 _delegatedVotingPeriod) internal {\n', '        require(_delegatedVotingPeriod <= _setting.voteTime, ERROR_INVALID_DELEGATED_VOTING_PERIOD);\n', '\n', '        _setting.delegatedVotingPeriod = _delegatedVotingPeriod;\n', '        emit ChangeDelegatedVotingPeriod(_delegatedVotingPeriod);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the quiet ending configuration\n', '    * @param _setting Setting instance to update\n', '    * @param _quietEndingPeriod New quiet ending period\n', '    * @param _quietEndingExtension New quiet ending extension\n', '    */\n', '    function _changeQuietEndingConfiguration(Setting storage _setting, uint64 _quietEndingPeriod, uint64 _quietEndingExtension) internal {\n', '        require(_quietEndingPeriod <= _setting.voteTime, ERROR_INVALID_QUIET_ENDING_PERIOD);\n', '\n', '        _setting.quietEndingPeriod = _quietEndingPeriod;\n', '        _setting.quietEndingExtension = _quietEndingExtension;\n', '        emit ChangeQuietEndingConfiguration(_quietEndingPeriod, _quietEndingExtension);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the execution delay\n', '    * @param _setting Setting instance to update\n', '    * @param _executionDelay New execution delay\n', '    */\n', '    function _changeExecutionDelay(Setting storage _setting, uint64 _executionDelay) internal {\n', '        _setting.executionDelay = _executionDelay;\n', '        emit ChangeExecutionDelay(_executionDelay);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new vote\n', '    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\n', "    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\n", '    * @return voteId Identification number for the newly created vote\n', '    */\n', '    function _newVote(bytes _executionScript, bytes _context) internal returns (uint256 voteId) {\n', '        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n', '        uint256 totalPower = token.totalSupplyAt(snapshotBlock);\n', '        require(totalPower > 0, ERROR_NO_TOTAL_VOTING_POWER);\n', '\n', '        voteId = votesLength++;\n', '\n', '        Vote storage vote_ = votes[voteId];\n', '        vote_.totalPower = totalPower;\n', '        vote_.startDate = getTimestamp64();\n', '        vote_.snapshotBlock = snapshotBlock;\n', '        vote_.status = VoteStatus.Normal;\n', '        vote_.settingId = _getCurrentSettingId();\n', '        vote_.executionScriptHash = keccak256(_executionScript);\n', '\n', '        // Notify the attached Agreement about the new vote; this is mandatory in making the vote disputable\n', "        // Note that we send `msg.sender` as the action's submitter--the attached Agreement may expect to be able to pull funds from this account\n", '        vote_.actionId = _registerDisputableAction(voteId, _context, msg.sender);\n', '\n', '        emit StartVote(voteId, msg.sender, _context, _executionScript);\n', '    }\n', '\n', '    /**\n', '    * @dev Cast a vote\n', '    *      Assumes all eligibility checks have passed for the given vote and voter\n', '    * @param _vote Vote instance\n', '    * @param _voteId Identification number of vote\n', '    * @param _supports Whether principal voter supports the vote\n', '    * @param _voter Address of principal voter\n', '    * @param _caster Address of vote caster, if voting via representative\n', '    */\n', '    function _castVote(Vote storage _vote, uint256 _voteId, bool _supports, address _voter, address _caster) internal {\n', '        Setting storage setting = settings[_vote.settingId];\n', '        if (_hasStartedQuietEndingPeriod(_vote, setting)) {\n', '            _ensureQuietEnding(_vote, setting, _voteId);\n', '        }\n', '\n', '        uint256 yeas = _vote.yea;\n', '        uint256 nays = _vote.nay;\n', '        uint256 voterStake = token.balanceOfAt(_voter, _vote.snapshotBlock);\n', '\n', '        VoteCast storage castVote = _vote.castVotes[_voter];\n', '        VoterState previousVoterState = castVote.state;\n', '\n', '        // If voter had previously voted, reset their vote\n', "        // Note that votes can only be changed once by the principal voter to overrule their representative's vote\n", '        if (previousVoterState == VoterState.Yea) {\n', '            yeas = yeas.sub(voterStake);\n', '        } else if (previousVoterState == VoterState.Nay) {\n', '            nays = nays.sub(voterStake);\n', '        }\n', '\n', '        if (_supports) {\n', '            yeas = yeas.add(voterStake);\n', '        } else {\n', '            nays = nays.add(voterStake);\n', '        }\n', '\n', '        _vote.yea = yeas;\n', '        _vote.nay = nays;\n', '        castVote.state = _voterStateFor(_supports);\n', '        castVote.caster = _caster;\n', '        emit CastVote(_voteId, _voter, _supports, _caster == address(0) ? _voter : _caster);\n', '    }\n', '\n', '    /**\n', '    * @dev Ensure we keep track of the information related for detecting a quiet ending\n', '    * @param _vote Vote instance\n', '    * @param _setting Setting instance applicable to the vote\n', '    * @param _voteId Identification number of the vote\n', '    */\n', '    function _ensureQuietEnding(Vote storage _vote, Setting storage _setting, uint256 _voteId) internal {\n', '        bool isAccepted = _isAccepted(_vote, _setting);\n', '\n', '        if (_vote.quietEndingSnapshotSupport == VoterState.Absent) {\n', '            // If we do not have a snapshot of the support yet, simply store the given value.\n', '            // Note that if there are no votes during the quiet ending period, it is obviously impossible for the vote to be flipped and\n', '            // this snapshot is never stored.\n', '            _vote.quietEndingSnapshotSupport = _voterStateFor(isAccepted);\n', '        } else {\n', '            // We are calculating quiet ending extensions via "rolling snapshots", and so we only update the vote\'s cached duration once\n', "            // the last period is over and we've confirmed the flip.\n", '            if (getTimestamp() >= _lastComputedVoteEndDate(_vote, _setting)) {\n', '                _vote.quietEndingExtensionDuration = _vote.quietEndingExtensionDuration.add(_setting.quietEndingExtension);\n', '                emit QuietEndingExtendVote(_voteId, isAccepted);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @dev Fetch a setting's instance by identification number\n", '    * @return Identification number of the current setting\n', '    */\n', '    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\n', '        require(_settingId < settingsLength, ERROR_SETTING_DOES_NOT_EXIST);\n', '        return settings[_settingId];\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the identification number of the current setting\n', '    * @return Identification number of the current setting\n', '    */\n', '    function _getCurrentSettingId() internal view returns (uint256) {\n', '        // No need for SafeMath, note that a new setting is created during initialization\n', '        return settingsLength - 1;\n', '    }\n', '\n', '    /**\n', '    * @dev Fetch a vote instance by identification number\n', '    * @param _voteId Identification number of the vote\n', '    * @return Vote instance\n', '    */\n', '    function _getVote(uint256 _voteId) internal view returns (Vote storage) {\n', '        require(_voteId < votesLength, ERROR_NO_VOTE);\n', '        return votes[_voteId];\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a voter can participate in a vote.\n', "    *      Note that a voter cannot change their vote once cast, except by the principal voter to overrule their representative's vote.\n", '    * @param _vote Vote instance being queried\n', '    * @param _voter Address of the voter being queried\n', '    * @return True if the voter can participate a certain vote\n', '    */\n', '    function _canVote(Vote storage _vote, address _voter) internal view returns (bool) {\n', '        Setting storage setting = settings[_vote.settingId];\n', '        return _isVoteOpenForVoting(_vote, setting) && _hasVotingPower(_vote, _voter) && _voteCaster(_vote, _voter) != _voter;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote currently allows representatives to vote for delegated voters\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote currently allows representatives to vote\n', '    */\n', '    function _canRepresentativesVote(Vote storage _vote) internal view returns (bool) {\n', '        return _isNormal(_vote) && !_hasFinishedDelegatedVotingPeriod(_vote, settings[_vote.settingId]);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote can be executed\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote can be executed\n', '    */\n', '    function _canExecute(Vote storage _vote) internal view returns (bool) {\n', '        // If the vote is executed, paused, or cancelled, it cannot be executed\n', '        if (!_isNormal(_vote)) {\n', '            return false;\n', '        }\n', '\n', '        Setting storage setting = settings[_vote.settingId];\n', '\n', '        // If the vote is still open, it cannot be executed\n', '        if (!_hasEnded(_vote, setting)) {\n', '            return false;\n', '        }\n', '\n', "        // If the vote's execution delay has not finished yet, it cannot be executed\n", '        if (!_hasFinishedExecutionDelay(_vote, setting)) {\n', '            return false;\n', '        }\n', '\n', '        // Check the vote has enough support and has reached the min quorum\n', '        return _isAccepted(_vote, setting);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote is in a "normal" non-exceptional state\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote is normal\n', '    */\n', '    function _isNormal(Vote storage _vote) internal view returns (bool) {\n', '        return _vote.status == VoteStatus.Normal;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote is paused\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote is paused\n', '    */\n', '    function _isPaused(Vote storage _vote) internal view returns (bool) {\n', '        return _vote.status == VoteStatus.Paused;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote was executed\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote was executed\n', '    */\n', '    function _isExecuted(Vote storage _vote) internal view returns (bool) {\n', '        return _vote.status == VoteStatus.Executed;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote is currently accepted\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', '    * @return True if the vote is accepted\n', '    */\n', '    function _isAccepted(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        uint256 yeas = _vote.yea;\n', '        uint256 nays = _vote.nay;\n', '        uint64 supportRequiredPct = _setting.supportRequiredPct;\n', '        uint64 minimumAcceptanceQuorumPct = _setting.minAcceptQuorumPct;\n', '        return _isValuePct(yeas, yeas.add(nays), supportRequiredPct) &&\n', '               _isValuePct(yeas, _vote.totalPower, minimumAcceptanceQuorumPct);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote is open for voting\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', '    * @return True if the vote is open for voting\n', '    */\n', '    function _isVoteOpenForVoting(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        return _isNormal(_vote) && !_hasEnded(_vote, _setting);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote has ended\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', '    * @return True if the vote has ended\n', '    */\n', '    function _hasEnded(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        return getTimestamp() >= _currentVoteEndDate(_vote, _setting);\n', '    }\n', '\n', '    /**\n', "    * @dev Tell if a vote's delegated voting period has finished\n", "    *      This function doesn't ensure that the vote is still open\n", '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return True if the vote's delegated voting period has finished\n", '    */\n', '    function _hasFinishedDelegatedVotingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        uint64 baseDelegatedVotingPeriodEndDate = _vote.startDate.add(_setting.delegatedVotingPeriod);\n', '\n', '        // If the vote was paused before the delegated voting period ended, we need to extend it\n', '        uint64 pausedAt = _vote.pausedAt;\n', '        uint64 pauseDuration = _vote.pauseDuration;\n', '        uint64 actualDeletedVotingEndDate = pausedAt != 0 && pausedAt < baseDelegatedVotingPeriodEndDate\n', '            ? baseDelegatedVotingPeriodEndDate.add(pauseDuration)\n', '            : baseDelegatedVotingPeriodEndDate;\n', '\n', '        return getTimestamp() >= actualDeletedVotingEndDate;\n', '    }\n', '\n', '    /**\n', "    * @dev Tell if a vote's quiet ending period has started\n", "    *      This function doesn't ensure that the vote is still open\n", '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return True if the vote's quiet ending period has started\n", '    */\n', '    function _hasStartedQuietEndingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        uint64 voteBaseEndDate = _baseVoteEndDate(_vote, _setting);\n', '        uint64 baseQuietEndingPeriodStartDate = voteBaseEndDate.sub(_setting.quietEndingPeriod);\n', '\n', '        // If the vote was paused before the quiet ending period started, we need to delay it\n', '        uint64 pausedAt = _vote.pausedAt;\n', '        uint64 pauseDuration = _vote.pauseDuration;\n', '        uint64 actualQuietEndingPeriodStartDate = pausedAt != 0 && pausedAt < baseQuietEndingPeriodStartDate\n', '            ? baseQuietEndingPeriodStartDate.add(pauseDuration)\n', '            : baseQuietEndingPeriodStartDate;\n', '\n', '        return getTimestamp() >= actualQuietEndingPeriodStartDate;\n', '    }\n', '\n', '    /**\n', "    * @dev Tell if a vote's execution delay has finished\n", '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return True if the vote's execution delay has finished\n", '    */\n', '    function _hasFinishedExecutionDelay(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\n', '        uint64 endDate = _currentVoteEndDate(_vote, _setting);\n', '        return getTimestamp() >= endDate.add(_setting.executionDelay);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the original end date of a vote\n', '    *      It does not consider extensions from pauses or the quiet ending mechanism\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return Datetime of the vote's original end date\n", '    */\n', '    function _baseVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\n', '        return _vote.startDate.add(_setting.voteTime);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the last computed end date of a vote.\n', '    *      It considers extensions from pauses and the quiet ending mechanism.\n', '    *      We call this the "last computed end date" because we use the currently cached quiet ending extension, which may be off-by-one from reality\n', '    *      because it is only updated on the first vote in a new extension (which may never happen).\n', '    *      The pause duration will only be included after the vote has "resumed" from its pause, as we do not know how long the pause will be in advance.\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return Datetime of the vote's last computed end date\n", '    */\n', '    function _lastComputedVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\n', '        uint64 endDateAfterPause = _baseVoteEndDate(_vote, _setting).add(_vote.pauseDuration);\n', '        return endDateAfterPause.add(_vote.quietEndingExtensionDuration);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the current end date of a vote.\n', '    *      It considers extensions from pauses and the quiet ending mechanism.\n', '    *      We call this the "current end date" because it takes into account a posssibly "missing" quiet ending extension that was not cached with the vote.\n', '    *      The pause duration will only be included after the vote has "resumed" from its pause, as we do not know how long the pause will be in advance.\n', '    * @param _vote Vote instance being queried\n', '    * @param _setting Setting instance applicable to the vote\n', "    * @return Datetime of the vote's current end date\n", '    */\n', '    function _currentVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\n', '        uint64 lastComputedEndDate = _lastComputedVoteEndDate(_vote, _setting);\n', '\n', '        // The last computed end date is correct if we have not passed it yet or if no flip was detected in the last extension\n', '        if (getTimestamp() < lastComputedEndDate || !_wasFlipped(_vote)) {\n', '            return lastComputedEndDate;\n', '        }\n', '\n', '        // Otherwise, since the last computed end date was reached and included a flip, we need to extend the end date by one more period\n', '        return lastComputedEndDate.add(_setting.quietEndingExtension);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a vote was flipped in its most recent quiet ending period\n', '    *      This function assumes that it will only be called after the most recent quiet ending period has already ended\n', '    * @param _vote Vote instance being queried\n', '    * @return True if the vote was flipped\n', '    */\n', '    function _wasFlipped(Vote storage _vote) internal view returns (bool) {\n', '        // If there was no snapshot taken, it means no one voted during the quiet ending period. Thus, it cannot have been flipped.\n', '        VoterState snapshotSupport = _vote.quietEndingSnapshotSupport;\n', '        if (snapshotSupport == VoterState.Absent) {\n', '            return false;\n', '        }\n', '\n', '        // Otherwise, we calculate if the vote was flipped by comparing its current acceptance state to its last state at the start of the extension period\n', '        bool wasInitiallyAccepted = snapshotSupport == VoterState.Yea;\n', '        Setting storage setting = settings[_vote.settingId];\n', '        uint256 currentExtensions = _vote.quietEndingExtensionDuration / setting.quietEndingExtension;\n', '        bool wasAcceptedBeforeLastFlip = wasInitiallyAccepted != (currentExtensions % 2 != 0);\n', '        return wasAcceptedBeforeLastFlip != _isAccepted(_vote, setting);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a voter has voting power for a vote\n', '    * @param _vote Vote instance being queried\n', '    * @param _voter Address of the voter being queried\n', '    * @return True if the voter has voting power for a certain vote\n', '    */\n', '    function _hasVotingPower(Vote storage _vote, address _voter) internal view returns (bool) {\n', '        return token.balanceOfAt(_voter, _vote.snapshotBlock) > 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a voter has cast their choice in a vote (by themselves or via a representative)\n', '    * @param _vote Vote instance being queried\n', '    * @param _voter Address of the voter being queried\n', '    * @return True if the voter has cast their choice in the vote\n', '    */\n', '    function _hasCastVote(Vote storage _vote, address _voter) internal view returns (bool) {\n', '        return _voterState(_vote, _voter) != VoterState.Absent;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the state of a voter for a vote\n', '    * @param _vote Vote instance being queried\n', '    * @param _voter Address of the voter being queried\n', '    * @return Voting state of the voter\n', '    */\n', '    function _voterState(Vote storage _vote, address _voter) internal view returns (VoterState) {\n', '        return _vote.castVotes[_voter].state;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the caster of a voter on a vote\n', '    * @param _vote Vote instance being queried\n', '    * @param _voter Address of the voter being queried\n', "    * @return Address of the vote's caster\n", '    */\n', '    function _voteCaster(Vote storage _vote, address _voter) internal view returns (address) {\n', '        if (!_hasCastVote(_vote, _voter)) {\n', '            return address(0);\n', '        }\n', '\n', '        address _caster = _vote.castVotes[_voter].caster;\n', '        return _caster == address(0) ? _voter : _caster;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a representative currently represents another voter\n', '    * @param _voter Address of the delegated voter being queried\n', '    * @param _representative Address of the representative being queried\n', '    * @return True if the representative currently represents the voter\n', '    */\n', '    function _isRepresentativeOf(address _voter, address _representative) internal view returns (bool) {\n', '        return representatives[_voter] == _representative;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if an address can forward actions\n', '    * @param _sender Address intending to forward an action\n', '    * @return True if the address can create votes\n', '    */\n', '    function _canForward(address _sender, bytes) internal view returns (bool) {\n', '        IAgreement agreement = _getAgreement();\n', '        // To make sure the sender address is reachable by ACL oracles, we need to pass it as the first argument.\n', "        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\n", '        return agreement != IAgreement(0) && canPerform(_sender, CREATE_VOTES_ROLE, arr(_sender));\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates whether a given value is greater than a percentage of its total\n', '    * @param _value Numerator\n', '    * @param _total Divisor\n', '    * @param _pct Required percentage necessary, expressed as a percentage of 10^18\n', '    * @return True if the value is above the required percentage\n', '    */\n', '    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\n', '        if (_total == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 computedPct = _value.mul(PCT_BASE) / _total;\n', '        return computedPct > _pct;\n', '    }\n', '\n', '    /**\n', "    * @dev Translate a voter's support into a voter state\n", '    * @param _supports Whether voter supports the vote\n', '    * @return Voter state, as an enum\n', '    */\n', '    function _voterStateFor(bool _supports) internal pure returns (VoterState) {\n', '        return _supports ? VoterState.Yea : VoterState.Nay;\n', '    }\n', '}']