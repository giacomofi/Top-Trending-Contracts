['// File: contracts/lib/ReentrancyGuard.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title ReentrancyGuard\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Protect functions from Reentrancy Attack\n', ' */\n', 'contract ReentrancyGuard {\n', '    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\n', '    // zero-state of _ENTERED_ is false\n', '    bool private _ENTERED_;\n', '\n', '    modifier preventReentrant() {\n', '        require(!_ENTERED_, "REENTRANT");\n', '        _ENTERED_ = true;\n', '        _;\n', '        _ENTERED_ = false;\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', "    This is a simplified version of OpenZepplin's SafeERC20 library\n", '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IDODO.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '\n', 'interface IDODO {\n', '    function init(\n', '        address owner,\n', '        address supervisor,\n', '        address maintainer,\n', '        address baseToken,\n', '        address quoteToken,\n', '        address oracle,\n', '        uint256 lpFeeRate,\n', '        uint256 mtFeeRate,\n', '        uint256 k,\n', '        uint256 gasPriceLimit\n', '    ) external;\n', '\n', '    function transferOwnership(address newOwner) external;\n', '\n', '    function claimOwnership() external;\n', '\n', '    function sellBaseToken(\n', '        uint256 amount,\n', '        uint256 minReceiveQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function buyBaseToken(\n', '        uint256 amount,\n', '        uint256 maxPayQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\n', '\n', '    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\n', '\n', '    function depositBaseTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawBase(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllBase() external returns (uint256);\n', '\n', '    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawQuote(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllQuote() external returns (uint256);\n', '\n', '    function _BASE_CAPITAL_TOKEN_() external returns (address);\n', '\n', '    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\n', '\n', '    function _BASE_TOKEN_() external returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external returns (address);\n', '}\n', '\n', '// File: contracts/intf/IWETH.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '\n', '\n', 'interface IWETH {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 wad\n', '    ) external returns (bool);\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/DODOEthProxy.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IDODOZoo {\n', '    function getDODO(address baseToken, address quoteToken) external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title DODO Eth Proxy\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Handle ETH-WETH converting for users. Use it only when WETH is base token\n', ' */\n', 'contract DODOEthProxy is ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public _DODO_ZOO_;\n', '    address payable public _WETH_;\n', '\n', '    // ============ Events ============\n', '\n', '    event ProxySellEth(\n', '        address indexed seller,\n', '        address indexed quoteToken,\n', '        uint256 payEth,\n', '        uint256 receiveQuote\n', '    );\n', '\n', '    event ProxyBuyEth(\n', '        address indexed buyer,\n', '        address indexed quoteToken,\n', '        uint256 receiveEth,\n', '        uint256 payQuote\n', '    );\n', '\n', '    event ProxyDepositEth(address indexed lp, address indexed DODO, uint256 ethAmount);\n', '\n', '    event ProxyWithdrawEth(address indexed lp, address indexed DODO, uint256 ethAmount);\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor(address dodoZoo, address payable weth) public {\n', '        _DODO_ZOO_ = dodoZoo;\n', '        _WETH_ = weth;\n', '    }\n', '\n', '    fallback() external payable {\n', '        require(msg.sender == _WETH_, "WE_SAVED_YOUR_ETH_:)");\n', '    }\n', '\n', '    receive() external payable {\n', '        require(msg.sender == _WETH_, "WE_SAVED_YOUR_ETH_:)");\n', '    }\n', '\n', '    function sellEthTo(\n', '        address quoteTokenAddress,\n', '        uint256 ethAmount,\n', '        uint256 minReceiveTokenAmount\n', '    ) external payable preventReentrant returns (uint256 receiveTokenAmount) {\n', '        require(msg.value == ethAmount, "ETH_AMOUNT_NOT_MATCH");\n', '        address DODO = IDODOZoo(_DODO_ZOO_).getDODO(_WETH_, quoteTokenAddress);\n', '        require(DODO != address(0), "DODO_NOT_EXIST");\n', '        IWETH(_WETH_).deposit{value: ethAmount}();\n', '        IERC20(_WETH_).safeApprove(DODO, ethAmount);\n', '        receiveTokenAmount = IDODO(DODO).sellBaseToken(ethAmount, minReceiveTokenAmount, "");\n', '        _transferOut(quoteTokenAddress, msg.sender, receiveTokenAmount);\n', '        emit ProxySellEth(msg.sender, quoteTokenAddress, ethAmount, receiveTokenAmount);\n', '        return receiveTokenAmount;\n', '    }\n', '\n', '    function buyEthWith(\n', '        address quoteTokenAddress,\n', '        uint256 ethAmount,\n', '        uint256 maxPayTokenAmount\n', '    ) external preventReentrant returns (uint256 payTokenAmount) {\n', '        address DODO = IDODOZoo(_DODO_ZOO_).getDODO(_WETH_, quoteTokenAddress);\n', '        require(DODO != address(0), "DODO_NOT_EXIST");\n', '        payTokenAmount = IDODO(DODO).queryBuyBaseToken(ethAmount);\n', '        _transferIn(quoteTokenAddress, msg.sender, payTokenAmount);\n', '        IERC20(quoteTokenAddress).safeApprove(DODO, payTokenAmount);\n', '        IDODO(DODO).buyBaseToken(ethAmount, maxPayTokenAmount, "");\n', '        IWETH(_WETH_).withdraw(ethAmount);\n', '        msg.sender.transfer(ethAmount);\n', '        emit ProxyBuyEth(msg.sender, quoteTokenAddress, ethAmount, payTokenAmount);\n', '        return payTokenAmount;\n', '    }\n', '\n', '    function depositEth(uint256 ethAmount, address quoteTokenAddress)\n', '        external\n', '        payable\n', '        preventReentrant\n', '    {\n', '        require(msg.value == ethAmount, "ETH_AMOUNT_NOT_MATCH");\n', '        address DODO = IDODOZoo(_DODO_ZOO_).getDODO(_WETH_, quoteTokenAddress);\n', '        require(DODO != address(0), "DODO_NOT_EXIST");\n', '        IWETH(_WETH_).deposit{value: ethAmount}();\n', '        IERC20(_WETH_).safeApprove(DODO, ethAmount);\n', '        IDODO(DODO).depositBaseTo(msg.sender, ethAmount);\n', '        emit ProxyDepositEth(msg.sender, DODO, ethAmount);\n', '    }\n', '\n', '    function withdrawEth(uint256 ethAmount, address quoteTokenAddress)\n', '        external\n', '        preventReentrant\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        address DODO = IDODOZoo(_DODO_ZOO_).getDODO(_WETH_, quoteTokenAddress);\n', '        require(DODO != address(0), "DODO_NOT_EXIST");\n', '        address ethLpToken = IDODO(DODO)._BASE_CAPITAL_TOKEN_();\n', '\n', '        // transfer all pool shares to proxy\n', '        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\n', '        IERC20(ethLpToken).safeTransferFrom(msg.sender, address(this), lpBalance);\n', '        IDODO(DODO).withdrawBase(ethAmount);\n', '\n', '        // transfer remain shares back to msg.sender\n', '        lpBalance = IERC20(ethLpToken).balanceOf(address(this));\n', '        IERC20(ethLpToken).safeTransfer(msg.sender, lpBalance);\n', '\n', '        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\n', '        // query weth amount first and than transfer ETH to msg.sender\n', '        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\n', '        IWETH(_WETH_).withdraw(wethAmount);\n', '        msg.sender.transfer(wethAmount);\n', '        emit ProxyWithdrawEth(msg.sender, DODO, wethAmount);\n', '        return wethAmount;\n', '    }\n', '\n', '    function withdrawAllEth(address quoteTokenAddress)\n', '        external\n', '        preventReentrant\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        address DODO = IDODOZoo(_DODO_ZOO_).getDODO(_WETH_, quoteTokenAddress);\n', '        require(DODO != address(0), "DODO_NOT_EXIST");\n', '        address ethLpToken = IDODO(DODO)._BASE_CAPITAL_TOKEN_();\n', '\n', '        // transfer all pool shares to proxy\n', '        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\n', '        IERC20(ethLpToken).safeTransferFrom(msg.sender, address(this), lpBalance);\n', '        IDODO(DODO).withdrawAllBase();\n', '\n', '        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\n', '        // query weth amount first and than transfer ETH to msg.sender\n', '        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\n', '        IWETH(_WETH_).withdraw(wethAmount);\n', '        msg.sender.transfer(wethAmount);\n', '        emit ProxyWithdrawEth(msg.sender, DODO, wethAmount);\n', '        return wethAmount;\n', '    }\n', '\n', '    // ============ Helper Functions ============\n', '\n', '    function _transferIn(\n', '        address tokenAddress,\n', '        address from,\n', '        uint256 amount\n', '    ) internal {\n', '        IERC20(tokenAddress).safeTransferFrom(from, address(this), amount);\n', '    }\n', '\n', '    function _transferOut(\n', '        address tokenAddress,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        IERC20(tokenAddress).safeTransfer(to, amount);\n', '    }\n', '}']