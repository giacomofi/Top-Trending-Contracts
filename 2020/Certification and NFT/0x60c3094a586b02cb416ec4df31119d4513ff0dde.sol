['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'abstract contract IERC20 {\n', '    function totalSupply() external virtual view returns (uint256);\n', '    function balanceOf(address tokenOwner) external virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) external virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) external virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) external virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) external virtual returns (bool success);\n', '    function burnFrom(address account, uint256 amount) public virtual;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', 'contract BreePurchase{\n', '\n', '    address constant private SBREE_TOKEN_ADDRESS = 0x25377ddb16c79C93B0CBf46809C8dE8765f03FCd;\n', '    address constant private BREE_TOKEN_ADDRESS = 0x4639cd8cd52EC1CF2E496a606ce28D8AfB1C792F;\n', '    \n', '    event TOKENSPURCHASED(address indexed _purchaser, uint256 indexed _tokens);\n', '    \n', '    function purchase(address assetAddress, uint256 amountAsset) public{\n', '        require(assetAddress == SBREE_TOKEN_ADDRESS, "NOT ACCEPTED: Unaccepted payment asset provided");\n', '        require(IERC20(BREE_TOKEN_ADDRESS).balanceOf(address(this)) >= amountAsset, "Balance: Insufficient liquidity");\n', '        _purchase(assetAddress, amountAsset);\n', '    }\n', '    \n', '    function _purchase(address assetAddress, uint256 assetAmount) internal{\n', '        // burn the received tokens\n', '        IERC20(assetAddress).burnFrom(msg.sender, assetAmount);\n', '        \n', '        // send tokens to the purchaser\n', '        IERC20(BREE_TOKEN_ADDRESS).transfer(msg.sender, assetAmount);\n', '        \n', '        emit TOKENSPURCHASED(msg.sender, assetAmount);\n', '    }\n', '}']