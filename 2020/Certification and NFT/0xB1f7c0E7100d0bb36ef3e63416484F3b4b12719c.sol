['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'interface DSPauseAbstract {\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface JugAbstract {\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface MedianAbstract {\n', '    function kiss(address) external;\n', '    function kiss(address[] calldata) external;\n', '}\n', '\n', 'interface OsmAbstract {\n', '    function kiss(address) external;\n', '}\n', '\n', 'interface VatAbstract {\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '}\n', '\n', 'interface MedianizerV1Abstract {\n', '    function setAuthority(address) external;\n', '    function setOwner(address) external;\n', '    function setMin(uint96) external;\n', '    function setNext(bytes12) external;\n', '    function set(bytes12, address) external;\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\n', '    address constant MCD_JUG  = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address constant MCD_VAT  = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '\n', '    address constant ETHUSD   = 0x64DE91F5A373Cd4c28de3600cB34C7C6cE410C85;\n', '    address constant BTCUSD   = 0xe0F30cb149fAADC7247E953746Be9BbBB6B5751f;\n', '    address constant PIP_WBTC = 0xf185d0682d50819263941e5f4EacC763CC5C6C42;\n', '\n', '    address constant KYBER    = 0xe1BDEb1F71b1CD855b95D4Ec2d1BFdc092E00E4F;\n', '    address constant DDEX     = 0x4935B1188EB940C39e22172cc5fe595E267706a1;\n', '    address constant ETHUSDv1 = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n', '    address constant YEARN    = 0x82c93333e4E295AA17a05B15092159597e823e8a;\n', '\n', '    // Decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    uint256 constant TWO_TWENTYFIVE_PCT_RATE    = 1000000000705562181084137268;\n', '    uint256 constant FOUR_TWENTYFIVE_PCT_RATE   = 1000000001319814647332759691;\n', '    uint256 constant EIGHT_TWENTYFIVE_PCT_RATE  = 1000000002513736079215619839;\n', '    uint256 constant TWELVE_TWENTYFIVE_PCT_RATE = 1000000003664330950215446102;\n', '    uint256 constant FIFTY_TWENTYFIVE_PCT_RATE  = 1000000012910019978921115695;\n', '\n', '    function execute() external {\n', '        /*** Risk Parameter Adjustments ***/\n', '\n', '        // Set the global debt ceiling to 1,401,000,000\n', '        // 1,196 (current DC) + 85 (USDC-A increase) + 85 (TUSD-A increase) + 30 (PAXUSD-A increase) + 5 (BAT-A increase)\n', '        VatAbstract(MCD_VAT).file("Line", 1401 * MILLION * RAD);\n', '\n', '        // Set the BAT-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 5 million\n', '        // New debt ceiling: 10 million\n', '        VatAbstract(MCD_VAT).file("BAT-A", "line", 10 * MILLION * RAD);\n', '\n', '        // Set the USDC-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 400 million\n', '        // New debt ceiling: 485 million\n', '        VatAbstract(MCD_VAT).file("USDC-A", "line", 485 * MILLION * RAD);\n', '\n', '        // Set the TUSD-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 50 million\n', '        // New debt ceiling: 135 million\n', '        VatAbstract(MCD_VAT).file("TUSD-A", "line", 135 * MILLION * RAD);\n', '\n', '        // Set the PAXUSD-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 30 million\n', '        // New debt ceiling: 60 million\n', '        VatAbstract(MCD_VAT).file("PAXUSD-A", "line", 60 * MILLION * RAD);\n', '\n', '\n', '        // Set the ETH-A stability fee\n', '        //\n', '        // Previous: 0%\n', '        // New: 2.25%\n', '        JugAbstract(MCD_JUG).drip("ETH-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("ETH-A", "duty", TWO_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the BAT-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("BAT-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("BAT-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the USDC-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("USDC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the USDC-B stability fee\n', '        //\n', '        // Previous: 50%\n', '        // New: 50.25%\n', '        JugAbstract(MCD_JUG).drip("USDC-B"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-B", "duty", FIFTY_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the WBTC-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("WBTC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("WBTC-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the TUSD-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("TUSD-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("TUSD-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the KNC-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("KNC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("KNC-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the ZRX-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("ZRX-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("ZRX-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the MANA-A stability fee\n', '        //\n', '        // Previous: 12%\n', '        // New: 12.25%\n', '        JugAbstract(MCD_JUG).drip("MANA-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("MANA-A", "duty", TWELVE_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the USDT-A stability fee\n', '        //\n', '        // Previous: 8%\n', '        // New: 8.25%\n', '        JugAbstract(MCD_JUG).drip("USDT-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDT-A", "duty", EIGHT_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Set the PAXUSD-A stability fee\n', '        //\n', '        // Previous: 4%\n', '        // New: 4.25%\n', '        JugAbstract(MCD_JUG).drip("PAXUSD-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("PAXUSD-A", "duty", FOUR_TWENTYFIVE_PCT_RATE);\n', '\n', '        // Whitelisting:\n', '\n', '        // https://forum.makerdao.com/t/mip10c9-sp11-whitelist-kybers-promo-token-pricing-contract-on-ethusd-oracle/4193\n', '        // https://forum.makerdao.com/t/mip10c9-sp7-whitelist-opyn-on-ethusd-oracle/4061\n', '        address[] memory addrs = new address[](2);\n', '        addrs[0] = KYBER;\n', '        addrs[1] = ETHUSDv1;\n', '        MedianAbstract(ETHUSD).kiss(addrs);\n', '\n', '        // Add the new median as the only src of the old medianizer\n', '        MedianizerV1Abstract(ETHUSDv1).setMin(1);\n', '        MedianizerV1Abstract(ETHUSDv1).setNext(0x000000000000000000000002);\n', '        MedianizerV1Abstract(ETHUSDv1).set(0x000000000000000000000001, ETHUSD);\n', '\n', '        // https://forum.makerdao.com/t/mip10c9-sp8-whitelist-ddex-on-wbtcusd-oracle/4094\n', '        MedianAbstract(BTCUSD).kiss(DDEX);\n', '\n', '        // https://forum.makerdao.com/t/mip10c9-sp10-whitelist-yearn-finance-on-btcusd-oracle/4192\n', '        OsmAbstract(PIP_WBTC).kiss(YEARN);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    address constant ETHUSDv1 = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/9ba21e7f4106b184124a2f94a7ab2591c3446c64/governance/votes/Executive%20vote%20-%20September%2025%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-09-25 MakerDAO Executive Spell | Hash: 0x86cac34c2d63bd581cc36f7688f57c6005a6de0382903fe30179953d025c3450";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    // modifier officeHours {\n', '    //     uint day = (now / 1 days + 3) % 7;\n', '    //     require(day < 5, "Can only be cast on a weekday");\n', '    //     uint hour = now / 1 hours % 24;\n', '    //     require(hour >= 14 && hour < 21, "Outside office hours");\n', '    //     _;\n', '    // }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '\n', '        // Set the ownership of the medianizer v1 to the pause proxy and remove the direct\n', '        // access from the chief (this way it will need to pass via governance delay) and\n', '        // can be executed during cast (coded in the SpellAction)\n', '        MedianizerV1Abstract(ETHUSDv1).setOwner(pause.proxy());\n', '        MedianizerV1Abstract(ETHUSDv1).setAuthority(address(0));\n', '    }\n', '\n', '    function cast() public /*officeHours*/ {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']