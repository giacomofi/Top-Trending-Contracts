['pragma solidity ^0.6.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract UNYCrowdSale {\n', '    using SafeMath for uint256;\n', '\n', '    address private _owner;\n', '\n', '    uint256[] private _phaseGoals = [\n', '        8000000000000000000000,\n', '        17000000000000000000000,\n', '        27000000000000000000000\n', '    ];\n', '    uint256[] private _phasePrices = [40, 30, 20];\n', '\n', '    uint8 private _phase = 0;\n', '    uint256 private _raisedAmount = 0; // UNY sent\n', '    bool private _isClose = false;\n', '\n', '    IERC20 private _token;\n', '\n', '    constructor (address tokenAddr) public {\n', '        _owner = msg.sender;\n', '        _token = IERC20(tokenAddr);\n', '    }\n', '\n', '    receive() external payable {\n', '        require(_phase <= 2 && !_isClose, "Crowdfunding is closed");\n', '\n', '        uint256 expected = msg.value.mul(_phasePrices[_phase]);\n', '        uint256 totalAmount = _raisedAmount.add(expected);\n', '        require(totalAmount <= _phaseGoals[2], "Not enough remaining tokens");\n', '\n', '        _token.transfer(msg.sender, expected);\n', '\n', '        _raisedAmount = _raisedAmount.add(expected);\n', '        if (_phase < 2 && _raisedAmount >= _phaseGoals[_phase]) {\n', '            _phase = _phase + 1;\n', '        }\n', '    }\n', '\n', '    function setClose(bool status) public returns (bool) {\n', '        require(msg.sender == _owner, "sender is not owner");\n', '\n', '        _isClose = status;\n', '        return true;\n', '    }\n', '\n', '    function withdrawETH(address payable recipient) public returns (bool) {\n', '        require(msg.sender == _owner, "sender is not owner");\n', '\n', '        uint256 balance = address(this).balance;\n', '        if (balance > 0) {\n', '            recipient.transfer(balance);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function withdrawUNY(address recipient) public returns (bool) {\n', '        require(msg.sender == _owner, "sender is not owner");\n', '\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        if (balance > 0) {\n', '            _token.transfer(recipient, balance);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}']