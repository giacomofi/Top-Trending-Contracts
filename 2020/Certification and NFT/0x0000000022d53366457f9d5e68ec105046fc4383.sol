['# @version 0.2.7\n', '"""\n', '@title Curve Registry Address Provider\n', '@license MIT\n', '@author Curve.Fi\n', '"""\n', '\n', 'event NewAddressIdentifier:\n', '    id: indexed(uint256)\n', '    addr: address\n', '    description: String[64]\n', '\n', 'event AddressModified:\n', '    id: indexed(uint256)\n', '    new_address: address\n', '    version: uint256\n', '\n', 'event CommitNewAdmin:\n', '    deadline: indexed(uint256)\n', '    admin: indexed(address)\n', '\n', 'event NewAdmin:\n', '    admin: indexed(address)\n', '\n', '\n', 'struct AddressInfo:\n', '    addr: address\n', '    is_active: bool\n', '    version: uint256\n', '    last_modified: uint256\n', '    description: String[64]\n', '\n', '\n', 'registry: address\n', 'admin: public(address)\n', 'transfer_ownership_deadline: public(uint256)\n', 'future_admin: public(address)\n', '\n', 'queue_length: uint256\n', 'get_id_info: public(HashMap[uint256, AddressInfo])\n', '\n', '\n', '@external\n', 'def __init__(_admin: address):\n', '    self.admin = _admin\n', '    self.queue_length = 1\n', '    self.get_id_info[0].description = "Main Registry"\n', '\n', '\n', '@view\n', '@external\n', 'def get_registry() -> address:\n', '    """\n', '    @notice Get the address of the main registry contract\n', '    @dev This is a gas-efficient way of calling `AddressProvider.get_address(0)`\n', '    @return address main registry contract\n', '    """\n', '    return self.registry\n', '\n', '\n', '@view\n', '@external\n', 'def max_id() -> uint256:\n', '    """\n', '    @notice Get the highest ID set within the address provider\n', '    @return uint256 max ID\n', '    """\n', '    return self.queue_length - 1\n', '\n', '\n', '@view\n', '@external\n', 'def get_address(_id: uint256) -> address:\n', '    """\n', '    @notice Fetch the address associated with `_id`\n', '    @dev Returns ZERO_ADDRESS if `_id` has not been defined, or has been unset\n', '    @param _id Identifier to fetch an address for\n', '    @return Current address associated to `_id`\n', '    """\n', '    return self.get_id_info[_id].addr\n', '\n', '\n', '@external\n', 'def add_new_id(_address: address, _description: String[64]) -> uint256:\n', '    """\n', '    @notice Add a new identifier to the registry\n', '    @dev ID is auto-incremented\n', '    @param _address Initial address to assign to new identifier\n', '    @param _description Human-readable description of the identifier\n', '    @return uint256 identifier\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '    assert _address.is_contract  # dev: not a contract\n', '\n', '    id: uint256 = self.queue_length\n', '    self.get_id_info[id] = AddressInfo({\n', '        addr: _address,\n', '        is_active: True,\n', '        version: 1,\n', '        last_modified: block.timestamp,\n', '        description: _description\n', '    })\n', '    self.queue_length = id + 1\n', '\n', '    log NewAddressIdentifier(id, _address, _description)\n', '\n', '    return id\n', '\n', '\n', '@external\n', 'def set_address(_id: uint256, _address: address) -> bool:\n', '    """\n', '    @notice Set a new address for an existing identifier\n', '    @param _id Identifier to set the new address for\n', '    @param _address Address to set\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '    assert _address.is_contract  # dev: not a contract\n', '    assert self.queue_length > _id  # dev: id does not exist\n', '\n', '    version: uint256 = self.get_id_info[_id].version + 1\n', '\n', '    self.get_id_info[_id].addr = _address\n', '    self.get_id_info[_id].is_active = True\n', '    self.get_id_info[_id].version = version\n', '    self.get_id_info[_id].last_modified = block.timestamp\n', '\n', '    if _id == 0:\n', '        self.registry = _address\n', '\n', '    log AddressModified(_id, _address, version)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def unset_address(_id: uint256) -> bool:\n', '    """\n', '    @notice Unset an existing identifier\n', '    @dev An identifier cannot ever be removed, it can only have the\n', '         address unset so that it returns ZERO_ADDRESS\n', '    @param _id Identifier to unset\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '    assert self.get_id_info[_id].is_active  # dev: not active\n', '\n', '    self.get_id_info[_id].is_active = False\n', '    self.get_id_info[_id].addr = ZERO_ADDRESS\n', '    self.get_id_info[_id].last_modified = block.timestamp\n', '\n', '    if _id == 0:\n', '        self.registry = ZERO_ADDRESS\n', '\n', '    log AddressModified(_id, ZERO_ADDRESS, self.get_id_info[_id].version)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_new_admin: address) -> bool:\n', '    """\n', '    @notice Initiate a transfer of contract ownership\n', '    @dev Once initiated, the actual transfer may be performed three days later\n', '    @param _new_admin Address of the new owner account\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '    assert self.transfer_ownership_deadline == 0  # dev: transfer already active\n', '\n', '    deadline: uint256 = block.timestamp + 3*86400\n', '    self.transfer_ownership_deadline = deadline\n', '    self.future_admin = _new_admin\n', '\n', '    log CommitNewAdmin(deadline, _new_admin)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def apply_transfer_ownership() -> bool:\n', '    """\n', '    @notice Finalize a transfer of contract ownership\n', '    @dev May only be called by the current owner, three days after a\n', '         call to `commit_transfer_ownership`\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '    assert self.transfer_ownership_deadline != 0  # dev: transfer not active\n', '    assert block.timestamp >= self.transfer_ownership_deadline  # dev: now < deadline\n', '\n', '    new_admin: address = self.future_admin\n', '    self.admin = new_admin\n', '    self.transfer_ownership_deadline = 0\n', '\n', '    log NewAdmin(new_admin)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def revert_transfer_ownership() -> bool:\n', '    """\n', '    @notice Revert a transfer of contract ownership\n', '    @dev May only be called by the current owner\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin-only function\n', '\n', '    self.transfer_ownership_deadline = 0\n', '\n', '    return True']