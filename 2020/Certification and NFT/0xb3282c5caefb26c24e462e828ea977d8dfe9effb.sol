['pragma solidity 0.5.16;\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '    function transfer(address, uint) external returns (bool);\n', '    function burn(uint) external;\n', '}\n', '\n', 'interface VoteInterface {\n', '    function voter2VotingValue(address, uint, address) external view returns (uint32);\n', '}\n', '\n', 'interface YFVRewards {\n', '    function periodFinish() external view returns (uint);\n', '}\n', '\n', 'contract VIP2 {\n', '\n', '    address payable owner;\n', '    YFVRewards pool0 = YFVRewards(0xa8d3084Fa61C893eACAE2460ee77E3E5f11C8CFE);\n', '    TokenInterface usdt = TokenInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    VoteInterface vote = VoteInterface(0x6ba70f65877Da18e751fF42fC1C3Fee8c66280E6);\n', '    address payable whaleAddress = 0xCebaa26C11Bdf4F239424CcC17864B2C0f03e2BD;\n', '    uint public contractDeployTime;\n', '    uint public initialPeriodFinish;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        contractDeployTime = block.timestamp;\n', '        initialPeriodFinish = pool0.periodFinish();\n', '    }\n', '\n', '    // If whale voted yes, and fund is unlocked, calling this function will send the 10,000 USDT to the whale address\n', '    function donationToWhale() public {\n', '        require(isWhaleVotedYes());\n', '        require(isFundUnlocked());\n', '        usdt.transfer(whaleAddress, usdt.balanceOf(address(this)));\n', '    }\n', '\n', '    // Check if whale voted Yes\n', '    function isWhaleVotedYes() public view returns (bool) {\n', '        address poolAddress = 0x0e6ffd4dAecA13A8158146516f847D2F44AD4A30; // YFV Staking Pool V1\n', '        uint votingItem = 2; // VIP2\n', '\n', '        return vote.voter2VotingValue(poolAddress, votingItem, whaleAddress) != 0; // any value other than 0 is Yes\n', '    }\n', '\n', '    // Use the periodFinish data to check if pool0 is unlocked\n', '    function isFundUnlocked() public view returns (bool) {\n', '        return pool0.periodFinish() > initialPeriodFinish;\n', '    }\n', '\n', '    // If the fund is not unlocked after 2 weeks, owner can get back all assets in this contract\n', '    function getBackAfterTwoWeeks() public {\n', '        require(msg.sender == owner);\n', '        require(block.timestamp > contractDeployTime + 14 days);\n', '        usdt.transfer(owner, usdt.balanceOf(address(this)));\n', '    }\n', '\n', '}']