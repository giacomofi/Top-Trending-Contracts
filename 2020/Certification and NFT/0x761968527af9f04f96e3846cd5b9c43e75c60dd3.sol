['pragma solidity 0.6.12;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'abstract contract ERC20Basic {\n', '    function totalSupply() external virtual returns (uint);\n', '    function balanceOf(address who) public virtual view returns (uint);\n', '    function transfer(address to, uint value) public virtual;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'abstract contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view virtual returns (uint);\n', '    function transferFrom(address from, address to, uint value) public virtual;\n', '    function approve(address spender, uint value) public virtual;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'abstract contract TokenRecipient {\n', '    function tokenFallback(address _from, uint _value) public virtual;\n', '}\n', '\n', 'abstract contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public override virtual onlyPayloadSize(2 * 32) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public override virtual view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'abstract contract StandardToken is BasicToken, ERC20 {\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public virtual override onlyPayloadSize(3 * 32) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '        if (_allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        }\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public virtual override onlyPayloadSize(2 * 32) {\n', '        require(_value >= 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public virtual view override returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract PFI is StandardToken {\n', "    string public name = 'PFI token';\n", "    string public symbol = 'PFI';\n", '    uint public decimals = 18;\n', '    uint public override totalSupply = 21500 * 10 ** 18;\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        balances[msg.sender] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function issue(uint amount) public {\n', '        require(msg.sender == owner);\n', '        balances[owner] = balances[owner].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        emit Issue(amount);\n', '    }\n', '\n', '    event Issue(uint amount);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT']