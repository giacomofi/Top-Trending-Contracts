['// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\TTTdefiFundV2.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', 'contract TTTdefiFundV2 is Ownable {\n', '  using SafeMath for uint;\n', '\n', '  /*** STORAGE VARIABLES ***/\n', '\n', '  /**\n', '    * @notice Date time in seconds when timelock expires.\n', '  */\n', '  uint public expiration;\n', '\n', '  /**\n', '    * @notice Address permitted to withdraw funds after unlock.\n', '  */\n', '  address public beneficiary;\n', '\n', '  /**\n', '    * @notice Token look up table for front-end access.\n', '  */\n', '  address[] public tokenLUT;\n', '\n', '  /**\n', '    * @notice Checks whether a token exists in the fund.\n', '  */\n', '  mapping(address => bool) public tokens;\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /**\n', '    * @notice Emits when a deposit is made.\n', '  */\n', '  event Deposit(address indexed _from, uint _value, address indexed _token);\n', '\n', '  /**\n', '    * @notice Emits when a withdrawal is made.\n', '  */\n', '  event Withdraw(address indexed _to, uint _value, address indexed _token);\n', '\n', '  /**\n', '    * @notice Emits when the expiration is increased.\n', '  */\n', '  event IncreaseTime(uint _newExpiration);\n', '\n', '  /**\n', '    * @notice Emits when the beneficiary is updated.\n', '  */\n', '  event UpdateBeneficiary(address indexed _newBeneficiary);\n', '\n', '  /*** MODIFIERS ***/\n', '\n', '  /**\n', '    * @dev Throws if the contract has not yet reached its expiration.\n', '  */\n', '  modifier isExpired() {\n', "    require(expiration < block.timestamp, 'contract is still locked');\n", '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if msg.sender is not the beneficiary.\n', '  */\n', '  modifier onlyBeneficiary() {\n', "    require(msg.sender == beneficiary, 'only the beneficiary can perform this function');\n", '    _;\n', '  }\n', '\n', '  /**\n', '    * @param _expiration Date time in seconds when timelock expires.\n', '    * @param _beneficiary Address permitted to withdraw funds after unlock.\n', '    * @param _owner The contract owner.\n', '  */\n', '  constructor(uint _expiration, address _beneficiary, address _owner) public {\n', '    expiration = _expiration;\n', '    beneficiary = _beneficiary;\n', '    transferOwnership(_owner);\n', '  }\n', '\n', '  /*** VIEW/PURE FUNCTIONS ***/\n', '\n', '  /**\n', '    * @dev Returns the length of the tokenLUT array.\n', '  */\n', '  function getTokenSize() public view returns(uint) {\n', '    return tokenLUT.length;\n', '  }\n', '\n', '  /*** OTHER FUNCTIONS ***/\n', '\n', '  /**\n', '    * @dev Allows a user to deposit ETH or an ERC20 into the contract.\n', '           If _token is 0 address, deposit ETH.\n', '    * @param _amount The amount to deposit.\n', '    * @param _token The token to deposit.\n', '  */\n', '  function deposit(uint _amount, address _token) public payable {\n', '    if(_token == address(0)) {\n', "      require(msg.value == _amount, 'incorrect amount');\n", '      if(!tokens[_token]) {\n', '        tokenLUT.push(_token);\n', '        tokens[_token] = true;\n', '      }\n', '      emit Deposit(msg.sender, _amount, _token);\n', '    }\n', '    else {\n', '      IERC20 token = IERC20(_token);\n', "      require(token.transferFrom(msg.sender, address(this), _amount), 'transfer failed');\n", '      if(!tokens[_token]) {\n', '        tokenLUT.push(_token);\n', '        tokens[_token] = true;\n', '      }\n', '      emit Deposit(msg.sender, _amount, _token);\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @dev Withdraw funds to msg.sender, but only if the timelock is expired\n', '           and msg.sender is the beneficiary.\n', '           If _token is 0 address, withdraw ETH.\n', '    * @param _amount The amount to withdraw.\n', '    * @param _token The token to withdraw.\n', '  */\n', '  function withdraw(uint _amount, address _token) public isExpired() onlyBeneficiary() {\n', '    if(_token == address(0)) {\n', '      (bool success, ) = msg.sender.call.value(_amount)("");\n', '      require(success, "Transfer failed.");\n', '      emit Withdraw(msg.sender, _amount, _token);\n', '    } else {\n', '      IERC20 token = IERC20(_token);\n', "      require(token.transfer(msg.sender, _amount), 'transfer failed');\n", '      emit Withdraw(msg.sender, _amount, _token);\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @dev Increase the time until expiration. Only the owner can perform this.\n', '    * @param _newExpiration New date time in seconds when timelock expires.\n', '  */\n', '  function increaseTime(uint _newExpiration) public onlyOwner() {\n', "    require(_newExpiration > expiration, 'can only increase expiration');\n", '    expiration = _newExpiration;\n', '    emit IncreaseTime(_newExpiration);\n', '  }\n', '\n', '  /**\n', '    * @dev Update the beneficiary address. Only the owner can perform this.\n', '    * @param _newBeneficiary New beneficiary address.\n', '  */\n', '  function updateBeneficiary(address _newBeneficiary) public onlyOwner() {\n', "    require(_newBeneficiary != beneficiary, 'same beneficiary');\n", "    require(_newBeneficiary != address(0), 'cannot set as burn address');\n", '    beneficiary = _newBeneficiary;\n', '    emit UpdateBeneficiary(_newBeneficiary);\n', '  }\n', '}\n', '\n', '// File: contracts\\TTTdefiFundFactoryV2.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', 'contract TTTdefiFundFactoryV2 {\n', '  /*** STORAGE VARIABLES ***/\n', '\n', '  /**\n', '    * @notice Maps unique IDs to funds.\n', '  */\n', '  mapping(uint => address) funds;\n', '\n', '  /**\n', '    * @notice Maps user address to their corresponding funds.\n', '  */\n', '  mapping(address => uint[]) userFunds;\n', '\n', '  /**\n', '    * @notice Get the next fund ID.\n', '  */\n', '  uint public nextId;\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /**\n', '    * @notice Emits when a fund is created.\n', '  */\n', '  event CreateFund(\n', '    uint expiration,\n', '    address indexed beneficiary,\n', '    address indexed owner\n', '  );\n', '\n', '  /*** PURE/VIEW FUNCTIONS ***/\n', '\n', '  /**\n', '    * @dev Given an id, return the corresponding fund address.\n', '    * @param _id The id of the fund.\n', '  */\n', '  function getFund(uint _id) public view returns(address) {\n', '    return funds[_id];\n', '  }\n', '\n', '  /**\n', '    * @dev Given a user address, return all owned funds.\n', '    * @param _user The address of the user.\n', '  */\n', '  function getUserFunds(address _user) public view returns(uint[] memory) {\n', '    return userFunds[_user];\n', '  }\n', '\n', '  /*** OTHER FUNCTIONS ***/\n', '\n', '  /**\n', '    * @dev Deploy a TTTdefiFund contract.\n', '    * @param _expiration Date time in seconds when timelock expires.\n', '    * @param _beneficiary Address permitted to withdraw funds after unlock.\n', '  */\n', '  function createFund(uint _expiration, address _beneficiary) public {\n', "    require(funds[nextId] == address(0), 'id already in use');\n", "    require(_beneficiary != address(0), 'beneficiary is burn address');\n", '    TTTdefiFundV2 fund = new TTTdefiFundV2(_expiration, _beneficiary, msg.sender);\n', '    funds[nextId] = address(fund);\n', '    userFunds[msg.sender].push(nextId);\n', '    nextId++;\n', '    emit CreateFund(_expiration, _beneficiary, msg.sender);\n', '  }\n', '}']