['// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Zapper\n', '///@notice This contract adds/removes liquidity to/from yEarn Vaults using ETH or ERC20 Tokens.\n', '// SPDX-License-Identifier: GPLv2\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: yVault_ZapInOut_General_V1_2.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'interface IUniswapRouter02 {\n', '    //get estimated amountOut\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    //token 2 token\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    //eth 2 token\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    //token 2 eth\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface yVault {\n', '    function deposit(uint256) external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '}\n', '\n', 'interface ICurveZapInGeneral {\n', '    function ZapIn(\n', '        address _toWhomToIssue,\n', '        address _IncomingTokenAddress,\n', '        address _curvePoolExchangeAddress,\n', '        uint256 _IncomingTokenQty,\n', '        uint256 _minPoolTokens\n', '    ) external payable returns (uint256 crvTokensBought);\n', '}\n', '\n', 'interface ICurveZapOutGeneral {\n', '    function ZapOut(\n', '        address payable _toWhomToIssue,\n', '        address _curveExchangeAddress,\n', '        uint256 _tokenCount,\n', '        uint256 _IncomingCRV,\n', '        address _ToTokenAddress,\n', '        uint256 _minToTokens\n', '    ) external returns (uint256 ToTokensBought);\n', '}\n', '\n', 'interface IAaveLendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '\n', '    function getLendingPoolCore() external view returns (address payable);\n', '}\n', '\n', 'interface IAaveLendingPool {\n', '    function deposit(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint16 _referralCode\n', '    ) external payable;\n', '}\n', '\n', 'interface IAToken {\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function underlyingAssetAddress() external returns (address);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'contract yVault_ZapInOut_General_V1_4_1 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '    bool public stopped = false;\n', '    uint16 public goodwill;\n', '\n', '    IUniswapV2Factory\n', '        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '\n', '    ICurveZapInGeneral public CurveZapInGeneral = ICurveZapInGeneral(\n', '        0xcCdd1f20Fd50DD63849A87994bdD11806e4363De\n', '    );\n', '    ICurveZapOutGeneral public CurveZapOutGeneral = ICurveZapOutGeneral(\n', '        0x4bF331Aa2BfB0869315fB81a350d109F4839f81b\n', '    );\n', '\n', '    IAaveLendingPoolAddressesProvider\n', '        private constant lendingPoolAddressProvider = IAaveLendingPoolAddressesProvider(\n', '        0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n', '    );\n', '\n', '    address\n', '        private constant yCurveExchangeAddress = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\n', '    address\n', '        private constant sBtcCurveExchangeAddress = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\n', '    address\n', '        private constant bUSDCurveExchangeAddress = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB;\n', '\n', '    address\n', '        private constant threeCurveExchangeAddress = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n', '\n', '    address\n', '        private constant yCurvePoolTokenAddress = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\n', '    address\n', '        private constant sBtcCurvePoolTokenAddress = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\n', '    address\n', '        private constant bUSDCurvePoolTokenAddress = 0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B;\n', '\n', '    address\n', '        private constant threeCurvePoolTokenAddress = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n', '\n', '    mapping(address => address) internal token2Exchange;\n', '\n', '    address\n', '        private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address\n', '        private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address\n', '        private constant zgoodwillAddress = 0xE737b6AfEC2320f616297e59445b60a11e3eF75F;\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    event Zapin(\n', '        address _toWhomToIssue,\n', '        address _toYVaultAddress,\n', '        uint256 _Outgoing\n', '    );\n', '\n', '    event Zapout(\n', '        address _toWhomToIssue,\n', '        address _fromYVaultAddress,\n', '        address _toTokenAddress,\n', '        uint256 _tokensRecieved\n', '    );\n', '\n', '    constructor(uint16 _goodwill) public {\n', '        goodwill = _goodwill;\n', '\n', '        token2Exchange[yCurvePoolTokenAddress] = yCurveExchangeAddress;\n', '        token2Exchange[bUSDCurvePoolTokenAddress] = bUSDCurveExchangeAddress;\n', '        token2Exchange[sBtcCurvePoolTokenAddress] = sBtcCurveExchangeAddress;\n', '    }\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function updateCurveZapIn(address CurveZapInGeneralAddress)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(CurveZapInGeneralAddress != address(0), "Invalid Address");\n', '        CurveZapInGeneral = ICurveZapInGeneral(CurveZapInGeneralAddress);\n', '    }\n', '\n', '    function updateCurveZapOut(address CurveZapOutGeneralAddress)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(CurveZapOutGeneralAddress != address(0), "Invalid Address");\n', '        CurveZapOutGeneral = ICurveZapOutGeneral(CurveZapOutGeneralAddress);\n', '    }\n', '\n', '    function addNewCurveExchange(\n', '        address curvePoolToken,\n', '        address curveExchangeAddress\n', '    ) public onlyOwner {\n', '        require(\n', '            curvePoolToken != address(0) && curveExchangeAddress != address(0),\n', '            "Invalid Address"\n', '        );\n', '        token2Exchange[curvePoolToken] = curveExchangeAddress;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to add liquidity to yVaults\n', '    @param _toWhomToIssue recipient address\n', '    @param _toYVaultAddress The address of vault to add liquidity to\n', '    @param _vaultType Type of underlying token: 0 token; 1 aToken; 2 LP token\n', '    @param _fromTokenAddress The token used for investment (address(0x00) if ether)\n', '    @param _amount The amount of ERC to invest\n', '    @param _minYTokens for slippage\n', '    @return yTokensRec\n', '     */\n', '    function ZapIn(\n', '        address _toWhomToIssue,\n', '        address _toYVaultAddress,\n', '        uint16 _vaultType,\n', '        address _fromTokenAddress,\n', '        uint256 _amount,\n', '        uint256 _minYTokens\n', '    ) public payable nonReentrant stopInEmergency returns (uint256) {\n', '        yVault vaultToEnter = yVault(_toYVaultAddress);\n', '        address underlyingVaultToken = vaultToEnter.token();\n', '\n', '        if (_fromTokenAddress == address(0)) {\n', '            require(msg.value > 0, "ERR: No ETH sent");\n', '        } else {\n', '            require(_amount > 0, "Err: No Tokens Sent");\n', '            require(msg.value == 0, "ERR: ETH sent with Token");\n', '\n', '            IERC20(_fromTokenAddress).safeTransferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                _amount\n', '            );\n', '        }\n', '\n', '        uint256 iniYTokensBal = IERC20(address(vaultToEnter)).balanceOf(\n', '            address(this)\n', '        );\n', '\n', '        if (underlyingVaultToken == _fromTokenAddress) {\n', '            IERC20(underlyingVaultToken).safeApprove(\n', '                address(vaultToEnter),\n', '                _amount\n', '            );\n', '            vaultToEnter.deposit(_amount);\n', '        } else {\n', '            // Curve Vaults\n', '            if (_vaultType == 2) {\n', '\n', '                    address curveExchangeAddr\n', '                 = token2Exchange[underlyingVaultToken];\n', '\n', '                uint256 tokensBought;\n', '                if (_fromTokenAddress == address(0)) {\n', '                    tokensBought = CurveZapInGeneral.ZapIn{value: msg.value}(\n', '                        address(this),\n', '                        address(0),\n', '                        curveExchangeAddr,\n', '                        msg.value,\n', '                        0\n', '                    );\n', '                } else {\n', '                    IERC20(_fromTokenAddress).safeApprove(\n', '                        address(CurveZapInGeneral),\n', '                        _amount\n', '                    );\n', '                    tokensBought = CurveZapInGeneral.ZapIn(\n', '                        address(this),\n', '                        _fromTokenAddress,\n', '                        curveExchangeAddr,\n', '                        _amount,\n', '                        0\n', '                    );\n', '                }\n', '\n', '                IERC20(underlyingVaultToken).safeApprove(\n', '                    address(vaultToEnter),\n', '                    tokensBought\n', '                );\n', '                vaultToEnter.deposit(tokensBought);\n', '            } else if (_vaultType == 1) {\n', '                address underlyingAsset = IAToken(underlyingVaultToken)\n', '                    .underlyingAssetAddress();\n', '\n', '                uint256 tokensBought;\n', '                if (_fromTokenAddress == address(0)) {\n', '                    tokensBought = _eth2Token(underlyingAsset);\n', '                } else {\n', '                    tokensBought = _token2Token(\n', '                        _fromTokenAddress,\n', '                        underlyingAsset,\n', '                        _amount\n', '                    );\n', '                }\n', '\n', '                IERC20(underlyingAsset).safeApprove(\n', '                    lendingPoolAddressProvider.getLendingPoolCore(),\n', '                    tokensBought\n', '                );\n', '\n', '                IAaveLendingPool(lendingPoolAddressProvider.getLendingPool())\n', '                    .deposit(underlyingAsset, tokensBought, 0);\n', '\n', '                uint256 aTokensBought = IERC20(underlyingVaultToken).balanceOf(\n', '                    address(this)\n', '                );\n', '                IERC20(underlyingVaultToken).safeApprove(\n', '                    address(vaultToEnter),\n', '                    aTokensBought\n', '                );\n', '                vaultToEnter.deposit(aTokensBought);\n', '            } else {\n', '                uint256 tokensBought;\n', '                if (_fromTokenAddress == address(0)) {\n', '                    tokensBought = _eth2Token(underlyingVaultToken);\n', '                } else {\n', '                    tokensBought = _token2Token(\n', '                        _fromTokenAddress,\n', '                        underlyingVaultToken,\n', '                        _amount\n', '                    );\n', '                }\n', '\n', '                IERC20(underlyingVaultToken).safeApprove(\n', '                    address(vaultToEnter),\n', '                    tokensBought\n', '                );\n', '                vaultToEnter.deposit(tokensBought);\n', '            }\n', '        }\n', '\n', '        uint256 yTokensRec = IERC20(address(vaultToEnter))\n', '            .balanceOf(address(this))\n', '            .sub(iniYTokensBal);\n', '        require(yTokensRec >= _minYTokens, "High Slippage");\n', '\n', '        //transfer goodwill\n', '        uint256 goodwillPortion = _transferGoodwill(\n', '            address(vaultToEnter),\n', '            yTokensRec\n', '        );\n', '\n', '        IERC20(address(vaultToEnter)).safeTransfer(\n', '            _toWhomToIssue,\n', '            yTokensRec.sub(goodwillPortion)\n', '        );\n', '\n', '        emit Zapin(\n', '            _toWhomToIssue,\n', '            address(vaultToEnter),\n', '            yTokensRec.sub(goodwillPortion)\n', '        );\n', '\n', '        return (yTokensRec.sub(goodwillPortion));\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to remove liquidity from yVaults\n', '    @param _toWhomToIssue recipient address\n', '    @param _ToTokenContractAddress The address of the token to withdraw\n', '    @param _fromYVaultAddress The address of the vault to exit\n', '    @param _vaultType Type of underlying token: 0 token; 1 aToken; 2 LP token\n', '    @param _IncomingAmt The amount of vault tokens removed\n', '    @param _minTokensRec for slippage\n', '    @return toTokensReceived\n', '     */\n', '    function ZapOut(\n', '        address _toWhomToIssue,\n', '        address _ToTokenContractAddress,\n', '        address _fromYVaultAddress,\n', '        uint16 _vaultType,\n', '        uint256 _IncomingAmt,\n', '        uint256 _minTokensRec\n', '    ) public nonReentrant stopInEmergency returns (uint256) {\n', '        yVault vaultToExit = yVault(_fromYVaultAddress);\n', '        address underlyingVaultToken = vaultToExit.token();\n', '\n', '        IERC20(address(vaultToExit)).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _IncomingAmt\n', '        );\n', '\n', '        uint256 goodwillPortion = _transferGoodwill(\n', '            address(vaultToExit),\n', '            _IncomingAmt\n', '        );\n', '\n', '        vaultToExit.withdraw(_IncomingAmt.sub(goodwillPortion));\n', '        uint256 underlyingReceived = IERC20(underlyingVaultToken).balanceOf(\n', '            address(this)\n', '        );\n', '\n', '        uint256 toTokensReceived;\n', '        if (_ToTokenContractAddress == underlyingVaultToken) {\n', '            IERC20(underlyingVaultToken).safeTransfer(\n', '                _toWhomToIssue,\n', '                underlyingReceived\n', '            );\n', '            toTokensReceived = underlyingReceived;\n', '        } else {\n', '            if (_vaultType == 2) {\n', '                toTokensReceived = _withdrawFromCurve(\n', '                    underlyingVaultToken,\n', '                    underlyingReceived,\n', '                    _toWhomToIssue,\n', '                    _ToTokenContractAddress,\n', '                    0\n', '                );\n', '            } else if (_vaultType == 1) {\n', '                // unwrap atoken\n', '                IAToken(underlyingVaultToken).redeem(underlyingReceived);\n', '                address underlyingAsset = IAToken(underlyingVaultToken)\n', '                    .underlyingAssetAddress();\n', '\n', '                // swap\n', '                if (_ToTokenContractAddress == address(0)) {\n', '                    toTokensReceived = _token2Eth(\n', '                        underlyingAsset,\n', '                        underlyingReceived,\n', '                        payable(_toWhomToIssue)\n', '                    );\n', '                } else {\n', '                    toTokensReceived = _token2Token(\n', '                        underlyingAsset,\n', '                        _ToTokenContractAddress,\n', '                        underlyingReceived\n', '                    );\n', '                    IERC20(_ToTokenContractAddress).safeTransfer(\n', '                        _toWhomToIssue,\n', '                        toTokensReceived\n', '                    );\n', '                }\n', '            } else {\n', '                if (_ToTokenContractAddress == address(0)) {\n', '                    toTokensReceived = _token2Eth(\n', '                        underlyingVaultToken,\n', '                        underlyingReceived,\n', '                        payable(_toWhomToIssue)\n', '                    );\n', '                } else {\n', '                    toTokensReceived = _token2Token(\n', '                        underlyingVaultToken,\n', '                        _ToTokenContractAddress,\n', '                        underlyingReceived\n', '                    );\n', '\n', '                    IERC20(_ToTokenContractAddress).safeTransfer(\n', '                        _toWhomToIssue,\n', '                        toTokensReceived\n', '                    );\n', '                }\n', '            }\n', '        }\n', '\n', '        require(toTokensReceived >= _minTokensRec, "High Slippage");\n', '\n', '        emit Zapout(\n', '            _toWhomToIssue,\n', '            _fromYVaultAddress,\n', '            _ToTokenContractAddress,\n', '            toTokensReceived\n', '        );\n', '\n', '        return toTokensReceived;\n', '    }\n', '\n', '    function _withdrawFromCurve(\n', '        address _CurvePoolToken,\n', '        uint256 _tokenAmt,\n', '        address _toWhomToIssue,\n', '        address _ToTokenContractAddress,\n', '        uint256 _minTokensRec\n', '    ) internal returns (uint256) {\n', '        IERC20(_CurvePoolToken).safeApprove(\n', '            address(CurveZapOutGeneral),\n', '            _tokenAmt\n', '        );\n', '\n', '        address curveExchangeAddr = token2Exchange[_CurvePoolToken];\n', '        uint256 tokenCount = 4;\n', '\n', '        if (curveExchangeAddr == sBtcCurveExchangeAddress) {\n', '            tokenCount = 3;\n', '        }\n', '\n', '        return (\n', '            CurveZapOutGeneral.ZapOut(\n', '                payable(_toWhomToIssue),\n', '                curveExchangeAddr,\n', '                tokenCount,\n', '                _tokenAmt,\n', '                _ToTokenContractAddress,\n', '                _minTokensRec\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to swap eth for tokens\n', '    @param _tokenContractAddress Token address which we want to buy\n', '    @return tokensBought The quantity of token bought\n', '     */\n', '    function _eth2Token(address _tokenContractAddress)\n', '        internal\n', '        returns (uint256 tokensBought)\n', '    {\n', '        if (_tokenContractAddress == wethTokenAddress) {\n', '            IWETH(wethTokenAddress).deposit{value: msg.value}();\n', '            return msg.value;\n', '        }\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = wethTokenAddress;\n', '        path[1] = _tokenContractAddress;\n', '        tokensBought = uniswapRouter.swapExactETHForTokens{value: msg.value}(\n', '            1,\n', '            path,\n', '            address(this),\n', '            deadline\n', '        )[path.length - 1];\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to swap tokens\n', '    @param _FromTokenContractAddress The token address to swap from\n', '    @param _ToTokenContractAddress The token address to swap to\n', '    @param tokens2Trade The amount of tokens to swap\n', '    @return tokenBought The quantity of tokens bought\n', '    */\n', '    function _token2Token(\n', '        address _FromTokenContractAddress,\n', '        address _ToTokenContractAddress,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 tokenBought) {\n', '        if (_FromTokenContractAddress == _ToTokenContractAddress) {\n', '            return tokens2Trade;\n', '        }\n', '\n', '        IERC20(_FromTokenContractAddress).safeApprove(\n', '            address(uniswapRouter),\n', '            tokens2Trade\n', '        );\n', '\n', '        if (_FromTokenContractAddress != wethTokenAddress) {\n', '            if (_ToTokenContractAddress != wethTokenAddress) {\n', '                address[] memory path = new address[](3);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '                path[2] = _ToTokenContractAddress;\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    address(this),\n', '                    deadline\n', '                )[path.length - 1];\n', '            } else {\n', '                address[] memory path = new address[](2);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    address(this),\n', '                    deadline\n', '                )[path.length - 1];\n', '            }\n', '        } else {\n', '            address[] memory path = new address[](2);\n', '            path[0] = wethTokenAddress;\n', '            path[1] = _ToTokenContractAddress;\n', '            tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                tokens2Trade,\n', '                1,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            )[path.length - 1];\n', '        }\n', '    }\n', '\n', '    function _token2Eth(\n', '        address _FromTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        address payable _toWhomToIssue\n', '    ) internal returns (uint256) {\n', '        if (_FromTokenContractAddress == wethTokenAddress) {\n', '            IWETH(wethTokenAddress).withdraw(tokens2Trade);\n', '            _toWhomToIssue.transfer(tokens2Trade);\n', '            return tokens2Trade;\n', '        }\n', '\n', '        IERC20(_FromTokenContractAddress).safeApprove(\n', '            address(uniswapRouter),\n', '            tokens2Trade\n', '        );\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = _FromTokenContractAddress;\n', '        path[1] = wethTokenAddress;\n', '        uint256 ethBought = uniswapRouter.swapExactTokensForETH(\n', '            tokens2Trade,\n', '            1,\n', '            path,\n', '            _toWhomToIssue,\n', '            deadline\n', '        )[path.length - 1];\n', '\n', '        return ethBought;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to calculate and transfer goodwill\n', '    @param _tokenContractAddress Token in which goodwill is deducted\n', '    @param tokens2Trade The total amount of tokens to be zapped in\n', '    @return goodwillPortion The quantity of goodwill deducted\n', '     */\n', '    function _transferGoodwill(\n', '        address _tokenContractAddress,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 goodwillPortion) {\n', '        goodwillPortion = SafeMath.div(\n', '            SafeMath.mul(tokens2Trade, goodwill),\n', '            10000\n', '        );\n', '\n', '        if (goodwillPortion == 0) {\n', '            return 0;\n', '        }\n', '\n', '        IERC20(_tokenContractAddress).safeTransfer(\n', '            zgoodwillAddress,\n', '            goodwillPortion\n', '        );\n', '    }\n', '\n', '    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\n', '        require(\n', '            _new_goodwill >= 0 && _new_goodwill < 10000,\n', '            "GoodWill Value not allowed"\n', '        );\n', '        goodwill = _new_goodwill;\n', '    }\n', '\n', '    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\n', '        uint256 qty = _TokenAddress.balanceOf(address(this));\n', '        IERC20(address(_TokenAddress)).safeTransfer(owner(), qty);\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() public onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    // - to withdraw any ETH balance sitting in the contract\n', '    function withdraw() public onlyOwner {\n', '        uint256 contractBalance = address(this).balance;\n', '        address payable _to = payable(owner());\n', '        _to.transfer(contractBalance);\n', '    }\n', '\n', '    receive() external payable {\n', '        require(msg.sender != tx.origin, "Do not send ETH directly");\n', '    }\n', '}']