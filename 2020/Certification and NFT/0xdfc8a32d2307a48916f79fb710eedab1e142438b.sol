['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: contracts/oracleIterators/IOracleIterator.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IOracleIterator {\n', '    /// @notice Proof of oracle iterator contract\n', '    /// @dev Verifies that contract is a oracle iterator contract\n', '    /// @return true if contract is a oracle iterator contract\n', '    function isOracleIterator() external pure returns(bool);\n', '\n', '    /// @notice Symbol of the oracle iterator\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    //  finds the value closest to a given timestamp\n', '    /// @param _oracle iteratable oracle through\n', '    /// @param _timestamp a given timestamp\n', '    /// @param _roundHints specified rounds for a given timestamp\n', '    /// @return the value closest to a given timestamp\n', '    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) external view returns(int);\n', '}\n', '\n', '// File: contracts/oracleIterators/ChainlinkOracleIterator.sol\n', '\n', '// "SPDX-License-Identifier: GNU General Public License v3.0"\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '\n', 'contract ChainlinkOracleIterator is IOracleIterator {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private PHASE_OFFSET = 64;\n', '    int public constant NEGATIVE_INFINITY = type(int256).min;\n', '\n', '    function isOracleIterator() external override pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    function symbol() external override view returns (string memory) {\n', '        return "ChainlinkIterator";\n', '    }\n', '\n', '    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) public override view returns(int) {\n', '        require(_timestamp > 0, "Zero timestamp");\n', '        require(_oracle != address(0), "Zero oracle");\n', '        require(_roundHints.length == 1, "Wrong number of hints");\n', '        AggregatorV3Interface oracle = AggregatorV3Interface(_oracle);\n', '\n', '        uint80 latestRoundId;\n', '        (latestRoundId,,,,) = oracle.latestRoundData();\n', '\n', '        uint256 phaseId;\n', '        (phaseId,) = parseIds(latestRoundId);\n', '\n', '        uint80 roundHint = uint80(_roundHints[0]);\n', '        require(roundHint > 0, "Zero hint");\n', '        requirePhaseFor(roundHint, phaseId);\n', '\n', '        int256 hintAnswer;\n', '        uint256 hintTimestamp;\n', '        (,hintAnswer,,hintTimestamp,) = oracle.getRoundData(roundHint);\n', '\n', '        if(hintTimestamp == 0 || hintTimestamp > _timestamp) {\n', "            revert('Incorrect hint');\n", '        }\n', '\n', '        uint256 timestampNext = 0;\n', '        if(roundHint + 1 <= latestRoundId) {\n', '            (,,,timestampNext,) = oracle.getRoundData(roundHint + 1);\n', '            if(timestampNext > 0 && timestampNext <= _timestamp) {\n', '                revert("Later round exists");\n', '            }\n', '        }\n', '\n', '        if(timestampNext == 0 || (timestampNext > 0 && timestampNext > _timestamp)){\n', '            return hintAnswer;\n', '        }\n', '\n', '        return NEGATIVE_INFINITY;\n', '    }\n', '\n', '    function requirePhaseFor(uint80 _roundHint, uint256 _phase)\n', '    internal\n', '    pure\n', '    {\n', '        uint256 currentPhaseId;\n', '        (currentPhaseId,) = parseIds(_roundHint);\n', '        require(currentPhaseId == _phase, "Wrong hint phase");\n', '    }\n', '\n', '    function parseIds(\n', '        uint256 _roundId\n', '    )\n', '    internal\n', '    pure\n', '    returns (uint16, uint64)\n', '    {\n', '        uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\n', '        uint64 aggregatorRoundId = uint64(_roundId);\n', '\n', '        return (phaseId, aggregatorRoundId);\n', '    }\n', '}']