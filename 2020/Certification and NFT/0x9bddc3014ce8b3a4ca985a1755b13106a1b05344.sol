['// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/access/Roles.sol\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistAdminRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    constructor () internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/access/WhitelistedRole.sol\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @notice copied from openzeppelin-solidity\n', ' * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n', ' * it), and not Whitelisteds themselves.\n', ' */\n', 'contract WhitelistedRole is Context, WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(_msgSender()), "WhitelistedRole: caller does not have the Whitelisted role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(_msgSender());\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/transferController/TransferController.sol\n', '\n', '/**\n', ' * @title TransferController\n', ' * @dev This contract contains the logic that enforces KYC transferability rules as outlined by a securities commission\n', '*/\n', 'interface TransferController {\n', '\n', '    /**\n', '     * @dev Check if tokenAmount of token can be transfered from from address to to address, initiatied by initiator address\n', '     * @param from address the ether address of sender\n', '     * @param to address the ether address of receiver\n', '     * @param initiator ether address of the original transaction initiator\n', '     * @param tokenAddress ether address of the token contract\n', '     * @param tokenAmount uint256 the amount of token you want to transfer\n', '     * @return 0 if successful, positive integer if error occurred\n', '     */\n', '    function check(address from, address to, address initiator, address tokenAddress, uint256 tokenAmount) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/transferController/SpecificAddressTransferController.sol\n', '\n', '\n', '\n', '/**\n', ' * @title SpecificAddressTransferController\n', ' * @dev Allow transfer only to and from certain addresses\n', '*/\n', 'contract SpecificAddressTransferController is TransferController, WhitelistedRole {\n', '\n', '    // Only address in this mapping can be the sender\n', '    mapping(address => bool) public _allowFromMapping;\n', '\n', '    constructor() public {\n', '        _addWhitelisted(msg.sender);\n', '    }\n', '\n', '    function addAllowedFrom(address from) external onlyWhitelisted {\n', '        _allowFromMapping[from] = true;\n', '    }\n', '\n', '    function removeAllowedFrom(address from) external onlyWhitelisted {\n', '        _allowFromMapping[from] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Only allow transfers to and from allowed addresses\n', '     * @param from address the ether address of sender\n', '     * @param to address the ether address of receiver\n', '     * @return 0 if successful, positive integer if error occurred\n', '     */\n', '    function check(\n', '        address from,\n', '        address to,\n', '        address /*initiator*/,\n', '        address /*tokenAddress*/,\n', '        uint256 /*tokenAmount*/\n', '    ) external virtual override view returns (uint256) {\n', '        if (_allowFromMapping[from] == false && _allowFromMapping[to] == false) {\n', '            return 500;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '}']