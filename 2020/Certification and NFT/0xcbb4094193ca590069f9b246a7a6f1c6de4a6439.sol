['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '/**\n', ' * @dev Allow tokens to be transferred to contracts and have the contract trigger logic for how to respond to receiving the tokens within a single transaction.\n', ' * https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'interface Callable {\n', '  function tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   *\n', '   * _Available since v2.4.0._\n', '   */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   *\n', '   * _Available since v2.4.0._\n', '   */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   *\n', '   * _Available since v2.4.0._\n', '   */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '  using SafeMath for uint256;\n', '\n', '  struct Counter {\n', '    // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '    // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '    uint256 _value; // default: 0\n', '  }\n', '\n', '  function current(Counter storage counter) internal view returns (uint256) {\n', '    return counter._value;\n', '  }\n', '\n', '  function increment(Counter storage counter) internal {\n', '    // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '    counter._value += 1;\n', '  }\n', '\n', '  function decrement(Counter storage counter) internal {\n', '    counter._value = counter._value.sub(1);\n', '  }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '  // Empty internal constructor, to prevent people from mistakenly deploying\n', '  // an instance of this contract, which should be used via inheritance.\n', '  constructor () internal {}\n', '  // solhint-disable-previous-line no-empty-blocks\n', '\n', '  function _msgSender() internal view returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view returns (bytes memory) {\n', '    this;\n', '    // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '  /**\n', '   * @dev Returns true if this contract implements the interface defined by\n', '   * `interfaceId`. See the corresponding\n', '   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '   * to learn more about how these ids are created.\n', '   *\n', '   * This function call must use less than 30 000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n', '  public returns (bytes4);\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'contract IERC721 is IERC165 {\n', '  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '  /**\n', "   * @dev Returns the number of NFTs in `owner`'s account.\n", '   */\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '\n', '  /**\n', '   * @dev Returns the owner of the NFT specified by `tokenId`.\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  /**\n', '   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   *\n', '   *\n', '   * Requirements:\n', '   * - `from`, `to` cannot be zero.\n', '   * - `tokenId` must be owned by `from`.\n', '   * - If the caller is not `from`, it must be have been allowed to move this\n', '   * NFT by either {approve} or {setApprovalForAll}.\n', '   */\n', '  function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '  /**\n', '   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Requirements:\n', '   * - If the caller is not `from`, it must be approved to move this NFT by\n', '   * either {approve} or {setApprovalForAll}.\n', '   */\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '\n', '  function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '\n', '  function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '\n', '  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string memory);\n', '\n', '  function symbol() external view returns (string memory);\n', '\n', '  function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '  /**\n', '   * @dev Returns true if `account` is a contract.\n', '   *\n', '   * [IMPORTANT]\n', '   * ====\n', '   * It is unsafe to assume that an address for which this function returns\n', '   * false is an externally-owned account (EOA) and not a contract.\n', '   *\n', '   * Among others, `isContract` will return false for the following\n', '   * types of addresses:\n', '   *\n', '   *  - an externally-owned account\n', '   *  - a contract in construction\n', '   *  - an address where a contract will be created\n', '   *  - an address where a contract lived, but was destroyed\n', '   * ====\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "    // for accounts without code, i.e. `keccak256('')`\n", '    bytes32 codehash;\n', '    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '    // solhint-disable-next-line no-inline-assembly\n', '    assembly {codehash := extcodehash(account)}\n', '    return (codehash != accountHash && codehash != 0x0);\n', '  }\n', '\n', '  /**\n', '   * @dev Converts an `address` into `address payable`. Note that this is\n', '   * simply a type cast: the actual underlying value is not changed.\n', '   *\n', '   * _Available since v2.4.0._\n', '   */\n', '  function toPayable(address account) internal pure returns (address payable) {\n', '    return address(uint160(account));\n', '  }\n', '\n', '  /**\n', "   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '   * `recipient`, forwarding all available gas and reverting on errors.\n', '   *\n', '   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '   * imposed by `transfer`, making them unable to receive funds via\n', '   * `transfer`. {sendValue} removes this limitation.\n', '   *\n', '   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '   *\n', '   * IMPORTANT: because control is transferred to `recipient`, care must be\n', '   * taken to not create reentrancy vulnerabilities. Consider using\n', '   * {ReentrancyGuard} or the\n', '   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '   *\n', '   * _Available since v2.4.0._\n', '   */\n', '  function sendValue(address payable recipient, uint256 amount) internal {\n', '    require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '    // solhint-disable-next-line avoid-call-value\n', '    (bool success,) = recipient.call.value(amount)("");\n', '    require(success, "Address: unable to send value, recipient may have reverted");\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '  /*\n', "   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '   */\n', '  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '  /**\n', "   * @dev Mapping of interface ids to whether or not it's supported.\n", '   */\n', '  mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '  constructor () internal {\n', '    // Derived contracts need only register support for their own interfaces,\n', '    // we register support for ERC165 itself here\n', '    _registerInterface(_INTERFACE_ID_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC165-supportsInterface}.\n', '   *\n', '   * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev Registers the contract as an implementer of the interface defined by\n', '   * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '   * registering its interface id is not required.\n', '   *\n', '   * See {IERC165-supportsInterface}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '   */\n', '  function _registerInterface(bytes4 interfaceId) internal {\n', '    require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '  using Counters for Counters.Counter;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping(uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping(uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping(address => Counters.Counter) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping(address => mapping(address => bool)) private _operatorApprovals;\n', '\n', '  /*\n', "   *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "   *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "   *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "   *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "   *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "   *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "   *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "   *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "   *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '   *\n', '   *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '   *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '   */\n', '  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '  constructor () public {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_INTERFACE_ID_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '    return _ownedTokensCount[owner].current();\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID.\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner, "ERC721: approval to current owner");\n', '\n', '    require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '      "ERC721: approve caller is not owner nor approved for all"\n', '    );\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf.\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != _msgSender(), "ERC721: approve to caller");\n', '\n', '    _operatorApprovals[_msgSender()][to] = approved;\n', '    emit ApprovalForAll(_msgSender(), to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner.\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address owner, address operator) public view returns (bool) {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address.\n', '   * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '   * Requires the msg.sender to be the owner, approved, or operator.\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function transferFrom(address from, address to, uint256 tokenId) public {\n', '    //solhint-disable-next-line max-line-length\n', '    require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '    _transferFrom(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg.sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function safeTransferFrom(address from, address to, uint256 tokenId) public {\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the _msgSender() to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n', '    require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '    _safeTransferFrom(from, to, tokenId, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg.sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n', '    _transferFrom(from, to, tokenId);\n', '    require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists.\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return bool whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID.\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   * is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '    require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '    address owner = ownerOf(tokenId);\n', '    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to safely mint a new token.\n', '   * Reverts if the given token ID already exists.\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted\n', '   */\n', '  function _safeMint(address to, uint256 tokenId) internal {\n', '    _safeMint(to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to safely mint a new token.\n', '   * Reverts if the given token ID already exists.\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n', '    _mint(to, tokenId);\n', '    require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token.\n', '   * Reverts if the given token ID already exists.\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0), "ERC721: mint to the zero address");\n', '    require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to].increment();\n', '\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token.\n', '   * Reverts if the token does not exist.\n', '   * Deprecated, use {_burn} instead.\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");\n', '\n', '    _clearApproval(tokenId);\n', '\n', '    _ownedTokensCount[owner].decrement();\n', '    _tokenOwner[tokenId] = address(0);\n', '\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token.\n', '   * Reverts if the token does not exist.\n', '   * @param tokenId uint256 ID of the token being burned\n', '   */\n', '  function _burn(uint256 tokenId) internal {\n', '    _burn(ownerOf(tokenId), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to transfer ownership of a given token ID to another address.\n', '   * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '    require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '    _clearApproval(tokenId);\n', '\n', '    _ownedTokensCount[from].decrement();\n', '    _ownedTokensCount[to].increment();\n', '\n', '    _tokenOwner[tokenId] = to;\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '   * The call is not executed if the target address is not a contract.\n', '   *\n', '   * This is an internal detail of the `ERC721` contract and its use is deprecated.\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return bool whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '  internal returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n', '        IERC721Receiver(to).onERC721Received.selector,\n', '        _msgSender(),\n', '        from,\n', '        tokenId,\n', '        _data\n', '      ));\n', '    if (!success) {\n', '      if (returndata.length > 0) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '          let returndata_size := mload(returndata)\n', '          revert(add(32, returndata), returndata_size)\n', '        }\n', '      } else {\n', '        revert("ERC721: transfer to non ERC721Receiver implementer");\n', '      }\n', '    } else {\n', '      bytes4 retval = abi.decode(returndata, (bytes4));\n', '      return (retval == _ERC721_RECEIVED);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Private function to clear current approval of a given token ID.\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(uint256 tokenId) private {\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  /*\n', "   *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "   *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "   *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '   *\n', '   *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '   */\n', '  bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '  /**\n', '   * @dev Constructor function.\n', '   */\n', '  constructor () public {\n', '    // register the supported interface to conform to ERC721Enumerable via ERC165\n', '    _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n', '    require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract.\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens.\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to transfer ownership of a given token ID to another address.\n', '   * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '    super._transferFrom(from, to, tokenId);\n', '\n', '    _removeTokenFromOwnerEnumeration(from, tokenId);\n', '\n', '    _addTokenToOwnerEnumeration(to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token.\n', '   * Reverts if the given token ID already exists.\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _addTokenToOwnerEnumeration(to, tokenId);\n', '\n', '    _addTokenToAllTokensEnumeration(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token.\n', '   * Reverts if the token does not exist.\n', '   * Deprecated, use {ERC721-_burn} instead.\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    _removeTokenFromOwnerEnumeration(owner, tokenId);\n', '    // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n', '    _ownedTokensIndex[tokenId] = 0;\n', '\n', '    _removeTokenFromAllTokensEnumeration(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the list of token IDs of the requested owner.\n', '   * @param owner address owning the tokens\n', '   * @return uint256[] List of token IDs owned by the requested address\n', '   */\n', '  function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n', '    return _ownedTokens[owner];\n', '  }\n', '\n', '  /**\n', "   * @dev Private function to add a token to this extension's ownership-tracking data structures.\n", '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '    _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '  }\n', '\n', '  /**\n', "   * @dev Private function to add a token to this extension's token tracking data structures.\n", '   * @param tokenId uint256 ID of the token to be added to the tokens list\n', '   */\n', '  function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', "   * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n", '   * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n', '   * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n', '   * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', "    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n", '    // then delete the last slot (swap and pop).\n', '\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '    // When the token to delete is the last token, the swap operation is unnecessary\n', '    if (tokenIndex != lastTokenIndex) {\n', '      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '      _ownedTokens[from][tokenIndex] = lastTokenId;\n', '      // Move the last token to the slot of the to-delete token\n', '      _ownedTokensIndex[lastTokenId] = tokenIndex;\n', "      // Update the moved token's index\n", '    }\n', '\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', "    // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n", '    // lastTokenId, or just over the end of the array if the token was the last one).\n', '  }\n', '\n', '  /**\n', "   * @dev Private function to remove a token from this extension's token tracking data structures.\n", '   * This has O(1) time complexity, but alters the order of the _allTokens array.\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list\n', '   */\n', '  function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '    // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot (swap and pop).\n', '\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '    // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n', '    // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n', "    // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n", '    uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastTokenId;\n', '    // Move the last token to the slot of the to-delete token\n', '    _allTokensIndex[lastTokenId] = tokenIndex;\n', "    // Update the moved token's index\n", '\n', '    // This also deletes the contents at the last position of the array\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '  }\n', '}\n', '\n', 'contract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string private _name;\n', '\n', '  // Token symbol\n', '  string private _symbol;\n', '\n', '  // Base URI\n', '  string private _baseURI;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  /*\n', "   *     bytes4(keccak256('name()')) == 0x06fdde03\n", "   *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '   *\n', '   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '   */\n', '  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor (string memory name, string memory symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name.\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol.\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the URI for a given token ID. May return an empty string.\n', '   *\n', "   * If the token's URI is non-empty and a base URI was set (via\n", "   * {_setBaseURI}), it will be added to the token ID's URI as a prefix.\n", '   *\n', '   * Reverts if the token ID does not exist.\n', '   */\n', '  function tokenURI(uint256 tokenId) external view returns (string memory) {\n', '    require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '    string memory _tokenURI = _tokenURIs[tokenId];\n', '\n', '    // Even if there is a base URI, it is only appended to non-empty token-specific URIs\n', '    if (bytes(_tokenURI).length == 0) {\n', '      return "";\n', '    } else {\n', '      // abi.encodePacked is being used to concatenate strings\n', '      return string(abi.encodePacked(_baseURI, _tokenURI));\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token.\n', '   *\n', '   * Reverts if the token ID does not exist.\n', '   *\n', '   * TIP: if all token IDs share a prefix (e.g. if your URIs look like\n', '   * `http://api.myproject.com/token/<id>`), use {_setBaseURI} to store\n', '   * it and save gas.\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\n', '    require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '    _tokenURIs[tokenId] = _tokenURI;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the base URI for all token IDs. It is\n', '   * automatically added as a prefix to the value returned in {tokenURI}.\n', '   *\n', '   * _Available since v2.5.0._\n', '   */\n', '  function _setBaseURI(string memory baseURI) internal {\n', '    _baseURI = baseURI;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns the base URI set via {_setBaseURI}. This will be\n', "  * automatically added as a preffix in {tokenURI} to each token's URI, when\n", '  * they are non-empty.\n', '  *\n', '  * _Available since v2.5.0._\n', '  */\n', '  function baseURI() external view returns (string memory) {\n', '    return _baseURI;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token.\n', '   * Reverts if the token does not exist.\n', '   * Deprecated, use _burn(uint256) instead.\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor () internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the caller is the current owner.\n', '   */\n', '  function isOwner() public view returns (bool) {\n', '    return _msgSender() == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * @dev This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n', '    // solhint-disable-previous-line no-empty-blocks\n', '  }\n', '}\n', '\n', 'contract BonkNftMinter is ERC721Full, Ownable, Callable {\n', '\n', '  using SafeMath for uint256;\n', '\n', "  // Mapping from token ID to the creator's address.\n", '  mapping(uint256 => address) private tokenCreators;\n', '\n', '  // Counter for creating token IDs\n', '  uint256 private idCounter;\n', '\n', '  // BONK ERC20 token\n', '  IERC20 public bonkToken;\n', '\n', '  // Where to send collected fees\n', '  address public feeCollector;\n', '\n', '  // BONK fee amount with decimals, for example, 1*10**18 means one BONK\n', '  uint256 public bonkFee;\n', '\n', '  // Event indicating metadata was updated.\n', '  event TokenURIUpdated(uint256 indexed _tokenId, string _uri);\n', '\n', '  // Event indicating bonk fee was updated.\n', '  event BonkFeeUpdated(uint256 _newFee, uint _timestamp);\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    address _bonkToken,\n', '    address _feeCollector,\n', '    uint256 _bonkFee\n', '  )\n', '  public\n', '  ERC721Full(_name, _symbol)\n', '  {\n', '    bonkToken = IERC20(_bonkToken);\n', '    feeCollector = _feeCollector;\n', '    bonkFee = _bonkFee;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks that the token is owned by the sender.\n', '   * @param _tokenId uint256 ID of the token.\n', '   */\n', '  modifier onlyTokenOwner(uint256 _tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(owner == msg.sender, "must be the owner of the token");\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Checks that the caller is BONK token.\n', '  */\n', '  modifier onlyBonkToken() {\n', '    require(msg.sender == address(bonkToken), "must be BONK token");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev callback function that is called by BONK token. Adds new NFT token. Trusted.\n', '   * @param _from who sent the tokens.\n', '   * @param _tokens how many tokens were sent.\n', '   * @param _data extra call data.\n', '   * @return success.\n', '   */\n', '  function tokenCallback(address _from, uint256 _tokens, bytes calldata _data)\n', '  external\n', '  onlyBonkToken\n', '  returns (bool) {\n', '    if (bonkFee > 0) {\n', '      uint256 tokensWithTransferFee = _tokens * 100 / 99; // there is 1% fee upon some transfers of BONK\n', '      require(tokensWithTransferFee >= bonkFee, "not enough tokens");\n', '      _forwardBonkTokens();\n', '    }\n', '    _createToken(string(_data), _from);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds a new unique token to the supply.\n', '   * @param _uri string metadata uri associated with the token.\n', '   */\n', '  function addNewToken(string calldata _uri) external {\n', '    if (bonkFee > 0) {\n', '      require(bonkToken.transferFrom(msg.sender, address(this), bonkFee), "fee transferFrom failed");\n', '      _forwardBonkTokens();\n', '    }\n', '    _createToken(_uri, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Deletes the token with the provided ID.\n', '   * @param _tokenId uint256 ID of the token.\n', '   */\n', '  function deleteToken(uint256 _tokenId) external onlyTokenOwner(_tokenId) {\n', '    _burn(msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner of the contract updating the token metadata in case there is a need.\n', '   * @param _tokenId uint256 ID of the token.\n', '   * @param _uri string metadata URI.\n', '   */\n', '  function updateTokenMetadata(uint256 _tokenId, string calldata _uri) external onlyOwner {\n', '    _setTokenURI(_tokenId, _uri);\n', '    emit TokenURIUpdated(_tokenId, _uri);\n', '  }\n', '\n', '  /**\n', '   * @dev change address of BONK token\n', '   * @param _bonkToken address of ERC20 contract\n', '   */\n', '  function setBonkToken(address _bonkToken) external onlyOwner {\n', '    bonkToken = IERC20(_bonkToken);\n', '  }\n', '\n', '  /**\n', '   * @dev change address of where collected fees are sent\n', '   * @param _feeCollector address where to send the fees\n', '   */\n', '  function setFeeCollector(address _feeCollector) external onlyOwner {\n', '    feeCollector = _feeCollector;\n', '  }\n', '\n', '  /**\n', '   * @dev change BONK fee\n', '   * @param _bonkFee new fee in BONK (with decimals)\n', '   */\n', '  function setBonkFee(uint _bonkFee) external onlyOwner {\n', '    bonkFee = _bonkFee;\n', '    emit BonkFeeUpdated(_bonkFee, now);\n', '  }\n', '\n', '  /**\n', '   * @dev allows withdrawal of ETH in case it was sent by accident\n', '   * @param _beneficiary address where to send the eth.\n', '   */\n', '  function withdrawEth(address payable _beneficiary) external onlyOwner {\n', '    _beneficiary.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev allows withdrawal of ERC20 token in case it was sent by accident\n', '   * @param _tokenAddress address of ERC20 token.\n', '   * @param _beneficiary address where to send the tokens.\n', '   * @param _amount amount to send.\n', '   */\n', '  function withdrawERC20(address _tokenAddress, address _beneficiary, uint _amount) external onlyOwner {\n', '    IERC20(_tokenAddress).transfer(_beneficiary, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the current fee in BONK.\n', '  * @return BONK fee.\n', '  */\n', '  function getBonkFee() public view returns (uint256) {\n', '    return bonkFee;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the creator of the token.\n', '  * @param _tokenId uint256 ID of the token.\n', '  * @return address of the creator.\n', '  */\n', '  function tokenCreator(uint256 _tokenId) public view returns (address) {\n', '    return tokenCreators[_tokenId];\n', '  }\n', '\n', '  /**\n', "   * @dev Internal function for setting the token's creator.\n", '   * @param _tokenId uint256 id of the token.\n', '   * @param _creator address of the creator of the token.\n', '   */\n', '  function _setTokenCreator(uint256 _tokenId, address _creator) internal {\n', '    tokenCreators[_tokenId] = _creator;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function creating a new token.\n', '   * @param _uri string metadata uri associated with the token\n', '   * @param _creator address of the creator of the token.\n', '   */\n', '  function _createToken(string memory _uri, address _creator) internal returns (uint256) {\n', '    uint256 newId = idCounter;\n', '    idCounter++;\n', '    _mint(_creator, newId);\n', '    _setTokenURI(newId, _uri);\n', '    _setTokenCreator(newId, _creator);\n', '    return newId;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function for forwarding collected fees to the fee collector.\n', '   */\n', '  function _forwardBonkTokens() internal {\n', '    uint balance = IERC20(bonkToken).balanceOf(address(this));\n', '    require(IERC20(bonkToken).transfer(feeCollector, balance), "fee transfer failed");\n', '  }\n', '}']