['// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ERC20 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', '// ERC20-style token metadata\n', '// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\n', 'struct TokenMetadata {\n', '    address token;\n', '    string name;\n', '    string symbol;\n', '    uint8 decimals;\n', '}\n', '\n', '\n', 'struct Component {\n', '    address token;\n', '    string tokenType;  // "ERC20" by default\n', '    uint256 rate;  // price per full share (1e18)\n', '}\n', '\n', '\n', '\n', 'interface TokenAdapter {\n', '\n', '    /**\n', '     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n', '     * struct TokenMetadata {\n', '     *     address token;\n', '     *     string name;\n', '     *     string symbol;\n', '     *     uint8 decimals;\n', '     * }\n', '     */\n', '    function getMetadata(address token) external view returns (TokenMetadata memory);\n', '\n', '    /**\n', '     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n', '     * struct Component {\n', '     *     address token;    // Address of token contract\n', '     *     string tokenType; // Token type ("ERC20" by default)\n', '     *     uint256 rate;     // Price per share (1e18)\n', '     * }\n', '     */\n', '    function getComponents(address token) external view returns (Component[] memory);\n', '}\n', '\n', '\n', '/**\n', ' * @dev OptionsManagerV2 contract interface.\n', ' * Only the functions required for FinNexusTokenAdapter contract are added.\n', ' */\n', 'interface OptionsManagerV2 {\n', '    function getTokenNetworth() external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @dev FNXOracle contract interface.\n', ' * Only the functions required for FinNexusTokenAdapter contract are added.\n', ' */\n', 'interface FNXOracle {\n', '    function getPrice(address asset) external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Token adapter for FinNexus.\n', ' * @dev Implementation of TokenAdapter interface.\n', ' * @author jeffqg123 <forestjqg@163.com>\n', ' */\n', 'contract FinNexusTokenAdapter is TokenAdapter {\n', '\n', '    address public  constant optManager = 0xfa30ec96De9840A611FcB64e7312f97bdE6e155A;\n', '    address public  constant oracle = 0x940b491905529542Ba3b56244A06B1EBE11e71F2;\n', '\n', '    address[] internal underlyingAddress = [0x0000000000000000000000000000000000000000,0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B,0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48];\n', '                                                           //  ,\n', '                                                           //  ];\n', '    /**\n', '     * @return TokenMetadata struct with ERC20-style token info.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n', '            return TokenMetadata({\n', '                token: token,\n', '                name: ERC20(token).name(),\n', '                symbol: ERC20(token).symbol(),\n', '                decimals: ERC20(token).decimals()\n', '            });\n', '    }\n', '\n', '    /**\n', '     * @return Array of Component structs with underlying tokens rates for the given token.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getComponents(address) external view override returns (Component[] memory) {\n', '        \n', '        Component[] memory underlyingTokens = new Component[](underlyingAddress.length);\n', '\n', '        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n', '            uint256 fptWorth = OptionsManagerV2(optManager).getTokenNetworth();\n', '            uint256 tokenPrice = FNXOracle(oracle).getPrice(underlyingAddress[i]);\n', '            underlyingTokens[i] = Component({\n', '                token: i==0?0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE:underlyingAddress[i],\n', '                tokenType: "ERC20",\n', '                rate: tokenPrice/fptWorth\n', '            });\n', '        }\n', '\n', '        return underlyingTokens;\n', '    }\n', '}']