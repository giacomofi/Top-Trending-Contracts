['pragma solidity ^0.5.16;\n', '\n', '/**\n', '  * @title ArtDeco Finance\n', '  *\n', '  * @notice Contract: a ARTD FundPool to storein NFT \n', '  * \n', '  */\n', 'interface Artd {\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface Nftfactory {\n', '    function currentStore( uint256 nftId ) external view returns (uint256);\n', '}\n', '\n', 'interface Validfactory {\n', '    function isValidfactory( address _factory ) external returns (bool);\n', '}\n', '\n', '\n', 'contract Governance {\n', '\n', '    address public _governance;\n', '\n', '    constructor() public {\n', '        _governance = tx.origin;\n', '    }\n', '\n', '    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyGovernance {\n', '        require(msg.sender == _governance, "not governance");\n', '        _;\n', '    }\n', '\n', '    function setGovernance(address governance)  public  onlyGovernance\n', '    {\n', '        require(governance != address(0), "new governance the zero address");\n', '        emit GovernanceTransferred(_governance, governance);\n', '        _governance = governance;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two signed integers, reverts on overflow.\n', '    */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0); // Solidity only automatically asserts when dividing by 0\n', '        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two signed integers, reverts on overflow.\n', '    */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two signed integers, reverts on overflow.\n', '    */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', 'contract ARTDfundpool is Governance{\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    address public ARTDaddress =  address(0xA23F8462d90dbc60a06B9226206bFACdEAD2A26F);\n', '    address public valider = address(0x58F62d9B184BE5D7eE6881854DD16898Afe0cf90);\n', '    address private _factory = address(0);\n', '    \n', '    event Approve(address newfactory, uint256 amount);\n', '    event Newfactory(address newfactory);\n', '      \n', '    constructor() public {}\n', '\n', '    function newfactory(address factory) public onlyGovernance\n', '    {\n', '        Validfactory _valid = Validfactory(valider);\n', '        require( _valid.isValidfactory(factory), "Invalid factory");\n', '        \n', '        _factory = factory;\n', '        \n', '        emit Newfactory(factory);\n', '    }\n', '\n', '    function approve(address factory, uint256 amount) public \n', '    {\n', '        Validfactory _valid = Validfactory(valider);\n', '        require( _valid.isValidfactory(factory), "Invalid factory");\n', '\n', '        Artd _artd =  Artd( ARTDaddress );\n', '        _artd.approve( factory, amount );\n', '        \n', '        emit Approve(factory, amount);\n', '    }\n', '    \n', '    function factory() external view returns (address) \n', '    {\n', '        return _factory;   \n', '    } \n', '    \n', '    /**\n', '    * @dev Gets the stored amount of the specified NFT ID.\n', '    */\n', '    function storeOf(uint256 nftId) external view returns (uint256) \n', '    {\n', '        Nftfactory factory_x =  Nftfactory( _factory );\n', '        return factory_x.currentStore(nftId);\n', '    }\n', '\n', '    /**\n', '    * @dev return the total balances of this address\n', '    */\n', '    function totalBalance() external view returns (uint256) \n', '    {\n', '        Artd _artd =  Artd( ARTDaddress );\n', '        return _artd.balanceOf(address(this));\n', '    }\n', '    \n', '}']