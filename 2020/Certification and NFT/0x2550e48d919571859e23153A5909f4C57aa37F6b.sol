['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/tokens/EIP20NonStandardInterface.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title EIP20NonStandardInterface\n', '/// @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n', '/// See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', 'interface EIP20NonStandardInterface {\n', '    /// @notice Get the total number of tokens in circulation\n', '    /// @return The supply of tokens\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /// @notice Gets the balance of the specified address\n', '    /// @param owner The address from which the balance will be retrieved\n', '    /// @return balance The balance\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    //\n', '    // !!!!!!!!!!!!!!\n', '    // !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n', '    // !!!!!!!!!!!!!!\n', '    //\n', '\n', '    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '    /// @param dst The address of the destination account\n', '    /// @param amount The number of tokens to transfer\n', '    function transfer(address dst, uint256 amount) external;\n', '\n', '    //\n', '    // !!!!!!!!!!!!!!\n', '    // !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n', '    // !!!!!!!!!!!!!!\n', '    //\n', '\n', '    /// @notice Transfer `amount` tokens from `src` to `dst`\n', '    /// @param src The address of the source account\n', '    /// @param dst The address of the destination account\n', '    /// @param amount The number of tokens to transfer\n', '    function transferFrom(address src, address dst, uint256 amount) external;\n', '\n', '    /// @notice Approve `spender` to transfer up to `amount` from `src`\n', '    /// @dev This will overwrite the approval amount for `spender`\n', '    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '    /// @param spender The address of the account which may transfer tokens\n', '    /// @param amount The number of tokens that are approved\n', '    /// @return success Whether or not the approval succeeded\n', '    function approve(address spender, uint256 amount) external returns (bool success);\n', '\n', '    /// @notice Get the current allowance from `owner` for `spender`\n', '    /// @param owner The address of the account which owns the tokens to be spent\n', '    /// @param spender The address of the account which may transfer tokens\n', '    /// @return remaining The number of tokens allowed to be spent\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '}\n', '\n', '// File: contracts/IDerivativeSpecification.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Derivative Specification interface\n', '/// @notice Immutable collection of derivative attributes\n', "/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\n", 'interface IDerivativeSpecification {\n', '\n', '    /// @notice Proof of a derivative specification\n', '    /// @dev Verifies that contract is a derivative specification\n', '    /// @return true if contract is a derivative specification\n', '    function isDerivativeSpecification() external pure returns(bool);\n', '\n', '    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\n', '    /// between the start and the end of the Live period\n', '    /// @dev Should be resolved through OracleRegistry contract\n', '    /// @return oracle symbols\n', '    function oracleSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    /// finds the value closest to a given timestamp\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbols\n', '    function oracleIteratorSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Type of collateral that users submit to mint the derivative\n', '    /// @dev Should be resolved through CollateralTokenRegistry contract\n', '    /// @return collateral token symbol\n', '    function collateralTokenSymbol() external view returns (bytes32);\n', '\n', '    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\n', '    /// and the initial collateral split to the final collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split symbol\n', '    function collateralSplitSymbol() external view returns (bytes32);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Minting period.\n", '    /// @dev Set in seconds\n', '    /// @return minting period value\n', '    function mintingPeriod() external view returns (uint);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\n", '    /// @dev Set in seconds\n', '    /// @return live period value\n', '    function livePeriod() external view returns (uint);\n', '\n', '    /// @notice Parameter that determines starting nominal value of primary asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\n', '    /// @return primary nominal value\n', '    function primaryNominalValue() external view returns (uint);\n', '\n', '    /// @notice Parameter that determines starting nominal value of complement asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\n', '    /// @return complement nominal value\n', '    function complementNominalValue() external view returns (uint);\n', '\n', '    /// @notice Minting fee rate due to the author of the derivative specification.\n', '    /// @dev Percentage fee multiplied by 10 ^ 12\n', '    /// @return author fee\n', '    function authorFee() external view returns (uint);\n', '\n', '    /// @notice Symbol of the derivative\n', '    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\n', '    /// @return derivative specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Return optional long name of the derivative\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return long name\n', '    function name() external view returns (string memory);\n', '\n', '    /// @notice Optional URI to the derivative specs\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return URI to the derivative specs\n', '    function baseURI() external view returns (string memory);\n', '\n', '    /// @notice Derivative spec author\n', "    /// @dev Used to set and receive author's fee\n", '    /// @return address of the author\n', '    function author() external view returns (address);\n', '}\n', '\n', '// File: contracts/collateralSplits/ICollateralSplit.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Collateral Split interface\n', '/// @notice Contains mathematical functions used to calculate relative claim\n', '/// on collateral of primary and complement assets after settlement.\n', '/// @dev Created independently from specification and published to the CollateralSplitRegistry\n', 'interface ICollateralSplit {\n', '\n', '    /// @notice Proof of collateral split contract\n', '    /// @dev Verifies that contract is a collateral split contract\n', '    /// @return true if contract is a collateral split contract\n', '    function isCollateralSplit() external pure returns(bool);\n', '\n', '    /// @notice Symbol of the collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', "    /// @notice Calcs primary asset class' share of collateral at settlement.\n", '    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\n', '    /// @param _underlyingStartRoundHints specify for each oracle round of the start of Live period\n', '    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\n', "    /// @return _split primary asset class' share of collateral at settlement\n", '    /// @return _underlyingStart underlying value in the start of Live period\n', '    /// @return _underlyingEnd underlying value in the end of Live period\n', '    function split(\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        uint _liveTime,\n', '        uint _settleTime,\n', '        uint[] memory _underlyingStartRoundHints,\n', '        uint[] memory _underlyingEndRoundHints)\n', '    external view returns(uint _split, int _underlyingStart, int _underlyingEnd);\n', '}\n', '\n', '// File: contracts/tokens/IERC20MintedBurnable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', 'interface IERC20MintedBurnable is IERC20 {\n', '    function mint(address to, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/tokens/ITokenBuilder.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', 'interface ITokenBuilder {\n', '    function isTokenBuilder() external pure returns(bool);\n', '    function buildTokens(IDerivativeSpecification derivative, uint settlement, address _collateralToken) external returns(IERC20MintedBurnable, IERC20MintedBurnable);\n', '}\n', '\n', '// File: contracts/IFeeLogger.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'interface IFeeLogger {\n', '    function log(address _liquidityProvider, address _collateral, uint _protocolFee, address _author) external;\n', '}\n', '\n', '// File: contracts/Vault.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '/// @title Derivative implementation Vault\n', '/// @notice A smart contract that references derivative specification and enables users to mint and redeem the derivative\n', 'contract Vault {\n', '    using SafeMath for uint;\n', '    using SafeMath for uint8;\n', '\n', '    uint public constant FRACTION_MULTIPLIER = 10**12;\n', '    int public constant NEGATIVE_INFINITY = type(int256).min;\n', '\n', '    enum State { Created, Minting, Live, Settled }\n', '\n', '    event StateChanged(State oldState, State newState);\n', '    event MintingStateSet(address primaryToken, address complementToken);\n', '    event LiveStateSet();\n', '    event SettledStateSet(int underlyingStart, int underlyingEnd, uint primaryConversion, uint complementConversion);\n', '    event Minted(uint minted, uint collateral, uint fee);\n', '    event Refunded(uint tokenAmount, uint collateral);\n', '    event Redeemed(uint tokenAmount, uint conversion, uint collateral, bool isPrimary);\n', '\n', '    /// @notice vault initialization time\n', '    uint public initializationTime;\n', '    /// @notice start of live period\n', '    uint public liveTime;\n', '    /// @notice end of live period\n', '    uint public settleTime;\n', '\n', '    /// @notice underlying value at the start of live period\n', '    int public underlyingStart;\n', '    /// @notice underlying value at the end of live period\n', '    int public underlyingEnd;\n', '\n', '    /// @notice primary token conversion rate multiplied by 10 ^ 12\n', '    uint public primaryConversion;\n', '    /// @notice primary token conversion rate multiplied by 10 ^ 12\n', '    uint public complementConversion;\n', '\n', '    /// @notice protocol fee multiplied by 10 ^ 12\n', '    uint public protocolFee;\n', '    /// @notice limit on author fee multiplied by 10 ^ 12\n', '    uint public authorFeeLimit;\n', '\n', '    // @notice current state of the vault\n', '    State public state;\n', '\n', '    // @notice derivative specification address\n', '    IDerivativeSpecification public derivativeSpecification;\n', '    // @notice collateral token address\n', '    IERC20 public collateralToken;\n', '    // @notice oracle address\n', '    address[] public oracles;\n', '    address[] public oracleIterators;\n', '    // @notice collateral split address\n', '    ICollateralSplit public collateralSplit;\n', "    // @notice derivative's token builder strategy address\n", '    ITokenBuilder public tokenBuilder;\n', '    IFeeLogger public feeLogger;\n', '\n', "    // @notice protocol's fee receiving wallet\n", '    address public feeWallet;\n', '\n', '    // @notice primary token address\n', '    IERC20MintedBurnable public primaryToken;\n', '    // @notice complement token address\n', '    IERC20MintedBurnable public complementToken;\n', '\n', '    constructor(\n', '        uint _initializationTime,\n', '        uint _protocolFee,\n', '        address _feeWallet,\n', '        address _derivativeSpecification,\n', '        address _collateralToken,\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        address _collateralSplit,\n', '        address _tokenBuilder,\n', '        address _feeLogger,\n', '        uint _authorFeeLimit\n', '    ) public {\n', '        require(_initializationTime > 0, "Initialization time");\n', '        initializationTime = _initializationTime;\n', '\n', '        protocolFee = _protocolFee;\n', '\n', '        require(_feeWallet != address(0), "Fee wallet");\n', '        feeWallet = _feeWallet;\n', '\n', '        require(_derivativeSpecification != address(0), "Derivative");\n', '        derivativeSpecification = IDerivativeSpecification(_derivativeSpecification);\n', '\n', '        require(_collateralToken != address(0), "Collateral token");\n', '        collateralToken = IERC20(_collateralToken);\n', '\n', '        require(_oracles.length > 0, "Oracles");\n', '        require(_oracles[0] != address(0), "First oracle is absent");\n', '        oracles = _oracles;\n', '\n', '        require(_oracleIterators.length > 0, "OracleIterators");\n', '        require(_oracleIterators[0] != address(0), "First oracle iterator is absent");\n', '        oracleIterators = _oracleIterators;\n', '\n', '        require(_collateralSplit != address(0), "Collateral split");\n', '        collateralSplit = ICollateralSplit(_collateralSplit);\n', '\n', '        require(_tokenBuilder != address(0), "Token builder");\n', '        tokenBuilder = ITokenBuilder(_tokenBuilder);\n', '\n', '        require(_feeLogger != address(0), "Fee logger");\n', '        feeLogger = IFeeLogger(_feeLogger);\n', '\n', '        changeState(State.Created);\n', '\n', '        underlyingStart = NEGATIVE_INFINITY;\n', '        underlyingEnd = NEGATIVE_INFINITY;\n', '\n', '        authorFeeLimit = _authorFeeLimit;\n', '\n', '        liveTime = initializationTime + derivativeSpecification.mintingPeriod();\n', '        settleTime = liveTime + derivativeSpecification.livePeriod();\n', '        require(liveTime > block.timestamp, "Live time");\n', '        require(settleTime > block.timestamp, "Settle time");\n', '    }\n', '\n', '    /// @notice Initialize vault by creating derivative token and switching to Minting state\n', '    /// @dev Extracted from constructor to reduce contract gas creation amount\n', '    function initialize() external {\n', '        require(state == State.Created, "Incorrect state.");\n', '\n', '        changeState(State.Minting);\n', '\n', '        (primaryToken, complementToken) = tokenBuilder.buildTokens(derivativeSpecification, settleTime, address(collateralToken));\n', '\n', '        emit MintingStateSet(address(primaryToken), address(complementToken));\n', '    }\n', '\n', '    /// @notice Switch to Live state if appropriate time threshold is passed\n', '    function live() public {\n', '        if(state != State.Minting) {\n', "            revert('Incorrect state');\n", '        }\n', '        require(block.timestamp >= liveTime, "Incorrect time");\n', '        changeState(State.Live);\n', '\n', '        emit LiveStateSet();\n', '    }\n', '\n', '    function changeState(State _newState) internal {\n', '        emit StateChanged(state, _newState);\n', '        state = _newState;\n', '    }\n', '\n', '\n', '    /// @notice Switch to Settled state if appropriate time threshold is passed and\n', '    /// set underlyingStart value and set underlyingEnd value,\n', '    /// calculate primaryConversion and complementConversion params\n', '    /// @dev Reverts if underlyingStart or underlyingEnd are not available\n', '    function settle(uint[] memory underlyingStartRoundHints, uint[] memory underlyingEndRoundHints) public {\n', '        if(state != State.Live) {\n', "            revert('Incorrect state');\n", '        }\n', '        require(block.timestamp >= settleTime, "Incorrect time");\n', '        changeState(State.Settled);\n', '\n', '        uint split;\n', '        (split, underlyingStart, underlyingEnd) = collateralSplit.split(\n', '            oracles, oracleIterators, liveTime, settleTime, underlyingStartRoundHints, underlyingEndRoundHints\n', '        );\n', '        split = range(split);\n', '\n', '        uint collectedCollateral = collateralToken.balanceOf(address(this));\n', '        uint mintedPrimaryTokenAmount = primaryToken.totalSupply();\n', '\n', '        if(mintedPrimaryTokenAmount > 0) {\n', '            uint primaryCollateralPortion = collectedCollateral.mul(split);\n', '            primaryConversion = primaryCollateralPortion.div(mintedPrimaryTokenAmount);\n', '            complementConversion = collectedCollateral.mul(FRACTION_MULTIPLIER).sub(primaryCollateralPortion).div(mintedPrimaryTokenAmount);\n', '        }\n', '\n', '        emit SettledStateSet(underlyingStart, underlyingEnd, primaryConversion, complementConversion);\n', '    }\n', '\n', '    function range(uint _split) public pure returns(uint) {\n', '        if(_split > FRACTION_MULTIPLIER) {\n', '            return uint(FRACTION_MULTIPLIER);\n', '        }\n', '        return uint(_split);\n', '    }\n', '\n', '    /// @notice Mints primary and complement derivative tokens\n', '    /// @dev Checks and switches to the right state and does nothing if vault is not in Minting state\n', '    function mint(uint _collateralAmount) external {\n', '        if(block.timestamp >= liveTime && state == State.Minting) {\n', '            live();\n', '        }\n', '\n', '        if(state != State.Minting){\n', "            revert('Minting period is over');\n", '        }\n', '\n', '        require(_collateralAmount > 0, "Zero amount");\n', '        _collateralAmount = doTransferIn(msg.sender, _collateralAmount);\n', '\n', '        uint feeAmount = withdrawFee(_collateralAmount);\n', '\n', '        uint netAmount = _collateralAmount.sub(feeAmount);\n', '\n', '        uint tokenAmount = denominate(netAmount);\n', '\n', '        primaryToken.mint(msg.sender, tokenAmount);\n', '        complementToken.mint(msg.sender, tokenAmount);\n', '\n', '        emit Minted(tokenAmount, _collateralAmount, feeAmount);\n', '    }\n', '\n', '    /// @notice Refund equal amounts of derivative tokens for collateral at any time\n', '    function refund(uint _tokenAmount) external {\n', '        require(_tokenAmount > 0, "Zero amount");\n', '        require(_tokenAmount <= primaryToken.balanceOf(msg.sender), "Insufficient primary amount");\n', '        require(_tokenAmount <= complementToken.balanceOf(msg.sender), "Insufficient complement amount");\n', '\n', '        primaryToken.burnFrom(msg.sender, _tokenAmount);\n', '        complementToken.burnFrom(msg.sender, _tokenAmount);\n', '        uint unDenominated = unDenominate(_tokenAmount);\n', '\n', '        emit Refunded(_tokenAmount, unDenominated);\n', '        doTransferOut(msg.sender, unDenominated);\n', '    }\n', '\n', '    /// @notice Redeems unequal amounts previously calculated conversions if the vault in Settled state\n', '    function redeem(\n', '        uint _primaryTokenAmount,\n', '        uint _complementTokenAmount,\n', '        uint[] memory underlyingStartRoundHints,\n', '        uint[] memory underlyingEndRoundHints\n', '    ) external {\n', '        require(_primaryTokenAmount > 0 || _complementTokenAmount > 0, "Both tokens zero amount");\n', '        require(_primaryTokenAmount <= primaryToken.balanceOf(msg.sender), "Insufficient primary amount");\n', '        require(_complementTokenAmount <= complementToken.balanceOf(msg.sender), "Insufficient complement amount");\n', '\n', '        if(block.timestamp >= liveTime && state == State.Minting) {\n', '            live();\n', '        }\n', '\n', '        if(block.timestamp >= settleTime && state == State.Live) {\n', '            settle(underlyingStartRoundHints,underlyingEndRoundHints);\n', '        }\n', '\n', '        if(state == State.Settled) {\n', '            redeemAsymmetric(primaryToken, _primaryTokenAmount, true);\n', '            redeemAsymmetric(complementToken, _complementTokenAmount, false);\n', '        }\n', '    }\n', '\n', '    function redeemAsymmetric(IERC20MintedBurnable _derivativeToken, uint _amount, bool _isPrimary) internal {\n', '        if(_amount > 0) {\n', '            _derivativeToken.burnFrom(msg.sender, _amount);\n', '            uint conversion = _isPrimary ? primaryConversion : complementConversion;\n', '            uint collateral = _amount.mul(conversion).div(FRACTION_MULTIPLIER);\n', '            emit Redeemed(_amount, conversion, collateral, _isPrimary);\n', '            if(collateral > 0) {\n', '                doTransferOut(msg.sender, collateral);\n', '            }\n', '        }\n', '    }\n', '\n', '    function denominate(uint _collateralAmount) internal view returns(uint) {\n', '        return _collateralAmount.div(derivativeSpecification.primaryNominalValue() + derivativeSpecification.complementNominalValue());\n', '    }\n', '\n', '    function unDenominate(uint _tokenAmount) internal view returns(uint) {\n', '        return _tokenAmount.mul(derivativeSpecification.primaryNominalValue() + derivativeSpecification.complementNominalValue());\n', '    }\n', '\n', '    function withdrawFee(uint _amount) internal returns(uint){\n', '        uint protocolFeeAmount = calcAndTransferFee(_amount, payable(feeWallet), protocolFee);\n', '\n', '        feeLogger.log(msg.sender, address(collateralToken), protocolFeeAmount, derivativeSpecification.author());\n', '\n', '        uint authorFee = derivativeSpecification.authorFee();\n', '        if(authorFee > authorFeeLimit) {\n', '            authorFee = authorFeeLimit;\n', '        }\n', '        uint authorFeeAmount = calcAndTransferFee(_amount, payable(derivativeSpecification.author()), authorFee);\n', '\n', '        return protocolFeeAmount.add(authorFeeAmount);\n', '    }\n', '\n', '    function calcAndTransferFee(uint _amount, address payable _beneficiary, uint _fee) internal returns(uint){\n', '        uint feeAmount = _amount.mul(_fee).div(FRACTION_MULTIPLIER);\n', '        if(feeAmount > 0) {\n', '            doTransferOut(_beneficiary, feeAmount);\n', '        }\n', '        return feeAmount;\n', '    }\n', '\n', '\n', '    /// @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n', '    /// This will revert due to insufficient balance or insufficient allowance.\n', '    /// This function returns the actual amount received,\n', '    /// which may be less than `amount` if there is a fee attached to the transfer.\n', '    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n', '    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', '    function doTransferIn(address from, uint amount) internal returns (uint) {\n', '        EIP20NonStandardInterface token = EIP20NonStandardInterface(address(collateralToken));\n', '        uint balanceBefore = collateralToken.balanceOf(address(this));\n', '        token.transferFrom(from, address(this), amount);\n', '\n', '        bool success;\n', '        assembly {\n', '            switch returndatasize()\n', '            case 0 {                       // This is a non-standard ERC-20\n', '                success := not(0)          // set success to true\n', '            }\n', '            case 32 {                      // This is a compliant ERC-20\n', '                returndatacopy(0, 0, 32)\n', '                success := mload(0)        // Set `success = returndata` of external call\n', '            }\n', '            default {                      // This is an excessively non-compliant ERC-20, revert.\n', '                revert(0, 0)\n', '            }\n', '        }\n', '        require(success, "TOKEN_TRANSFER_IN_FAILED");\n', '\n', '        // Calculate the amount that was *actually* transferred\n', '        uint balanceAfter = collateralToken.balanceOf(address(this));\n', '        require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");\n', '        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\n', '    }\n', '\n', '    /// @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n', "    /// error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n", "    /// insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n", '    /// it is >= amount, this should not revert in normal conditions.\n', '    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n', '    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', '    function doTransferOut(address payable to, uint amount) internal {\n', '        EIP20NonStandardInterface token = EIP20NonStandardInterface(address(collateralToken));\n', '        token.transfer(to, amount);\n', '\n', '        bool success;\n', '        assembly {\n', '            switch returndatasize()\n', '            case 0 {                      // This is a non-standard ERC-20\n', '                success := not(0)          // set success to true\n', '            }\n', '            case 32 {                     // This is a complaint ERC-20\n', '                returndatacopy(0, 0, 32)\n', '                success := mload(0)        // Set `success = returndata` of external call\n', '            }\n', '            default {                     // This is an excessively non-compliant ERC-20, revert.\n', '                revert(0, 0)\n', '            }\n', '        }\n', '        require(success, "TOKEN_TRANSFER_OUT_FAILED");\n', '    }\n', '}\n', '\n', '// File: contracts/IVaultBuilder.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', 'interface IVaultBuilder {\n', '    function buildVault(\n', '        uint _initializationTime,\n', '        uint _protocolFee,\n', '        address _feeWallet,\n', '        address _derivativeSpecification,\n', '        address _collateralToken,\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        address _collateralSplit,\n', '        address _tokenBuilder,\n', '        address _feeLogger,\n', '        uint _authorFeeLimit\n', '    ) external returns(address);\n', '}\n', '\n', '// File: contracts/VaultBuilder.sol\n', '\n', '// "SPDX-License-Identifier: GNU General Public License v3.0"\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', 'contract VaultBuilder is IVaultBuilder{\n', '    function buildVault(\n', '        uint _initializationTime,\n', '        uint _protocolFee,\n', '        address _feeWallet,\n', '        address _derivativeSpecification,\n', '        address _collateralToken,\n', '        address[] memory _oracles,\n', '        address[] memory _oracleIterators,\n', '        address _collateralSplit,\n', '        address _tokenBuilder,\n', '        address _feeLogger,\n', '        uint _authorFeeLimit\n', '    ) external override returns(address){\n', '        address vault = address(\n', '            new Vault(\n', '                _initializationTime,\n', '                _protocolFee,\n', '                _feeWallet,\n', '                _derivativeSpecification,\n', '                _collateralToken,\n', '                _oracles,\n', '                _oracleIterators,\n', '                _collateralSplit,\n', '                _tokenBuilder,\n', '                _feeLogger,\n', '                _authorFeeLimit\n', '            )\n', '        );\n', '        return vault;\n', '    }\n', '}']