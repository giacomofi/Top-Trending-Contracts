['// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.5.12 >0.4.13 >=0.4.23 >=0.5.12;\n', '\n', '////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'interface DSPauseAbstract {\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setDelay(uint256) external;\n', '    function plans(bytes32) external view returns (bool);\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function drop(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/JugAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/jug.sol\n', 'interface JugAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256);\n', '    function vat() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function base() external view returns (address);\n', '    function init(bytes32) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, address) external;\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/MedianAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/median\n', 'interface MedianAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function age() external view returns (uint32);\n', '    function wat() external view returns (bytes32);\n', '    function bar() external view returns (uint256);\n', '    function orcl(address) external view returns (uint256);\n', '    function bud(address) external view returns (uint256);\n', '    function slot(uint8) external view returns (address);\n', '    function read() external view returns (uint256);\n', '    function peek() external view returns (uint256, bool);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/SpotAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/spot.sol\n', 'interface SpotAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '    function vat() external view returns (address);\n', '    function par() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '    function cage() external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VatAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function can(address, address) external view returns (uint256);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function sin(address) external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function cage() external;\n', '    function slip(bytes32, address, int256) external;\n', '    function flux(bytes32, address, address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function fork(bytes32, address, address, int256, int256) external;\n', '    function grab(bytes32, address, address, address, int256, int256) external;\n', '    function heal(uint256) external;\n', '    function suck(address, address, uint256) external;\n', '    function fold(bytes32, address, int256) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.5.12; */\n', '\n', '/* import "lib/dss-interfaces/src/dapp/DSPauseAbstract.sol"; */\n', '\n', '/* import "lib/dss-interfaces/src/dss/JugAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/MedianAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/SpotAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/VatAbstract.sol"; */\n', '\n', '// TODO: add to dss-interfaces?\n', 'interface GemJoin6Like {\n', '    function setImplementation(address, uint256) external;\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\n', '    address constant MCD_JOIN_TUSD_A  = 0x4454aF7C8bb9463203b66C816220D41ED7837f44;\n', '    address constant MCD_JUG          = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address constant MCD_SPOT         = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address constant MCD_VAT          = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address constant TUSD_IMPL_NEW    = 0x7a9701453249e84fd0D5AfE5951e9cBe9ed2E90f;\n', '    address constant MEDIAN_MANAUSD   = 0x681c4F8f69cF68852BAd092086ffEaB31F5B812c;\n', '    address constant GITCOIN_FEED_OLD = 0xA4188B523EccECFbAC49855eB52eA0b55c4d56dd;\n', '    address constant GITCOIN_FEED_NEW = 0x77EB6CF8d732fe4D92c427fCdd83142DB3B742f7;\n', '\n', '    // Decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    uint256 constant FOUR_PCT_RATE   = 1000000001243680656318820312;\n', '    uint256 constant EIGHT_PCT_RATE  = 1000000002440418608258400030;\n', '    uint256 constant TWELVE_PCT_RATE = 1000000003593629043335673582;\n', '    uint256 constant FIFTY_PCT_RATE  = 1000000012857214317438491659;\n', '\n', '    function execute() external {\n', '        /*** Risk Parameter Adjustments ***/\n', '\n', '        // Set the global debt ceiling to 1,196,000,000\n', '        // 948 (current DC) + 200 (USDC-A increase) + 48 (TUSD-A increase)\n', '        VatAbstract(MCD_VAT).file("Line", 1196 * MILLION * RAD);\n', '\n', '        // Set the USDC-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 200 million\n', '        // New debt ceiling: 400 million\n', '        VatAbstract(MCD_VAT).file("USDC-A", "line", 400 * MILLION * RAD);\n', '\n', '        // Set the TUSD-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 2 million\n', '        // New debt ceiling: 50 million\n', '        VatAbstract(MCD_VAT).file("TUSD-A", "line", 50 * MILLION * RAD);\n', '\n', '        // Set USDC-A collateralization ratio\n', '        //\n', '        // Existing ratio: 103%\n', '        // New ratio: 101%\n', '        SpotAbstract(MCD_SPOT).file("USDC-A", "mat", 101 * RAY / 100); // 101% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke("USDC-A");\n', '\n', '        // Set TUSD-A collateralization ratio\n', '        //\n', '        // Existing ratio: 120%\n', '        // New ratio: 101%\n', '        SpotAbstract(MCD_SPOT).file("TUSD-A", "mat", 101 * RAY / 100); // 101% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke("TUSD-A");\n', '\n', '        // Set PAXUSD-A collateralization ratio\n', '        //\n', '        // Existing ratio: 103%\n', '        // New ratio: 101%\n', '        SpotAbstract(MCD_SPOT).file("PAXUSD-A", "mat", 101 * RAY / 100); // 101% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke("PAXUSD-A");\n', '\n', '        // Set the BAT-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("BAT-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("BAT-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the USDC-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("USDC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the USDC-B stability fee\n', '        //\n', '        // Previous: 48%\n', '        // New: 50%\n', '        JugAbstract(MCD_JUG).drip("USDC-B"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDC-B", "duty", FIFTY_PCT_RATE);\n', '\n', '        // Set the WBTC-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("WBTC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("WBTC-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the TUSD-A stability fee\n', '        //\n', '        // Previous: 0%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("TUSD-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("TUSD-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the KNC-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("KNC-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("KNC-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the ZRX-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("ZRX-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("ZRX-A", "duty", FOUR_PCT_RATE);\n', '\n', '        // Set the MANA-A stability fee\n', '        //\n', '        // Previous: 10%\n', '        // New: 12%\n', '        JugAbstract(MCD_JUG).drip("MANA-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("MANA-A", "duty", TWELVE_PCT_RATE);\n', '\n', '        // Set the USDT-A stability fee\n', '        //\n', '        // Previous: 6%\n', '        // New: 8%\n', '        JugAbstract(MCD_JUG).drip("USDT-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("USDT-A", "duty", EIGHT_PCT_RATE);\n', '\n', '        // Set the PAXUSD-A stability fee\n', '        //\n', '        // Previous: 2%\n', '        // New: 4%\n', '        JugAbstract(MCD_JUG).drip("PAXUSD-A"); // drip right before\n', '        JugAbstract(MCD_JUG).file("PAXUSD-A", "duty", FOUR_PCT_RATE);\n', '\n', '        /*** Maintenance Actions ***/\n', '\n', '        // Whitelist new TUSD implementation\n', '        GemJoin6Like(MCD_JOIN_TUSD_A).setImplementation(TUSD_IMPL_NEW, 1);        \n', '\n', '        // Replace Gitcoin feed key on MANAUSD Oracle\n', '        address[] memory drops = new address[](1);\n', '        drops[0] = GITCOIN_FEED_OLD;\n', '        MedianAbstract(MEDIAN_MANAUSD).drop(drops);\n', '\n', '        address[] memory lifts = new address[](1);\n', '        lifts[0] = GITCOIN_FEED_NEW;\n', '        MedianAbstract(MEDIAN_MANAUSD).lift(lifts);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/9fe29a1704a7885305774bbb31ab04fedd363259/governance/votes/Executive%20vote%20-%20September%2018%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-09-18 MakerDAO Executive Spell | Hash: 0xe942f72e80295685e39e303f8979560523beae8569daccfcea2f000b14a14abf";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    // modifier officeHours {\n', '    //     uint day = (now / 1 days + 3) % 7;\n', '    //     require(day < 5, "Can only be cast on a weekday");\n', '    //     uint hour = now / 1 hours % 24;\n', '    //     require(hour >= 14 && hour < 21, "Outside office hours");\n', '    //     _;\n', '    // }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public /*officeHours*/ {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']