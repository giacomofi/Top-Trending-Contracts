['pragma solidity > 0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'contract AdminAccount {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant MAG = 10 ** 18;\n', '    \n', '    address[] public ambassadorList  = [0x06407522e98b0740F077478D6609361B32Aba142,\n', '                                        0x4aDccc97ACc8238770c6Fa6bc975C7672C3a483F,\n', '                                        0xB4C0F2E31a22fB0A5387638b3A85BcdB2eFb0DFE];\n', '    \n', '    mapping(address => uint256) public shares;\n', '    \n', '    modifier isAmbassador() {\n', '        require(shares[msg.sender] > uint256(0));\n', '        _;\n', '    }\n', '    \n', '   constructor() public {\n', '       shares[ambassadorList[0]] = 44e16;\n', '       shares[ambassadorList[1]] = 44e16;\n', '       shares[ambassadorList[2]] = 12e16;\n', '   }\n', '    \n', '   function disburseFees(address _token) isAmbassador external {\n', '       uint256 balance_ = IERC20(_token).balanceOf(address(this));\n', '       require(balance_ > uint256(0), "Nothing to withdraw");\n', '       for(uint256 i = 0; i < ambassadorList.length; i++) {\n', '           address ambassador_ = ambassadorList[i];\n', '           uint256 share_ = shares[ambassador_];\n', '           uint256 amount_ = (share_.mul(balance_)).div(MAG);\n', '           TransferHelper.safeTransfer(_token, ambassador_, amount_);\n', '       }\n', '   }\n', '    \n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']