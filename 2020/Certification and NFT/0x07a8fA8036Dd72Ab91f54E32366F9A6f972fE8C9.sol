['// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/network/$.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library is provided for conveniece. It is the single source for\n', ' *      the current network and all related hardcoded contract addresses. It\n', ' *      also provide useful definitions for debuging faultless code via events.\n', ' */\n', 'library $\n', '{\n', '\taddress constant GRO = 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0;\n', '\n', '\taddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '\taddress constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n', '\n', '\taddress constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\n', '\n', '\taddress constant cETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '\n', '\taddress constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n', '\n', '\taddress constant Aave_AAVE_LENDING_POOL = 0x398eC7346DcD622eDc5ae82352F02bE94C62d119;\n', '\n', '\taddress constant Aave_AAVE_LENDING_POOL_CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\n', '\n', '\taddress constant Balancer_FACTORY = 0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd;\n', '\n', '\taddress constant Compound_COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '\n', '\taddress constant Dydx_SOLO_MARGIN = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n', '\n', '\taddress constant Sushiswap_ROUTER02 = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n', '}\n', '\n', '// File: contracts/interop/WrappedEther.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface WETH is IERC20\n', '{\n', '\tfunction deposit() external payable;\n', '\tfunction withdraw(uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/interop/UniswapV2.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface Router01\n', '{\n', '\tfunction WETH() external pure returns (address _token);\n', '\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\n', '\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\n', '\tfunction getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);\n', '\tfunction getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);\n', '}\n', '\n', 'interface Router02 is Router01\n', '{\n', '}\n', '\n', '// File: contracts/interop/Aave.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface LendingPoolAddressesProvider\n', '{\n', '\tfunction getLendingPool() external view returns (address _pool);\n', '\tfunction getLendingPoolCore() external view returns (address payable _lendingPoolCore);\n', '}\n', '\n', 'interface LendingPool\n', '{\n', '\tfunction getReserveData(address _reserve) external view returns (uint256 _totalLiquidity, uint256 _availableLiquidity, uint256 _totalBorrowsStable, uint256 _totalBorrowsVariable, uint256 _liquidityRate, uint256 _variableBorrowRate, uint256 _stableBorrowRate, uint256 _averageStableBorrowRate, uint256 _utilizationRate, uint256 _liquidityIndex, uint256 _variableBorrowIndex, address _aTokenAddress, uint40 _lastUpdateTimestamp);\n', '\tfunction flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\n', '}\n', '\n', 'interface FlashLoanReceiver\n', '{\n', '\tfunction executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\n', '}\n', '\n', '// File: contracts/interop/Dydx.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface SoloMargin\n', '{\n', '\tfunction getMarketTokenAddress(uint256 _marketId) external view returns (address _token);\n', '\tfunction getNumMarkets() external view returns (uint256 _numMarkets);\n', '\tfunction operate(Account.Info[] memory _accounts, Actions.ActionArgs[] memory _actions) external;\n', '}\n', '\n', 'interface ICallee\n', '{\n', '\tfunction callFunction(address _sender, Account.Info memory _accountInfo, bytes memory _data) external;\n', '}\n', '\n', 'library Account\n', '{\n', '\tstruct Info {\n', '\t\taddress owner;\n', '\t\tuint256 number;\n', '\t}\n', '}\n', '\n', 'library Actions\n', '{\n', '\tenum ActionType { Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call }\n', '\n', '\tstruct ActionArgs {\n', '\t\tActionType actionType;\n', '\t\tuint256 accountId;\n', '\t\tTypes.AssetAmount amount;\n', '\t\tuint256 primaryMarketId;\n', '\t\tuint256 secondaryMarketId;\n', '\t\taddress otherAddress;\n', '\t\tuint256 otherAccountId;\n', '\t\tbytes data;\n', '\t}\n', '}\n', '\n', 'library Types\n', '{\n', '\tenum AssetDenomination { Wei, Par }\n', '\tenum AssetReference { Delta, Target }\n', '\n', '\tstruct AssetAmount {\n', '\t\tbool sign;\n', '\t\tAssetDenomination denomination;\n', '\t\tAssetReference ref;\n', '\t\tuint256 value;\n', '\t}\n', '}\n', '\n', '// File: contracts/interop/Balancer.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface BFactory\n', '{\n', '\tfunction newBPool() external returns (address _pool);\n', '}\n', '\n', 'interface BPool is IERC20\n', '{\n', '\tfunction getFinalTokens() external view returns (address[] memory _tokens);\n', '\tfunction getBalance(address _token) external view returns (uint256 _balance);\n', '\tfunction setSwapFee(uint256 _swapFee) external;\n', '\tfunction finalize() external;\n', '\tfunction bind(address _token, uint256 _balance, uint256 _denorm) external;\n', '\tfunction exitPool(uint256 _poolAmountIn, uint256[] calldata _minAmountsOut) external;\n', '\tfunction joinswapExternAmountIn(address _tokenIn, uint256 _tokenAmountIn, uint256 _minPoolAmountOut) external returns (uint256 _poolAmountOut);\n', '}\n', '\n', '// File: contracts/interop/Compound.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface Comptroller\n', '{\n', '\tfunction oracle() external view returns (address _oracle);\n', '\tfunction enterMarkets(address[] calldata _ctokens) external returns (uint256[] memory _errorCodes);\n', '\tfunction markets(address _ctoken) external view returns (bool _isListed, uint256 _collateralFactorMantissa);\n', '\tfunction getAccountLiquidity(address _account) external view returns (uint256 _error, uint256 _liquidity, uint256 _shortfall);\n', '}\n', '\n', 'interface PriceOracle\n', '{\n', '\tfunction getUnderlyingPrice(address _ctoken) external view returns (uint256 _price);\n', '}\n', '\n', 'interface CToken is IERC20\n', '{\n', '\tfunction underlying() external view returns (address _token);\n', '\tfunction exchangeRateStored() external view returns (uint256 _exchangeRate);\n', '\tfunction borrowBalanceStored(address _account) external view returns (uint256 _borrowBalance);\n', '\tfunction exchangeRateCurrent() external returns (uint256 _exchangeRate);\n', '\tfunction getCash() external view returns (uint256 _cash);\n', '\tfunction borrowBalanceCurrent(address _account) external returns (uint256 _borrowBalance);\n', '\tfunction balanceOfUnderlying(address _owner) external returns (uint256 _underlyingBalance);\n', '\tfunction mint() external payable;\n', '\tfunction mint(uint256 _mintAmount) external returns (uint256 _errorCode);\n', '\tfunction repayBorrow() external payable;\n', '\tfunction repayBorrow(uint256 _repayAmount) external returns (uint256 _errorCode);\n', '\tfunction redeemUnderlying(uint256 _redeemAmount) external returns (uint256 _errorCode);\n', '\tfunction borrow(uint256 _borrowAmount) external returns (uint256 _errorCode);\n', '}\n', '\n', '// File: contracts/modules/Math.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Math\n', '{\n', '\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n', '\t{\n', '\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\n', '\t}\n', '\n', '\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n', '\t{\n', '\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/Wrapping.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Wrapping\n', '{\n', '\tfunction _wrap(uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\ttry WETH($.WETH).deposit{value: _amount}() {\n', '\t\t\treturn true;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _unwrap(uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\ttry WETH($.WETH).withdraw(_amount) {\n', '\t\t\treturn true;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _safeWrap(uint256 _amount) internal\n', '\t{\n', '\t\trequire(_wrap(_amount), "wrap failed");\n', '\t}\n', '\n', '\tfunction _safeUnwrap(uint256 _amount) internal\n', '\t{\n', '\t\trequire(_unwrap(_amount), "unwrap failed");\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/Transfers.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Transfers\n', '{\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\n', '\t{\n', '\t\treturn IERC20(_token).balanceOf(address(this));\n', '\t}\n', '\n', '\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\n', '\t\tif (_allowance > _amount) {\n', '\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\n', '\t\t}\n', '\t\telse\n', '\t\tif (_allowance < _amount) {\n', '\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\n', '\t{\n', '\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '\t}\n', '\n', '\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tIERC20(_token).safeTransfer(_to, _amount);\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/SushiswapExchangeAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SushiswapExchangeAbstraction\n', '{\n', '\tfunction _calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) internal view returns (uint256 _outputAmount)\n', '\t{\n', '\t\taddress _router = $.Sushiswap_ROUTER02;\n', '\t\taddress _WETH = Router02(_router).WETH();\n', '\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\n', '\t\treturn Router02(_router).getAmountsOut(_inputAmount, _path)[_path.length - 1];\n', '\t}\n', '\n', '\tfunction _calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) internal view returns (uint256 _inputAmount)\n', '\t{\n', '\t\taddress _router = $.Sushiswap_ROUTER02;\n', '\t\taddress _WETH = Router02(_router).WETH();\n', '\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\n', '\t\treturn Router02(_router).getAmountsIn(_outputAmount, _path)[0];\n', '\t}\n', '\n', '\tfunction _convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\n', '\t{\n', '\t\taddress _router = $.Sushiswap_ROUTER02;\n', '\t\taddress _WETH = Router02(_router).WETH();\n', '\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\n', '\t\tTransfers._approveFunds(_from, _router, _inputAmount);\n', '\t\treturn Router02(_router).swapExactTokensForTokens(_inputAmount, _minOutputAmount, _path, address(this), uint256(-1))[_path.length - 1];\n', '\t}\n', '\n', '\tfunction _buildPath(address _from, address _WETH, address _to) internal pure returns (address[] memory _path)\n', '\t{\n', '\t\tif (_from == _WETH || _to == _WETH) {\n', '\t\t\t_path = new address[](2);\n', '\t\t\t_path[0] = _from;\n', '\t\t\t_path[1] = _to;\n', '\t\t\treturn _path;\n', '\t\t} else {\n', '\t\t\t_path = new address[](3);\n', '\t\t\t_path[0] = _from;\n', '\t\t\t_path[1] = _WETH;\n', '\t\t\t_path[2] = _to;\n', '\t\t\treturn _path;\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: contracts/GExchange.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Custom and uniform interface to a decentralized exchange. It is used\n', ' *      to estimate and convert funds whenever necessary. This furnishes\n', ' *      client contracts with the flexibility to replace conversion strategy\n', ' *      and routing, dynamically, by delegating these operations to different\n', ' *      external contracts that share this common interface. See\n', ' *      GUniswapV2Exchange.sol for further documentation.\n', ' */\n', 'interface GExchange\n', '{\n', '\t// view functions\n', '\tfunction calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\n', '\tfunction calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\n', '\n', '\t// open functions\n', '\tfunction convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\n', '}\n', '\n', '// File: contracts/modules/Conversions.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Conversions\n', '{\n', '\tfunction _dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\n', '\t{\n', '\t\tTransfers._approveFunds(_from, _exchange, _inputAmount);\n', '\t\ttry GExchange(_exchange).convertFunds(_from, _to, _inputAmount, _minOutputAmount) returns (uint256 _outAmount) {\n', '\t\t\treturn _outAmount;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\tTransfers._approveFunds(_from, _exchange, 0);\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/AaveFlashLoanAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library AaveFlashLoanAbstraction\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 constant FLASH_LOAN_FEE_RATIO = 9e14; // 0.09%\n', '\n', '\tfunction _estimateFlashLoanFee(address /* _token */, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\n', '\t{\n', '\t\treturn _netAmount.mul(FLASH_LOAN_FEE_RATIO).div(1e18);\n', '\t}\n', '\n', '\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\n', '\t{\n', '\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\n', '\t\t// this is the code in solidity, but does not compile\n', '\t\t//\ttry LendingPool(_pool).getReserveData(_token) returns (uint256 _totalLiquidity, uint256 _availableLiquidity, uint256 _totalBorrowsStable, uint256 _totalBorrowsVariable, uint256 _liquidityRate, uint256 _variableBorrowRate, uint256 _stableBorrowRate, uint256 _averageStableBorrowRate, uint256 _utilizationRate, uint256 _liquidityIndex, uint256 _variableBorrowIndex, address _aTokenAddress, uint40 _lastUpdateTimestamp) {\n', '\t\t//\t\treturn _availableLiquidity;\n', '\t\t//\t} catch (bytes memory /* _data */) {\n', '\t\t//\t\treturn 0;\n', '\t\t//\t}\n', '\t\t// we use EVM assembly instead\n', '\t\tbytes memory _data = abi.encodeWithSignature("getReserveData(address)", _token);\n', '\t\tuint256[2] memory _result;\n', '\t\tassembly {\n', '\t\t\tlet _success := staticcall(gas(), _pool, add(_data, 32), mload(_data), _result, 64)\n', '\t\t\tif iszero(_success) {\n', '\t\t\t\tmstore(add(_result, 32), 0)\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn _result[1];\n', '\t}\n', '\n', '\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\n', '\t{\n', '\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\n', '\t\ttry LendingPool(_pool).flashLoan(address(this), _token, _netAmount, _context) {\n', '\t\t\treturn true;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\n', '\t{\n', '\t\taddress _poolCore = $.Aave_AAVE_LENDING_POOL_CORE;\n', '\t\tTransfers._pushFunds(_token, _poolCore, _grossAmount);\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/DydxFlashLoanAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library DydxFlashLoanAbstraction\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tfunction _estimateFlashLoanFee(address /* _token */, uint256 /* _netAmount */) internal pure returns (uint256 _feeAmount)\n', '\t{\n', '\t\treturn 2;\n', '\t}\n', '\n', '\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\n', '\t{\n', '\t\taddress _solo = $.Dydx_SOLO_MARGIN;\n', '\t\treturn IERC20(_token).balanceOf(_solo);\n', '\t}\n', '\n', '\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\n', '\t{\n', '\t\taddress _solo = $.Dydx_SOLO_MARGIN;\n', '\t\tuint256 _feeAmount = 2;\n', '\t\tuint256 _grossAmount = _netAmount.add(_feeAmount);\n', '\t\tuint256 _marketId = uint256(-1);\n', '\t\tuint256 _numMarkets = SoloMargin(_solo).getNumMarkets();\n', '\t\tfor (uint256 _i = 0; _i < _numMarkets; _i++) {\n', '\t\t\taddress _address = SoloMargin(_solo).getMarketTokenAddress(_i);\n', '\t\t\tif (_address == _token) {\n', '\t\t\t\t_marketId = _i;\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t\tif (_marketId == uint256(-1)) return false;\n', '\t\tAccount.Info[] memory _accounts = new Account.Info[](1);\n', '\t\t_accounts[0] = Account.Info({ owner: address(this), number: 1 });\n', '\t\tActions.ActionArgs[] memory _actions = new Actions.ActionArgs[](3);\n', '\t\t_actions[0] = Actions.ActionArgs({\n', '\t\t\tactionType: Actions.ActionType.Withdraw,\n', '\t\t\taccountId: 0,\n', '\t\t\tamount: Types.AssetAmount({\n', '\t\t\t\tsign: false,\n', '\t\t\t\tdenomination: Types.AssetDenomination.Wei,\n', '\t\t\t\tref: Types.AssetReference.Delta,\n', '\t\t\t\tvalue: _netAmount\n', '\t\t\t}),\n', '\t\t\tprimaryMarketId: _marketId,\n', '\t\t\tsecondaryMarketId: 0,\n', '\t\t\totherAddress: address(this),\n', '\t\t\totherAccountId: 0,\n', '\t\t\tdata: ""\n', '\t\t});\n', '\t\t_actions[1] = Actions.ActionArgs({\n', '\t\t\tactionType: Actions.ActionType.Call,\n', '\t\t\taccountId: 0,\n', '\t\t\tamount: Types.AssetAmount({\n', '\t\t\t\tsign: false,\n', '\t\t\t\tdenomination: Types.AssetDenomination.Wei,\n', '\t\t\t\tref: Types.AssetReference.Delta,\n', '\t\t\t\tvalue: 0\n', '\t\t\t}),\n', '\t\t\tprimaryMarketId: 0,\n', '\t\t\tsecondaryMarketId: 0,\n', '\t\t\totherAddress: address(this),\n', '\t\t\totherAccountId: 0,\n', '\t\t\tdata: abi.encode(_token, _netAmount, _feeAmount, _context)\n', '\t\t});\n', '\t\t_actions[2] = Actions.ActionArgs({\n', '\t\t\tactionType: Actions.ActionType.Deposit,\n', '\t\t\taccountId: 0,\n', '\t\t\tamount: Types.AssetAmount({\n', '\t\t\t\tsign: true,\n', '\t\t\t\tdenomination: Types.AssetDenomination.Wei,\n', '\t\t\t\tref: Types.AssetReference.Delta,\n', '\t\t\t\tvalue: _grossAmount\n', '\t\t\t}),\n', '\t\t\tprimaryMarketId: _marketId,\n', '\t\t\tsecondaryMarketId: 0,\n', '\t\t\totherAddress: address(this),\n', '\t\t\totherAccountId: 0,\n', '\t\t\tdata: ""\n', '\t\t});\n', '\t\ttry SoloMargin(_solo).operate(_accounts, _actions) {\n', '\t\t\treturn true;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\n', '\t{\n', '\t\taddress _solo = $.Dydx_SOLO_MARGIN;\n', '\t\tTransfers._approveFunds(_token, _solo, _grossAmount);\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/FlashLoans.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library FlashLoans\n', '{\n', '\tenum Provider { Aave, Dydx }\n', '\n', '\tfunction _estimateFlashLoanFee(Provider _provider, address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\n', '\t{\n', '\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\n', '\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\n', '\t}\n', '\n', '\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\n', '\t{\n', '\t\tuint256 _liquidityAmountDydx = DydxFlashLoanAbstraction._getFlashLoanLiquidity(_token);\n', '\t\tuint256 _liquidityAmountAave = AaveFlashLoanAbstraction._getFlashLoanLiquidity(_token);\n', '\t\treturn Math._max(_liquidityAmountDydx, _liquidityAmountAave);\n', '\t}\n', '\n', '\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\n', '\t{\n', '\t\t_success = DydxFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\n', '\t\tif (_success) return true;\n', '\t\t_success = AaveFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\n', '\t\tif (_success) return true;\n', '\t\treturn false;\n', '\t}\n', '\n', '\tfunction _paybackFlashLoan(Provider _provider, address _token, uint256 _grossAmount) internal\n', '\t{\n', '\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\n', '\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/BalancerLiquidityPoolAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library BalancerLiquidityPoolAbstraction\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 constant MIN_AMOUNT = 1e6;\n', '\tuint256 constant TOKEN0_WEIGHT = 25e18; // 25/50 = 50%\n', '\tuint256 constant TOKEN1_WEIGHT = 25e18; // 25/50 = 50%\n', '\tuint256 constant SWAP_FEE = 10e16; // 10%\n', '\n', '\tfunction _createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) internal returns (address _pool)\n', '\t{\n', '\t\trequire(_amount0 >= MIN_AMOUNT && _amount1 >= MIN_AMOUNT, "amount below the minimum");\n', '\t\t_pool = BFactory($.Balancer_FACTORY).newBPool();\n', '\t\tTransfers._approveFunds(_token0, _pool, _amount0);\n', '\t\tTransfers._approveFunds(_token1, _pool, _amount1);\n', '\t\tBPool(_pool).bind(_token0, _amount0, TOKEN0_WEIGHT);\n', '\t\tBPool(_pool).bind(_token1, _amount1, TOKEN1_WEIGHT);\n', '\t\tBPool(_pool).setSwapFee(SWAP_FEE);\n', '\t\tBPool(_pool).finalize();\n', '\t\treturn _pool;\n', '\t}\n', '\n', '\tfunction _joinPool(address _pool, address _token, uint256 _maxAmount) internal returns (uint256 _amount)\n', '\t{\n', '\t\tuint256 _balanceAmount = BPool(_pool).getBalance(_token);\n', '\t\tif (_balanceAmount == 0) return 0;\n', '\t\tuint256 _limitAmount = _balanceAmount.div(2);\n', '\t\t_amount = Math._min(_maxAmount, _limitAmount);\n', '\t\tTransfers._approveFunds(_token, _pool, _amount);\n', '\t\tBPool(_pool).joinswapExternAmountIn(_token, _amount, 0);\n', '\t\treturn _amount;\n', '\t}\n', '\n', '\tfunction _exitPool(address _pool, uint256 _percent) internal returns (uint256 _amount0, uint256 _amount1)\n', '\t{\n', '\t\tif (_percent == 0) return (0, 0);\n', '\t\taddress[] memory _tokens = BPool(_pool).getFinalTokens();\n', '\t\t_amount0 = Transfers._getBalance(_tokens[0]);\n', '\t\t_amount1 = Transfers._getBalance(_tokens[1]);\n', '\t\tuint256 _poolAmount = Transfers._getBalance(_pool);\n', '\t\tuint256 _poolExitAmount = _poolAmount.mul(_percent).div(1e18);\n', '\t\tuint256[] memory _minAmountsOut = new uint256[](2);\n', '\t\t_minAmountsOut[0] = 0;\n', '\t\t_minAmountsOut[1] = 0;\n', '\t\tBPool(_pool).exitPool(_poolExitAmount, _minAmountsOut);\n', '\t\t_amount0 = Transfers._getBalance(_tokens[0]).sub(_amount0);\n', '\t\t_amount1 = Transfers._getBalance(_tokens[1]).sub(_amount1);\n', '\t\treturn (_amount0, _amount1);\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/CompoundLendingMarketAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library CompoundLendingMarketAbstraction\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tfunction _getUnderlyingToken(address _ctoken) internal view returns (address _token)\n', '\t{\n', '\t\tif (_ctoken == $.cETH) return $.WETH;\n', '\t\treturn CToken(_ctoken).underlying();\n', '\t}\n', '\n', '\tfunction _getCollateralRatio(address _ctoken) internal view returns (uint256 _collateralFactor)\n', '\t{\n', '\t\taddress _comptroller = $.Compound_COMPTROLLER;\n', '\t\t(, _collateralFactor) = Comptroller(_comptroller).markets(_ctoken);\n', '\t\treturn _collateralFactor;\n', '\t}\n', '\n', '\tfunction _getMarketAmount(address _ctoken) internal view returns (uint256 _marketAmount)\n', '\t{\n', '\t\treturn CToken(_ctoken).getCash();\n', '\t}\n', '\n', '\tfunction _getLiquidityAmount(address _ctoken) internal view returns (uint256 _liquidityAmount)\n', '\t{\n', '\t\taddress _comptroller = $.Compound_COMPTROLLER;\n', '\t\t(uint256 _result, uint256 _liquidity, uint256 _shortfall) = Comptroller(_comptroller).getAccountLiquidity(address(this));\n', '\t\tif (_result != 0) return 0;\n', '\t\tif (_shortfall > 0) return 0;\n', '\t\taddress _priceOracle = Comptroller(_comptroller).oracle();\n', '\t\tuint256 _price = PriceOracle(_priceOracle).getUnderlyingPrice(_ctoken);\n', '\t\treturn _liquidity.mul(1e18).div(_price);\n', '\t}\n', '\n', '\tfunction _getAvailableAmount(address _ctoken, uint256 _marginAmount) internal view returns (uint256 _availableAmount)\n', '\t{\n', '\t\tuint256 _liquidityAmount = _getLiquidityAmount(_ctoken);\n', '\t\tif (_liquidityAmount <= _marginAmount) return 0;\n', '\t\treturn Math._min(_liquidityAmount.sub(_marginAmount), _getMarketAmount(_ctoken));\n', '\t}\n', '\n', '\tfunction _getExchangeRate(address _ctoken) internal view returns (uint256 _exchangeRate)\n', '\t{\n', '\t\treturn CToken(_ctoken).exchangeRateStored();\n', '\t}\n', '\n', '\tfunction _fetchExchangeRate(address _ctoken) internal returns (uint256 _exchangeRate)\n', '\t{\n', '\t\treturn CToken(_ctoken).exchangeRateCurrent();\n', '\t}\n', '\n', '\tfunction _getLendAmount(address _ctoken) internal view returns (uint256 _amount)\n', '\t{\n', '\t\treturn CToken(_ctoken).balanceOf(address(this)).mul(_getExchangeRate(_ctoken)).div(1e18);\n', '\t}\n', '\n', '\tfunction _fetchLendAmount(address _ctoken) internal returns (uint256 _amount)\n', '\t{\n', '\t\treturn CToken(_ctoken).balanceOfUnderlying(address(this));\n', '\t}\n', '\n', '\tfunction _getBorrowAmount(address _ctoken) internal view returns (uint256 _amount)\n', '\t{\n', '\t\treturn CToken(_ctoken).borrowBalanceStored(address(this));\n', '\t}\n', '\n', '\tfunction _fetchBorrowAmount(address _ctoken) internal returns (uint256 _amount)\n', '\t{\n', '\t\treturn CToken(_ctoken).borrowBalanceCurrent(address(this));\n', '\t}\n', '\n', '\tfunction _enter(address _ctoken) internal returns (bool _success)\n', '\t{\n', '\t\taddress _comptroller = $.Compound_COMPTROLLER;\n', '\t\taddress[] memory _ctokens = new address[](1);\n', '\t\t_ctokens[0] = _ctoken;\n', '\t\ttry Comptroller(_comptroller).enterMarkets(_ctokens) returns (uint256[] memory _errorCodes) {\n', '\t\t\treturn _errorCodes[0] == 0;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _lend(address _ctoken, uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\tif (_ctoken == $.cETH) {\n', '\t\t\tif (!Wrapping._unwrap(_amount)) return false;\n', '\t\t\ttry CToken(_ctoken).mint{value: _amount}() {\n', '\t\t\t\treturn true;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\tassert(Wrapping._wrap(_amount));\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\taddress _token = _getUnderlyingToken(_ctoken);\n', '\t\t\tTransfers._approveFunds(_token, _ctoken, _amount);\n', '\t\t\ttry CToken(_ctoken).mint(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\treturn _errorCode == 0;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _redeem(address _ctoken, uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\tif (_ctoken == $.cETH) {\n', '\t\t\ttry CToken(_ctoken).redeemUnderlying(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\tif (_errorCode == 0) {\n', '\t\t\t\t\tassert(Wrapping._wrap(_amount));\n', '\t\t\t\t\treturn true;\n', '\t\t\t\t} else {\n', '\t\t\t\t\treturn false;\n', '\t\t\t\t}\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\ttry CToken(_ctoken).redeemUnderlying(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\treturn _errorCode == 0;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _borrow(address _ctoken, uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\tif (_ctoken == $.cETH) {\n', '\t\t\ttry CToken(_ctoken).borrow(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\tif (_errorCode == 0) {\n', '\t\t\t\t\tassert(Wrapping._wrap(_amount));\n', '\t\t\t\t\treturn true;\n', '\t\t\t\t} else {\n', '\t\t\t\t\treturn false;\n', '\t\t\t\t}\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\ttry CToken(_ctoken).borrow(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\treturn _errorCode == 0;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _repay(address _ctoken, uint256 _amount) internal returns (bool _success)\n', '\t{\n', '\t\tif (_ctoken == $.cETH) {\n', '\t\t\tif (!Wrapping._unwrap(_amount)) return false;\n', '\t\t\ttry CToken(_ctoken).repayBorrow{value: _amount}() {\n', '\t\t\t\treturn true;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\tassert(Wrapping._wrap(_amount));\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\taddress _token = _getUnderlyingToken(_ctoken);\n', '\t\t\tTransfers._approveFunds(_token, _ctoken, _amount);\n', '\t\t\ttry CToken(_ctoken).repayBorrow(_amount) returns (uint256 _errorCode) {\n', '\t\t\t\treturn _errorCode == 0;\n', '\t\t\t} catch (bytes memory /* _data */) {\n', '\t\t\t\treturn false;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _safeEnter(address _ctoken) internal\n', '\t{\n', '\t\trequire(_enter(_ctoken), "enter failed");\n', '\t}\n', '\n', '\tfunction _safeLend(address _ctoken, uint256 _amount) internal\n', '\t{\n', '\t\trequire(_lend(_ctoken, _amount), "lend failure");\n', '\t}\n', '\n', '\tfunction _safeRedeem(address _ctoken, uint256 _amount) internal\n', '\t{\n', '\t\trequire(_redeem(_ctoken, _amount), "redeem failure");\n', '\t}\n', '\n', '\tfunction _safeBorrow(address _ctoken, uint256 _amount) internal\n', '\t{\n', '\t\trequire(_borrow(_ctoken, _amount), "borrow failure");\n', '\t}\n', '\n', '\tfunction _safeRepay(address _ctoken, uint256 _amount) internal\n', '\t{\n', '\t\trequire(_repay(_ctoken, _amount), "repay failure");\n', '\t}\n', '}\n', '\n', '// File: contracts/G.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This public library provides a single entrypoint to all the relevant\n', ' *      internal libraries available in the modules folder. It exists to\n', ' *      circunvent the contract size limitation imposed by the EVM. All function\n', ' *      calls are directly delegated to the target library function preserving\n', ' *      argument and return values exactly as they are. Thit library is shared\n', ' *      by all contracts and even other public libraries from this repository,\n', ' *      therefore it needs to be published alongside them.\n', ' */\n', 'library G\n', '{\n', '\tfunction min(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _minAmount) { return Math._min(_amount1, _amount2); }\n', '\n', '\tfunction safeWrap(uint256 _amount) public { Wrapping._safeWrap(_amount); }\n', '\tfunction safeUnwrap(uint256 _amount) public { Wrapping._safeUnwrap(_amount); }\n', '\n', '\tfunction getBalance(address _token) public view returns (uint256 _balance) { return Transfers._getBalance(_token); }\n', '\tfunction pullFunds(address _token, address _from, uint256 _amount) public { Transfers._pullFunds(_token, _from, _amount); }\n', '\tfunction pushFunds(address _token, address _to, uint256 _amount) public { Transfers._pushFunds(_token, _to, _amount); }\n', '\tfunction approveFunds(address _token, address _to, uint256 _amount) public { Transfers._approveFunds(_token, _to, _amount); }\n', '\n', '\tfunction dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) public returns (uint256 _outputAmount) { return Conversions._dynamicConvertFunds(_exchange, _from, _to, _inputAmount, _minOutputAmount); }\n', '\n', '\tfunction getFlashLoanLiquidity(address _token) public view returns (uint256 _liquidityAmount) { return FlashLoans._getFlashLoanLiquidity(_token); }\n', '\tfunction requestFlashLoan(address _token, uint256 _amount, bytes memory _context) public returns (bool _success) { return FlashLoans._requestFlashLoan(_token, _amount, _context); }\n', '\tfunction paybackFlashLoan(FlashLoans.Provider _provider, address _token, uint256 _grossAmount) public { FlashLoans._paybackFlashLoan(_provider, _token, _grossAmount); }\n', '\n', '\tfunction createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) public returns (address _pool) { return BalancerLiquidityPoolAbstraction._createPool(_token0, _amount0, _token1, _amount1); }\n', '\tfunction joinPool(address _pool, address _token, uint256 _maxAmount) public returns (uint256 _amount) { return BalancerLiquidityPoolAbstraction._joinPool(_pool, _token, _maxAmount); }\n', '\tfunction exitPool(address _pool, uint256 _percent) public returns (uint256 _amount0, uint256 _amount1) { return BalancerLiquidityPoolAbstraction._exitPool(_pool, _percent); }\n', '\n', '\tfunction getUnderlyingToken(address _ctoken) public view returns (address _token) { return CompoundLendingMarketAbstraction._getUnderlyingToken(_ctoken); }\n', '\tfunction getCollateralRatio(address _ctoken) public view returns (uint256 _collateralFactor) { return CompoundLendingMarketAbstraction._getCollateralRatio(_ctoken); }\n', '\tfunction getLiquidityAmount(address _ctoken) public view returns (uint256 _liquidityAmount) { return CompoundLendingMarketAbstraction._getLiquidityAmount(_ctoken); }\n', '\tfunction getExchangeRate(address _ctoken) public view returns (uint256 _exchangeRate) { return CompoundLendingMarketAbstraction._getExchangeRate(_ctoken); }\n', '\tfunction fetchExchangeRate(address _ctoken) public returns (uint256 _exchangeRate) { return CompoundLendingMarketAbstraction._fetchExchangeRate(_ctoken); }\n', '\tfunction getLendAmount(address _ctoken) public view returns (uint256 _amount) { return CompoundLendingMarketAbstraction._getLendAmount(_ctoken); }\n', '\tfunction fetchLendAmount(address _ctoken) public returns (uint256 _amount) { return CompoundLendingMarketAbstraction._fetchLendAmount(_ctoken); }\n', '\tfunction getBorrowAmount(address _ctoken) public view returns (uint256 _amount) { return CompoundLendingMarketAbstraction._getBorrowAmount(_ctoken); }\n', '\tfunction fetchBorrowAmount(address _ctoken) public returns (uint256 _amount) { return CompoundLendingMarketAbstraction._fetchBorrowAmount(_ctoken); }\n', '\tfunction lend(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._lend(_ctoken, _amount); }\n', '\tfunction redeem(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._redeem(_ctoken, _amount); }\n', '\tfunction borrow(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._borrow(_ctoken, _amount); }\n', '\tfunction repay(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._repay(_ctoken, _amount); }\n', '\tfunction safeLend(address _ctoken, uint256 _amount) public { CompoundLendingMarketAbstraction._safeLend(_ctoken, _amount); }\n', '\tfunction safeRedeem(address _ctoken, uint256 _amount) public { CompoundLendingMarketAbstraction._safeRedeem(_ctoken, _amount); }\n', '}\n', '\n', '// File: contracts/GToken.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Complete top-level interface for gTokens, implemented by the\n', ' *      GTokenBase contract. See GTokenBase.sol for further documentation.\n', ' */\n', 'interface GToken is IERC20\n', '{\n', '\t// pure functions\n', '\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _netShares, uint256 _feeShares);\n', '\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _cost, uint256 _feeShares);\n', '\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _grossShares, uint256 _feeShares);\n', '\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _cost, uint256 _feeShares);\n', '\n', '\t// view functions\n', '\tfunction stakesToken() external view returns (address _stakesToken);\n', '\tfunction reserveToken() external view returns (address _reserveToken);\n', '\tfunction totalReserve() external view returns (uint256 _totalReserve);\n', '\tfunction depositFee() external view returns (uint256 _depositFee);\n', '\tfunction withdrawalFee() external view returns (uint256 _withdrawalFee);\n', '\tfunction liquidityPool() external view returns (address _liquidityPool);\n', '\tfunction liquidityPoolBurningRate() external view returns (uint256 _burningRate);\n', '\tfunction liquidityPoolLastBurningTime() external view returns (uint256 _lastBurningTime);\n', '\tfunction liquidityPoolMigrationRecipient() external view returns (address _migrationRecipient);\n', '\tfunction liquidityPoolMigrationUnlockTime() external view returns (uint256 _migrationUnlockTime);\n', '\n', '\t// open functions\n', '\tfunction deposit(uint256 _cost) external;\n', '\tfunction withdraw(uint256 _grossShares) external;\n', '\n', '\t// priviledged functions\n', '\tfunction allocateLiquidityPool(uint256 _stakesAmount, uint256 _sharesAmount) external;\n', '\tfunction setLiquidityPoolBurningRate(uint256 _burningRate) external;\n', '\tfunction burnLiquidityPoolPortion() external;\n', '\tfunction initiateLiquidityPoolMigration(address _migrationRecipient) external;\n', '\tfunction cancelLiquidityPoolMigration() external;\n', '\tfunction completeLiquidityPoolMigration() external;\n', '\n', '\t// emitted events\n', '\tevent BurnLiquidityPoolPortion(uint256 _stakesAmount, uint256 _sharesAmount);\n', '\tevent InitiateLiquidityPoolMigration(address indexed _migrationRecipient);\n', '\tevent CancelLiquidityPoolMigration(address indexed _migrationRecipient);\n', '\tevent CompleteLiquidityPoolMigration(address indexed _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount);\n', '}\n', '\n', '// File: contracts/GCToken.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Complete top-level interface for gcTokens, implemented by the\n', ' *      GCTokenBase contract. See GCTokenBase.sol for further documentation.\n', ' */\n', 'interface GCToken is GToken\n', '{\n', '\t// pure functions\n', '\tfunction calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) external pure returns (uint256 _cost);\n', '\tfunction calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost);\n', '\tfunction calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) external pure returns (uint256 _netShares, uint256 _feeShares);\n', '\tfunction calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost, uint256 _feeShares);\n', '\tfunction calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) external pure returns (uint256 _grossShares, uint256 _feeShares);\n', '\tfunction calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost, uint256 _feeShares);\n', '\n', '\t// view functions\n', '\tfunction miningToken() external view returns (address _miningToken);\n', '\tfunction growthToken() external view returns (address _growthToken);\n', '\tfunction underlyingToken() external view returns (address _underlyingToken);\n', '\tfunction exchangeRate() external view returns (uint256 _exchangeRate);\n', '\tfunction totalReserveUnderlying() external view returns (uint256 _totalReserveUnderlying);\n', '\tfunction lendingReserveUnderlying() external view returns (uint256 _lendingReserveUnderlying);\n', '\tfunction borrowingReserveUnderlying() external view returns (uint256 _borrowingReserveUnderlying);\n', '\tfunction exchange() external view returns (address _exchange);\n', '\tfunction miningGulpRange() external view returns (uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount);\n', '\tfunction growthGulpRange() external view returns (uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount);\n', '\tfunction collateralizationRatio() external view returns (uint256 _collateralizationRatio, uint256 _collateralizationMargin);\n', '\n', '\t// open functions\n', '\tfunction depositUnderlying(uint256 _underlyingCost) external;\n', '\tfunction withdrawUnderlying(uint256 _grossShares) external;\n', '\n', '\t// priviledged functions\n', '\tfunction setExchange(address _exchange) external;\n', '\tfunction setMiningGulpRange(uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) external;\n', '\tfunction setGrowthGulpRange(uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) external;\n', '\tfunction setCollateralizationRatio(uint256 _collateralizationRatio, uint256 _collateralizationMargin) external;\n', '}\n', '\n', '// File: contracts/GFormulae.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\n', ' *      for gTokens.\n', ' *      All operations assume that, if total supply is 0, then the total\n', ' *      reserve is also 0, and vice-versa.\n', ' *      Fees are calculated percentually based on the gross amount.\n', ' *      See GTokenBase.sol for further documentation.\n', ' */\n', 'library GFormulae\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* deposit(cost):\n', '\t *   price = reserve / supply\n', '\t *   gross = cost / price\n', '\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\n', '\t *   fee = gross - net\n', '\t *   return net, fee\n', '\t */\n', '\tfunction _calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _netShares, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _grossShares = _totalSupply == _totalReserve ? _cost : _cost.mul(_totalSupply).div(_totalReserve);\n', '\t\t_netShares = _grossShares.mul(uint256(1e18).sub(_depositFee)).div(1e18);\n', '\t\t_feeShares = _grossShares.sub(_netShares);\n', '\t\treturn (_netShares, _feeShares);\n', '\t}\n', '\n', '\t/* deposit_reverse(net):\n', '\t *   price = reserve / supply\n', '\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\n', '\t *   cost = gross * price\n', '\t *   fee = gross - net\n', '\t *   return cost, fee\n', '\t */\n', '\tfunction _calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _cost, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_depositFee));\n', '\t\t_cost = _totalReserve == _totalSupply ? _grossShares : _grossShares.mul(_totalReserve).div(_totalSupply);\n', '\t\t_feeShares = _grossShares.sub(_netShares);\n', '\t\treturn (_cost, _feeShares);\n', '\t}\n', '\n', '\t/* withdrawal_reverse(cost):\n', '\t *   price = reserve / supply\n', '\t *   net = cost / price\n', '\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\n', '\t *   fee = gross - net\n', '\t *   return gross, fee\n', '\t */\n', '\tfunction _calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _grossShares, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _netShares = _cost == _totalReserve ? _totalSupply : _cost.mul(_totalSupply).div(_totalReserve);\n', '\t\t_grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_withdrawalFee));\n', '\t\t_feeShares = _grossShares.sub(_netShares);\n', '\t\treturn (_grossShares, _feeShares);\n', '\t}\n', '\n', '\t/* withdrawal(gross):\n', '\t *   price = reserve / supply\n', '\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\n', '\t *   cost = net * price\n', '\t *   fee = gross - net\n', '\t *   return cost, fee\n', '\t */\n', '\tfunction _calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _cost, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _netShares = _grossShares.mul(uint256(1e18).sub(_withdrawalFee)).div(1e18);\n', '\t\t_cost = _netShares == _totalSupply ? _totalReserve : _netShares.mul(_totalReserve).div(_totalSupply);\n', '\t\t_feeShares = _grossShares.sub(_netShares);\n', '\t\treturn (_cost, _feeShares);\n', '\t}\n', '}\n', '\n', '// File: contracts/GCFormulae.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\n', ' *      for gTokens calculated based on the cToken underlying asset\n', ' *      (e.g. DAI for cDAI). See GFormulae.sol and GCTokenBase.sol for further\n', ' *      documentation.\n', ' */\n', 'library GCFormulae\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\t/**\n', '\t * @dev Simple token to cToken formula from Compound\n', '\t */\n', '\tfunction _calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) internal pure returns (uint256 _cost)\n', '\t{\n', '\t\treturn _underlyingCost.mul(1e18).div(_exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Simple cToken to token formula from Compound\n', '\t */\n', '\tfunction _calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost)\n', '\t{\n', '\t\treturn _cost.mul(_exchangeRate).div(1e18);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Composition of the gToken deposit formula with the Compound\n', '\t *      conversion formula to obtain the gcToken deposit formula in\n', '\t *      terms of the cToken underlying asset.\n', '\t */\n', '\tfunction _calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) internal pure returns (uint256 _netShares, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _cost = _calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\n', '\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Composition of the gToken reserve deposit formula with the\n', '\t *      Compound conversion formula to obtain the gcToken reverse\n', '\t *      deposit formula in terms of the cToken underlying asset.\n', '\t */\n', '\tfunction _calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _cost;\n', '\t\t(_cost, _feeShares) = GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\n', '\t\treturn (_calcUnderlyingCostFromCost(_cost, _exchangeRate), _feeShares);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Composition of the gToken reserve withdrawal formula with the\n', '\t *      Compound conversion formula to obtain the gcToken reverse\n', '\t *      withdrawal formula in terms of the cToken underlying asset.\n', '\t */\n', '\tfunction _calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) internal pure returns (uint256 _grossShares, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _cost = _calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\n', '\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Composition of the gToken withdrawal formula with the Compound\n', '\t *      conversion formula to obtain the gcToken withdrawal formula in\n', '\t *      terms of the cToken underlying asset.\n', '\t */\n', '\tfunction _calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost, uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _cost;\n', '\t\t(_cost, _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\n', '\t\treturn (_calcUnderlyingCostFromCost(_cost, _exchangeRate), _feeShares);\n', '\t}\n', '}\n', '\n', '// File: contracts/GLiquidityPoolManager.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library implements data structure abstraction for the liquidity\n', ' *      pool management code in order to circuvent the EVM contract size limit.\n', ' *      It is therefore a public library shared by all gToken contracts and\n', ' *      needs to be published alongside them. See GTokenBase.sol for further\n', ' *      documentation.\n', ' */\n', 'library GLiquidityPoolManager\n', '{\n', '\tusing GLiquidityPoolManager for GLiquidityPoolManager.Self;\n', '\n', '\tuint256 constant MAXIMUM_BURNING_RATE = 2e16; // 2%\n', '\tuint256 constant DEFAULT_BURNING_RATE = 5e15; // 0.5%\n', '\tuint256 constant BURNING_INTERVAL = 7 days;\n', '\tuint256 constant MIGRATION_INTERVAL = 7 days;\n', '\n', '\tenum State { Created, Allocated, Migrating, Migrated }\n', '\n', '\tstruct Self {\n', '\t\taddress stakesToken;\n', '\t\taddress sharesToken;\n', '\n', '\t\tState state;\n', '\t\taddress liquidityPool;\n', '\n', '\t\tuint256 burningRate;\n', '\t\tuint256 lastBurningTime;\n', '\n', '\t\taddress migrationRecipient;\n', '\t\tuint256 migrationUnlockTime;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Initializes the data structure. This method is exposed publicly.\n', '\t * @param _stakesToken The ERC-20 token address to be used as stakes\n', '\t *                     token (GRO).\n', '\t * @param _sharesToken The ERC-20 token address to be used as shares\n', '\t *                     token (gToken).\n', '\t */\n', '\tfunction init(Self storage _self, address _stakesToken, address _sharesToken) public\n', '\t{\n', '\t\t_self.stakesToken = _stakesToken;\n', '\t\t_self.sharesToken = _sharesToken;\n', '\n', '\t\t_self.state = State.Created;\n', '\t\t_self.liquidityPool = address(0);\n', '\n', '\t\t_self.burningRate = DEFAULT_BURNING_RATE;\n', '\t\t_self.lastBurningTime = 0;\n', '\n', '\t\t_self.migrationRecipient = address(0);\n', '\t\t_self.migrationUnlockTime = uint256(-1);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Verifies whether or not a liquidity pool is migrating or\n', '\t *      has migrated. This method is exposed publicly.\n', '\t * @return _hasMigrated A boolean indicating whether or not the pool\n', '\t *                      migration has started.\n', '\t */\n', '\tfunction hasMigrated(Self storage _self) public view returns (bool _hasMigrated)\n', '\t{\n', '\t\treturn _self.state == State.Migrating || _self.state == State.Migrated;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Moves the current balances (if any) of stakes and shares tokens\n', '\t *      to the liquidity pool. This method is exposed publicly.\n', '\t */\n', '\tfunction gulpPoolAssets(Self storage _self) public\n', '\t{\n', '\t\tif (!_self._hasPool()) return;\n', '\t\tG.joinPool(_self.liquidityPool, _self.stakesToken, G.getBalance(_self.stakesToken));\n', '\t\tG.joinPool(_self.liquidityPool, _self.sharesToken, G.getBalance(_self.sharesToken));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets the liquidity pool burning rate. This method is exposed\n', '\t *      publicly.\n', '\t * @param _burningRate The percent value of the liquidity pool to be\n', '\t *                     burned at each 7-day period.\n', '\t */\n', '\tfunction setBurningRate(Self storage _self, uint256 _burningRate) public\n', '\t{\n', '\t\trequire(_burningRate <= MAXIMUM_BURNING_RATE, "invalid rate");\n', '\t\t_self.burningRate = _burningRate;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Burns a portion of the liquidity pool according to the defined\n', '\t *      burning rate. It must happen at most once every 7-days. This\n', '\t *      method does not actually burn the funds, but it will redeem\n', '\t *      the amounts from the pool to the caller contract, which is then\n', '\t *      assumed to perform the burn. This method is exposed publicly.\n', '\t * @return _stakesAmount The amount of stakes (GRO) redeemed from the pool.\n', '\t * @return _sharesAmount The amount of shares (gToken) redeemed from the pool.\n', '\t */\n', '\tfunction burnPoolPortion(Self storage _self) public returns (uint256 _stakesAmount, uint256 _sharesAmount)\n', '\t{\n', '\t\trequire(_self._hasPool(), "pool not available");\n', '\t\trequire(now >= _self.lastBurningTime + BURNING_INTERVAL, "must wait lock interval");\n', '\t\t_self.lastBurningTime = now;\n', '\t\treturn G.exitPool(_self.liquidityPool, _self.burningRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Creates a fresh new liquidity pool and deposits the initial\n', '\t *      amounts of the stakes token and the shares token. The pool\n', '\t *      if configure 50%/50% with a 10% swap fee. This method is exposed\n', '\t *      publicly.\n', '\t * @param _stakesAmount The amount of stakes token initially deposited\n', '\t *                      into the pool.\n', '\t * @param _sharesAmount The amount of shares token initially deposited\n', '\t *                      into the pool.\n', '\t */\n', '\tfunction allocatePool(Self storage _self, uint256 _stakesAmount, uint256 _sharesAmount) public\n', '\t{\n', '\t\trequire(_self.state == State.Created, "pool cannot be allocated");\n', '\t\t_self.state = State.Allocated;\n', '\t\t_self.liquidityPool = G.createPool(_self.stakesToken, _stakesAmount, _self.sharesToken, _sharesAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Initiates the liquidity pool migration by setting a funds\n', '\t *      recipent and starting the clock towards the 7-day grace period.\n', '\t *      This method is exposed publicly.\n', '\t * @param _migrationRecipient The recipient address to where funds will\n', '\t *                            be transfered.\n', '\t */\n', '\tfunction initiatePoolMigration(Self storage _self, address _migrationRecipient) public\n', '\t{\n', '\t\trequire(_self.state == State.Allocated || _self.state == State.Migrated, "migration unavailable");\n', '\t\t_self.state = State.Migrating;\n', '\t\t_self.migrationRecipient = _migrationRecipient;\n', '\t\t_self.migrationUnlockTime = now + MIGRATION_INTERVAL;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Cancels the liquidity pool migration by reseting the procedure\n', '\t *      to its original state. This method is exposed publicly.\n', '\t * @return _migrationRecipient The address of the former recipient.\n', '\t */\n', '\tfunction cancelPoolMigration(Self storage _self) public returns (address _migrationRecipient)\n', '\t{\n', '\t\trequire(_self.state == State.Migrating, "migration not initiated");\n', '\t\t_migrationRecipient = _self.migrationRecipient;\n', '\t\t_self.state = State.Allocated;\n', '\t\t_self.migrationRecipient = address(0);\n', '\t\t_self.migrationUnlockTime = uint256(-1);\n', '\t\treturn _migrationRecipient;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Completes the liquidity pool migration by redeeming all funds\n', '\t *      from the pool. This method does not actually transfer the\n', '\t *      redemeed funds to the recipient, it assumes the caller contract\n', '\t *      will perform that. This method is exposed publicly.\n', '\t * @return _migrationRecipient The address of the recipient.\n', '\t * @return _stakesAmount The amount of stakes (GRO) redeemed from the pool.\n', '\t * @return _sharesAmount The amount of shares (gToken) redeemed from the pool.\n', '\t */\n', '\tfunction completePoolMigration(Self storage _self) public returns (address _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount)\n', '\t{\n', '\t\trequire(_self.state == State.Migrating, "migration not initiated");\n', '\t\trequire(now >= _self.migrationUnlockTime, "must wait lock interval");\n', '\t\t_migrationRecipient = _self.migrationRecipient;\n', '\t\t_self.state = State.Migrated;\n', '\t\t_self.migrationRecipient = address(0);\n', '\t\t_self.migrationUnlockTime = uint256(-1);\n', '\t\t(_stakesAmount, _sharesAmount) = G.exitPool(_self.liquidityPool, 1e18);\n', '\t\treturn (_migrationRecipient, _stakesAmount, _sharesAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Verifies whether or not a liquidity pool has been allocated.\n', '\t * @return _poolAvailable A boolean indicating whether or not the pool\n', '\t *                        is available.\n', '\t */\n', '\tfunction _hasPool(Self storage _self) internal view returns (bool _poolAvailable)\n', '\t{\n', '\t\treturn _self.state != State.Created;\n', '\t}\n', '}\n', '\n', '// File: contracts/GCLeveragedReserveManager.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library implements data structure abstraction for the leveraged\n', ' *      reserve management code in order to circuvent the EVM contract size limit.\n', ' *      It is therefore a public library shared by all gToken Type 1 contracts and\n', ' *      needs to be published alongside them. See GTokenType1.sol for further\n', ' *      documentation.\n', ' */\n', 'library GCLeveragedReserveManager\n', '{\n', '\tusing SafeMath for uint256;\n', '\tusing GCLeveragedReserveManager for GCLeveragedReserveManager.Self;\n', '\n', '\tuint256 constant MAXIMUM_COLLATERALIZATION_RATIO = 98e16; // 98% of 75% = 73.5%\n', '\tuint256 constant DEFAULT_COLLATERALIZATION_RATIO = 94e16; // 94% of 75% = 70.5%\n', '\tuint256 constant DEFAULT_COLLATERALIZATION_MARGIN = 2e16; // 2% of 75% = 1.5%\n', '\n', '\tstruct Self {\n', '\t\taddress reserveToken;\n', '\t\taddress underlyingToken;\n', '\n', '\t\taddress exchange;\n', '\n', '\t\taddress miningToken;\n', '\t\tuint256 miningMinGulpAmount;\n', '\t\tuint256 miningMaxGulpAmount;\n', '\n', '\t\tuint256 collateralizationRatio;\n', '\t\tuint256 collateralizationMargin;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Initializes the data structure. This method is exposed publicly.\n', '\t * @param _reserveToken The ERC-20 token address of the reserve token (cToken).\n', '\t * @param _underlyingToken The ERC-20 token address of the underlying\n', '\t *                         token that backs up the reserve token.\n', '\t * @param _miningToken The ERC-20 token address to be collected from\n', '\t *                     liquidity mining (COMP).\n', '\t */\n', '\tfunction init(Self storage _self, address _reserveToken, address _underlyingToken, address _miningToken) public\n', '\t{\n', '\t\t_self.reserveToken = _reserveToken;\n', '\t\t_self.underlyingToken = _underlyingToken;\n', '\n', '\t\t_self.exchange = address(0);\n', '\n', '\t\t_self.miningToken = _miningToken;\n', '\t\t_self.miningMinGulpAmount = 0;\n', '\t\t_self.miningMaxGulpAmount = 0;\n', '\n', '\t\t_self.collateralizationRatio = DEFAULT_COLLATERALIZATION_RATIO;\n', '\t\t_self.collateralizationMargin = DEFAULT_COLLATERALIZATION_MARGIN;\n', '\n', '\t\tCompoundLendingMarketAbstraction._safeEnter(_reserveToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets the contract address for asset conversion delegation.\n', '\t *      This library converts the miningToken into the underlyingToken\n', '\t *      and use the assets to back the reserveToken. See GExchange.sol\n', '\t *      for further documentation. This method is exposed publicly.\n', '\t * @param _exchange The address of the contract that implements the\n', '\t *                  GExchange interface.\n', '\t */\n', '\tfunction setExchange(Self storage _self, address _exchange) public\n', '\t{\n', '\t\t_self.exchange = _exchange;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets the range for converting liquidity mining assets. This\n', '\t *      method is exposed publicly.\n', '\t * @param _miningMinGulpAmount The minimum amount, funds will only be\n', '\t *                             converted once the minimum is accumulated.\n', '\t * @param _miningMaxGulpAmount The maximum amount, funds beyond this\n', '\t *                             limit will not be converted and are left\n', '\t *                             for future rounds of conversion.\n', '\t */\n', '\tfunction setMiningGulpRange(Self storage _self, uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public\n', '\t{\n', '\t\trequire(_miningMinGulpAmount <= _miningMaxGulpAmount, "invalid range");\n', '\t\t_self.miningMinGulpAmount = _miningMinGulpAmount;\n', '\t\t_self.miningMaxGulpAmount = _miningMaxGulpAmount;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets the collateralization ratio and margin. These values are\n', '\t *      percentual and relative to the maximum collateralization ratio\n', '\t *      provided by the underlying asset. This method is exposed publicly.\n', '\t * @param _collateralizationRatio The target collateralization ratio,\n', '\t *                                between lend and borrow, that the\n', '\t *                                reserve will try to maintain.\n', '\t * @param _collateralizationMargin The deviation from the target ratio\n', '\t *                                 that should be accepted.\n', '\t */\n', '\tfunction setCollateralizationRatio(Self storage _self, uint256 _collateralizationRatio, uint256 _collateralizationMargin) public\n', '\t{\n', '\t\trequire(_collateralizationMargin <= _collateralizationRatio && _collateralizationRatio.add(_collateralizationMargin) <= MAXIMUM_COLLATERALIZATION_RATIO, "invalid ratio");\n', '\t\t_self.collateralizationRatio = _collateralizationRatio;\n', '\t\t_self.collateralizationMargin = _collateralizationMargin;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs the reserve adjustment actions leaving a liquidity room,\n', '\t *      if necessary. It will attempt to incorporate the liquidity mining\n', '\t *      assets into the reserve and adjust the collateralization\n', '\t *      targeting the configured ratio. This method is exposed publicly.\n', '\t * @param _roomAmount The underlying token amount to be available after the\n', '\t *                    operation. This is revelant for withdrawals, once the\n', '\t *                    room amount is withdrawn the reserve should reflect\n', '\t *                    the configured collateralization ratio.\n', '\t * @return _success A boolean indicating whether or not both actions suceeded.\n', '\t */\n', '\tfunction adjustReserve(Self storage _self, uint256 _roomAmount) public returns (bool _success)\n', '\t{\n', '\t\tbool success1 = _self._gulpMiningAssets();\n', '\t\tbool success2 = _self._adjustLeverage(_roomAmount);\n', '\t\treturn success1 && success2;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates the collateralization ratio and range relative to the\n', '\t *      maximum collateralization ratio provided by the underlying asset.\n', '\t * @return _collateralizationRatio The target absolute collateralization ratio.\n', '\t * @return _minCollateralizationRatio The minimum absolute collateralization ratio.\n', '\t * @return _maxCollateralizationRatio The maximum absolute collateralization ratio.\n', '\t */\n', '\tfunction _calcCollateralizationRatio(Self storage _self) internal view returns (uint256 _collateralizationRatio, uint256 _minCollateralizationRatio, uint256 _maxCollateralizationRatio)\n', '\t{\n', '\t\tuint256 _collateralRatio = G.getCollateralRatio(_self.reserveToken);\n', '\t\t_collateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio).div(1e18);\n', '\t\t_minCollateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio.sub(_self.collateralizationMargin)).div(1e18);\n', '\t\t_maxCollateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio.add(_self.collateralizationMargin)).div(1e18);\n', '\t\treturn (_collateralizationRatio, _minCollateralizationRatio, _maxCollateralizationRatio);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Incorporates the liquidity mining assets into the reserve. Assets\n', '\t *      are converted to the underlying asset and then added to the reserve.\n', '\t *      If the amount available is below the minimum, or if the exchange\n', '\t *      contract is not set, nothing is done. Otherwise the operation is\n', '\t *      performed, limited to the maximum amount. Note that this operation\n', '\t *      will incorporate to the reserve all the underlying token balance\n', '\t *      including funds sent to it or left over somehow.\n', '\t * @return _success A boolean indicating whether or not the action succeeded.\n', '\t */\n', '\tfunction _gulpMiningAssets(Self storage _self) internal returns (bool _success)\n', '\t{\n', '\t\tif (_self.exchange == address(0)) return true;\n', '\t\tuint256 _miningAmount = G.getBalance(_self.miningToken);\n', '\t\tif (_miningAmount == 0) return true;\n', '\t\tif (_miningAmount < _self.miningMinGulpAmount) return true;\n', '\t\t_self._convertMiningToUnderlying(G.min(_miningAmount, _self.miningMaxGulpAmount));\n', '\t\treturn G.lend(_self.reserveToken, G.getBalance(_self.underlyingToken));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Adjusts the reserve to match the configured collateralization\n', '\t *      ratio. It calculates how much the collateralization must be\n', '\t *      increased or decreased and either: 1) lend/borrow, or\n', '\t *      2) repay/redeem, respectivelly. The funds required to perform\n', '\t *      the operation are obtained via FlashLoan to avoid having to\n', '\t *      maneuver around margin when moving in/out of leverage.\n', '\t * @param _roomAmount The amount of underlying token to be liquid after\n', '\t *                    the operation.\n', '\t * @return _success A boolean indicating whether or not the action succeeded.\n', '\t */\n', '\tfunction _adjustLeverage(Self storage _self, uint256 _roomAmount) internal returns (bool _success)\n', '\t{\n', '\t\t// the reserve is the diference between lend and borrow\n', '\t\tuint256 _lendAmount = G.fetchLendAmount(_self.reserveToken);\n', '\t\tuint256 _borrowAmount = G.fetchBorrowAmount(_self.reserveToken);\n', '\t\tuint256 _reserveAmount = _lendAmount.sub(_borrowAmount);\n', '\t\t// caps the room in case it is larger than the reserve\n', '\t\t_roomAmount = G.min(_roomAmount, _reserveAmount);\n', '\t\t// The new reserve must deduct the room requested\n', '\t\tuint256 _newReserveAmount = _reserveAmount.sub(_roomAmount);\n', '\t\t// caculates the assumed lend amount deducting the requested room\n', '\t\tuint256 _oldLendAmount = _lendAmount.sub(_roomAmount);\n', '\t\t// the new lend amount is the new reserve with leverage applied\n', '\t\tuint256 _newLendAmount;\n', '\t\tuint256 _minNewLendAmount;\n', '\t\tuint256 _maxNewLendAmount;\n', '\t\t{\n', '\t\t\t(uint256 _collateralizationRatio, uint256 _minCollateralizationRatio, uint256 _maxCollateralizationRatio) = _self._calcCollateralizationRatio();\n', '\t\t\t_newLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_collateralizationRatio));\n', '\t\t\t_minNewLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_minCollateralizationRatio));\n', '\t\t\t_maxNewLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_maxCollateralizationRatio));\n', '\t\t}\n', '\t\t// adjust the reserve by:\n', '\t\t// 1- increasing collateralization by the difference\n', '\t\t// 2- decreasing collateralization by the difference\n', '\t\t// the adjustment is capped by the liquidity available on the market\n', '\t\tuint256 _liquidityAmount = G.getFlashLoanLiquidity(_self.underlyingToken);\n', '\t\tif (_minNewLendAmount > _oldLendAmount) {\n', '\t\t\t{\n', '\t\t\t\tuint256 _minAmount = _minNewLendAmount.sub(_oldLendAmount);\n', '\t\t\t\trequire(_liquidityAmount >= _minAmount, "cannot maintain collateralization ratio");\n', '\t\t\t}\n', '\t\t\tuint256 _amount = _newLendAmount.sub(_oldLendAmount);\n', '\t\t\treturn _self._dispatchFlashLoan(G.min(_amount, _liquidityAmount), 1);\n', '\t\t}\n', '\t\tif (_maxNewLendAmount < _oldLendAmount) {\n', '\t\t\t{\n', '\t\t\t\tuint256 _minAmount = _oldLendAmount.sub(_maxNewLendAmount);\n', '\t\t\t\trequire(_liquidityAmount >= _minAmount, "cannot maintain collateralization ratio");\n', '\t\t\t}\n', '\t\t\tuint256 _amount = _oldLendAmount.sub(_newLendAmount);\n', '\t\t\treturn _self._dispatchFlashLoan(G.min(_amount, _liquidityAmount), 2);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev This is the continuation of _adjustLeverage once funds are\n', '\t *      borrowed via the FlashLoan callback.\n', '\t * @param _amount The borrowed amount as requested.\n', '\t * @param _fee The additional fee that needs to be paid for the FlashLoan.\n', '\t * @param _which A flag indicating whether the funds were borrowed to\n', '\t *               1) increase or 2) decrease the collateralization ratio.\n', '\t * @return _success A boolean indicating whether or not the action succeeded.\n', '\t */\n', '\tfunction _continueAdjustLeverage(Self storage _self, uint256 _amount, uint256 _fee, uint256 _which) internal returns (bool _success)\n', '\t{\n', '\t\t// note that the reserve adjustment is not 100% accurate as we\n', '\t\t// did not account for FlashLoan fees in the initial calculation\n', '\t\tif (_which == 1) {\n', '\t\t\tbool _success1 = G.lend(_self.reserveToken, _amount.sub(_fee));\n', '\t\t\tbool _success2 = G.borrow(_self.reserveToken, _amount);\n', '\t\t\treturn _success1 && _success2;\n', '\t\t}\n', '\t\tif (_which == 2) {\n', '\t\t\tbool _success1 = G.repay(_self.reserveToken, _amount);\n', '\t\t\tbool _success2 = G.redeem(_self.reserveToken, _amount.add(_fee));\n', '\t\t\treturn _success1 && _success2;\n', '\t\t}\n', '\t\tassert(false);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Abstracts the details of dispatching the FlashLoan by encoding\n', '\t *      the extra parameters.\n', '\t * @param _amount The amount to be borrowed.\n', '\t * @param _which A flag indicating whether the funds are borrowed to\n', '\t *               1) increase or 2) decrease the collateralization ratio.\n', '\t * @return _success A boolean indicating whether or not the action succeeded.\n', '\t */\n', '\tfunction _dispatchFlashLoan(Self storage _self, uint256 _amount, uint256 _which) internal returns (bool _success)\n', '\t{\n', '\t\treturn G.requestFlashLoan(_self.underlyingToken, _amount, abi.encode(_which));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Abstracts the details of receiving a FlashLoan by decoding\n', '\t *      the extra parameters.\n', '\t * @param _token The asset being borrowed.\n', '\t * @param _amount The borrowed amount.\n', '\t * @param _fee The fees to be paid along with the borrowed amount.\n', '\t * @param _params Additional encoded parameters to be decoded.\n', '\t * @return _success A boolean indicating whether or not the action succeeded.\n', '\t */\n', '\tfunction _receiveFlashLoan(Self storage _self, address _token, uint256 _amount, uint256 _fee, bytes memory _params) external returns (bool _success)\n', '\t{\n', '\t\tassert(_token == _self.underlyingToken);\n', '\t\tuint256 _which = abi.decode(_params, (uint256));\n', '\t\treturn _self._continueAdjustLeverage(_amount, _fee, _which);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Converts a given amount of the mining token to the underlying\n', '\t *      token using the external exchange contract. Both amounts are\n', '\t *      deducted and credited, respectively, from the current contract.\n', '\t * @param _inputAmount The amount to be converted.\n', '\t */\n', '\tfunction _convertMiningToUnderlying(Self storage _self, uint256 _inputAmount) internal\n', '\t{\n', '\t\tG.dynamicConvertFunds(_self.exchange, _self.miningToken, _self.underlyingToken, _inputAmount, 0);\n', '\t}\n', '}\n', '\n', '// File: contracts/GTokenBase.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice This abstract contract provides the basis implementation for all\n', ' *         gTokens. It extends the ERC20 functionality by implementing all\n', ' *         the methods of the GToken interface. The gToken basic functionality\n', ' *         comprises of a reserve, provided in the reserve token, and a supply\n', ' *         of shares. Every time someone deposits into the contract some amount\n', ' *         of reserve tokens it will receive a given amount of this gToken\n', ' *         shares. Conversely, upon withdrawal, someone redeems their previously\n', ' *         deposited assets by providing the associated amount of gToken shares.\n', ' *         The nominal price of a gToken is given by the ratio between the\n', ' *         reserve balance and the total supply of shares. Upon deposit and\n', ' *         withdrawal of funds a 1% fee is applied and collected from shares.\n', ' *         Half of it is immediately burned, which is equivalent to\n', ' *         redistributing it to all gToken holders, and the other half is\n', ' *         provided to a liquidity pool configured as a 50% GRO/50% gToken with\n', ' *         a 10% swap fee. Every week a percentage of the liquidity pool is\n', ' *         burned to account for the accumulated swap fees for that period.\n', ' *         Finally, the gToken contract provides functionality to migrate the\n', ' *         total amount of funds locked in the liquidity pool to an external\n', ' *         address, this mechanism is provided to facilitate the upgrade of\n', ' *         this gToken contract by future implementations. After migration has\n', ' *         started the fee for deposits becomes 2% and the fee for withdrawals\n', ' *         becomes 0%, in order to incentivise others to follow the migration.\n', ' */\n', 'abstract contract GTokenBase is ERC20, Ownable, ReentrancyGuard, GToken\n', '{\n', '\tusing GLiquidityPoolManager for GLiquidityPoolManager.Self;\n', '\n', '\tuint256 constant DEPOSIT_FEE = 1e16; // 1%\n', '\tuint256 constant WITHDRAWAL_FEE = 1e16; // 1%\n', '\tuint256 constant DEPOSIT_FEE_AFTER_MIGRATION = 2e16; // 2%\n', '\tuint256 constant WITHDRAWAL_FEE_AFTER_MIGRATION = 0e16; // 0%\n', '\n', '\taddress public immutable override stakesToken;\n', '\taddress public immutable override reserveToken;\n', '\n', '\tGLiquidityPoolManager.Self lpm;\n', '\n', '\t/**\n', '\t * @dev Constructor for the gToken contract.\n', '\t * @param _name The ERC-20 token name.\n', '\t * @param _symbol The ERC-20 token symbol.\n', '\t * @param _decimals The ERC-20 token decimals.\n', '\t * @param _stakesToken The ERC-20 token address to be used as stakes\n', '\t *                     token (GRO).\n', '\t * @param _reserveToken The ERC-20 token address to be used as reserve\n', '\t *                      token (e.g. cDAI for gcDAI).\n', '\t */\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken)\n', '\t\tERC20(_name, _symbol) public\n', '\t{\n', '\t\t_setupDecimals(_decimals);\n', '\t\tstakesToken = _stakesToken;\n', '\t\treserveToken = _reserveToken;\n', '\t\tlpm.init(_stakesToken, address(this));\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of shares to be\n', '\t *         received/minted upon depositing to the contract.\n', '\t * @param _cost The amount of reserve token being deposited.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _depositFee The current deposit fee as obtained by depositFee().\n', '\t * @return _netShares The net amount of shares being received.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _netShares, uint256 _feeShares)\n', '\t{\n', '\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the amount of\n', '\t *         reserve token to be deposited in order to receive the desired\n', '\t *         amount of shares.\n', '\t * @param _netShares The amount of this gToken shares to receive.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _depositFee The current deposit fee as obtained by depositFee().\n', '\t * @return _cost The cost, in the reserve token, to be paid.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _cost, uint256 _feeShares)\n', '\t{\n', '\t\treturn GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of shares to be\n', '\t *         given/burned upon withdrawing from the contract.\n', '\t * @param _cost The amount of reserve token being withdrawn.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve()\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply()\n', '\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee()\n', '\t * @return _grossShares The total amount of shares being deducted,\n', '\t *                      including fees.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _grossShares, uint256 _feeShares)\n', '\t{\n', '\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the amount of\n', '\t *         reserve token to be withdrawn given the desired amount of\n', '\t *         shares.\n', '\t * @param _grossShares The amount of this gToken shares to provide.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\n', '\t * @return _cost The cost, in the reserve token, to be received.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _cost, uint256 _feeShares)\n', '\t{\n', '\t\treturn GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the amount of reserve tokens currently being help by\n', '\t *         this contract.\n', '\t * @return _totalReserve The amount of the reserve token corresponding\n', "\t *                       to this contract's balance.\n", '\t */\n', '\tfunction totalReserve() public view virtual override returns (uint256 _totalReserve)\n', '\t{\n', '\t\treturn G.getBalance(reserveToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the current minting/deposit fee. This fee is\n', '\t *         applied to the amount of this gToken shares being created\n', '\t *         upon deposit. The fee defaults to 1% and is set to 2%\n', '\t *         after the liquidity pool has been migrated.\n', '\t * @return _depositFee A percent value that accounts for the percentage\n', '\t *                     of shares being minted at each deposit that be\n', '\t *                     collected as fee.\n', '\t */\n', '\tfunction depositFee() public view override returns (uint256 _depositFee) {\n', '\t\treturn lpm.hasMigrated() ? DEPOSIT_FEE_AFTER_MIGRATION : DEPOSIT_FEE;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the current burning/withdrawal fee. This fee is\n', '\t *         applied to the amount of this gToken shares being redeemed\n', '\t *         upon withdrawal. The fee defaults to 1% and is set to 0%\n', '\t *         after the liquidity pool is migrated.\n', '\t * @return _withdrawalFee A percent value that accounts for the\n', '\t *                        percentage of shares being burned at each\n', '\t *                        withdrawal that be collected as fee.\n', '\t */\n', '\tfunction withdrawalFee() public view override returns (uint256 _withdrawalFee) {\n', '\t\treturn lpm.hasMigrated() ? WITHDRAWAL_FEE_AFTER_MIGRATION : WITHDRAWAL_FEE;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the address of the liquidity pool contract.\n', '\t * @return _liquidityPool An address identifying the liquidity pool.\n', '\t */\n', '\tfunction liquidityPool() public view override returns (address _liquidityPool)\n', '\t{\n', '\t\treturn lpm.liquidityPool;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the percentage of the liquidity pool to be burned.\n', '\t *         This amount should account approximately for the swap fees\n', '\t *         collected by the liquidity pool during a 7-day period.\n', '\t * @return _burningRate A percent value that corresponds to the current\n', '\t *                      amount of the liquidity pool to be burned at\n', '\t *                      each 7-day cycle.\n', '\t */\n', '\tfunction liquidityPoolBurningRate() public view override returns (uint256 _burningRate)\n', '\t{\n', '\t\treturn lpm.burningRate;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Marks when the last liquidity pool burn took place. There is\n', '\t *         a minimum 7-day grace period between consecutive burnings of\n', '\t *         the liquidity pool.\n', '\t * @return _lastBurningTime A timestamp for when the liquidity pool\n', '\t *                          burning took place for the last time.\n', '\t */\n', '\tfunction liquidityPoolLastBurningTime() public view override returns (uint256 _lastBurningTime)\n', '\t{\n', '\t\treturn lpm.lastBurningTime;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the address receiving the liquidity pool migration.\n', '\t * @return _migrationRecipient An address to which funds will be sent\n', '\t *                             upon liquidity pool migration completion.\n', '\t */\n', '\tfunction liquidityPoolMigrationRecipient() public view override returns (address _migrationRecipient)\n', '\t{\n', '\t\treturn lpm.migrationRecipient;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the timestamp for when the liquidity pool migration\n', '\t *         can be completed.\n', '\t * @return _migrationUnlockTime A timestamp that defines the end of the\n', '\t *                              7-day grace period for liquidity pool\n', '\t *                              migration.\n', '\t */\n', '\tfunction liquidityPoolMigrationUnlockTime() public view override returns (uint256 _migrationUnlockTime)\n', '\t{\n', '\t\treturn lpm.migrationUnlockTime;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Performs the minting of gToken shares upon the deposit of the\n', '\t *         reserve token. The actual number of shares being minted can\n', '\t *         be calculated using the calcDepositSharesFromCost function.\n', '\t *         In every deposit, 1% of the shares is retained in terms of\n', '\t *         deposit fee. Half of it is immediately burned and the other\n', '\t *         half is provided to the locked liquidity pool. The funds\n', '\t *         will be pulled in by this contract, therefore they must be\n', '\t *         previously approved.\n', '\t * @param _cost The amount of reserve token being deposited in the\n', '\t *              operation.\n', '\t */\n', '\tfunction deposit(uint256 _cost) public override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\trequire(_cost > 0, "cost must be greater than 0");\n', '\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\n', '\t\trequire(_netShares > 0, "shares must be greater than 0");\n', '\t\tG.pullFunds(reserveToken, _from, _cost);\n', '\t\trequire(_prepareDeposit(_cost), "not available at the moment");\n', '\t\t_mint(_from, _netShares);\n', '\t\t_mint(address(this), _feeShares.div(2));\n', '\t\tlpm.gulpPoolAssets();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Performs the burning of gToken shares upon the withdrawal of\n', '\t *         the reserve token. The actual amount of the reserve token to\n', '\t *         be received can be calculated using the\n', '\t *         calcWithdrawalCostFromShares function. In every withdrawal,\n', '\t *         1% of the shares is retained in terms of withdrawal fee.\n', '\t *         Half of it is immediately burned and the other half is\n', '\t *         provided to the locked liquidity pool.\n', '\t * @param _grossShares The gross amount of this gToken shares being\n', '\t *                     redeemed in the operation.\n', '\t */\n', '\tfunction withdraw(uint256 _grossShares) public override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\trequire(_grossShares > 0, "shares must be greater than 0");\n', '\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\n', '\t\trequire(_cost > 0, "cost must be greater than 0");\n', '\t\trequire(_prepareWithdrawal(_cost), "not available at the moment");\n', '\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\n', '\t\tG.pushFunds(reserveToken, _from, _cost);\n', '\t\t_burn(_from, _grossShares);\n', '\t\t_mint(address(this), _feeShares.div(2));\n', '\t\tlpm.gulpPoolAssets();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allocates a liquidity pool with the given amount of funds and\n', '\t *         locks it to this contract. This function should be called\n', '\t *         shortly after the contract is created to associated a newly\n', '\t *         created liquidity pool to it, which will collect fees\n', '\t *         associated with the minting and burning of this gToken shares.\n', '\t *         The liquidity pool will consist of a 50%/50% balance of the\n', '\t *         stakes token (GRO) and this gToken shares with a swap fee of\n', '\t *         10%. The rate between the amount of the two assets deposited\n', '\t *         via this function defines the initial price. The minimum\n', '\t *         amount to be provided for each is 1,000,000 wei. The funds\n', '\t *         will be pulled in by this contract, therefore they must be\n', '\t *         previously approved. This is a priviledged function\n', '\t *         restricted to the contract owner.\n', '\t * @param _stakesAmount The initial amount of stakes token.\n', '\t * @param _sharesAmount The initial amount of this gToken shares.\n', '\t */\n', '\tfunction allocateLiquidityPool(uint256 _stakesAmount, uint256 _sharesAmount) public override onlyOwner nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tG.pullFunds(stakesToken, _from, _stakesAmount);\n', '\t\t_transfer(_from, address(this), _sharesAmount);\n', '\t\tlpm.allocatePool(_stakesAmount, _sharesAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Changes the percentual amount of the funds to be burned from\n', '\t *         the liquidity pool at each 7-day period. This is a\n', '\t *         priviledged function restricted to the contract owner.\n', '\t * @param _burningRate The percentage of the liquidity pool to be burned.\n', '\t */\n', '\tfunction setLiquidityPoolBurningRate(uint256 _burningRate) public override onlyOwner nonReentrant\n', '\t{\n', '\t\tlpm.setBurningRate(_burningRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Burns part of the liquidity pool funds decreasing the supply\n', '\t *         of both the stakes token and this gToken shares.\n', '\t *         The amount to be burned is set via the function\n', '\t *         setLiquidityPoolBurningRate and defaults to 0.5%.\n', '\t *         After this function is called there must be a 7-day wait\n', '\t *         period before it can be called again.\n', '\t *         The purpose of this function is to burn the aproximate amount\n', '\t *         of fees collected from swaps that take place in the liquidity\n', '\t *         pool during the previous 7-day period. This function will\n', '\t *         emit a BurnLiquidityPoolPortion event upon success. This is\n', '\t *         a priviledged function restricted to the contract owner.\n', '\t */\n', '\tfunction burnLiquidityPoolPortion() public override onlyOwner nonReentrant\n', '\t{\n', '\t\t(uint256 _stakesAmount, uint256 _sharesAmount) = lpm.burnPoolPortion();\n', '\t\t_burnStakes(_stakesAmount);\n', '\t\t_burn(address(this), _sharesAmount);\n', '\t\temit BurnLiquidityPoolPortion(_stakesAmount, _sharesAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Initiates the liquidity pool migration. It consists of\n', '\t *         setting the migration recipient address and starting a\n', '\t *         7-day grace period. After the 7-day grace period the\n', '\t *         migration can be completed via the\n', '\t *         completeLiquidityPoolMigration fuction. Anytime before\n', '\t *         the migration is completed is can be cancelled via\n', '\t *         cancelLiquidityPoolMigration. This function will emit a\n', '\t *         InitiateLiquidityPoolMigration event upon success. This is\n', '\t *         a priviledged function restricted to the contract owner.\n', '\t * @param _migrationRecipient The receiver of the liquidity pool funds.\n', '\t */\n', '\tfunction initiateLiquidityPoolMigration(address _migrationRecipient) public override onlyOwner nonReentrant\n', '\t{\n', '\t\tlpm.initiatePoolMigration(_migrationRecipient);\n', '\t\temit InitiateLiquidityPoolMigration(_migrationRecipient);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Cancels the liquidity pool migration if it has been already\n', '\t *         initiated. This will reset the state of the liquidity pool\n', '\t *         migration. This function will emit a\n', '\t *         CancelLiquidityPoolMigration event upon success. This is\n', '\t *         a priviledged function restricted to the contract owner.\n', '\t */\n', '\tfunction cancelLiquidityPoolMigration() public override onlyOwner nonReentrant\n', '\t{\n', '\t\taddress _migrationRecipient = lpm.cancelPoolMigration();\n', '\t\temit CancelLiquidityPoolMigration(_migrationRecipient);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Completes the liquidity pool migration at least 7-days after\n', '\t *         it has been started. The migration consists of sendind the\n', '\t *         the full balance held in the liquidity pool, both in the\n', '\t *         stakes token and gToken shares, to the address set when\n', '\t *         the migration was initiated. This function will emit a\n', '\t *         CompleteLiquidityPoolMigration event upon success. This is\n', '\t *         a priviledged function restricted to the contract owner.\n', '\t */\n', '\tfunction completeLiquidityPoolMigration() public override onlyOwner nonReentrant\n', '\t{\n', '\t\t(address _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount) = lpm.completePoolMigration();\n', '\t\tG.pushFunds(stakesToken, _migrationRecipient, _stakesAmount);\n', '\t\t_transfer(address(this), _migrationRecipient, _sharesAmount);\n', '\t\temit CompleteLiquidityPoolMigration(_migrationRecipient, _stakesAmount, _sharesAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev This abstract method must be implemented by subcontracts in\n', '\t *      order to adjust the underlying reserve after a deposit takes\n', '\t *      place. The actual implementation depends on the strategy and\n', '\t *      algorithm used to handle the reserve.\n', '\t * @param _cost The amount of the reserve token being deposited.\n', '\t */\n', '\tfunction _prepareDeposit(uint256 _cost) internal virtual returns (bool _success);\n', '\n', '\t/**\n', '\t * @dev This abstract method must be implemented by subcontracts in\n', '\t *      order to adjust the underlying reserve before a withdrawal takes\n', '\t *      place. The actual implementation depends on the strategy and\n', '\t *      algorithm used to handle the reserve.\n', '\t * @param _cost The amount of the reserve token being withdrawn.\n', '\t */\n', '\tfunction _prepareWithdrawal(uint256 _cost) internal virtual returns (bool _success);\n', '\n', '\t/**\n', '\t * @dev Burns the given amount of the stakes token. The default behavior\n', '\t *      of the function for general ERC-20 is to send the funds to\n', '\t *      address(0), but that can be overriden by a subcontract.\n', '\t * @param _stakesAmount The amount of the stakes token being burned.\n', '\t */\n', '\tfunction _burnStakes(uint256 _stakesAmount) internal virtual\n', '\t{\n', '\t\tG.pushFunds(stakesToken, address(0), _stakesAmount);\n', '\t}\n', '}\n', '\n', '// File: contracts/GCTokenBase.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice This abstract contract provides the basis implementation for all\n', ' *         gcTokens, i.e. gTokens that use Compound cTokens as reserve, and\n', ' *         implements the common functionality shared amongst them.\n', ' *         In a nutshell, it extends the functinality of the GTokenBase contract\n', ' *         to support operating directly using the cToken underlying asset.\n', ' *         Therefore this contract provides functions that encapsulate minting\n', ' *         and redeeming of cTokens internally, allowing users to interact with\n', ' *         the contract providing funds directly in their underlying asset.\n', ' */\n', 'abstract contract GCTokenBase is GTokenBase, GCToken\n', '{\n', '\taddress public immutable override miningToken;\n', '\taddress public immutable override growthToken;\n', '\taddress public immutable override underlyingToken;\n', '\n', '\t/**\n', '\t * @dev Constructor for the gcToken contract.\n', '\t * @param _name The ERC-20 token name.\n', '\t * @param _symbol The ERC-20 token symbol.\n', '\t * @param _decimals The ERC-20 token decimals.\n', '\t * @param _stakesToken The ERC-20 token address to be used as stakes\n', '\t *                     token (GRO).\n', '\t * @param _reserveToken The ERC-20 token address to be used as reserve\n', '\t *                      token (e.g. cDAI for gcDAI).\n', '\t * @param _miningToken The ERC-20 token used for liquidity mining on\n', '\t *                     compound (COMP).\n', '\t * @param _growthToken The ERC-20 token address of the associated\n', '\t *                     gcToken Type 1, for gcTokens Type 2, or address(0),\n', '\t *                     if this contract is a gcToken Type 1.\n', '\t */\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken, address _miningToken, address _growthToken)\n', '\t\tGTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken) public\n', '\t{\n', '\t\tminingToken = _miningToken;\n', '\t\tgrowthToken = _growthToken;\n', '\t\taddress _underlyingToken = G.getUnderlyingToken(_reserveToken);\n', '\t\tunderlyingToken = _underlyingToken;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the cToken amount\n', '\t *         given the amount of the underlying token and an exchange rate.\n', '\t * @param _underlyingCost The cost in terms of the cToken underlying asset.\n', '\t * @param _exchangeRate The given exchange rate as provided by exchangeRate().\n', '\t * @return _cost The equivalent cost in terms of cToken\n', '\t */\n', '\tfunction calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) public pure override returns (uint256 _cost)\n', '\t{\n', '\t\treturn GCFormulae._calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the underlying token\n', '\t *         amount given the cToken amount and an exchange rate.\n', '\t * @param _cost The cost in terms of the cToken.\n', '\t * @param _exchangeRate The given exchange rate as provided by exchangeRate().\n', '\t * @return _underlyingCost The equivalent cost in terms of the cToken underlying asset.\n', '\t */\n', '\tfunction calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost)\n', '\t{\n', '\t\treturn GCFormulae._calcUnderlyingCostFromCost(_cost, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of shares to be\n', '\t *         received/minted upon depositing the underlying asset to the\n', '\t *         contract.\n', '\t * @param _underlyingCost The amount of the underlying asset being deposited.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _depositFee The current deposit fee as obtained by depositFee().\n', '\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\n', '\t * @return _netShares The net amount of shares being received.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) public pure override returns (uint256 _netShares, uint256 _feeShares)\n', '\t{\n', '\t\treturn GCFormulae._calcDepositSharesFromUnderlyingCost(_underlyingCost, _totalReserve, _totalSupply, _depositFee, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the amount of the\n', '\t *         underlying asset to be deposited in order to receive the desired\n', '\t *         amount of shares.\n', '\t * @param _netShares The amount of this gcToken shares to receive.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _depositFee The current deposit fee as obtained by depositFee().\n', '\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\n', '\t * @return _underlyingCost The cost, in the underlying asset, to be paid.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost, uint256 _feeShares)\n', '\t{\n', '\t\treturn GCFormulae._calcDepositUnderlyingCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of shares to be\n', '\t *         given/burned upon withdrawing the underlying asset from the\n', '\t *         contract.\n', '\t * @param _underlyingCost The amount of the underlying asset being withdrawn.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve()\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply()\n', '\t * @param _withdrawalFee The current withdrawl fee as obtained by withdrawalFee()\n', '\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\n', '\t * @return _grossShares The total amount of shares being deducted,\n', '\t *                      including fees.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) public pure override returns (uint256 _grossShares, uint256 _feeShares)\n', '\t{\n', '\t\treturn GCFormulae._calcWithdrawalSharesFromUnderlyingCost(_underlyingCost, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Allows for the beforehand calculation of the amount of the\n', '\t *         underlying asset to be withdrawn given the desired amount of\n', '\t *         shares.\n', '\t * @param _grossShares The amount of this gcToken shares to provide.\n', '\t * @param _totalReserve The reserve balance as obtained by totalReserve().\n', '\t * @param _totalSupply The shares supply as obtained by totalSupply().\n', '\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\n', '\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\n', '\t * @return _underlyingCost The cost, in the underlying asset, to be received.\n', '\t * @return _feeShares The fee amount of shares being deducted.\n', '\t */\n', '\tfunction calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost, uint256 _feeShares)\n', '\t{\n', '\t\treturn GCFormulae._calcWithdrawalUnderlyingCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the compound exchange rate since their last update.\n', '\t * @return _exchangeRate The exchange rate between cToken and its\n', '\t *                       underlying asset\n', '\t */\n', '\tfunction exchangeRate() public view override returns (uint256 _exchangeRate)\n', '\t{\n', '\t\treturn G.getExchangeRate(reserveToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the total amount kept in the reserve in terms of the\n', '\t *         underlying asset.\n', '\t * @return _totalReserveUnderlying The underlying asset balance on reserve.\n', '\t */\n', '\tfunction totalReserveUnderlying() public view virtual override returns (uint256 _totalReserveUnderlying)\n', '\t{\n', '\t\treturn GCFormulae._calcUnderlyingCostFromCost(totalReserve(), exchangeRate());\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the total amount of the underlying asset (or equivalent)\n', '\t *         this contract is currently lending on Compound.\n', '\t * @return _lendingReserveUnderlying The underlying asset lending\n', '\t *                                   balance on Compound.\n', '\t */\n', '\tfunction lendingReserveUnderlying() public view virtual override returns (uint256 _lendingReserveUnderlying)\n', '\t{\n', '\t\treturn G.getLendAmount(reserveToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the total amount of the underlying asset (or equivalent)\n', '\t *         this contract is currently borrowing on Compound.\n', '\t * @return _borrowingReserveUnderlying The underlying asset borrowing\n', '\t *                                     balance on Compound.\n', '\t */\n', '\tfunction borrowingReserveUnderlying() public view virtual override returns (uint256 _borrowingReserveUnderlying)\n', '\t{\n', '\t\treturn G.getBorrowAmount(reserveToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Performs the minting of gcToken shares upon the deposit of the\n', '\t *         cToken underlying asset. The funds will be pulled in by this\n', '\t *         contract, therefore they must be previously approved. This\n', '\t *         function builds upon the GTokenBase deposit function. See\n', '\t *         GTokenBase.sol for further documentation.\n', '\t * @param _underlyingCost The amount of the underlying asset being\n', '\t *                        deposited in the operation.\n', '\t */\n', '\tfunction depositUnderlying(uint256 _underlyingCost) public override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\trequire(_underlyingCost > 0, "underlying cost must be greater than 0");\n', '\t\tuint256 _cost = GCFormulae._calcCostFromUnderlyingCost(_underlyingCost, exchangeRate());\n', '\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\n', '\t\trequire(_netShares > 0, "shares must be greater than 0");\n', '\t\tG.pullFunds(underlyingToken, _from, _underlyingCost);\n', '\t\tG.safeLend(reserveToken, _underlyingCost);\n', '\t\trequire(_prepareDeposit(_cost), "not available at the moment");\n', '\t\t_mint(_from, _netShares);\n', '\t\t_mint(address(this), _feeShares.div(2));\n', '\t\tlpm.gulpPoolAssets();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Performs the burning of gcToken shares upon the withdrawal of\n', '\t *         the underlying asset. This function builds upon the\n', '\t *         GTokenBase withdrawal function. See GTokenBase.sol for\n', '\t *         further documentation.\n', '\t * @param _grossShares The gross amount of this gcToken shares being\n', '\t *                     redeemed in the operation.\n', '\t */\n', '\tfunction withdrawUnderlying(uint256 _grossShares) public override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\trequire(_grossShares > 0, "shares must be greater than 0");\n', '\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\n', '\t\tuint256 _underlyingCost = GCFormulae._calcUnderlyingCostFromCost(_cost, exchangeRate());\n', '\t\trequire(_underlyingCost > 0, "underlying cost must be greater than 0");\n', '\t\trequire(_prepareWithdrawal(_cost), "not available at the moment");\n', '\t\t_underlyingCost = G.min(_underlyingCost, G.getLendAmount(reserveToken));\n', '\t\tG.safeRedeem(reserveToken, _underlyingCost);\n', '\t\tG.pushFunds(underlyingToken, _from, _underlyingCost);\n', '\t\t_burn(_from, _grossShares);\n', '\t\t_mint(address(this), _feeShares.div(2));\n', '\t\tlpm.gulpPoolAssets();\n', '\t}\n', '}\n', '\n', '// File: contracts/GFlashBorrower.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This abstract contract provides an uniform interface for receiving\n', ' *      flash loans. It encapsulates the required functionality provided by\n', ' *      both Aave and Dydx. It performs the basic validation to ensure that\n', ' *      only Aave/Dydx contracts can dispatch the operation and only the\n', ' *      current contract (that inherits from it) can initiate it.\n', ' */\n', 'abstract contract GFlashBorrower is FlashLoanReceiver, ICallee\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 private allowOperationLevel = 0;\n', '\n', '\t/**\n', '\t * @dev Handy definition to ensure that flash loans are only initiated\n', '\t *      from within the current contract.\n', '\t */\n', '\tmodifier mayFlashBorrow()\n', '\t{\n', '\t\tallowOperationLevel++;\n', '\t\t_;\n', '\t\tallowOperationLevel--;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Handles Aave callback. Delegates the processing of the funds\n', '\t *      to the virtual function _processFlashLoan and later takes care\n', '\t *      of paying it back.\n', '\t * @param _token The ERC-20 contract address.\n', '\t * @param _amount The amount being borrowed.\n', '\t * @param _fee The fee, in addition to the amount borrowed, to be repaid.\n', '\t * @param _params Additional user parameters provided when the flash\n', '\t *                loan was requested.\n', '\t */\n', '\tfunction executeOperation(address _token, uint256 _amount, uint256 _fee, bytes calldata _params) external override\n', '\t{\n', '\t\tassert(allowOperationLevel > 0);\n', '\t\taddress _from = msg.sender;\n', '\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\n', '\t\tassert(_from == _pool);\n', '\t\trequire(_processFlashLoan(_token, _amount, _fee, _params)/*, "failure processing flash loan"*/);\n', '\t\tG.paybackFlashLoan(FlashLoans.Provider.Aave, _token, _amount.add(_fee));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Handles Dydx callback. Delegates the processing of the funds\n', '\t *      to the virtual function _processFlashLoan and later takes care\n', '\t *      of paying it back.\n', '\t * @param _sender The contract address of the initiator of the flash\n', '\t *                loan, expected to be the current contract.\n', '\t * @param _account Dydx account info provided in the callback.\n', '\t * @param _data Aditional external data provided to the Dydx callback,\n', '\t *              this is used by the Dydx module to pass the ERC-20 token\n', '\t *              address, the amount and fee, as well as user parameters.\n', '\t */\n', '\tfunction callFunction(address _sender, Account.Info memory _account, bytes memory _data) external override\n', '\t{\n', '\t\tassert(allowOperationLevel > 0);\n', '\t\taddress _from = msg.sender;\n', '\t\taddress _solo = $.Dydx_SOLO_MARGIN;\n', '\t\tassert(_from == _solo);\n', '\t\tassert(_sender == address(this));\n', '\t\tassert(_account.owner == address(this));\n', '\t\t(address _token, uint256 _amount, uint256 _fee, bytes memory _params) = abi.decode(_data, (address,uint256,uint256,bytes));\n', '\t\trequire(_processFlashLoan(_token, _amount, _fee, _params)/*, "failure processing flash loan"*/);\n', '\t\tG.paybackFlashLoan(FlashLoans.Provider.Dydx, _token, _amount.add(_fee));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Internal function that abstracts the algorithm to be performed\n', '\t *      with borrowed funds. It receives the funds, deposited in the\n', '\t *      current contract, and must ensure they are available as balance\n', '\t *      of the current contract, including fees, before it returns.\n', '\t * @param _token The ERC-20 contract address.\n', '\t * @param _amount The amount being borrowed.\n', '\t * @param _fee The fee, in addition to the amount borrowed, to be repaid.\n', '\t * @param _params Additional user parameters provided when the flash\n', '\t *                loan was requested.\n', '\t * @return _success A boolean indicating success.\n', '\t */\n', '\tfunction _processFlashLoan(address _token, uint256 _amount, uint256 _fee, bytes memory _params) internal virtual returns (bool _success);\n', '}\n', '\n', '// File: contracts/GCTokenType1.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice This contract implements the functionality for the gcToken Type 1.\n', ' *         As with all gcTokens, gcTokens Type 1 use a Compound cToken as\n', ' *         reserve token. Furthermore, Type 1 tokens may apply leverage to the\n', ' *         reserve by using the cToken balance to borrow its associated\n', ' *         underlying asset which in turn is used to mint more cToken. This\n', ' *         process is performed to the limit where the actual reserve balance\n', ' *         ends up accounting for the difference between the total amount lent\n', ' *         and the total amount borrowed. One may observe that there is\n', ' *         always a net loss when considering just the yield accrued for\n', ' *         lending minus the yield accrued for borrowing on Compound. However,\n', ' *         if we consider COMP being credited for liquidity mining the net\n', ' *         balance may become positive and that is when the leverage mechanism\n', ' *         should be applied. The COMP is periodically converted to the\n', ' *         underlying asset and naturally becomes part of the reserve.\n', ' *         In order to easily and efficiently adjust the leverage, this contract\n', ' *         performs flash loans. See GCTokenBase, GFlashBorrower and\n', ' *         GCLeveragedReserveManager for further documentation.\n', ' */\n', 'contract GCTokenType1 is GCTokenBase, GFlashBorrower\n', '{\n', '\tusing GCLeveragedReserveManager for GCLeveragedReserveManager.Self;\n', '\n', '\tGCLeveragedReserveManager.Self lrm;\n', '\n', '\t/**\n', '\t * @dev Constructor for the gcToken Type 1 contract.\n', '\t * @param _name The ERC-20 token name.\n', '\t * @param _symbol The ERC-20 token symbol.\n', '\t * @param _decimals The ERC-20 token decimals.\n', '\t * @param _stakesToken The ERC-20 token address to be used as stakes\n', '\t *                     token (GRO).\n', '\t * @param _reserveToken The ERC-20 token address to be used as reserve\n', '\t *                      token (e.g. cDAI for gcDAI).\n', '\t * @param _miningToken The ERC-20 token used for liquidity mining on\n', '\t *                     compound (COMP).\n', '\t */\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken, address _miningToken)\n', '\t\tGCTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken, _miningToken, address(0)) public\n', '\t{\n', '\t\taddress _underlyingToken = G.getUnderlyingToken(_reserveToken);\n', '\t\tlrm.init(_reserveToken, _underlyingToken, _miningToken);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Overrides the default total reserve definition in order to\n', '\t *         account only for the diference between assets being lent\n', '\t *         and assets being borrowed.\n', '\t * @return _totalReserve The amount of the reserve token corresponding\n', "\t *                       to this contract's worth.\n", '\t */\n', '\tfunction totalReserve() public view override returns (uint256 _totalReserve)\n', '\t{\n', '\t\treturn GCFormulae._calcCostFromUnderlyingCost(totalReserveUnderlying(), exchangeRate());\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Overrides the default total underlying reserve definition in\n', '\t *         order to account only for the diference between assets being\n', '\t *         lent and assets being borrowed.\n', '\t * @return _totalReserveUnderlying The amount of the underlying asset\n', "\t *                                 corresponding to this contract's worth.\n", '\t */\n', '\tfunction totalReserveUnderlying() public view override returns (uint256 _totalReserveUnderlying)\n', '\t{\n', '\t\treturn lendingReserveUnderlying().sub(borrowingReserveUnderlying());\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the contract address for the GExchange implementation\n', '\t *         currently being used to convert the mining token (COMP) into\n', '\t *         the underlying asset.\n', '\t * @return _exchange A GExchange compatible contract address, or address(0)\n', '\t *                   if it has not been set.\n', '\t */\n', '\tfunction exchange() public view override returns (address _exchange)\n', '\t{\n', '\t\treturn lrm.exchange;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the minimum and maximum amount of the mining token to\n', '\t *         be processed on every operation. If the contract balance\n', '\t *         is below the minimum it waits until more accumulates.\n', '\t *         If the total amount is beyond the maximum it processes the\n', '\t *         maximum and leaf the rest for future operations. The mining\n', '\t *         token accumulated via liquidity mining is converted to the\n', '\t *         underlying asset and used to mint the associated cToken.\n', '\t *         This range is used to avoid wasting gas converting small\n', '\t *         amounts as well as mitigating slipage converting large amounts.\n', '\t * @return _miningMinGulpAmount The minimum amount of the mining token\n', '\t *                              to be processed per deposit/withdrawal.\n', '\t * @return _miningMaxGulpAmount The maximum amount of the mining token\n', '\t *                              to be processed per deposit/withdrawal.\n', '\t */\n', '\tfunction miningGulpRange() public view override returns (uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount)\n', '\t{\n', '\t\treturn (lrm.miningMinGulpAmount, lrm.miningMaxGulpAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the minimum and maximum amount of the gcToken Type 1 to\n', '\t *         be processed on every operation. This method applies only to\n', '\t *         gcTokens Type 2 and is not relevant for gcTokens Type 1.\n', '\t * @return _growthMinGulpAmount The minimum amount of the gcToken Type 1\n', '\t *                              to be processed per deposit/withdrawal\n', '\t *                              (always 0).\n', '\t * @return _growthMaxGulpAmount The maximum amount of the gcToken Type 1\n', '\t *                              to be processed per deposit/withdrawal\n', '\t *                              (always 0).\n', '\t */\n', '\tfunction growthGulpRange() public view override returns (uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount)\n', '\t{\n', '\t\treturn (0, 0);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Provides the target collateralization ratio and margin to be\n', '\t *         maintained by this contract. The amount is relative to the\n', '\t *         maximum collateralization available for the associated cToken\n', '\t *         on Compound. The amount is relative to the maximum\n', '\t *         collateralization available for the associated cToken\n', '\t *         on Compound. gcToken Type 1 use leveraged collateralization\n', '\t *         where the cToken is used to borrow its underlying token which\n', '\t *         in turn is used to mint new cToken and repeat. This is\n', '\t *         performed to the maximal level where the actual reserve\n', '\t *         ends up corresponding to the difference between the amount\n', '\t *         lent and the amount borrowed.\n', '\t * @param _collateralizationRatio The percent value relative to the\n', '\t *                                maximum allowed that this contract\n', '\t *                                will target for collateralization\n', '\t *                                (defaults to 96%)\n', '\t * @param _collateralizationRatio The percent value relative to the\n', '\t *                                maximum allowed that this contract\n', '\t *                                will target for collateralization\n', '\t *                                margin (defaults to 0%)\n', '\t */\n', '\tfunction collateralizationRatio() public view override returns (uint256 _collateralizationRatio, uint256 _collateralizationMargin)\n', '\t{\n', '\t\treturn (lrm.collateralizationRatio, lrm.collateralizationMargin);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Sets the contract address for the GExchange implementation\n', '\t *         to be used in converting the mining token (COMP) into\n', '\t *         the underlying asset. This is a priviledged function\n', '\t *         restricted to the contract owner.\n', '\t * @param _exchange A GExchange compatible contract address.\n', '\t */\n', '\tfunction setExchange(address _exchange) public override onlyOwner nonReentrant\n', '\t{\n', '\t\tlrm.setExchange(_exchange);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Sets the minimum and maximum amount of the mining token to\n', '\t *         be processed on every operation. See miningGulpRange().\n', '\t *         This is a priviledged function restricted to the contract owner.\n', '\t * @param _miningMinGulpAmount The minimum amount of the mining token\n', '\t *                             to be processed per deposit/withdrawal.\n', '\t * @param _miningMaxGulpAmount The maximum amount of the mining token\n', '\t *                             to be processed per deposit/withdrawal.\n', '\t */\n', '\tfunction setMiningGulpRange(uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public override onlyOwner nonReentrant\n', '\t{\n', '\t\tlrm.setMiningGulpRange(_miningMinGulpAmount, _miningMaxGulpAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Sets the minimum and maximum amount of the gcToken Type 1 to\n', '\t *         be processed on every operation. This method applies only to\n', '\t *         gcTokens Type 2 and is not relevant for gcTokens Type 1.\n', '\t *         This is a priviledged function restricted to the contract owner.\n', '\t * @param _growthMinGulpAmount The minimum amount of the gcToken Type 1\n', '\t *                             to be processed per deposit/withdrawal\n', '\t *                             (ignored).\n', '\t * @param _growthMaxGulpAmount The maximum amount of the gcToken Type 1\n', '\t *                             to be processed per deposit/withdrawal\n', '\t *                             (ignored).\n', '\t */\n', '\tfunction setGrowthGulpRange(uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) public override /*onlyOwner nonReentrant*/\n', '\t{\n', '\t\t_growthMinGulpAmount; _growthMaxGulpAmount; // silences warnings\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Sets the target collateralization ratio and margin to be\n', '\t *         maintained by this contract. See collateralizationRatio().\n', '\t *         Setting both parameters to 0 turns off collateralization and\n', '\t *         leveraging. This is a priviledged function restricted to the\n', '\t *         contract owner.\n', '\t * @param _collateralizationRatio The percent value relative to the\n', '\t *                                maximum allowed that this contract\n', '\t *                                will target for collateralization\n', '\t *                                (defaults to 96%)\n', '\t * @param _collateralizationRatio The percent value relative to the\n', '\t *                                maximum allowed that this contract\n', '\t *                                will target for collateralization\n', '\t *                                margin (defaults to 0%)\n', '\t */\n', '\tfunction setCollateralizationRatio(uint256 _collateralizationRatio, uint256 _collateralizationMargin) public override onlyOwner nonReentrant\n', '\t{\n', '\t\tlrm.setCollateralizationRatio(_collateralizationRatio, _collateralizationMargin);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev This method is overriden from GTokenBase and sets up the reserve\n', '\t *      after a deposit comes along. It basically adjusts the\n', '\t *      collateralization/leverage to reflect the new increased reserve\n', '\t *      balance. This method uses the GCLeveragedReserveManager to\n', '\t *      adjust the reserve and this is done via flash loans.\n', '\t *      See GCLeveragedReserveManager().\n', '\t * @param _cost The amount of reserve being deposited (ignored).\n', '\t * @return _success A boolean indicating whether or not the operation\n', '\t *                  succeeded. This operation should not fail unless\n', '\t *                  any of the underlying components (Compound, Aave,\n', '\t *                  Dydx) also fails.\n', '\t */\n', '\tfunction _prepareDeposit(uint256 _cost) internal override mayFlashBorrow returns (bool _success)\n', '\t{\n', '\t\t_cost; // silences warnings\n', '\t\treturn lrm.adjustReserve(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev This method is overriden from GTokenBase and sets up the reserve\n', '\t *      before a withdrawal comes along. It basically calculates the\n', '\t *      the amount will be left in the reserve, in terms of cToken cost,\n', '\t *      and adjusts the collateralization/leverage accordingly. This\n', '\t *      method uses the GCLeveragedReserveManager to adjust the reserve\n', '\t *      and this is done via flash loans. See GCLeveragedReserveManager().\n', '\t * @param _cost The amount of reserve being withdrawn and that needs to\n', '\t *              be immediately liquid.\n', '\t * @return _success A boolean indicating whether or not the operation succeeded.\n', '\t *                  The operation may fail if it is not possible to recover\n', '\t *                  the required liquidity (e.g. low liquidity in the markets).\n', '\t */\n', '\tfunction _prepareWithdrawal(uint256 _cost) internal override mayFlashBorrow returns (bool _success)\n', '\t{\n', '\t\treturn lrm.adjustReserve(GCFormulae._calcUnderlyingCostFromCost(_cost, G.fetchExchangeRate(reserveToken)));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev This method dispatches the flash loan callback back to the\n', '\t *      GCLeveragedReserveManager library. See GCLeveragedReserveManager.sol\n', '\t *      and GFlashBorrower.sol.\n', '\t */\n', '\tfunction _processFlashLoan(address _token, uint256 _amount, uint256 _fee, bytes memory _params) internal override returns (bool _success)\n', '\t{\n', '\t\treturn lrm._receiveFlashLoan(_token, _amount, _fee, _params);\n', '\t}\n', '}\n', '\n', '// File: contracts/GTokens.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice Definition of gcDAI. As a gcToken Type 1, it uses cDAI as reserve\n', ' * and employs leverage to maximize returns.\n', ' */\n', 'contract gcDAI is GCTokenType1\n', '{\n', '\tconstructor ()\n', '\t\tGCTokenType1("growth cDAI", "gcDAI", 8, $.GRO, $.cDAI, $.COMP) public\n', '\t{\n', '\t}\n', '}\n', '\n', '/**\n', ' * @notice Definition of gcUSDC. As a gcToken Type 1, it uses cUSDC as reserve\n', ' * and employs leverage to maximize returns.\n', ' */\n', 'contract gcUSDC is GCTokenType1\n', '{\n', '\tconstructor ()\n', '\t\tGCTokenType1("growth cUSDC", "gcUSDC", 8, $.GRO, $.cUSDC, $.COMP) public\n', '\t{\n', '\t}\n', '}\n', '\n', '// File: contracts/GSushiswapExchange.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice This contract implements the GExchange interface routing token\n', ' *         conversions via Sushiswap.\n', ' */\n', 'contract GSushiswapExchange is GExchange\n', '{\n', '\t/**\n', '\t * @notice Computes the amount of tokens to be received upon conversion.\n', '\t * @param _from The contract address of the ERC-20 token to convert from.\n', '\t * @param _to The contract address of the ERC-20 token to convert to.\n', '\t * @param _inputAmount The amount of the _from token to be provided (may be 0).\n', '\t * @return _outputAmount The amount of the _to token to be received (may be 0).\n', '\t */\n', '\tfunction calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) public view override returns (uint256 _outputAmount)\n', '\t{\n', '\t\treturn SushiswapExchangeAbstraction._calcConversionOutputFromInput(_from, _to, _inputAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Computes the amount of tokens to be provided upon conversion.\n', '\t * @param _from The contract address of the ERC-20 token to convert from.\n', '\t * @param _to The contract address of the ERC-20 token to convert to.\n', '\t * @param _outputAmount The amount of the _to token to be received (may be 0).\n', '\t * @return _inputAmount The amount of the _from token to be provided (may be 0).\n', '\t */\n', '\tfunction calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) public view override returns (uint256 _inputAmount)\n', '\t{\n', '\t\treturn SushiswapExchangeAbstraction._calcConversionInputFromOutput(_from, _to, _outputAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Converts a given token amount to another token, as long as it\n', '\t *         meets the minimum taken amount. Amounts are debited from and\n', '\t *         and credited to the caller contract. It may fail if the\n', '\t *         minimum output amount cannot be met.\n', '\t * @param _from The contract address of the ERC-20 token to convert from.\n', '\t * @param _to The contract address of the ERC-20 token to convert to.\n', '\t * @param _inputAmount The amount of the _from token to be provided (may be 0).\n', '\t * @param _minOutputAmount The minimum amount of the _to token to be received (may be 0).\n', '\t * @return _outputAmount The amount of the _to token received (may be 0).\n', '\t */\n', '\tfunction convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) public override returns (uint256 _outputAmount)\n', '\t{\n', '\t\taddress _sender = msg.sender;\n', '\t\tG.pullFunds(_from, _sender, _inputAmount);\n', '\t\t_outputAmount = SushiswapExchangeAbstraction._convertFunds(_from, _to, _inputAmount, _minOutputAmount);\n', '\t\tG.pushFunds(_to, _sender, _outputAmount);\n', '\t\treturn _outputAmount;\n', '\t}\n', '}\n', '\n', '// File: contracts/GTokenRegistry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @notice This contract allows external agents to detect when new GTokens\n', ' *         are deployed to the network.\n', ' */\n', 'contract GTokenRegistry is Ownable\n', '{\n', '\t/**\n', '\t * @notice Registers a new gToken.\n', '\t * @param _growthToken The address of the token being registered.\n', '\t * @param _oldGrowthToken The address of the token implementation\n', '\t *                        being replaced, for upgrades, or 0x0 0therwise.\n', '\t */\n', '\tfunction registerNewToken(address _growthToken, address _oldGrowthToken) public onlyOwner\n', '\t{\n', '\t\temit NewToken(_growthToken, _oldGrowthToken);\n', '\t}\n', '\n', '\tevent NewToken(address indexed _growthToken, address indexed _oldGrowthToken);\n', '}']