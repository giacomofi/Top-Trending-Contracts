['pragma solidity 0.5.16;\n', '\n', '\n', 'interface MassetStructs {\n', '\n', '    /** @dev Stores high level basket info */\n', '    struct Basket {\n', '\n', '        /** @dev Array of Bassets currently active */\n', '        Basset[] bassets;\n', '\n', '        /** @dev Max number of bAssets that can be present in any Basket */\n', '        uint8 maxBassets;\n', '\n', '        /** @dev Some bAsset is undergoing re-collateralisation */\n', '        bool undergoingRecol;\n', '\n', '        /**\n', '         * @dev In the event that we do not raise enough funds from the auctioning of a failed Basset,\n', '         * The Basket is deemed as failed, and is undercollateralised to a certain degree.\n', '         * The collateralisation ratio is used to calc Masset burn rate.\n', '         */\n', '        bool failed;\n', '        uint256 collateralisationRatio;\n', '\n', '    }\n', '\n', '    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\n', '    struct Basset {\n', '\n', '        /** @dev Address of the bAsset */\n', '        address addr;\n', '\n', '        /** @dev Status of the basset,  */\n', '        BassetStatus status; // takes uint8 datatype (1 byte) in storage\n', '\n', '        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\n', '        bool isTransferFeeCharged; // takes a byte in storage\n', '\n', '        /**\n', '         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '         */\n', '        uint256 ratio;\n', '\n', '        /** @dev Target weights of the Basset (100% == 1e18) */\n', '        uint256 maxWeight;\n', '\n', '        /** @dev Amount of the Basset that is held in Collateral */\n', '        uint256 vaultBalance;\n', '\n', '    }\n', '\n', '    /** @dev Status of the Basset - has it broken its peg? */\n', '    enum BassetStatus {\n', '        Default,\n', '        Normal,\n', '        BrokenBelowPeg,\n', '        BrokenAbovePeg,\n', '        Blacklisted,\n', '        Liquidating,\n', '        Liquidated,\n', '        Failed\n', '    }\n', '\n', '    /** @dev Internal details on Basset */\n', '    struct BassetDetails {\n', '        Basset bAsset;\n', '        address integrator;\n', '        uint8 index;\n', '    }\n', '\n', '    /** @dev All details needed to Forge with multiple bAssets */\n', '    struct ForgePropsMulti {\n', '        bool isValid; // Flag to signify that forge bAssets have passed validity check\n', '        Basset[] bAssets;\n', '        address[] integrators;\n', '        uint8[] indexes;\n', '    }\n', '\n', '    /** @dev All details needed for proportionate Redemption */\n', '    struct RedeemPropsMulti {\n', '        uint256 colRatio;\n', '        Basset[] bAssets;\n', '        address[] integrators;\n', '        uint8[] indexes;\n', '    }\n', '}\n', '\n', 'contract IMasset is MassetStructs {\n', '\n', '    /** @dev Calc interest */\n', '    function collectInterest() external returns (uint256 massetMinted, uint256 newTotalSupply);\n', '\n', '    /** @dev Minting */\n', '    function mint(address _basset, uint256 _bassetQuantity)\n', '        external returns (uint256 massetMinted);\n', '    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\n', '        external returns (uint256 massetMinted);\n', '    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\n', '        external returns (uint256 massetMinted);\n', '\n', '    /** @dev Swapping */\n', '    function swap( address _input, address _output, uint256 _quantity, address _recipient)\n', '        external returns (uint256 output);\n', '    function getSwapOutput( address _input, address _output, uint256 _quantity)\n', '        external view returns (bool, string memory, uint256 output);\n', '\n', '    /** @dev Redeeming */\n', '    function redeem(address _basset, uint256 _bassetQuantity)\n', '        external returns (uint256 massetRedeemed);\n', '    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\n', '        external returns (uint256 massetRedeemed);\n', '    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\n', '        external returns (uint256 massetRedeemed);\n', '    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\n', '\n', '    /** @dev Setters for the Manager or Gov to update module info */\n', '    function upgradeForgeValidator(address _newForgeValidator) external;\n', '\n', '    /** @dev Setters for Gov to set system params */\n', '    function setSwapFee(uint256 _swapFee) external;\n', '\n', '    /** @dev Getters */\n', '    function getBasketManager() external view returns(address);\n', '    function forgeValidator() external view returns (address);\n', '    function totalSupply() external view returns (uint256);\n', '    function swapFee() external view returns (uint256);\n', '}\n', '\n', 'interface ISavingsContract {\n', '\n', '    /** @dev Manager privs */\n', '    function depositInterest(uint256 _amount) external;\n', '\n', '    /** @dev Saver privs */\n', '    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued);\n', '    function redeem(uint256 _amount) external returns (uint256 massetReturned);\n', '\n', '    /** @dev Getters */\n', '    function exchangeRate() external view returns (uint256);\n', '    function creditBalances(address) external view returns (uint256);\n', '}\n', '\n', 'interface ISavingsManager {\n', '\n', '    /** @dev Admin privs */\n', '    function withdrawUnallocatedInterest(address _mAsset, address _recipient) external;\n', '\n', '    /** @dev Liquidator */\n', '    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\n', '\n', '    /** @dev Public privs */\n', '    function collectAndDistributeInterest(address _mAsset) external;\n', '\n', '}\n', '\n', 'contract ModuleKeys {\n', '\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR = 0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '    function cancelProposedModule(bytes32 _key) external;\n', '    function acceptProposedModule(bytes32 _key) external;\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '    function cancelLockModule(bytes32 _key) external;\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'contract Module is ModuleKeys {\n', '\n', '    INexus public nexus;\n', '\n', '    /**\n', '     * @dev Initialises the Module by setting publisher addresses,\n', '     *      and reading all available system module information\n', '     */\n', '    constructor(address _nexus) internal {\n', '        require(_nexus != address(0), "Nexus is zero address");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(\n', '            msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _liquidator() internal view returns (address) {\n', '        return nexus.getModule(KEY_LIQUIDATOR);\n', '    }\n', '}\n', '\n', 'contract PausableModule is Module {\n', '\n', '    /**\n', '     * @dev Emitted when the pause is triggered by Governor\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by Governor\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     * Hooks into the Module to give the Governor ability to pause\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor (address _nexus) internal Module(_nexus) {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     * @return Returns `true` when paused, otherwise `false`\n', '     */\n', '    function paused() external view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the Governor to pause, triggers stopped state.\n', '     */\n', '    function pause() external onlyGovernor whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by Governor to unpause, returns to normal state.\n', '     */\n', '    function unpause() external onlyGovernor whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * @dev bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x.mul(FULL_SCALE);\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x.mul(ratio);\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil.div(RATIO_SCALE);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        uint256 y = x.mul(RATIO_SCALE);\n', '        // return 1e22 / 1e12 = 1e10\n', '        return y.div(ratio);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', '// External\n', '// Internal\n', '// Libs\n', '/**\n', ' * @title   SavingsManager\n', ' * @author  Stability Labs Pty. Ltd.\n', ' * @notice  Savings Manager collects interest from mAssets and sends them to the\n', ' *          corresponding Savings Contract, performing some validation in the process.\n', ' * @dev     VERSION: 1.1\n', ' *          DATE:    2020-07-29\n', ' */\n', 'contract SavingsManager is ISavingsManager, PausableModule {\n', '\n', '    using SafeMath for uint256;\n', '    using StableMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Core admin events\n', '    event SavingsContractAdded(address indexed mAsset, address savingsContract);\n', '    event SavingsContractUpdated(address indexed mAsset, address savingsContract);\n', '    event SavingsRateChanged(uint256 newSavingsRate);\n', '    // Interest collection\n', '    event LiquidatorDeposited(address indexed mAsset, uint256 amount);\n', '    event InterestCollected(address indexed mAsset, uint256 interest, uint256 newTotalSupply, uint256 apy);\n', '    event InterestDistributed(address indexed mAsset, uint256 amountSent);\n', '    event InterestWithdrawnByGovernor(address indexed mAsset, address recipient, uint256 amount);\n', '\n', '    // Locations of each mAsset savings contract\n', '    mapping(address => ISavingsContract) public savingsContracts;\n', '    // Time at which last collection was made\n', '    mapping(address => uint256) public lastPeriodStart;\n', '    mapping(address => uint256) public lastCollection;\n', '    mapping(address => uint256) public periodYield;\n', '\n', '    // Amount of collected interest that will be sent to Savings Contract (100%)\n', '    uint256 private savingsRate = 1e18;\n', '    // Utils to help keep interest under check\n', '    uint256 constant private SECONDS_IN_YEAR = 365 days;\n', '    // Theoretical cap on APY to avoid excess inflation\n', '    uint256 constant private MAX_APY = 15e18;\n', '    uint256 constant private TEN_BPS = 1e15;\n', '    uint256 constant private THIRTY_MINUTES = 30 minutes;\n', '    // Streaming liquidated tokens to SAVE\n', '    uint256 private constant DURATION = 7 days;\n', '    // Timestamp for current period finish\n', '    mapping(address => uint256) public rewardEnd;\n', '    mapping(address => uint256) public rewardRate;\n', '\n', '    constructor(\n', '        address _nexus,\n', '        address _mUSD,\n', '        address _savingsContract\n', '    )\n', '        public\n', '        PausableModule(_nexus)\n', '    {\n', '        _updateSavingsContract(_mUSD, _savingsContract);\n', '        emit SavingsContractAdded(_mUSD, _savingsContract);\n', '    }\n', '\n', '    modifier onlyLiquidator() {\n', '        require(msg.sender == _liquidator(), "Only liquidator can execute");\n', '        _;\n', '    }\n', '\n', '    /***************************************\n', '                    STATE\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Adds a new savings contract\n', '     * @param _mAsset           Address of underlying mAsset\n', '     * @param _savingsContract  Address of the savings contract\n', '     */\n', '    function addSavingsContract(address _mAsset, address _savingsContract)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        require(address(savingsContracts[_mAsset]) == address(0), "Savings contract already exists");\n', '        _updateSavingsContract(_mAsset, _savingsContract);\n', '        emit SavingsContractAdded(_mAsset, _savingsContract);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates an existing savings contract\n', '     * @param _mAsset           Address of underlying mAsset\n', '     * @param _savingsContract  Address of the savings contract\n', '     */\n', '    function updateSavingsContract(address _mAsset, address _savingsContract)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        require(address(savingsContracts[_mAsset]) != address(0), "Savings contract does not exist");\n', '        _updateSavingsContract(_mAsset, _savingsContract);\n', '        emit SavingsContractUpdated(_mAsset, _savingsContract);\n', '    }\n', '\n', '    function _updateSavingsContract(address _mAsset, address _savingsContract)\n', '        internal\n', '    {\n', '        require(_mAsset != address(0) && _savingsContract != address(0), "Must be valid address");\n', '        savingsContracts[_mAsset] = ISavingsContract(_savingsContract);\n', '\n', '        IERC20(_mAsset).safeApprove(address(_savingsContract), 0);\n', '        IERC20(_mAsset).safeApprove(address(_savingsContract), uint256(-1));\n', '    }\n', '\n', '    /**\n', '     * @dev Sets a new savings rate for interest distribution\n', '     * @param _savingsRate   Rate of savings sent to SavingsContract (100% = 1e18)\n', '     */\n', '    function setSavingsRate(uint256 _savingsRate)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        // Greater than 90% upto 100%\n', '        require(_savingsRate > 9e17 && _savingsRate <= 1e18, "Must be a valid rate");\n', '        savingsRate = _savingsRate;\n', '        emit SavingsRateChanged(_savingsRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the liquidator to deposit proceeds from iquidated gov tokens.\n', '     * Transfers proceeds on a second by second basis to the Savings Contract over 1 week.\n', '     * @param _mAsset The mAsset to transfer and distribute\n', '     * @param _liquidated Units of mAsset to distribute\n', '     */\n', '    function depositLiquidation(address _mAsset, uint256 _liquidated)\n', '        external\n', '        onlyLiquidator\n', '    {\n', '        // transfer liquidated mUSD to here\n', '        IERC20(_mAsset).safeTransferFrom(_liquidator(), address(this), _liquidated);\n', '\n', '        uint256 currentTime = now;\n', '\n', '        // Get remaining rewards\n', '        uint256 end = rewardEnd[_mAsset];\n', '        uint256 lastUpdate = lastCollection[_mAsset];\n', '        uint256 unclaimedSeconds = 0;\n', '        if(currentTime <= end || lastUpdate < end){\n', '            unclaimedSeconds = end.sub(lastUpdate);\n', '        }\n', '        uint256 leftover = unclaimedSeconds.mul(rewardRate[_mAsset]);\n', '\n', '        // Distribute reward per second over 7 days\n', '        rewardRate[_mAsset] = _liquidated.add(leftover).div(DURATION);\n', '        rewardEnd[_mAsset] = currentTime.add(DURATION);\n', '\n', '        // Reset pool data to enable lastCollection usage twice\n', '        lastPeriodStart[_mAsset] = currentTime;\n', '        lastCollection[_mAsset] = currentTime;\n', '        periodYield[_mAsset] = 0;\n', '\n', '        emit LiquidatorDeposited(_mAsset, _liquidated);\n', '    }\n', '\n', '    /***************************************\n', '                COLLECTION\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Collects interest from a target mAsset and distributes to the SavingsContract.\n', '     *      Applies constraints such that the max APY since the last fee collection cannot\n', '     *      exceed the "MAX_APY" variable.\n', '     * @param _mAsset       mAsset for which the interest should be collected\n', '     */\n', '    function collectAndDistributeInterest(address _mAsset)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        ISavingsContract savingsContract = savingsContracts[_mAsset];\n', '        require(address(savingsContract) != address(0), "Must have a valid savings contract");\n', '\n', '        // Get collection details\n', '        uint256 recentPeriodStart = lastPeriodStart[_mAsset];\n', '        uint256 previousCollection = lastCollection[_mAsset];\n', '        lastCollection[_mAsset] = now;\n', '\n', '        // 1. Collect the new interest from the mAsset\n', '        IMasset mAsset = IMasset(_mAsset);\n', '        (uint256 interestCollected, uint256 totalSupply) = mAsset.collectInterest();\n', '\n', '        // 2. Update all the time stamps\n', '        //    Avoid division by 0 by adding a minimum elapsed time of 1 second\n', '        uint256 timeSincePeriodStart = StableMath.max(1, now.sub(recentPeriodStart));\n', '        uint256 timeSinceLastCollection = StableMath.max(1, now.sub(previousCollection));\n', '\n', '        uint256 inflationOperand = interestCollected;\n', '        //    If it has been 30 mins since last collection, reset period data\n', '        if(timeSinceLastCollection > THIRTY_MINUTES) {\n', '            lastPeriodStart[_mAsset] = now;\n', '            periodYield[_mAsset] = 0;\n', '        }\n', '        //    Else if period has elapsed, start a new period from the lastCollection time\n', '        else if(timeSincePeriodStart > THIRTY_MINUTES) {\n', '            lastPeriodStart[_mAsset] = previousCollection;\n', '            periodYield[_mAsset] = interestCollected;\n', '        }\n', '        //    Else add yield to period yield\n', '        else {\n', '            inflationOperand = periodYield[_mAsset].add(interestCollected);\n', '            periodYield[_mAsset] = inflationOperand;\n', '        }\n', '\n', '        //    Add on liquidated\n', '        uint256 newReward = _unclaimedRewards(_mAsset, previousCollection);\n', '        // 3. Validate that interest is collected correctly and does not exceed max APY\n', '        if(interestCollected > 0 || newReward > 0) {\n', '            require(\n', '                IERC20(_mAsset).balanceOf(address(this)) >= interestCollected.add(newReward),\n', '                "Must receive mUSD"\n', '            );\n', '\n', '            uint256 extrapolatedAPY = _validateCollection(totalSupply, inflationOperand, timeSinceLastCollection);\n', '\n', '            emit InterestCollected(_mAsset, interestCollected, totalSupply, extrapolatedAPY);\n', '\n', '            // 4. Distribute the interest\n', '            //    Calculate the share for savers (95e16 or 95%)\n', '            uint256 saversShare = interestCollected.mulTruncate(savingsRate);\n', '\n', '            //    Call depositInterest on contract\n', '            savingsContract.depositInterest(saversShare.add(newReward));\n', '\n', '            emit InterestDistributed(_mAsset, saversShare.add(newReward));\n', '        } else {\n', '            emit InterestCollected(_mAsset, 0, totalSupply, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates unclaimed rewards from the liquidation stream\n', '     * @param _mAsset mAsset key\n', '     * @param _previousCollection Time of previous collection\n', '     * @return Units of mAsset that have been unlocked for distribution\n', '     */\n', '    function _unclaimedRewards(address _mAsset, uint256 _previousCollection) internal view returns (uint256) {\n', '        uint256 end = rewardEnd[_mAsset];\n', '        uint256 unclaimedSeconds = _unclaimedSeconds(_previousCollection, end);\n', '        return unclaimedSeconds.mul(rewardRate[_mAsset]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the seconds of unclaimed rewards, based on period length\n', '     * @param _lastUpdate Time of last update\n', '     * @param _end End time of period\n', '     * @return Seconds of stream that should be compensated\n', '     */\n', '    function _unclaimedSeconds(uint256 _lastUpdate, uint256 _end) internal view returns (uint256) {\n', '        uint256 currentTime = block.timestamp;\n', '        uint256 unclaimedSeconds = 0;\n', '\n', '        if(currentTime <= _end){\n', '            unclaimedSeconds = currentTime.sub(_lastUpdate);\n', '        } else if(_lastUpdate < _end) {\n', '            unclaimedSeconds = _end.sub(_lastUpdate);\n', '        }\n', '        return unclaimedSeconds;\n', '    }\n', '\n', '    /**\n', '     * @dev Validates that an interest collection does not exceed a maximum APY. If last collection\n', '     * was under 30 mins ago, simply check it does not exceed 10bps\n', '     * @param _newSupply               New total supply of the mAsset\n', '     * @param _interest                Increase in total supply since last collection\n', '     * @param _timeSinceLastCollection Seconds since last collection\n', '     */\n', '    function _validateCollection(uint256 _newSupply, uint256 _interest, uint256 _timeSinceLastCollection)\n', '        internal\n', '        pure\n', '        returns (uint256 extrapolatedAPY)\n', '    {\n', '        // Percentage increase in total supply\n', '        // e.g. (1e20 * 1e18) / 1e24 = 1e14 (or a 0.01% increase)\n', '        // e.g. (5e18 * 1e18) / 1.2e24 = 4.1667e12\n', '        // e.g. (1e19 * 1e18) / 1e21 = 1e16\n', '        uint256 oldSupply = _newSupply.sub(_interest);\n', '        uint256 percentageIncrease = _interest.divPrecisely(oldSupply);\n', '\n', '        //      If over 30 mins, extrapolate APY\n', '        // e.g. day: (86400 * 1e18) / 3.154e7 = 2.74..e15\n', '        // e.g. 30 mins: (1800 * 1e18) / 3.154e7 = 5.7..e13\n', '        // e.g. epoch: (1593596907 * 1e18) / 3.154e7 = 50.4..e18\n', '        uint256 yearsSinceLastCollection =\n', '            _timeSinceLastCollection.divPrecisely(SECONDS_IN_YEAR);\n', '\n', '        // e.g. 0.01% (1e14 * 1e18) / 2.74..e15 = 3.65e16 or 3.65% apr\n', '        // e.g. (4.1667e12 * 1e18) / 5.7..e13 = 7.1e16 or 7.1% apr\n', '        // e.g. (1e16 * 1e18) / 50e18 = 2e14\n', '        extrapolatedAPY = percentageIncrease.divPrecisely(yearsSinceLastCollection);\n', '\n', '        if(_timeSinceLastCollection > THIRTY_MINUTES) {\n', '            require(extrapolatedAPY < MAX_APY, "Interest protected from inflating past maxAPY");\n', '        } else {\n', '            require(percentageIncrease < TEN_BPS, "Interest protected from inflating past 10 Bps");\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                MANAGEMENT\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Withdraws any unallocated interest, i.e. that which has been saved for use\n', '     *      elsewhere in the system, based on the savingsRate\n', '     * @param _mAsset       mAsset to collect from\n', '     * @param _recipient    Address of mAsset recipient\n', '     */\n', '    function withdrawUnallocatedInterest(address _mAsset, address _recipient)\n', '        external\n', '        onlyGovernance\n', '    {\n', '        IERC20 mAsset = IERC20(_mAsset);\n', '        uint256 balance = mAsset.balanceOf(address(this));\n', '\n', '        emit InterestWithdrawnByGovernor(_mAsset, _recipient, balance);\n', '\n', '        mAsset.safeTransfer(_recipient, balance);\n', '    }\n', '}']