['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', 'interface IFarm {\n', '    function getBonusToken() external view returns (address);\n', '}\n', '\n', 'interface IPool {\n', '    event Farming(address indexed farmer, address indexed from, uint amount);\n', '    event Unfarming(address indexed farmer, address indexed to, uint amount);\n', '    event Harvest(address indexed farmer, address indexed to, uint amount);\n', '    \n', '    function farming(uint amount) external;\n', '    function farming(address from, uint amount) external;\n', '    function unfarming() external returns (uint amount);\n', '    function unfarming(uint amount) external returns (uint);\n', '    function unfarming(address to, uint amount) external returns (uint);\n', '    function harvest() external returns (uint amount);\n', '    function harvest(address to) external returns (uint amount);\n', '    function harvestCapacity(address farmer) external view returns (uint amount);\n', '}\n', '\n', 'contract SimplePool is IPool, Configurable {\n', '    using SafeMath for uint;\n', '    using TransferHelper for address;\n', '\n', '\taddress public farm;\n', '\taddress public underlying;\n', '\tuint public span;\n', '\tuint public end;\n', '\tuint public totalStaking;\n', '\tmapping(address => uint) public stakingOf;\n', '\tmapping(address => uint) public lasttimeOf;\n', '\t\n', '\tfunction initialize(address governor, address _farm, address _underlying) public initializer {\n', '\t    super.initialize(governor);\n', '\t    \n', '\t    farm        = _farm;\n', '\t    underlying  = _underlying;\n', '\t    \n', '\t    IFarm(farm).getBonusToken();                  // just check\n', '\t    IERC20(underlying).totalSupply();          // just check\n', '\t}\n', '    \n', '    function setHarvestSpan(uint _span, bool isLinear) virtual external governance {\n', '        span = _span;\n', '        if(isLinear)\n', '            end = now + _span;\n', '        else\n', '            end = 0;\n', '    }\n', '    \n', '    function farming(uint amount) virtual override external {\n', '        farming(msg.sender, amount);\n', '    }\n', '    function farming(address from, uint amount) virtual override public {\n', '        harvest();\n', '        \n', '        _farming(from, amount);\n', '        \n', '        stakingOf[msg.sender] = stakingOf[msg.sender].add(amount);\n', '        totalStaking = totalStaking.add(amount);\n', '        \n', '        emit Farming(msg.sender, from, amount);\n', '    }\n', '    function _farming(address from, uint amount) virtual internal {\n', '        underlying.safeTransferFrom(from, address(this), amount);\n', '    }\n', '    \n', '    function unfarming() virtual override external returns (uint amount){\n', '        return unfarming(msg.sender, stakingOf[msg.sender]);\n', '    }\n', '    function unfarming(uint amount) virtual override external returns (uint){\n', '        return unfarming(msg.sender, amount);\n', '    }\n', '    function unfarming(address to, uint amount) virtual override public returns (uint){\n', '        harvest();\n', '        \n', '        totalStaking = totalStaking.sub(amount);\n', '        stakingOf[msg.sender] = stakingOf[msg.sender].sub(amount);\n', '        \n', '        _unfarming(to, amount);\n', '        \n', '        emit Unfarming(msg.sender, to, amount);\n', '        return amount;\n', '    }\n', '    function _unfarming(address to, uint amount) virtual internal returns (uint){\n', '        underlying.safeTransfer(to, amount);\n', '        return amount;\n', '    }\n', '    \n', '    function harvest() virtual override public returns (uint amount) {\n', '        return harvest(msg.sender);\n', '    }\n', '    function harvest(address to) virtual override public returns (uint amount) {\n', '        amount = harvestCapacity(msg.sender);\n', '        _harvest(to, amount);\n', '    \n', '        lasttimeOf[msg.sender] = now;\n', '\n', '        emit Harvest(msg.sender, to, amount);\n', '    }\n', '    function _harvest(address to, uint amount) virtual internal {\n', '        if(amount > 0) {\n', '            IFarm(farm).getBonusToken().safeTransferFrom(farm, to, amount);\n', "            if(config['teamAddr'] != 0 && config['teamRatio'] != 0)\n", "                IFarm(farm).getBonusToken().safeTransferFrom(farm, address(config['teamAddr']), amount.mul(config['teamRatio']).div(1 ether));\n", '        }\n', '    }\n', '    \n', '    function harvestCapacity(address farmer) virtual override public view returns (uint amount) {\n', '        if(span == 0 || totalStaking == 0)\n', '            return amount;\n', '        \n', '        amount = IERC20(IFarm(farm).getBonusToken()).allowance(farm, address(this));\n', '        amount = amount.mul(stakingOf[farmer]).div(totalStaking);\n', '        \n', '        uint lasttime = lasttimeOf[farmer];\n', '        if(end == 0) {                                                         // isNonLinear, endless\n', '            if(now.sub(lasttime) < span)\n', '                amount = amount.mul(now.sub(lasttime)).div(span);\n', '        }else if(now < end)\n', '            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\n', '        else if(lasttime >= end)\n', '            amount = 0;\n', '    }\n', '} \n', '\n', 'contract ExactPool is IPool, Configurable {\n', '    using SafeMath for uint;\n', '    using TransferHelper for address;\n', '\n', "\tbytes32 constant private _bonusPerDay_\t\t= 'bonusPerDay';\n", '\n', '\taddress public farm;\n', '\taddress public underlying;\n', '\tuint public totalStaking;\n', '\tmapping(address => uint) public stakingOf;\n', '\tmapping(address => uint) public sumRewardPerOf;\n', '\tuint public sumRewardPer;\n', '\tuint public lasttime;\n', '\t\n', '\tfunction initialize(address governor, address _farm, address _underlying, uint bonusPerDay) virtual public initializer {\n', '\t    super.initialize(governor);\n', '\t    \n', '\t    farm     = _farm;\n', '\t    underlying  = _underlying;\n', '\t\tconfig[_bonusPerDay_] = bonusPerDay;\n', '        lasttime = now;\n', '\t    \n', '\t    IFarm(farm).getBonusToken();                   // just check\n', '\t    IERC20(underlying).totalSupply();           // just check\n', '\t}\n', '    \n', '    function farming(uint amount) virtual override external {\n', '        farming(msg.sender, amount);\n', '    }\n', '    function farming(address from, uint amount) virtual override public {\n', '        harvest();\n', '        \n', '        _farming(from, amount);\n', '        \n', '        stakingOf[msg.sender] = stakingOf[msg.sender].add(amount);\n', '        totalStaking = totalStaking.add(amount);\n', '        \n', '        emit Farming(msg.sender, from, amount);\n', '    }\n', '    function _farming(address from, uint amount) virtual internal {\n', '        underlying.safeTransferFrom(from, address(this), amount);\n', '    }\n', '    \n', '    function unfarming() virtual override external returns (uint amount){\n', '        return unfarming(msg.sender, stakingOf[msg.sender]);\n', '    }\n', '    function unfarming(uint amount) virtual override external returns (uint){\n', '        return unfarming(msg.sender, amount);\n', '    }\n', '    function unfarming(address to, uint amount) virtual override public returns (uint){\n', '        harvest();\n', '        \n', '        totalStaking = totalStaking.sub(amount);\n', '        stakingOf[msg.sender] = stakingOf[msg.sender].sub(amount);\n', '        \n', '        _unfarming(to, amount);\n', '        \n', '        emit Unfarming(msg.sender, to, amount);\n', '        return amount;\n', '    }\n', '    function _unfarming(address to, uint amount) virtual internal returns (uint){\n', '        underlying.safeTransfer(to, amount);\n', '        return amount;\n', '    }\n', '    \n', '    function harvest() virtual override public returns (uint amount) {\n', '        return harvest(msg.sender);\n', '    }\n', '    function harvest(address to) virtual override public returns (uint amount) {\n', '        amount = 0;\n', '        if(totalStaking == 0)\n', '            return amount;\n', '        \n', '        uint delta = _harvestDelta();\n', '        amount = _harvestCapacity(msg.sender, delta, sumRewardPer, sumRewardPerOf[msg.sender]);\n', '        \n', '        if(delta > 0)\n', '            sumRewardPer = sumRewardPer.add(delta.mul(1 ether).div(totalStaking));\n', '        if(sumRewardPerOf[msg.sender] != sumRewardPer)\n', '            sumRewardPerOf[msg.sender] = sumRewardPer;\n', '        lasttime = now;\n', '\n', '        _harvest(to, amount);\n', '    \n', '        emit Harvest(msg.sender, to, amount);\n', '    }\n', '    function _harvest(address to, uint amount) virtual internal {\n', '        if(amount > 0) {\n', '            IFarm(farm).getBonusToken().safeTransferFrom(farm, to, amount);\n', "            if(config['teamAddr'] != 0 && config['teamRatio'] != 0)\n", "                IFarm(farm).getBonusToken().safeTransferFrom(farm, address(config['teamAddr']), amount.mul(config['teamRatio']).div(1 ether));\n", '        }\n', '    }\n', '    \n', '    function harvestCapacity(address farmer) virtual override public view returns (uint amount) {\n', '        amount = _harvestCapacity(farmer, _harvestDelta(), sumRewardPer, sumRewardPerOf[farmer]);\n', '    }\n', '    function _harvestCapacity(address farmer, uint delta, uint sumPer, uint lastSumPer) virtual internal view returns (uint amount) {\n', '        if(totalStaking == 0)\n', '            return 0;\n', '        \n', '        amount = sumPer.sub(lastSumPer);\n', '        amount = amount.add(delta.mul(1 ether).div(totalStaking));\n', '        amount = amount.mul(stakingOf[farmer]).div(1 ether);\n', '    }\n', '    function _harvestDelta() virtual internal view returns(uint) {\n', '\t\tif(now > lasttime)\n', '\t\t\treturn getBonusPerDay().mul(now.sub(lasttime)).div(1 days);\n', '\t\telse\n', '\t\t    return 0;\n', '    }\n', '    \n', '    function getBonusPerDay() public view returns (uint) {\n', '        return config[_bonusPerDay_];\n', '    }\n', '} \n', '\n', 'contract LiquidityPool is ExactPool {\n', '\tfunction initialize(address governor, address bounce, address lp_token, uint bonusPerDay) virtual override public initializer {\n', '\t    super.initialize(governor, bounce, lp_token, bonusPerDay);\n', '\t}\n', '}\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}']