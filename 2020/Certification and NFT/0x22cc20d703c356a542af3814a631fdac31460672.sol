['// SPDX-License-Identifier: MIT\n', '// COPYRIGHT cVault.finance TEAM\n', '// NO COPY\n', '// COPY = BAD\n', '// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\n', '//  _____ ___________ _____   _____ _       _           _     \n', '// /  __ \\  _  | ___ \\  ___| |  __ \\ |     | |         | |    \n', '// | /  \\/ | | | |_/ / |__   | |  \\/ | ___ | |__   __ _| |___ \n', "// | |   | | | |    /|  __|  | | __| |/ _ \\| '_ \\ / _` | / __|\n", '// | \\__/\\ \\_/ / |\\ \\| |___  | |_\\ \\ | (_) | |_) | (_| | \\__ \\\n', '//  \\____/\\___/\\_| \\_\\____/   \\____/_|\\___/|_.__/ \\__,_|_|___/                                                         \n', '//                                                          \n', '// This contract stores all different CORE contract addreses \n', '// and is responsible for contract authentification in the CORE smart contract mesh\n', '//\n', '// BBBBBBBBBBBBBBBBBBBBBBBBBBB\n', '// BMB---------------------B B\n', '// BBB---------------------BBB\n', '// BBB---------------------BBB\n', '// BBB------CORE.exe-------BBB\n', '// BBB---------------------BBB\n', '// BBB---------------------BBB\n', '// BBBBBBBBBBBBBBBBBBBBBBBBBBB\n', '// BBBBB++++++++++++++++BBBBBB\n', '// BBBBB++BBBBB+++++++++BBBBBB\n', '// BBBBB++BBBBB+++++++++BBBBBB\n', '// BBBBB++BBBBB+++++++++BBBBBB\n', '// BBBBB++++++++++++++++BBBBBB\n', '\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/v612/COREGlobals.sol\n', '\n', 'contract COREGlobals is OwnableUpgradeSafe {\n', '\n', '    address public CORETokenAddress;\n', '    address public COREGlobalsAddress;\n', '    address public COREDelegatorAddress;\n', '    address public COREVaultAddress;\n', '    address public COREWETHUniPair;\n', '    address public UniswapFactory;\n', '    address public TransferHandler;\n', '\n', '    function initialize(address _COREWETHUniPair, address _COREToken, address _COREDelegator, address _COREVault, address _uniFactory, address _transferHandler) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        CORETokenAddress = _COREToken;\n', '        COREGlobalsAddress = address(this);\n', '        COREDelegatorAddress = _COREDelegator;\n', '        COREVaultAddress = _COREVault;\n', '        UniswapFactory = _uniFactory;\n', '        TransferHandler = _transferHandler;\n', '        COREWETHUniPair = _COREWETHUniPair;\n', '    }\n', '\n', '    function setCoreToken(address _COREToken) public onlyOwner {\n', '        CORETokenAddress = _COREToken;\n', '    }\n', '\n', '    function setCoreDelegator(address _COREDelegator) public onlyOwner {\n', '        COREDelegatorAddress = _COREDelegator;\n', '    }\n', '\n', '    function setCoreVaultAddress(address _COREVault) public onlyOwner {\n', '        COREVaultAddress = _COREVault;\n', '    }\n', '\n', '    function setTransferHandler(address _transferHandler) public onlyOwner {\n', '        TransferHandler = _transferHandler;\n', '    }\n', '\n', '    mapping (address => bool) private delegatorStateChangeApproved;\n', '\n', '    function addDelegatorStateChangePermission(address that, bool status) public onlyOwner {\n', '        return _addDelegatorStateChangePermission(that, status);\n', '    }\n', '\n', '    function _addDelegatorStateChangePermission(address that, bool status) internal {\n', '        require(isContract(that), "Only contracts");\n', '        delegatorStateChangeApproved[that] = status;\n', '    }\n', '\n', '    // Only contracts.\n', '    function isStateChangeApprovedContract(address that)  public view returns (bool) {\n', '        return _isStateChangeApprovedContract(that);\n', '    }\n', '\n', '    function _isStateChangeApprovedContract(address that) internal view returns (bool) {\n', '        return delegatorStateChangeApproved[that];\n', '    }\n', '\n', '    function isContract(address addr) public view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}']