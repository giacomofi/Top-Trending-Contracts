['// SPDX-License-Identifier: Apache-2.0\n', '// Copyright 2017 Loopring Technology Limited.\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/// @title Ownable\n', '/// @author Brecht Devos - <brecht@loopring.org>\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable\n', '{\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    constructor()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      new owner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0), "ZERO_ADDRESS");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership()\n', '        public\n', '        onlyOwner\n', '    {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IAmmSharedConfig\n', '{\n', '    function maxForcedExitAge() external view returns (uint);\n', '    function maxForcedExitCount() external view returns (uint);\n', '    function forcedExitFee() external view returns (uint);\n', '}\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '\n', '// Copyright 2017 Loopring Technology Limited.\n', '\n', '\n', '\n', '\n', '\n', '/// @title Claimable\n', '/// @author Brecht Devos - <brecht@loopring.org>\n', '/// @dev Extension for the Ownable contract, where the ownership needs\n', '///      to be claimed. This allows the new owner to accept the transfer.\n', 'contract Claimable is Ownable\n', '{\n', '    address public pendingOwner;\n', '\n', '    /// @dev Modifier throws if called by any account other than the pendingOwner.\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to set the pendingOwner address.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0) && newOwner != owner, "INVALID_ADDRESS");\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /// @dev Allows the pendingOwner address to finalize the transfer.\n', '    function claimOwnership()\n', '        public\n', '        onlyPendingOwner\n', '    {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract LoopringAmmSharedConfig is Claimable, IAmmSharedConfig\n', '{\n', '    uint _maxForcedExitAge;\n', '    uint _maxForcedExitCount;\n', '    uint _forcedExitFee;\n', '\n', '    event ValueChanged(string name, uint value);\n', '\n', '    function maxForcedExitAge()\n', '        external\n', '        view\n', '        override\n', '        returns (uint)\n', '    {\n', '        return _maxForcedExitAge;\n', '    }\n', '\n', '    function maxForcedExitCount()\n', '        external\n', '        view\n', '        override\n', '        returns (uint)\n', '    {\n', '        return _maxForcedExitCount;\n', '    }\n', '\n', '    function forcedExitFee()\n', '        external\n', '        view\n', '        override\n', '        returns (uint)\n', '    {\n', '        return _forcedExitFee;\n', '    }\n', '\n', '    function setMaxForcedExitAge(uint v)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _maxForcedExitAge = v;\n', '        emit ValueChanged("maxForcedExitAge", v);\n', '    }\n', '\n', '    function setMaxForcedExitCount(uint v)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _maxForcedExitCount = v;\n', '        emit ValueChanged("maxForcedExitCount", v);\n', '    }\n', '\n', '    function setForcedExitFee(uint v)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _forcedExitFee = v;\n', '        emit ValueChanged("forcedExitFee", v);\n', '    }\n', '}']