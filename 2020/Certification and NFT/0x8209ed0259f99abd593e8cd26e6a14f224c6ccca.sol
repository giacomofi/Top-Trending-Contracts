['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard {\n', '    // counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', '// File: contracts/protocol/interfaces/IWETH.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IWETH {\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint wad) external;\n', '\n', '}\n', '\n', '// File: contracts/utils/AddressUtil.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.11;\n', '\n', '\n', '/// @title Utility Functions for addresses\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', '/// @author Brecht Devos - <brecht@loopring.org>\n', 'library AddressUtil\n', '{\n', '    using AddressUtil for *;\n', '\n', '    function isContract(\n', '        address addr\n', '    )\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        uint32 size;\n', '        assembly {size := extcodesize(addr)}\n', '        return (size > 0);\n', '    }\n', '\n', '    function toPayable(\n', '        address addr\n', '    )\n', '    internal\n', '    pure\n', '    returns (address payable)\n', '    {\n', '        return address(uint160(addr));\n', '    }\n', '\n', '    // Works like address.send but with a customizable gas limit\n', '    // Make sure your code is safe for reentrancy when using this function!\n', '    function sendETH(\n', '        address to,\n', '        uint amount\n', '    )\n', '    internal\n', '    returns (bool success) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        address payable recipient = to.toPayable();\n', '        require(address(this).balance >= amount, "AddressUtil::sendETH: INSUFFICIENT_BALANCE");\n', '\n', '        /* solium-disable-next-line */\n', '        (success,) = recipient.call.value(amount)("");\n', '    }\n', '\n', '    // Works like address.transfer but with a customizable gas limit\n', '    // Make sure your code is safe for reentrancy when using this function!\n', '    function sendETHAndVerify(\n', '        address to,\n', '        uint amount\n', '    )\n', '    internal\n', '    returns (bool success)\n', '    {\n', '        success = to.sendETH(amount);\n', '        require(success, "TRANSFER_FAILURE");\n', '    }\n', '}\n', '\n', '// File: contracts/external/uniswap/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function price0CumulativeLast() external view returns (uint);\n', '\n', '    function price1CumulativeLast() external view returns (uint);\n', '\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '\n', '}\n', '\n', '// File: contracts/external/uniswap/libs/UniswapV2Library.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'library UniswapV2Library {\n', '\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes32 initCodeHash) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '            // Taken from the UniswapV2Pair.json "bytecode" field\n', "            //                keccak256(hex'60806040526001600c5534801561001557600080fd5b5060405146908060526123868239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612281806101056000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610534578063d505accf1461053c578063dd62ed3e1461058d578063fff6cae9146105bb576101a9565b8063ba9a7a56146104fe578063bc25cf7714610506578063c45a01551461052c576101a9565b80637ecebe00116100d35780637ecebe001461046557806389afcb441461048b57806395d89b41146104ca578063a9059cbb146104d2576101a9565b80636a6278421461041157806370a08231146104375780637464fc3d1461045d576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb578063485cc955146103d35780635909c0d5146104015780635a3d549314610409576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105c3565b005b610244610afe565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b24565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610b4e565b604080519115158252519081900360200190f35b610339610b65565b604080516001600160a01b039092168252519081900360200190f35b61035d610b74565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610b7a565b61035d610c14565b6103b5610c38565b6040805160ff9092168252519081900360200190f35b61035d610c3d565b61023a600480360360408110156103e957600080fd5b506001600160a01b0381358116916020013516610c43565b61035d610cc7565b61035d610ccd565b61035d6004803603602081101561042757600080fd5b50356001600160a01b0316610cd3565b61035d6004803603602081101561044d57600080fd5b50356001600160a01b0316610fd3565b61035d610fe5565b61035d6004803603602081101561047b57600080fd5b50356001600160a01b0316610feb565b6104b1600480360360208110156104a157600080fd5b50356001600160a01b0316610ffd565b6040805192835260208301919091528051918290030190f35b6102446113a3565b61031d600480360360408110156104e857600080fd5b506001600160a01b0381351690602001356113c5565b61035d6113d2565b61023a6004803603602081101561051c57600080fd5b50356001600160a01b03166113d8565b610339611543565b610339611552565b61023a600480360360e081101561055257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611561565b61035d600480360360408110156105a357600080fd5b506001600160a01b0381358116916020013516611763565b61023a611780565b600c5460011461060e576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55841515806106215750600084115b61065c5760405162461bcd60e51b81526004018080602001828103825260258152602001806121936025913960400191505060405180910390fd5b600080610667610b24565b5091509150816001600160701b03168710801561068c5750806001600160701b031686105b6106c75760405162461bcd60e51b81526004018080602001828103825260218152602001806121dc6021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107055750806001600160a01b0316896001600160a01b031614155b61074e576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561075f5761075f828a8d6118e2565b891561077057610770818a8c6118e2565b861561082b57886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561087157600080fd5b505afa158015610885573d6000803e3d6000fd5b505050506040513d602081101561089b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d602081101561091157600080fd5b5051925060009150506001600160701b0385168a90038311610934576000610943565b89856001600160701b03160383035b9050600089856001600160701b031603831161096057600061096f565b89856001600160701b03160383035b905060008211806109805750600081115b6109bb5760405162461bcd60e51b81526004018080602001828103825260248152602001806121b86024913960400191505060405180910390fd5b60006109ef6109d184600363ffffffff611a7c16565b6109e3876103e863ffffffff611a7c16565b9063ffffffff611adf16565b90506000610a076109d184600363ffffffff611a7c16565b9050610a38620f4240610a2c6001600160701b038b8116908b1663ffffffff611a7c16565b9063ffffffff611a7c16565b610a48838363ffffffff611a7c16565b1015610a8a576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610a9884848888611b2f565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b5b338484611cf4565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610bff576001600160a01b0384166000908152600260209081526040808320338452909152902054610bda908363ffffffff611adf16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c0a848484611d56565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610c99576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d20576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610d30610b24565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d6020811015610e2b57600080fd5b505190506000610e4a836001600160701b03871663ffffffff611adf16565b90506000610e67836001600160701b03871663ffffffff611adf16565b90506000610e758787611e10565b60005490915080610eb257610e9e6103e86109e3610e99878763ffffffff611a7c16565b611f6e565b9850610ead60006103e8611fc0565b610f01565b610efe6001600160701b038916610ecf868463ffffffff611a7c16565b81610ed657fe5b046001600160701b038916610ef1868563ffffffff611a7c16565b81610ef857fe5b04612056565b98505b60008911610f405760405162461bcd60e51b81526004018080602001828103825260288152602001806122256028913960400191505060405180910390fd5b610f4a8a8a611fc0565b610f5686868a8a611b2f565b8115610f8657600854610f82906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461104b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c8190558061105b610b24565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d60208110156110e157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b5051306000908152600160205260408120549192506111788888611e10565b6000549091508061118f848763ffffffff611a7c16565b8161119657fe5b049a50806111aa848663ffffffff611a7c16565b816111b157fe5b04995060008b1180156111c4575060008a115b6111ff5760405162461bcd60e51b81526004018080602001828103825260288152602001806121fd6028913960400191505060405180910390fd5b611209308461206e565b611214878d8d6118e2565b61121f868d8c6118e2565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d602081101561128f57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d602081101561130557600080fd5b5051935061131585858b8b611b2f565b811561134557600854611341906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610b5b338484611d56565b6103e881565b600c54600114611423576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926114d292859287926114cd926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d60208110156114bf57600080fd5b50519063ffffffff611adf16565b6118e2565b600854604080516370a0823160e01b8152306004820152905161153992849287926114cd92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156115ab576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156116c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116fc5750886001600160a01b0316816001600160a01b0316145b61174d576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611758898989611cf4565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146117cb576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516118db926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561181c57600080fd5b505afa158015611830573d6000803e3d6000fd5b505050506040513d602081101561184657600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d60208110156118bd57600080fd5b50516008546001600160701b0380821691600160701b900416611b2f565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061198f5780518252601f199092019160209182019101611970565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119f1576040519150601f19603f3d011682016040523d82523d6000602084013e6119f6565b606091505b5091509150818015611a24575080511580611a245750808060200190516020811015611a2157600080fd5b50515b611a75576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000811580611a9757505080820282828281611a9457fe5b04145b610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5f576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611b4d57506001600160701b038311155b611b94576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611bc457506001600160701b03841615155b8015611bd857506001600160701b03831615155b15611c49578063ffffffff16611c0685611bf18661210c565b6001600160e01b03169063ffffffff61211e16565b600980546001600160e01b03929092169290920201905563ffffffff8116611c3184611bf18761210c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611d7f908263ffffffff611adf16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611db4908263ffffffff61214316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6157600080fd5b505afa158015611e75573d6000803e3d6000fd5b505050506040513d6020811015611e8b57600080fd5b5051600b546001600160a01b038216158015945091925090611f5a578015611f55576000611ece610e996001600160701b0388811690881663ffffffff611a7c16565b90506000611edb83611f6e565b905080821115611f52576000611f09611efa848463ffffffff611adf16565b6000549063ffffffff611a7c16565b90506000611f2e83611f2286600563ffffffff611a7c16565b9063ffffffff61214316565b90506000818381611f3b57fe5b0490508015611f4e57611f4e8782611fc0565b5050505b50505b611f66565b8015611f66576000600b555b505092915050565b60006003821115611fb1575080600160028204015b81811015611fab57809150600281828581611f9a57fe5b040181611fa357fe5b049050611f83565b50611fbb565b8115611fbb575060015b919050565b600054611fd3908263ffffffff61214316565b60009081556001600160a01b038316815260016020526040902054611ffe908263ffffffff61214316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120655781612067565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612097908263ffffffff611adf16565b6001600160a01b038316600090815260016020526040812091909155546120c4908263ffffffff611adf16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161213b57fe5b049392505050565b80820182811015610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a7231582082fba8557d35ae5eca98219a61e967d398ed8eaafeafa5fe5af73dd6aad9ddfd64736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429') // init code hash\n", "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB, bytes32 initCodeHash) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, initCodeHash)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint amountIn,\n', '        uint reserveIn,\n', '        uint reserveOut\n', '    ) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint amountOut,\n', '        uint reserveIn,\n', '        uint reserveOut\n', '    ) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint amountIn,\n', '        address[] memory path,\n', '        bytes32 initCodeHash\n', '    ) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], initCodeHash);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint amountOut,\n', '        address[] memory path,\n', '        bytes32 initCodeHash\n', '    ) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], initCodeHash);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/external/farming/v1/IDMGYieldFarmingV1.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * The interface for DMG "Yield Farming" - A process through which users may earn DMG by locking up their mTokens in\n', " * Uniswap pools, and staking the Uniswap pool's equity token in this contract.\n", ' *\n', ' * Yield farming in the DMM Ecosystem entails "rotation periods" in which a season is active, in order to incentivize\n', ' * deposits of underlying tokens into the protocol.\n', ' */\n', 'interface IDMGYieldFarmingV1 {\n', '\n', '    // ////////////////////\n', '    // Events\n', '    // ////////////////////\n', '\n', '    event GlobalProxySet(address indexed proxy, bool isTrusted);\n', '\n', '    event TokenAdded(address indexed token, address indexed underlyingToken, uint8 underlyingTokenDecimals, uint16 points);\n', '    event TokenRemoved(address indexed token);\n', '\n', '    event FarmSeasonBegun(uint indexed seasonIndex, uint dmgAmount);\n', '    event FarmSeasonEnd(uint indexed seasonIndex, address dustRecipient, uint dustyDmgAmount);\n', '\n', '    event DmgGrowthCoefficientSet(uint coefficient);\n', '    event RewardPointsSet(address indexed token, uint16 points);\n', '\n', '    event Approval(address indexed user, address indexed spender, bool isTrusted);\n', '\n', '    event BeginFarming(address indexed owner, address indexed token, uint depositedAmount);\n', '    event EndFarming(address indexed owner, address indexed token, uint withdrawnAmount, uint earnedDmgAmount);\n', '\n', '    event WithdrawOutOfSeason(address indexed owner, address indexed token, address indexed recipient, uint amount);\n', '\n', '    // ////////////////////\n', '    // Admin Functions\n', '    // ////////////////////\n', '\n', '    /**\n', "     * Sets the `proxy` as a trusted contract, allowing it to interact with the user, on the user's behalf.\n", '     *\n', "     * @param proxy     The address that can interact on the user's behalf.\n", "     * @param isTrusted True if the proxy is trusted or false if it's not (should be removed).\n", '     */\n', '    function approveGloballyTrustedProxy(address proxy, bool isTrusted) external;\n', '\n', '    /**\n', '     * @return  true if the provided `proxy` is globally trusted and may interact with the yield farming contract on a\n', "     *          user's behalf or false otherwise.\n", '     */\n', '    function isGloballyTrustedProxy(address proxy) external view returns (bool);\n', '\n', '    /**\n', '     * @param token                     The address of the token to be supported for farming.\n', '     * @param underlyingToken           The token to which this token is pegged. IE a Uniswap-V2 LP equity token for\n', '     *                                  DAI-mDAI has an underlying token of DAI.\n', '     * @param underlyingTokenDecimals   The number of decimals that the `underlyingToken` has.\n', '     * @param points                    The amount of reward points for the provided token.\n', '     */\n', '    function addAllowableToken(address token, address underlyingToken, uint8 underlyingTokenDecimals, uint16 points) external;\n', '\n', '    /**\n', '     * @param token     The address of the token that will be removed from farming.\n', '     */\n', '    function removeAllowableToken(address token) external;\n', '\n', '    /**\n', '     * Changes the reward points for the provided token. Reward points are a weighting system that enables certain\n', '     * tokens to accrue DMG faster than others, allowing the protocol to prioritize certain deposits.\n', '     */\n', '    function setRewardPointsByToken(address token, uint16 points) external;\n', '\n', '    /**\n', '     * Sets the DMG growth coefficient to use the new parameter provided. This variable is used to define how much\n', '     * DMG is earned every second, for each point accrued.\n', '     */\n', '    function setDmgGrowthCoefficient(uint dmgGrowthCoefficient) external;\n', '\n', '    /**\n', '     * Begins the farming process so users that accumulate DMG by locking tokens can start for this rotation. Calling\n', '     * this function increments the currentSeasonIndex, starting a new season. This function reverts if there is\n', '     * already an active season.\n', '     *\n', '     * @param dmgAmount The amount of DMG that will be used to fund this campaign.\n', '     */\n', '    function beginFarmingSeason(uint dmgAmount) external;\n', '\n', '    /**\n', '     * Ends the active farming process if the admin calls this function. Otherwise, anyone may call this function once\n', '     * all DMG have been drained from the contract.\n', '     *\n', '     * @param dustRecipient The recipient of any leftover DMG in this contract, when the campaign finishes.\n', '     */\n', '    function endActiveFarmingSeason(address dustRecipient) external;\n', '\n', '    // ////////////////////\n', '    // Misc Functions\n', '    // ////////////////////\n', '\n', '    /**\n', '     * @return  The tokens that the farm supports.\n', '     */\n', '    function getFarmTokens() external view returns (address[] memory);\n', '\n', '    /**\n', "     * @return  True if the provided token is supported for farming, or false if it's not.\n", '     */\n', '    function isSupportedToken(address token) external view returns (bool);\n', '\n', '    /**\n', "     * @return  True if there is an active season for farming, or false if there isn't one.\n", '     */\n', '    function isFarmActive() external view returns (bool);\n', '\n', '    /**\n', '     * The address that acts as a "secondary" owner with quicker access to function calling than the owner. Typically,\n', '     * this is the DMMF.\n', '     */\n', '    function guardian() external view returns (address);\n', '\n', '    /**\n', '     * @return The DMG token.\n', '     */\n', '    function dmgToken() external view returns (address);\n', '\n', '    /**\n', '     * @return  The growth coefficient for earning DMG while farming. Each unit represents how much DMG is earned per\n', '     *          point\n', '     */\n', '    function dmgGrowthCoefficient() external view returns (uint);\n', '\n', '    /**\n', '     * @return  The amount of points that the provided token earns for each unit of token deposited. Defaults to `1`\n', '     *          if the provided `token` does not exist or does not have a special weight. This number is `2` decimals.\n', '     */\n', '    function getRewardPointsByToken(address token) external view returns (uint16);\n', '\n', '    /**\n', '     * @return  The number of decimals that the underlying token has.\n', '     */\n', '    function getTokenDecimalsByToken(address token) external view returns (uint8);\n', '\n', '    /**\n', "     * @return  The index into the array returned from `getFarmTokens`, plus 1. 0 if the token isn't found. If the\n", '     *          index returned is non-zero, subtract 1 from it to get the real index into the array.\n', '     */\n', '    function getTokenIndexPlusOneByToken(address token) external view returns (uint);\n', '\n', '    // ////////////////////\n', '    // User Functions\n', '    // ////////////////////\n', '\n', '    /**\n', "     * Approves the spender from `msg.sender` to transfer funds into the contract on the user's behalf. If `isTrusted`\n", '     * is marked as false, removes the spender.\n', '     */\n', '    function approve(address spender, bool isTrusted) external;\n', '\n', '    /**\n', "     * True if the `spender` can transfer tokens on the user's behalf to this contract.\n", '     */\n', '    function isApproved(address user, address spender) external view returns (bool);\n', '\n', '    /**\n', '     * Begins a farm by transferring `amount` of `token` from `user` to this contract and adds it to the balance of\n', '     * `user`. `user` must be either 1) msg.sender or 2) a wallet who has approved msg.sender as a proxy; else this\n', '     * function reverts. `funder` must fit into the same criteria as `user`; else this function reverts\n', '     */\n', '    function beginFarming(address user, address funder, address token, uint amount) external;\n', '\n', '    /**\n', '     * Ends a farm by transferring all of `token` deposited by `from` to `recipient`, from this contract, as well as\n', '     * all earned DMG for farming `token` to `recipient`. `from` must be either 1) msg.sender or 2) an approved\n', '     * proxy; else this function reverts.\n', '     *\n', '     * @return  The amount of `token` withdrawn and the amount of DMG earned for farming. Both values are sent to\n', '     *          `recipient`.\n', '     */\n', '    function endFarmingByToken(address from, address recipient, address token) external returns (uint, uint);\n', '\n', '    /**\n', "     * Withdraws all of `msg.sender`'s tokens from the farm to `recipient`. This function reverts if there is an active\n", '     * farm. `user` must be either 1) msg.sender or 2) an approved proxy; else this function reverts.\n', '     */\n', '    function withdrawAllWhenOutOfSeason(address user, address recipient) external;\n', '\n', '    /**\n', '     * Withdraws all of `user` `token` from the farm to `recipient`. This function reverts if there is an active farm and the token is NOT removed.\n', '     * `user` must be either 1) msg.sender or 2) an approved proxy; else this function reverts.\n', '     *\n', '     * @return The amount of tokens sent to `recipient`\n', '     */\n', '    function withdrawByTokenWhenOutOfSeason(\n', '        address user,\n', '        address recipient,\n', '        address token\n', '    ) external returns (uint);\n', '\n', '    /**\n', '     * @return  The amount of DMG that this owner has earned in the active farm. If there are no active season, this\n', '     *          function returns `0`.\n', '     */\n', '    function getRewardBalanceByOwner(address owner) external view returns (uint);\n', '\n', '    /**\n', '     * @return  The amount of DMG that this owner has earned in the active farm for the provided token. If there is no\n', '     *          active season, this function returns `0`.\n', '     */\n', '    function getRewardBalanceByOwnerAndToken(address owner, address token) external view returns (uint);\n', '\n', '    /**\n', '     * @return  The amount of `token` that this owner has deposited into this contract. The user may withdraw this\n', '     *          non-zero balance by invoking `endFarming` or `endFarmingByToken` if there is an active farm. If there is\n', '     *          NO active farm, the user may withdraw his/her funds by invoking\n', '     */\n', '    function balanceOf(address owner, address token) external view returns (uint);\n', '\n', '    /**\n', '     * @return  The most recent timestamp at which the `owner` deposited `token` into the yield farming contract for\n', '     *          the current season. If there is no active season, this function returns `0`.\n', '     */\n', '    function getMostRecentDepositTimestampByOwnerAndToken(address owner, address token) external view returns (uint64);\n', '\n', '    /**\n', '     * @return  The most recent indexed amount of DMG earned by the `owner` for the deposited `token` which is being\n', '     *          farmed for the most-recent season. If there is no active season, this function returns `0`.\n', '     */\n', '    function getMostRecentIndexedDmgEarnedByOwnerAndToken(address owner, address token) external view returns (uint);\n', '\n', '}\n', '\n', '// File: contracts/external/farming/DMGYieldFarmingRouter.sol\n', '\n', '/*\n', ' * Copyright 2020 DMM Foundation\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DMGYieldFarmingRouter is Ownable, ReentrancyGuard {\n', '\n', '    using AddressUtil for address payable;\n', '    using SafeERC20 for IERC20;\n', '    using UniswapV2Library for *;\n', '\n', '    address public dmgYieldFarming;\n', '    address public uniswapV2Factory;\n', '    address public weth;\n', '    bytes32 public initCodeHash;\n', '\n', '    // Used to prevent stack too deep errors.\n', '    struct UniswapParams {\n', '        address tokenA;\n', '        address tokenB;\n', '        uint liquidity;\n', '        uint amountAMin;\n', '        uint amountBMin;\n', '    }\n', '\n', '    modifier ensureDeadline(uint deadline) {\n', '        require(deadline >= block.timestamp, "DMGYieldFarmingFundingProxy: EXPIRED");\n', '        _;\n', '    }\n', '\n', '    modifier ensurePairIsSupported(address tokenA, address tokenB) {\n', '        require(\n', '            IDMGYieldFarmingV1(dmgYieldFarming).isSupportedToken(UniswapV2Library.pairFor(uniswapV2Factory, tokenA, tokenB, initCodeHash)),\n', '            "DMGYieldFarmingFundingProxy: TOKEN_UNSUPPORTED"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _dmgYieldFarming,\n', '        address _uniswapV2Factory,\n', '        address _weth\n', '    ) public {\n', '        dmgYieldFarming = _dmgYieldFarming;\n', '        uniswapV2Factory = _uniswapV2Factory;\n', '        weth = _weth;\n', '        initCodeHash = bytes32(0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f);\n', '    }\n', '\n', '    function() external payable {\n', '        require(\n', '            msg.sender == weth,\n', '            "DMGYieldFarmingFundingProxy::default: INVALID_SENDER"\n', '        );\n', '    }\n', '\n', '    function getPair(\n', '        address tokenA,\n', '        address tokenB\n', '    ) public view returns (address) {\n', '        return UniswapV2Library.pairFor(uniswapV2Factory, tokenA, tokenB, initCodeHash);\n', '    }\n', '\n', '    function setInitCodeHash(\n', '        bytes32 _initCodeHash\n', '    )\n', '    public\n', '    onlyOwner {\n', '        initCodeHash = _initCodeHash;\n', '    }\n', '\n', '    function enableTokens(\n', '        address[] calldata tokens,\n', '        address[] calldata spenders\n', '    )\n', '    external\n', '    nonReentrant {\n', '        require(\n', '            tokens.length == spenders.length,\n', '            "DMGYieldFarmingFundingProxy::enableTokens: INVALID_LENGTH"\n', '        );\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            IERC20(tokens[i]).safeApprove(spenders[i], uint(- 1));\n', '        }\n', '    }\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        uint deadline\n', '    )\n', '    public\n', '    nonReentrant\n', '    ensureDeadline(deadline) {\n', '        _verifyTokensAreSupported(tokenA, tokenB);\n', '\n', '        address _uniswapV2Factory = uniswapV2Factory;\n', '\n', '        UniswapParams memory params = UniswapParams({\n', '        tokenA : tokenA,\n', '        tokenB : tokenB,\n', '        liquidity : 0,\n', '        amountAMin : amountAMin,\n', '        amountBMin : amountBMin\n', '        });\n', '\n', '        (uint amountA, uint amountB) = _getAmounts(\n', '            params,\n', '            amountADesired,\n', '            amountBDesired,\n', '            _uniswapV2Factory\n', '        );\n', '\n', '        address pair = UniswapV2Library.pairFor(uniswapV2Factory, params.tokenA, params.tokenB, initCodeHash);\n', '        uint liquidity = _doTokenTransfersAndMintLiquidity(params, pair, amountA, amountB);\n', '\n', '        IDMGYieldFarmingV1(dmgYieldFarming).beginFarming(msg.sender, address(this), pair, liquidity);\n', '    }\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        uint deadline\n', '    )\n', '    public payable\n', '    nonReentrant\n', '    ensureDeadline(deadline) {\n', '        UniswapParams memory params = UniswapParams({\n', '        tokenA : token,\n', '        tokenB : weth,\n', '        liquidity : 0,\n', '        amountAMin : amountTokenMin,\n', '        amountBMin : amountETHMin\n', '        });\n', '\n', '        _verifyTokensAreSupported(token, params.tokenB);\n', '\n', '        address _uniswapV2Factory = uniswapV2Factory;\n', '\n', '        (uint amountToken, uint amountETH) = _getAmounts(\n', '            params,\n', '            amountTokenDesired,\n', '            msg.value,\n', '            _uniswapV2Factory\n', '        );\n', '\n', '        address pair = UniswapV2Library.pairFor(_uniswapV2Factory, token, params.tokenB, initCodeHash);\n', '\n', '        uint liquidity = _doTokenTransfersWithEthAndMintLiquidity(params, pair, amountToken, amountETH);\n', '\n', '        // refund dust eth, if any\n', '        if (msg.value > amountETH) {\n', '            require(\n', '                msg.sender.sendETH(msg.value - amountETH),\n', '                "DMGYieldFarmingFundingProxy::addLiquidityETH: ETH_TRANSFER_FAILURE"\n', '            );\n', '        }\n', '\n', '        IDMGYieldFarmingV1(dmgYieldFarming).beginFarming(msg.sender, address(this), pair, liquidity);\n', '    }\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        uint deadline,\n', '        bool isInSeason\n', '    )\n', '    public\n', '    nonReentrant\n', '    ensureDeadline(deadline) {\n', '        _verifyTokensAreSupported(tokenA, tokenB);\n', '\n', '        UniswapParams memory params = UniswapParams({\n', '        tokenA : tokenA,\n', '        tokenB : tokenB,\n', '        liquidity : liquidity,\n', '        amountAMin : amountAMin,\n', '        amountBMin : amountBMin\n', '        });\n', '\n', '        _removeLiquidity(params, msg.sender, msg.sender, isInSeason);\n', '    }\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        uint deadline,\n', '        bool isInSeason\n', '    )\n', '    public\n', '    nonReentrant\n', '    ensureDeadline(deadline) {\n', '        UniswapParams memory params = UniswapParams({\n', '        tokenA : token,\n', '        tokenB : weth,\n', '        liquidity : liquidity,\n', '        amountAMin : amountTokenMin,\n', '        amountBMin : amountETHMin\n', '        });\n', '\n', '        _verifyTokensAreSupported(params.tokenA, params.tokenB);\n', '\n', '        (uint amountToken, uint amountETH) = _removeLiquidity(params, msg.sender, address(this), isInSeason);\n', '\n', '        IERC20(params.tokenA).safeTransfer(msg.sender, amountToken);\n', '        IWETH(params.tokenB).withdraw(amountETH);\n', '        require(\n', '            msg.sender.sendETH(amountETH),\n', '            "DMGYieldFarmingFundingProxy::addLiquidityETH: ETH_TRANSFER_FAILURE"\n', '        );\n', '    }\n', '\n', '    function _verifyTokensAreSupported(\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view {\n', '        require(\n', '            IDMGYieldFarmingV1(dmgYieldFarming).isSupportedToken(UniswapV2Library.pairFor(uniswapV2Factory, tokenA, tokenB, initCodeHash)),\n', '            "DMGYieldFarmingFundingProxy::_verifyTokensAreSupported: TOKEN_UNSUPPORTED"\n', '        );\n', '    }\n', '\n', '    function _removeLiquidity(\n', '        UniswapParams memory params,\n', '        address farmer,\n', '        address liquidityRecipient,\n', '        bool isInSeason\n', '    )\n', '    internal returns (uint amountA, uint amountB) {\n', '        address pair = UniswapV2Library.pairFor(uniswapV2Factory, params.tokenA, params.tokenB, initCodeHash);\n', '        uint liquidity;\n', '        if (isInSeason) {\n', '            (uint _liquidity, uint dmgEarned) = IDMGYieldFarmingV1(dmgYieldFarming).endFarmingByToken(farmer, address(this), pair);\n', '            liquidity = _liquidity;\n', '            // Forward the DMG along to the farmer\n', '            IERC20(IDMGYieldFarmingV1(dmgYieldFarming).dmgToken()).safeTransfer(farmer, dmgEarned);\n', '        } else {\n', '            liquidity = IDMGYieldFarmingV1(dmgYieldFarming).withdrawByTokenWhenOutOfSeason(\n', '                farmer,\n', '                address(this),\n', '                pair\n', '            );\n', '        }\n', '\n', '        IERC20(pair).safeTransfer(pair, liquidity);\n', '        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(liquidityRecipient);\n', '        (address token0,) = UniswapV2Library.sortTokens(params.tokenA, params.tokenB);\n', '        (amountA, amountB) = params.tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n', '\n', "        require(amountA >= params.amountAMin, 'DMGYieldFarmingFundingProxy::removeLiquidity: INSUFFICIENT_A_AMOUNT');\n", "        require(amountB >= params.amountBMin, 'DMGYieldFarmingFundingProxy::removeLiquidity: INSUFFICIENT_B_AMOUNT');\n", '    }\n', '\n', '    function _getAmounts(\n', '        UniswapParams memory params,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        address uniswapV2Factory\n', '    )\n', '    internal view returns (uint amountA, uint amountB) {\n', '        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(uniswapV2Factory, params.tokenA, params.tokenB, initCodeHash);\n', '        if (reserveA == 0 && reserveB == 0) {\n', '            (amountA, amountB) = (amountADesired, amountBDesired);\n', '        } else {\n', '            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n', '            if (amountBOptimal <= amountBDesired) {\n', '                require(\n', '                    amountBOptimal >= params.amountBMin,\n', '                    "DMGYieldFarmingFundingProxy::_getAmounts: INSUFFICIENT_B_AMOUNT"\n', '                );\n', '\n', '                (amountA, amountB) = (amountADesired, amountBOptimal);\n', '            } else {\n', '                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n', '                assert(amountAOptimal <= amountADesired);\n', '                require(\n', '                    amountAOptimal >= params.amountAMin,\n', '                    "DMGYieldFarmingFundingProxy::_getAmounts: INSUFFICIENT_A_AMOUNT"\n', '                );\n', '\n', '                (amountA, amountB) = (amountAOptimal, amountBDesired);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _doTokenTransfersAndMintLiquidity(\n', '        UniswapParams memory params,\n', '        address pair,\n', '        uint amountA,\n', '        uint amountB\n', '    ) internal returns (uint) {\n', '        IERC20(params.tokenA).safeTransferFrom(msg.sender, pair, amountA);\n', '        IERC20(params.tokenB).safeTransferFrom(msg.sender, pair, amountB);\n', '\n', '        return IUniswapV2Pair(pair).mint(address(this));\n', '    }\n', '\n', '    function _doTokenTransfersWithEthAndMintLiquidity(\n', '        UniswapParams memory params,\n', '        address pair,\n', '        uint amountToken,\n', '        uint amountETH\n', '    ) internal returns (uint) {\n', '        IERC20(params.tokenA).safeTransferFrom(msg.sender, pair, amountToken);\n', '        IWETH(params.tokenB).deposit.value(amountETH)();\n', '        IERC20(params.tokenB).safeTransfer(pair, amountETH);\n', '\n', '        return IUniswapV2Pair(pair).mint(address(this));\n', '    }\n', '\n', '}']