['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'interface IController {\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function want(address) external view returns (address);\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(address, uint) external;\n', '    function maxAcceptAmount(address) external view returns (uint256);\n', '    function earn(address, uint) external;\n', '\n', '    function getStrategyCount(address _vault) external view returns(uint256);\n', '    function depositAvailable(address _vault) external view returns(bool);\n', '    function harvestAllStrategies(address _vault) external;\n', '    function harvestStrategy(address _vault, address _strategy) external;\n', '}\n', '\n', 'interface ITokenInterface is IERC20 {\n', '    /** VALUE, YFV, vUSD, vETH has minters **/\n', '    function minters(address account) external view returns (bool);\n', '    function mint(address _to, uint _amount) external;\n', '\n', '    /** YFV <-> VALUE **/\n', '    function deposit(uint _amount) external;\n', '    function withdraw(uint _amount) external;\n', '    function cap() external returns (uint);\n', '    function yfvLockedBalance() external returns (uint);\n', '}\n', '\n', 'interface IYFVReferral {\n', '    function setReferrer(address farmer, address referrer) external;\n', '    function getReferrer(address farmer) external view returns (address);\n', '}\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint valueToken) external returns (uint freed);\n', '}\n', '\n', 'contract ValueGovernanceVault is ERC20 {\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '\n', '    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    modifier discountCHI(uint8 _flag) {\n', '        if ((_flag & 0x1) == 0) {\n', '            _;\n', '        } else {\n', '            uint gasStart = gasleft();\n', '            _;\n', '            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n', '        }\n', '    }\n', '\n', '    ITokenInterface public yfvToken; // stake and wrap to VALUE\n', '    ITokenInterface public valueToken; // stake and reward token\n', '    ITokenInterface public vUSD; // reward token\n', '    ITokenInterface public vETH; // reward token\n', '\n', '    uint public fundCap = 9500; // use up to 95% of fund (to keep small withdrawals cheap)\n', '    uint public constant FUND_CAP_DENOMINATOR = 10000;\n', '\n', '    uint public earnLowerlimit;\n', '\n', '    address public governance;\n', '    address public controller;\n', '    address public rewardReferral;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint amount;\n', '        uint valueRewardDebt;\n', '        uint vusdRewardDebt;\n', '        uint lastStakeTime;\n', '        uint accumulatedStakingPower; // will accumulate every time user harvest\n', '\n', '        uint lockedAmount;\n', '        uint lockedDays; // 7 days -> 150 days (5 months)\n', '        uint boostedExtra; // times 1e12 (285200000000 -> +28.52%). See below.\n', '        uint unlockedTime;\n', '    }\n', '\n', '    uint maxLockedDays = 150;\n', '\n', '    uint lastRewardBlock;  // Last block number that reward distribution occurs.\n', '    uint accValuePerShare; // Accumulated VALUEs per share, times 1e12. See below.\n', '    uint accVusdPerShare; // Accumulated vUSD per share, times 1e12. See below.\n', '\n', '    uint public valuePerBlock; // 0.2 VALUE/block at start\n', '    uint public vusdPerBlock; // 5 vUSD/block at start\n', '\n', '    mapping(address => UserInfo) public userInfo;\n', '    uint public totalDepositCap;\n', '\n', '    uint public constant vETH_REWARD_FRACTION_RATE = 1000;\n', '    uint public minStakingAmount = 0 ether;\n', '    uint public unstakingFrozenTime = 40 hours;\n', '    // ** unlockWithdrawFee = 1.92%: stakers will need to pay 1.92% (sent to insurance fund) of amount they want to withdraw if the coin still frozen\n', '    uint public unlockWithdrawFee = 192; // per ten thousand (eg. 15 -> 0.15%)\n', '    address public valueInsuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\n', '\n', '    event Deposit(address indexed user, uint amount);\n', '    event Withdraw(address indexed user, uint amount);\n', '    event RewardPaid(address indexed user, uint reward);\n', '    event CommissionPaid(address indexed user, uint reward);\n', '    event Locked(address indexed user, uint amount, uint _days);\n', '    event EmergencyWithdraw(address indexed user, uint amount);\n', '\n', '    constructor (ITokenInterface _yfvToken,\n', '        ITokenInterface _valueToken,\n', '        ITokenInterface _vUSD,\n', '        ITokenInterface _vETH,\n', '        uint _valuePerBlock,\n', '        uint _vusdPerBlock,\n', '        uint _startBlock) public ERC20("GovVault:ValueLiquidity", "gvVALUE") {\n', '        yfvToken = _yfvToken;\n', '        valueToken = _valueToken;\n', '        vUSD = _vUSD;\n', '        vETH = _vETH;\n', '        valuePerBlock = _valuePerBlock;\n', '        vusdPerBlock = _vusdPerBlock;\n', '        lastRewardBlock = _startBlock;\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function balance() public view returns (uint) {\n', '        uint bal = valueToken.balanceOf(address(this));\n', '        if (controller != address(0)) bal = bal.add(IController(controller).balanceOf(address(valueToken)));\n', '        return bal;\n', '    }\n', '\n', '    function setFundCap(uint _fundCap) external {\n', '        require(msg.sender == governance, "!governance");\n', '        fundCap = _fundCap;\n', '    }\n', '\n', '    function setTotalDepositCap(uint _totalDepositCap) external {\n', '        require(msg.sender == governance, "!governance");\n', '        totalDepositCap = _totalDepositCap;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) public {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setRewardReferral(address _rewardReferral) external {\n', '        require(msg.sender == governance, "!governance");\n', '        rewardReferral = _rewardReferral;\n', '    }\n', '\n', '    function setEarnLowerlimit(uint _earnLowerlimit) public {\n', '        require(msg.sender == governance, "!governance");\n', '        earnLowerlimit = _earnLowerlimit;\n', '    }\n', '\n', '    function setMaxLockedDays(uint _maxLockedDays) public {\n', '        require(msg.sender == governance, "!governance");\n', '        maxLockedDays = _maxLockedDays;\n', '    }\n', '\n', '    function setValuePerBlock(uint _valuePerBlock) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_valuePerBlock <= 10 ether, "Too big _valuePerBlock"); // <= 10 VALUE\n', '        updateReward();\n', '        valuePerBlock = _valuePerBlock;\n', '    }\n', '\n', '    function setVusdPerBlock(uint _vusdPerBlock) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_vusdPerBlock <= 200 * (10 ** 9), "Too big _vusdPerBlock"); // <= 200 vUSD\n', '        updateReward();\n', '        vusdPerBlock = _vusdPerBlock;\n', '    }\n', '\n', '    function setMinStakingAmount(uint _minStakingAmount) public {\n', '        require(msg.sender == governance, "!governance");\n', '        minStakingAmount = _minStakingAmount;\n', '    }\n', '\n', '    function setUnstakingFrozenTime(uint _unstakingFrozenTime) public {\n', '        require(msg.sender == governance, "!governance");\n', '        unstakingFrozenTime = _unstakingFrozenTime;\n', '    }\n', '\n', '    function setUnlockWithdrawFee(uint _unlockWithdrawFee) public {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_unlockWithdrawFee <= 1000, "Dont be too greedy"); // <= 10%\n', '        unlockWithdrawFee = _unlockWithdrawFee;\n', '    }\n', '\n', '    function setValueInsuranceFund(address _valueInsuranceFund) public {\n', '        require(msg.sender == governance, "!governance");\n', '        valueInsuranceFund = _valueInsuranceFund;\n', '    }\n', '\n', '    // To upgrade vUSD contract (v1 is still experimental, we may need vUSDv2 with rebase() function working soon - then governance will call this upgrade)\n', '    function upgradeVUSDContract(address _vUSDContract) public {\n', '        require(msg.sender == governance, "!governance");\n', '        vUSD = ITokenInterface(_vUSDContract);\n', '    }\n', '\n', '    // To upgrade vETH contract (v1 is still experimental, we may need vETHv2 with rebase() function working soon - then governance will call this upgrade)\n', '    function upgradeVETHContract(address _vETHContract) public {\n', '        require(msg.sender == governance, "!governance");\n', '        vETH = ITokenInterface(_vETHContract);\n', '    }\n', '\n', '    // Custom logic in here for how much the vault allows to be borrowed\n', '    // Sets minimum required on-hand to keep small withdrawals cheap\n', '    function available() public view returns (uint) {\n', '        return valueToken.balanceOf(address(this)).mul(fundCap).div(FUND_CAP_DENOMINATOR);\n', '    }\n', '\n', '    function earn(uint8 _flag) public discountCHI(_flag) {\n', '        if (controller != address(0)) {\n', '            uint _amount = available();\n', '            uint _accepted = IController(controller).maxAcceptAmount(address(valueToken));\n', '            if (_amount > _accepted) _amount = _accepted;\n', '            if (_amount > 0) {\n', '                yfvToken.transfer(controller, _amount);\n', '                IController(controller).earn(address(yfvToken), _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getRewardAndDepositAll(uint8 _flag) external discountCHI(_flag) {\n', '        unstake(0, 0x0);\n', '        depositAll(address(0), 0x0);\n', '    }\n', '\n', '    function depositAll(address _referrer, uint8 _flag) public discountCHI(_flag) {\n', '        deposit(valueToken.balanceOf(msg.sender), _referrer, 0x0);\n', '    }\n', '\n', '    function deposit(uint _amount, address _referrer, uint8 _flag) public discountCHI(_flag) {\n', '        uint _pool = balance();\n', '        uint _before = valueToken.balanceOf(address(this));\n', '        valueToken.transferFrom(msg.sender, address(this), _amount);\n', '        uint _after = valueToken.balanceOf(address(this));\n', '        require(totalDepositCap == 0 || _after <= totalDepositCap, ">totalDepositCap");\n', '        _amount = _after.sub(_before); // Additional check for deflationary tokens\n', '        uint _shares = _deposit(address(this), _pool, _amount);\n', '        _stakeShares(msg.sender, _shares, _referrer);\n', '    }\n', '\n', '    function depositYFV(uint _amount, address _referrer, uint8 _flag) public discountCHI(_flag) {\n', '        uint _pool = balance();\n', '        yfvToken.transferFrom(msg.sender, address(this), _amount);\n', '        uint _before = valueToken.balanceOf(address(this));\n', '        yfvToken.approve(address(valueToken), 0);\n', '        yfvToken.approve(address(valueToken), _amount);\n', '        valueToken.deposit(_amount);\n', '        uint _after = valueToken.balanceOf(address(this));\n', '        require(totalDepositCap == 0 || _after <= totalDepositCap, ">totalDepositCap");\n', '        _amount = _after.sub(_before); // Additional check for deflationary tokens\n', '        uint _shares = _deposit(address(this), _pool, _amount);\n', '        _stakeShares(msg.sender, _shares, _referrer);\n', '    }\n', '\n', '    function buyShares(uint _amount, uint8 _flag) public discountCHI(_flag) {\n', '        uint _pool = balance();\n', '        uint _before = valueToken.balanceOf(address(this));\n', '        valueToken.transferFrom(msg.sender, address(this), _amount);\n', '        uint _after = valueToken.balanceOf(address(this));\n', '        require(totalDepositCap == 0 || _after <= totalDepositCap, ">totalDepositCap");\n', '        _amount = _after.sub(_before); // Additional check for deflationary tokens\n', '        _deposit(msg.sender, _pool, _amount);\n', '    }\n', '\n', '    function depositShares(uint _shares, address _referrer, uint8 _flag) public discountCHI(_flag) {\n', '        require(totalDepositCap == 0 || balance().add(_shares) <= totalDepositCap, ">totalDepositCap");\n', '        uint _before = balanceOf(address(this));\n', '        IERC20(address(this)).transferFrom(msg.sender, address(this), _shares);\n', '        uint _after = balanceOf(address(this));\n', '        _shares = _after.sub(_before); // Additional check for deflationary tokens\n', '        _stakeShares(msg.sender, _shares, _referrer);\n', '    }\n', '\n', '    function lockShares(uint _locked, uint _days, uint8 _flag) external discountCHI(_flag) {\n', '        require(_days >= 7 && _days <= maxLockedDays, "_days out-of-range");\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        if (user.unlockedTime < block.timestamp) {\n', '            user.lockedAmount = 0;\n', '        } else {\n', '            require(_days >= user.lockedDays, "Extra days should not less than current locked days");\n', '        }\n', '        user.lockedAmount = user.lockedAmount.add(_locked);\n', '        require(user.lockedAmount <= user.amount, "lockedAmount > amount");\n', '        user.unlockedTime = block.timestamp.add(_days * 86400);\n', '        // (%) = 5 + (lockedDays - 7) * 0.15\n', '        user.boostedExtra = 50000000000 + (_days - 7) * 1500000000;\n', '        emit Locked(msg.sender, user.lockedAmount, _days);\n', '    }\n', '\n', '    function _deposit(address _mintTo, uint _pool, uint _amount) internal returns (uint _shares) {\n', '        _shares = 0;\n', '        if (totalSupply() == 0) {\n', '            _shares = _amount;\n', '        } else {\n', '            _shares = (_amount.mul(totalSupply())).div(_pool);\n', '        }\n', '        if (_shares > 0) {\n', '            if (valueToken.balanceOf(address(this)) > earnLowerlimit) {\n', '                earn(0x0);\n', '            }\n', '            _mint(_mintTo, _shares);\n', '        }\n', '    }\n', '\n', '    function _stakeShares(address _account, uint _shares, address _referrer) internal {\n', '        UserInfo storage user = userInfo[_account];\n', '        require(minStakingAmount == 0 || user.amount.add(_shares) >= minStakingAmount, "<minStakingAmount");\n', '        updateReward();\n', '        _getReward();\n', '        user.amount = user.amount.add(_shares);\n', '        if (user.lockedAmount > 0 && user.unlockedTime < block.timestamp) {\n', '            user.lockedAmount = 0;\n', '        }\n', '        user.valueRewardDebt = user.amount.mul(accValuePerShare).div(1e12);\n', '        user.vusdRewardDebt = user.amount.mul(accVusdPerShare).div(1e12);\n', '        user.lastStakeTime = block.timestamp;\n', '        emit Deposit(_account, _shares);\n', '        if (rewardReferral != address(0) && _account != address(0)) {\n', '            IYFVReferral(rewardReferral).setReferrer(_account, _referrer);\n', '        }\n', '    }\n', '\n', '    function unfrozenStakeTime(address _account) public view returns (uint) {\n', '        return userInfo[_account].lastStakeTime + unstakingFrozenTime;\n', '    }\n', '\n', '    // View function to see pending VALUEs on frontend.\n', '    function pendingValue(address _account) public view returns (uint _pending) {\n', '        UserInfo storage user = userInfo[_account];\n', '        uint _accValuePerShare = accValuePerShare;\n', '        uint lpSupply = balanceOf(address(this));\n', '        if (block.number > lastRewardBlock && lpSupply != 0) {\n', '            uint numBlocks = block.number.sub(lastRewardBlock);\n', '            _accValuePerShare = accValuePerShare.add(numBlocks.mul(valuePerBlock).mul(1e12).div(lpSupply));\n', '        }\n', '        _pending = user.amount.mul(_accValuePerShare).div(1e12).sub(user.valueRewardDebt);\n', '        if (user.lockedAmount > 0 && user.unlockedTime >= block.timestamp) {\n', '            uint _bonus = _pending.mul(user.lockedAmount.mul(user.boostedExtra).div(1e12)).div(user.amount);\n', '            uint _ceilingBonus = _pending.mul(33).div(100); // 33%\n', '            if (_bonus > _ceilingBonus) _bonus = _ceilingBonus; // Additional check to avoid insanely high bonus!\n', '            _pending = _pending.add(_bonus);\n', '        }\n', '    }\n', '\n', '    // View function to see pending vUSDs on frontend.\n', '    function pendingVusd(address _account) public view returns (uint) {\n', '        UserInfo storage user = userInfo[_account];\n', '        uint _accVusdPerShare = accVusdPerShare;\n', '        uint lpSupply = balanceOf(address(this));\n', '        if (block.number > lastRewardBlock && lpSupply != 0) {\n', '            uint numBlocks = block.number.sub(lastRewardBlock);\n', '            _accVusdPerShare = accVusdPerShare.add(numBlocks.mul(vusdPerBlock).mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(_accVusdPerShare).div(1e12).sub(user.vusdRewardDebt);\n', '    }\n', '\n', '    // View function to see pending vETHs on frontend.\n', '    function pendingVeth(address _account) public view returns (uint) {\n', '        return pendingVusd(_account).div(vETH_REWARD_FRACTION_RATE);\n', '    }\n', '\n', '    function stakingPower(address _account) public view returns (uint) {\n', '        return userInfo[_account].accumulatedStakingPower.add(pendingValue(_account));\n', '    }\n', '\n', '    function updateReward() public {\n', '        if (block.number <= lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint lpSupply = balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint _numBlocks = block.number.sub(lastRewardBlock);\n', '        accValuePerShare = accValuePerShare.add(_numBlocks.mul(valuePerBlock).mul(1e12).div(lpSupply));\n', '        accVusdPerShare = accVusdPerShare.add(_numBlocks.mul(vusdPerBlock).mul(1e12).div(lpSupply));\n', '        lastRewardBlock = block.number;\n', '    }\n', '\n', '    function _getReward() internal {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint _pendingValue = user.amount.mul(accValuePerShare).div(1e12).sub(user.valueRewardDebt);\n', '        if (_pendingValue > 0) {\n', '            if (user.lockedAmount > 0) {\n', '                if (user.unlockedTime < block.timestamp) {\n', '                    user.lockedAmount = 0;\n', '                } else {\n', '                    uint _bonus = _pendingValue.mul(user.lockedAmount.mul(user.boostedExtra).div(1e12)).div(user.amount);\n', '                    uint _ceilingBonus = _pendingValue.mul(33).div(100); // 33%\n', '                    if (_bonus > _ceilingBonus) _bonus = _ceilingBonus; // Additional check to avoid insanely high bonus!\n', '                    _pendingValue = _pendingValue.add(_bonus);\n', '                }\n', '            }\n', '            user.accumulatedStakingPower = user.accumulatedStakingPower.add(_pendingValue);\n', '            uint actualPaid = _pendingValue.mul(99).div(100); // 99%\n', '            uint commission = _pendingValue - actualPaid; // 1%\n', '            safeValueMint(msg.sender, actualPaid);\n', '            address _referrer = address(0);\n', '            if (rewardReferral != address(0)) {\n', '                _referrer = IYFVReferral(rewardReferral).getReferrer(msg.sender);\n', '            }\n', '            if (_referrer != address(0)) { // send commission to referrer\n', '                safeValueMint(_referrer, commission);\n', '                CommissionPaid(_referrer, commission);\n', '            } else { // send commission to valueInsuranceFund\n', '                safeValueMint(valueInsuranceFund, commission);\n', '                CommissionPaid(valueInsuranceFund, commission);\n', '            }\n', '        }\n', '        uint _pendingVusd = user.amount.mul(accVusdPerShare).div(1e12).sub(user.vusdRewardDebt);\n', '        if (_pendingVusd > 0) {\n', '            safeVusdMint(msg.sender, _pendingVusd);\n', '        }\n', '    }\n', '\n', '    function withdrawAll(uint8 _flag) public discountCHI(_flag) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint _amount = user.amount;\n', '        if (user.lockedAmount > 0) {\n', '            if (user.unlockedTime < block.timestamp) {\n', '                user.lockedAmount = 0;\n', '            } else {\n', '                _amount = user.amount.sub(user.lockedAmount);\n', '            }\n', '        }\n', '        unstake(_amount, 0x0);\n', '        withdraw(balanceOf(msg.sender), 0x0);\n', '    }\n', '\n', "    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n", '    function harvest(address reserve, uint amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        require(reserve != address(valueToken), "token");\n', '        ITokenInterface(reserve).transfer(controller, amount);\n', '    }\n', '\n', '    function unstake(uint _amount, uint8 _flag) public discountCHI(_flag) returns (uint _actualWithdraw) {\n', '        updateReward();\n', '        _getReward();\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        _actualWithdraw = _amount;\n', '        if (_amount > 0) {\n', '            require(user.amount >= _amount, "stakedBal < _amount");\n', '            if (user.lockedAmount > 0) {\n', '                if (user.unlockedTime < block.timestamp) {\n', '                    user.lockedAmount = 0;\n', '                } else {\n', '                    require(user.amount.sub(user.lockedAmount) >= _amount, "stakedBal-locked < _amount");\n', '                }\n', '            }\n', '            user.amount = user.amount.sub(_amount);\n', '\n', '            if (block.timestamp < user.lastStakeTime.add(unstakingFrozenTime)) {\n', '                // if coin is still frozen and governance does not allow stakers to unstake before timer ends\n', '                if (unlockWithdrawFee == 0 || valueInsuranceFund == address(0)) revert("Coin is still frozen");\n', '\n', '                // otherwise withdrawFee will be calculated based on the rate\n', '                uint _withdrawFee = _amount.mul(unlockWithdrawFee).div(10000);\n', '                uint r = _amount.sub(_withdrawFee);\n', '                if (_amount > r) {\n', '                    _withdrawFee = _amount.sub(r);\n', '                    _actualWithdraw = r;\n', '                    IERC20(address(this)).transfer(valueInsuranceFund, _withdrawFee);\n', '                    emit RewardPaid(valueInsuranceFund, _withdrawFee);\n', '                }\n', '            }\n', '\n', '            IERC20(address(this)).transfer(msg.sender, _actualWithdraw);\n', '        }\n', '        user.valueRewardDebt = user.amount.mul(accValuePerShare).div(1e12);\n', '        user.vusdRewardDebt = user.amount.mul(accVusdPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _amount);\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function withdraw(uint _shares, uint8 _flag) public discountCHI(_flag) {\n', '        uint _userBal = balanceOf(msg.sender);\n', '        if (_shares > _userBal) {\n', '            uint _need = _shares.sub(_userBal);\n', '            require(_need <= userInfo[msg.sender].amount, "_userBal+staked < _shares");\n', '            uint _actualWithdraw = unstake(_need, 0x0);\n', '            _shares = _userBal.add(_actualWithdraw); // may be less than expected due to unlockWithdrawFee\n', '        }\n', '        uint r = (balance().mul(_shares)).div(totalSupply());\n', '        _burn(msg.sender, _shares);\n', '\n', '        // Check balance\n', '        uint b = valueToken.balanceOf(address(this));\n', '        if (b < r) {\n', '            uint _withdraw = r.sub(b);\n', '            if (controller != address(0)) {\n', '                IController(controller).withdraw(address(valueToken), _withdraw);\n', '            }\n', '            uint _after = valueToken.balanceOf(address(this));\n', '            uint _diff = _after.sub(b);\n', '            if (_diff < _withdraw) {\n', '                r = b.add(_diff);\n', '            }\n', '        }\n', '\n', '        valueToken.transfer(msg.sender, r);\n', '    }\n', '\n', '    function getPricePerFullShare() public view returns (uint) {\n', '        return balance().mul(1e18).div(totalSupply());\n', '    }\n', '\n', '    function getStrategyCount() external view returns (uint) {\n', '        return (controller != address(0)) ? IController(controller).getStrategyCount(address(this)) : 0;\n', '    }\n', '\n', '    function depositAvailable() external view returns (bool) {\n', '        return (controller != address(0)) ? IController(controller).depositAvailable(address(this)) : false;\n', '    }\n', '\n', '    function harvestAllStrategies(uint8 _flag) public discountCHI(_flag) {\n', '        if (controller != address(0)) {\n', '            IController(controller).harvestAllStrategies(address(this));\n', '        }\n', '    }\n', '\n', '    function harvestStrategy(address _strategy, uint8 _flag) public discountCHI(_flag) {\n', '        if (controller != address(0)) {\n', '            IController(controller).harvestStrategy(address(this), _strategy);\n', '        }\n', '    }\n', '\n', '    // Safe valueToken mint, ensure it is never over cap and we are the current owner.\n', '    function safeValueMint(address _to, uint _amount) internal {\n', '        if (valueToken.minters(address(this)) && _to != address(0)) {\n', '            uint totalSupply = valueToken.totalSupply();\n', '            uint realCap = valueToken.cap().add(valueToken.yfvLockedBalance());\n', '            if (totalSupply.add(_amount) > realCap) {\n', '                valueToken.mint(_to, realCap.sub(totalSupply));\n', '            } else {\n', '                valueToken.mint(_to, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    // Safe vUSD mint, ensure we are the current owner.\n', '    // vETH will be minted together with fixed rate.\n', '    function safeVusdMint(address _to, uint _amount) internal {\n', '        if (vUSD.minters(address(this)) && _to != address(0)) {\n', '            vUSD.mint(_to, _amount);\n', '        }\n', '        if (vETH.minters(address(this)) && _to != address(0)) {\n', '            vETH.mint(_to, _amount.div(vETH_REWARD_FRACTION_RATE));\n', '        }\n', '    }\n', '\n', '    // This is for governance in some emergency circumstances to release lock immediately for an account\n', '    function governanceResetLocked(address _account) external {\n', '        require(msg.sender == governance, "!governance");\n', '        UserInfo storage user = userInfo[_account];\n', '        user.lockedAmount = 0;\n', '        user.lockedDays = 0;\n', '        user.boostedExtra = 0;\n', '        user.unlockedTime = 0;\n', '    }\n', '\n', '    // This function allows governance to take unsupported tokens out of the contract, since this pool exists longer than the others.\n', '    // This is in an effort to make someone whole, should they seriously mess up.\n', '    // There is no guarantee governance will vote to return these.\n', '    // It also allows for removal of airdropped tokens.\n', '    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(address(_token) != address(valueToken) || balance().sub(_amount) >= totalSupply(), "cant withdraw VALUE more than gvVALUE supply");\n', '        _token.transfer(_to, _amount);\n', '    }\n', '}']