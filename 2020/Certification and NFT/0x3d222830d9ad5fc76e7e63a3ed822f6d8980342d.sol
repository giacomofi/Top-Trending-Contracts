['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/src/common/lifecycle/Killable.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * A module that allows contracts to self-destruct.\n', ' */\n', 'contract Killable {\n', '\taddress payable public _owner;\n', '\n', '\t/**\n', '\t * Initialized with the deployer as the owner.\n', '\t */\n', '\tconstructor() internal {\n', '\t\t_owner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * Self-destruct the contract.\n', '\t * This function can only be executed by the owner.\n', '\t */\n', '\tfunction kill() public {\n', '\t\trequire(msg.sender == _owner, "only owner method");\n', '\t\tselfdestruct(_owner);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/src/common/interface/IGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IGroup {\n', '\tfunction isGroup(address _addr) public view returns (bool);\n', '\n', '\tfunction addGroup(address _addr) external;\n', '\n', '\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\n', '\t\treturn keccak256(abi.encodePacked("_group", _addr));\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/AddressValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * A module that provides common validations patterns.\n', ' */\n', 'contract AddressValidator {\n', '\tstring constant errorMessage = "this is illegal address";\n', '\n', '\t/**\n', '\t * Validates passed address is not a zero address.\n', '\t */\n', '\tfunction validateIllegalAddress(address _addr) external pure {\n', '\t\trequire(_addr != address(0), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in an address set.\n', '\t */\n', '\tfunction validateGroup(address _addr, address _groupAddr) external view {\n', '\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in two address sets.\n', '\t */\n', '\tfunction validateGroups(\n', '\t\taddress _addr,\n', '\t\taddress _groupAddr1,\n', '\t\taddress _groupAddr2\n', '\t) external view {\n', '\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates that the address of the first argument is equal to the address of the second argument.\n', '\t */\n', '\tfunction validateAddress(address _addr, address _target) external pure {\n', '\t\trequire(_addr == _target, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the two addresses.\n', '\t */\n', '\tfunction validateAddresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target2, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the three addresses.\n', '\t */\n', '\tfunction validate3Addresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2,\n', '\t\taddress _target3\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tif (_addr == _target2) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target3, errorMessage);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/UsingValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '// prettier-ignore\n', '\n', '\n', '/**\n', ' * Module for contrast handling AddressValidator.\n', ' */\n', 'contract UsingValidator {\n', '\tAddressValidator private _validator;\n', '\n', '\t/**\n', '\t * Create a new AddressValidator contract when initialize.\n', '\t */\n', '\tconstructor() public {\n', '\t\t_validator = new AddressValidator();\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set AddressValidator address.\n', '\t */\n', '\tfunction addressValidator() internal view returns (AddressValidator) {\n', '\t\treturn _validator;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/AddressConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * A registry contract to hold the latest contract addresses.\n', ' * Dev Protocol will be upgradeable by this contract.\n', ' */\n', 'contract AddressConfig is Ownable, UsingValidator, Killable {\n', '\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\n', '\taddress public allocator;\n', '\taddress public allocatorStorage;\n', '\taddress public withdraw;\n', '\taddress public withdrawStorage;\n', '\taddress public marketFactory;\n', '\taddress public marketGroup;\n', '\taddress public propertyFactory;\n', '\taddress public propertyGroup;\n', '\taddress public metricsGroup;\n', '\taddress public metricsFactory;\n', '\taddress public policy;\n', '\taddress public policyFactory;\n', '\taddress public policySet;\n', '\taddress public policyGroup;\n', '\taddress public lockup;\n', '\taddress public lockupStorage;\n', '\taddress public voteTimes;\n', '\taddress public voteTimesStorage;\n', '\taddress public voteCounter;\n', '\taddress public voteCounterStorage;\n', '\n', '\t/**\n', '\t * Set the latest Allocator contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setAllocator(address _addr) external onlyOwner {\n', '\t\tallocator = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest AllocatorStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the AllocatorStorage contract is not used.\n', '\t */\n', '\tfunction setAllocatorStorage(address _addr) external onlyOwner {\n', '\t\tallocatorStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Withdraw contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdraw(address _addr) external onlyOwner {\n', '\t\twithdraw = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest WithdrawStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdrawStorage(address _addr) external onlyOwner {\n', '\t\twithdrawStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketFactory(address _addr) external onlyOwner {\n', '\t\tmarketFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketGroup(address _addr) external onlyOwner {\n', '\t\tmarketGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyFactory(address _addr) external onlyOwner {\n', '\t\tpropertyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyGroup(address _addr) external onlyOwner {\n', '\t\tpropertyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsFactory(address _addr) external onlyOwner {\n', '\t\tmetricsFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsGroup(address _addr) external onlyOwner {\n', '\t\tmetricsGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyFactory(address _addr) external onlyOwner {\n', '\t\tpolicyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyGroup(address _addr) external onlyOwner {\n', '\t\tpolicyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicySet contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicySet(address _addr) external onlyOwner {\n', '\t\tpolicySet = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Policy contract address.\n', '\t * Only the latest PolicyFactory contract can execute this function.\n', '\t */\n', '\tfunction setPolicy(address _addr) external {\n', '\t\taddressValidator().validateAddress(msg.sender, policyFactory);\n', '\t\tpolicy = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Dev contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setToken(address _addr) external onlyOwner {\n', '\t\ttoken = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Lockup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setLockup(address _addr) external onlyOwner {\n', '\t\tlockup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest LockupStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the LockupStorage contract is not used as a stand-alone because it is inherited from the Lockup contract.\n', '\t */\n', '\tfunction setLockupStorage(address _addr) external onlyOwner {\n', '\t\tlockupStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimes contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimes contract is not used.\n', '\t */\n', '\tfunction setVoteTimes(address _addr) external onlyOwner {\n', '\t\tvoteTimes = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimesStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimesStorage contract is not used.\n', '\t */\n', '\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\n', '\t\tvoteTimesStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounter contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setVoteCounter(address _addr) external onlyOwner {\n', '\t\tvoteCounter = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounterStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteCounterStorage contract is not used as a stand-alone because it is inherited from the VoteCounter contract.\n', '\t */\n', '\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\n', '\t\tvoteCounterStorage = _addr;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/UsingConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * Module for using AddressConfig contracts.\n', ' */\n', 'contract UsingConfig {\n', '\tAddressConfig private _config;\n', '\n', '\t/**\n', '\t * Initialize the argument as AddressConfig address.\n', '\t */\n', '\tconstructor(address _addressConfig) public {\n', '\t\t_config = AddressConfig(_addressConfig);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig instance.\n', '\t */\n', '\tfunction config() internal view returns (AddressConfig) {\n', '\t\treturn _config;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig address.\n', '\t */\n', '\tfunction configAddress() external view returns (address) {\n', '\t\treturn address(_config);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/storage/EternalStorage.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * Module for persisting states.\n', ' * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\n', ' */\n', 'contract EternalStorage {\n', '\taddress private currentOwner = msg.sender;\n', '\n', '\tmapping(bytes32 => uint256) private uIntStorage;\n', '\tmapping(bytes32 => string) private stringStorage;\n', '\tmapping(bytes32 => address) private addressStorage;\n', '\tmapping(bytes32 => bytes32) private bytesStorage;\n', '\tmapping(bytes32 => bool) private boolStorage;\n', '\tmapping(bytes32 => int256) private intStorage;\n', '\n', '\t/**\n', '\t * Modifiers to validate that only the owner can execute.\n', '\t */\n', '\tmodifier onlyCurrentOwner() {\n', '\t\trequire(msg.sender == currentOwner, "not current owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * Transfer the owner.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction changeOwner(address _newOwner) external {\n', '\t\trequire(msg.sender == currentOwner, "not current owner");\n', '\t\tcurrentOwner = _newOwner;\n', '\t}\n', '\n', '\t// *** Getter Methods ***\n', '\n', '\t/**\n', '\t * Returns the value of the `uint256` type that mapped to the given key.\n', '\t */\n', '\tfunction getUint(bytes32 _key) external view returns (uint256) {\n', '\t\treturn uIntStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `string` type that mapped to the given key.\n', '\t */\n', '\tfunction getString(bytes32 _key) external view returns (string memory) {\n', '\t\treturn stringStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `address` type that mapped to the given key.\n', '\t */\n', '\tfunction getAddress(bytes32 _key) external view returns (address) {\n', '\t\treturn addressStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `bytes32` type that mapped to the given key.\n', '\t */\n', '\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\n', '\t\treturn bytesStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `bool` type that mapped to the given key.\n', '\t */\n', '\tfunction getBool(bytes32 _key) external view returns (bool) {\n', '\t\treturn boolStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the value of the `int256` type that mapped to the given key.\n', '\t */\n', '\tfunction getInt(bytes32 _key) external view returns (int256) {\n', '\t\treturn intStorage[_key];\n', '\t}\n', '\n', '\t// *** Setter Methods ***\n', '\n', '\t/**\n', '\t * Maps a value of `uint256` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\n', '\t\tuIntStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `string` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setString(bytes32 _key, string calldata _value)\n', '\t\texternal\n', '\t\tonlyCurrentOwner\n', '\t{\n', '\t\tstringStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `address` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setAddress(bytes32 _key, address _value)\n', '\t\texternal\n', '\t\tonlyCurrentOwner\n', '\t{\n', '\t\taddressStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `bytes32` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\n', '\t\tbytesStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `bool` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\n', '\t\tboolStorage[_key] = _value;\n', '\t}\n', '\n', '\t/**\n', '\t * Maps a value of `int256` type to a given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\n', '\t\tintStorage[_key] = _value;\n', '\t}\n', '\n', '\t// *** Delete Methods ***\n', '\n', '\t/**\n', '\t * Deletes the value of the `uint256` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete uIntStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `string` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete stringStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `address` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete addressStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `bytes32` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete bytesStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `bool` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete boolStorage[_key];\n', '\t}\n', '\n', '\t/**\n', '\t * Deletes the value of the `int256` type that mapped to the given key.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\n', '\t\tdelete intStorage[_key];\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/storage/UsingStorage.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '/**\n', ' * Module for contrast handling EternalStorage.\n', ' */\n', 'contract UsingStorage is Ownable {\n', '\taddress private _storage;\n', '\n', '\t/**\n', '\t * Modifier to verify that EternalStorage is set.\n', '\t */\n', '\tmodifier hasStorage() {\n', '\t\trequire(_storage != address(0), "storage is not set");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set EternalStorage instance.\n', '\t */\n', '\tfunction eternalStorage()\n', '\t\tinternal\n', '\t\tview\n', '\t\thasStorage\n', '\t\treturns (EternalStorage)\n', '\t{\n', '\t\treturn EternalStorage(_storage);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set EternalStorage address.\n', '\t */\n', '\tfunction getStorageAddress() external view hasStorage returns (address) {\n', '\t\treturn _storage;\n', '\t}\n', '\n', '\t/**\n', '\t * Create a new EternalStorage contract.\n', '\t * This function call will fail if the EternalStorage contract is already set.\n', '\t * Also, only the owner can execute it.\n', '\t */\n', '\tfunction createStorage() external onlyOwner {\n', '\t\trequire(_storage == address(0), "storage is set");\n', '\t\tEternalStorage tmp = new EternalStorage();\n', '\t\t_storage = address(tmp);\n', '\t}\n', '\n', '\t/**\n', '\t * Assigns the EternalStorage contract that has already been created.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setStorage(address _storageAddress) external onlyOwner {\n', '\t\t_storage = _storageAddress;\n', '\t}\n', '\n', '\t/**\n', '\t * Delegates the owner of the current EternalStorage contract.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction changeOwner(address newOwner) external onlyOwner {\n', '\t\tEternalStorage(_storage).changeOwner(newOwner);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/vote/VoteCounterStorage.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract VoteCounterStorage is UsingStorage {\n', '\t// Already Vote Market\n', '\tfunction setStorageAlreadyVoteMarket(\n', '\t\taddress _user,\n', '\t\taddress _market,\n', '\t\taddress _property\n', '\t) internal {\n', '\t\tbytes32 key = getStorageAlreadyVoteMarketKey(_user, _market, _property);\n', '\t\teternalStorage().setBool(key, true);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyVoteMarket(\n', '\t\taddress _user,\n', '\t\taddress _market,\n', '\t\taddress _property\n', '\t) public view returns (bool) {\n', '\t\tbytes32 key = getStorageAlreadyVoteMarketKey(_user, _market, _property);\n', '\t\treturn eternalStorage().getBool(key);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyVoteMarketKey(\n', '\t\taddress _user,\n', '\t\taddress _market,\n', '\t\taddress _property\n', '\t) private pure returns (bytes32) {\n', '\t\treturn\n', '\t\t\tkeccak256(\n', '\t\t\t\tabi.encodePacked(\n', '\t\t\t\t\t"_alreadyVoteMarket",\n', '\t\t\t\t\t_user,\n', '\t\t\t\t\t_market,\n', '\t\t\t\t\t_property\n', '\t\t\t\t)\n', '\t\t\t);\n', '\t}\n', '\n', '\t// Already Use Property\n', '\tfunction setStorageAlreadyUseProperty(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex,\n', '\t\tbool _flg\n', '\t) internal {\n', '\t\tbytes32 key = getStorageAlreadyUsePropertyKey(\n', '\t\t\t_user,\n', '\t\t\t_property,\n', '\t\t\t_votingGroupIndex\n', '\t\t);\n', '\t\teternalStorage().setBool(key, _flg);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyUseProperty(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex\n', '\t) public view returns (bool) {\n', '\t\tbytes32 key = getStorageAlreadyUsePropertyKey(\n', '\t\t\t_user,\n', '\t\t\t_property,\n', '\t\t\t_votingGroupIndex\n', '\t\t);\n', '\t\treturn eternalStorage().getBool(key);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyUsePropertyKey(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex\n', '\t) private pure returns (bytes32) {\n', '\t\treturn\n', '\t\t\tkeccak256(\n', '\t\t\t\tabi.encodePacked(\n', '\t\t\t\t\t"_alreadyUseProperty",\n', '\t\t\t\t\t_user,\n', '\t\t\t\t\t_property,\n', '\t\t\t\t\t_votingGroupIndex\n', '\t\t\t\t)\n', '\t\t\t);\n', '\t}\n', '\n', '\t// Already Vote Policy\n', '\tfunction setStorageAlreadyVotePolicy(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex,\n', '\t\tbool _flg\n', '\t) internal {\n', '\t\tbytes32 key = getStorageAlreadyVotePolicyKey(\n', '\t\t\t_user,\n', '\t\t\t_property,\n', '\t\t\t_votingGroupIndex\n', '\t\t);\n', '\t\teternalStorage().setBool(key, _flg);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyVotePolicy(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex\n', '\t) public view returns (bool) {\n', '\t\tbytes32 key = getStorageAlreadyVotePolicyKey(\n', '\t\t\t_user,\n', '\t\t\t_property,\n', '\t\t\t_votingGroupIndex\n', '\t\t);\n', '\t\treturn eternalStorage().getBool(key);\n', '\t}\n', '\n', '\tfunction getStorageAlreadyVotePolicyKey(\n', '\t\taddress _user,\n', '\t\taddress _property,\n', '\t\tuint256 _votingGroupIndex\n', '\t) private pure returns (bytes32) {\n', '\t\treturn\n', '\t\t\tkeccak256(\n', '\t\t\t\tabi.encodePacked(\n', '\t\t\t\t\t"_alreadyVotePolicy",\n', '\t\t\t\t\t_user,\n', '\t\t\t\t\t_property,\n', '\t\t\t\t\t_votingGroupIndex\n', '\t\t\t\t)\n', '\t\t\t);\n', '\t}\n', '\n', '\t// Policy Vote Count\n', '\tfunction setStoragePolicyVoteCount(\n', '\t\taddress _user,\n', '\t\taddress _policy,\n', '\t\tbool _agree,\n', '\t\tuint256 _count\n', '\t) internal {\n', '\t\tbytes32 key = getStoragePolicyVoteCountKey(_user, _policy, _agree);\n', '\t\teternalStorage().setUint(key, _count);\n', '\t}\n', '\n', '\tfunction getStoragePolicyVoteCount(\n', '\t\taddress _user,\n', '\t\taddress _policy,\n', '\t\tbool _agree\n', '\t) public view returns (uint256) {\n', '\t\tbytes32 key = getStoragePolicyVoteCountKey(_user, _policy, _agree);\n', '\t\treturn eternalStorage().getUint(key);\n', '\t}\n', '\n', '\tfunction getStoragePolicyVoteCountKey(\n', '\t\taddress _user,\n', '\t\taddress _policy,\n', '\t\tbool _agree\n', '\t) private pure returns (bytes32) {\n', '\t\treturn\n', '\t\t\tkeccak256(\n', '\t\t\t\tabi.encodePacked("_policyVoteCount", _user, _policy, _agree)\n', '\t\t\t);\n', '\t}\n', '\n', '\t// Agree Count\n', '\tfunction setStorageAgreeCount(address _sender, uint256 count) internal {\n', '\t\teternalStorage().setUint(getStorageAgreeVoteCountKey(_sender), count);\n', '\t}\n', '\n', '\tfunction getStorageAgreeCount(address _sender)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn eternalStorage().getUint(getStorageAgreeVoteCountKey(_sender));\n', '\t}\n', '\n', '\tfunction getStorageAgreeVoteCountKey(address _sender)\n', '\t\tprivate\n', '\t\tpure\n', '\t\treturns (bytes32)\n', '\t{\n', '\t\treturn keccak256(abi.encodePacked(_sender, "_agreeVoteCount"));\n', '\t}\n', '\n', '\t// Opposite Count\n', '\tfunction setStorageOppositeCount(address _sender, uint256 count) internal {\n', '\t\teternalStorage().setUint(\n', '\t\t\tgetStorageOppositeVoteCountKey(_sender),\n', '\t\t\tcount\n', '\t\t);\n', '\t}\n', '\n', '\tfunction getStorageOppositeCount(address _sender)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn\n', '\t\t\teternalStorage().getUint(getStorageOppositeVoteCountKey(_sender));\n', '\t}\n', '\n', '\tfunction getStorageOppositeVoteCountKey(address _sender)\n', '\t\tprivate\n', '\t\tpure\n', '\t\treturns (bytes32)\n', '\t{\n', '\t\treturn keccak256(abi.encodePacked(_sender, "_oppositeVoteCount"));\n', '\t}\n', '}\n', '\n', '// File: contracts/src/policy/IPolicy.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IPolicy {\n', '\tfunction rewards(uint256 _lockups, uint256 _assets)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction holdersShare(uint256 _amount, uint256 _lockups)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction assetValue(uint256 _value, uint256 _lockups)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction marketApproval(uint256 _agree, uint256 _opposite)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\n', '\tfunction policyApproval(uint256 _agree, uint256 _opposite)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\n', '\tfunction marketVotingBlocks() external view returns (uint256);\n', '\n', '\tfunction policyVotingBlocks() external view returns (uint256);\n', '\n', '\tfunction abstentionPenalty(uint256 _count) external view returns (uint256);\n', '\n', '\tfunction lockUpBlocks() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/src/lockup/ILockup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract ILockup {\n', '\tfunction lockup(\n', '\t\taddress _from,\n', '\t\taddress _property,\n', '\t\tuint256 _value\n', '\t\t// solium-disable-next-line indentation\n', '\t) external;\n', '\n', '\tfunction update() public;\n', '\n', '\tfunction cancel(address _property) external;\n', '\n', '\tfunction withdraw(address _property) external;\n', '\n', '\tfunction calculateCumulativeRewardPrices()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 _reward,\n', '\t\t\tuint256 _holders,\n', '\t\t\tuint256 _interest\n', '\t\t);\n', '\n', '\tfunction calculateCumulativeHoldersRewardAmount(address _property)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction getPropertyValue(address _property)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction getAllValue() external view returns (uint256);\n', '\n', '\tfunction getValue(address _property, address _sender)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction calculateWithdrawableInterestAmount(\n', '\t\taddress _property,\n', '\t\taddress _user\n', '\t)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tuint256\n', '\t\t);\n', '\n', '\tfunction withdrawInterest(address _property) external;\n', '}\n', '\n', '// File: contracts/src/market/IMarket.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'interface IMarket {\n', '\tfunction authenticate(\n', '\t\taddress _prop,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3,\n', '\t\tstring calldata _args4,\n', '\t\tstring calldata _args5\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tbool\n', '\t\t);\n', '\n', '\tfunction authenticateFromPropertyFactory(\n', '\t\taddress _prop,\n', '\t\taddress _author,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3,\n', '\t\tstring calldata _args4,\n', '\t\tstring calldata _args5\n', '\t)\n', '\t\texternal\n', '\t\treturns (\n', '\t\t\t// solium-disable-next-line indentation\n', '\t\t\tbool\n', '\t\t);\n', '\n', '\tfunction authenticatedCallback(address _property, bytes32 _idHash)\n', '\t\texternal\n', '\t\treturns (address);\n', '\n', '\tfunction deauthenticate(address _metrics) external;\n', '\n', '\tfunction schema() external view returns (string memory);\n', '\n', '\tfunction behavior() external view returns (address);\n', '\n', '\tfunction enabled() external view returns (bool);\n', '\n', '\tfunction votingEndBlockNumber() external view returns (uint256);\n', '\n', '\tfunction toEnable() external;\n', '}\n', '\n', '// File: contracts/src/vote/IVoteCounter.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IVoteCounter {\n', '\tfunction voteMarket(\n', '\t\taddress _market,\n', '\t\taddress _property,\n', '\t\tbool _agree\n', '\t\t// solium-disable-next-line indentation\n', '\t) external;\n', '\n', '\tfunction isAlreadyVoteMarket(address _target, address _property)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\n', '\tfunction votePolicy(\n', '\t\taddress _policy,\n', '\t\taddress _property,\n', '\t\tbool _agree\n', '\t\t// solium-disable-next-line indentation\n', '\t) external;\n', '\n', '\tfunction cancelVotePolicy(address _policy, address _property) external;\n', '}\n', '\n', '// File: contracts/src/policy/IPolicyGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract IPolicyGroup is IGroup {\n', '\tfunction getVotingGroupIndex() external view returns (uint256);\n', '\n', '\tfunction incrementVotingGroupIndex() external;\n', '\n', '\tfunction voting(address _policy) external view returns (bool);\n', '\n', '\tfunction addGroupWithoutSetVotingEnd(address _addr) public;\n', '}\n', '\n', '// File: contracts/src/policy/IPolicyFactory.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IPolicyFactory {\n', '\tfunction create(address _newPolicyAddress) external;\n', '\n', '\tfunction convergePolicy(address _currentPolicyAddress) external;\n', '}\n', '\n', '// File: contracts/src/vote/VoteCounter.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * A contract that manages the activation votes for new markets and new policies.\n', ' * Voting rights of voters are determined by the staking amount to a Property.\n', ' * That is, at the voting, expecting to pass a Property address for specification the voting right.\n', ' * Market voting is an election that selects out all that voters think is good.\n', ' * Policy voting is an election to select one that seems to be the best with Quadratic Voting.\n', ' * Quadratic Voting is realized by exercising multiple voting rights in Policy voting.\n', ' */\n', 'contract VoteCounter is\n', '\tIVoteCounter,\n', '\tUsingConfig,\n', '\tUsingValidator,\n', '\tVoteCounterStorage\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\t/**\n', '\t * Initialize the passed address as AddressConfig address.\n', '\t */\n', '\t// solium-disable-next-line no-empty-blocks\n', '\tconstructor(address _config) public UsingConfig(_config) {}\n', '\n', '\t/**\n', '\t * Votes for or against new Market\n', '\t */\n', '\tfunction voteMarket(\n', '\t\taddress _market,\n', '\t\taddress _property,\n', '\t\tbool _agree\n', '\t) external {\n', '\t\t/**\n', '\t\t * Validates the passed Market address is included the Market address set\n', '\t\t */\n', '\t\taddressValidator().validateGroup(_market, config().marketGroup());\n', '\n', '\t\t/**\n', '\t\t * Validates the passed Market is still not enabled\n', '\t\t */\n', '\t\tIMarket market = IMarket(_market);\n', '\t\trequire(market.enabled() == false, "market is already enabled");\n', '\n', '\t\t/**\n', '\t\t * Validates the voting deadline has not passed.\n', '\t\t */\n', '\t\trequire(\n', '\t\t\tblock.number <= market.votingEndBlockNumber(),\n', '\t\t\t"voting deadline is over"\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Gets the staking amount for the passed Property as a voting right.\n', '\t\t * If the voting right is 0, it cannot vote.\n', '\t\t */\n', '\t\tuint256 count = ILockup(config().lockup()).getValue(\n', '\t\t\t_property,\n', '\t\t\tmsg.sender\n', '\t\t);\n', '\t\trequire(count != 0, "vote count is 0");\n', '\n', '\t\t/**\n', '\t\t * Validates it does not become a double vote.\n', '\t\t */\n', '\t\tbool alreadyVote = getStorageAlreadyVoteMarket(\n', '\t\t\tmsg.sender,\n', '\t\t\t_market,\n', '\t\t\t_property\n', '\t\t);\n', '\t\trequire(alreadyVote == false, "already vote");\n', '\n', '\t\t/**\n', '\t\t * Votes\n', '\t\t */\n', '\t\tvote(_market, count, _agree);\n', '\n', '\t\t/**\n', '\t\t * Records voting status to avoid double voting.\n', '\t\t */\n', '\t\tsetStorageAlreadyVoteMarket(msg.sender, _market, _property);\n', '\n', '\t\t/**\n', '\t\t * Gets the votes for and against and gets whether or not the threshold\n', '\t\t * for enabling the Market is exceeded.\n', '\t\t */\n', '\t\tbool result = IPolicy(config().policy()).marketApproval(\n', '\t\t\tgetStorageAgreeCount(_market),\n', '\t\t\tgetStorageOppositeCount(_market)\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * If the result is false, the process ends.\n', '\t\t */\n', '\t\tif (result == false) {\n', '\t\t\treturn;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t * If the result is true, to enable the passed Market.\n', '\t\t */\n', '\t\tmarket.toEnable();\n', '\t}\n', '\n', '\tfunction isAlreadyVoteMarket(address _target, address _property)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn getStorageAlreadyVoteMarket(msg.sender, _target, _property);\n', '\t}\n', '\n', '\t/**\n', '\t * Votes for or against new Policy\n', '\t */\n', '\tfunction votePolicy(\n', '\t\taddress _policy,\n', '\t\taddress _property,\n', '\t\tbool _agree\n', '\t) external {\n', '\t\t/**\n', '\t\t * Validates the passed Policy address is included the Policy address set\n', '\t\t */\n', '\t\taddressValidator().validateGroup(_policy, config().policyGroup());\n', '\n', '\t\t/**\n', '\t\t * Validates the passed Policy is not the current Policy.\n', '\t\t */\n', '\t\trequire(config().policy() != _policy, "this policy is current");\n', '\n', '\t\t/**\n', '\t\t * Validates the voting deadline has not passed.\n', '\t\t */\n', '\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\n', '\t\trequire(policyGroup.voting(_policy), "voting deadline is over");\n', '\n', '\t\t/**\n', '\t\t * Validates it does not become a double vote.\n', '\t\t * In a Policy vote, the Property used to vote for one of the Policies with the same voting period cannot be reused.\n', '\t\t */\n', '\t\tuint256 votingGroupIndex = policyGroup.getVotingGroupIndex();\n', '\t\tbool alreadyVote = getStorageAlreadyUseProperty(\n', '\t\t\tmsg.sender,\n', '\t\t\t_property,\n', '\t\t\tvotingGroupIndex\n', '\t\t);\n', '\t\trequire(alreadyVote == false, "already use property");\n', '\n', '\t\t/**\n', '\t\t * Validates it does not become a double vote.\n', '\t\t */\n', '\t\talreadyVote = getStorageAlreadyVotePolicy(\n', '\t\t\tmsg.sender,\n', '\t\t\t_policy,\n', '\t\t\tvotingGroupIndex\n', '\t\t);\n', '\t\trequire(alreadyVote == false, "already vote policy");\n', '\n', '\t\t/**\n', '\t\t * Gets the staking amount for the passed Property as a voting right.\n', '\t\t * If the voting right is 0, it cannot vote.\n', '\t\t */\n', '\t\tuint256 count = ILockup(config().lockup()).getValue(\n', '\t\t\t_property,\n', '\t\t\tmsg.sender\n', '\t\t);\n', '\t\trequire(count != 0, "vote count is 0");\n', '\n', '\t\t/**\n', '\t\t * Votes\n', '\t\t */\n', '\t\tvote(_policy, count, _agree);\n', '\n', '\t\t/**\n', '\t\t * Records voting status to avoid double voting.\n', '\t\t */\n', '\t\tsetStorageAlreadyUseProperty(\n', '\t\t\tmsg.sender,\n', '\t\t\t_property,\n', '\t\t\tvotingGroupIndex,\n', '\t\t\ttrue\n', '\t\t);\n', '\t\tsetStorageAlreadyVotePolicy(\n', '\t\t\tmsg.sender,\n', '\t\t\t_policy,\n', '\t\t\tvotingGroupIndex,\n', '\t\t\ttrue\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Records the used number of voting rights.\n', '\t\t * The Policy vote is an election to select one, so voters can cancel an existing vote if voters think a later Policy is better.\n', '\t\t */\n', '\t\tsetStoragePolicyVoteCount(msg.sender, _policy, _agree, count);\n', '\n', '\t\t/**\n', '\t\t * Gets the votes for and against and gets whether or not the threshold\n', '\t\t * for enabling the Policy is exceeded.\n', '\t\t */\n', '\t\tbool result = IPolicy(config().policy()).policyApproval(\n', '\t\t\tgetStorageAgreeCount(_policy),\n', '\t\t\tgetStorageOppositeCount(_policy)\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * If the result is false, the process ends.\n', '\t\t */\n', '\t\tif (result == false) {\n', '\t\t\treturn;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t * If the result is true, to enable the passed Policy.\n', '\t\t */\n', '\t\tIPolicyFactory policyFactory = IPolicyFactory(config().policyFactory());\n', '\t\tpolicyFactory.convergePolicy(_policy);\n', '\t}\n', '\n', '\t/**\n', '\t * Cancel voting for Policy\n', '\t */\n', '\tfunction cancelVotePolicy(address _policy, address _property) external {\n', '\t\t/**\n', '\t\t * Validates the passed Policy has already been voted using the passed Property.\n', '\t\t */\n', '\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\n', '\t\tuint256 votingGroupIndex = policyGroup.getVotingGroupIndex();\n', '\t\tbool alreadyVote = getStorageAlreadyUseProperty(\n', '\t\t\tmsg.sender,\n', '\t\t\t_property,\n', '\t\t\tvotingGroupIndex\n', '\t\t);\n', '\t\trequire(alreadyVote, "not use property");\n', '\n', '\t\t/**\n', '\t\t * Validates the passed Policy has already been voted.\n', '\t\t */\n', '\t\talreadyVote = getStorageAlreadyVotePolicy(\n', '\t\t\tmsg.sender,\n', '\t\t\t_policy,\n', '\t\t\tvotingGroupIndex\n', '\t\t);\n', '\t\trequire(alreadyVote, "not vote policy");\n', '\n', '\t\t/**\n', '\t\t * Gets the number of for or against votes the sender has voted.\n', '\t\t */\n', '\t\tbool agree = true;\n', '\t\tuint256 count = getStoragePolicyVoteCount(msg.sender, _policy, agree);\n', '\t\tif (count == 0) {\n', '\t\t\tagree = false;\n', '\t\t\tcount = getStoragePolicyVoteCount(msg.sender, _policy, agree);\n', '\n', '\t\t\t/**\n', '\t\t\t * Validates the voting rights are not 0.\n', '\t\t\t */\n', '\t\t\trequire(count != 0, "not vote policy");\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t * Subtracts the exercised voting rights to cancel the vote.\n', '\t\t */\n', '\t\tcancelVote(_policy, count, agree);\n', '\n', '\t\t/**\n', '\t\t * Sets the exercised voting rights to 0.\n', '\t\t */\n', '\t\tsetStoragePolicyVoteCount(msg.sender, _policy, agree, 0);\n', '\n', '\t\t/**\n', '\t\t * Deletes a Property as voting rights and the exercise record.\n', '\t\t */\n', '\t\tsetStorageAlreadyUseProperty(\n', '\t\t\tmsg.sender,\n', '\t\t\t_property,\n', '\t\t\tvotingGroupIndex,\n', '\t\t\tfalse\n', '\t\t);\n', '\t\tsetStorageAlreadyVotePolicy(\n', '\t\t\tmsg.sender,\n', '\t\t\t_policy,\n', '\t\t\tvotingGroupIndex,\n', '\t\t\tfalse\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * Exercises voting rights.\n', '\t */\n', '\tfunction vote(\n', '\t\taddress _target,\n', '\t\tuint256 count,\n', '\t\tbool _agree\n', '\t) private {\n', '\t\tif (_agree) {\n', '\t\t\t/**\n', '\t\t\t * For:\n', '\t\t\t */\n', '\t\t\taddAgreeCount(_target, count);\n', '\t\t} else {\n', '\t\t\t/**\n', '\t\t\t * Against:\n', '\t\t\t */\n', '\t\t\taddOppositeCount(_target, count);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * Subtracts the exercised voting rights to cancel the vote.\n', '\t */\n', '\tfunction cancelVote(\n', '\t\taddress _target,\n', '\t\tuint256 count,\n', '\t\tbool _agree\n', '\t) private {\n', '\t\tif (_agree) {\n', '\t\t\t/**\n', '\t\t\t * Cancel the yes:\n', '\t\t\t */\n', '\t\t\tsubAgreeCount(_target, count);\n', '\t\t} else {\n', '\t\t\t/**\n', '\t\t\t * Cancel the against:\n', '\t\t\t */\n', '\t\t\tsubOppositeCount(_target, count);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * Adds voting rights exercised as for.\n', '\t */\n', '\tfunction addAgreeCount(address _target, uint256 _voteCount) private {\n', '\t\tuint256 agreeCount = getStorageAgreeCount(_target);\n', '\t\tagreeCount = agreeCount.add(_voteCount);\n', '\t\tsetStorageAgreeCount(_target, agreeCount);\n', '\t}\n', '\n', '\t/**\n', '\t * Adds voting rights exercised as against.\n', '\t */\n', '\tfunction addOppositeCount(address _target, uint256 _voteCount) private {\n', '\t\tuint256 oppositeCount = getStorageOppositeCount(_target);\n', '\t\toppositeCount = oppositeCount.add(_voteCount);\n', '\t\tsetStorageOppositeCount(_target, oppositeCount);\n', '\t}\n', '\n', '\t/**\n', '\t * Subtracts voting rights exercised as for.\n', '\t */\n', '\tfunction subAgreeCount(address _target, uint256 _voteCount) private {\n', '\t\tuint256 agreeCount = getStorageAgreeCount(_target);\n', '\t\tagreeCount = agreeCount.sub(_voteCount);\n', '\t\tsetStorageAgreeCount(_target, agreeCount);\n', '\t}\n', '\n', '\t/**\n', '\t * Subtracts voting rights exercised as against.\n', '\t */\n', '\tfunction subOppositeCount(address _target, uint256 _voteCount) private {\n', '\t\tuint256 oppositeCount = getStorageOppositeCount(_target);\n', '\t\toppositeCount = oppositeCount.sub(_voteCount);\n', '\t\tsetStorageOppositeCount(_target, oppositeCount);\n', '\t}\n', '}']