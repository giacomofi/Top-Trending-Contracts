['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction underflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface WETH9 {\n', '    function withdraw(uint wad) external;\n', '}\n', '\n', 'interface IUniswapV2Router {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IKeep3rV1 {\n', '    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\n', '    function receipt(address credit, address keeper, uint amount) external;\n', '    function unbond(address bonding, uint amount) external;\n', '    function withdraw(address bonding) external;\n', '    function bonds(address keeper, address credit) external view returns (uint);\n', '    function unbondings(address keeper, address credit) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function jobs(address job) external view returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function worked(address keeper) external;\n', '    function KPRH() external view returns (IKeep3rV1Helper);\n', '}\n', '\n', 'interface IKeep3rV1Helper {\n', '    function getQuoteLimit(uint gasUsed) external view returns (uint);\n', '}\n', '\n', '// sliding oracle that uses observations collected to provide moving price averages in the past\n', 'contract Keep3rV1Oracle {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint;\n', '\n', '    struct Observation {\n', '        uint timestamp;\n', '        uint price0Cumulative;\n', '        uint price1Cumulative;\n', '    }\n', '    \n', '    uint public minKeep = 200e18;\n', '\n', '    modifier keeper() {\n', '        require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper: keeper is not registered");\n', '        _;\n', '    }\n', '\n', '    modifier upkeep() {\n', '        uint _gasUsed = gasleft();\n', '        require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper: keeper is not registered");\n', '        _;\n', '        uint _received = KP3R.KPRH().getQuoteLimit(_gasUsed.sub(gasleft()));\n', '        KP3R.receipt(address(KP3R), address(this), _received);\n', '        _received = _swap(_received);\n', '        msg.sender.transfer(_received);\n', '    }\n', '\n', '    address public governance;\n', '    address public pendingGovernance;\n', '    \n', '    function setMinKeep(uint _keep) external {\n', '        require(msg.sender == governance, "setGovernance: !gov");\n', '        minKeep = _keep;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows governance to change governance (for future upgradability)\n', '     * @param _governance new governance address to set\n', '     */\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "setGovernance: !gov");\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "acceptGovernance: !pendingGov");\n', '        governance = pendingGovernance;\n', '    }\n', '\n', '    IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\n', '    WETH9 public constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IUniswapV2Router public constant UNI = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    address public constant factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    // this is redundant with granularity and windowSize, but stored for gas savings & informational purposes.\n', '    uint public constant periodSize = 1800;\n', '\n', '    address[] internal _pairs;\n', '    mapping(address => bool) internal _known;\n', '\n', '    function pairs() external view returns (address[] memory) {\n', '        return _pairs;\n', '    }\n', '\n', '    mapping(address => Observation[]) public observations;\n', '    \n', '    function observationLength(address pair) external view returns (uint) {\n', '        return observations[pair].length;\n', '    }\n', '    \n', '    function pairFor(address tokenA, address tokenB) external pure returns (address) {\n', '        return UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '    }\n', '    \n', '    function pairForWETH(address tokenA) external pure returns (address) {\n', '        return UniswapV2Library.pairFor(factory, tokenA, address(WETH));\n', '    }\n', '\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function updatePair(address pair) external keeper returns (bool) {\n', '        return _update(pair);\n', '    }\n', '\n', '    function update(address tokenA, address tokenB) external keeper returns (bool) {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '        return _update(pair);\n', '    }\n', '\n', '    function add(address tokenA, address tokenB) external {\n', '        require(msg.sender == governance, "UniswapV2Oracle::add: !gov");\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '        require(!_known[pair], "known");\n', '        _known[pair] = true;\n', '        _pairs.push(pair);\n', '\n', '        (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '        observations[pair].push(Observation(block.timestamp, price0Cumulative, price1Cumulative));\n', '    }\n', '\n', '    function work() public upkeep {\n', '        bool worked = _updateAll();\n', '        require(worked, "UniswapV2Oracle: !work");\n', '    }\n', '\n', '    function workForFree() public keeper {\n', '        bool worked = _updateAll();\n', '        require(worked, "UniswapV2Oracle: !work");\n', '    }\n', '    \n', '    function lastObservation(address pair) public view returns (Observation memory) {\n', '        return observations[pair][observations[pair].length-1];\n', '    }\n', '\n', '    function _updateAll() internal returns (bool updated) {\n', '        for (uint i = 0; i < _pairs.length; i++) {\n', '            if (_update(_pairs[i])) {\n', '                updated = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function updateFor(uint i, uint length) external keeper returns (bool updated) {\n', '        for (; i < length; i++) {\n', '            if (_update(_pairs[i])) {\n', '                updated = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function workable(address pair) public view returns (bool) {\n', '        return (block.timestamp - lastObservation(pair).timestamp) > periodSize;\n', '    }\n', '\n', '    function workable() external view returns (bool) {\n', '        for (uint i = 0; i < _pairs.length; i++) {\n', '            if (workable(_pairs[i])) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _update(address pair) internal returns (bool) {\n', '        // we only want to commit updates once per period (i.e. windowSize / granularity)\n', '        Observation memory _point = lastObservation(pair);\n', '        uint timeElapsed = block.timestamp - _point.timestamp;\n', '        if (timeElapsed > periodSize) {\n', '            (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '            observations[pair].push(Observation(block.timestamp, price0Cumulative, price1Cumulative));\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function computeAmountOut(\n', '        uint priceCumulativeStart, uint priceCumulativeEnd,\n', '        uint timeElapsed, uint amountIn\n', '    ) private pure returns (uint amountOut) {\n', '        // overflow is desired.\n', '        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '            uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\n', '        );\n', '        amountOut = priceAverage.mul(amountIn).decode144();\n', '    }\n', '\n', '    function _valid(address pair, uint age) internal view returns (bool) {\n', '        return (block.timestamp - lastObservation(pair).timestamp) <= age;\n', '    }\n', '\n', '    function current(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut) {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\n', '        require(_valid(pair, periodSize.mul(2)), "UniswapV2Oracle::quote: stale prices");\n', '        (address token0,) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '\n', '        Observation memory _observation = lastObservation(pair);\n', '        (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '        if (block.timestamp == _observation.timestamp) {\n', '            _observation = observations[pair][observations[pair].length-2];\n', '        }\n', '        \n', '        uint timeElapsed = block.timestamp - _observation.timestamp;\n', '        timeElapsed = timeElapsed == 0 ? 1 : timeElapsed;\n', '        if (token0 == tokenIn) {\n', '            return computeAmountOut(_observation.price0Cumulative, price0Cumulative, timeElapsed, amountIn);\n', '        } else {\n', '            return computeAmountOut(_observation.price1Cumulative, price1Cumulative, timeElapsed, amountIn);\n', '        }\n', '    }\n', '\n', '    function quote(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (uint amountOut) {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\n', '        require(_valid(pair, periodSize.mul(granularity)), "UniswapV2Oracle::quote: stale prices");\n', '        (address token0,) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '\n', '        uint priceAverageCumulative = 0;\n', '        uint length = observations[pair].length-1;\n', '        uint i = length.sub(granularity);\n', '\n', '\n', '        uint nextIndex = 0;\n', '        if (token0 == tokenIn) {\n', '            for (; i < length; i++) {\n', '                nextIndex = i+1;\n', '                priceAverageCumulative += computeAmountOut(\n', '                    observations[pair][i].price0Cumulative,\n', '                    observations[pair][nextIndex].price0Cumulative, \n', '                    observations[pair][nextIndex].timestamp - observations[pair][i].timestamp, amountIn);\n', '            }\n', '        } else {\n', '            for (; i < length; i++) {\n', '                nextIndex = i+1;\n', '                priceAverageCumulative += computeAmountOut(\n', '                    observations[pair][i].price1Cumulative,\n', '                    observations[pair][nextIndex].price1Cumulative, \n', '                    observations[pair][nextIndex].timestamp - observations[pair][i].timestamp, amountIn);\n', '            }\n', '        }\n', '        return priceAverageCumulative.div(granularity);\n', '    }\n', '    \n', '    function prices(address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint[] memory) {\n', '        return sample(tokenIn, amountIn, tokenOut, points, 1);\n', '    }\n', '    \n', '    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) public view returns (uint[] memory) {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\n', '        (address token0,) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '        uint[] memory _prices = new uint[](points);\n', '        \n', '        uint length = observations[pair].length-1;\n', '        uint i = length.sub(points * window);\n', '        uint nextIndex = 0;\n', '        uint index = 0;\n', '        \n', '        if (token0 == tokenIn) {\n', '            for (; i < length; i+=window) {\n', '                nextIndex = i + window;\n', '                _prices[index] = computeAmountOut(\n', '                    observations[pair][i].price0Cumulative,\n', '                    observations[pair][nextIndex].price0Cumulative, \n', '                    observations[pair][nextIndex].timestamp - observations[pair][i].timestamp, amountIn);\n', '                index = index + 1;\n', '            }\n', '        } else {\n', '            for (; i < length; i+=window) {\n', '                nextIndex = i + window;\n', '                _prices[index] = computeAmountOut(\n', '                    observations[pair][i].price1Cumulative,\n', '                    observations[pair][nextIndex].price1Cumulative, \n', '                    observations[pair][nextIndex].timestamp - observations[pair][i].timestamp, amountIn);\n', '                index = index + 1;\n', '            }\n', '        }\n', '        return _prices;\n', '    }\n', '    \n', '    function hourly(address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint[] memory) {\n', '        return sample(tokenIn, amountIn, tokenOut, points, 2);\n', '    }\n', '    \n', '    function daily(address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint[] memory) {\n', '        return sample(tokenIn, amountIn, tokenOut, points, 48);\n', '    }\n', '    \n', '    function weekly(address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint[] memory) {\n', '        return sample(tokenIn, amountIn, tokenOut, points, 336);\n', '    }\n', '    \n', '    function realizedVolatility(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint) {\n', '        return stddev(sample(tokenIn, amountIn, tokenOut, points, window));\n', '    }\n', '    \n', '    function realizedVolatilityHourly(address tokenIn, uint amountIn, address tokenOut) external view returns (uint) {\n', '        return stddev(sample(tokenIn, amountIn, tokenOut, 1, 2));\n', '    }\n', '    \n', '    function realizedVolatilityDaily(address tokenIn, uint amountIn, address tokenOut) external view returns (uint) {\n', '        return stddev(sample(tokenIn, amountIn, tokenOut, 1, 48));\n', '    }\n', '    \n', '    function realizedVolatilityWeekly(address tokenIn, uint amountIn, address tokenOut) external view returns (uint) {\n', '        return stddev(sample(tokenIn, amountIn, tokenOut, 1, 336));\n', '    }\n', '    \n', '    /**\n', '     * @dev sqrt calculates the square root of a given number x\n', '     * @dev for precision into decimals the number must first\n', '     * @dev be multiplied by the precision factor desired\n', '     * @param x uint256 number for the calculation of square root\n', '     */\n', '    function sqrt(uint256 x) public pure returns (uint256) {\n', '        uint256 c = (x + 1) / 2;\n', '        uint256 b = x;\n', '        while (c < b) {\n', '            b = c;\n', '            c = (x / c + c) / 2;\n', '        }\n', '        return b;\n', '    }\n', '    \n', '    /**\n', '     * @dev stddev calculates the standard deviation for an array of integers\n', '     * @dev precision is the same as sqrt above meaning for higher precision\n', '     * @dev the decimal place must be moved prior to passing the params\n', '     * @param numbers uint[] array of numbers to be used in calculation\n', '     */\n', '    function stddev(uint[] memory numbers) public pure returns (uint256 sd) {\n', '        uint sum = 0;\n', '        for(uint i = 0; i < numbers.length; i++) {\n', '            sum += numbers[i];\n', '        }\n', '        uint256 mean = sum / numbers.length;        // Integral value; float not supported in Solidity\n', '        sum = 0;\n', '        uint i;\n', '        for(i = 0; i < numbers.length; i++) {\n', '            sum += (numbers[i] - mean) ** 2;\n', '        }\n', '        sd = sqrt(sum / (numbers.length - 1));      //Integral value; float not supported in Solidity\n', '        return sd;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev blackScholesEstimate calculates a rough price estimate for an ATM option\n', '     * @dev input parameters should be transformed prior to being passed to the function\n', '     * @dev so as to remove decimal places otherwise results will be far less accurate\n', '     * @param _vol uint256 volatility of the underlying converted to remove decimals\n', '     * @param _underlying uint256 price of the underlying asset\n', '     * @param _time uint256 days to expiration in years multiplied to remove decimals\n', '     */\n', '    function blackScholesEstimate(\n', '        uint256 _vol,\n', '        uint256 _underlying,\n', '        uint256 _time\n', '    ) public pure returns (uint256 estimate) {\n', '        estimate = 40 * _vol * _underlying * sqrt(_time);\n', '        return estimate;\n', '    }\n', '    \n', '    /**\n', '     * @dev fromReturnsBSestimate first calculates the stddev of an array of price returns\n', '     * @dev then uses that as the volatility param for the blackScholesEstimate\n', '     * @param _numbers uint256[] array of price returns for volatility calculation\n', '     * @param _underlying uint256 price of the underlying asset\n', '     * @param _time uint256 days to expiration in years multiplied to remove decimals\n', '     */\n', '    function retBasedBlackScholesEstimate(\n', '        uint256[] memory _numbers,\n', '        uint256 _underlying,\n', '        uint256 _time\n', '    ) public pure {\n', '        uint _vol = stddev(_numbers);\n', '        blackScholesEstimate(_vol, _underlying, _time);\n', '    }\n', '    \n', '    receive() external payable {}\n', '    \n', '    function _swap(uint _amount) internal returns (uint) {\n', '        KP3R.approve(address(UNI), _amount);\n', '        \n', '        address[] memory path = new address[](2);\n', '        path[0] = address(KP3R);\n', '        path[1] = address(WETH);\n', '\n', '        uint[] memory amounts = UNI.swapExactTokensForTokens(_amount, uint256(0), path, address(this), now.add(1800));\n', '        WETH.withdraw(amounts[1]);\n', '        return amounts[1];\n', '    }\n', '}']