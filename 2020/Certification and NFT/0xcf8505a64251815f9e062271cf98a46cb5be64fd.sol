['pragma solidity ^0.5.16;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract LIZSAKE is Ownable{\n', '    using SafeMath for uint;\n', '    uint256 public totalStake;\n', '\n', '    uint8  public governanceRate = 12;\n', '    uint public vipMaxStake = 32 ether;\n', '\n', '    mapping (address => uint256) private _stakes;\n', '\n', '    event Deposit(address indexed from, uint256 amount);\n', '    event Withdraw(address indexed to, uint256 value);\n', '    event GovWithdraw(address indexed to, uint256 value);\n', '\n', '    uint constant private minInvestmentLimit = 10 finney;\n', '\n', '    constructor()public {\n', '    }\n', '\n', '\n', '    function deposit()payable public {\n', '        require(msg.value > 0, "!value");\n', '        if(_stakes[msg.sender] == 0){\n', '            require(msg.value >= minInvestmentLimit,"!deposit limit");\n', '        }\n', '        totalStake = totalStake.add(msg.value);\n', '        _stakes[msg.sender] = _stakes[msg.sender].add(msg.value);\n', '        emit Deposit(msg.sender,msg.value);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public {\n', '        require(_amount > 0, "!value");\n', '        uint reduceAmount = _amount;\n', '        if(governanceRate > 0){\n', '            reduceAmount = _amount.mul(100).div(100-governanceRate);\n', '        }\n', '        _stakes[msg.sender] = _stakes[msg.sender].sub(reduceAmount, "withdraw amount exceeds balance");\n', '        totalStake = totalStake.sub(reduceAmount, "withdraw amount exceeds totalStake");\n', '        msg.sender.transfer(_amount);\n', '        emit Withdraw(msg.sender, _amount);\n', '    }\n', '\n', '    function govWithdraw(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        msg.sender.transfer(_amount);\n', '        emit GovWithdraw(msg.sender, _amount);\n', '    }\n', '\n', '\n', '    function changeRate(uint8 _rate)onlyOwner public {\n', '        require(100 > _rate, "governanceRate big than 100");\n', '        governanceRate = _rate;\n', '    }\n', '\n', '    function vitailk(uint _newMax)onlyOwner public {\n', '        vipMaxStake = _newMax;\n', '    }\n', '\n', '    function() external payable {\n', '    }\n', '\n', '    function stakeOf(address account) public view returns (uint) {\n', '        return _stakes[account];\n', '    }\n', '}']