['pragma solidity ^0.5.17;\n', '\n', '// ------------------------------------------------------------------------\n', '// Interface that the crowdsale uses (taken from token)\n', '// ------------------------------------------------------------------------\n', 'contract IERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) view public returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Math library\n', '// ------------------------------------------------------------------------\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Safe transfer function contract to provide mo\n', '// ------------------------------------------------------------------------\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Create the safe transfer function contract to provide mo\n', '    // ------------------------------------------------------------------------\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '    \n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Allows action restrictions\n', '// ------------------------------------------------------------------------\n', 'contract Ownable {\n', '  address payable internal _owner;\n', '  address payable internal _potentialNewOwner;\n', ' \n', '  event OwnershipTransferred(address payable indexed from, address payable indexed to, uint date);\n', '\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == _owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address payable newOwner) external onlyOwner {\n', '    _potentialNewOwner = newOwner;\n', '  }\n', '  function acceptOwnership() external {\n', '    require(msg.sender == _potentialNewOwner);\n', '    emit OwnershipTransferred(_owner, _potentialNewOwner, now);\n', '    _owner = _potentialNewOwner;\n', '  }\n', '  function getOwner() view external returns(address){\n', '      return _owner;\n', '  }\n', '  function getPotentialNewOwner() view external returns(address){\n', '      return _potentialNewOwner;\n', '  }\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Create non ReentrancyGuard contract for buy tokens (concurrency)\n', '// ------------------------------------------------------------------------\n', 'contract ReentrancyGuard {\n', '    \n', '    uint256 private _guardCounter;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor to start counter\n', '    // ------------------------------------------------------------------------\n', '    constructor () internal {\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set the nonReentrant modifier to stop re-entry of function\n', '    // ------------------------------------------------------------------------\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '    \n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Create recoverable tokens\n', '// ------------------------------------------------------------------------\n', 'contract RecoverableToken is Ownable {\n', '  event RecoveredTokens(address token, address owner, uint256 tokens, uint time);\n', '  \n', '  function recoverAllTokens(IERC20 token) public onlyOwner {\n', '    uint256 tokens = tokensToBeReturned(token);\n', '    require(token.transfer(_owner, tokens) == true);\n', '    emit RecoveredTokens(address(token), _owner,  tokens, now);\n', '  }\n', '  \n', '  function recoverTokens(IERC20 token, uint256 amount) public onlyOwner {\n', '    require(token.transfer(_owner, amount) == true);\n', '    emit RecoveredTokens(address(token), _owner,  amount, now);\n', '  }\n', '  \n', '  function tokensToBeReturned(IERC20 token) public view returns (uint256) {\n', '    return token.balanceOf(address(this));\n', '  }\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Crowdsale wrapper contract\n', '// ------------------------------------------------------------------------\n', 'contract Crowdsale is ReentrancyGuard, Ownable, RecoverableToken {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 private _token;\n', '    address payable private _wallet;\n', '    // 1 wei will give you 1 unit\n', '    uint256 private _rate;\n', '    uint256 private _weiRaised;\n', '    \n', '    mapping(address => bool) public whitelistedAddresses;\n', '\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event WalletUpdate(address indexed updatedBy, uint256 date, address newWallet);\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor to allow total rate at which tokens are given to wei\n', '    // To set the wallet that the funds are sent token\n', '    // The token that is to be sent (address)\n', '    // ------------------------------------------------------------------------\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0);\n', '        require(wallet != address(0));\n', '        require(address(token) != address(0));\n', '\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allows the contract to be payable and tokens to be returned\n', '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the token that the wrapper is mapped to\n', '    // ------------------------------------------------------------------------\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the admin wallet funds are sent to\n', '    // ------------------------------------------------------------------------\n', '    function wallet() public view returns (address) {\n', '        return _wallet;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the rate of wei to token\n', '    // ------------------------------------------------------------------------\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns how much wei has been raised using this wrapper\n', '    // ------------------------------------------------------------------------\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Sets the rate of wei to token\n', '    // ------------------------------------------------------------------------\n', '    function setRate(uint256 newRate) public onlyOwner{\n', '         _rate = newRate;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Adds/removes addresses from the whitelist to allow buy. This updates if already existing. (owner only)\n', '    // ------------------------------------------------------------------------\n', '    function updateWhitelistAddressStates(address[] memory addressesToUpdate, bool newState) public onlyOwner{\n', '        for(uint i = 0;i<addressesToUpdate.length;i++){\n', '            whitelistedAddresses[addressesToUpdate[i]] = newState;\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Update the wallet to recieve funds (owner only)\n', '    // ------------------------------------------------------------------------\n', '    function updateCollectionWallet(address payable newWallet) public onlyOwner{\n', '        _wallet = newWallet;\n', '        emit WalletUpdate(msg.sender, now, newWallet);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Instead of sending wei to contract we can also pay this fundtion\n', '    // We can also send tokens to another users account this way\n', '    // ------------------------------------------------------------------------\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        // Ensure only KYC verified accounts can buy tokens\n', '        require(whitelistedAddresses[beneficiary] == true, "Beneficiary address has not been verified");\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '        //Calculate token amount to sent\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        //Update total raised\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '        //Send tokens to beneficiary\n', '        _processPurchase(beneficiary, tokens);\n', '        //Update the event log\n', '        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '        //Forwad the funds to admin\n', '        _forwardFunds();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Require purchase isn't burn address and amount is greater than 0\n", '    // ------------------------------------------------------------------------\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal pure {\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Safe transfer the tokens to user\n', '    // ------------------------------------------------------------------------\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Wrapper for the above method\n', '    // ------------------------------------------------------------------------\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get amount of tokens for wei sent\n', '    // ------------------------------------------------------------------------\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Sends funds paid to the contract to the admin account\n', '    // ------------------------------------------------------------------------\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}']