['pragma solidity 0.4.25;\n', '\n', '// File: contracts/sogur/interfaces/IMintingPointTimersManager.sol\n', '\n', '/**\n', ' * @title Minting Point Timers Manager Interface.\n', ' */\n', 'interface IMintingPointTimersManager {\n', '    /**\n', '     * @dev Start a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be either 'running' or 'expired'.\n", '     */\n', '    function start(uint256 _id) external;\n', '\n', '    /**\n', '     * @dev Reset a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be neither 'running' nor 'expired'.\n", '     */\n', '    function reset(uint256 _id) external;\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'running'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'running'.\n", "     * @notice Even if this timestamp is not 'running', it is not necessarily 'expired'.\n", '     */\n', '    function running(uint256 _id) external view returns (bool);\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'expired'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'expired'.\n", "     * @notice Even if this timestamp is not 'expired', it is not necessarily 'running'.\n", '     */\n', '    function expired(uint256 _id) external view returns (bool);\n', '}\n', '\n', '// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Interface.\n', ' */\n', 'interface IContractAddressLocator {\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) external view returns (address);\n', '\n', '    /**\n', '     * @dev Determine whether or not a contract address relates to one of the identifiers.\n', '     * @param _contractAddress The contract address to look for.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the contract address relates to one of the identifiers.\n', '     */\n', '    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n', '}\n', '\n', '// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Holder.\n', ' * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n', ' * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n', ' * @dev Thus, any contract can remain "oblivious" to the replacement of any other contract in the system.\n', ' * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n', ' */\n', 'contract ContractAddressLocatorHolder {\n', '    bytes32 internal constant _IAuthorizationDataSource_ = "IAuthorizationDataSource";\n', '    bytes32 internal constant _ISGNConversionManager_    = "ISGNConversionManager"      ;\n', '    bytes32 internal constant _IModelDataSource_         = "IModelDataSource"        ;\n', '    bytes32 internal constant _IPaymentHandler_          = "IPaymentHandler"            ;\n', '    bytes32 internal constant _IPaymentManager_          = "IPaymentManager"            ;\n', '    bytes32 internal constant _IPaymentQueue_            = "IPaymentQueue"              ;\n', '    bytes32 internal constant _IReconciliationAdjuster_  = "IReconciliationAdjuster"      ;\n', '    bytes32 internal constant _IIntervalIterator_        = "IIntervalIterator"       ;\n', '    bytes32 internal constant _IMintHandler_             = "IMintHandler"            ;\n', '    bytes32 internal constant _IMintListener_            = "IMintListener"           ;\n', '    bytes32 internal constant _IMintManager_             = "IMintManager"            ;\n', '    bytes32 internal constant _IPriceBandCalculator_     = "IPriceBandCalculator"       ;\n', '    bytes32 internal constant _IModelCalculator_         = "IModelCalculator"        ;\n', '    bytes32 internal constant _IRedButton_               = "IRedButton"              ;\n', '    bytes32 internal constant _IReserveManager_          = "IReserveManager"         ;\n', '    bytes32 internal constant _ISagaExchanger_           = "ISagaExchanger"          ;\n', '    bytes32 internal constant _ISogurExchanger_           = "ISogurExchanger"          ;\n', '    bytes32 internal constant _SgnToSgrExchangeInitiator_ = "SgnToSgrExchangeInitiator"          ;\n', '    bytes32 internal constant _IMonetaryModel_               = "IMonetaryModel"              ;\n', '    bytes32 internal constant _IMonetaryModelState_          = "IMonetaryModelState"         ;\n', '    bytes32 internal constant _ISGRAuthorizationManager_ = "ISGRAuthorizationManager";\n', '    bytes32 internal constant _ISGRToken_                = "ISGRToken"               ;\n', '    bytes32 internal constant _ISGRTokenManager_         = "ISGRTokenManager"        ;\n', '    bytes32 internal constant _ISGRTokenInfo_         = "ISGRTokenInfo"        ;\n', '    bytes32 internal constant _ISGNAuthorizationManager_ = "ISGNAuthorizationManager";\n', '    bytes32 internal constant _ISGNToken_                = "ISGNToken"               ;\n', '    bytes32 internal constant _ISGNTokenManager_         = "ISGNTokenManager"        ;\n', '    bytes32 internal constant _IMintingPointTimersManager_             = "IMintingPointTimersManager"            ;\n', '    bytes32 internal constant _ITradingClasses_          = "ITradingClasses"         ;\n', '    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = "IWalletsTLValueConverter"       ;\n', '    bytes32 internal constant _BuyWalletsTradingDataSource_       = "BuyWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _SellWalletsTradingDataSource_       = "SellWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = "WalletsTLSGNTokenManager"         ;\n', '    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = "BuyWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = "SellWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _IETHConverter_             = "IETHConverter"   ;\n', '    bytes32 internal constant _ITransactionLimiter_      = "ITransactionLimiter"     ;\n', '    bytes32 internal constant _ITransactionManager_      = "ITransactionManager"     ;\n', '    bytes32 internal constant _IRateApprover_      = "IRateApprover"     ;\n', '    bytes32 internal constant _SGAToSGRInitializer_      = "SGAToSGRInitializer"     ;\n', '\n', '    IContractAddressLocator private contractAddressLocator;\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator) internal {\n', '        require(_contractAddressLocator != address(0), "locator is illegal");\n', '        contractAddressLocator = _contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address locator.\n', '     * @return The contract address locator.\n', '     */\n', '    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n', '        return contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n', '        return contractAddressLocator.getContractAddress(_identifier);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Determine whether or not the sender relates to one of the identifiers.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the sender relates to one of the identifiers.\n', '     */\n', '    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n', '        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n', '    }\n', '\n', '    /**\n', '     * @dev Verify that the caller is mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     */\n', '    modifier only(bytes32 _identifier) {\n', '        require(msg.sender == getContractAddress(_identifier), "caller is illegal");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/sogur/MintingPointTimersManager.sol\n', '\n', '/**\n', ' * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n', ' */\n', '\n', '/**\n', ' * @title Minting Point Timers Manager.\n', ' */\n', 'contract MintingPointTimersManager is IMintingPointTimersManager, ContractAddressLocatorHolder {\n', '    string public constant VERSION = "1.0.1";\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Timestamp {\n', '        bool valid;\n', '        uint256 value;\n', '    }\n', '\n', '    uint256 public timeout;\n', '    Timestamp[95] public timestamps;\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', "     * @param _timeout The number of seconds elapsed between 'running' and 'expired'.\n", "     * @notice Each timestamp can be in either one of 3 states: 'running', 'expired' or 'invalid'.\n", '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator, uint256 _timeout) ContractAddressLocatorHolder(_contractAddressLocator) public {\n', '        timeout = _timeout;\n', '    }\n', '\n', '    /**\n', '     * @dev Start a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be either 'running' or 'expired'.\n", '     */\n', '    function start(uint256 _id) external only(_IIntervalIterator_) {\n', '        Timestamp storage timestamp = timestamps[_id];\n', '        assert(!timestamp.valid);\n', '        timestamp.valid = true;\n', '        timestamp.value = time();\n', '    }\n', '\n', '    /**\n', '     * @dev Reset a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be neither 'running' nor 'expired'.\n", '     */\n', '    function reset(uint256 _id) external only(_IIntervalIterator_) {\n', '        Timestamp storage timestamp = timestamps[_id];\n', '        assert(timestamp.valid);\n', '        timestamp.valid = false;\n', '        timestamp.value = 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'running'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'running'.\n", "     * @notice Even if this timestamp is not 'running', it is not necessarily 'expired'.\n", '     */\n', '    function running(uint256 _id) external view returns (bool) {\n', '        Timestamp storage timestamp = timestamps[_id];\n', '        if (!timestamp.valid)\n', '            return false;\n', '        return timestamp.value.add(timeout) >= time();\n', '    }\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'expired'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'expired'.\n", "     * @notice Even if this timestamp is not 'expired', it is not necessarily 'running'.\n", '     */\n', '    function expired(uint256 _id) external view returns (bool) {\n', '        Timestamp storage timestamp = timestamps[_id];\n', '        if (!timestamp.valid)\n', '            return false;\n', '        return timestamp.value.add(timeout) < time();\n', '    }\n', '\n', '    /**\n', '     * @dev Return the current time (equivalent to `block.timestamp`).\n', '     * @notice This function can be overridden in order to perform artificial time-simulation.\n', '     */\n', '    function time() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '}']