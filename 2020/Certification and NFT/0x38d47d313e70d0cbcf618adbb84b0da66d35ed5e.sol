['pragma solidity ^0.6.12;\n', '\n', '\n', 'contract LnAdmin {\n', '    address public admin;\n', '    address public candidate;\n', '\n', '    constructor(address _admin) public {\n', '        require(_admin != address(0), "admin address cannot be 0");\n', '        admin = _admin;\n', '        emit AdminChanged(address(0), _admin);\n', '    }\n', '\n', '    function setCandidate(address _candidate) external onlyAdmin {\n', '        address old = candidate;\n', '        candidate = _candidate;\n', '        emit candidateChanged( old, candidate);\n', '    }\n', '\n', '    function becomeAdmin( ) external {\n', '        require( msg.sender == candidate, "Only candidate can become admin");\n', '        address old = admin;\n', '        admin = candidate;\n', '        emit AdminChanged( old, admin ); \n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require( (msg.sender == admin), "Only the contract admin can perform this action");\n', '        _;\n', '    }\n', '\n', '    event candidateChanged(address oldCandidate, address newCandidate );\n', '    event AdminChanged(address oldAdmin, address newAdmin);\n', '}\n', '\n', 'contract LnEndAdmin {\n', '    constructor() public {\n', '\n', '    }\n', '\n', '    function becomeAdmin(address target) external {\n', '        LnAdmin(target).becomeAdmin();\n', '    }\n', '}']