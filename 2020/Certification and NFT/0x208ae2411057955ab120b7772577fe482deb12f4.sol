['/* Discussion:\n', ' * https://github.com/b-u-i-d-l/unifi\n', ' */\n', '/* Description:\n', ' * When a stablecoin loses value, the Uniswap Tier pools rebalance to an uneven disparity (≠ 50/50). If the stablecoin totally fails, the other stablecoins effectively pump in correlation.\n', ' * \n', ' * DFO Debit resolves this issue on-chain by rebalancing uSD, creating debt which the UniFi DFO then pays off by minting UniFi. Let’s look at how this plays out, step by step:\n', ' * \n', ' * 1 - A stablecoin collateralized by uSD loses value or fails altogether.\n', ' * \n', ' * 2 - $UniFi holders vote to remove the tiers containing the failed stablecoin from the whitelist.The uSD supply becomes grater than the supply of the collateralized pooled stablecoins.\n', ' * \n', ' * 3 - To restore 1:1 equilibrium, anyone holding uSD can burn it to receive new UniFi, minted at a 50% discount of the uSD/UniFi Uniswap pool mid-price ratio.\n', ' * \n', ' * The goal of $UniFi holders, which aligns with their self-interest, is to ensure uSD’s security. Thus there is an economic disincentive to whitelist insecure stablecoins.\n', ' */\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.0;\n', '\n', 'contract MintNewVotingTokensForStableCoinFunctionality {\n', '\n', '    function onStart(address, address) public {\n', '        IStateHolder stateHolder = IStateHolder(IMVDProxy(msg.sender).getStateHolderAddress());\n', '        address stablecoinauthorized = 0x84841e552A021224de716b7Be89747bb2D62D642;\n', '        stateHolder.setBool(_toStateHolderKey("stablecoin.authorized", _toString(stablecoinauthorized)), true);\n', '    }\n', '\n', '    function onStop(address) public {\n', '        IStateHolder stateHolder = IStateHolder(IMVDProxy(msg.sender).getStateHolderAddress());\n', '        address stablecoinauthorized = 0x84841e552A021224de716b7Be89747bb2D62D642;\n', '        stateHolder.clear(_toStateHolderKey("stablecoin.authorized", _toString(stablecoinauthorized)));\n', '    }\n', '\n', '    function mintNewVotingTokensForStableCoin(address sender, uint256, uint256 amountToMint, address receiver) public {\n', '        IMVDProxy proxy = IMVDProxy(msg.sender);\n', '\n', '        require(IStateHolder(proxy.getStateHolderAddress()).getBool(_toStateHolderKey("stablecoin.authorized", _toString(sender))), "Unauthorized action!");\n', '\n', '        IERC20 token = IERC20(proxy.getToken());\n', '        uint256 proxyBalanceOf = token.balanceOf(address(proxy));\n', '\n', '        token.mint(amountToMint);\n', '        proxy.flushToWallet(address(token), false, 0);\n', '\n', '        proxy.transfer(receiver, amountToMint, address(token));\n', '\n', '        if(proxyBalanceOf > 0) {\n', '            proxy.transfer(address(proxy), proxyBalanceOf, address(token));\n', '        }\n', '    }\n', '\n', '    function _toStateHolderKey(string memory a, string memory b) private pure returns(string memory) {\n', '        return _toLowerCase(string(abi.encodePacked(a, "_", b)));\n', '    }\n', '\n', '    function _toString(address _addr) private pure returns(string memory) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '\n', '    function _toLowerCase(string memory str) private pure returns(string memory) {\n', '        bytes memory bStr = bytes(str);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\n', '        }\n', '        return string(bStr);\n', '    }\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getToken() external view returns(address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function transfer(address receiver, uint256 value, address token) external;\n', '    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '    function setBool(string calldata varName, bool val) external returns(bool);\n', '    function getBool(string calldata varName) external view returns (bool);\n', '}\n', '\n', 'interface IERC20 {\n', '    function mint(uint256 amount) external;\n', '    function balanceOf(address account) external view returns (uint256);\n', '}']