['// File: contracts/zeppelin/upgradable/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance is already initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(address) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard is Initializable {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    function initialize() public initializer {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: no reentrant allowed");\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account doesn\'t have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/upgradable/access/roles/UpgradablePauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract UpgradablePauserRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isPauser(sender)) {\n', '            _addPauser(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(_msgSender()), "PauserRole: caller doesn\'t have the role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(_msgSender());\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/upgradable/lifecycle/UpgradablePausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract UpgradablePausable is Initializable, Context, UpgradablePauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        UpgradablePauserRole.initialize(sender);\n', '\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract UpgradableOwnable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin/introspection/IERC1820Registry.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the global ERC1820 Registry, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n', ' * implementers for interfaces in this registry, as well as query support.\n', ' *\n', ' * Implementers may be shared by multiple accounts, and can also implement more\n', ' * than a single interface for each account. Contracts can implement interfaces\n', ' * for themselves, but externally-owned accounts (EOA) must delegate this to a\n', ' * contract.\n', ' *\n', ' * {IERC165} interfaces can also be queried via the registry.\n', ' *\n', ' * For an in-depth explanation and source code analysis, see the EIP text.\n', ' */\n', 'interface IERC1820Registry {\n', '    /**\n', '     * @dev Sets `newManager` as the manager for `account`. A manager of an\n', '     * account is able to set interface implementers for it.\n', '     *\n', '     * By default, each account is its own manager. Passing a value of `0x0` in\n', '     * `newManager` will reset the manager to this initial state.\n', '     *\n', '     * Emits a {ManagerChanged} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     */\n', '    function setManager(address account, address newManager) external;\n', '\n', '    /**\n', '     * @dev Returns the manager for `account`.\n', '     *\n', '     * See {setManager}.\n', '     */\n', '    function getManager(address account) external view returns (address);\n', '\n', '    /**\n', "     * @dev Sets the `implementer` contract as `account`'s implementer for\n", '     * `interfaceHash`.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     * The zero address can also be used in `implementer` to remove an old one.\n', '     *\n', '     * See {interfaceHash} to learn how these are created.\n', '     *\n', '     * Emits an {InterfaceImplementerSet} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n', '     * end in 28 zeroes).\n', '     * - `implementer` must implement {IERC1820Implementer} and return true when\n', '     * queried for support, unless `implementer` is the caller. See\n', '     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n', '     */\n', '    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n', '\n', '    /**\n', '     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n', '     * implementer is registered, returns the zero address.\n', '     *\n', '     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n', '     * zeroes), `account` will be queried for support of it.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     */\n', '    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n', '     * corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n', '     */\n', '    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n', '\n', '    /**\n', '     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n', '     *  @param account Address of the contract for which to update the cache.\n', '     *  @param interfaceId ERC165 interface for which to update the cache.\n', '     */\n', '    function updateERC165Cache(address account, bytes4 interfaceId) external;\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not.\n', '     *  If the result is not cached a direct lookup on the contract address is performed.\n', '     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n', '     *  {updateERC165Cache} with the contract address.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n', '\n', '    event ManagerChanged(address indexed account, address indexed newManager);\n', '}\n', '\n', '// File: contracts/zeppelin/token/ERC777/IERC777Recipient.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n', ' *\n', ' * Accounts can be notified of `IERC777` tokens being sent to them by having a\n', ' * contract implement this interface (contract holders can be their own\n', ' * implementer) and registering it on the\n', ' * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\n', ' *\n', ' * See `IERC1820Registry` and `ERC1820Implementer`.\n', ' */\n', 'interface IERC777Recipient {\n', '    /**\n', '     * @dev Called by an `IERC777` token contract whenever tokens are being\n', '     * moved or created into a registered account (`to`). The type of operation\n', '     * is conveyed by `from` being the zero address or not.\n', '     *\n', "     * This call occurs _after_ the token contract's state is updated, so\n", '     * `IERC777.balanceOf`, etc., can be used to query the post-operation state.\n', '     *\n', '     * This function may revert to prevent the operation from being executed.\n', '     */\n', '    function tokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    ) external;\n', '}\n', '\n', '// File: contracts/zeppelin/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/IBridge_v1.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IBridge_v1 {\n', '    function version() external pure returns (string memory);\n', '\n', '    function getFeePercentage() external view returns(uint);\n', '\n', '    function calcMaxWithdraw() external view returns (uint);\n', '\n', '    /**\n', '     * ERC-20 tokens approve and transferFrom pattern\n', '     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n', '     */\n', '    function receiveTokens(address tokenToUse, uint256 amount) external returns(bool);\n', '\n', '    /**\n', '     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n', '     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n', '     */\n', '    function tokensReceived (\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    ) external;\n', '\n', '    /**\n', '     * Accepts the transaction from the other chain that was voted and sent by the federation contract\n', '     */\n', '    function acceptTransfer(\n', '        address originalTokenAddress,\n', '        address receiver,\n', '        uint256 amount,\n', '        string calldata symbol,\n', '        bytes32 blockHash,\n', '        bytes32 transactionHash,\n', '        uint32 logIndex,\n', '        uint8 decimals,\n', '        uint256 granularity\n', '    ) external returns(bool);\n', '\n', '    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes _userData,\n', '        uint8 _decimals, uint256 _granularity);\n', '    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol, uint256 _granularity);\n', '    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount, uint8 _decimals, uint256 _granularity,\n', '        uint256 _formattedAmount, uint8 _calculatedDecimals, uint256 _calculatedGranularity);\n', '    event FeePercentageChanged(uint256 _amount);\n', '}\n', '\n', '// File: contracts/ISideToken.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface ISideToken {\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function granularity() external view returns (uint256);\n', '\n', '    function burn(uint256 amount, bytes calldata data) external;\n', '\n', '    function mint(address account, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function send(address recipient, uint256 amount, bytes calldata data) external;\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '// File: contracts/ISideTokenFactory.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface ISideTokenFactory {\n', '\n', '    function createSideToken(string calldata name, string calldata symbol, uint256 granularity) external returns(address);\n', '\n', '    event SideTokenCreated(address indexed sideToken, string symbol, uint256 granularity);\n', '}\n', '\n', '// File: contracts/zeppelin/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/AllowTokens.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', 'contract AllowTokens is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address constant private NULL_ADDRESS = address(0);\n', '\n', '    mapping (address => bool) public allowedTokens;\n', '    bool private validateAllowedTokens;\n', '    uint256 private maxTokensAllowed;\n', '    uint256 private minTokensAllowed;\n', '    uint256 public dailyLimit;\n', '\n', '    event AllowedTokenAdded(address indexed _tokenAddress);\n', '    event AllowedTokenRemoved(address indexed _tokenAddress);\n', '    event AllowedTokenValidation(bool _enabled);\n', '    event MaxTokensAllowedChanged(uint256 _maxTokens);\n', '    event MinTokensAllowedChanged(uint256 _minTokens);\n', '    event DailyLimitChanged(uint256 dailyLimit);\n', '\n', '    modifier notNull(address _address) {\n', '        require(_address != NULL_ADDRESS, "AllowTokens: Address cannot be empty");\n', '        _;\n', '    }\n', '\n', '    constructor(address _manager) public  {\n', '        transferOwnership(_manager);\n', '        validateAllowedTokens = true;\n', '        maxTokensAllowed = 10000 ether;\n', '        minTokensAllowed = 1 ether;\n', '        dailyLimit = 100000 ether;\n', '    }\n', '\n', '    function isValidatingAllowedTokens() external view returns(bool) {\n', '        return validateAllowedTokens;\n', '    }\n', '\n', '    function getMaxTokensAllowed() external view returns(uint256) {\n', '        return maxTokensAllowed;\n', '    }\n', '\n', '    function getMinTokensAllowed() external view returns(uint256) {\n', '        return minTokensAllowed;\n', '    }\n', '\n', '    function allowedTokenExist(address token) private view notNull(token) returns (bool) {\n', '        return allowedTokens[token];\n', '    }\n', '\n', '    function isTokenAllowed(address token) public view notNull(token) returns (bool) {\n', '        if (validateAllowedTokens) {\n', '            return allowedTokenExist(token);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function addAllowedToken(address token) external onlyOwner {\n', '        require(!allowedTokenExist(token), "AllowTokens: Token already exists in allowedTokens");\n', '        allowedTokens[token] = true;\n', '        emit AllowedTokenAdded(token);\n', '    }\n', '\n', '    function removeAllowedToken(address token) external onlyOwner {\n', '        require(allowedTokenExist(token), "AllowTokens: Token does not exis  in allowedTokenst");\n', '        allowedTokens[token] = false;\n', '        emit AllowedTokenRemoved(token);\n', '    }\n', '\n', '    function enableAllowedTokensValidation() external onlyOwner {\n', '        validateAllowedTokens = true;\n', '        emit AllowedTokenValidation(validateAllowedTokens);\n', '    }\n', '\n', '    function disableAllowedTokensValidation() external onlyOwner {\n', '        // Before disabling Allowed Tokens Validations some kind of contract validation system\n', '        // should be implemented on the Bridge for the methods receiveTokens, tokenFallback and tokensReceived\n', '        validateAllowedTokens = false;\n', '        emit AllowedTokenValidation(validateAllowedTokens);\n', '    }\n', '\n', '    function setMaxTokensAllowed(uint256 maxTokens) external onlyOwner {\n', '        require(maxTokens >= minTokensAllowed, "AllowTokens: Max Tokens should be equal or bigger than Min Tokens");\n', '        maxTokensAllowed = maxTokens;\n', '        emit MaxTokensAllowedChanged(maxTokensAllowed);\n', '    }\n', '\n', '    function setMinTokensAllowed(uint256 minTokens) external onlyOwner {\n', '        require(maxTokensAllowed >= minTokens, "AllowTokens: Min Tokens should be equal or smaller than Max Tokens");\n', '        minTokensAllowed = minTokens;\n', '        emit MinTokensAllowedChanged(minTokensAllowed);\n', '    }\n', '\n', '    function changeDailyLimit(uint256 _dailyLimit) external onlyOwner {\n', '        require(_dailyLimit >= maxTokensAllowed, "AllowTokens: Daily Limit should be equal or bigger than Max Tokens");\n', '        dailyLimit = _dailyLimit;\n', '        emit DailyLimitChanged(_dailyLimit);\n', '    }\n', '\n', '    // solium-disable-next-line max-len\n', '    function isValidTokenTransfer(address tokenToUse, uint amount, uint spentToday, bool isSideToken) external view returns (bool) {\n', '        if(amount > maxTokensAllowed)\n', '            return false;\n', '        if(amount < minTokensAllowed)\n', '            return false;\n', '        if (spentToday + amount > dailyLimit || spentToday + amount < spentToday)\n', '            return false;\n', '        if(!isSideToken && !isTokenAllowed(tokenToUse))\n', '            return false;\n', '        return true;\n', '    }\n', '\n', '    function calcMaxWithdraw(uint spentToday) external view returns (uint) {\n', '        uint maxWithrow = dailyLimit - spentToday;\n', '        if (dailyLimit < spentToday)\n', '            return 0;\n', '        if(maxWithrow > maxTokensAllowed)\n', '            maxWithrow = maxTokensAllowed;\n', '        return maxWithrow;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin/token/ERC777/IERC777.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777Token standard as defined in the EIP.\n', ' *\n', ' * This contract uses the\n', ' * [ERC1820 registry standard](https://eips.ethereum.org/EIPS/eip-1820) to let\n', ' * token holders and recipients react to token movements by using setting implementers\n', ' * for the associated interfaces in said registry. See `IERC1820Registry` and\n', ' * `ERC1820Implementer`.\n', ' */\n', 'interface IERC777 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the smallest part of the token that is not divisible. This\n', '     * means all token operations (creation, movement and destruction) must have\n', '     * amounts that are a multiple of this number.\n', '     *\n', '     * For most token contracts, this value will equal 1.\n', '     */\n', '    function granularity() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by an account (`owner`).\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * If send or receive hooks are registered for the caller and `recipient`,\n', '     * the corresponding functions will be called with `data` and empty\n', '     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\n', '     *\n', '     * Emits a `Sent` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - the caller must have at least `amount` tokens.\n', '     * - `recipient` cannot be the zero address.\n', '     * - if `recipient` is a contract, it must implement the `tokensReceived`\n', '     * interface.\n', '     */\n', '    function send(address recipient, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from the caller's account, reducing the\n", '     * total supply.\n', '     *\n', '     * If a send hook is registered for the caller, the corresponding function\n', '     * will be called with `data` and empty `operatorData`. See `IERC777Sender`.\n', '     *\n', '     * Emits a `Burned` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - the caller must have at least `amount` tokens.\n', '     */\n', '    function burn(uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev Returns true if an account is an operator of `tokenHolder`.\n', '     * Operators can send and burn tokens on behalf of their owners. All\n', '     * accounts are their own operator.\n', '     *\n', '     * See `operatorSend` and `operatorBurn`.\n', '     */\n', '    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Make an account an operator of the caller.\n', '     *\n', '     * See `isOperatorFor`.\n', '     *\n', '     * Emits an `AuthorizedOperator` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `operator` cannot be calling address.\n', '     */\n', '    function authorizeOperator(address operator) external;\n', '\n', '    /**\n', '     * @dev Make an account an operator of the caller.\n', '     *\n', '     * See `isOperatorFor` and `defaultOperators`.\n', '     *\n', '     * Emits a `RevokedOperator` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `operator` cannot be calling address.\n', '     */\n', '    function revokeOperator(address operator) external;\n', '\n', '    /**\n', '     * @dev Returns the list of default operators. These accounts are operators\n', '     * for all token holders, even if `authorizeOperator` was never called on\n', '     * them.\n', '     *\n', '     * This list is immutable, but individual holders may revoke these via\n', '     * `revokeOperator`, in which case `isOperatorFor` will return false.\n', '     */\n', '    function defaultOperators() external view returns (address[] memory);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n', '     * be an operator of `sender`.\n', '     *\n', '     * If send or receive hooks are registered for `sender` and `recipient`,\n', '     * the corresponding functions will be called with `data` and\n', '     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\n', '     *\n', '     * Emits a `Sent` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `sender` must have at least `amount` tokens.\n', '     * - the caller must be an operator for `sender`.\n', '     * - `recipient` cannot be the zero address.\n', '     * - if `recipient` is a contract, it must implement the `tokensReceived`\n', '     * interface.\n', '     */\n', '    function operatorSend(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        bytes calldata operatorData\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the total supply.\n', '     * The caller must be an operator of `account`.\n', '     *\n', '     * If a send hook is registered for `account`, the corresponding function\n', '     * will be called with `data` and `operatorData`. See `IERC777Sender`.\n', '     *\n', '     * Emits a `Burned` event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     * - the caller must be an operator for `account`.\n', '     */\n', '    function operatorBurn(\n', '        address account,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        bytes calldata operatorData\n', '    ) external;\n', '\n', '    event Sent(\n', '        address indexed operator,\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount,\n', '        bytes data,\n', '        bytes operatorData\n', '    );\n', '\n', '    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n', '\n', '    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n', '\n', '    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n', '\n', '    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'library Utils {\n', '    using SafeMath for uint256;\n', '\n', '    IERC1820Registry constant private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '    // keccak256("ERC777Token")\n', '    bytes32 constant private TOKENS_ERC777_HASH = 0xac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054;\n', '\n', '    function getTokenInfo(address tokenToUse) external view returns (uint8 decimals, uint256 granularity, string memory symbol) {\n', '        decimals = getDecimals(tokenToUse);\n', '        granularity = getGranularity(tokenToUse);\n', '        symbol = getSymbol(tokenToUse);\n', '    }\n', '\n', '    function getSymbol(address tokenToUse) public view returns (string memory symbol) {\n', '        //support 32 bytes or string symbol\n', '        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature("symbol()"));\n', '        require(success, "Utils: Token hasn\'t symbol()");\n', '        if (data.length == 32) {\n', '            symbol = bytes32ToString(abi.decode(data, (bytes32)));\n', '        } else {\n', '            symbol = abi.decode(data, (string));\n', '        }\n', '        require(bytes(symbol).length > 0, "Utils: Token empty symbol");\n', '        return symbol;\n', '    }\n', '\n', '    function getDecimals(address tokenToUse) public view returns (uint8) {\n', '        //support decimals as uint256 or uint8\n', '        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature("decimals()"));\n', '        require(success, "Utils: No decimals");\n', '        require(data.length == 32, "Utils: Decimals not uint<M>");\n', '        // uint<M>: enc(X) is the big-endian encoding of X,\n', '        //padded on the higher-order (left) side with zero-bytes such that the length is 32 bytes.\n', '        uint256 decimalsDecoded = abi.decode(data, (uint256));\n', '        require(decimalsDecoded <= 18, "Utils: Decimals not in 0 to 18");\n', '        return uint8(decimalsDecoded);\n', '    }\n', '\n', '    function getGranularity(address tokenToUse) public view returns (uint256 granularity) {\n', '        granularity = 1;\n', '        //support granularity if ERC777\n', '        address implementer = _erc1820.getInterfaceImplementer(tokenToUse, TOKENS_ERC777_HASH);\n', '        if (implementer != address(0)) {\n', '            granularity = IERC777(implementer).granularity();\n', '            //Verify granularity is power of 10 to keep it compatible with ERC20 decimals\n', '            granularityToDecimals(granularity);\n', '        }\n', '        return granularity;\n', '    }\n', '\n', '    /* bytes32 (fixed-size array) to string (dynamically-sized array) */\n', '    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\n', '        uint8 i = 0;\n', '        while(i < 32 && _bytes32[i] != 0) {\n', '            i++;\n', '        }\n', '        bytes memory bytesArray = new bytes(i);\n', '        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\n', '            bytesArray[i] = _bytes32[i];\n', '        }\n', '        return string(bytesArray);\n', '    }\n', '\n', '    function decimalsToGranularity(uint8 decimals) public pure returns (uint256) {\n', '        require(decimals <= 18, "Utils: Decimals not in 0 to 18");\n', '        return uint256(10)**(18-decimals);\n', '    }\n', '\n', '    function granularityToDecimals(uint256 granularity) public pure returns (uint8) {\n', '        if(granularity == 1) return 18;\n', '        if(granularity == 10) return 17;\n', '        if(granularity == 100) return 16;\n', '        if(granularity == 1000) return 15;\n', '        if(granularity == 10000) return 14;\n', '        if(granularity == 100000) return 13;\n', '        if(granularity == 1000000) return 12;\n', '        if(granularity == 10000000) return 11;\n', '        if(granularity == 100000000) return 10;\n', '        if(granularity == 1000000000) return 9;\n', '        if(granularity == 10000000000) return 8;\n', '        if(granularity == 100000000000) return 7;\n', '        if(granularity == 1000000000000) return 6;\n', '        if(granularity == 10000000000000) return 5;\n', '        if(granularity == 100000000000000) return 4;\n', '        if(granularity == 1000000000000000) return 3;\n', '        if(granularity == 10000000000000000) return 2;\n', '        if(granularity == 100000000000000000) return 1;\n', '        if(granularity == 1000000000000000000) return 0;\n', '        require(false, "Utils: invalid granularity");\n', '    }\n', '\n', '    function calculateGranularityAndAmount(uint8 decimals, uint256 granularity, uint256 amount) external pure\n', '        returns(uint256 calculatedGranularity, uint256 formattedAmount) {\n', '\n', '        if(decimals == 18) {\n', '            //tokenAddress is a ERC20 with 18 decimals should have 1 granularity\n', '            //tokenAddress is a ERC777 token we give the same granularity\n', '            calculatedGranularity = granularity;\n', '            formattedAmount = amount;\n', '        } else {\n', '            //tokenAddress is a ERC20 with other than 18 decimals\n', '            calculatedGranularity = decimalsToGranularity(decimals);\n', '            formattedAmount = amount.mul(calculatedGranularity);\n', '        }\n', '    }\n', '\n', '    function calculateDecimalsAndAmount(address tokenAddress, uint256 granularity, uint256 amount)\n', '        external view returns (uint8 calculatedDecimals, uint256 formattedAmount) {\n', '        uint8 tokenDecimals = getDecimals(tokenAddress);\n', '        //As side tokens are ERC777 we need to convert granularity to decimals\n', '        calculatedDecimals = granularityToDecimals(granularity);\n', '        require(tokenDecimals == calculatedDecimals, "Utils: Token decimals differ from decimals obtained from granularity");\n', '        formattedAmount = amount.div(granularity);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Bridge_v1.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// Import base Initializable contract\n', '\n', '// Import interface and library from OpenZeppelin contracts\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Bridge_v1 is Initializable, IBridge_v1, IERC777Recipient, UpgradablePausable, UpgradableOwnable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    address constant private NULL_ADDRESS = address(0);\n', '    bytes32 constant private NULL_HASH = bytes32(0);\n', '    IERC1820Registry constant private erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '\n', '    address private federation;\n', '    uint256 private feePercentage;\n', '    string public symbolPrefix;\n', '    uint256 public lastDay;\n', '    uint256 public spentToday;\n', '\n', '    mapping (address => ISideToken) public mappedTokens; // OirignalToken => SideToken\n', '    mapping (address => address) public originalTokens; // SideToken => OriginalToken\n', '    mapping (address => bool) public knownTokens; // OriginalToken => true\n', '    mapping(bytes32 => bool) public processed; // ProcessedHash => true\n', '    AllowTokens public allowTokens;\n', '    ISideTokenFactory public sideTokenFactory;\n', '    //Bridge_v1 variables\n', '    bool public isUpgrading;\n', '    uint256 constant public feePercentageDivider = 10000; // Porcentage with up to 2 decimals\n', '\n', '    event FederationChanged(address _newFederation);\n', '    event SideTokenFactoryChanged(address _newSideTokenFactory);\n', '    event Upgrading(bool isUpgrading);\n', '\n', '    function initialize(\n', '        address _manager,\n', '        address _federation,\n', '        address _allowTokens,\n', '        address _sideTokenFactory,\n', '        string memory _symbolPrefix\n', '    ) public initializer {\n', '        UpgradableOwnable.initialize(_manager);\n', '        UpgradablePausable.initialize(_manager);\n', '        symbolPrefix = _symbolPrefix;\n', '        allowTokens = AllowTokens(_allowTokens);\n', '        _changeSideTokenFactory(_sideTokenFactory);\n', '        _changeFederation(_federation);\n', '        //keccak256("ERC777TokensRecipient")\n', '        erc1820.setInterfaceImplementer(address(this), 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b, address(this));\n', '    }\n', '\n', '    function version() external pure returns (string memory) {\n', '        return "v1";\n', '    }\n', '\n', '    modifier onlyFederation() {\n', '        require(msg.sender == federation, "Bridge: Sender not Federation");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotUpgrading() {\n', '        require(!isUpgrading, "Bridge: Upgrading");\n', '        _;\n', '    }\n', '\n', '    function acceptTransfer(\n', '        address tokenAddress,\n', '        address receiver,\n', '        uint256 amount,\n', '        string calldata symbol,\n', '        bytes32 blockHash,\n', '        bytes32 transactionHash,\n', '        uint32 logIndex,\n', '        uint8 decimals,\n', '        uint256 granularity\n', '    ) external onlyFederation whenNotPaused nonReentrant returns(bool) {\n', '        require(tokenAddress != NULL_ADDRESS, "Bridge: Token is null");\n', '        require(receiver != NULL_ADDRESS, "Bridge: Receiver is null");\n', '        require(amount > 0, "Bridge: Amount 0");\n', '        require(bytes(symbol).length > 0, "Bridge: Empty symbol");\n', '        require(blockHash != NULL_HASH, "Bridge: BlockHash is null");\n', '        require(transactionHash != NULL_HASH, "Bridge: Transaction is null");\n', '        require(decimals <= 18, "Bridge: Decimals bigger 18");\n', '        require(Utils.granularityToDecimals(granularity) <= 18, "Bridge: invalid granularity");\n', '\n', '        _processTransaction(blockHash, transactionHash, receiver, amount, logIndex);\n', '\n', '        if (knownTokens[tokenAddress]) {\n', '            _acceptCrossBackToToken(receiver, tokenAddress, decimals, granularity, amount);\n', '        } else {\n', '            _acceptCrossToSideToken(receiver, tokenAddress, decimals, granularity, amount, symbol);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _acceptCrossToSideToken(\n', '        address receiver,\n', '        address tokenAddress,\n', '        uint8 decimals,\n', '        uint256 granularity,\n', '        uint256 amount,\n', '        string memory symbol\n', '    ) private {\n', '\n', '        (uint256 calculatedGranularity,uint256 formattedAmount) = Utils.calculateGranularityAndAmount(decimals, granularity, amount);\n', '        ISideToken sideToken = mappedTokens[tokenAddress];\n', '        if (address(sideToken) == NULL_ADDRESS) {\n', '            sideToken = _createSideToken(tokenAddress, symbol, calculatedGranularity);\n', '        } else {\n', '            require(calculatedGranularity == sideToken.granularity(), "Bridge: Granularity differ from side token");\n', '        }\n', '        sideToken.mint(receiver, formattedAmount, "", "");\n', '        emit AcceptedCrossTransfer(tokenAddress, receiver, amount, decimals, granularity, formattedAmount, 18, calculatedGranularity);\n', '    }\n', '\n', '    function _acceptCrossBackToToken(address receiver, address tokenAddress, uint8 decimals, uint256 granularity, uint256 amount) private {\n', '        require(decimals == 18, "Bridge: Invalid decimals cross back");\n', '        //As side tokens are ERC777 we need to convert granularity to decimals\n', '        (uint8 calculatedDecimals, uint256 formattedAmount) = Utils.calculateDecimalsAndAmount(tokenAddress, granularity, amount);\n', '        IERC20(tokenAddress).safeTransfer(receiver, formattedAmount);\n', '        emit AcceptedCrossTransfer(tokenAddress, receiver, amount, decimals, granularity, formattedAmount, calculatedDecimals, 1);\n', '    }\n', '\n', '    /**\n', '     * ERC-20 tokens approve and transferFrom pattern\n', '     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n', '     */\n', '    function receiveTokens(address tokenToUse, uint256 amount) external whenNotUpgrading whenNotPaused nonReentrant returns(bool) {\n', '        address sender = _msgSender();\n', '        require(!sender.isContract(), "Bridge: Sender can\'t be a contract");\n', '        //Transfer the tokens on IERC20, they should be already Approved for the bridge Address to use them\n', '        IERC20(tokenToUse).safeTransferFrom(_msgSender(), address(this), amount);\n', '        crossTokens(tokenToUse, sender, amount, "");\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n', '     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n', '     */\n', '    function tokensReceived (\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint amount,\n', '        bytes calldata userData,\n', '        bytes calldata\n', '    ) external whenNotPaused whenNotUpgrading {\n', '        //Hook from ERC777address\n', '        if(operator == address(this)) return; // Avoid loop from bridge calling to ERC77transferFrom\n', '        require(to == address(this), "Bridge: Not to address");\n', '        address tokenToUse = _msgSender();\n', '        //This can only be used with trusted contracts\n', '        crossTokens(tokenToUse, from, amount, userData);\n', '    }\n', '\n', '    function crossTokens(address tokenToUse, address from, uint256 amount, bytes memory userData) private {\n', '        bool isASideToken = originalTokens[tokenToUse] != NULL_ADDRESS;\n', '        //Send the payment to the MultiSig of the Federation\n', '        uint256 fee = 0;\n', '        if(feePercentage > 0) {\n', '            fee = amount.mul(feePercentage).div(feePercentageDivider);\n', '            IERC20(tokenToUse).safeTransfer(owner(), fee);\n', '        }\n', '        uint256 amountMinusFees = amount - fee;\n', '        if (isASideToken) {\n', '            verifyWithAllowTokens(tokenToUse, amount, isASideToken);\n', '            //Side Token Crossing\n', '            ISideToken(tokenToUse).burn(amountMinusFees, userData);\n', '            // solium-disable-next-line max-len\n', '            emit Cross(originalTokens[tokenToUse], from, amountMinusFees, ISideToken(tokenToUse).symbol(), userData, ISideToken(tokenToUse).decimals(), ISideToken(tokenToUse).granularity());\n', '        } else {\n', '            //Main Token Crossing\n', '            knownTokens[tokenToUse] = true;\n', '            (uint8 decimals, uint256 granularity, string memory symbol) = Utils.getTokenInfo(tokenToUse);\n', '            uint formattedAmount = amount;\n', '            if(decimals != 18) {\n', '                formattedAmount = amount.mul(uint256(10)**(18-decimals));\n', '            }\n', '            //We consider the amount before fees converted to 18 decimals to check the limits\n', '            verifyWithAllowTokens(tokenToUse, formattedAmount, isASideToken);\n', '            emit Cross(tokenToUse, from, amountMinusFees, symbol, userData, decimals, granularity);\n', '        }\n', '    }\n', '\n', '    function _createSideToken(address token, string memory symbol, uint256 granularity) private returns (ISideToken sideToken){\n', '        string memory newSymbol = string(abi.encodePacked(symbolPrefix, symbol));\n', '        address sideTokenAddress = sideTokenFactory.createSideToken(newSymbol, newSymbol, granularity);\n', '        sideToken = ISideToken(sideTokenAddress);\n', '        mappedTokens[token] = sideToken;\n', '        originalTokens[sideTokenAddress] = token;\n', '        emit NewSideToken(sideTokenAddress, token, newSymbol, granularity);\n', '        return sideToken;\n', '    }\n', '\n', '    function verifyWithAllowTokens(address tokenToUse, uint256 amount, bool isASideToken) private  {\n', '        // solium-disable-next-line security/no-block-members\n', '        if (now > lastDay + 24 hours) {\n', '            // solium-disable-next-line security/no-block-members\n', '            lastDay = now;\n', '            spentToday = 0;\n', '        }\n', '        require(allowTokens.isValidTokenTransfer(tokenToUse, amount, spentToday, isASideToken), "Bridge: Bigger than limit");\n', '        spentToday = spentToday.add(amount);\n', '    }\n', '\n', '    function getTransactionId(\n', '        bytes32 _blockHash,\n', '        bytes32 _transactionHash,\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint32 _logIndex\n', '    )\n', '        public pure returns(bytes32)\n', '    {\n', '        return keccak256(abi.encodePacked(_blockHash, _transactionHash, _receiver, _amount, _logIndex));\n', '    }\n', '\n', '    function _processTransaction(\n', '        bytes32 _blockHash,\n', '        bytes32 _transactionHash,\n', '        address _receiver,\n', '        uint256 _amount,\n', '        uint32 _logIndex\n', '    )\n', '        private\n', '    {\n', '        bytes32 compiledId = getTransactionId(_blockHash, _transactionHash, _receiver, _amount, _logIndex);\n', '        require(!processed[compiledId], "Bridge: Already processed");\n', '        processed[compiledId] = true;\n', '    }\n', '\n', '    function setFeePercentage(uint amount) external onlyOwner whenNotPaused {\n', '        require(amount < (feePercentageDivider/10), "Bridge: bigger than 10%");\n', '        feePercentage = amount;\n', '        emit FeePercentageChanged(feePercentage);\n', '    }\n', '\n', '    function getFeePercentage() external view returns(uint) {\n', '        return feePercentage;\n', '    }\n', '\n', '    function calcMaxWithdraw() external view returns (uint) {\n', '        uint spent = spentToday;\n', '        // solium-disable-next-line security/no-block-members\n', '        if (now > lastDay + 24 hours)\n', '            spent = 0;\n', '        return allowTokens.calcMaxWithdraw(spent);\n', '    }\n', '\n', '    function changeFederation(address newFederation) external onlyOwner returns(bool) {\n', '        _changeFederation(newFederation);\n', '        return true;\n', '    }\n', '\n', '    function _changeFederation(address newFederation) internal {\n', '        require(newFederation != NULL_ADDRESS, "Bridge: Federation is empty");\n', '        federation = newFederation;\n', '        emit FederationChanged(federation);\n', '    }\n', '\n', '    function getFederation() external view returns(address) {\n', '        return federation;\n', '    }\n', '\n', '    function changeSideTokenFactory(address newSideTokenFactory) external onlyOwner returns(bool) {\n', '        _changeSideTokenFactory(newSideTokenFactory);\n', '        return true;\n', '    }\n', '\n', '    function _changeSideTokenFactory(address newSideTokenFactory) internal {\n', '        require(newSideTokenFactory != NULL_ADDRESS, "Bridge: SideTokenFactory is empty");\n', '        sideTokenFactory = ISideTokenFactory(newSideTokenFactory);\n', '        emit SideTokenFactoryChanged(newSideTokenFactory);\n', '    }\n', '\n', '    function startUpgrade() external onlyOwner {\n', '        isUpgrading = true;\n', '        emit Upgrading(isUpgrading);\n', '    }\n', '\n', '    function endUpgrade() external onlyOwner {\n', '        isUpgrading = false;\n', '        emit Upgrading(isUpgrading);\n', '    }\n', '\n', '}']