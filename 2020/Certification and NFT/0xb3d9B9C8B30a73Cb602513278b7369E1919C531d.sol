['// Dependency file: contracts/libraries/SafeMath.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '// Dependency file: contracts/libraries/ConfigNames.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'library ConfigNames {\n', "    bytes32 public constant PRODUCE_DGAS_RATE = bytes32('PRODUCE_DGAS_RATE');\n", "    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\n", "    bytes32 public constant LIST_DGAS_AMOUNT = bytes32('LIST_DGAS_AMOUNT');\n", "    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\n", "    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\n", "    bytes32 public constant TOKEN_TO_DGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_DGAS_PAIR_MIN_PERCENT');\n", "    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\n", "    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\n", "    bytes32 public constant PROPOSAL_DGAS_AMOUNT = bytes32('PROPOSAL_DGAS_AMOUNT');\n", "    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\n", "    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\n", "    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\n", "    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\n", '}\n', '// Dependency file: contracts/modules/BaseMintField.sol\n', '\n', '// pragma solidity >=0.6.6;\n', "// import '../libraries/SafeMath.sol';\n", '\n', 'contract BaseMintField {\n', '    using SafeMath for uint;\n', '    struct Productivity {\n', "        uint product;           // user's productivity\n", '        uint total;             // total productivity\n', "        uint block;             // record's block number\n", '        uint user;              // accumulated products\n', '        uint global;            // global accumulated products\n', '    }\n', '\n', '    Productivity private global;\n', '    mapping(address => Productivity)    private users;\n', '\n', '    event AmountPerBlockChanged (uint oldValue, uint newValue);\n', '    event ProductivityIncreased (address indexed user, uint value);\n', '    event ProductivityDecreased (address indexed user, uint value);\n', '\n', '    uint private unlocked = 1;\n', '\n', '    modifier lock() {\n', "        require(unlocked == 1, 'Locked');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '\n', '    // compute productivity returns total productivity of a user.\n', '    function _computeProductivity(Productivity memory user) private view returns (uint) {\n', '        uint blocks = block.number.sub(user.block);\n', '        return user.product + user.total.mul(blocks);\n', '    }\n', '\n', "    // update users' productivity by value with boolean value indicating increase  or decrease.\n", '    function _updateProductivity(Productivity storage user, uint value, bool increase) private {\n', '        user.product      = _computeProductivity(user);\n', '        global.product    = _computeProductivity(global);\n', '\n', "        require(global.product <= uint(-1), 'BaseMintField: GLOBAL_PRODUCT_OVERFLOW');\n", '\n', '        user.block      = block.number;\n', '        global.block    = block.number;\n', '        if(increase) {\n', '            user.total   = user.total.add(value);\n', '            global.total = global.total.add(value);\n', '        }\n', '        else {\n', "            require(user.total >= value, 'BaseMintField: INVALID_DECREASE_USER_POWER');\n", "            require(global.total >= value, 'BaseMintField: INVALID_DECREASE_GLOBAL_POWER');\n", '            user.total   = user.total.sub(value);\n', '            global.total = global.total.sub(value);\n', '        }\n', '    }\n', '\n', '    function _increaseProductivity(address user, uint value) internal returns (bool) {\n', "        require(value > 0, 'BaseMintField: PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n", '        Productivity storage product        = users[user];\n', '        _updateProductivity(product, value, true);\n', '        emit ProductivityIncreased(user, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function _decreaseProductivity(address user, uint value) internal returns (bool) {\n', '        Productivity storage product = users[user];\n', "        require(value > 0 && product.total >= value, 'BaseMintField: INSUFFICIENT_PRODUCTIVITY');\n", '        _updateProductivity(product, value, false);\n', '        emit ProductivityDecreased(user, value);\n', '        return true;\n', '    }\n', ' \n', '    function _updateProductValue() internal returns (bool) {\n', '        Productivity storage product = users[msg.sender];\n', '        \n', '        product.user  = _computeProductivity(product);\n', '        product.global = _computeProductivity(global);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function _computeUserPercentage() internal view returns (uint numerator, uint denominator) {\n', '        Productivity memory product    = users[msg.sender];\n', '        \n', '        uint userProduct     = _computeProductivity(product);\n', '        uint globalProduct   = _computeProductivity(global);\n', '\n', '        numerator          = userProduct.sub(product.user);\n', '        denominator        = globalProduct.sub(product.global);\n', '    }\n', '    \n', '}\n', '// Dependency file: contracts/interfaces/IDemaxCallee.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxCallee {\n', '    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IDgas.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDgas {\n', '    function amountPerBlock() external view returns (uint);\n', '    function changeAmountPerBlock(uint value) external returns (bool);\n', '    function getProductivity(address user) external view returns (uint, uint);\n', '    function increaseProductivity(address user, uint value) external returns (bool);\n', '    function decreaseProductivity(address user, uint value) external returns (bool);\n', '    function take() external view returns (uint);\n', '    function takes() external view returns (uint, uint);\n', '    function mint() external returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function upgradeImpl(address _newImpl) external;\n', '    function upgradeGovernance(address _newGovernor) external;\n', '}\n', '// Dependency file: contracts/interfaces/IDemaxFactory.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function contractCodeHash() external view returns (bytes32);\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function isPair(address pair) external view returns (bool);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '    function playerPairs(address player, uint index) external view returns (address pair);\n', '    function getPlayerPairCount(address player) external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '    function addPlayerPair(address player, address _pair) external returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IERC20.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/libraries/UQ112x112.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', '\n', '// range: [0, 2**112 - 1]\n', '// resolution: 1 / 2**112\n', '\n', 'library UQ112x112 {\n', '    uint224 constant Q112 = 2**112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 y) internal pure returns (uint224 z) {\n', '        z = uint224(y) * Q112; // never overflows\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n', '        z = x / uint224(y);\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/libraries/Math.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// a library for performing various math operations\n', '\n', 'library Math {\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IDemaxConfig.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxConfig {\n', '    function governor() external view returns (address);\n', '    function PERCENT_DENOMINATOR() external view returns (uint);\n', '    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\n', '    function getConfigValue(bytes32 _name) external view returns (uint);\n', '    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\n', '    function checkToken(address _token) external view returns(bool);\n', '    function checkPair(address tokenA, address tokenB) external view returns (bool);\n', '    function listToken(address _token) external returns (bool);\n', '    function getDefaultListTokens() external returns (address[] memory);\n', '    function platform() external view returns  (address);\n', '}\n', '// Dependency file: contracts/DemaxPair.sol\n', '\n', '// pragma solidity >=0.6.6;\n', '\n', "// import './libraries/Math.sol';\n", "// import './libraries/UQ112x112.sol';\n", "// import './interfaces/IERC20.sol';\n", "// import './interfaces/IDemaxFactory.sol';\n", "// import './interfaces/IDgas.sol';\n", "// import './interfaces/IDemaxCallee.sol';\n", "// import './interfaces/IDemaxConfig.sol';\n", "// import './modules/BaseMintField.sol';\n", "// import './libraries/ConfigNames.sol';\n", '\n', 'contract DemaxPair is BaseMintField {\n', '    uint256 public version = 1;\n', '    using SafeMath for uint256;\n', '    using UQ112x112 for uint224;\n', '\n', '    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '    address public FACTORY;\n', '    address public CONFIG;\n', '    address public DGAS;\n', '    address public token0;\n', '    address public token1;\n', '\n', '    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n', '    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n', '    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n', '\n', '    uint256 public price0CumulativeLast;\n', '    uint256 public price1CumulativeLast;\n', '\n', '    uint256 public totalReward;\n', '    uint256 public remainReward;\n', '    mapping(address => uint256) public lastReward;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) public balanceOf;\n', '    event Mint(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, address indexed to, uint256 value);\n', '    event MintDGAS(address indexed player, uint256 pariMint, uint256 userMint);\n', '    mapping(address => uint256) public lastMintBlock;\n', '\n', '    function _mint(address to, uint256 value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Mint(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint256 value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Burn(from, address(0), value);\n', '    }\n', '\n', '    function getReserves()\n', '        public\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint32 _blockTimestampLast\n', '        )\n', '    {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    function _safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DEMAX PAIR : TRANSFER_FAILED');\n", '    }\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    constructor() public {\n', '        FACTORY = msg.sender;\n', '    }\n', '\n', '    modifier onlyPlatform {\n', '        address platform = IDemaxConfig(CONFIG).platform();\n', "        require(msg.sender == platform, 'DEMAX PAIR : FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(\n', '        address _token0,\n', '        address _token1,\n', '        address _config,\n', '        address _dgas\n', '    ) external {\n', "        require(msg.sender == FACTORY, 'DEMAX PAIR : FORBIDDEN');\n", '        token0 = _token0;\n', '        token1 = _token1;\n', '        CONFIG = _config;\n', '        DGAS = _dgas;\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(\n', '        uint256 balance0,\n', '        uint256 balance1,\n', '        uint112 _reserve0,\n', '        uint112 _reserve1\n', '    ) private {\n', "        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'DEMAX PAIR : OVERFLOW');\n", '        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs // important safety checks\n', '    function mint(address to) external onlyPlatform lock returns (uint256 liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        uint256 balance0 = _balanceOf(token0, address(this));\n', '        uint256 balance1 = _balanceOf(token1, address(this));\n', '        uint256 amount0 = balance0.sub(_reserve0);\n', '        uint256 amount1 = balance1.sub(_reserve1);\n', '        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n', '        } else {\n', '            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n', '        }\n', "        require(liquidity > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_MINTED');\n", '        _mint(to, liquidity);\n', '        _increaseProductivity(to, liquidity);\n', '        lastMintBlock[to] = block.number;\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs // important safety checks\n', '    function burn(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyPlatform lock returns (uint256 amount0, uint256 amount1) {\n', '        require(\n', '            block.number >=\n', '                lastMintBlock[from] + IDemaxConfig(CONFIG).getConfigValue(ConfigNames.REMOVE_LIQUIDITY_DURATION),\n', "            'DEMAX PLATFORM : REMOVE LIQUIDITY DURATION FAIL'\n", '        );\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        address _token0 = token0; // gas savings\n', '        address _token1 = token1; // gas savings\n', '        uint256 balance0 = _balanceOf(_token0, address(this));\n', '        uint256 balance1 = _balanceOf(_token1, address(this));\n', "        require(balanceOf[from] >= amount, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_AMOUNT');\n", '\n', '        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = amount.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n', '        amount1 = amount.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n', "        require(amount0 > 0 && amount1 > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_BURNED');\n", '        _burn(from, amount);\n', '        _decreaseProductivity(from, amount);\n', '\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = _balanceOf(_token0, address(this));\n', '        balance1 = _balanceOf(_token1, address(this));\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs // important safety checks\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external onlyPlatform lock {\n', "        require(amount0Out > 0 || amount1Out > 0, 'DEMAX PAIR : INSUFFICIENT_OUTPUT_AMOUNT');\n", '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', "        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'DEMAX PAIR :  INSUFFICIENT_LIQUIDITY');\n", '        uint256 balance0;\n', '        uint256 balance1;\n', '        {\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require(to != _token0 && to != _token1, 'DEMAX PAIR : INVALID_TO');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n', '            if (data.length > 0) IDemaxCallee(to).demaxCall(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = _balanceOf(_token0, address(this));\n', '            balance1 = _balanceOf(_token1, address(this));\n', '        }\n', '        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n', '        uint256 _amount0Out = amount0Out;\n', '        uint256 _amount1Out = amount1Out;\n', "        require(amount0In > 0 || amount1In > 0, 'DEMAX PAIR : INSUFFICIENT_INPUT_AMOUNT');\n", '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);\n', '    }\n', '\n', '    function swapFee(\n', '        uint256 amount,\n', '        address token,\n', '        address to\n', '    ) external onlyPlatform {\n', '        if (amount == 0 || token == to) return;\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n', "        require(to != token0 && to != token1, 'DEMAX PAIR : INVALID_TO');\n", '        _safeTransfer(token, to, amount);\n', '        uint256 balance0 = _balanceOf(token0, address(this));\n', '        uint256 balance1 = _balanceOf(token1, address(this));\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '    }\n', '\n', '    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber) {\n', '        (uint256 numerator, uint256 denominator) = _computeUserPercentage();\n', '        if (denominator > 0) {\n', '            uint256 deltaReward = totalReward.add(IDgas(DGAS).take()).sub(lastReward[msg.sender]);\n', '            rewardAmount = deltaReward.mul(numerator) / denominator;\n', '        }\n', '        blockNumber = block.number;\n', '    }\n', '\n', '    function mintReward() external lock returns (uint256 userReward) {\n', '        (uint256 numerator, uint256 denominator) = _computeUserPercentage();\n', "        require(numerator > 0 && denominator > 0, 'DEMAX PAIR : INVALID_REWARD_AMOUNT');\n", '\n', '        uint256 pairReward = IDgas(DGAS).mint();\n', '        totalReward = totalReward.add(pairReward);\n', '        uint256 deltaReward = totalReward.sub(lastReward[msg.sender]);\n', '        userReward = deltaReward.mul(numerator) / denominator;\n', '        _safeTransfer(DGAS, msg.sender, userReward);\n', '        _updateProductValue();\n', '        remainReward = remainReward.add(pairReward).sub(userReward);\n', '        lastReward[msg.sender] = totalReward;\n', '        emit MintDGAS(msg.sender, remainReward, userReward);\n', '    }\n', '\n', '    function skim(address to) external lock {\n', '        address _token0 = token0;\n', '        address _token1 = token1;\n', '        _safeTransfer(_token0, to, _balanceOf(_token0, address(this)).sub(reserve0));\n', '        _safeTransfer(_token1, to, _balanceOf(_token0, address(this)).sub(reserve1));\n', '    }\n', '\n', '    function getDGASReserve() public view returns (uint256) {\n', '        return _balanceOf(DGAS, address(this));\n', '    }\n', '\n', '    function _balanceOf(address token, address owner) internal view returns (uint256) {\n', '        if (token == DGAS && owner == address(this)) {\n', '            return IERC20(token).balanceOf(owner).sub(remainReward);\n', '        } else {\n', '            return IERC20(token).balanceOf(owner);\n', '        }\n', '    }\n', '\n', '    // force reserves to match balances\n', '    function sync() external lock {\n', '        _update(_balanceOf(token0, address(this)), _balanceOf(token1, address(this)), reserve0, reserve1);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity >=0.6.6;\n', '\n', "// import './DemaxPair.sol';\n", "// import './interfaces/IDemaxConfig.sol';\n", '\n', 'contract DemaxFactory {\n', '    uint256 public version = 1;\n', '    address public DGAS;\n', '    address public CONFIG;\n', '    mapping(address => mapping(address => address)) public getPair;\n', '    mapping(address => bool) public isPair;\n', '    address[] public allPairs;\n', '\n', '    mapping(address => address[]) public playerPairs;\n', '    mapping(address => mapping(address => bool)) isAddPlayerPair;\n', '\n', '    bytes32 public contractCodeHash;\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n', '\n', '    constructor(address _DGAS, address _CONFIG) public {\n', '        DGAS = _DGAS;\n', '        CONFIG = _CONFIG;\n', '    }\n', '\n', '    function getPlayerPairCount(address player) external view returns (uint256) {\n', '        address[] storage existAddress = playerPairs[player];\n', '        if (existAddress.length == 0) return 0;\n', '        return existAddress.length;\n', '    }\n', '\n', '    function addPlayerPair(address _player, address _pair) external returns (bool) {\n', "        require(msg.sender == IDemaxConfig(CONFIG).platform(), 'DEMAX FACTORY: PERMISSION');\n", '        if (isAddPlayerPair[_player][_pair] == false) {\n', '            isAddPlayerPair[_player][_pair] = true;\n', '            playerPairs[_player].push(_pair);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function allPairsLength() external view returns (uint256) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair) {\n', "        require(tokenA != tokenB, 'DEMAX FACTORY: IDENTICAL_ADDRESSES');\n", '        require(\n', '            IDemaxConfig(CONFIG).checkToken(tokenA) && IDemaxConfig(CONFIG).checkToken(tokenB),\n', "            'DEMAX FACTORY: NOT LIST'\n", '        );\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'DEMAX FACTORY: ZERO_ADDRESS');\n", "        require(getPair[token0][token1] == address(0), 'DEMAX FACTORY: PAIR_EXISTS'); // single check is sufficient\n", '        bytes memory bytecode = type(DemaxPair).creationCode;\n', '        if (uint256(contractCodeHash) == 0) {\n', '            contractCodeHash = keccak256(bytecode);\n', '        }\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        isPair[pair] = true;\n', '        DemaxPair(pair).initialize(token0, token1, CONFIG, DGAS);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '}']