['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/ISparkleRewardTiers.sol\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', "// import '../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol';\n", '\n', '/**\n', '  * @title A contract for managing reward tiers\n', '  * @author SparkleLoyalty Inc. (c) 2019-2020\n', '  */\n', '// interface ISparkleRewardTiers is Ownable, Pausable, ReentrancyGuard {\n', 'interface ISparkleRewardTiers {\n', '\n', '  /**\n', '    * @dev Add a new reward tier to the contract for future proofing\n', '    * @param _index of the new reward tier to add\n', '    * @param _rate of the added reward tier\n', '    * @param _price of the added reward tier\n', '    * @param _enabled status of the added reward tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Update an existing reward tier with new values\n', '    * @param _index of reward tier to update\n', '    * @param _rate of the reward tier\n', '    * @param _price of the reward tier\n', '    * @param _enabled status of the reward tier\n', '    * @return (bool) indicating success/failure\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Remove an existing reward tier from list of tiers\n', '    * @param _index of reward tier to remove\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function deleteTier(uint256 _index)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Get the rate value of specified tier\n', '    * @param _index of tier to query\n', '    * @return specified reward tier rate\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getRate(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(uint256);\n', '\n', '  /**\n', '    * @dev Get price of tier\n', '    * @param _index of tier to query\n', '    * @return uint256 indicating tier price\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getPrice(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(uint256);\n', '\n', '  /**\n', '    * @dev Get the enabled status of tier\n', '    * @param _index of tier to query\n', '    * @return bool indicating status of tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getEnabled(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Withdraw ether that has been sent directly to the contract\n', '    * @return bool indicating withdraw success\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function withdrawEth()\n', '  external\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is deleted\n', '    * @param _index of tier to deleted\n', '    */\n', '  event TierDeleted(uint256 _index);\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is updated\n', '    * @param _index of the updated tier\n', '    * @param _rate of updated tier\n', '    * @param _price of updated tier\n', '    * @param _enabled status of updated tier\n', '    */\n', '  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '  /**\n', '    * @dev Event triggered when a new reward tier is added\n', '    * @param _index of the tier added\n', '    * @param _rate of added tier\n', '    * @param _price of added tier\n', '    * @param _enabled status of added tier\n', '    */\n', '  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '}\n', '\n', '// File: contracts/SparkleRewardTiers.sol\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '  * @title A contract for managing reward tiers\n', '  * @author SparkleLoyalty Inc. (c) 2019-2020\n', '  */\n', 'contract SparkleRewardTiers is ISparkleRewardTiers, Ownable, Pausable, ReentrancyGuard {\n', '\n', '  /**\n', '    * @dev Ensure math safety through SafeMath\n', '    */\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '    * @dev Data structure declaring a loyalty tier\n', '    * @param _rate apr for reward tier\n', '    * @param _price to select reward tier\n', '    * @param _enabled availability for reward tier\n', '    */\n', '  struct Tier {\n', '    uint256 _rate;\n', '    uint256 _price;\n', '    bool _enabled;\n', '  }\n', '\n', '  // tiers mapping of available reward tiers\n', '  mapping(uint256 => Tier) private g_tiers;\n', '\n', '  /**\n', '    * @dev Sparkle loyalty tier rewards contract\n', '    * @notice Timestamp support for SparklePOL contract\n', '    */\n', '  constructor()\n', '  public\n', '  Ownable()\n', '  Pausable()\n', '  ReentrancyGuard()\n', '  {\n', '    Tier memory tier0;\n', '    tier0._rate = uint256(1.00000000 * 10e7);\n', '    tier0._price = 0 ether;\n', '    tier0._enabled = true;\n', '    /// Initialize default reward tier\n', '    g_tiers[0] = tier0;\n', '\n', '    Tier memory tier1;\n', '    tier1._rate = uint256(1.10000000 * 10e7);\n', '    tier1._price = 0.10 ether;\n', '    tier1._enabled = true;\n', '    /// Initialize reward tier 1\n', '    g_tiers[1] = tier1;\n', '\n', '    Tier memory tier2;\n', '    tier2._rate = uint256(1.20000000 * 10e7);\n', '    tier2._price = 0.20 ether;\n', '    tier2._enabled = true;\n', '    /// Initialize reward tier 2\n', '    g_tiers[2] = tier2;\n', '\n', '    Tier memory tier3;\n', '    tier3._rate = uint256(1.30000000 * 10e7);\n', '    tier3._price = 0.30 ether;\n', '    tier3._enabled = true;\n', '    /// Initialize reward tier 3\n', '    g_tiers[3] = tier3;\n', '  }\n', '\n', '  /**\n', '    * @dev Add a new reward tier to the contract for future proofing\n', '    * @param _index of the new reward tier to add\n', '    * @param _rate of the added reward tier\n', '    * @param _price of the added reward tier\n', '    * @param _enabled status of the added reward tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    /// Validate that tier does not already exist\n', "    require(g_tiers[_index]._enabled == false, 'Tier exists');\n", '    Tier memory newTier;\n', '    /// Initialize structure to specified data\n', '    newTier._rate = _rate;\n', '    newTier._price = _price;\n', '    newTier._enabled = _enabled;\n', '    /// Insert tier into collection\n', '    g_tiers[_index] = newTier;\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit TierAdded(_index, _rate, _price, _enabled);\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Update an existing reward tier with new values\n', '    * @param _index of reward tier to update\n', '    * @param _rate of the reward tier\n', '    * @param _price of the reward tier\n', '    * @param _enabled status of the reward tier\n', '    * @return (bool) indicating success/failure\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", "    require(g_tiers[_index]._rate > 0, 'Invalid tier');\n", '    /// Validate that reward and ether values\n', "    require(_rate > 0, 'Invalid rate');\n", "    require(_price > 0, 'Invalid Price');\n", '    /// Update the specified tier with specified data\n', '    g_tiers[_index]._rate = _rate;\n', '    g_tiers[_index]._price = _price;\n', '    g_tiers[_index]._enabled = _enabled;\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit TierUpdated(_index, _rate, _price, _enabled);\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Remove an existing reward tier from list of tiers\n', '    * @param _index of reward tier to remove\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function deleteTier(uint256 _index)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    /// Validate tier delete does not delete system tiers 0-2\n', "    require(_index >= 4, 'Invalid request');\n", "    /// Zero out the spcified tier's data\n", '    delete g_tiers[_index];\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit TierDeleted(_index);\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Get the rate value of specified tier\n', '    * @param _index of tier to query\n', '    * @return specified reward tier rate\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getRate(uint256 _index)\n', '  public\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Return reward rate for specified tier\n', '    return g_tiers[_index]._rate;\n', '  }\n', '\n', '  /**\n', '    * @dev Get price of tier\n', '    * @param _index of tier to query\n', '    * @return uint256 indicating tier price\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getPrice(uint256 _index)\n', '  public\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Return reward purchase price in ether for tier\n', '    return g_tiers[_index]._price;\n', '  }\n', '\n', '  /**\n', '    * @dev Get the enabled status of tier\n', '    * @param _index of tier to query\n', '    * @return bool indicating status of tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getEnabled(uint256 _index)\n', '  public\n', '  whenNotPaused\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Return reward tier enabled status for specified tier\n', '    return g_tiers[_index]._enabled;\n', '  }\n', '\n', '  /**\n', '    * @dev Withdraw ether that has been sent directly to the contract\n', '    * @return bool indicating withdraw success\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function withdrawEth()\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    /// Validate that this contract is storing ether\n', "    require(address(this).balance >= 0, 'No ether');\n", '    /// Transfer the ether to owner address\n', '    msg.sender.transfer(address(this).balance);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is deleted\n', '    * @param _index of tier to deleted\n', '    */\n', '  event TierDeleted(uint256 _index);\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is updated\n', '    * @param _index of the updated tier\n', '    * @param _rate of updated tier\n', '    * @param _price of updated tier\n', '    * @param _enabled status of updated tier\n', '    */\n', '  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '  /**\n', '    * @dev Event triggered when a new reward tier is added\n', '    * @param _index of the tier added\n', '    * @param _rate of added tier\n', '    * @param _price of added tier\n', '    * @param _enabled status of added tier\n', '    */\n', '  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '}']