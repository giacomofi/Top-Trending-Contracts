['pragma solidity ^0.4.26;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract ETH_2_0_DepositContract {\n', '    \n', '     // all ETH get burned to this address\n', '     address public burnAddress = 0x0000000000000000000000000000000000000000;\n', '     \n', '     // owner, mainly just for the lpp announcements and has no other rights\n', '     address public owner = msg.sender;\n', '     \n', '     // mapping of all ETH 2.0 balances\n', '     mapping(address => uint256) public burns;\n', '     \n', '     // Finalization date\n', '     uint256 public endDate = block.timestamp + (64*24*60*60); // 64 days\n', '     \n', '     // Lpp Announcement via log event\n', '     struct AnnouncementStruct {\n', '         address accountLpp;\n', '     }\n', '     event Announcement(AnnouncementStruct);\n', '     \n', '     function() external payable {\n', '         deposit();\n', '     }\n', '     \n', '     // deposit eth for eth 2.0\n', '     function deposit() public payable {\n', '\n', '         // record amount of ETH 2.0 token\n', '         if( block.timestamp < endDate)\n', '            burns[msg.sender] = msg.value;\n', '         \n', '         // burn all ether after endDate to unrecoverable 0x0000.. address\n', '         else\n', '            burnAddress.transfer(address(this).balance);\n', '     }\n', '     \n', '       // an option to burn prematurely\n', '     function burnBalance() external {\n', '         \n', '         require(msg.sender == owner);\n', '         burnAddress.transfer(address(this).balance);\n', '         \n', '     }\n', '     \n', '     // lpp broadcasts via log events\n', '     function log(address lpp) external {\n', '         \n', '         require(msg.sender == owner);\n', '         AnnouncementStruct s;\n', '         s.accountLpp = lpp;\n', '         emit Announcement(s);\n', '         \n', '     }\n', '     \n', '   \n', '}']