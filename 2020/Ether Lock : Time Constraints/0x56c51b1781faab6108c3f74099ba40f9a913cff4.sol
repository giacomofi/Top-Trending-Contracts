['pragma solidity  ^0.4.0;\n', '\n', 'contract Register {\n', '    \n', '    uint256 public totalDeposit=0;\n', '    uint256 public burnedTokens=0;\n', '    uint256 minDepositValue;\n', '    address owner;\n', '    address cTokenAddr=0x1f6bd8766f8a8AA58F7441C8dd3709aFA3a56202;\n', '    mapping(address => uint256)  registerRecords;\n', '    \n', '    constructor(uint256 _minValue) public {\n', '        owner=msg.sender;\n', '        minDepositValue=_minValue;\n', '    }\n', '    \n', '    event RegisterToken(address indexed _from,address indexed _to,uint256 indexed _value);\n', '    event BurnToken(address indexed _from,uint256 indexed _value);\n', '\n', '    function registerToken(address _to,uint256 _value) public returns (bool sucess) {\n', '        require(_value>minDepositValue);\n', '        bytes4 transferFromMethodId = bytes4(keccak256("transferFrom(address,address,uint256)"));\n', '        if(cTokenAddr.call(transferFromMethodId,msg.sender,_to, _value)){\n', '             registerRecords[msg.sender]+=_value;\n', '             totalDeposit+=_value;\n', '             emit RegisterToken(msg.sender,_to,_value);\n', '             return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function burn() public returns (bool sucess) {\n', '        bytes4 transferMethodId = bytes4(keccak256("transfer(address(0),uint256)"));\n', '        uint256 _value = totalDeposit - burnedTokens;\n', '        if(cTokenAddr.call(transferMethodId, address(0), _value)){\n', '             burnedTokens+=_value;\n', '             emit BurnToken(msg.sender,_value);\n', '             return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getDeposit() public view returns (uint256){\n', '        return registerRecords[msg.sender];\n', '    }\n', '    \n', '    function getDepositByAddr(address addr) public view returns(uint256){\n', '        return registerRecords[addr];\n', '    }\n', '        \n', '    function getTotalDeposit()  public view returns (uint256){\n', '        return totalDeposit;\n', '    }\n', '\n', '    function getTotalBurned()  public view returns (uint256){\n', '        return burnedTokens;\n', '    }\n', '}']