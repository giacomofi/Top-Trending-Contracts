['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address private owner;\n', '    \n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '    \n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '    function changeOwner(address newOwner) public onlyOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'interface Token {\n', '    function tokensSold(address buyer, uint256 amount) external  returns (bool success);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function burn(uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract YUICrowdSale is Ownable{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public priceFactor;\n', '    uint256 public totalSold;\n', '    address public tokenAddress;\n', '    uint256 public startTime = 1605290400;\n', '    uint256 public endTime = 1605636000;\n', '    \n', '    uint256 public minimumBuyAmount = 10 ** 17;\n', '    address payable public walletAddress;\n', '    event TokensSold(address indexed to, uint256 amount);\n', '    \n', '    constructor() {\n', '        priceFactor = uint256(20);\n', '        walletAddress = 0x5958C4C4385883F940809698826e9780146a96f7;\n', '        tokenAddress = address(0x0);\n', '    }\n', '    \n', '    receive() external payable {\n', '        buy();\n', '    }\n', '    \n', '    function changeWallet (address payable _walletAddress) onlyOwner public {\n', '        walletAddress = _walletAddress;\n', '    }\n', '    \n', '    function setToken(address _tokenAddress) onlyOwner public {\n', '        tokenAddress = _tokenAddress;\n', '    }\n', '    \n', '    function buy() public payable {\n', '        require((block.timestamp > startTime ) && (block.timestamp < endTime)  , "YUI Token Crowdsate is not active");\n', '        uint256 weiValue = msg.value;\n', '        require(weiValue >= minimumBuyAmount, "Minimum amount is 0.1 eth");\n', '        uint256 amount = weiValue.mul(priceFactor);\n', '        Token token = Token(tokenAddress);\n', '        require(walletAddress.send(weiValue));\n', '        require(token.tokensSold(msg.sender, amount));\n', '        totalSold += amount;\n', '        emit TokensSold(msg.sender, amount);\n', '    }\n', '    \n', '    function burnUnsold() onlyOwner public {\n', '        require((block.timestamp > endTime), "YUI Token Crowdsate is still active");\n', '        Token token = Token(tokenAddress);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        token.burn(amount);\n', '    }\n', '    \n', '}']