['pragma solidity 0.5.12;\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function allowance(address, address) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transfer(address dst, uint amt) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '}\n', '\n', 'interface IMPool {\n', '    function isBound(address t) external view returns (bool);\n', '    function getFinalTokens() external view returns(address[] memory);\n', '    function getBalance(address token) external view returns (uint);\n', '    function setSwapFee(uint swapFee) external;\n', '    function setController(address controller) external;\n', '    function setPair(address pair) external;\n', '    function bind(address token, uint balance, uint denorm) external;\n', '    function finalize(address beneficiary, uint256 initAmount) external;\n', '    function updatePairGPInfo(address[] calldata gps, uint[] calldata shares) external;\n', '    function joinPool(address beneficiary, uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function joinswapExternAmountIn(address beneficiary, address tokenIn, uint tokenAmountIn, uint minPoolAmountOut) external returns (uint poolAmountOut);\n', '}\n', '\n', 'interface IPairToken {\n', '    function setController(address _controller) external ;\n', '}\n', '\n', 'interface IMFactory {\n', '    function newMPool() external returns (IMPool);\n', '}\n', '\n', 'interface IPairFactory {\n', '    function newPair(address pool, uint256 perBlock, uint256 rate) external returns (IPairToken);\n', '    function getPairToken(address pool) external view returns (address);\n', '}\n', '\n', '\n', '\n', '/********************************** WARNING **********************************/\n', '//                                                                           //\n', '// This contract is only meant to be used in conjunction with ds-proxy.      //\n', '// Calling this contract directly will lead to loss of funds.                //\n', '//                                                                           //\n', '/********************************** WARNING **********************************/\n', '\n', 'contract MActions {\n', '\n', '    function createWithPair(\n', '        IMFactory factory,\n', '        IPairFactory pairFactory,\n', '        address[] calldata tokens,\n', '        uint[] calldata balances,\n', '        uint[] calldata denorms,\n', '        address[] calldata gps,\n', '        uint[] calldata shares,\n', '        uint swapFee,\n', '        uint gpRate\n', '    ) external returns (IMPool pool) {\n', '        pool = create(factory, tokens, balances, denorms, swapFee, 0, false);\n', '\n', '        IPairToken pair = pairFactory.newPair(address(pool), 4 * 10 ** 18, gpRate);\n', '\n', '        pool.setPair(address(pair));\n', '        if (gpRate > 0 && gps.length != 0 && gps.length == shares.length) {\n', '            pool.updatePairGPInfo(gps, shares);\n', '        }\n', '        pool.finalize(msg.sender, 0);\n', '        pool.setController(msg.sender);\n', '        pair.setController(msg.sender);\n', '    }\n', '\n', '    function create(\n', '        IMFactory factory,\n', '        address[] memory tokens,\n', '        uint[] memory balances,\n', '        uint[] memory denorms,\n', '        uint swapFee,\n', '        uint initLpSupply,\n', '        bool finalize\n', '    ) public returns (IMPool pool) {\n', '        require(tokens.length == balances.length, "ERR_LENGTH_MISMATCH");\n', '        require(tokens.length == denorms.length, "ERR_LENGTH_MISMATCH");\n', '\n', '        pool = factory.newMPool();\n', '        pool.setSwapFee(swapFee);\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            IERC20 token = IERC20(tokens[i]);\n', '            require(token.transferFrom(msg.sender, address(this), balances[i]), "ERR_TRANSFER_FAILED");\n', '            if (token.allowance(address(this), address(pool)) > 0) {\n', '                token.approve(address(pool), 0);\n', '            }\n', '            token.approve(address(pool), balances[i]);\n', '            pool.bind(tokens[i], balances[i], denorms[i]);\n', '        }\n', '        if (finalize) {\n', '            pool.finalize(msg.sender, initLpSupply);\n', '            pool.setController(msg.sender);\n', '        }\n', '\n', '    }\n', '\n', '    function joinPool(\n', '        IMPool pool,\n', '        uint poolAmountOut,\n', '        uint[] calldata maxAmountsIn\n', '    ) external {\n', '        address[] memory tokens = pool.getFinalTokens();\n', '        require(maxAmountsIn.length == tokens.length, "ERR_LENGTH_MISMATCH");\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            IERC20 token = IERC20(tokens[i]);\n', '            require(token.transferFrom(msg.sender, address(this), maxAmountsIn[i]), "ERR_TRANSFER_FAILED");\n', '            if (token.allowance(address(this), address(pool)) > 0) {\n', '                token.approve(address(pool), 0);\n', '            }\n', '            token.approve(address(pool), maxAmountsIn[i]);\n', '        }\n', '\n', '        pool.joinPool(msg.sender, poolAmountOut, maxAmountsIn);\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            IERC20 token = IERC20(tokens[i]);\n', '            if (token.balanceOf(address(this)) > 0) {\n', '                require(token.transfer(msg.sender, token.balanceOf(address(this))), "ERR_TRANSFER_FAILED");\n', '            }\n', '        }\n', '    }\n', '\n', '    function joinswapExternAmountIn(\n', '        IMPool pool,\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external {\n', '        IERC20 token = IERC20(tokenIn);\n', '        require(token.transferFrom(msg.sender, address(this), tokenAmountIn), "ERR_TRANSFER_FAILED");\n', '        if (token.allowance(address(this), address(pool)) > 0) {\n', '            token.approve(address(pool), 0);\n', '        }\n', '        token.approve(address(pool), tokenAmountIn);\n', '        pool.joinswapExternAmountIn(msg.sender, tokenIn, tokenAmountIn, minPoolAmountOut);\n', '    }\n', '}']