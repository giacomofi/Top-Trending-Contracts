['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-07\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IPooledStaking.sol\n', '\n', '/*\n', '    Copyright (C) 2020 NexusMutual.io\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/\n', '*/\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', 'interface IPooledStaking {\n', '  function stakerContractStake(address staker, address contractAddress) external view returns (uint);\n', '  function stakerContractPendingUnstakeTotal(address staker, address contractAddress) external view returns (uint);\n', '}\n', '\n', '// File: contracts/interfaces/INXMMaster.sol\n', '\n', '/*\n', '    Copyright (C) 2020 NexusMutual.io\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/\n', '*/\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', 'interface INXMMaster {\n', '  function getLatestAddress(bytes2 _contractName) external view returns (address payable contractAddress);\n', '}\n', '\n', '// File: contracts/CommunityStakingIncentives.sol\n', '\n', '/*\n', '    Copyright (C) 2020 NexusMutual.io\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see http://www.gnu.org/licenses/\n', '*/\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CommunityStakingIncentives is ReentrancyGuard {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint;\n', '\n', '  INXMMaster public master;\n', '  uint public roundDuration;\n', '  uint public roundsStartTime;\n', '  uint public constant rewardRateScale = 1e18;\n', '\n', '  /**\n', '  * @dev Add rewards as a sponsor for a particular contract.\n', '  * @param _roundDuration Duration of a reward round in seconds.\n', '  * @param _roundsStartTime Timestamp in seconds at which rounds start. Needs to be in the future.\n', '  * @param masterAddress NexusMutual Master contract address.\n', '  */\n', '  constructor(uint _roundDuration, uint _roundsStartTime, address masterAddress) public {\n', '\n', '    require(_roundDuration > 0, "_roundDuration needs to be greater than 0");\n', '    require(_roundsStartTime >= now, "_roundsStartTime needs to be in the future");\n', '    roundDuration = _roundDuration;\n', '    roundsStartTime = _roundsStartTime;\n', '    master = INXMMaster(masterAddress);\n', '  }\n', '\n', '  struct RewardPool {\n', '    uint amount;\n', '    // rate nextRate and nextRateStartRound  may not be up to date. use _getRates to get the up to date values.\n', '    uint rate;\n', '    uint nextRate;\n', '    uint nextRateStartRound;\n', '    mapping(address => uint) lastRoundClaimed;\n', '  }\n', '\n', '  // stakedContractAddress => sponsorAddress => tokenAddress => RewardPool\n', '  mapping (address => mapping (address => mapping (address => RewardPool))) rewardPools;\n', '\n', '  event Deposited (\n', '    address indexed stakedContract,\n', '    address indexed sponsor,\n', '    address tokenAddress,\n', '    uint amount\n', '  );\n', '\n', '  event Withdrawn (\n', '    address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress,\n', '    uint amount\n', '  );\n', '\n', '  event Claimed (\n', '    address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress,\n', '    uint amount,\n', '    address receiver,\n', '    uint roundNumber\n', '  );\n', '\n', '  /**\n', '  * @dev set the reward ratio as a sponsor for a particular contract and ERC20 token.\n', '  * @param stakedContract Contract the staker has a stake on.\n', '  * @param tokenAddress Address of the ERC20 token of the reward funds.\n', '  * @param rate Rate between the NXM stake and the reward amount. (Scaled by 1e18)\n', '  */\n', '  function setRewardRate(address stakedContract, address tokenAddress, uint rate) public {\n', '\n', '    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\n', '\n', '    uint currentRound = getCurrentRound();\n', '    uint currentRate;\n', '    (currentRate, , ) = _getRates(pool, currentRound);\n', '    if (currentRate == 0) {\n', '      // set the rate for the current round\n', '      pool.rate = rate;\n', '      pool.nextRate = 0;\n', '      pool.nextRateStartRound = 0;\n', '    } else {\n', '      // set the rate for the next round\n', '      if (pool.rate != currentRate) {\n', '        pool.rate = pool.nextRate;\n', '      }\n', '      pool.nextRate = rate;\n', '      pool.nextRateStartRound = currentRound + 1;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Add rewards as a sponsor for a particular contract.\n', '  * @param stakedContract Contract the staker has a stake on.\n', '  * @param tokenAddress Address of the ERC20 token of the reward funds.\n', '  * @param amount Amount of rewards to be deposited.\n', '  */\n', '  function depositRewards(address stakedContract, address tokenAddress, uint amount) public {\n', '\n', '    IERC20 erc20 = IERC20(tokenAddress);\n', '    erc20.safeTransferFrom(msg.sender, address(this), amount);\n', '    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\n', '    pool.amount = pool.amount.add(amount);\n', '    emit Deposited(stakedContract, msg.sender, tokenAddress, amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Add rewards as a sponsor for a particular contract.\n', '  * @param stakedContract Contract the staker has a stake on.\n', '  * @param tokenAddress Address of the ERC20 token of the reward funds.\n', '  * @param amount Amount of rewards to be deposited.\n', '  * @param rate Rate between the NXM stake and the reward amount. (Scaled by 1e18)\n', '  */\n', '  function depositRewardsAndSetRate(address stakedContract, address tokenAddress, uint amount, uint rate) external {\n', '    depositRewards(stakedContract, tokenAddress, amount);\n', '    setRewardRate(stakedContract, tokenAddress, rate);\n', '  }\n', '\n', '  /**\n', '  * @dev Calls claimReward for each separate (stakedContract, sponsor, token) tuple specified.\n', '  * @param stakedContracts Contracts the staker has a stake on.\n', '  * @param sponsors Sponsors to claim rewards from.\n', '  * @param tokenAddresses Addresses of the ERC20 token of the reward funds.\n', '  * @return tokensRewarded Tokens rewarded by each sponsor.\n', '  */\n', '  function claimRewards(\n', '    address[] calldata stakedContracts,\n', '    address[] calldata sponsors,\n', '    address[] calldata tokenAddresses\n', '  ) external nonReentrant returns (uint[] memory tokensRewarded) {\n', '\n', '    require(stakedContracts.length == sponsors.length, "stakedContracts.length != sponsors.length");\n', '    require(stakedContracts.length == tokenAddresses.length, "stakedContracts.length != tokenAddresses.length");\n', '\n', '    tokensRewarded = new uint[](stakedContracts.length);\n', '    for (uint i = 0; i < stakedContracts.length; i++) {\n', '      tokensRewarded[i] = claimReward(stakedContracts[i], sponsors[i], tokenAddresses[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims reward as a NexusMutual staker.\n', '  * @param stakedContract contract the staker has a stake on.\n', '  * @param sponsor Sponsor providing the reward funds.\n', '  * @param tokenAddress address of the ERC20 token of the reward funds.\n', '  * @return rewardAmount amount rewarded\n', '  */\n', '  function claimReward(\n', '    address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress\n', '  ) internal returns (uint rewardAmount) {\n', '\n', '    uint currentRound = getCurrentRound();\n', '    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\n', '    uint lastRoundClaimed = pool.lastRoundClaimed[msg.sender];\n', '    require(currentRound > lastRoundClaimed, "Already claimed this reward for this round");\n', '\n', '    if (pool.nextRateStartRound != 0 && pool.nextRateStartRound <= currentRound) {\n', '      pool.rate = pool.nextRate;\n', '      pool.nextRateStartRound = 0;\n', '      pool.nextRate = 0;\n', '    }\n', '\n', '    IPooledStaking pooledStaking = IPooledStaking(master.getLatestAddress("PS"));\n', '    uint stake = pooledStaking.stakerContractStake(msg.sender, stakedContract);\n', '    uint pendingUnstake = pooledStaking.stakerContractPendingUnstakeTotal(msg.sender, stakedContract);\n', '    uint netStake = stake >= pendingUnstake ? stake.sub(pendingUnstake) : 0;\n', '    rewardAmount = netStake.mul(pool.rate).div(rewardRateScale);\n', '    uint rewardsAvailable = pool.amount;\n', '    if (rewardAmount > rewardsAvailable) {\n', '      rewardAmount = rewardsAvailable;\n', '    }\n', '    require(rewardAmount > 0, "rewardAmount needs to be greater than 0");\n', '\n', '    pool.lastRoundClaimed[msg.sender] = currentRound;\n', '    pool.amount = rewardsAvailable.sub(rewardAmount);\n', '\n', '    IERC20 erc20 = IERC20(tokenAddress);\n', '    erc20.safeTransfer(msg.sender, rewardAmount);\n', '    emit Claimed(stakedContract, sponsor, tokenAddress, rewardAmount, msg.sender, currentRound);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw reward funds as a Sponsor for a particular staked contract.\n', '  * @param stakedContract Contract the staker has a stake on.\n', '  * @param tokenAddress Address of the ERC20 token of the reward funds.\n', '  * @param amount Amount of reward funds to be withdrawn.\n', '  */\n', '  function withdrawRewards(address stakedContract, address tokenAddress, uint amount) external nonReentrant {\n', '    IERC20 erc20 = IERC20(tokenAddress);\n', '    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\n', '    require(pool.amount >= amount, "Not enough tokens to withdraw");\n', '    require(pool.rate == 0, "Reward rate is not 0");\n', '\n', '    pool.amount = pool.amount.sub(amount);\n', '    erc20.safeTransfer(msg.sender, amount);\n', '    emit Withdrawn(stakedContract, msg.sender, tokenAddress, amount);\n', '  }\n', '\n', '  /**\n', '  @dev Fetch the amount of available rewards for a staker for the current round from a particular reward pool.\n', '  * @param staker whose rewards are counted.\n', '  * @param stakedContract contract the staker has a stake on.\n', '  * @param sponsor Sponsor providing the reward funds.\n', '  * @param tokenAddress address of the ERC20 token of the reward funds.\n', '  * @return rewardAmount amount of reward tokens available for this particular staker.\n', '  */\n', '  function getAvailableStakerReward(\n', '    address staker,\n', '    address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress\n', '  ) public view returns (uint rewardAmount) {\n', '\n', '    uint currentRound = getCurrentRound();\n', '    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\n', '    uint lastRoundClaimed = pool.lastRoundClaimed[staker];\n', '    if (lastRoundClaimed >= currentRound) {\n', '      return 0;\n', '    }\n', '    uint rate;\n', '    (rate, , ) = _getRates(pool, currentRound);\n', '    IPooledStaking pooledStaking = IPooledStaking(master.getLatestAddress("PS"));\n', '    uint stake = pooledStaking.stakerContractStake(staker, stakedContract);\n', '    uint pendingUnstake = pooledStaking.stakerContractPendingUnstakeTotal(staker, stakedContract);\n', '    uint netStake = stake >= pendingUnstake ? stake.sub(pendingUnstake) : 0;\n', '    rewardAmount = netStake.mul(rate).div(rewardRateScale);\n', '    uint rewardsAvailable = pool.amount;\n', '    if (rewardAmount > rewardsAvailable) {\n', '      rewardAmount = rewardsAvailable;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Calls claimReward for each separate (stakedContract, sponsor, token) tuple specified.\n', '  * @param stakedContracts Contracts the staker has a stake on.\n', '  * @param sponsors Sponsors to claim rewards from.\n', '  * @param tokenAddresses Addresses of the ERC20 token of the reward funds.\n', '  * @return tokensRewarded Tokens rewarded by each sponsor.\n', '  */\n', '  function getAvailableStakerRewards(\n', '    address staker,\n', '    address[] calldata stakedContracts,\n', '    address[] calldata sponsors,\n', '    address[] calldata tokenAddresses\n', '  ) external view returns (uint[] memory tokensRewarded) {\n', '    require(stakedContracts.length == sponsors.length, "stakedContracts.length != sponsors.length");\n', '    require(stakedContracts.length == tokenAddresses.length, "stakedContracts.length != tokenAddresses.length");\n', '\n', '    tokensRewarded = new uint[](stakedContracts.length);\n', '    for (uint i = 0; i < stakedContracts.length; i++) {\n', '      tokensRewarded[i] = getAvailableStakerReward(staker, stakedContracts[i], sponsors[i], tokenAddresses[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  @dev Fetch RewardPool information\n', '  * @param stakedContract contract a staker has a stake on.\n', '  * @param sponsor Sponsor providing the reward funds.\n', '  * @param tokenAddress address of the ERC20 token of the reward funds.\n', '  * @return amount total available token amount of the RewardPool\n', '  * @return rate rate to NXM of the RewardPool.\n', '  * @return nextRateStartRound round number for which the next rate applies. if 0, no nextRate is set.\n', '  * @return nextRate rate for the next round of the RewardPool. if nextRateStartRound is 0 this value is not relevant.\n', '  */\n', '  function getRewardPool(\n', '      address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress\n', '  ) public view returns (uint amount, uint rate, uint nextRateStartRound, uint nextRate) {\n', '    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\n', '    (rate, nextRateStartRound, nextRate) = _getRates(pool, getCurrentRound());\n', '    amount = pool.amount;\n', '  }\n', '\n', '\n', '  /**\n', '  @dev Fetch information for multiple RewardPools\n', '  * @param stakedContracts contract a staker has a stake on.\n', '  * @param sponsors Sponsor providing the reward funds.\n', '  * @param tokenAddresses address of the ERC20 token of the reward funds.\n', '  * @return amount total available token amount of the RewardPool\n', '  * @return rate rate to NXM of the RewardPool.\n', '  * @return nextRateStartRound round number for which the next rate applies. if 0, no nextRate is set.\n', '  * @return nextRate rate for the next round of the RewardPool. if nextRateStartRound is 0 this value is not relevant.\n', '  */\n', '  function getRewardPools(\n', '    address[] calldata stakedContracts,\n', '    address[] calldata sponsors,\n', '    address[] calldata tokenAddresses\n', '  ) external view returns (\n', '    uint[] memory amount,\n', '    uint[] memory rate,\n', '    uint[] memory nextRateStartRound,\n', '    uint[] memory nextRate\n', '  ) {\n', '    require(stakedContracts.length == sponsors.length, "stakedContracts.length != sponsors.length");\n', '    require(stakedContracts.length == tokenAddresses.length, "stakedContracts.length != tokenAddresses.length");\n', '\n', '    amount = new uint[](stakedContracts.length);\n', '    rate = new uint[](stakedContracts.length);\n', '    nextRateStartRound = new uint[](stakedContracts.length);\n', '    nextRate = new uint[](stakedContracts.length);\n', '\n', '    for (uint i = 0; i < stakedContracts.length; i++) {\n', '      RewardPool storage pool = rewardPools[stakedContracts[i]][sponsors[i]][tokenAddresses[i]];\n', '      (rate[i], nextRateStartRound[i], nextRate[i]) = _getRates(pool, getCurrentRound());\n', '      amount[i] = pool.amount;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Fetch the current round number.\n', '  */\n', '  function getCurrentRound() public view returns (uint) {\n', '    require(roundsStartTime <= now, "Rounds haven\'t started yet");\n', '    return (now - roundsStartTime) / roundDuration + 1;\n', '  }\n', '\n', '  /**\n', '  * @dev Fetch the last round in which a staker fetched his reward from a particular RewardPool.\n', '  * @param stakedContract contract a staker has a stake on.\n', '  * @param sponsor Sponsor providing the reward funds.\n', '  * @param tokenAddress address of the ERC20 token of the reward funds.\n', '  */\n', '  function getLastRoundClaimed(\n', '    address stakedContract,\n', '    address sponsor,\n', '    address tokenAddress,\n', '    address staker\n', '  ) external view returns (uint) {\n', '    return rewardPools[stakedContract][sponsor][tokenAddress].lastRoundClaimed[staker];\n', '  }\n', '\n', '  function _getRates(RewardPool storage pool, uint currentRound) internal view returns (uint rate, uint nextRateStartRound, uint nextRate) {\n', '    bool needsUpdate = pool.nextRateStartRound != 0 && pool.nextRateStartRound <= currentRound;\n', '    if (needsUpdate) {\n', '      return (pool.nextRate, 0, 0);\n', '    }\n', '    return (pool.rate, pool.nextRateStartRound, pool.nextRate);\n', '  }\n', '}']