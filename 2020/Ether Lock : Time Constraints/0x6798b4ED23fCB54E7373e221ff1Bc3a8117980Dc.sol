['\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', 'pragma solidity ^0.7.1;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not inclusde\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenTimelock {\n', '\n', '    IERC20 private _token;\n', '\n', '    address private _beneficiary;\n', '\n', '    uint256 private _releaseTime;\n', '\n', '    constructor (IERC20 token, address beneficiary, uint256 timeLockDays) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _releaseTime = block.timestamp + (timeLockDays*24*3600);\n', '        require(_releaseTime > block.timestamp, "ERROR");\n', '    }\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '    function balance() public view returns (uint256) {\n', '        return _token.balanceOf(address(this));\n', '    }\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '    function releaseTime() public view returns (uint256) {\n', '        return _releaseTime;\n', '    }\n', '    function getBlockTimestamp() public view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '    function canRelease() public view returns (bool) {\n', '        if(_releaseTime < block.timestamp){return true;}\n', '        else {return false;}\n', '    }\n', '    function release() public virtual {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");\n', '\n', '        uint256 amount = _token.balanceOf(address(this));\n', '        require(amount > 0, "TokenTimelock: no tokens to release");\n', '\n', '        _token.transfer(_beneficiary, amount);\n', '    }\n', '}']
['\n', 'pragma solidity >0.6.0;\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '} // File: @openzeppelin/contracts/token/ERC20/IERC20.sol']
