['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal virtual view returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal virtual view returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(\n', '\t\taddress indexed previousOwner,\n', '\t\taddress indexed newOwner\n', '\t);\n', '\n', '\t/**\n', '\t * @dev Initializes the contract setting the deployer as the initial owner.\n', '\t */\n', '\tconstructor() {\n', '\t\taddress msgSender = _msgSender();\n', '\t\t_owner = msgSender;\n', '\t\temit OwnershipTransferred(address(0), msgSender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the address of the current owner.\n', '\t */\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Leaves the contract without owner. It will not be possible to call\n', '\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '\t *\n', '\t * NOTE: Renouncing ownership will leave the contract without an owner,\n', '\t * thereby removing any functionality that is only available to the owner.\n', '\t */\n', '\tfunction renounceOwnership() public virtual onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t * Can only be called by the current owner.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n', '\t\trequire(\n', '\t\t\tnewOwner != address(0),\n', '\t\t\t"Ownable: new owner is the zero address"\n', '\t\t);\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\t/**\n', '\t * @dev Returns the addition of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `+` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Addition cannot overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(\n', '\t\tuint256 a,\n', '\t\tuint256 b,\n', '\t\tstring memory errorMessage\n', '\t) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(\n', '\t\tuint256 a,\n', '\t\tuint256 b,\n', '\t\tstring memory errorMessage\n', '\t) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(\n', '\t\tuint256 a,\n', '\t\tuint256 b,\n', '\t\tstring memory errorMessage\n', '\t) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\t/**\n', '\t * @dev Returns true if `account` is a contract.\n', '\t *\n', '\t * [IMPORTANT]\n', '\t * ====\n', '\t * It is unsafe to assume that an address for which this function returns\n', '\t * false is an externally-owned account (EOA) and not a contract.\n', '\t *\n', '\t * Among others, `isContract` will return false for the following\n', '\t * types of addresses:\n', '\t *\n', '\t *  - an externally-owned account\n', '\t *  - a contract in construction\n', '\t *  - an address where a contract will be created\n', '\t *  - an address where a contract lived, but was destroyed\n', '\t * ====\n', '\t */\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "\t\t// for accounts without code, i.e. `keccak256('')`\n", '\t\tbytes32 codehash;\n', '\n', '\n', '\t\t\tbytes32 accountHash\n', '\t\t = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\tassembly {\n', '\t\t\tcodehash := extcodehash(account)\n', '\t\t}\n', '\t\treturn (codehash != accountHash && codehash != 0x0);\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '\t * `recipient`, forwarding all available gas and reverting on errors.\n', '\t *\n', '\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '\t * imposed by `transfer`, making them unable to receive funds via\n', '\t * `transfer`. {sendValue} removes this limitation.\n', '\t *\n', '\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '\t *\n', '\t * IMPORTANT: because control is transferred to `recipient`, care must be\n', '\t * taken to not create reentrancy vulnerabilities. Consider using\n', '\t * {ReentrancyGuard} or the\n', '\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '\t */\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(\n', '\t\t\taddress(this).balance >= amount,\n', '\t\t\t"Address: insufficient balance"\n', '\t\t);\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(\n', '\t\t\tsuccess,\n', '\t\t\t"Address: unable to send value, recipient may have reverted"\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs a Solidity function call using a low level `call`. A\n', '\t * plain`call` is an unsafe replacement for a function call: use this\n', '\t * function instead.\n', '\t *\n', '\t * If `target` reverts with a revert reason, it is bubbled up by this\n', '\t * function (like regular Solidity function calls).\n', '\t *\n', '\t * Returns the raw returned data. To convert to the expected return value,\n', '\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `target` must be a contract.\n', '\t * - calling `target` with `data` must not revert.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data)\n', '\t\tinternal\n', '\t\treturns (bytes memory)\n', '\t{\n', '\t\treturn functionCall(target, data, "Address: low-level call failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '\t * `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(\n', '\t\taddress target,\n', '\t\tbytes memory data,\n', '\t\tstring memory errorMessage\n', '\t) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '\t * but also transferring `value` wei to `target`.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the calling contract must have an ETH balance of at least `value`.\n', '\t * - the called Solidity function must be `payable`.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(\n', '\t\taddress target,\n', '\t\tbytes memory data,\n', '\t\tuint256 value\n', '\t) internal returns (bytes memory) {\n', '\t\treturn\n', '\t\t\tfunctionCallWithValue(\n', '\t\t\t\ttarget,\n', '\t\t\t\tdata,\n', '\t\t\t\tvalue,\n', '\t\t\t\t"Address: low-level call with value failed"\n', '\t\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(\n', '\t\taddress target,\n', '\t\tbytes memory data,\n', '\t\tuint256 value,\n', '\t\tstring memory errorMessage\n', '\t) internal returns (bytes memory) {\n', '\t\trequire(\n', '\t\t\taddress(this).balance >= value,\n', '\t\t\t"Address: insufficient balance for call"\n', '\t\t);\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(\n', '\t\taddress target,\n', '\t\tbytes memory data,\n', '\t\tuint256 weiValue,\n', '\t\tstring memory errorMessage\n', '\t) private returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls\n', '\t\t(bool success, bytes memory returndata) = target.call{\n', '\t\t\tvalue: weiValue\n', '\t\t}(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\t// Look for revert reason and bubble it up if present\n', '\t\t\tif (returndata.length > 0) {\n', '\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '\t\t\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount)\n', '\t\texternal\n', '\t\treturns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(\n', '\t\taddress sender,\n', '\t\taddress recipient,\n', '\t\tuint256 amount\n', '\t) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(\n', '\t\taddress indexed owner,\n', '\t\taddress indexed spender,\n', '\t\tuint256 value\n', '\t);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tfunction safeTransfer(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 value\n', '\t) internal {\n', '\t\t_callOptionalReturn(\n', '\t\t\ttoken,\n', '\t\t\tabi.encodeWithSelector(token.transfer.selector, to, value)\n', '\t\t);\n', '\t}\n', '\n', '\tfunction safeTransferFrom(\n', '\t\tIERC20 token,\n', '\t\taddress from,\n', '\t\taddress to,\n', '\t\tuint256 value\n', '\t) internal {\n', '\t\t_callOptionalReturn(\n', '\t\t\ttoken,\n', '\t\t\tabi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Deprecated. This function has issues similar to the ones found in\n', '\t * {IERC20-approve}, and its usage is discouraged.\n', '\t *\n', '\t * Whenever possible, use {safeIncreaseAllowance} and\n', '\t * {safeDecreaseAllowance} instead.\n', '\t */\n', '\tfunction safeApprove(\n', '\t\tIERC20 token,\n', '\t\taddress spender,\n', '\t\tuint256 value\n', '\t) internal {\n', '\t\t// safeApprove should only be called when setting an initial allowance,\n', '\t\t// or when resetting it to zero. To increase and decrease it, use\n', "\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '\t\t// solhint-disable-next-line max-line-length\n', '\t\trequire(\n', '\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\n', '\t\t\t"SafeERC20: approve from non-zero to non-zero allowance"\n', '\t\t);\n', '\t\t_callOptionalReturn(\n', '\t\t\ttoken,\n', '\t\t\tabi.encodeWithSelector(token.approve.selector, spender, value)\n', '\t\t);\n', '\t}\n', '\n', '\tfunction safeIncreaseAllowance(\n', '\t\tIERC20 token,\n', '\t\taddress spender,\n', '\t\tuint256 value\n', '\t) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).add(\n', '\t\t\tvalue\n', '\t\t);\n', '\t\t_callOptionalReturn(\n', '\t\t\ttoken,\n', '\t\t\tabi.encodeWithSelector(\n', '\t\t\t\ttoken.approve.selector,\n', '\t\t\t\tspender,\n', '\t\t\t\tnewAllowance\n', '\t\t\t)\n', '\t\t);\n', '\t}\n', '\n', '\tfunction safeDecreaseAllowance(\n', '\t\tIERC20 token,\n', '\t\taddress spender,\n', '\t\tuint256 value\n', '\t) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(\n', '\t\t\tvalue,\n', '\t\t\t"SafeERC20: decreased allowance below zero"\n', '\t\t);\n', '\t\t_callOptionalReturn(\n', '\t\t\ttoken,\n', '\t\t\tabi.encodeWithSelector(\n', '\t\t\t\ttoken.approve.selector,\n', '\t\t\t\tspender,\n', '\t\t\t\tnewAllowance\n', '\t\t\t)\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '\t * @param token The token targeted by the call.\n', '\t * @param data The call data (encoded using abi.encode or one of its variants).\n', '\t */\n', '\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '\t\t// the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '\t\tbytes memory returndata = address(token).functionCall(\n', '\t\t\tdata,\n', '\t\t\t"SafeERC20: low-level call failed"\n', '\t\t);\n', '\t\tif (returndata.length > 0) {\n', '\t\t\t// Return data is optional\n', '\t\t\t// solhint-disable-next-line max-line-length\n', '\t\t\trequire(\n', '\t\t\t\tabi.decode(returndata, (bool)),\n', '\t\t\t\t"SafeERC20: ERC20 operation did not succeed"\n', '\t\t\t);\n', '\t\t}\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract GenericPool_YFCC_Finance is Ownable {\n', '\tusing SafeMath for uint256;\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\t/**\n', '\t * Stake section information struct\n', '\t */\n', '\tstruct Stake {\n', '\t\taddress stakeholder;\n', '\t\tuint256 createdAt;\n', '\t\taddress referredBy;\n', '\t\tuint256 stakeAmount;\n', '\t\tuint256 expiredAt;\n', '\t}\n', '\n', '\t// Pool support tokens\n', '\taddress public _stakeTokenAddress;\n', '\t// IERC20 interfaces of support tokens\n', '\tIERC20 internal _stakeToken;\n', '\n', '\t// Pool stakeholders\n', '\taddress[] public _stakeholders;\n', '\tmapping(address => Stake) internal _userStakes;\n', '\n', '\t// Pool reward contract and IERC20 interface\n', '\taddress public _rewardTokenAddress;\n', '\tIERC20 internal _rewardToken;\n', '\t// The accumulated rewards for each stakeholder.\n', '\tmapping(address => uint256) internal _rewards;\n', '\tmapping(address => uint256) internal _referRewards;\n', '\taddress public _defaultReferAddress;\n', '\n', '\t// Pool init stats\n', '\t// 0% per transaction. Set later\n', '\tuint256 public _rewardClaimFee = 0;\n', '\tuint256 public _transactionFeeInEther = 20000000000000000; // 0.02 ETH\n', '\t// 20% of 1st round of reward distribution\n', '\tuint256 public _poolRewardDistributionRate = 0;\n', '\n', '\t// Pool rewards\n', '\tuint256 internal _poolTotalStake = 0;\n', '\tuint256 internal _poolRemainingReward = 0;\n', '\tuint256 internal _poolDistributedReward = 0;\n', '\tuint256 internal _poolTotalReward = 0;\n', '\tuint256 internal _poolClaimedReward = 0;\n', '\t// Last time the pool distribute rewards to all stakeholders\n', '\tuint256 internal _lastRewardDistributionOn;\n', '\tuint256 public _poolRewardHalvingAt = 0;\n', '\t// 24 hours rewards halving\n', '\tuint256 public _poolHalvingIntervalMinutes = 1440;\n', '\tuint256 public _poolRewardDistributionIntervalMinutes = 5;\n', '\n', '\t// Pool owner\n', '\taddress public pool;\n', '\tbool public _poolLifeCircleEnded = false;\n', '\tuint256 public poolDeployedAt = 0;\n', '\n', '\t// Pool developers\n', '\tmapping(address => bool) internal _developers;\n', '\n', '\tconstructor(\n', '\t\taddress rewardTokenAddress,\n', '\t\taddress stakeTokenAddress,\n', '\t\tuint256 poolHalvingIntervalMinutes,\n', '\t\tuint256 poolRewardDistributionIntervalMinutes,\n', '\t\taddress defaultReferAddress\n', '\t) {\n', '\t\t_rewardTokenAddress = rewardTokenAddress;\n', '\t\t_rewardToken = IERC20(rewardTokenAddress);\n', '\n', '\t\t_stakeTokenAddress = stakeTokenAddress;\n', '\t\t_stakeToken = IERC20(stakeTokenAddress);\n', '\n', '\t\t// Current block\n', '\t\tpoolDeployedAt = uint40(block.timestamp);\n', '\t\t// Current contract owner & pool\n', '\t\tpool = address(this);\n', '\t\t_poolHalvingIntervalMinutes = poolHalvingIntervalMinutes;\n', '\t\t_poolRewardDistributionIntervalMinutes = poolRewardDistributionIntervalMinutes;\n', '\t\t_defaultReferAddress = defaultReferAddress;\n', '\t}\n', '\n', '\t// ---------- EVENTS ----------------\n', '\tevent TransferSuccessful(\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint256 _amount\n', '\t);\n', '\tevent TransferRewardsToPoolContract(\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\taddress indexed _rewardToken,\n', '\t\tuint256 _amount\n', '\t);\n', '\tevent StakeSuccessful(\n', '\t\taddress indexed _stakeholder,\n', '\t\taddress indexed _referral,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t);\n', '\tevent UnstakeSuccessful(address indexed _stakeholder, uint256 _timestamp);\n', '\tevent RewardClaimSuccessful(\n', '\t\taddress indexed _stakeholder,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t);\n', '\tevent RewardDistributeSuccessful(\n', '\t\taddress indexed _stakeholder,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t);\n', '\tevent RewardDistributeIgnore(\n', '\t\taddress indexed _stakeholder,\n', '\t\tuint256 _expiredAt,\n', '\t\tuint256 _timestamp\n', '\t);\n', '\tevent ReferRewardDistributeSuccessful(\n', '\t\taddress indexed _stakeholder,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t);\n', '\n', '\t// ---------- POOL ACTIONS ----------\n', '\t/**\n', '\t * @notice A method to add reward to pool contract.\n', '\t * @param _rewardAmount Amount of reward token.\n', '\t */\n', '\tfunction addPoolRewards(uint256 _rewardAmount) public onlyOwner {\n', '\t\trequire(\n', '\t\t\t_poolLifeCircleEnded == false,\n', '\t\t\t"Pool life circle has been ended."\n', '\t\t);\n', '\n', '\t\trequire(\n', '\t\t\t_rewardAmount > 0,\n', '\t\t\t"Reward token amount must be none zero value."\n', '\t\t);\n', '\n', '\t\t// Add pool init & remaining reward\n', '\t\t_poolRemainingReward = _poolRemainingReward.add(_rewardAmount);\n', '\t\t_poolTotalReward = _poolTotalReward.add(_rewardAmount);\n', '\n', '\t\t// 20% rewards will be distributed to stakeholders on 1st round\n', '\t\t_poolRewardDistributionRate = (_poolTotalReward.mul(20)).div(100);\n', '\n', '\t\t// Transfer tokens to pool from owner\n', '\t\tuint256 _allowance = _rewardToken.allowance(msg.sender, pool);\n', '\t\trequire(\n', '\t\t\t_allowance >= _rewardAmount,\n', '\t\t\t"You did not approve the reward to transfer to Pool."\n', '\t\t);\n', '\n', '\t\t_rewardToken.safeTransferFrom(msg.sender, pool, _rewardAmount);\n', '\n', '\t\t// Emit event of transfer\n', '\t\temit TransferRewardsToPoolContract(\n', '\t\t\tmsg.sender,\n', '\t\t\tpool,\n', '\t\t\t_rewardTokenAddress,\n', '\t\t\t_rewardAmount\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set reward claim fee.\n', '\t * @param _fee Reward claim fee.\n', '\t */\n', '\tfunction setRewardClaimFee(uint256 _fee) public onlyOwner {\n', '\t\trequire(_fee > 0, "Reward claim fee must be none zero value.");\n', '\t\t_rewardClaimFee = _fee;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set pool halving interval hours.\n', '\t * @param _minutes Halving interval hours.\n', '\t */\n', '\tfunction setRewardHalvingInterval(uint256 _minutes) public onlyOwner {\n', '\t\trequire(_minutes > 0, "Halving interval minutes must be none zero value.");\n', '\t\t_poolHalvingIntervalMinutes = _minutes;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set pool reward distribution interval hours.\n', '\t * @param _minutes Distribution interval hours.\n', '\t */\n', '\tfunction setRewardDistributionInterval(uint256 _minutes) public onlyOwner {\n', '\t\trequire(_minutes > 0, "Halving interval minutes must be none zero value.");\n', '\t\t_poolRewardDistributionIntervalMinutes = _minutes;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set reward claim fee in ether.\n', '\t * @param _fee Reward claim fee in ether.\n', '\t */\n', '\tfunction setTransactionFeeInEther(uint256 _fee) public onlyOwner {\n', '\t\trequire(_fee > 0, "Reward claim fee must be none zero value.");\n', '\t\t_transactionFeeInEther = _fee;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set developers of the pool\n', '\t * @param _address The developer address to add\n', '\t */\n', '\tfunction addPoolDeveloper(address _address)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\treturns (bool)\n', '\t{\n', '\t\t_developers[_address] = true;\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to remove developers from the pool\n', '\t * @param _address The developer address to add\n', '\t */\n', '\tfunction removePoolDeveloper(address _address)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\treturns (bool)\n', '\t{\n', '\t\t_developers[_address] = false;\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to set reward pool life circle\n', '\t */\n', '\tfunction endPoolLifeCircle() public onlyOwner {\n', '\t\t_poolLifeCircleEnded = true;\n', '\t}\n', '\n', '\t// ---------- STAKEHOLDERS ----------\n', '\t/**\n', '\t * @notice A method to check if an address is a stakeholder.\n', '\t * @param _address The address to verify.\n', '\t * @return exists_ Exist or not\n', '\t * @return index_ Access index of stakeholder\n', '\t */\n', '\tfunction isStakeholder(address _address)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (bool exists_, uint256 index_)\n', '\t{\n', '\t\t// Find stakeholder\n', '\t\tfor (uint256 s = 0; s < _stakeholders.length; s += 1) {\n', '\t\t\tif (_address == _stakeholders[s]) return (true, s);\n', '\t\t}\n', '\n', '\t\treturn (false, 0);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to add a stakeholder.\n', '\t * @param _stakeholder The stakeholder to add.\n', '\t * @param _referredBy The user wallet to get refer bonus\n', '\t * @param _amount The amount of stake token\n', '\t * @param _timestamp The timestamp when stakeholder added to pool\n', '\t */\n', '\tfunction addStakeholder(\n', '\t\taddress _stakeholder,\n', '\t\taddress _referredBy,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t) internal {\n', '\t\t(bool exists_, ) = isStakeholder(_stakeholder);\n', '\t\tif (!exists_) {\n', '\t\t\t// Add new stakeholder\n', '\t\t\t_stakeholders.push(_stakeholder);\n', '\n', '\t\t\t// Add new stake information\n', '\t\t\tStake memory newStake = Stake({\n', '\t\t\t\tstakeholder: _stakeholder,\n', '\t\t\t\tcreatedAt: _timestamp,\n', '\t\t\t\treferredBy: _referredBy,\n', '\t\t\t\tstakeAmount: _amount,\n', '\t\t\t\texpiredAt: 0\n', '\t\t\t});\n', '\n', '\t\t\t_userStakes[_stakeholder] = newStake;\n', '\t\t\t_rewards[_stakeholder] = 0;\n', '\t\t} else {\n', '\t\t\t_userStakes[_stakeholder].stakeAmount = _userStakes[_stakeholder]\n', '\t\t\t\t.stakeAmount\n', '\t\t\t\t.add(_amount);\n', '\t\t\t// Reset expiredAt value\n', '\t\t\t_userStakes[_stakeholder].expiredAt = 0;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to the stake ERC20 token to get reward.\n', '\t * @return success_ Whether the address is a stakeholder\n', '\t * @return stakeAmount_ Stake amount\n', '\t */\n', '\tfunction stake(address _referral, uint256 _amount)\n', '\t\tpublic\n', '\t\tpayable\n', '\t\treturns (bool success_, uint256 stakeAmount_)\n', '\t{\n', '\t\t// Allow claim fee if any\n', '\t\tif (_transactionFeeInEther > 0) {\n', '\t\t\trequire(\n', '\t\t\t\tmsg.value >= _transactionFeeInEther,\n', '\t\t\t\t"You need to pay transaction to claim your rewards."\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\trequire(\n', '\t\t\t_poolLifeCircleEnded == false,\n', '\t\t\t"Pool life circle has been ended."\n', '\t\t);\n', '\n', '\t\taddress stakeholder = msg.sender;\n', '\t\trequire(_amount > 0, "Staking token amount must be none zero value.");\n', '\n', '\t\trequire(\n', '\t\t\t_referral != stakeholder,\n', '\t\t\t"You can not refer yourself into this pool."\n', '\t\t);\n', '\n', '\t\t// If no referral set stake referral to global settings\n', '\t\tif (_referral == address(0x0000000000000000000000000000000000000000)) {\n', '\t\t\t_referral = _defaultReferAddress;\n', '\t\t} else {\n', '\t\t\t// Check if referral is a valid stakeholder\n', '\t\t\t(bool exists_, ) = isStakeholder(_referral);\n', '\t\t\tif (!exists_) {\n', '\t\t\t\t_referral = _defaultReferAddress;\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\t// Check available token of sender and withdraw to the pool\n', '\t\tuint256 allowance = _stakeToken.allowance(msg.sender, pool);\n', '\t\trequire(\n', '\t\t\tallowance >= _amount,\n', '\t\t\t"You have reach the token allowance to transfer to contract pool. Please approve and try again."\n', '\t\t);\n', '\n', '\t\t// Transfer ERC20 tokens to pool => locked amount pool\n', '\t\t_stakeToken.safeTransferFrom(stakeholder, pool, _amount);\n', '\t\t// Emit transfer event\n', '\t\temit TransferSuccessful(stakeholder, pool, _amount);\n', '\n', '\t\tuint256 timestamp = block.timestamp;\n', '\n', '\t\t// Add to stakeholders\n', '\t\taddStakeholder(stakeholder, _referral, _amount, timestamp);\n', '\t\temit StakeSuccessful(stakeholder, _referral, _amount, timestamp);\n', '\n', '\t\t// Update staking total amount\n', '\t\t_poolTotalStake = _poolTotalStake.add(_amount);\n', '\t\treturn (true, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to the stake ERC20 token to get reward.\n', '\t */\n', '\tfunction unstakeInternal(address _stakeholder, uint256 timestamp)\n', '\t\tinternal\n', '\t\treturns (bool success_, uint256 expiredAt_)\n', '\t{\n', '\t\t(bool exists_, ) = isStakeholder(_stakeholder);\n', '\t\trequire(exists_, "You are not stakeholder of this pool.");\n', '\t\tif (_userStakes[_stakeholder].expiredAt > 0) {\n', '\t\t\treturn (true, _userStakes[_stakeholder].expiredAt);\n', '\t\t}\n', '\n', '\t\t_userStakes[_stakeholder].expiredAt = timestamp;\n', '\t\treturn (true, timestamp);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to the stake ERC20 token to get reward.\n', '\t * @return success_ Action result\n', '\t * @return expiredAt_ Expired time\n', '\t */\n', '\tfunction unstake()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\treturns (bool success_, uint256 expiredAt_)\n', '\t{\n', '\t\t// Allow transaction fee if any\n', '\t\tif (_transactionFeeInEther > 0) {\n', '\t\t\trequire(\n', '\t\t\t\tmsg.value >= _transactionFeeInEther,\n', '\t\t\t\t"You need to pay transaction to claim your rewards."\n', '\t\t\t);\n', '\t\t}\n', '\t\t// Unstake token\n', '\t\taddress stakeholder = msg.sender;\n', '\t\tuint256 timestamp = block.timestamp;\n', '\t\t(bool success__, uint256 expiredAt__) = unstakeInternal(\n', '\t\t\tstakeholder,\n', '\t\t\ttimestamp\n', '\t\t);\n', '\n', '\t\tif (success_) {\n', '\t\t\temit UnstakeSuccessful(stakeholder, timestamp);\n', '\t\t\t// Update total stake pool\n', '\t\t\t_poolTotalStake = _poolTotalStake.sub(\n', '\t\t\t\t_userStakes[stakeholder].stakeAmount\n', '\t\t\t);\n', '\t\t}\n', '\t\t// Return a success result\n', '\t\treturn (success__, expiredAt__);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to the unstake stake ERC20 token to get staking reward.\n', '\t */\n', '\tfunction unstakeAndClaimReward()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\treturns (bool success_, uint256 claimAmount_)\n', '\t{\n', '\t\t// Allow transaction fee if any\n', '\t\tif (_transactionFeeInEther > 0) {\n', '\t\t\trequire(\n', '\t\t\t\tmsg.value >= _transactionFeeInEther,\n', '\t\t\t\t"You need to pay transaction to claim your rewards."\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\t// Unstake token\n', '\t\taddress stakeholder = msg.sender;\n', '\t\tuint256 timestamp = block.timestamp;\n', '\t\t(bool success__, ) = unstakeInternal(stakeholder, timestamp);\n', '\n', '\t\tif (!success__) {\n', '\t\t\treturn (false, 0);\n', '\t\t}\n', '\n', '\t\t// Update pool staking amount\n', '\t\t_poolTotalStake = _poolTotalStake.sub(\n', '\t\t\t_userStakes[stakeholder].stakeAmount\n', '\t\t);\n', '\t\t// Claim all reward\n', '\t\tuint256 _reward = rewardOf(stakeholder);\n', '\t\tuint256 _bonus = referBonusOf(stakeholder);\n', '\t\tuint256 unclaimReward = _reward.add(_bonus);\n', '\n', '\t\t// If reward is available to transfer\n', '\t\tif (unclaimReward > 0) {\n', '\t\t\t_rewards[stakeholder] = 0;\n', '\t\t\t_referRewards[stakeholder] = 0;\n', '\t\t\ttransferRewardInternal(stakeholder, unclaimReward, timestamp);\n', '\t\t}\n', '\n', '\t\treturn (true, unclaimReward);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to claim refer bonus reward\n', '\t *  @return success_ Transaction result is success or fail\n', '\t * @return amount_ Amount of refer bonus\n', '\t */\n', '\tfunction claimReferReward()\n', '\t\tpublic\n', '\t\treturns (bool success_, uint256 amount_)\n', '\t{\n', '\t\taddress claimer = msg.sender;\n', '\t\tuint256 timestamp = block.timestamp;\n', '\n', '\t\tuint256 _referReward = referBonusOf(claimer);\n', '\t\trequire(_referReward > 0, "You have no refer bonus to claim.");\n', '\n', '\t\t_referRewards[claimer] = 0;\n', '\t\ttransferRewardInternal(claimer, _referReward, timestamp);\n', '\t\treturn (true, _referReward);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method allow stakeholder to withdraw their stake tokens\n', '\t */\n', '\tfunction withdraw()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\treturns (bool success_, uint256 withdrawAmount_)\n', '\t{\n', '\t\t// Allow transaction fee if any\n', '\t\tif (_transactionFeeInEther > 0) {\n', '\t\t\trequire(\n', '\t\t\t\tmsg.value >= _transactionFeeInEther,\n', '\t\t\t\t"You need to pay transaction to claim your rewards."\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\taddress _stakeholder = msg.sender;\n', '\t\tuint256 _timestamp = block.timestamp;\n', '\t\t(bool exists_, ) = isStakeholder(_stakeholder);\n', '\t\trequire(exists_, "You are not stakeholder of this pool.");\n', '\t\trequire(\n', '\t\t\t_userStakes[_stakeholder].stakeAmount > 0,\n', '\t\t\t"You have withdraw your token."\n', '\t\t);\n', '\n', '\t\tuint256 _withdrawAmount = _userStakes[_stakeholder].stakeAmount;\n', '\n', '\t\t_userStakes[_stakeholder].stakeAmount = 0;\n', '\t\t_userStakes[_stakeholder].expiredAt = _timestamp;\n', '\t\t_poolTotalStake = _poolTotalStake.sub(_withdrawAmount);\n', '\t\t_rewardToken.safeTransfer(_stakeholder, _withdrawAmount);\n', '\n', '\t\treturn (true, _withdrawAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to withdraw developer assets from the pool\n', '\t * @param _amount Amount of withdrawal\n', '\t */\n', '\tfunction developerWithdraw(uint256 _amount) public returns (bool) {\n', '\t\trequire(msg.sender != pool, "Invalid address to withdraw.");\n', '\t\trequire(\n', '\t\t\t_developers[msg.sender] == true,\n', '\t\t\t"Your are not a developer of this pool."\n', '\t\t);\n', '\n', '\t\trequire(address(this).balance > _amount, "Invalid amount to withdraw");\n', '\t\tmsg.sender.transfer(_amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to get stakeholder information\n', '\t * @return address_ Stakeholder address\n', '\t * @return stakeAmount_ Staking amount\n', '\t * @return createdAt_ Staking created date\n', '\t * @return expiredAt_ Expiration time\n', '\t * @return reward_ Earned rewards\n', '\t */\n', '\tfunction myPoolInformation()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (\n', '\t\t\taddress address_,\n', '\t\t\tuint256 stakeAmount_,\n', '\t\t\tuint256 createdAt_,\n', '\t\t\tuint256 expiredAt_,\n', '\t\t\tuint256 reward_,\n', '\t\t\tuint256 referReward_\n', '\t\t)\n', '\t{\n', '\t\taddress stakeholder = msg.sender;\n', '\t\t(bool exists_, ) = isStakeholder(stakeholder);\n', '\t\tif (!exists_) {\n', '\t\t\treturn (0x0000000000000000000000000000000000000000, 0, 0, 0, 0, 0);\n', '\t\t}\n', '\n', '\t\tuint256 _reward = rewardOf(stakeholder);\n', '\t\tuint256 _referReward = referBonusOf(stakeholder);\n', '\t\treturn (\n', '\t\t\t_userStakes[stakeholder].stakeholder,\n', '\t\t\t_userStakes[stakeholder].stakeAmount,\n', '\t\t\t_userStakes[stakeholder].createdAt,\n', '\t\t\t_userStakes[stakeholder].expiredAt,\n', '\t\t\t_reward,\n', '\t\t\t_referReward\n', '\t\t);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Transfer function to transfer reward token to stakeholder\n', '\t * @param _stakeholder Address of stakeholder to transfer\n', '\t * @param _amount Amount of reward to claim\n', '\t * @param _timestamp Timestamp to transfer\n', '\t */\n', '\tfunction transferRewardInternal(\n', '\t\taddress _stakeholder,\n', '\t\tuint256 _amount,\n', '\t\tuint256 _timestamp\n', '\t) internal {\n', '\t\t_rewardToken.safeTransfer(_stakeholder, _amount);\n', '\t\temit RewardClaimSuccessful(_stakeholder, _amount, _timestamp);\n', '\t}\n', '\n', '\t// ---------- REWARDS ----------\n', '\t/**\n', '\t * @notice A method to allow a stakeholder to check his rewards.\n', '\t * @param _stakeholder The stakeholder to check rewards for.\n', '\t * @return reward_ Rewards of stakeholder\n', '\t */\n', '\tfunction rewardOf(address _stakeholder)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256 reward_)\n', '\t{\n', '\t\treturn _rewards[_stakeholder];\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to allow a stakeholder to check his bonus rewards.\n', '\t * @param _stakeholder The stakeholder to check rewards for.\n', '\t * @return bonus_ Rewards of stakeholder\n', '\t */\n', '\tfunction referBonusOf(address _stakeholder)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256 bonus_)\n', '\t{\n', '\t\treturn _referRewards[_stakeholder];\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A simple method that calculates the rewards for each stakeholder.\n', '\t * @param _stakeAmount The stakeholder staking amount to calculate rewards.\n', '\t * @param _availableReward Pool available rewards.\n', '\t */\n', '\tfunction calculateReward(uint256 _stakeAmount, uint256 _availableReward)\n', '\t\tinternal\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t{\n', '\t\t// When all users unstake\n', '\t\tif (_poolTotalStake == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 _reward = (_availableReward.mul(_stakeAmount)).div(\n', '\t\t\t_poolTotalStake\n', '\t\t);\n', '\n', '\t\treturn _reward;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to distribute rewards to all stakeholders.\n', '\t */\n', '\tfunction distributeRewards() public onlyOwner {\n', '\t\tuint256 timestamp = block.timestamp;\n', '\t\tuint256 totalDistributedRewards = 0;\n', '\t\tif (_poolRewardHalvingAt > 0 && timestamp >= _poolRewardHalvingAt && _stakeholders.length > 0) {\n', '\t\t\t// Do reward halving\n', '\t\t\t_poolRewardDistributionRate = (_poolRewardDistributionRate.mul(50))\n', '\t\t\t\t.div(100);\n', '\t\t}\n', '\n', '\t\tuint256 availableReward = (\n', '\t\t\t_poolRewardDistributionRate.mul(_poolRewardDistributionIntervalMinutes)\n', '\t\t)\n', '\t\t\t.div(_poolHalvingIntervalMinutes);\n', '\n', '\t\t// Loop for all staking slots base on support stake token list\n', '\t\tfor (uint256 t = 0; t < _stakeholders.length; t += 1) {\n', '\t\t\tStake storage _stake = _userStakes[_stakeholders[t]];\n', '\n', '\t\t\tif (_stake.expiredAt > 0 && timestamp > _stake.expiredAt) {\n', '\t\t\t\temit RewardDistributeIgnore(\n', '\t\t\t\t\t_stake.stakeholder,\n', '\t\t\t\t\t_stake.expiredAt,\n', '\t\t\t\t\ttimestamp\n', '\t\t\t\t);\n', '\n', '\t\t\t\tcontinue;\n', '\t\t\t}\n', '\n', '\t\t\t// Calculate stakeholder reward\n', '\t\t\tuint256 reward = calculateReward(\n', '\t\t\t\t_stake.stakeAmount,\n', '\t\t\t\tavailableReward\n', '\t\t\t);\n', '\n', '\t\t\t// Add it to reward hub\n', '\t\t\t_rewards[_stake.stakeholder] = _rewards[_stake.stakeholder].add(\n', '\t\t\t\treward\n', '\t\t\t);\n', '\n', '\t\t\temit RewardDistributeSuccessful(\n', '\t\t\t\t_stake.stakeholder,\n', '\t\t\t\treward,\n', '\t\t\t\ttimestamp\n', '\t\t\t);\n', '\n', '\t\t\ttotalDistributedRewards = totalDistributedRewards.add(reward);\n', '\n', '\t\t\t// Add refer bonus\n', '\t\t\tif (\n', '\t\t\t\t_stake.referredBy !=\n', '\t\t\t\taddress(0x0000000000000000000000000000000000000000)\n', '\t\t\t) {\n', '\t\t\t\t// Get 5% bonus from user you refer to the pool\n', '\t\t\t\tuint256 bonusReward = (reward.mul(5)).div(100);\n', '\t\t\t\t_referRewards[_stake.referredBy] = _referRewards[_stake\n', '\t\t\t\t\t.referredBy]\n', '\t\t\t\t\t.add(bonusReward);\n', '\n', '\t\t\t\t// Emit event\n', '\t\t\t\temit ReferRewardDistributeSuccessful(\n', '\t\t\t\t\t_stake.referredBy,\n', '\t\t\t\t\tbonusReward,\n', '\t\t\t\t\ttimestamp\n', '\t\t\t\t);\n', '\n', '\t\t\t\ttotalDistributedRewards = totalDistributedRewards.add(\n', '\t\t\t\t\tbonusReward\n', '\t\t\t\t);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\t// 5% of rewards will be add to pool dev address\n', '\t\tuint256 devRewards = (totalDistributedRewards.mul(5)).div(100);\n', '\t\t_rewards[_defaultReferAddress] = _rewards[_defaultReferAddress].add(\n', '\t\t\tdevRewards\n', '\t\t);\n', '\n', '\t\ttotalDistributedRewards = totalDistributedRewards.add(devRewards);\n', '\t\t// Update some pool information\n', '\t\t_poolRemainingReward = _poolRemainingReward.sub(\n', '\t\t\ttotalDistributedRewards\n', '\t\t);\n', '\t\t_poolDistributedReward = _poolDistributedReward.add(\n', '\t\t\ttotalDistributedRewards\n', '\t\t);\n', '\n', '\t\t_lastRewardDistributionOn = timestamp;\n', '\t\tif (_poolRewardHalvingAt == 0 || timestamp >= _poolRewardHalvingAt) {\n', '\t\t\t// Minus 1 minute of the time\n', '\t\t\tuint256 nextHalvingTimestamp = (60 * _poolHalvingIntervalMinutes) - 60;\n', '\t\t\t_poolRewardHalvingAt = _lastRewardDistributionOn.add(\n', '\t\t\t\tnextHalvingTimestamp\n', '\t\t\t);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to claim stakeholder reward\n', '\t * @return success_ Claim result true/false\n', '\t */\n', '\tfunction claimReward()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\treturns (bool success_, uint256 amount_)\n', '\t{\n', '\t\t// Allow transaction fee if any\n', '\t\tif (_transactionFeeInEther > 0) {\n', '\t\t\trequire(\n', '\t\t\t\tmsg.value >= _transactionFeeInEther,\n', '\t\t\t\t"You need to pay transaction to claim your rewards."\n', '\t\t\t);\n', '\t\t}\n', '\n', '\t\t// Check validation\n', '\t\taddress stakeholder = msg.sender;\n', '\t\t// Get current reward\n', '\t\tuint256 _reward = rewardOf(stakeholder);\n', '\t\tuint256 _bonus = referBonusOf(stakeholder);\n', '\t\tuint256 totalRewards = _reward.add(_bonus);\n', '\t\trequire(totalRewards > 0, "You do not have any reward to claim.");\n', '\n', '\t\t// Process to transfer reward and update remaining unclaim reward\n', '\t\tuint256 _receiveAmount = totalRewards;\n', '\t\tuint256 timestamp = block.timestamp;\n', '\n', '\t\t// Subtract claim fee\n', '\t\tif (_rewardClaimFee > 0) {\n', '\t\t\tuint256 _fee = (totalRewards.mul(_rewardClaimFee)).div(100);\n', '\t\t\t_receiveAmount = totalRewards.sub(_fee);\n', '\t\t}\n', '\n', '\t\t// Update new reward balances\n', '\t\t_rewards[stakeholder] = 0;\n', '\t\t_referRewards[stakeholder] = 0;\n', '\n', '\t\t// Transfer reward tokens\n', '\t\ttransferRewardInternal(stakeholder, _receiveAmount, timestamp);\n', '\t\t_poolClaimedReward = _poolClaimedReward.add(_receiveAmount);\n', '\n', '\t\t// Emit event\n', '\t\temit RewardClaimSuccessful(stakeholder, _receiveAmount, timestamp);\n', '\t\treturn (true, _receiveAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice A method to get pool reward stats\n', '\t * @return lastRewardDistributionOn_ The last time when pool distribute rewards to all stakeholders\n', '\t * @return poolTotalReward_ Total pool reward amount\n', '\t * @return poolRemainingReward_ Total remaining reward for staking\n', '\t * @return poolDistributedReward_ Total\n', '\t * @return poolClaimedReward_ Total claimed reward from stakeholders\n', '\t */\n', '\tfunction getPoolInformation()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 lastRewardDistributionOn_,\n', '\t\t\tuint256 poolTotalReward_,\n', '\t\t\tuint256 poolRemainingReward_,\n', '\t\t\tuint256 poolDistributedReward_,\n', '\t\t\tuint256 poolClaimedReward_,\n', '\t\t\tuint256 poolNextHalvingAt_,\n', '\t\t\tuint256 poolNumberOfStakeholders_,\n', '\t\t\tuint256 poolTotalStake_,\n', '\t\t\tuint256 poolInitialRewards_\n', '\t\t)\n', '\t{\n', '\t\tuint256 _poolNumberOfStakeholders = _stakeholders.length;\n', '\t\treturn (\n', '\t\t\t_lastRewardDistributionOn,\n', '\t\t\t_poolTotalReward,\n', '\t\t\t_poolRemainingReward,\n', '\t\t\t_poolDistributedReward,\n', '\t\t\t_poolClaimedReward,\n', '\t\t\t_poolRewardHalvingAt,\n', '\t\t\t_poolNumberOfStakeholders,\n', '\t\t\t_poolTotalStake,\n', '\t\t\t_poolRewardDistributionRate\n', '\t\t);\n', '\t}\n', '}']