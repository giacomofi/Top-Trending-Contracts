['pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', ' interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external  view returns (uint256);\n', '  function transfer(address to, uint256 value) external  returns (bool ok);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool ok);\n', '  function approve(address spender, uint256 value)external returns (bool ok);\n', '}\n', '\n', '\n', 'contract Sale {\n', '    using SafeMath for uint256;\n', '\n', '   uint256 public totalTokenForSell=5200000000000000000000000; //52,00,000 SWG for sell\n', '  \n', '    uint256 public totalTokensSold;\n', '    ERC20 public Token;\n', '    address payable public owner;\n', '  \n', '    uint256 public collectedETH;\n', '    uint256 public startDate;\n', '    bool public startDistribution;\n', '    mapping(address=>uint256)public tokensBought;\n', '   \n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender==owner,"You aren\'t owner");\n', '        _;\n', '    }\n', '    \n', '    \n', '   \n', '    \n', '    modifier distributionStarted(){\n', '        require(startDistribution==true,"Token distribution has not started yet");\n', '        _;\n', '    }\n', '  \n', '  \n', '\n', '    constructor(address _wallet) public {\n', '        owner=msg.sender;\n', '        Token=ERC20(_wallet);\n', '\n', '    }\n', '\n', '   \n', '    // receive FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    receive () payable external {\n', '        require(startDate>0 && now.sub(startDate) <= 7 days);\n', '        require(unsoldTokens()>0 && availableSWG()>=unsoldTokens());\n', '        require(msg.value>= 1 ether && msg.value <= 50 ether);\n', '         \n', '          uint256 amount;\n', '          \n', '      if(now.sub(startDate)  <= 1 days)\n', '      {\n', '         amount = msg.value.mul(1400);\n', '      }\n', '      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '      {\n', '           amount = msg.value.mul(1375);\n', '      }\n', '      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '      {\n', '           amount = msg.value.mul(1350);\n', '      }\n', '      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '      {\n', '           amount = msg.value.mul(1325);\n', '      }\n', '      else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '      {\n', '           amount = msg.value.mul(1300);\n', '      }\n', '       else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days)\n', '      {\n', '           amount = msg.value.mul(1275);\n', '      }\n', '       else if(now.sub(startDate) > 6 days)\n', '      {\n', '           amount = msg.value.mul(1250);\n', '      }\n', '        require(amount<=unsoldTokens() && amount<=availableSWG());\n', '        totalTokensSold =totalTokensSold.add(amount);\n', '        collectedETH=collectedETH.add(msg.value);\n', '        tokensBought[msg.sender]=tokensBought[msg.sender].add(amount);\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the \n', '    \n', '    function contribute() external payable {\n', '       require(startDate>0 && now.sub(startDate) <= 7 days);\n', '        require(unsoldTokens()>0 && availableSWG()>=unsoldTokens());\n', '        require(msg.value>= 1 ether && msg.value <= 50 ether);\n', '        \n', '        uint256 amount;\n', '        \n', '       if(now.sub(startDate)  <= 1 days)\n', '      {\n', '         amount = msg.value.mul(1400);\n', '      }\n', '      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '      {\n', '           amount = msg.value.mul(1375);\n', '      }\n', '      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '      {\n', '           amount = msg.value.mul(1350);\n', '      }\n', '      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '      {\n', '           amount = msg.value.mul(1325);\n', '      }\n', '      else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '      {\n', '           amount = msg.value.mul(1300);\n', '      }\n', '       else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days)\n', '      {\n', '           amount = msg.value.mul(1275);\n', '      }\n', '       else if(now.sub(startDate) > 6 days)\n', '      {\n', '           amount = msg.value.mul(1250);\n', '      }\n', '   \n', '       require(amount<=unsoldTokens()  && amount<=availableSWG());\n', '       totalTokensSold =totalTokensSold.add(amount);\n', '       collectedETH=collectedETH.add(msg.value);\n', '       tokensBought[msg.sender]=tokensBought[msg.sender].add(amount);\n', '    }\n', '    \n', '    \n', '    //function to claim tokens bought during the sale.\n', '    function claimTokens()public distributionStarted{\n', '        require(tokensBought[msg.sender]>0);\n', '        uint256 amount=tokensBought[msg.sender];\n', '        tokensBought[msg.sender]=0;\n', '        Token.transfer(msg.sender,amount);\n', '    }\n', '    \n', '    //function to get the current price of token per ETH\n', '    \n', '    function getPrice()public view returns(uint256){\n', '        if(startDate==0)\n', '        {\n', '            return 0;\n', '        }\n', '        else if(now.sub(startDate)  <= 1 days)\n', '        {\n', '         return 1400;\n', '        }\n', '        else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '        {\n', '           return 1375;\n', '        }\n', '        else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '        {\n', '           return 1350;\n', '        }\n', '        else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '        {\n', '           return 1325;\n', '        }\n', '         else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '        {\n', '           return 1300;\n', '        }\n', '         else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days){\n', '            return 1275;\n', '        }\n', '          else if(now.sub(startDate) > 6 days){\n', '             return 1250;\n', '         }\n', '    }\n', '    \n', '    //function to withdraw collected ETH\n', '     //only owner can call this function\n', '     \n', '    function withdrawCollectedETH()public onlyOwner{\n', '        require(collectedETH>0 && address(this).balance>=collectedETH);\n', '        uint256 amount=collectedETH;\n', '        collectedETH=0;\n', '        owner.transfer(amount);\n', '    }\n', '    \n', '    //function to withdraw unsold SWG in this contract\n', '     //only owner can call this function\n', '     \n', '    function withdrawUnsoldSWG()public onlyOwner{\n', '        require(unsoldTokens()>0 && availableSWG()>=unsoldTokens());\n', '        Token.transfer(owner,unsoldTokens());\n', '    }\n', '    \n', '    //function to start the Sale\n', '    //only owner can call this function\n', '     \n', '    function startSale()public onlyOwner{\n', '        require(startDate==0);\n', '        startDate=now;\n', '    }\n', '    //function to start the token distribution \n', '    //only owner can call this function\n', '    function startTokenDistribution()public onlyOwner{\n', '        require(startDistribution==false,"Distribution is already started");\n', '        startDistribution=true;\n', '    }\n', '    \n', '    //function to return the available SWG in the contract\n', '    function availableSWG()public view returns(uint256){\n', '        return Token.balanceOf(address(this));\n', '    }\n', '    \n', '    //function to return the amount of unsold SWG tokens\n', '    function unsoldTokens()public view returns(uint256){\n', '        return totalTokenForSell.sub(totalTokensSold);\n', '    }\n', '\n', '}']