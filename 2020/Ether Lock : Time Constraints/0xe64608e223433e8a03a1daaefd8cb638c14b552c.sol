['# @version 0.2.7\n', '"""\n', '@title Curve Registry PoolInfo\n', '@license MIT\n', '@author Curve.Fi\n', '@notice Large getters designed for off-chain use\n', '"""\n', '\n', 'MAX_COINS: constant(int128) = 8\n', '\n', '\n', 'interface AddressProvider:\n', '    def get_registry() -> address: view\n', '\n', 'interface Registry:\n', '    def get_coins(_pool: address) -> address[MAX_COINS]: view\n', '    def get_underlying_coins(_pool: address) -> address[MAX_COINS]: view\n', '    def get_decimals(_pool: address) -> uint256[MAX_COINS]: view\n', '    def get_underlying_decimals(_pool: address) -> uint256[MAX_COINS]: view\n', '    def get_balances(_pool: address) -> uint256[MAX_COINS]: view\n', '    def get_underlying_balances(_pool: address) -> uint256[MAX_COINS]: view\n', '    def get_rates(_pool: address) -> uint256[MAX_COINS]: view\n', '    def get_lp_token(_pool: address) -> address: view\n', '    def get_parameters(_pool: address) -> PoolParams: view\n', '\n', '\n', 'struct PoolParams:\n', '    A: uint256\n', '    future_A: uint256\n', '    fee: uint256\n', '    admin_fee: uint256\n', '    future_fee: uint256\n', '    future_admin_fee: uint256\n', '    future_owner: address\n', '    initial_A: uint256\n', '    initial_A_time: uint256\n', '    future_A_time: uint256\n', '\n', 'struct PoolInfo:\n', '    balances: uint256[MAX_COINS]\n', '    underlying_balances: uint256[MAX_COINS]\n', '    decimals: uint256[MAX_COINS]\n', '    underlying_decimals: uint256[MAX_COINS]\n', '    rates: uint256[MAX_COINS]\n', '    lp_token: address\n', '    params: PoolParams\n', '\n', 'struct PoolCoins:\n', '    coins: address[MAX_COINS]\n', '    underlying_coins: address[MAX_COINS]\n', '    decimals: uint256[MAX_COINS]\n', '    underlying_decimals: uint256[MAX_COINS]\n', '\n', '\n', 'address_provider: public(AddressProvider)\n', '\n', '\n', '@external\n', 'def __init__(_provider: address):\n', '    self.address_provider = AddressProvider(_provider)\n', '\n', '\n', '@view\n', '@external\n', 'def get_pool_coins(_pool: address) -> PoolCoins:\n', '    """\n', '    @notice Get information on coins in a pool\n', '    @dev Empty values in the returned arrays may be ignored\n', '    @param _pool Pool address\n', '    @return Coin addresses, underlying coin addresses, underlying coin decimals\n', '    """\n', '    registry: address = self.address_provider.get_registry()\n', '\n', '    return PoolCoins({\n', '        coins: Registry(registry).get_coins(_pool),\n', '        underlying_coins: Registry(registry).get_underlying_coins(_pool),\n', '        decimals: Registry(registry).get_decimals(_pool),\n', '        underlying_decimals: Registry(registry).get_underlying_decimals(_pool),\n', '    })\n', '\n', '\n', '@view\n', '@external\n', 'def get_pool_info(_pool: address) -> PoolInfo:\n', '    """\n', '    @notice Get information on a pool\n', '    @dev Reverts if the pool address is unknown\n', '    @param _pool Pool address\n', '    @return balances, underlying balances, decimals, underlying decimals,\n', '            lp token, amplification coefficient, fees\n', '    """\n', '    registry: address = self.address_provider.get_registry()\n', '\n', '    return PoolInfo({\n', '        balances: Registry(registry).get_balances(_pool),\n', '        underlying_balances: Registry(registry).get_underlying_balances(_pool),\n', '        decimals: Registry(registry).get_decimals(_pool),\n', '        underlying_decimals: Registry(registry).get_underlying_decimals(_pool),\n', '        rates: Registry(registry).get_rates(_pool),\n', '        lp_token: Registry(registry).get_lp_token(_pool),\n', '        params: Registry(registry).get_parameters(_pool),\n', '    })']