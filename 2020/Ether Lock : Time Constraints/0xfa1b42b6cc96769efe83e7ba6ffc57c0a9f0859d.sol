['pragma solidity ^0.6.0;\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', ' interface ERC20 {\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function allowance(address owner, address spender) external  view returns (uint);\n', ' function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function transferFrom(address from, address to, uint value) external returns (bool ok);\n', '  function approve(address spender, uint value)external returns (bool ok);\n', '}\n', '\n', '\n', 'contract Sale {\n', '    using SafeMath for uint256;\n', '\n', '  \n', '    uint256 public totalSold;\n', '    ERC20 public Token;\n', '    address payable public owner;\n', '  \n', '    uint256 public collectedETH;\n', '    uint256 public startDate;\n', '\n', '  \n', '  \n', '\n', '    constructor(address _wallet) public {\n', '        owner=msg.sender;\n', '        Token=ERC20(_wallet);\n', '\n', '    }\n', '\n', '   \n', '    // receive FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    receive () payable external {\n', '        require(startDate>0 && now.sub(startDate) <= 7 days);\n', '        require(availableOBR()>0);\n', '        require(msg.value>= 1 ether && msg.value <= 50 ether);\n', '         \n', '          uint256 amount;\n', '          \n', '      if(now.sub(startDate)  <= 1 days)\n', '      {\n', '          uint256 rate= (uint256(2000000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      \n', '      }\n', '      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '      {\n', '          uint256 rate= (uint256(1940000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '      {\n', '           uint256 rate= (uint256(1880000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '      {\n', '           uint256 rate= (uint256(1830000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '      {\n', '           uint256 rate= (uint256(1780000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '       else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days)\n', '      {\n', '           uint256 rate= (uint256(1730000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '       else if(now.sub(startDate) > 6 days && now.sub(startDate) <= 7 days)\n', '      {\n', '           uint256 rate= (uint256(1690000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      } else{\n', '          amount=0;\n', '      }\n', '        require(amount<=availableOBR());\n', '        totalSold =totalSold.add(amount);\n', '        collectedETH=collectedETH.add(msg.value);\n', '        Token.transfer(msg.sender, amount);\n', '    }\n', '    \n', '   \n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the \n', '    \n', '    function contribute() external payable {\n', '       require(startDate>0 && now.sub(startDate) <= 7 days);\n', '        require(availableOBR()>0);\n', '        require(msg.value>= 1 ether && msg.value <= 50 ether);\n', '        \n', '        uint256 amount;\n', '        \n', '       if(now.sub(startDate)  <= 1 days)\n', '      {\n', '          uint256 rate= (uint256(2000000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      \n', '      }\n', '      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '      {\n', '          uint256 rate= (uint256(1940000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '      {\n', '           uint256 rate= (uint256(1880000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '      {\n', '           uint256 rate= (uint256(1830000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '      else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '      {\n', '           uint256 rate= (uint256(1780000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '       else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days)\n', '      {\n', '           uint256 rate= (uint256(1730000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      }\n', '       else if(now.sub(startDate) > 6 days && now.sub(startDate) <= 7 days)\n', '      {\n', '           uint256 rate= (uint256(1690000000000000000));\n', '          amount = (msg.value.mul(rate))/10**18;\n', '      } else{\n', '          amount=0;\n', '      }\n', '   \n', '        require(amount<=availableOBR());\n', '        totalSold =totalSold.add(amount);\n', '        collectedETH=collectedETH.add(msg.value);\n', '        Token.transfer(msg.sender, amount);\n', '    }\n', '    \n', '    //function to get the current price of token per ETH\n', '    \n', '    function getPrice()public view returns(uint256){\n', '        if(startDate==0)\n', '        {\n', '            return 0;\n', '        }\n', '         else if(now.sub(startDate)  <= 1 days)\n', '      {\n', '         return 2000000000000000000;\n', '        \n', '      \n', '      }\n', '      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\n', '      {\n', '        \n', '          return 1940000000000000000;\n', '      }\n', '      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\n', '      {\n', '          \n', '           return 1880000000000000000;\n', '      }\n', '      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\n', '      {\n', '         \n', '          return 1830000000000000000;\n', '      }\n', '      else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days)\n', '      {\n', '         \n', '          return 1780000000000000000;\n', '      }\n', '       else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days)\n', '      {\n', '         \n', '          return 1730000000000000000;\n', '      }\n', '       else if(now.sub(startDate) > 6 days && now.sub(startDate) <= 7 days)\n', '      {\n', '          return 1690000000000000000;\n', '      } else{\n', '          return 0;\n', '      }\n', '    }\n', '    \n', '    \n', '    //function to change the owner\n', '    //only owner can call this function\n', '    \n', '    function changeOwner(address payable _owner) public {\n', '        require(msg.sender==owner);\n', '        owner=_owner;\n', '    }\n', '    \n', '    //function to withdraw collected ETH\n', '     //only owner can call this function\n', '     \n', '    function withdrawETH()public {\n', '        require(msg.sender==owner && collectedETH>0 && address(this).balance >= collectedETH);\n', '        uint256 amount=collectedETH;\n', '        collectedETH=0;\n', '        owner.transfer(amount);\n', '    }\n', '    \n', '    //function to withdraw available OBR in this contract\n', '     //only owner can call this function\n', '     \n', '    function withdrawOBR()public{\n', '         require(msg.sender==owner && availableOBR()>0);\n', '         Token.transfer(owner,availableOBR());\n', '    }\n', '    \n', '    //function to start the Sale\n', '    //only owner can call this function\n', '     \n', '    function startSale()public{\n', '        require(msg.sender==owner && startDate==0);\n', '        startDate=now;\n', '    }\n', '    \n', '    //function to return the available OBR balance in the contract\n', '    function availableOBR()public view returns(uint256){\n', '        return Token.balanceOf(address(this));\n', '    }\n', '\n', '}']