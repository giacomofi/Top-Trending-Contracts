['// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '}\n', '\n', 'abstract contract ZSecTokenContract {\n', '    function balanceOf(address account) external view virtual returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\n', '}\n', '\n', 'abstract contract ZSECStoreContract {\n', '    function getStoreBalance() external view virtual returns (uint256);\n', '    function giveReward(address recipient, uint256 amount) external virtual returns (bool);\n', '}\n', '\n', 'contract ZSECStaker is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ZSecTokenContract private _mainTokenContract;           // main token contract\n', '    ZSECStoreContract private _storeWalletContract;         // store wallet contract\n', '\n', '    struct _stakerData {\n', '        uint256 startTimestamp;     // When the staking started in unix time (block.timesamp)\n', '        uint256 lastTimestamp;      // When the last staking reward was claimed in unix time (block.timestamp)\n', '        uint256 stackedAmount;      // Staked Amount\n', '    }\n', '    \n', "    mapping (address => _stakerData) private _stakerMap;        // map for staker's data\n", '    mapping (address => uint256) private _rewardsMap;           // map for rewards\n', '    \n', '    address private _devWallet;                                 // dev wallet address\n', '\n', '    uint256 private _totalStackedAmount = 0;                    // total stacked amount\n', '    uint256 private _minStakeAmount = 20e18;                    // min stackable amount\n', '    \n', '    uint256 private _rewardPeriod = 86400;                      //seconds of a day\n', '    uint256 private _rewardPortion = 200;                       // reward portion  0.5% = 1/200\n', '    \n', '    uint256 private _rewardMaxDays = 60;                        // rewards max days\n', '    uint256 private _minRewardPeriod = 3600;                    // min reward period = 1 hour (3600s)\n', '    uint256 private _stakerCount;                               // staker count\n', '\n', '    \n', '    \n', '    // Events\n', '    event Staked(address staker, uint256 amount);\n', '    event Unstaked(address staker, uint256 amount);\n', '    event Claim(address staker, uint256 amount);\n', '    \n', '    constructor (ZSecTokenContract mainTokenContract) public {\n', '        _mainTokenContract = mainTokenContract;\n', '    }\n', '    \n', '    function stake(uint256 amount) external {\n', '        require(\n', '            amount >= _minStakeAmount,\n', '            "Too small amount"\n', '        );\n', '\n', '        require(\n', '            _mainTokenContract.transferFrom(\n', '                _msgSender(),\n', '                address(this),\n', '                amount\n', '            ),\n', '            "Stake failed"\n', '        );\n', '        \n', '        if(_stakerMap[_msgSender()].stackedAmount == 0) {\n', '            _stakerMap[_msgSender()].startTimestamp = uint256(now);\n', '            _stakerMap[_msgSender()].lastTimestamp = uint256(now);\n', '            _stakerCount = _stakerCount.add(uint256(1));\n', '        }\n', '\n', '        _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.add(amount);\n', '        _totalStackedAmount = _totalStackedAmount.add(amount);\n', '        \n', '        emit Staked(_msgSender(), amount);\n', '    }\n', '    \n', '    function unstack(uint256 amount) external {\n', '        require(\n', '            _stakerMap[_msgSender()].stackedAmount >= amount,\n', '            "Stake amount exceeded"\n', '        );\n', '\n', '        require(\n', '            _mainTokenContract.transfer(\n', '                _msgSender(),\n', '                amount\n', '            ),\n', '            "Stake failed"\n', '        );\n', '        \n', '        _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.sub(amount);\n', '        _totalStackedAmount = _totalStackedAmount.sub(amount);\n', '        \n', '        if(_stakerMap[_msgSender()].stackedAmount == 0) {\n', '            _stakerCount = _stakerCount.sub(uint256(1));\n', '        }\n', '        \n', '        emit Unstaked(_msgSender(), amount);\n', '    }\n', '    \n', '    function claim(uint256 amount) external {\n', '        require(\n', '            _rewardsMap[_msgSender()] >= amount,\n', '            "Claim amount exceeded"\n', '        );\n', '        \n', '        _storeWalletContract.giveReward(_msgSender(), amount);\n', '        _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);\n', '        \n', '        emit Claim(_msgSender(), amount);\n', '    }\n', '    \n', '    function calcRewards() external returns (bool) {\n', '        uint256 currentTimestamp = uint256(now);\n', '        uint256 diff = currentTimestamp.sub(_stakerMap[_msgSender()].lastTimestamp);\n', '        if(diff >= _rewardPeriod) {\n', '            uint256 rewardDays = diff.div(_rewardPeriod);\n', '            uint256 offsetTimestamp = diff.sub(_rewardPeriod.mul(rewardDays));\n', '\n', '            if(rewardDays > _rewardMaxDays)\n', '                return false;\n', '\n', '            uint256 rewardsAmount = _stakerMap[_msgSender()].stackedAmount.div(_rewardPortion).mul(rewardDays);\n', '            _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].add(rewardsAmount);\n', '            \n', '            _stakerMap[_msgSender()].lastTimestamp = currentTimestamp.sub(offsetTimestamp);\n', '            \n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    /**\n', '     * Get Functions \n', '     */\n', '    function getStoreWalletContract() external view returns (address) {\n', '        return address(_storeWalletContract);\n', '    }\n', '    \n', '    function getTotalStackedAmount() external view returns (uint256) {\n', '        return _totalStackedAmount;\n', '    }\n', '    \n', '    function getRewardOfAccount(address staker) external view returns (uint256) {\n', '        return _rewardsMap[staker];\n', '    }\n', '    \n', '    function getStakeAmountOfAccount(address staker) external view returns (uint256) {\n', '        return _stakerMap[staker].stackedAmount;\n', '    }\n', '    \n', '    function getStakerCount() external view returns (uint256) {\n', '        return _stakerCount;\n', '    }\n', '    \n', '    function getMinStakeAmount() external view returns (uint256) {\n', '        return _minStakeAmount;\n', '    }\n', '    \n', '    function getRewardPeriod() external view returns (uint256) {\n', '        return _rewardPeriod;\n', '    }\n', '    \n', '    function getRewardPortion() external view returns (uint256) {\n', '        return _rewardPortion;\n', '    }\n', '    \n', '    function getStartTimestamp(address staker) external view returns (uint256) {\n', '        return _stakerMap[staker].startTimestamp;\n', '    }\n', '    \n', '    function getLastTimestamp(address staker) external view returns (uint256) {\n', '        return _stakerMap[staker].lastTimestamp;\n', '    }\n', '    \n', '    /**\n', '     * Set Functions \n', '     */\n', '    function setStoreWalletContract(ZSECStoreContract storeWalletContract) external onlyOwner returns (bool) {\n', '        if(address(storeWalletContract) == address(0))\n', '            return false;\n', '            \n', '        _storeWalletContract = storeWalletContract;\n', '        return true;\n', '    }\n', '    \n', '    function setRewardPeriod(uint256 rewardPeriod) external onlyOwner returns (bool) {\n', '        if(rewardPeriod <= _minRewardPeriod)\n', '            return false;\n', '        \n', '        _rewardPeriod = rewardPeriod;\n', '        return true;\n', '    }\n', '    \n', '    function setRewardPortion(uint256 rewardPortion) external onlyOwner returns (bool) {\n', '        if(rewardPortion < 1)\n', '            return false;\n', '\n', '        _rewardPortion = rewardPortion;\n', '        return true;\n', '    }\n', '}']