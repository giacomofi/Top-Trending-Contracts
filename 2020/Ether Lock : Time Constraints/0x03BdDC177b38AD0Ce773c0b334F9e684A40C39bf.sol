['pragma solidity 0.5.0;\n', '//import "./SafeMath.sol"; 0x9205C049C231DdA51bAce0ba569f047E3E1e9979\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, "SafeMath: subtraction overflow");}\n', '}\n', '\n', 'contract LMCH_DOC_v02 {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    address private admin;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    uint256 private _totalSupply;\n', '    string private last_useVersion;\n', '\n', '    struct LockDetails{\n', '        uint256 lockedTokencnt;\n', '        uint256 releaseTime;\n', '    }\n', '    struct managerDetail{\n', '        string managername;\n', '        uint8 managerlevel;\n', '    }\n', '    mapping(address => LockDetails) private Locked_list;\n', '    address[] private managerList;\n', '    mapping(address => managerDetail) private Managers;\n', '    mapping(address => mapping(bytes32 => string)) user_dataList;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    //////////////////////////////////////// Mint handle //////////////////////////////////////////\n', '\n', '\n', '    function Contadmin() public view returns (address) {return admin;}\n', '    function totalSupply() public view returns (uint256) {return _totalSupply;}\n', '    function name() public view returns (string memory) {return _name;}\n', '    function symbol() public view returns (string memory) {return _symbol;}\n', '    function getlast_useVersion() public view returns (string memory) {return last_useVersion;}\n', '    function decimals() public view returns (uint8) {return _decimals;}\n', '    //////////////////////////////////////// manager handle //////////////////////////////////////////\n', '    function admin_Add_manager(address adr, string memory mname, uint8 mlevel) public returns (bool) {\n', '        managerDetail memory isManager = Managers[msg.sender];\n', '        require( msg.sender == admin, "This is manager only");\n', '        isManager = Managers[adr];\n', '        bytes memory a1 = bytes(isManager.managername);\n', '        bytes memory a2 = bytes("del");\n', '        if(keccak256(a1) == keccak256(a2)) {\n', '            isManager.managername = mname;\n', '            isManager.managerlevel = mlevel;\n', '        }else if( isManager.managerlevel != 0 ){\n', '            isManager.managername = mname;\n', '            isManager.managerlevel = mlevel;\n', '        }else{\n', '            isManager = managerDetail(mname, mlevel);\n', '            managerList.push(adr);\n', '        }\n', '        Managers[adr] = isManager;\n', '        return true;\n', '    }\n', '    function get_nth_adr_manager(uint256 nth) public view returns (address) {\n', '        //managerDetail memory isManager = Managers[msg.sender];\n', '        //require( isManager.managerlevel > 14, "This is manager level over 15 only ecode-02");\n', '        require( nth > 0 && nth <= managerList.length,"outofrange");\n', '        return managerList[nth];\n', '    }\n', '    function remove_manager( address adr) public returns (bool) {\n', '        require( admin != adr, "contract creater cannot be deleted");\n', '        managerDetail memory isManager = Managers[msg.sender];\n', '        require( isManager.managerlevel > 14, "This is manager level over 15 only ecode-03");\n', '        isManager = managerDetail("del", 0);\n', '        Managers[adr] = isManager;\n', '        return true;\n', '    }\n', '\n', '    function get_count_manager() public view returns (uint256) {\n', '        //managerDetail memory isManager = Managers[msg.sender];\n', '        //require( isManager.managerlevel > 14, "This is manager level over 15 only ecode-04");\n', '        return managerList.length;\n', '    }\n', '    function get_managername(address adr) public view returns (string memory) {\n', '        //managerDetail memory isManager = Managers[msg.sender];\n', '        //require( isManager.managerlevel > 14, "This is manager level over 15 only ecode-05");\n', '        managerDetail memory isManager = Managers[adr];\n', '        return isManager.managername;\n', '    }\n', '\n', '    function get_managerLevel(address adr) public view returns (uint8) {\n', '        managerDetail memory isManager = Managers[msg.sender];\n', '        //require( isManager.managerlevel > 14, "This is manager level over 15 only ecode-06");\n', '        isManager = Managers[adr];\n', '        if( isManager.managerlevel > 0 ){\n', '            return isManager.managerlevel;\n', '        }else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    //////////////////////////////////////// Lock token handle //////////////////////////////////////////\n', '    function Lock_wallet(address _adr, uint256 lockamount,uint256 releaseTime ) public returns (bool) {\n', '        require(Managers[msg.sender].managerlevel > 9 , "Latam Manager only");\n', '        _Lock_wallet(_adr,lockamount,releaseTime);\n', '        return true;\n', '    }\n', '    function _Lock_wallet(address account, uint256 amount,uint256 releaseTime) internal {\n', '        LockDetails memory eaLock = Locked_list[account];\n', '        if( eaLock.releaseTime > 0 ){\n', '            eaLock.lockedTokencnt = amount;\n', '            eaLock.releaseTime = releaseTime;\n', '        }else{\n', '            eaLock = LockDetails(amount, releaseTime);\n', '        }\n', '        Locked_list[account] = eaLock;\n', '    }\n', '    function admin_TransLock(address recipient, uint256 amount,uint256 releaseTime) public returns (bool) {\n', '        require(Managers[msg.sender].managerlevel > 9 , "Latam Manager only");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '         _Lock_wallet(recipient,amount,releaseTime);\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '    function getwithdrawablemax(address account) public view returns (uint256) {\n', '        return Locked_list[account].lockedTokencnt;\n', '    }\n', '\n', '    function getLocked_list(address account) public view returns (uint256) {\n', '        return Locked_list[account].releaseTime;\n', '    }\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        last_useVersion = "Ver 1";\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        uint256 LockhasTime = Locked_list[sender].releaseTime;\n', '        uint256 LockhasMax = Locked_list[sender].lockedTokencnt;\n', '        if( block.timestamp < LockhasTime){\n', '            //uint256 OK1 = _balances[sender] - LockhasMax;\n', '            uint256 OK1 = _balances[sender].sub(LockhasMax, "ERC20: the amount to unlock is bigger then locked token count");\n', '            require( OK1 >= amount , "Your Wallet has time lock");\n', '        }\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        _transfer(sender, recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function burn(uint256 amount) public returns (bool) {\n', '        _burn(msg.sender, amount);\n', '    }\n', '    function burnFrom(address account, uint256 amount) public returns (bool) {\n', '        _burnFrom(account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        require(msg.sender == admin, "Admin only can burn  8547");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        //_approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '        _burn(account, amount);\n', '    }\n', '\n', '    //////////////////////////////////////// Lock token handle //////////////////////////////////////////\n', '\n', '    function getStringData(bytes32 key) public view returns (string memory) {\n', '        return user_dataList[msg.sender][key];\n', '    }\n', '    function setStringData(bytes32 key, string memory value) public {\n', '        user_dataList[msg.sender][key] = value;\n', '    }\n', '\n', '}']