['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    \n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract LnAdmin {\n', '    address public admin;\n', '    address public candidate;\n', '\n', '    constructor(address _admin) public {\n', '        require(_admin != address(0), "admin address cannot be 0");\n', '        admin = _admin;\n', '        emit AdminChanged(address(0), _admin);\n', '    }\n', '\n', '    function setCandidate(address _candidate) external onlyAdmin {\n', '        address old = candidate;\n', '        candidate = _candidate;\n', '        emit candidateChanged( old, candidate);\n', '    }\n', '\n', '    function becomeAdmin( ) external {\n', '        require( msg.sender == candidate, "Only candidate can become admin");\n', '        address old = admin;\n', '        admin = candidate;\n', '        emit AdminChanged( old, admin ); \n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require( (msg.sender == admin), "Only the contract admin can perform this action");\n', '        _;\n', '    }\n', '\n', '    event candidateChanged(address oldCandidate, address newCandidate );\n', '    event AdminChanged(address oldAdmin, address newAdmin);\n', '}\n', '\n', '\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        \n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        \n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        \n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', '\n', 'interface ILinearStaking {\n', '    function staking(uint256 amount) external returns (bool);\n', '    function cancelStaking(uint256 amount) external returns (bool);\n', '    function claim() external returns (bool);\n', '    function stakingBalanceOf(address account) external view returns(uint256);\n', '}\n', '\n', 'contract LnLinearStakingStorage is LnAdmin {\n', '    using SafeMath for uint256;\n', '\n', '    LnAccessControl public accessCtrl;\n', '\n', '    bytes32 public constant DATA_ACCESS_ROLE = "LinearStakingStorage";\n', '\n', '    struct StakingData {\n', '        uint256 amount;\n', '        uint256 staketime;\n', '    }\n', '\n', '    mapping (address => StakingData[]) public stakesdata;\n', '    mapping (uint256 => uint256) public weeksTotal; // week staking amount\n', '\n', '    uint256 public stakingStartTime = 1600329600; // TODO: UTC or UTC+8\n', '    uint256 public stakingEndTime = 1605168000;\n', '    uint256 public totalWeekNumber = 8;\n', '    uint256 public weekRewardAmount = 18750000e18;\n', '\n', '    constructor(address _admin, address _accessCtrl) public LnAdmin(_admin) {\n', '        accessCtrl = LnAccessControl(_accessCtrl);\n', '    }\n', '\n', '    modifier OnlyLinearStakingStorageRole(address _address) {\n', '        require(accessCtrl.hasRole(DATA_ACCESS_ROLE, _address), "Only Linear Staking Storage Role");\n', '        _;\n', '    }\n', '\n', '    function setAccessControl(address _accessCtrl) external onlyAdmin {\n', '        accessCtrl = LnAccessControl(_accessCtrl);\n', '    }\n', '\n', '    function weekTotalStaking() public view returns (uint256[] memory) {\n', '        uint256[] memory totals = new uint256[](totalWeekNumber);\n', '        for (uint256 i=0; i< totalWeekNumber; i++) {\n', '            uint256 delta = weeksTotal[i];\n', '            if (i == 0) {\n', '                totals[i] = delta;\n', '            } else {\n', '                \n', '                totals[i] = totals[i-1].add(delta);\n', '            }\n', '        }\n', '        return totals;\n', '    }\n', '\n', '    function getStakesdataLength(address account) external view returns(uint256) {\n', '        return stakesdata[account].length;\n', '    }\n', '\n', '    function getStakesDataByIndex(address account, uint256 index) external view returns(uint256, uint256) {\n', '        return (stakesdata[account][index].amount, stakesdata[account][index].staketime);\n', '    }\n', '\n', '    function stakingBalanceOf(address account) external view returns(uint256) {\n', '        uint256 total = 0;\n', '        StakingData[] memory stakes = stakesdata[account];\n', '        for (uint256 i=0; i < stakes.length; i++) {\n', '            total = total.add(stakes[i].amount);\n', '        }\n', '        return total;\n', '    }\n', '\n', '    function requireInStakingPeriod() external view {\n', '        require(stakingStartTime < block.timestamp, "Staking not start");\n', '        require(block.timestamp < stakingEndTime, "Staking stage has end.");\n', '    }\n', '\n', '    function requireStakingEnd() external view {\n', '        require(block.timestamp > stakingEndTime, "Need wait to staking end");\n', '    }\n', '\n', '    function PushStakingData(address account, uint256 amount, uint256 staketime) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        LnLinearStakingStorage.StakingData memory data = LnLinearStakingStorage.StakingData({\n', '            amount: amount,\n', '            staketime: staketime\n', '        });\n', '        stakesdata[account].push(data);\n', '    }\n', '\n', '    function StakingDataAdd(address account, uint256 index, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        stakesdata[account][index].amount = stakesdata[account][index].amount.add(amount);\n', '    }\n', '\n', '    function StakingDataSub(address account, uint256 index, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        stakesdata[account][index].amount = stakesdata[account][index].amount.sub(amount, "StakingDataSub sub overflow");\n', '    }\n', '\n', '    function DeleteStakesData(address account) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        delete stakesdata[account];\n', '    }\n', '\n', '    function PopStakesData(address account) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        stakesdata[account].pop();\n', '    }\n', '\n', '    function AddWeeksTotal(uint256 staketime, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        uint256 weekNumber = staketime.sub(stakingStartTime, "AddWeeksTotal sub overflow") / 1 weeks;\n', '        weeksTotal[weekNumber] = weeksTotal[weekNumber].add(amount);\n', '    }\n', '\n', '    function SubWeeksTotal(uint256 staketime, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\n', '        uint256 weekNumber = staketime.sub(stakingStartTime, "SubWeeksTotal weekNumber sub overflow") / 1 weeks;\n', '        weeksTotal[weekNumber] = weeksTotal[weekNumber].sub(amount, "SubWeeksTotal weeksTotal sub overflow");\n', '    }\n', '\n', '    function setWeekRewardAmount(uint256 _weekRewardAmount) external onlyAdmin {\n', '        weekRewardAmount = _weekRewardAmount;\n', '    }\n', '\n', '    function setStakingPeriod(uint _stakingStartTime, uint _stakingEndTime) external onlyAdmin {\n', '        require(_stakingEndTime > _stakingStartTime);\n', '\n', '        stakingStartTime = _stakingStartTime;\n', '        stakingEndTime = _stakingEndTime;\n', '\n', '        totalWeekNumber = stakingEndTime.sub(stakingStartTime, "setStakingPeriod totalWeekNumber sub overflow") / 1 weeks;\n', '        if (stakingEndTime.sub(stakingStartTime, "setStakingPeriod stakingEndTime sub overflow") % 1 weeks != 0) {\n', '            totalWeekNumber = totalWeekNumber.add(1);\n', '        }\n', '    }\n', '}\n', '\n', 'contract LnLinearStaking is LnAdmin, Pausable, ILinearStaking {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public linaToken; // lina token proxy address\n', '    LnLinearStakingStorage public stakingStorage;\n', '    \n', '    constructor(\n', '        address _admin,\n', '        address _linaToken,\n', '        address _storage\n', '    ) public LnAdmin(_admin) {\n', '        linaToken = IERC20(_linaToken);\n', '        stakingStorage = LnLinearStakingStorage(_storage);\n', '    }\n', '\n', '    function setLinaToken(address _linaToken) external onlyAdmin {\n', '        linaToken = IERC20(_linaToken);\n', '    }\n', '\n', '    function setPaused(bool _paused) external onlyAdmin {\n', '        if (_paused) {\n', '            _pause();\n', '        } else {\n', '            _unpause();\n', '        }\n', '    }\n', '\n', '    //////////////////////////////////////////////////////\n', '    event Staking(address indexed who, uint256 value, uint staketime);\n', '    event CancelStaking(address indexed who, uint256 value);\n', '    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\n', '\n', '    uint256 public accountStakingListLimit = 50;\n', '    uint256 public minStakingAmount = 1e18; // 1 token\n', '    uint256 public constant PRECISION_UINT = 1e23;\n', '\n', '    function setLinaTokenAddress(address _token) external onlyAdmin {\n', '        linaToken = IERC20(_token);\n', '    }\n', '\n', '    function setStakingListLimit(uint256 _limit) external onlyAdmin {\n', '        accountStakingListLimit = _limit;\n', '    }\n', '\n', '    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\n', '        minStakingAmount = _minStakingAmount;\n', '    }\n', '\n', '    function stakingBalanceOf(address account) external override view returns(uint256) {\n', '        return stakingStorage.stakingBalanceOf(account);\n', '    }\n', '\n', '    function getStakesdataLength(address account) external view returns(uint256) {\n', '        return stakingStorage.getStakesdataLength(account);\n', '    }\n', '    //--------------------------------------------------------\n', '\n', '    function staking(uint256 amount) public whenNotPaused override returns (bool) {\n', '        stakingStorage.requireInStakingPeriod();\n', '\n', '        require(amount >= minStakingAmount, "Staking amount too small.");\n', '        require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, "Staking list out of limit.");\n', '\n', '        //linaToken.burn(msg.sender, amount);\n', '        linaToken.transferFrom(msg.sender, address(this), amount);\n', '     \n', '        stakingStorage.PushStakingData(msg.sender, amount, block.timestamp);\n', '        stakingStorage.AddWeeksTotal(block.timestamp, amount);\n', '\n', '        emit Staking(msg.sender, amount, block.timestamp);\n', '        return true;\n', '    }\n', '\n', '    function cancelStaking(uint256 amount) public whenNotPaused override returns (bool) {\n', '        stakingStorage.requireInStakingPeriod();\n', '\n', '        require(amount > 0, "Invalid amount.");\n', '\n', '        uint256 returnToken = amount;\n', '        for (uint256 i = stakingStorage.getStakesdataLength(msg.sender); i >= 1 ; i--) {\n', '            (uint256 stakingAmount, uint256 staketime) = stakingStorage.getStakesDataByIndex(msg.sender, i-1);\n', '            if (amount >= stakingAmount) {\n', '                amount = amount.sub(stakingAmount, "cancelStaking sub overflow");\n', '                \n', '                stakingStorage.PopStakesData(msg.sender);\n', '                stakingStorage.SubWeeksTotal(staketime, stakingAmount);\n', '            } else {\n', '                stakingStorage.StakingDataSub(msg.sender, i-1, amount);\n', '                stakingStorage.SubWeeksTotal(staketime, amount);\n', '\n', '                amount = 0;\n', '            }\n', '            if (amount == 0) break;\n', '        }\n', '        require(amount == 0, "Cancel amount too big then staked.");\n', '\n', '        //linaToken.mint(msg.sender, returnToken);\n', '        linaToken.transfer(msg.sender, returnToken);\n', '\n', '        emit CancelStaking(msg.sender, returnToken);\n', '\n', '        return true;\n', '    }\n', '\n', '    // claim reward\n', '    // Note: 需要提前提前把奖励token转进来\n', '    function claim() public whenNotPaused override returns (bool) {\n', '        stakingStorage.requireStakingEnd();\n', '\n', '        require(stakingStorage.getStakesdataLength(msg.sender) > 0, "Nothing to claim");\n', '\n', '        uint256 totalWeekNumber = stakingStorage.totalWeekNumber();\n', '\n', '        uint256 totalStaking = 0;\n', '        uint256 totalReward = 0;\n', '\n', '        uint256[] memory finalTotals = stakingStorage.weekTotalStaking();\n', '        for (uint256 i=0; i < stakingStorage.getStakesdataLength(msg.sender); i++) {\n', '            (uint256 stakingAmount, uint256 staketime) = stakingStorage.getStakesDataByIndex(msg.sender, i);\n', '            uint256 stakedWeedNumber = staketime.sub(stakingStorage.stakingStartTime(), "claim sub overflow") / 1 weeks;\n', '\n', '            totalStaking = totalStaking.add(stakingAmount);\n', '            \n', '            uint256 reward = 0;\n', '            for (uint256 j=stakedWeedNumber; j < totalWeekNumber; j++) {\n', '                reward = reward.add( stakingAmount.mul(PRECISION_UINT).div(finalTotals[j]) ); //move .mul(weekRewardAmount) to next line.\n', '            }\n', '            reward = reward.mul(stakingStorage.weekRewardAmount()).div(PRECISION_UINT);\n', '\n', '            totalReward = totalReward.add( reward );\n', '        }\n', '\n', '        stakingStorage.DeleteStakesData(msg.sender);\n', '        \n', '        //linaToken.mint(msg.sender, totalStaking.add(totalReward) );\n', '        linaToken.transfer(msg.sender, totalStaking.add(totalReward) );\n', '\n', '        emit Claim(msg.sender, totalReward, totalStaking);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// example:\n', '//LnAccessControl accessCtrl = LnAccessControl(addressStorage.getAddress("LnAccessControl"));\n', '//require(accessCtrl.hasRole(accessCtrl.DEBT_SYSTEM(), _address), "Need debt system access role");\n', '\n', '// contract access control\n', 'contract LnAccessControl is AccessControl {\n', '    using Address for address;\n', '\n', '    // -------------------------------------------------------\n', '    // role type\n', '    bytes32 public constant ISSUE_ASSET_ROLE = ("ISSUE_ASSET"); //keccak256\n', '    bytes32 public constant BURN_ASSET_ROLE = ("BURN_ASSET");\n', '\n', '    bytes32 public constant DEBT_SYSTEM = ("LnDebtSystem");\n', '    // -------------------------------------------------------\n', '    constructor(address admin) public {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n', '    }\n', '\n', '    function IsAdmin(address _address) public view returns (bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, _address);\n', '    }\n', '\n', '    function SetAdmin(address _address) public returns (bool) {\n', '        require(IsAdmin(msg.sender), "Only admin");\n', '\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _address);\n', '    }\n', '\n', '    // -------------------------------------------------------\n', '    // this func need admin role. grantRole and revokeRole need admin role\n', '    function SetRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) external {\n', '        require(IsAdmin(msg.sender), "Only admin");\n', '\n', '        _setRoles(roleType, addresses, setTo);\n', '    }\n', '\n', '    function _setRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) private {\n', '        require(addresses.length == setTo.length, "parameter address length not eq");\n', '\n', '        for (uint256 i=0; i < addresses.length; i++) {\n', '            //require(addresses[i].isContract(), "Role address need contract only");\n', '            if (setTo[i]) {\n', '                grantRole(roleType, addresses[i]);\n', '            } else {\n', '                revokeRole(roleType, addresses[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    // function SetRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) public {\n', '    //     _setRoles(roleType, addresses, setTo);\n', '    // }\n', '\n', '    // Issue burn\n', '    function SetIssueAssetRole(address[] calldata issuer, bool[] calldata setTo) public {\n', '        _setRoles(ISSUE_ASSET_ROLE, issuer, setTo);\n', '    }\n', '\n', '    function SetBurnAssetRole(address[] calldata burner, bool[] calldata setTo) public {\n', '        _setRoles(BURN_ASSET_ROLE, burner, setTo);\n', '    }\n', '    \n', '    //\n', '    function SetDebtSystemRole(address[] calldata _address, bool[] calldata _setTo) public {\n', '        _setRoles(DEBT_SYSTEM, _address, _setTo);\n', '    }\n', '}\n', '\n', '\n', 'abstract contract LnOperatorModifier is LnAdmin {\n', '    \n', '    address public operator;\n', '\n', '    constructor(address _operator) internal {\n', '        require(admin != address(0), "admin must be set");\n', '\n', '        operator = _operator;\n', '        emit OperatorUpdated(_operator);\n', '    }\n', '\n', '    function setOperator(address _opperator) external onlyAdmin {\n', '        operator = _opperator;\n', '        emit OperatorUpdated(_opperator);\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator, "Only operator can perform this action");\n', '        _;\n', '    }\n', '\n', '    event OperatorUpdated(address operator);\n', '}\n', '\n', '\n', 'contract LnRewardCalculator {\n', '    using SafeMath for uint256;\n', '\n', '    struct UserInfo {\n', '        uint256 reward;\n', '        uint256 amount;\n', '        uint256 rewardDebt;\n', '    }\n', '\n', '    struct PoolInfo {\n', '        uint256 amount;\n', '        uint256 lastRewardBlock;\n', '        uint256 accRewardPerShare;\n', '    }\n', '\n', '    uint256 public rewardPerBlock;\n', '\n', '    PoolInfo public mPoolInfo;\n', '    mapping(address => UserInfo) public userInfo;\n', '\n', '    uint256 public startBlock;\n', '    uint256 public remainReward;\n', '    uint256 public accReward;\n', '\n', '    constructor(uint256 _rewardPerBlock, uint256 _startBlock) public {\n', '        rewardPerBlock = _rewardPerBlock;\n', '        startBlock = _startBlock;\n', '        mPoolInfo.lastRewardBlock = startBlock;\n', '    }\n', '\n', '    function _calcReward(uint256 curBlock, address _user)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = mPoolInfo;\n', '        UserInfo storage user = userInfo[_user];\n', '        uint256 accRewardPerShare = pool.accRewardPerShare;\n', '        uint256 lpSupply = pool.amount;\n', '        if (curBlock > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = curBlock.sub(\n', '                pool.lastRewardBlock,\n', '                "cr curBlock sub overflow"\n', '            );\n', '            uint256 curReward = multiplier.mul(rewardPerBlock);\n', '            accRewardPerShare = accRewardPerShare.add(\n', '                curReward.mul(1e20).div(lpSupply)\n', '            );\n', '        }\n', '        uint256 newReward = user.amount.mul(accRewardPerShare).div(1e20).sub(\n', '            user.rewardDebt,\n', '            "cr newReward sub overflow"\n', '        );\n', '        return newReward.add(user.reward);\n', '    }\n', '\n', '    function rewardOf(address _user) public view returns (uint256) {\n', '        return userInfo[_user].reward;\n', '    }\n', '\n', '    function amount() public view returns (uint256) {\n', '        return mPoolInfo.amount;\n', '    }\n', '\n', '    function amountOf(address _user) public view returns (uint256) {\n', '        return userInfo[_user].amount;\n', '    }\n', '\n', '    function getUserInfo(address _user)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            userInfo[_user].reward,\n', '            userInfo[_user].amount,\n', '            userInfo[_user].rewardDebt\n', '        );\n', '    }\n', '\n', '    function getPoolInfo()\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            mPoolInfo.amount,\n', '            mPoolInfo.lastRewardBlock,\n', '            mPoolInfo.accRewardPerShare\n', '        );\n', '    }\n', '\n', '    function _update(uint256 curBlock) internal {\n', '        PoolInfo storage pool = mPoolInfo;\n', '        if (curBlock <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.amount;\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = curBlock;\n', '            return;\n', '        }\n', '        uint256 multiplier = curBlock.sub(\n', '            pool.lastRewardBlock,\n', '            "_update curBlock sub overflow"\n', '        );\n', '        uint256 curReward = multiplier.mul(rewardPerBlock);\n', '\n', '        remainReward = remainReward.add(curReward);\n', '        accReward = accReward.add(curReward);\n', '\n', '        pool.accRewardPerShare = pool.accRewardPerShare.add(\n', '            curReward.mul(1e20).div(lpSupply)\n', '        );\n', '        pool.lastRewardBlock = curBlock;\n', '    }\n', '\n', '    function _deposit(\n', '        uint256 curBlock,\n', '        address _addr,\n', '        uint256 _amount\n', '    ) internal {\n', '        PoolInfo storage pool = mPoolInfo;\n', '        UserInfo storage user = userInfo[_addr];\n', '        _update(curBlock);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user\n', '                .amount\n', '                .mul(pool.accRewardPerShare)\n', '                .div(1e20)\n', '                .sub(user.rewardDebt, "_deposit pending sub overflow");\n', '            if (pending > 0) {\n', '                reward(user, pending);\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.add(_amount);\n', '            pool.amount = pool.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e20);\n', '    }\n', '\n', '    function _withdraw(\n', '        uint256 curBlock,\n', '        address _addr,\n', '        uint256 _amount\n', '    ) internal {\n', '        PoolInfo storage pool = mPoolInfo;\n', '        UserInfo storage user = userInfo[_addr];\n', '        require(user.amount >= _amount, "_withdraw: not good");\n', '        _update(curBlock);\n', '        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e20).sub(\n', '            user.rewardDebt,\n', '            "_withdraw pending sub overflow"\n', '        );\n', '        if (pending > 0) {\n', '            reward(user, pending);\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(\n', '                _amount,\n', '                "_withdraw user.amount sub overflow"\n', '            );\n', '            pool.amount = pool.amount.sub(\n', '                _amount,\n', '                "_withdraw pool.amount sub overflow"\n', '            );\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e20);\n', '    }\n', '\n', '    function reward(UserInfo storage user, uint256 _amount) internal {\n', '        if (_amount > remainReward) {\n', '            _amount = remainReward;\n', '        }\n', '        remainReward = remainReward.sub(\n', '            _amount,\n', '            "reward remainReward sub overflow"\n', '        );\n', '        user.reward = user.reward.add(_amount);\n', '    }\n', '\n', '    function _claim(address _addr) internal {\n', '        UserInfo storage user = userInfo[_addr];\n', '        if (user.reward > 0) {\n', '            user.reward = 0;\n', '        }\n', '    }\n', '}\n', '\n', 'contract LnRewardCalculatorTest is LnRewardCalculator {\n', '    constructor(uint256 _rewardPerBlock, uint256 _startBlock)\n', '        public\n', '        LnRewardCalculator(_rewardPerBlock, _startBlock)\n', '    {}\n', '\n', '    function deposit(\n', '        uint256 curBlock,\n', '        address _addr,\n', '        uint256 _amount\n', '    ) public {\n', '        _deposit(curBlock, _addr, _amount);\n', '    }\n', '\n', '    function withdraw(\n', '        uint256 curBlock,\n', '        address _addr,\n', '        uint256 _amount\n', '    ) public {\n', '        _withdraw(curBlock, _addr, _amount);\n', '    }\n', '\n', '    function calcReward(uint256 curBlock, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _calcReward(curBlock, _user);\n', '    }\n', '}\n', '\n', 'contract LnSimpleStaking is\n', '    LnAdmin,\n', '    Pausable,\n', '    ILinearStaking,\n', '    LnRewardCalculator\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeDecimalMath for uint256;\n', '\n', '    IERC20 public linaToken; // lina token proxy address\n', '    LnLinearStakingStorage public stakingStorage;\n', '    uint256 public mEndBlock;\n', '    address public mOldStaking;\n', '    uint256 public mOldAmount;\n', '    uint256 public mWidthdrawRewardFromOldStaking;\n', '\n', '    uint256 public claimRewardLockTime = 1620806400; // 2021-5-12\n', '\n', '    address public mTargetAddress;\n', '    uint256 public mTransLockTime;\n', '\n', '    mapping(address => uint256) public mOldReward;\n', '\n', '    constructor(\n', '        address _admin,\n', '        address _linaToken,\n', '        address _storage,\n', '        uint256 _rewardPerBlock,\n', '        uint256 _startBlock,\n', '        uint256 _endBlock\n', '    ) public LnAdmin(_admin) LnRewardCalculator(_rewardPerBlock, _startBlock) {\n', '        linaToken = IERC20(_linaToken);\n', '        stakingStorage = LnLinearStakingStorage(_storage);\n', '        mEndBlock = _endBlock;\n', '    }\n', '\n', '    function setLinaToken(address _linaToken) external onlyAdmin {\n', '        linaToken = IERC20(_linaToken);\n', '    }\n', '\n', '    function setPaused(bool _paused) external onlyAdmin {\n', '        if (_paused) {\n', '            _pause();\n', '        } else {\n', '            _unpause();\n', '        }\n', '    }\n', '\n', '    //////////////////////////////////////////////////////\n', '    event Staking(address indexed who, uint256 value, uint256 staketime);\n', '    event CancelStaking(address indexed who, uint256 value);\n', '    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\n', '    event TransLock(address target, uint256 time);\n', '\n', '    uint256 public accountStakingListLimit = 50;\n', '    uint256 public minStakingAmount = 1e18; // 1 token\n', '    uint256 public constant PRECISION_UINT = 1e23;\n', '\n', '    function setStakingListLimit(uint256 _limit) external onlyAdmin {\n', '        accountStakingListLimit = _limit;\n', '    }\n', '\n', '    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\n', '        minStakingAmount = _minStakingAmount;\n', '    }\n', '\n', '    function stakingBalanceOf(address account)\n', '        external\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 stakingBalance = super.amountOf(account).add(\n', '            stakingStorage.stakingBalanceOf(account)\n', '        );\n', '        return stakingBalance;\n', '    }\n', '\n', '    function getStakesdataLength(address account)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return stakingStorage.getStakesdataLength(account);\n', '    }\n', '\n', '    //--------------------------------------------------------\n', '\n', '    function migrationsOldStaking(\n', '        address contractAddr,\n', '        uint256 amount,\n', '        uint256 blockNb\n', '    ) public onlyAdmin {\n', '        super._deposit(blockNb, contractAddr, amount);\n', '        mOldStaking = contractAddr;\n', '        mOldAmount = amount;\n', '    }\n', '\n', '    function staking(uint256 amount)\n', '        public\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        stakingStorage.requireInStakingPeriod();\n', '\n', '        require(amount >= minStakingAmount, "Staking amount too small.");\n', '        //require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, "Staking list out of limit.");\n', '\n', '        linaToken.transferFrom(msg.sender, address(this), amount);\n', '\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '        super._deposit(blockNb, msg.sender, amount);\n', '\n', '        emit Staking(msg.sender, amount, block.timestamp);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _widthdrawFromOldStaking(address _addr, uint256 amount) internal {\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        uint256 oldStakingAmount = super.amountOf(mOldStaking);\n', '        super._withdraw(blockNb, mOldStaking, amount);\n', '        // sub already withraw reward, then cal portion\n', '        uint256 reward = super\n', '            .rewardOf(mOldStaking)\n', '            .sub(\n', '            mWidthdrawRewardFromOldStaking,\n', '            "_widthdrawFromOldStaking reward sub overflow"\n', '        )\n', '            .mul(amount)\n', '            .mul(1e20)\n', '            .div(oldStakingAmount)\n', '            .div(1e20);\n', '        mWidthdrawRewardFromOldStaking = mWidthdrawRewardFromOldStaking.add(\n', '            reward\n', '        );\n', '        mOldReward[_addr] = mOldReward[_addr].add(reward);\n', '    }\n', '\n', '    function _cancelStaking(address user, uint256 amount) internal {\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        uint256 returnAmount = amount;\n', '        uint256 newAmount = super.amountOf(user);\n', '        if (newAmount >= amount) {\n', '            super._withdraw(blockNb, user, amount);\n', '            amount = 0;\n', '        } else {\n', '            if (newAmount > 0) {\n', '                super._withdraw(blockNb, user, newAmount);\n', '                amount = amount.sub(\n', '                    newAmount,\n', '                    "_cancelStaking amount sub overflow"\n', '                );\n', '            }\n', '\n', '            for (\n', '                uint256 i = stakingStorage.getStakesdataLength(user);\n', '                i >= 1;\n', '                i--\n', '            ) {\n', '                (uint256 stakingAmount, uint256 staketime) = stakingStorage\n', '                    .getStakesDataByIndex(user, i - 1);\n', '                if (amount >= stakingAmount) {\n', '                    amount = amount.sub(\n', '                        stakingAmount,\n', '                        "_cancelStaking amount sub overflow"\n', '                    );\n', '\n', '                    stakingStorage.PopStakesData(user);\n', '                    stakingStorage.SubWeeksTotal(staketime, stakingAmount);\n', '                    _widthdrawFromOldStaking(user, stakingAmount);\n', '                } else {\n', '                    stakingStorage.StakingDataSub(user, i - 1, amount);\n', '                    stakingStorage.SubWeeksTotal(staketime, amount);\n', '                    _widthdrawFromOldStaking(user, amount);\n', '\n', '                    amount = 0;\n', '                }\n', '                if (amount == 0) break;\n', '            }\n', '        }\n', '\n', '        // cancel as many as possible, not fail, that waste gas\n', '        //require(amount == 0, "Cancel amount too big then staked.");\n', '\n', '        linaToken.transfer(msg.sender, returnAmount.sub(amount));\n', '    }\n', '\n', '    function cancelStaking(uint256 amount)\n', '        public\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        //stakingStorage.requireInStakingPeriod();\n', '\n', '        require(amount > 0, "Invalid amount.");\n', '\n', '        _cancelStaking(msg.sender, amount);\n', '\n', '        emit CancelStaking(msg.sender, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTotalReward(uint256 blockNb, address _user)\n', '        public\n', '        view\n', '        returns (uint256 total)\n', '    {\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        // 这里奖励分成了三部分\n', '        // 1,已经从旧奖池中cancel了的\n', '        // 2,还在旧奖池中的\n', '        // 3，在新奖池中的\n', '        total = mOldReward[_user];\n', '        uint256 iMyOldStaking = 0;\n', '        for (\n', '            uint256 i = 0;\n', '            i < stakingStorage.getStakesdataLength(_user);\n', '            i++\n', '        ) {\n', '            (uint256 stakingAmount, ) = stakingStorage.getStakesDataByIndex(\n', '                _user,\n', '                i\n', '            );\n', '            iMyOldStaking = iMyOldStaking.add(stakingAmount);\n', '        }\n', '        if (iMyOldStaking > 0) {\n', '            uint256 oldStakingAmount = super.amountOf(mOldStaking);\n', '            uint256 iReward2 = super\n', '                ._calcReward(blockNb, mOldStaking)\n', '                .sub(\n', '                mWidthdrawRewardFromOldStaking,\n', '                "getTotalReward iReward2 sub overflow"\n', '            )\n', '                .mul(iMyOldStaking)\n', '                .div(oldStakingAmount);\n', '            total = total.add(iReward2);\n', '        }\n', '\n', '        uint256 reward3 = super._calcReward(blockNb, _user);\n', '        total = total.add(reward3);\n', '    }\n', '\n', '    // claim reward\n', '    // Note: 需要提前提前把奖励token转进来\n', '    function claim() public override whenNotPaused returns (bool) {\n', '        //stakingStorage.requireStakingEnd();\n', '        require(\n', '            block.timestamp > claimRewardLockTime,\n', '            "Not time to claim reward"\n', '        );\n', '\n', '        uint256 iMyOldStaking = stakingStorage.stakingBalanceOf(msg.sender);\n', '        uint256 iAmount = super.amountOf(msg.sender);\n', '        _cancelStaking(msg.sender, iMyOldStaking.add(iAmount));\n', '\n', '        uint256 iReward = getTotalReward(mEndBlock, msg.sender);\n', '\n', '        _claim(msg.sender);\n', '        mOldReward[msg.sender] = 0;\n', '        linaToken.transfer(msg.sender, iReward);\n', '\n', '        emit Claim(msg.sender, iReward, iMyOldStaking.add(iAmount));\n', '        return true;\n', '    }\n', '\n', '    function setRewardLockTime(uint256 newtime) public onlyAdmin {\n', '        claimRewardLockTime = newtime;\n', '    }\n', '\n', '    function calcReward(uint256 curBlock, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _calcReward(curBlock, _user);\n', '    }\n', '\n', '    function setTransLock(address target, uint256 locktime) public onlyAdmin {\n', '        require(\n', '            locktime >= now + 2 days,\n', '            "locktime need larger than cur time 2 days"\n', '        );\n', '        mTargetAddress = target;\n', '        mTransLockTime = locktime;\n', '\n', '        emit TransLock(mTargetAddress, mTransLockTime);\n', '    }\n', '\n', '    function transTokens(uint256 amount) public onlyAdmin {\n', '        require(mTransLockTime > 0, "mTransLockTime not set");\n', '        require(now > mTransLockTime, "Pls wait to unlock time");\n', '        linaToken.transfer(mTargetAddress, amount);\n', '    }\n', '}\n', '\n', 'contract HelperPushStakingData is LnAdmin {\n', '    constructor(address _admin) public LnAdmin(_admin) {}\n', '\n', '    function pushStakingData(\n', '        address _storage,\n', '        address[] calldata account,\n', '        uint256[] calldata amount,\n', '        uint256[] calldata staketime\n', '    ) external {\n', '        require(account.length > 0, "array length zero");\n', '        require(account.length == amount.length, "array length not eq");\n', '        require(account.length == staketime.length, "array length not eq");\n', '\n', '        LnLinearStakingStorage stakingStorage = LnLinearStakingStorage(\n', '            _storage\n', '        );\n', '        for (uint256 i = 0; i < account.length; i++) {\n', '            stakingStorage.PushStakingData(account[i], amount[i], staketime[i]);\n', '            stakingStorage.AddWeeksTotal(staketime[i], amount[i]);\n', '        }\n', '    }\n', '\n', '    //unstaking.\n', '}\n', '\n', 'contract MultiSigForTransferFunds {\n', '    mapping(address => uint256) public mAdmins;\n', '    uint256 public mConfirmNumb;\n', '    uint256 public mProposalNumb;\n', '    uint256 public mAmount;\n', '    LnSimpleStaking public mStaking;\n', '    address[] public mAdminArr;\n', '    uint256 public mTransLockTime;\n', '\n', '    constructor(\n', '        address[] memory _addr,\n', '        uint256 iConfirmNumb,\n', '        LnSimpleStaking _staking\n', '    ) public {\n', '        for (uint256 i = 0; i < _addr.length; ++i) {\n', '            mAdmins[_addr[i]] = 1;\n', '        }\n', '        mConfirmNumb = iConfirmNumb;\n', '        mProposalNumb = 0;\n', '        mStaking = _staking;\n', '        mAdminArr = _addr;\n', '    }\n', '\n', '    function becomeAdmin(address target) external {\n', '        LnAdmin(target).becomeAdmin();\n', '    }\n', '\n', '    function setTransLock(\n', '        address target,\n', '        uint256 locktime,\n', '        uint256 amount\n', '    ) public {\n', '        require(mAdmins[msg.sender] == 1, "not in admin list or set state");\n', '        _reset();\n', '        mStaking.setTransLock(target, locktime);\n', '        mAmount = amount;\n', '        mProposalNumb = 1;\n', '        mAdmins[msg.sender] = 2; //\n', '\n', '        mTransLockTime = locktime;\n', '    }\n', '\n', '    // call this when the locktime expired\n', '    function confirmTransfer() public {\n', '        require(mAdmins[msg.sender] == 1, "not in admin list or set state");\n', '        mProposalNumb = mProposalNumb + 1;\n', '        mAdmins[msg.sender] = 2;\n', '    }\n', '\n', '    function doTransfer() public {\n', '        require(mTransLockTime > 0, "mTransLockTime not set");\n', '        require(now > mTransLockTime, "Pls wait to unlock time");\n', '        require(mProposalNumb >= mConfirmNumb, "need more confirm");\n', '\n', '        _reset();\n', '        mStaking.transTokens(mAmount);\n', '    }\n', '\n', '    function _reset() internal {\n', '        mProposalNumb = 0;\n', '        mTransLockTime = 0;\n', '        // reset\n', '        for (uint256 i = 0; i < mAdminArr.length; ++i) {\n', '            mAdmins[mAdminArr[i]] = 1;\n', '        }\n', '    }\n', '}\n', '\n', 'contract LnSimpleStakingExtension is\n', '    LnAdmin,\n', '    Pausable,\n', '    ILinearStaking,\n', '    LnRewardCalculator\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeDecimalMath for uint256;\n', '\n', '    IERC20 public linaToken; // lina token proxy address\n', '    LnLinearStakingStorage public stakingStorage;\n', '    uint256 public mEndBlock;\n', '    address public mOldStaking;\n', '    uint256 public mOldAmount;\n', '    uint256 public mWidthdrawRewardFromOldStaking;\n', '\n', '    uint256 public claimRewardLockTime = 1620806400; // 2021-5-12\n', '\n', '    address public mTargetAddress;\n', '    uint256 public mTransLockTime;\n', '\n', '    LnSimpleStaking public mOldSimpleStaking;\n', '    bool public requireSync = false;\n', '\n', '    mapping(address => uint256) public mOldReward;\n', '    mapping(address => bool) public syncUserInfo;\n', '\n', '    constructor(\n', '        address _admin,\n', '        address _linaToken,\n', '        address _storage,\n', '        uint256 _rewardPerBlock,\n', '        uint256 _startBlock,\n', '        uint256 _endBlock,\n', '        address _mOldSimpleStaking\n', '    ) public LnAdmin(_admin) LnRewardCalculator(_rewardPerBlock, _startBlock) {\n', '        linaToken = IERC20(_linaToken);\n', '        stakingStorage = LnLinearStakingStorage(_storage);\n', '        mEndBlock = _endBlock;\n', '        if (_mOldSimpleStaking != address(0)) {\n', '            mOldSimpleStaking = LnSimpleStaking(_mOldSimpleStaking);\n', '            (\n', '                mPoolInfo.amount,\n', '                ,\n', '                mPoolInfo.accRewardPerShare\n', '            ) = mOldSimpleStaking.getPoolInfo();\n', '            requireSync = true;\n', '        }\n', '    }\n', '\n', '    function setLinaToken(address _linaToken) external onlyAdmin {\n', '        linaToken = IERC20(_linaToken);\n', '    }\n', '\n', '    function setPaused(bool _paused) external onlyAdmin {\n', '        if (_paused) {\n', '            _pause();\n', '        } else {\n', '            _unpause();\n', '        }\n', '    }\n', '\n', '    //////////////////////////////////////////////////////\n', '    event Staking(address indexed who, uint256 value, uint256 staketime);\n', '    event CancelStaking(address indexed who, uint256 value);\n', '    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\n', '    event TransLock(address target, uint256 time);\n', '\n', '    uint256 public accountStakingListLimit = 50;\n', '    uint256 public minStakingAmount = 1e18; // 1 token\n', '    uint256 public constant PRECISION_UINT = 1e23;\n', '\n', '    function setStakingListLimit(uint256 _limit) external onlyAdmin {\n', '        accountStakingListLimit = _limit;\n', '    }\n', '\n', '    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\n', '        minStakingAmount = _minStakingAmount;\n', '    }\n', '\n', '    function stakingBalanceOf(address account)\n', '        external\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 stakingBalance = super.amountOf(account).add(\n', '            stakingStorage.stakingBalanceOf(account)\n', '        );\n', '        \n', '        if (!syncUserInfo[msg.sender]) {\n', '            uint256 oldAmoutOf = mOldSimpleStaking.amountOf(account);\n', '            stakingBalance = stakingBalance.add(oldAmoutOf);\n', '        }\n', '\n', '        \n', '        return stakingBalance;\n', '    }\n', '\n', '    function getStakesdataLength(address account)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return stakingStorage.getStakesdataLength(account);\n', '    }\n', '\n', '    function setEndBlock(uint256 _newEndBlock) external onlyAdmin {\n', '        require(\n', '            _newEndBlock > mEndBlock,\n', '            "new endBlock less than old endBlock."\n', '        );\n', '        mEndBlock = _newEndBlock;\n', '    }\n', '\n', '    function syncUserInfoData(address _user) internal {\n', '        if (requireSync && !syncUserInfo[_user]) {\n', '            (\n', '                userInfo[_user].reward,\n', '                userInfo[_user].amount,\n', '                userInfo[_user].rewardDebt\n', '            ) = mOldSimpleStaking.getUserInfo(_user);\n', '            syncUserInfo[_user] = true;\n', '        }\n', '    }\n', '\n', '    //--------------------------------------------------------\n', '\n', '    function migrationsOldStaking(\n', '        address contractAddr,\n', '        uint256 amount,\n', '        uint256 blockNb\n', '    ) public onlyAdmin {\n', '        super._deposit(blockNb, contractAddr, amount);\n', '        mOldStaking = contractAddr;\n', '        mOldAmount = amount;\n', '    }\n', '\n', '    function staking(uint256 amount)\n', '        public\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        // stakingStorage.requireInStakingPeriod();\n', '        // require(\n', '        //     syncUserInfo[msg.sender],\n', '        //     "sync is required before perform action."\n', '        // );\n', '\n', '        if (!syncUserInfo[msg.sender]) {\n', '            syncUserInfoData(msg.sender);\n', '        }\n', '\n', '        require(amount >= minStakingAmount, "Staking amount too small.");\n', '        //require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, "Staking list out of limit.");\n', '\n', '        linaToken.transferFrom(msg.sender, address(this), amount);\n', '\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '        super._deposit(blockNb, msg.sender, amount);\n', '\n', '        emit Staking(msg.sender, amount, block.timestamp);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _widthdrawFromOldStaking(address _addr, uint256 amount) internal {\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        uint256 oldStakingAmount = super.amountOf(mOldStaking);\n', '        super._withdraw(blockNb, mOldStaking, amount);\n', '        // sub already withraw reward, then cal portion\n', '        uint256 reward = super\n', '            .rewardOf(mOldStaking)\n', '            .sub(\n', '            mWidthdrawRewardFromOldStaking,\n', '            "_widthdrawFromOldStaking reward sub overflow"\n', '        )\n', '            .mul(amount)\n', '            .mul(1e20)\n', '            .div(oldStakingAmount)\n', '            .div(1e20);\n', '        mWidthdrawRewardFromOldStaking = mWidthdrawRewardFromOldStaking.add(\n', '            reward\n', '        );\n', '        mOldReward[_addr] = mOldReward[_addr].add(reward);\n', '    }\n', '\n', '    function _cancelStaking(address user, uint256 amount) internal {\n', '        uint256 blockNb = block.number;\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        uint256 returnAmount = amount;\n', '        uint256 newAmount = super.amountOf(user);\n', '        if (newAmount >= amount) {\n', '            super._withdraw(blockNb, user, amount);\n', '            amount = 0;\n', '        } else {\n', '            if (newAmount > 0) {\n', '                super._withdraw(blockNb, user, newAmount);\n', '                amount = amount.sub(\n', '                    newAmount,\n', '                    "_cancelStaking amount sub overflow"\n', '                );\n', '            }\n', '\n', '            for (\n', '                uint256 i = stakingStorage.getStakesdataLength(user);\n', '                i >= 1;\n', '                i--\n', '            ) {\n', '                (uint256 stakingAmount, uint256 staketime) = stakingStorage\n', '                    .getStakesDataByIndex(user, i - 1);\n', '                if (amount >= stakingAmount) {\n', '                    amount = amount.sub(\n', '                        stakingAmount,\n', '                        "_cancelStaking amount sub overflow"\n', '                    );\n', '\n', '                    stakingStorage.PopStakesData(user);\n', '                    stakingStorage.SubWeeksTotal(staketime, stakingAmount);\n', '                    _widthdrawFromOldStaking(user, stakingAmount);\n', '                } else {\n', '                    stakingStorage.StakingDataSub(user, i - 1, amount);\n', '                    stakingStorage.SubWeeksTotal(staketime, amount);\n', '                    _widthdrawFromOldStaking(user, amount);\n', '\n', '                    amount = 0;\n', '                }\n', '                if (amount == 0) break;\n', '            }\n', '        }\n', '\n', '        // cancel as many as possible, not fail, that waste gas\n', '        //require(amount == 0, "Cancel amount too big then staked.");\n', '\n', '        linaToken.transfer(msg.sender, returnAmount.sub(amount));\n', '    }\n', '\n', '    function cancelStaking(uint256 amount)\n', '        public\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        // require(\n', '        //     syncUserInfo[msg.sender],\n', '        //     "sync is required before perform action."\n', '        // );\n', '\n', '        if (!syncUserInfo[msg.sender]) {\n', '            syncUserInfoData(msg.sender);\n', '        }\n', '\n', '        //stakingStorage.requireInStakingPeriod();\n', '        require(amount > 0, "Invalid amount.");\n', '\n', '        _cancelStaking(msg.sender, amount);\n', '\n', '        emit CancelStaking(msg.sender, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTotalReward(uint256 blockNb, address _user)\n', '        public\n', '        view\n', '        returns (uint256 total)\n', '    {\n', '        if (!syncUserInfo[msg.sender]) {\n', '            total = _getTotalRewardNotSync(blockNb, _user);\n', '        } else {\n', '            total = _getTotalReward(blockNb, _user);\n', '        }\n', '    }\n', '\n', '    function _getTotalReward(uint256 blockNb, address _user)\n', '        internal \n', '        view\n', '        returns (uint256 total)\n', '    {\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        // 这里奖励分成了三部分\n', '        // 1,已经从旧奖池中cancel了的\n', '        // 2,还在旧奖池中的\n', '        // 3，在新奖池中的\n', '        total = mOldReward[_user];\n', '        uint256 iMyOldStaking = 0;\n', '        for (\n', '            uint256 i = 0;\n', '            i < stakingStorage.getStakesdataLength(_user);\n', '            i++\n', '        ) {\n', '            (uint256 stakingAmount, ) = stakingStorage.getStakesDataByIndex(\n', '                _user,\n', '                i\n', '            );\n', '            iMyOldStaking = iMyOldStaking.add(stakingAmount);\n', '        }\n', '        if (iMyOldStaking > 0) {\n', '            uint256 oldStakingAmount = super.amountOf(mOldStaking);\n', '            uint256 iReward2 = super\n', '                ._calcReward(blockNb, mOldStaking)\n', '                .sub(\n', '                mWidthdrawRewardFromOldStaking,\n', '                "getTotalReward iReward2 sub overflow"\n', '            )\n', '                .mul(iMyOldStaking)\n', '                .div(oldStakingAmount);\n', '            total = total.add(iReward2);\n', '        }\n', '\n', '        uint256 reward3 = super._calcReward(blockNb, _user);\n', '        total = total.add(reward3);\n', '    }\n', '\n', '\n', '    function _getTotalRewardNotSync(uint256 blockNb, address _user)\n', '        internal \n', '        view\n', '        returns (uint256 total)\n', '    {\n', '        if (blockNb > mEndBlock) {\n', '            blockNb = mEndBlock;\n', '        }\n', '\n', '        // rely on the old simplestaking contract\n', '        uint256 oldTotalReward = 0;\n', '        oldTotalReward = mOldSimpleStaking.getTotalReward(blockNb, _user);\n', '        total = total.add(oldTotalReward);\n', '\n', '        uint256 reward3 = super._calcReward(blockNb, _user);\n', '        total = total.add(reward3);\n', '    }\n', '\n', '    // claim reward\n', '    // Note: 需要提前提前把奖励token转进来\n', '    function claim() public override whenNotPaused returns (bool) {\n', '        //stakingStorage.requireStakingEnd()\n', '        // require(\n', '        //     syncUserInfo[msg.sender],\n', '        //     "sync is required before perform action."\n', '        // );\n', '\n', '        if (!syncUserInfo[msg.sender]) {\n', '            syncUserInfoData(msg.sender);\n', '        }\n', '\n', '        require(\n', '            block.timestamp > claimRewardLockTime,\n', '            "Not time to claim reward"\n', '        );\n', '\n', '        uint256 iMyOldStaking = stakingStorage.stakingBalanceOf(msg.sender);\n', '        uint256 iAmount = super.amountOf(msg.sender);\n', '        _cancelStaking(msg.sender, iMyOldStaking.add(iAmount));\n', '\n', '        uint256 iReward = getTotalReward(mEndBlock, msg.sender);\n', '\n', '        _claim(msg.sender);\n', '        mOldReward[msg.sender] = 0;\n', '        linaToken.transfer(msg.sender, iReward);\n', '\n', '        emit Claim(msg.sender, iReward, iMyOldStaking.add(iAmount));\n', '        return true;\n', '    }\n', '\n', '    function setRewardLockTime(uint256 newtime) public onlyAdmin {\n', '        claimRewardLockTime = newtime;\n', '    }\n', '\n', '    function calcReward(uint256 curBlock, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _calcRewardWithViewSimpleAmount(curBlock, _user);\n', '    }\n', '\n', '    // This is copied particularly for catering the amount when user not sync\n', '    function _calcRewardWithViewSimpleAmount(uint256 curBlock, address _user)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = mPoolInfo;\n', '        UserInfo storage user = userInfo[_user];\n', '        uint256 accRewardPerShare = pool.accRewardPerShare;\n', '        uint256 lpSupply = pool.amount;\n', '        if (curBlock > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = curBlock.sub(\n', '                pool.lastRewardBlock,\n', '                "cr curBlock sub overflow"\n', '            );\n', '            uint256 curReward = multiplier.mul(rewardPerBlock);\n', '            accRewardPerShare = accRewardPerShare.add(\n', '                curReward.mul(1e20).div(lpSupply)\n', '            );\n', '        }\n', '\n', '        // Only logic added for old simpleStaking\n', '        uint256 ssReward;\n', '        uint256 ssAmount;\n', '        uint256 ssRewardDebt;\n', '        (ssReward, ssAmount, ssRewardDebt) = mOldSimpleStaking.getUserInfo(\n', '            _user\n', '        );\n', '        ssAmount = ssAmount.add(user.amount);\n', '        ssRewardDebt = ssRewardDebt.add(user.rewardDebt);\n', '        ssReward = ssReward.add(user.reward);\n', '\n', '        // uint256 newReward = user.amount.mul(accRewardPerShare).div(1e20).sub(\n', '        uint256 newReward = ssAmount.mul(accRewardPerShare).div(1e20).sub(\n', '            ssRewardDebt,\n', '            "cr newReward sub overflow"\n', '        );\n', '        return newReward.add(ssReward);\n', '    }\n', '\n', '    function setTransLock(address target, uint256 locktime) public onlyAdmin {\n', '        require(\n', '            locktime >= now + 2 days,\n', '            "locktime need larger than cur time 2 days"\n', '        );\n', '        mTargetAddress = target;\n', '        mTransLockTime = locktime;\n', '\n', '        emit TransLock(mTargetAddress, mTransLockTime);\n', '    }\n', '\n', '    function transTokens(uint256 amount) public onlyAdmin {\n', '        require(mTransLockTime > 0, "mTransLockTime not set");\n', '        require(now > mTransLockTime, "Pls wait to unlock time");\n', '        linaToken.transfer(mTargetAddress, amount);\n', '    }\n', '}']