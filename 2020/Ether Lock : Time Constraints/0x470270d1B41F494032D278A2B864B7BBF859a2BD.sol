['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\DreamStakePool.sol\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '\n', '\n', '\n', 'interface ITokenRewardPool {\n', ' \n', '    function stake (address account, uint256 amount) external returns (bool);\n', '\n', '\n', '    function Unstake (address account) external returns (bool);\n', '\n', '\n', '    function claimReward (address account) external returns (bool);\n', '\n', '\n', '    function emergencyTokenExit (address account) external returns (bool);\n', '\n', '\n', '    function totalStakedAmount() external view returns (uint256);\n', '\n', '\n', '    function stakedAmount(address account) external view returns (uint256);\n', '\n', '\n', '    function rewardAmount(address account) external view returns (uint256);\n', '\n', '\n', '    function beginRewardAmount() external view returns (uint256);\n', '\n', '\n', '    function remainRewardAmount() external view returns (uint256);\n', '\t\n', '\n', '    function ratePool() external view returns (uint256);\n', '\n', '\n', '    function IsRunningPool() external view returns (bool);\n', '\n', '}\n', '\n', 'contract TokenRewardPool is ITokenRewardPool{\n', '    using SafeMath for uint256;\n', '    bool private IS_RUNNING_POOL;\n', '\n', '    uint256 private TOTAL_STAKED_AMOUNT; \n', '    uint256 private BEGIN_REWARD; \n', '    uint256 private REMAIN_REWARD; \n', '    uint256 private REWARD_RATE; \n', '\n', '    IERC20 private rewardToken; \n', '    IERC20 private stakeToken; \n', '\n', '    address private TEAM_POOL; \n', '\n', '    mapping (address => uint256) private USER_STAKED_AMOUNT; \n', '    mapping (address => uint256) private USER_REWARD; \n', '    mapping (address => bool) private IS_REGISTED;\n', '    address[] private CONTRACT_LIST;\n', '    mapping (address => uint256) private UPDATED_TIMESTAMP;\n', '\n', '    event Stake(address indexed user, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 amount);\n', '\n', '    mapping (address => uint256) private USER_STAKE_TIME; \n', '\n', '    constructor (\n', '        uint256 _rewardRate, \n', '        address _rewardToken,\n', '        address _stakeToken, \n', '        address _teamPool\n', '    ) internal {\n', '        rewardToken = IERC20(_rewardToken);\n', '        stakeToken = IERC20(_stakeToken);\n', '        REWARD_RATE = _rewardRate;\n', '        TEAM_POOL = _teamPool;\n', '        IS_RUNNING_POOL = false;\n', '    }\n', '    \n', '    function stake (address account, uint256 amount) external returns (bool){\n', '\n', '        require(IS_RUNNING_POOL == true, "The pool has ended.");\n', '        require(amount > 0, "The pool has ended.");\n', '\n', '        _registAddress(account); \n', '        // _updateReward(account); \n', '        _updateAllReward();\n', '\n', '        if(UPDATED_TIMESTAMP[account] <= 0){\n', '            UPDATED_TIMESTAMP[account] = block.timestamp;\n', '        }\n', '        \n', '        USER_STAKE_TIME[account] = block.timestamp;\n', '        \n', '        stakeToken.transferFrom(account, address(this), amount); \n', '\n', '        USER_STAKED_AMOUNT[account] = USER_STAKED_AMOUNT[account].add(amount);\n', '\n', '        TOTAL_STAKED_AMOUNT = TOTAL_STAKED_AMOUNT.add(amount);\n', '        \n', '        emit Stake(account, amount);\n', '    }\n', '\n', '    function Unstake (address account) external returns (bool){\n', '\n', '        // _updateReward(account);\n', '        _updateAllReward();\n', '\n', '        if(USER_REWARD[account] > 0){\n', '            uint256 rewards = USER_REWARD[account];\n', '            USER_REWARD[account] = 0;\n', '            rewardToken.transfer(account, rewards);\n', '        }\n', '        USER_STAKE_TIME[account] = 0;\n', '      \n', '        _stake_token_withdraw(account, USER_STAKED_AMOUNT[account]);\n', '    }\n', '\n', '    function claimReward (address account) external returns (bool){\n', '        \n', '        // _updateReward(account);\n', '        _updateAllReward();\n', '\n', '        require(USER_REWARD[account] > 0, "Nothing to claim");\n', '\n', '        uint256 withrawAmount = USER_REWARD[account];\n', '        USER_REWARD[account] = 0; \n', '\n', '        USER_STAKE_TIME[account] = block.timestamp; \n', '\n', '        rewardToken.transfer(account, withrawAmount);\n', '    }\n', '\n', '    function totalStakedAmount() external view returns (uint256){\n', '        return TOTAL_STAKED_AMOUNT;\n', '    }\n', '\n', '    function stakedAmount(address account) external view returns (uint256){\n', '        return USER_STAKED_AMOUNT[account];\n', '    }\n', '\n', '    function rewardAmount(address account) external view returns (uint256){\n', '        return USER_REWARD[account];\n', '    }\n', '\n', '    function beginRewardAmount() external view returns (uint256){\n', '         return BEGIN_REWARD;\n', '    }\n', '\n', '    function remainRewardAmount() external view returns (uint256){\n', '         return REMAIN_REWARD;\n', '    }\n', '\t\n', '    function ratePool() external view returns (uint256){\n', '        return REWARD_RATE;\n', '    }\n', '\n', '    function IsRunningPool() external view returns (bool){\n', '        return IS_RUNNING_POOL;\n', '    }\n', '\n', '    function emergencyTokenExit (address account) external returns (bool){\n', '        uint256 amount = USER_STAKED_AMOUNT[account];\n', '        _stake_token_withdraw(account, amount);\n', '\n', '        USER_STAKED_AMOUNT[account] = 0;\n', '        USER_REWARD[account] = 0;\n', '\n', '        emit EmergencyWithdraw(account, amount);\n', '    }\n', '\n', '   function _initPool() internal {\n', '\n', '        BEGIN_REWARD = rewardToken.balanceOf(address(this));\n', '\n', '        if(BEGIN_REWARD <= 0){\n', '            return;\n', '        }else{\n', '            REMAIN_REWARD = BEGIN_REWARD;\n', '\n', '            _setIsRunningPool(true);\n', '        }\n', '    }\n', '\n', '    function _setIsRunningPool(bool _isRunningPool) internal {\n', '        IS_RUNNING_POOL = _isRunningPool;\n', '    }\n', '\n', '    function _stake_token_withdraw (address host, uint256 amount) internal {\n', '\n', '        require(USER_STAKED_AMOUNT[host] >= 0);\n', '\n', '        USER_STAKED_AMOUNT[host] = USER_STAKED_AMOUNT[host].sub(amount);\n', '\n', '        TOTAL_STAKED_AMOUNT = TOTAL_STAKED_AMOUNT.sub(amount);\n', '\n', '        stakeToken.transfer(host, amount);\n', '    }\n', '\n', '    function _updateReward (address host) internal {\n', '\n', '        uint256 elapsed = _elapsedBlock(UPDATED_TIMESTAMP[host]);\n', '        \n', '        if(elapsed <= 0){\n', '            return;\n', '        }\n', '        \n', '        uint256 stakeAmount = USER_STAKED_AMOUNT[host];\n', '        if(stakeAmount <= 0){\n', '            return;\n', '        }\n', '        UPDATED_TIMESTAMP[host] = block.timestamp;\n', '        uint256 baseEarned = _calculateEarn(elapsed, stakeAmount);\n', '\n', '        if(REMAIN_REWARD >= baseEarned){\n', '\n', '            USER_REWARD[host] = baseEarned.mul(95).div(100).add(USER_REWARD[host]);\n', '            USER_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100).add(USER_REWARD[TEAM_POOL]);\n', '            REMAIN_REWARD = REMAIN_REWARD.sub(baseEarned);\n', '        }else{\n', '            if(REMAIN_REWARD > 0){\n', '                uint256 remainAll = REMAIN_REWARD;\n', '                REMAIN_REWARD = 0;\n', '                USER_REWARD[host] = remainAll.mul(95).div(100).add(USER_REWARD[host]);\n', '                USER_REWARD[TEAM_POOL] = remainAll.mul(5).div(100).add(USER_REWARD[TEAM_POOL]);\n', '     \n', '            }\n', '            _setIsRunningPool(false);\n', '        }\n', '    }\n', '\n', '    function _elapsedBlock (uint256 updated) internal view returns (uint256) {\n', '        uint256 open = updated; \n', '        uint256 close = block.timestamp; \n', '        return open >= close ? 0 : close - open;   \n', '    }\n', '\n', '    function _registAddress (address host) internal {\n', '        if(IS_REGISTED[host]){return;}\n', '\n', '        IS_REGISTED[host] = true;\n', '        CONTRACT_LIST.push(host);\n', '    }\n', '\n', '    function _endPool(address owner) internal {\n', '        _updateAllReward();\n', '\n', '        //First User Stake & Reward withdraw\n', '        for(uint256 i=0; i<CONTRACT_LIST.length; i++){\n', '            address account = CONTRACT_LIST[i];\n', '            if(USER_REWARD[account] > 0){\n', '                uint256 rewards = USER_REWARD[account];\n', '                USER_REWARD[account] = 0;\n', '                rewardToken.transfer(account, rewards);\n', '            }\n', '            _stake_token_withdraw(account, USER_STAKED_AMOUNT[account]);\n', '        }   \n', '\n', '        //Second Team Reward withdraw\n', '        if(TEAM_POOL != address(0)){\n', '            if(USER_REWARD[TEAM_POOL] > 0){\n', '                uint256 rewards = USER_REWARD[TEAM_POOL];\n', '                USER_REWARD[TEAM_POOL] = 0;\n', '                rewardToken.transfer(TEAM_POOL, rewards);\n', '            }\n', '        }\n', '\n', '        //Third Owner saved reward withdraw\n', '        uint256 endRewardAmount = rewardToken.balanceOf(address(this));\n', '        if(endRewardAmount > 0){\n', '            rewardToken.transfer(owner, endRewardAmount);\n', '        }\n', '\n', '        //Third End\n', '        _setIsRunningPool(false);\n', '    }\n', '\n', '    function _updatePool() internal {\n', '        _updateAllReward();\n', '    }\n', '\n', '\n', '    function rewordForSecond(address account) public view returns (uint256){\n', '        uint256 stakeAmount = USER_STAKED_AMOUNT[account];\n', '        if(stakeAmount <= 0){\n', '            return 0;\n', '        }\n', '\n', '        uint256 oneYearReward = stakeAmount.mul(REWARD_RATE).div(100);\n', '        uint256 oneDayReward = oneYearReward.div(365);\n', '        uint256 oneTimesReward = oneDayReward.div(24);\n', '        uint256 oneMinReward = oneTimesReward.div(60);\n', '        uint256 oneSeconReward = oneMinReward.div(60);\n', '        return oneSeconReward;        \n', '    }\n', '\n', '    function userReward(address account) public view returns (uint256){\n', '       return USER_REWARD[account];\n', '    }\n', '    \n', '    function teamPoolAddress() public view returns (address){\n', '       return TEAM_POOL;\n', '    }\n', '\n', '    function _updateAllReward () internal {\n', '        for(uint256 i=0; i<CONTRACT_LIST.length; i++){\n', '            if(IS_RUNNING_POOL){\n', '                _updateReward(CONTRACT_LIST[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _calculateEarn (uint256 elapsed, uint256 staked) internal view returns (uint256) {\n', '        if(staked == 0){return 0;}\n', '        \n', '        if(elapsed <= 0){return 0;}\n', '\n', '        uint256 oneYearReward = staked.mul(REWARD_RATE).div(100);\n', '        uint256 oneDayReward = oneYearReward.div(365);\n', '        uint256 oneTimesReward = oneDayReward.div(24);\n', '        uint256 oneMinReward = oneTimesReward.div(60);\n', '        uint256 oneSeconReward = oneMinReward.div(60);\n', '        uint256 secondReward = oneSeconReward.mul(elapsed); // ?꾩옱 珥덈떦?댁옄\n', '     \n', '        return secondReward;\n', '    }\n', '\n', '    function _changeRewardRate (uint256 _rate) internal {\n', '        _updateAllReward();\n', '        REWARD_RATE = _rate;\n', '    }\n', '\n', '    function contractListCount () external view returns (uint256) {\n', '        return CONTRACT_LIST.length;\n', '    }\n', '    \n', '    function userStakeTime (address account) external view returns (uint256) {\n', '        return USER_STAKE_TIME[account];\n', '    }\n', '    \n', '}\n', '\n', 'contract FRIStakePool is Ownable, TokenRewardPool{\n', '    \n', '    string private name = "PoolName";\n', '       \n', '    constructor (   \n', '        string memory _name,//Pool Name\n', '        uint256 _rate, \n', '        address _rewardToken, \n', '        address _stakeToken, \n', '        address _teamPool) TokenRewardPool(_rate, _rewardToken, _stakeToken, _teamPool) onlyOwner public{\n', '        name = _name;\n', '    }\n', '\n', '    function initTotalReward () public onlyOwner {\n', '        _initPool();\n', '    }\n', '\n', '    function endPool() public onlyOwner {\n', '          _endPool(owner());\n', '    }\n', '\n', '    function changeRewardRate (uint256 rate) public onlyOwner {\n', '       _changeRewardRate(rate);\n', '    }\n', '\n', '    function updatePool () public onlyOwner {\n', '       _updatePool();\n', '    }  \n', '}']