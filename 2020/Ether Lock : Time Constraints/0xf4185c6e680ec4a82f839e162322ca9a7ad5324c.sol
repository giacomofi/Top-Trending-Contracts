['// LTSSC\n', '// iCORE liquidity token staking smart contract (farming)\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'library Math {\n', '    \n', '\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a < b ? a : b;\n', '\t}\n', '\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '\t}\n', '}\n', 'library SafeMath {\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', 'interface IERC20 {\n', '\tfunction totalSupply() external view returns (uint256);\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IStakedRewardsPool {\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\tfunction earned(address account) external view returns (uint256);\n', '\n', '\tfunction rewardsToken() external view returns (IERC20);\n', '\n', '\tfunction stakingToken() external view returns (IERC20);\n', '\n', '\tfunction stakingTokenDecimals() external view returns (uint8);\n', '\n', '\tfunction totalSupply() external view returns (uint256);\n', '\tfunction exit() external;\n', '\n', '\tfunction getReward() external;\n', '\n', '\tfunction getRewardExact(uint256 amount) external;\n', '\n', '\tfunction pause() external;\n', '\n', '\tfunction recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) external;\n', '\n', '\tfunction stake(uint256 amount) external;\n', '\n', '\tfunction unpause() external;\n', '\n', '\tfunction updateReward() external;\n', '\n', '\tfunction updateRewardFor(address account) external;\n', '\n', '\tfunction withdraw(uint256 amount) external;\n', '\tevent RewardPaid(address indexed account, uint256 amount);\n', '\tevent Staked(address indexed account, uint256 amount);\n', '\tevent Withdrawn(address indexed account, uint256 amount);\n', '\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\n', '}\n', '\n', 'interface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\n', '\tfunction accruedRewardPerToken() external view returns (uint256);\n', '\n', '\tfunction hasEnded() external view returns (bool);\n', '\n', '\tfunction hasStarted() external view returns (bool);\n', '\n', '\tfunction lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '\tfunction periodDuration() external view returns (uint256);\n', '\n', '\tfunction periodEndTime() external view returns (uint256);\n', '\n', '\tfunction periodStartTime() external view returns (uint256);\n', '\n', '\tfunction rewardRate() external view returns (uint256);\n', '\n', '\tfunction timeRemainingInPeriod() external view returns (uint256);\n', '\tfunction addToRewardsAllocation(uint256 amount) external;\n', '\n', '\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\n', '\tevent RewardAdded(uint256 amount);\n', '\tevent NewPeriodSet(uint256 startTIme, uint256 endTime);\n', '}\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal view virtual returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view virtual returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\tconstructor () {\n', '\t\taddress msgSender = _msgSender();\n', '\t\t_owner = msgSender;\n', '\t\temit OwnershipTransferred(address(0), msgSender);\n', '\t}\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\tmodifier onlyOwner() {\n', '\t\trequire(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\tfunction renounceOwnership() public virtual onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n', '\t\trequire(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', 'contract Pausable is Context {\n', '\tevent Paused(address account);\n', '\tevent Unpaused(address account);\n', '\n', '\tbool private _paused;\n', '\tconstructor () {\n', '\t\t_paused = false;\n', '\t}\n', '\tfunction paused() public view returns (bool) {\n', '\t\treturn _paused;\n', '\t}\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!_paused, "Pausable: paused");\n', '\t\t_;\n', '\t}\n', '\tmodifier whenPaused() {\n', '\t\trequire(_paused, "Pausable: not paused");\n', '\t\t_;\n', '\t}\n', '\tfunction _pause() internal virtual whenNotPaused {\n', '\t\t_paused = true;\n', '\t\temit Paused(_msgSender());\n', '\t}\n', '\tfunction _unpause() internal virtual whenPaused {\n', '\t\t_paused = false;\n', '\t\temit Unpaused(_msgSender());\n', '\t}\n', '}\n', 'contract ReentrancyGuard {\n', "\t// transaction's gas, it is best to keep them low in cases like this one, to\n", '\tuint256 private constant _NOT_ENTERED = 1;\n', '\tuint256 private constant _ENTERED = 2;\n', '\n', '\tuint256 private _status;\n', '\n', '\tconstructor () {\n', '\t\t_status = _NOT_ENTERED;\n', '\t}\n', '\tmodifier nonReentrant() {\n', '\t\trequire(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\t\t_status = _ENTERED;\n', '\n', '\t\t_;\n', '\t\t_status = _NOT_ENTERED;\n', '\t}\n', '}\n', 'library Address {\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\tbytes32 codehash;\n', '\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '\t\tassembly { codehash := extcodehash(account) }\n', '\t\treturn (codehash != accountHash && codehash != 0x0);\n', '\t}\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(address(this).balance >= amount, "Address: insufficient balance");\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(success, "Address: unable to send value, recipient may have reverted");\n', '\t}\n', '\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '\t  return functionCall(target, data, "Address: low-level call failed");\n', '\t}\n', '\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '\t\treturn functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '\t}\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '\t\trequire(address(this).balance >= value, "Address: insufficient balance for call");\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\tif (returndata.length > 0) {\n', '\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', 'library SafeERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '\t}\n', '\n', '\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '\t}\n', '\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\n', '\t\t\t"SafeERC20: approve from non-zero to non-zero allowance"\n', '\t\t);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '\t}\n', '\n', '\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\n', '\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '\t}\n', '\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '\n', '\t\tbytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '\t\tif (returndata.length > 0) { // Return data is optional\n', '\t\t\trequire(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '\t\t}\n', '\t}\n', '}\n', '\n', 'abstract contract StakedRewardsPool is\n', '\tContext,\n', '\tReentrancyGuard,\n', '\tOwnable,\n', '\tPausable,\n', '\tIStakedRewardsPool\n', '{\n', '\tusing SafeERC20 for IERC20;\n', '\tusing SafeMath for uint256;\n', '\tmapping(address => uint256) internal _rewards;\n', '\tuint8 private _stakingTokenDecimals;\n', '\tIERC20 private _rewardsToken;\n', '\tIERC20 private _stakingToken;\n', '\tuint256 private _stakingTokenBase;\n', '\tmapping(address => uint256) private _balances;\n', '\tuint256 private _totalSupply;\n', '\tconstructor(\n', '\t\tIERC20 rewardsToken,\n', '\t\tIERC20 stakingToken,\n', '\t\tuint8 stakingTokenDecimals\n', '\t) Ownable() {\n', '\t\trequire(\n', '\t\t\tstakingTokenDecimals < 77,\n', '\t\t\t"StakedRewardsPool: staking token has far too many decimals"\n', '\t\t);\n', '\n', '\t\t_rewardsToken = rewardsToken;\n', '\n', '\t\t_stakingToken = stakingToken;\n', '\t\t_stakingTokenDecimals = stakingTokenDecimals;\n', '\t\t_stakingTokenBase = 10**stakingTokenDecimals;\n', '\t}\n', '\tfunction balanceOf(address account) public view override returns (uint256) {\n', '\t\treturn _balances[account];\n', '\t}\n', '\n', '\tfunction earned(address account)\n', '\t\tpublic\n', '\t\tview\n', '\t\tvirtual\n', '\t\toverride\n', '\t\treturns (uint256);\n', '\n', '\tfunction rewardsToken() public view override returns (IERC20) {\n', '\t\treturn _rewardsToken;\n', '\t}\n', '\n', '\tfunction stakingToken() public view override returns (IERC20) {\n', '\t\treturn _stakingToken;\n', '\t}\n', '\n', '\tfunction stakingTokenDecimals() public view override returns (uint8) {\n', '\t\treturn _stakingTokenDecimals;\n', '\t}\n', '\n', '\tfunction totalSupply() public view override returns (uint256) {\n', '\t\treturn _totalSupply;\n', '\t}\n', '\tfunction exit() public override nonReentrant {\n', '\t\t_exit();\n', '\t}\n', '\n', '\tfunction getReward() public override nonReentrant {\n', '\t\t_getReward();\n', '\t}\n', '\n', '\tfunction getRewardExact(uint256 amount) public override nonReentrant {\n', '\t\t_getRewardExact(amount);\n', '\t}\n', '\n', '\tfunction pause() public override onlyOwner {\n', '\t\t_pause();\n', '\t}\n', '\tfunction recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) public override onlyOwner {\n', '\t\t_recoverUnsupportedERC20(token, to, amount);\n', '\t}\n', '\n', '\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\n', '\t\t_stakeFrom(_msgSender(), amount);\n', '\t}\n', '\n', '\tfunction unpause() public override onlyOwner {\n', '\t\t_unpause();\n', '\t}\n', '\n', '\tfunction updateReward() public override nonReentrant {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t}\n', '\n', '\tfunction updateRewardFor(address account) public override nonReentrant {\n', '\t\t_updateRewardFor(account);\n', '\t}\n', '\n', '\tfunction withdraw(uint256 amount) public override nonReentrant {\n', '\t\t_withdraw(amount);\n', '\t}\n', '\tfunction _getStakingTokenBase() internal view returns (uint256) {\n', '\t\treturn _stakingTokenBase;\n', '\t}\n', '\tfunction _exit() internal virtual {\n', '\t\t_withdraw(_balances[_msgSender()]);\n', '\t\t_getReward();\n', '\t}\n', '\n', '\tfunction _getReward() internal virtual {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\tuint256 reward = _rewards[_msgSender()];\n', '\t\tif (reward > 0) {\n', '\t\t\t_rewards[_msgSender()] = 0;\n', '\t\t\t_rewardsToken.safeTransfer(_msgSender(), reward);\n', '\t\t\temit RewardPaid(_msgSender(), reward);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _getRewardExact(uint256 amount) internal virtual {\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\tuint256 reward = _rewards[_msgSender()];\n', '\t\trequire(\n', '\t\t\tamount <= reward,\n', '\t\t\t"StakedRewardsPool: can not redeem more rewards than you have earned"\n', '\t\t);\n', '\t\t_rewards[_msgSender()] = reward.sub(amount);\n', '\t\t_rewardsToken.safeTransfer(_msgSender(), amount);\n', '\t\temit RewardPaid(_msgSender(), amount);\n', '\t}\n', '\n', '\tfunction _recoverUnsupportedERC20(\n', '\t\tIERC20 token,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) internal virtual {\n', '\t\trequire(\n', '\t\t\ttoken != _stakingToken,\n', '\t\t\t"StakedRewardsPool: cannot withdraw the staking token"\n', '\t\t);\n', '\t\trequire(\n', '\t\t\ttoken != _rewardsToken,\n', '\t\t\t"StakedRewardsPool: cannot withdraw the rewards token"\n', '\t\t);\n', '\t\ttoken.safeTransfer(to, amount);\n', '\t\temit Recovered(token, to, amount);\n', '\t}\n', '\n', '\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\n', '\t\trequire(\n', '\t\t\taccount != address(0),\n', '\t\t\t"StakedRewardsPool: cannot stake from the zero address"\n', '\t\t);\n', '\t\trequire(amount > 0, "StakedRewardsPool: cannot stake zero");\n', '\t\t_updateRewardFor(account);\n', '\t\t_totalSupply = _totalSupply.add(amount);\n', '\t\t_balances[account] = _balances[account].add(amount);\n', '\t\t_stakingToken.safeTransferFrom(account, address(this), amount);\n', '\t\temit Staked(account, amount);\n', '\t}\n', '\n', '\tfunction _updateRewardFor(address account) internal virtual;\n', '\n', '\tfunction _withdraw(uint256 amount) internal virtual {\n', '\t\trequire(amount > 0, "StakedRewardsPool: cannot withdraw zero");\n', '\t\t_updateRewardFor(_msgSender());\n', '\t\t_totalSupply = _totalSupply.sub(amount);\n', '\t\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\n', '\t\t_stakingToken.safeTransfer(_msgSender(), amount);\n', '\t\temit Withdrawn(_msgSender(), amount);\n', '\t}\n', '}\n', 'contract StakedRewardsPoolTimedRate is\n', '\tStakedRewardsPool,\n', '\tIStakedRewardsPoolTimedRate\n', '{\n', '\tusing SafeMath for uint256;\n', '\tuint256 private _accruedRewardPerToken;\n', '\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\n', '\tuint256 private _lastUpdateTime;\n', '\tuint256 private _periodEndTime;\n', '\tuint256 private _periodStartTime;\n', '\tuint256 private _rewardRate;\n', '\tmodifier whenStarted {\n', '\t\trequire(\n', '\t\t\thasStarted(),\n', '\t\t\t"StakedRewardsPoolTimedRate: current rewards distribution period has not yet begun"\n', '\t\t);\n', '\t\t_;\n', '\t}\n', '\tconstructor(\n', '\t\tIERC20 rewardsToken,\n', '\t\tIERC20 stakingToken,\n', '\t\tuint8 stakingTokenDecimals,\n', '\t\tuint256 periodStartTime,\n', '\t\tuint256 periodEndTime\n', '\t) StakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\n', '\t\t_periodStartTime = periodStartTime;\n', '\t\t_periodEndTime = periodEndTime;\n', '\t}\n', '\tfunction accruedRewardPerToken() public view override returns (uint256) {\n', '\t\tuint256 totalSupply = totalSupply();\n', '\t\tif (totalSupply == 0) {\n', '\t\t\treturn _accruedRewardPerToken;\n', '\t\t}\n', '\n', '\t\tuint256 lastUpdateTime = _lastUpdateTime;\n', '\t\tuint256 lastTimeApplicable = lastTimeRewardApplicable();\n', '\t\tif (_periodStartTime > lastUpdateTime) {\n', '\t\t\tif (_periodStartTime > lastTimeApplicable) {\n', '\t\t\t\treturn _accruedRewardPerToken;\n', '\t\t\t}\n', '\t\t\tlastUpdateTime = _periodStartTime;\n', '\t\t}\n', '\n', '\t\tuint256 dt = lastTimeApplicable.sub(lastUpdateTime);\n', '\t\tif (dt == 0) {\n', '\t\t\treturn _accruedRewardPerToken;\n', '\t\t}\n', '\n', '\t\tuint256 accruedReward = _rewardRate.mul(dt);\n', '\n', '\t\treturn\n', '\t\t\t_accruedRewardPerToken.add(\n', '\t\t\t\taccruedReward.mul(_getStakingTokenBase()).div(totalSupply)\n', '\t\t\t);\n', '\t}\n', '\n', '\tfunction earned(address account)\n', '\t\tpublic\n', '\t\tview\n', '\t\toverride(IStakedRewardsPool, StakedRewardsPool)\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn\n', '\t\t\tbalanceOf(account)\n', '\t\t\t\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\n', '\t\t\t\t.div(_getStakingTokenBase())\n', '\t\t\t\t.add(_rewards[account]);\n', '\t}\n', '\n', '\tfunction hasStarted() public view override returns (bool) {\n', '\t\treturn block.timestamp >= _periodStartTime;\n', '\t}\n', '\n', '\tfunction hasEnded() public view override returns (bool) {\n', '\t\treturn block.timestamp >= _periodEndTime;\n', '\t}\n', '\n', '\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\n', '\t\tif (!hasStarted()) {\n', '\t\t\treturn _lastUpdateTime;\n', '\t\t}\n', '\t\treturn Math.min(block.timestamp, _periodEndTime);\n', '\t}\n', '\n', '\tfunction periodDuration() public view override returns (uint256) {\n', '\t\treturn _periodEndTime.sub(_periodStartTime);\n', '\t}\n', '\n', '\tfunction periodEndTime() public view override returns (uint256) {\n', '\t\treturn _periodEndTime;\n', '\t}\n', '\n', '\tfunction periodStartTime() public view override returns (uint256) {\n', '\t\treturn _periodStartTime;\n', '\t}\n', '\n', '\tfunction rewardRate() public view override returns (uint256) {\n', '\t\treturn _rewardRate;\n', '\t}\n', '\n', '\tfunction timeRemainingInPeriod()\n', '\t\tpublic\n', '\t\tview\n', '\t\toverride\n', '\t\twhenStarted\n', '\t\treturns (uint256)\n', '\t{\n', '\t\tif (hasEnded()) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn _periodEndTime.sub(block.timestamp);\n', '\t}\n', '\tfunction addToRewardsAllocation(uint256 amount)\n', '\t\tpublic\n', '\t\toverride\n', '\t\tnonReentrant\n', '\t\tonlyOwner\n', '\t{\n', '\t\t_addToRewardsAllocation(amount);\n', '\t}\n', '\n', '\tfunction setNewPeriod(uint256 startTime, uint256 endTime)\n', '\t\tpublic\n', '\t\toverride\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(\n', '\t\t\t!hasStarted() || hasEnded(),\n', '\t\t\t"StakedRewardsPoolTimedRate: cannot change an ongoing staking period"\n', '\t\t);\n', '\t\trequire(\n', '\t\t\tendTime > startTime,\n', '\t\t\t"StakedRewardsPoolTimedRate: endTime must be greater than startTime"\n', '\t\t);\n', '\t\trequire(\n', '\t\t\tstartTime > block.timestamp,\n', '\t\t\t"StakedRewardsPoolTimedRate: startTime must be greater than the current block time"\n', '\t\t);\n', '\t\t_updateAccrual();\n', '\n', '\t\tif (hasEnded()) {\n', '\t\t\t_rewardRate = 0;\n', '\t\t} else {\n', '\t\t\tuint256 totalReward = _rewardRate.mul(periodDuration());\n', '\t\t\t_rewardRate = totalReward.div(endTime.sub(startTime));\n', '\t\t}\n', '\n', '\t\t_periodStartTime = startTime;\n', '\t\t_periodEndTime = endTime;\n', '\n', '\t\temit NewPeriodSet(startTime, endTime);\n', '\t}\n', '\tfunction _addToRewardsAllocation(uint256 amount) internal {\n', '\t\t_updateAccrual();\n', '\t\tuint256 remainingTime;\n', '\t\tif (!hasStarted() || hasEnded()) {\n', '\t\t\tremainingTime = periodDuration();\n', '\t\t} else {\n', '\t\t\tremainingTime = timeRemainingInPeriod();\n', '\t\t}\n', '\n', '\t\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\n', '\n', '\t\temit RewardAdded(amount);\n', '\t}\n', '\n', '\tfunction _updateAccrual() internal {\n', '\t\t_accruedRewardPerToken = accruedRewardPerToken();\n', '\t\t_lastUpdateTime = lastTimeRewardApplicable();\n', '\t}\n', '\tfunction _updateRewardFor(address account) internal override {\n', '\t\t_updateAccrual();\n', '\t\t_rewards[account] = earned(account);\n', '\t\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\n', '\t}\n', '}']