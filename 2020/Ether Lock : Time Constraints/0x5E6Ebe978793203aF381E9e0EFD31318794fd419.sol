['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/ISparkleTimestamp.sol\n', '\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', '// import "../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol";\n', '\n', '/**\n', ' * @dev Sparkle Timestamp Contract\n', ' * @author SparkleMobile Inc. (c) 2019-2020\n', ' */\n', 'interface ISparkleTimestamp {\n', '\n', '  /**\n', '   * @dev Add new reward timestamp for address\n', '   * @param _rewardAddress being added to timestamp collection\n', '   */\n', '  function addTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Reset timestamp maturity for loyalty address\n', '   * @param _rewardAddress to have reward period reset\n', '   */\n', '  function resetTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Zero/delete existing loyalty timestamp entry\n', '   * @param _rewardAddress being requested for timestamp deletion\n', '   * @notice Test(s) not passed\n', '   */\n', '  function deleteTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Get address confirmation for loyalty address\n', '   * @param _rewardAddress being queried for address information\n', '   */\n', '  function getAddress(address _rewardAddress)\n', '  external\n', '  returns(address);\n', '\n', '  /**\n', '   * @dev Get timestamp of initial joined timestamp for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getJoinedTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Get timestamp of last deposit for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getDepositTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Get timestamp of reward maturity for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getRewardTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Determine if address specified has a timestamp record\n', '   * @param _rewardAddress being queried for timestamp existance\n', '   */\n', '  function hasTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', "   * @dev Calculate time remaining in seconds until this address' reward matures\n", '   * @param _rewardAddress to query remaining time before reward matures\n', '   */\n', '  function getTimeRemaining(address _rewardAddress)\n', '  external\n', '  returns(uint256, bool, uint256);\n', '\n', '  /**\n', '   * @dev Determine if reward is mature for  address\n', '   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\n', '   */\n', '  function isRewardReady(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Change the stored loyalty controller contract address\n', '   * @param _newAddress of new loyalty controller contract address\n', '   */\n', '  function setContractAddress(address _newAddress)\n', '  external;\n', '\n', '  /**\n', '   * @dev Return the stored authorized controller address\n', '   * @return Address of loyalty controller contract\n', '   */\n', '  function getContractAddress()\n', '  external\n', '  returns(address);\n', '\n', '  /**\n', '   * @dev Change the stored loyalty time period\n', '   * @param _newTimePeriod of new reward period (in seconds)\n', '   */\n', '  function setTimePeriod(uint256 _newTimePeriod)\n', '  external;\n', '\n', '  /**\n', '   * @dev Return the current loyalty timer period\n', '   * @return Current stored value of loyalty time period\n', '   */\n', '  function getTimePeriod()\n', '  external\n', '  returns(uint256);\n', '\n', '\t/**\n', '\t * @dev Event signal: Reset timestamp\n', '\t */\n', '  event ResetTimestamp(address _rewardAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty contract address waws changed\n', '\t */\n', '\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward time period was changed\n', '\t */\n', '\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was added\n', '\t */\n', '\tevent TimestampAdded( address indexed _newTimestampAddress );\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was removed\n', '\t */\n', '\tevent TimestampDeleted( address indexed _newTimestampAddress );\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp for address was reset\n', '   */\n', '  event TimestampReset(address _rewardAddress);\n', '\n', '}\n', '\n', '// File: contracts/SparkleTimestamp.sol\n', '\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Sparkle Timestamp Contract\n', ' * @author SparkleMobile Inc. (c) 2019-2020\n', ' */\n', 'contract SparkleTimestamp is ISparkleTimestamp, Ownable, Pausable, ReentrancyGuard {\n', '  /**\n', '   * @dev Ensure math safety through SafeMath\n', '   */\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * @dev Timestamp object for tacking block.timestamp ooc(out-of-contract)\n', '   * @param _address Address of the owner address of this record\n', '   * @param _joined block.timestamp of initial joining time\n', "   * @param _deposit block.timestamp of reward address' deposit (uint256)\n", '   * @param _reward block.timestamp + loyaltyTimePeriod precalculation (uint256)\n', '   */\n', '  struct Timestamp {\n', '    address _address;\n', '    uint256 _joined;\n', '    uint256 _deposit;\n', '    uint256 _reward;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal address for authorized loyalty contract\n', '   */\n', '  address private contractAddress;\n', '\n', '  /**\n', "   * @dev Internal time period of reward maturity for all address'\n", '   */\n', '  uint256 private timePeriod;\n', '\n', '  /**\n', '   * @dev Internal loyalty timestamp mapping to authorized calling loyalty contracts\n', '   */\n', '  mapping(address => mapping(address => Timestamp)) private g_timestamps;\n', '\n', '  /**\n', '   * @dev SparkleTimestamp contract .cTor\n', '   */\n', '  constructor()\n', '  public\n', '  Ownable()\n', '  Pausable()\n', '  ReentrancyGuard()\n', '  {\n', '    /// Initialize contract address to 0x0\n', '    contractAddress = address(0x0);\n', '    /// Initilize time period to 24 hours (86400 seconds)\n', '    timePeriod = 60 * 60 * 24;\n', '  }\n', '\n', '  /**\n', '   * @dev Add new reward timestamp for address\n', '   * @param _rewardAddress being added to timestamp collection\n', '   */\n', '  function addTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}a');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0x0), 'Invalid reward address');\n", '    /// Validate specified address does not have a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(0x0), 'Timestamp exists');\n", '    /// Initialize timestamp structure with loyalty users data\n', '    g_timestamps[msg.sender][_rewardAddress]._address = address(_rewardAddress);\n', '    g_timestamps[msg.sender][_rewardAddress]._deposit = block.timestamp;\n', '    g_timestamps[msg.sender][_rewardAddress]._joined = block.timestamp;\n', '    /// Calculate the time in the future reward will mature\n', '    g_timestamps[msg.sender][_rewardAddress]._reward = timePeriod.add(block.timestamp);\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit TimestampAdded(_rewardAddress);\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Reset timestamp maturity for loyalty address\n', '   * @param _rewardAddress to have reward period reset\n', '   */\n', '  function resetTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}b');\n", "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0x0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'Invalid timestamp');\n", '    /// Re-initialize timestamp structure with updated time data\n', '    g_timestamps[msg.sender][_rewardAddress]._deposit = block.timestamp;\n', '    g_timestamps[msg.sender][_rewardAddress]._reward = uint256(block.timestamp).add(timePeriod);\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Zero/delete existing loyalty timestamp entry\n', '   * @param _rewardAddress being requested for timestamp deletion\n', '   * @notice Test(s) not passed\n', '   */\n', '  function deleteTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  nonReentrant\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}c');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', '    require(_rewardAddress != address(0), "Invalid reward address ");\n', '    /// Validate specified address has a timestamp\n', '    if(g_timestamps[msg.sender][_rewardAddress]._address != address(_rewardAddress)) {\n', '      emit TimestampDeleted( false );\n', '      return false;\n', '    }\n', '\n', '    // Zero out address as delete does nothing with structure elements\n', '    Timestamp storage ts = g_timestamps[msg.sender][_rewardAddress];\n', '    ts._address = address(0x0);\n', '    ts._deposit = 0;\n', '    ts._reward = 0;\n', '    /// Return success\n', '    emit TimestampDeleted( true );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Get address confirmation for loyalty address\n', '   * @param _rewardAddress being queried for address information\n', '   */\n', '  function getAddress(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(address)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}d');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp b');\n", '    /// Return address indicating success\n', '    return address(g_timestamps[msg.sender][_rewardAddress]._address);\n', '  }\n', '\n', '  /**\n', '   * @dev Get timestamp of initial joined timestamp for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getJoinedTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}e');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp c');\n", '    /// Return deposit timestamp indicating success\n', '    return g_timestamps[msg.sender][_rewardAddress]._joined;\n', '  }\n', '\n', '  /**\n', '   * @dev Get timestamp of last deposit for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getDepositTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}e');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp d');\n", '    /// Return deposit timestamp indicating success\n', '    return g_timestamps[msg.sender][_rewardAddress]._deposit;\n', '  }\n', '\n', '  /**\n', '   * @dev Get timestamp of reward maturity for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getRewardTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}f');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Return reward timestamp indicating success\n', '    return g_timestamps[msg.sender][_rewardAddress]._reward;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Determine if address specified has a timestamp record\n', '   * @param _rewardAddress being queried for timestamp existance\n', '   */\n', '  function hasTimestamp(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}g');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Determine if timestamp record matches reward address\n', '    // if(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress)) {\n', '    //   /// yes, then return success\n', '    //   return true;\n', '    // }\n', '    if(g_timestamps[msg.sender][_rewardAddress]._address != address(_rewardAddress))\n', '    {\n', '      emit TimestampHasTimestamp(false);\n', '      return false;\n', '    }\n', '\n', '    /// Return success\n', '    emit TimestampHasTimestamp(true);\n', '    return true;\n', '  }\n', '\n', '  /**\n', "   * @dev Calculate time remaining in seconds until this address' reward matures\n", '   * @param _rewardAddress to query remaining time before reward matures\n', '   */\n', '  function getTimeRemaining(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(uint256, bool, uint256)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}h');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp f');\n", '    /// Deterimine if reward address timestamp record has matured\n', '    if(g_timestamps[msg.sender][_rewardAddress]._reward > block.timestamp) {\n', '      /// No, then return indicating remaining time and false to indicate failure\n', '      // return (g_timestamps[msg.sender][_rewardAddress]._reward - block.timestamp, false, g_timestamps[msg.sender][_rewardAddress]._deposit);\n', '      return (g_timestamps[msg.sender][_rewardAddress]._reward - block.timestamp, false, g_timestamps[msg.sender][_rewardAddress]._joined);\n', '    }\n', '\n', '    /// Return indicating time since reward maturing and true to indicate success\n', '    // return (block.timestamp - g_timestamps[msg.sender][_rewardAddress]._reward, true, g_timestamps[msg.sender][_rewardAddress]._deposit);\n', '    return (block.timestamp - g_timestamps[msg.sender][_rewardAddress]._reward, true, g_timestamps[msg.sender][_rewardAddress]._joined);\n', '  }\n', '\n', '    /**\n', '   * @dev Determine if reward is mature for  address\n', '   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\n', '   */\n', '  function isRewardReady(address _rewardAddress)\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(bool)\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}i');\n", '    /// Validate caller is valid controller contract\n', "    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\n", '    /// Validate specified address (_rewardAddress)\n', "    require(_rewardAddress != address(0), 'Invalid reward address');\n", '    /// Validate specified address has a timestamp\n', "    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp g');\n", '    /// Deterimine if reward address timestamp record has matured\n', '    if(g_timestamps[msg.sender][_rewardAddress]._reward > block.timestamp) {\n', '      /// No, then return false to indicate failure\n', '      return false;\n', '    }\n', '\n', '    /// Return success\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the stored loyalty controller contract address\n', '   * @param _newAddress of new loyalty controller contract address\n', '   */\n', '  function setContractAddress(address _newAddress)\n', '  external\n', '  onlyOwner\n', '  nonReentrant\n', '  override\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}j');\n", '    /// Validate specified address (_newAddress)\n', "    require(_newAddress != address(0), 'Invalid contract address');\n", '    address currentAddress = contractAddress;\n', '    /// Set current address to new controller contract address\n', '    contractAddress = _newAddress;\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit ContractAddressChanged(currentAddress, _newAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Return the stored authorized controller address\n', '   * @return Address of loyalty controller contract\n', '   */\n', '  function getContractAddress()\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(address)\n', '  {\n', '    /// Return current controller contract address\n', '    return address(contractAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Change the stored loyalty time period\n', '   * @param _newTimePeriod of new reward period (in seconds)\n', '   */\n', '  function setTimePeriod(uint256 _newTimePeriod)\n', '  external\n', '  onlyOwner\n', '  nonReentrant\n', '  override\n', '  {\n', '    /// Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}k');\n", '    /// Validate specified time period\n', "    require(_newTimePeriod >= 60 seconds, 'Time period < 60s');\n", '    uint256 currentTimePeriod = timePeriod;\n', '    timePeriod = _newTimePeriod;\n', '    /// Emit event log to the block chain for future web3 use\n', '    emit TimePeriodChanged(currentTimePeriod, _newTimePeriod);\n', '  }\n', '\n', '  /**\n', '   * @dev Return the current loyalty timer period\n', '   * @return Current stored value of loyalty time period\n', '   */\n', '  function getTimePeriod()\n', '  external\n', '  whenNotPaused\n', '  override\n', '  returns(uint256)\n', '  {\n', '    /// Return current time period\n', '    return timePeriod;\n', '  }\n', '\n', '\t/**\n', '\t * @dev Event signal: Reset timestamp\n', '\t */\n', '  event ResetTimestamp(address _rewardAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty contract address waws changed\n', '\t */\n', '\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward time period was changed\n', '\t */\n', '\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was added\n', '\t */\n', '\tevent TimestampAdded( address indexed _newTimestampAddress );\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was removed\n', '\t */\n', '\tevent TimestampDeleted( bool indexed _timestampDeleted );\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp for address was reset\n', '   */\n', '  event TimestampReset(address _rewardAddress);\n', '\n', '  /**\n', '   * @dev Event signal: Current hasTimestamp value\n', '   */\n', '  event TimestampHasTimestamp(bool _hasTimestamp);\n', '\n', '}']