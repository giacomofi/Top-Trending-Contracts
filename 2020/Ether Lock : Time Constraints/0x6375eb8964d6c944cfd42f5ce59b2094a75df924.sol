['// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: browser/SPO/LPTokenWrapper.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title  lpTokenWrapper\n', ' * @author Synthetix (forked from /Synthetixio/synthetix/contracts/StakingRewards.sol)\n', ' *         Audit: https://github.com/sigp/public-audits/blob/master/synthetix/unipool/review.pdf\n', ' *         Changes by: SPO.\n', ' * @notice LP Token wrapper to facilitate tracking of staked balances\n', ' * @dev    Changes:\n', ' *          - Added UserData and _historyTotalSupply to track history balances\n', " *          - Changing 'stake' and 'withdraw' to internal funcs\n", ' */\n', 'contract LPTokenWrapper is ReentrancyGuard {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public lpToken;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping (uint256 => uint256) private _historyTotalSupply;\n', '    mapping(address => uint256) private _balances;\n', '    //Hold in seconds before withdrawal after last time staked\n', '    uint256 public holdTime;\n', '    \n', '    struct UserData {\n', '        //Period when balance becomes nonzero or last period rewards claimed\n', '        uint256 period;\n', '        //Last time deposited. used to implement holdDays\n', '        uint256 lastTime;\n', '        mapping (uint256 => uint) historyBalance;\n', '    }\n', '\n', '    mapping (address => UserData) private userData;\n', '\n', '    /**\n', '     * @dev TokenWrapper constructor\n', '     * @param _lpToken Wrapped token to be staked\n', '     * @param _holdDays Hold days after last deposit\n', '     */\n', '    constructor(address _lpToken, uint256 _holdDays) internal {\n', '        lpToken = IERC20(_lpToken);\n', '        holdTime = _holdDays.mul(1 days);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total amount of the staked token\n', '     * @return uint256 total supply\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total amount of the staked token\n', '     * @param _period Period for which total supply returned\n', '     * @return uint256 total supply\n', '     */\n', '    function historyTotalSupply(uint256 _period)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _historyTotalSupply[_period];\n', '    }\n', '\n', '    /**\n', '     * @dev Get the balance of a given account\n', '     * @param _address User for which to retrieve balance\n', '     */\n', '    function balanceOf(address _address)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _balances[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev Deposits a given amount of lpToken from sender\n', '     * @param _amount Units of lpToken\n', '     */\n', '    function _stake(uint256 _amount, uint256 _period)\n', '        internal\n', '        nonReentrant\n', '    {\n', '\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        _updateHistoryTotalSupply(_period);\n', '        UserData storage user = userData[msg.sender]; \n', '        if(_balances[msg.sender] == 0) user.period = _period;\n', '        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n', '        user.historyBalance[_period] = _balances[msg.sender];\n', '        user.lastTime = block.timestamp;\n', '        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given stake from sender\n', '     * @param _amount Units of lpToken\n', '     */\n', '    function _withdraw(uint256 _amount, uint256 _period)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        //Check first if user has sufficient balance, added due to hold requrement \n', '        //("Cannot withdraw, tokens on hold" will be fired even if user  has no balance)\n', '        require(_balances[msg.sender] >= _amount, "Not enough balance");\n', '        UserData storage user = userData[msg.sender]; \n', '        require(block.timestamp.sub(user.lastTime) >= holdTime, "Cannot withdraw, tokens on hold");\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        _updateHistoryTotalSupply(_period);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n', '        user.historyBalance[_period] = _balances[msg.sender];\n', '        lpToken.safeTransfer(msg.sender, _amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Updates history total supply\n', '     * @param _period Current period\n', '     */\n', '     function _updateHistoryTotalSupply(uint256 _period)\n', '        internal\n', '    {\n', '        _historyTotalSupply[_period] = _totalSupply;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns User Data\n', '     * @param _address address of the User\n', '     */\n', '     function getUserData(address _address)\n', '        internal\n', '        view\n', '        returns (UserData storage)\n', '    {\n', '        return userData[_address];\n', '    }\n', '\n', '    /**\n', "     * @dev Sets user's period and balance for that period\n", '     * @param _address address of the User\n', '     */\n', '     function _updateUser(address _address, uint256 _period)\n', '        internal\n', '    {\n', '        userData[_address].period = _period;\n', '        userData[_address].historyBalance[_period] = _balances[_address];\n', '    }   \n', '\n', '}\n', '\n', '// File: browser/SPO/StakingPool.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract StakingPool is Ownable, ReentrancyGuard, LPTokenWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    \n', '    //interface for Rewards Token\n', '    IERC20 public rewardsToken;\n', '    //Conctact status states\n', '    enum Status {Setup, Running, Ended}\n', '    \n', '    //Constants\n', '    uint256 constant public CALC_PRECISION = 1e18;\n', '\n', "    // Address where fees will be sent if fee isn't 0\n", '    address public feeBeneficiary;\n', '    // Fee in PPM (Parts Per Million), can be 0\n', '    uint256 public fee;\n', '    //Status of contract\n', '    Status public status;\n', '    //Rewards for period\n', '    uint256 public rewardsPerPeriodCap;\n', '    //Total rewards for all periods\n', '    uint256 public rewardsTotalCap;\n', '    //Staking Period in seconds\n', '    uint256 public periodTime;\n', '    //Total Periods\n', '    uint256 public totalPeriods;\n', '    //Grace Periods Time (time window after contract is Ended when users have to claim their Reward Tokens)\n', '    //after this period ends, no reward withdrawal is possible and contact owner can withdraw unclamed Reward Tokens\n', '    uint256 public gracePeriodTime;\n', '    //Time when contracts starts\n', '    uint256 public startTime;\n', '    //Time when contract ends \n', '    uint256 public endTime;\n', '    //Time when contract closes (endTime + gracePeriodTime)\n', '    uint256 public closeTime;\n', '    \n', '    \n', '    //Last Period\n', '    uint256 public period;\n', '    \n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event WithdrawnERC20(address indexed user, address token, uint256 amount);\n', '    \n', '\n', '    /** @dev Updates Period before executing function */\n', '    modifier updatePeriod() {\n', '        _updatePeriod();\n', '        _;\n', '    }\n', '    \n', '    /** @dev Make sure setup is finished */\n', '    modifier onlyAfterSetup() {\n', '        require(status != Status.Setup, "Setup is not finished");\n', '        _;\n', '    }\n', '\n', '    /** @dev Make sure setup is finished */\n', '    modifier onlyAfterStart() {\n', '        require(startTime != 0, "Staking is not started");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     * @param _lpToken Contract address of LP Token\n', '     * @param _rewardsToken Contract address of Rewards Token\n', '     * @param _rewardsPerPeriodCap Amount of tokens to be distributed each period (1e18)\n', '     * @param _periodDays Period time in days\n', '     * @param _totalPeriods Total periods contract will be running\n', '     * @param _gracePeriodDays Grace period in days \n', '     * @param _holdDays Time in days LP Tokens will be on hold for user after each stake\n', '     * @param _feeBeneficiary Address where fees will be sent\n', '     * @param _fee Fee in ppm\n', '     */\n', '    constructor(\n', '        address _lpToken,\n', '        address _rewardsToken,\n', '        uint256 _rewardsPerPeriodCap,\n', '        uint256 _periodDays, \n', '        uint256 _totalPeriods,\n', '        uint256 _gracePeriodDays,\n', '        uint256 _holdDays,\n', '        address _feeBeneficiary,\n', '        uint256 _fee\n', '    )\n', '        public\n', '        LPTokenWrapper(_lpToken, _holdDays)\n', '    {\n', '        require(_lpToken.isContract(), "LP Token address must be a contract");\n', '        require(_rewardsToken.isContract(), "Rewards Token address must be a contract");\n', '        rewardsToken = IERC20(_rewardsToken);\n', '        rewardsPerPeriodCap = _rewardsPerPeriodCap;\n', '        rewardsTotalCap = _rewardsPerPeriodCap.mul(_totalPeriods);\n', '        periodTime = _periodDays.mul(1 days);\n', '        totalPeriods = _totalPeriods;\n', '        gracePeriodTime = _gracePeriodDays.mul(1 days);\n', '        feeBeneficiary = _feeBeneficiary;\n', '        fee = _fee;\n', '    }\n', '\n', '    /***************************************\n', '                    ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Updates contract setup and mark contract status as Running if all requirements are met\n', '     * @param _now Start contract immediatly if true\n', '     */    \n', '    function adminStart(bool _now) \n', '        external \n', '        onlyOwner\n', '    {\n', '        require(status == Status.Setup, "Already started");\n', '        require(rewardsToken.balanceOf(address(this)) >= rewardsTotalCap, "Not enough reward tokens to start");\n', '        status = Status.Running;\n', '        if(_now) _startNow();\n', '    }\n', '    \n', '    /**\n', '     * @dev Option to start contract even there is no deposits yet\n', '     */\n', '    function adminStartNow()\n', '        external\n', '        onlyOwner\n', '        onlyAfterSetup\n', '    {\n', '        require(startTime == 0 && status == Status.Running, "Already started");\n', '        _startNow();\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev Option to end contract \n', '     */\n', '    function adminEnd()\n', '        external\n', '        onlyOwner\n', '        onlyAfterSetup\n', '    {\n', '        require(block.timestamp >= endTime && endTime != 0, "Cannot End");\n', '        _updatePeriod();\n', '    }\n', '    \n', '    /**\n', '     * @dev Close contract after End and Grace period and withdraw unclamed rewards tokens\n', '     * @param _address where to send\n', '     */\n', '     function adminClose(address _address)\n', '        external\n', '        onlyOwner\n', '        onlyAfterSetup\n', '    {\n', '        require(block.timestamp >= closeTime && closeTime != 0, "Cannot Close");\n', '        uint256 _rewardsBalance = rewardsToken.balanceOf(address(this));\n', '        if(_rewardsBalance > 0) rewardsToken.safeTransfer(_address, _rewardsBalance);\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw other than LP or Rewards tokens \n', '     * @param _tokenAddress address of the token contract to withdraw\n', '     */\n', '     function adminWithdrawERC20(address _tokenAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_tokenAddress != address(rewardsToken) && _tokenAddress != address(lpToken), "Cannot withdraw Reward or LP Tokens");\n', '        IERC20 _token = IERC20(_tokenAddress);\n', '        uint256 _balance = _token.balanceOf(address(this));\n', '        require(_balance != 0, "Not enough balance");\n', '        uint256 _fee = _balance.mul(fee).div(1e6);\n', '        if(_fee != 0){\n', '            _token.safeTransfer(feeBeneficiary, _fee);\n', '            emit WithdrawnERC20(feeBeneficiary, _tokenAddress, _fee);\n', '        }\n', '        _token.safeTransfer(msg.sender, _balance.sub(_fee));\n', '        emit WithdrawnERC20(msg.sender, _tokenAddress, _balance.sub(_fee));\n', '    }\n', '    \n', '    /***************************************\n', '                    PRIVATE\n', '    ****************************************/\n', '    \n', '    /**\n', '     * @dev Starts the contract\n', '     */\n', '    function _startNow()\n', '        private\n', '    {\n', '        startTime = block.timestamp;\n', '        endTime = startTime.add(periodTime.mul(totalPeriods));  \n', '        closeTime = endTime.add(gracePeriodTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates last period to current and set status to Ended if needed\n', '     */\n', '    function _updatePeriod()\n', '        private\n', '    {\n', '        uint256 _currentPeriod = currentPeriod();\n', '        if(_currentPeriod != period){\n', '            period = _currentPeriod;\n', '            _updateHistoryTotalSupply(period);\n', '            if(_currentPeriod == totalPeriods){\n', '                status = Status.Ended;\n', '                //release hold of LP tokens\n', '                holdTime = 0;\n', '            }\n', '        }\n', '    }\n', '    \n', ' \n', '    /***************************************\n', '                    ACTIONS\n', '    ****************************************/\n', '    \n', '    /**\n', '     * @dev Stakes an amount for the sender, assumes sender approved allowace at LP Token contract _amount for this contract address\n', '     * @param _amount of LP Tokens\n', '     */\n', '    function stake(uint256 _amount)\n', '        external\n', '        onlyAfterSetup\n', '        updatePeriod\n', '    {\n', '        require(_amount > 0, "Cannot stake 0");\n', '        require(status != Status.Ended, "Contract is Ended");\n', '        if(startTime == 0) _startNow();\n', '        _stake(_amount, period);\n', '        emit Staked(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws given LP Token stake amount from the pool\n', '     * @param _amount LP Tokens to withdraw\n', '     */\n', '    function withdraw(uint256 _amount)\n', '        public\n', '        onlyAfterStart\n', '        updatePeriod\n', '    {\n', '        require(_amount > 0, "Cannot withdraw 0");\n', '        _withdraw(_amount, period);\n', '        emit Withdrawn(msg.sender, _amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Claims outstanding rewards for the sender.\n', '     * First updates outstanding reward allocation and then transfers.\n', '     */\n', '    function claimReward()\n', '        public\n', '        nonReentrant\n', '        onlyAfterStart\n', '        updatePeriod\n', '    {\n', '        require(block.timestamp <= closeTime, "Contract is Closed");\n', '        uint256 reward = calculateReward(msg.sender);\n', '        if (reward > 0) {\n', '            _updateUser(msg.sender, period);\n', '            rewardsToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }    \n', '    \n', '    /**\n', '     * @dev Withdraws LP Tokens stake from pool and claims any rewards\n', '     */\n', '    function exit() \n', '        external\n', '    {\n', '        uint256 _amount = balanceOf(msg.sender);\n', '        if(_amount !=0) withdraw(_amount);\n', '        claimReward();\n', '    }\n', '    \n', '    /***************************************\n', '                    GETTERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates current period, if contract is ended returns currentPeriod + 1 (totalPeriods)\n', '     */\n', '    function currentPeriod() \n', '        public \n', '        view \n', '        returns (uint256)\n', '    {\n', '        uint256 _currentPeriod;\n', '        if(startTime != 0 && endTime != 0)\n', '        {\n', '            if(block.timestamp >= endTime){\n', '                _currentPeriod = totalPeriods;\n', '            }else{\n', '                _currentPeriod = block.timestamp.sub(startTime).div(periodTime);\n', '            }\n', '        }\n', '        return _currentPeriod;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates pending rewards for the user since last period claimed rewards to current period\n', '     * @param _address address of the user\n', '     */\n', '     function calculateReward(address _address) \n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        UserData storage user = getUserData(_address);\n', '        if(block.timestamp >= closeTime) return 0;\n', '        uint256 _period = currentPeriod();\n', '        uint256 periodTotalSupply;\n', '        uint256 savedTotalSupply;\n', '        uint256 periodBalance;\n', '        uint256 savedBalance;\n', '        uint256 rewardTotal;\n', '        if(_period > user.period){\n', '            savedTotalSupply =  historyTotalSupply(user.period);\n', '            savedBalance = user.historyBalance[user.period];\n', '            if(savedTotalSupply != 0){\n', '                rewardTotal = rewardTotal.add(\n', '                    rewardsPerPeriodCap.mul(\n', '                        savedBalance\n', '                    ).mul(\n', '                        CALC_PRECISION\n', '                    ).div(\n', '                        savedTotalSupply\n', '                    ).div(\n', '                        CALC_PRECISION\n', '                    )\n', '                );\n', '            }\n', '            for(uint256 i = user.period+1; i < _period; i++){\n', '                periodTotalSupply = historyTotalSupply(i);\n', '                periodBalance = user.historyBalance[i];\n', '                periodBalance == 0 ? periodBalance = savedBalance : savedBalance = periodBalance;\n', '                periodTotalSupply == 0 ? periodTotalSupply = savedTotalSupply : savedTotalSupply = periodTotalSupply;\n', '                if(periodTotalSupply != 0){\n', '                    rewardTotal = rewardTotal.add(\n', '                        rewardsPerPeriodCap.mul(\n', '                            periodBalance\n', '                        ).mul(\n', '                            CALC_PRECISION\n', '                        ).div(\n', '                            periodTotalSupply\n', '                        ).div(\n', '                            CALC_PRECISION\n', '                        )\n', '                    );\n', '                }\n', '            }\n', '        }\n', '        return rewardTotal;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns estimated current period reward for the user based on current total supply and his balance\n', '     * @param _address address of the user\n', '     */\n', '     function estimateReward(address _address) \n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 _totalSupply = totalSupply();\n', '        if(_totalSupply == 0 || block.timestamp >= closeTime) return 0;\n', '        return rewardsPerPeriodCap.mul(\n', '            balanceOf(_address)\n', '        ).mul(\n', '            CALC_PRECISION\n', '        ).div(\n', '            _totalSupply\n', '        ).div(\n', '            CALC_PRECISION\n', '        );\n', '    }\n', '\n', '}']