['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/spec_interfaces/ICommittee.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Committee contract interface\n', 'interface ICommittee {\n', '\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\n', '\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\n', '\n', '\t// No external functions\n', '\n', '\t/*\n', '     * External functions\n', '     */\n', '\n', '    /// Notifies a weight change of a member\n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the committee member address\n', '    /// @param weight is the updated weight of the committee member\n', '\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\n', '\n', '    /// Notifies a change in the certification of a member\n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the committee member address\n', '    /// @param isCertified is the updated certification state of the member\n', '\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\n', '\n', '    /// Notifies a member removal for example due to voteOut or voteUnready\n', '    /// @dev Called only by: Elections contract\n', '    /// @param memberRemoved is the removed committee member address\n', '    /// @return memberRemoved indicates whether the member was removed from the committee\n', '    /// @return removedMemberWeight indicates the removed member weight\n', '    /// @return removedMemberCertified indicates whether the member was in the certified committee\n', '\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified)/* onlyElectionContract */;\n', '\n', '    /// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\n', '    /// The new member will be added only if it is qualified to join the committee \n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the added committee member address\n', '    /// @param weight is the added member weight\n', '    /// @param isCertified is the added member certification state\n', '    /// @return memberAdded bool indicates whether the member was added\n', '\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\n', '\n', '    /// Checks if addMember() would add a the member to the committee (qualified to join)\n', '    /// @param addr is the candidate committee member address\n', '    /// @param weight is the candidate committee member weight\n', '    /// @return wouldAddMember bool indicates whether the member will be added\n', '\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\n', '\n', '    /// Returns the committee members and their weights\n', '    /// @return addrs is the committee members list\n', '    /// @return weights is an array of uint, indicating committee members list weight\n', '    /// @return certification is an array of bool, indicating the committee members certification status\n', '\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\n', '\n', '    /// Returns the currently appointed committee data\n', '    /// @return generalCommitteeSize is the number of members in the committee\n', '    /// @return certifiedCommitteeSize is the number of certified members in the committee\n', '    /// @return totalWeight is the total effective stake (weight) of the committee\n', '\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight);\n', '\n', '    /// Returns a committee member data\n', '    /// @param addr is the committee member address\n', '    /// @return inCommittee indicates whether the queried address is a member in the committee\n', '    /// @return weight is the committee member weight\n', '    /// @return isCertified indicates whether the committee member is certified\n', '    /// @return totalCommitteeWeight is the total weight of the committee.\n', '\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\n', '\n', '    /// Emits a CommitteeSnapshot events with current committee info\n', '    /// @dev a CommitteeSnapshot is useful on contract migration or to remove the need to track past events.\n', '\tfunction emitCommitteeSnapshot() external;\n', '\n', '\t/*\n', '\t * Governance functions\n', '\t */\n', '\n', '\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\n', '\n', '    /// Sets the maximum number of committee members\n', '    /// @dev governance function called only by the functional manager\n', '    /// @dev when reducing the number of members, the bottom ones are removed from the committee\n', '    /// @param _maxCommitteeSize is the maximum number of committee members \n', '\tfunction setMaxCommitteeSize(uint8 _maxCommitteeSize) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the maximum number of committee members\n', '    /// @return maxCommitteeSize is the maximum number of committee members \n', '\tfunction getMaxCommitteeSize() external view returns (uint8);\n', '\t\n', '    /// Imports the committee members from a previous committee contract during migration\n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev does not update the reward contract to avoid incorrect notifications \n', '    /// @param previousCommitteeContract is the address of the previous committee contract\n', '\tfunction importMembers(ICommittee previousCommitteeContract) external /* onlyInitializationAdmin */;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IManagedContract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title managed contract interface, used by the contracts registry to notify the contract on updates\n', 'interface IManagedContract /* is ILockable, IContractRegistryAccessor, Initializable */ {\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '    function refreshContracts() external;\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IContractRegistry.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Contract registry contract interface\n', '/// @dev The contract registry holds Orbs PoS contracts and managers lists\n', '/// @dev The contract registry updates the managed contracts on changes in the contract list\n', '/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \n', '/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \n', '/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \n', 'interface IContractRegistry {\n', '\n', '\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\n', '\tevent ManagerChanged(string role, address newManager);\n', '\tevent ContractRegistryUpdated(address newContractRegistry);\n', '\n', '\t/*\n', '\t* External functions\n', '\t*/\n', '\n', '    /// Updates the contracts address and emits a corresponding event\n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '    /// @param contractName is the contract name, used to identify it\n', '    /// @param addr is the contract updated address\n', '    /// @param managedContract indicates whether the contract is managed by the registry and notified on changes\n', '\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\n', '\n', '    /// Returns the current address of the given contracts\n', '    /// @param contractName is the contract name, used to identify it\n', '    /// @return addr is the contract updated address\n', '\tfunction getContract(string calldata contractName) external view returns (address);\n', '\n', '    /// Returns the list of contract addresses managed by the registry\n', '    /// @dev Managed contracts are updated on changes in the registry contracts addresses \n', '    /// @return addrs is the list of managed contracts\n', '\tfunction getManagedContracts() external view returns (address[] memory);\n', '\n', '    /// Locks all the managed contracts \n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '    /// @dev When set all onlyWhenActive functions will revert\n', '\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\n', '\n', '    /// Unlocks all the managed contracts \n', '    /// @dev governance function called only by the migrationManager or registryAdmin\n', '\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\n', '\t\n', '    /// Updates a manager address and emits a corresponding event\n', '    /// @dev governance function called only by the registryAdmin\n', "    /// @dev the managers list is a flexible list of role to the manager's address\n", '    /// @param role is the managers\' role name, for example "functionalManager"\n', '    /// @param manager is the manager updated address\n', '\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\n', '\n', '    /// Returns the current address of the given manager\n', '    /// @param role is the manager name, used to identify it\n', '    /// @return addr is the manager updated address\n', '\tfunction getManager(string calldata role) external view returns (address);\n', '\n', '    /// Sets a new contract registry to migrate to\n', '    /// @dev governance function called only by the registryAdmin\n', '    /// @dev updates the registry address record in all the managed contracts\n', '    /// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\n', '    /// @param newRegistry is the new registry contract \n', '\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n', '\n', '    /// Returns the previous contract registry address \n', '    /// @dev used when the setting the contract as a new registry to assure a valid registry\n', '    /// @return previousContractRegistry is the previous contract registry\n', '\tfunction getPreviousContractRegistry() external view returns (address);\n', '}\n', '\n', '// File: contracts/spec_interfaces/IContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IContractRegistryAccessor {\n', '\n', '    /// Sets the contract registry address\n', '    /// @dev governance function called only by an admin\n', '    /// @param newRegistry is the new registry contract \n', '    function setContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n', '\n', '    /// Returns the contract registry address\n', '    /// @return contractRegistry is the contract registry address\n', '    function getContractRegistry() external view returns (IContractRegistry contractRegistry);\n', '\n', '    function setRegistryAdmin(address _registryAdmin) external /* onlyInitializationAdmin */;\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/WithClaimableRegistryManagement.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract WithClaimableRegistryManagement is Context {\n', '    address private _registryAdmin;\n', '    address private _pendingRegistryAdmin;\n', '\n', '    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _registryAdmin = msgSender;\n', '        emit RegistryManagementTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current registryAdmin.\n', '     */\n', '    function registryAdmin() public view returns (address) {\n', '        return _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the registryAdmin.\n', '     */\n', '    modifier onlyRegistryAdmin() {\n', '        require(isRegistryAdmin(), "WithClaimableRegistryManagement: caller is not the registryAdmin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current registryAdmin.\n', '     */\n', '    function isRegistryAdmin() public view returns (bool) {\n', '        return _msgSender() == _registryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without registryAdmin. It will not be possible to call\n', '     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\n', '     *\n', '     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\n', '     * thereby removing any functionality that is only available to the registryAdmin.\n', '     */\n', '    function renounceRegistryManagement() public onlyRegistryAdmin {\n', '        emit RegistryManagementTransferred(_registryAdmin, address(0));\n', '        _registryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\n', '     */\n', '    function _transferRegistryManagement(address newRegistryAdmin) internal {\n', '        require(newRegistryAdmin != address(0), "RegistryAdmin: new registryAdmin is the zero address");\n', '        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\n', '        _registryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingManager.\n', '     */\n', '    modifier onlyPendingRegistryAdmin() {\n', '        require(msg.sender == _pendingRegistryAdmin, "Caller is not the pending registryAdmin");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current registryAdmin to set the pendingManager address.\n', '     * @param newRegistryAdmin The address to transfer registryManagement to.\n', '     */\n', '    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\n', '        _pendingRegistryAdmin = newRegistryAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\n', '     */\n', '    function claimRegistryManagement() external onlyPendingRegistryAdmin {\n', '        _transferRegistryManagement(_pendingRegistryAdmin);\n', '        _pendingRegistryAdmin = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current pendingRegistryAdmin\n', '    */\n', '    function pendingRegistryAdmin() public view returns (address) {\n', '       return _pendingRegistryAdmin;  \n', '    }\n', '}\n', '\n', '// File: contracts/Initializable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Initializable {\n', '\n', '    address private _initializationAdmin;\n', '\n', '    event InitializationComplete();\n', '\n', '    /// Constructor\n', '    /// Sets the initializationAdmin to the contract deployer\n', '    /// The initialization admin may call any manager only function until initializationComplete\n', '    constructor() public{\n', '        _initializationAdmin = msg.sender;\n', '    }\n', '\n', '    modifier onlyInitializationAdmin() {\n', '        require(msg.sender == initializationAdmin(), "sender is not the initialization admin");\n', '\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Returns the initializationAdmin address\n', '    function initializationAdmin() public view returns (address) {\n', '        return _initializationAdmin;\n', '    }\n', '\n', '    /// Finalizes the initialization and revokes the initializationAdmin role \n', '    function initializationComplete() external onlyInitializationAdmin {\n', '        _initializationAdmin = address(0);\n', '        emit InitializationComplete();\n', '    }\n', '\n', '    /// Checks if the initialization was completed\n', '    function isInitializationComplete() public view returns (bool) {\n', '        return _initializationAdmin == address(0);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ContractRegistryAccessor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract ContractRegistryAccessor is IContractRegistryAccessor, WithClaimableRegistryManagement, Initializable {\n', '\n', '    IContractRegistry private contractRegistry;\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\n', '        require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");\n', '        setContractRegistry(_contractRegistry);\n', '        _transferRegistryManagement(_registryAdmin);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(isAdmin(), "sender is not an admin (registryManger or initializationAdmin)");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyMigrationManager {\n', '        require(isMigrationManager(), "sender is not the migration manager");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyFunctionalManager {\n', '        require(isFunctionalManager(), "sender is not the functional manager");\n', '\n', '        _;\n', '    }\n', '\n', '    /// Checks whether the caller is Admin: either the contract registry, the registry admin, or the initialization admin\n', '    function isAdmin() internal view returns (bool) {\n', '        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\n', '    }\n', '\n', '    /// Checks whether the caller is a specific manager role or and Admin\n', '    /// @dev queries the registry contract for the up to date manager assignment\n', '    function isManager(string memory role) internal view returns (bool) {\n', '        IContractRegistry _contractRegistry = contractRegistry;\n', '        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\n', '    }\n', '\n', '    /// Checks whether the caller is the migration manager\n', '    function isMigrationManager() internal view returns (bool) {\n', "        return isManager('migrationManager');\n", '    }\n', '\n', '    /// Checks whether the caller is the functional manager\n', '    function isFunctionalManager() internal view returns (bool) {\n', "        return isManager('functionalManager');\n", '    }\n', '\n', '    /* \n', '     * Contract getters, return the address of a contract by calling the contract registry \n', '     */ \n', '\n', '    function getProtocolContract() internal view returns (address) {\n', '        return contractRegistry.getContract("protocol");\n', '    }\n', '\n', '    function getStakingRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewards");\n', '    }\n', '\n', '    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("feesAndBootstrapRewards");\n', '    }\n', '\n', '    function getCommitteeContract() internal view returns (address) {\n', '        return contractRegistry.getContract("committee");\n', '    }\n', '\n', '    function getElectionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("elections");\n', '    }\n', '\n', '    function getDelegationsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("delegations");\n', '    }\n', '\n', '    function getGuardiansRegistrationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("guardiansRegistration");\n', '    }\n', '\n', '    function getCertificationContract() internal view returns (address) {\n', '        return contractRegistry.getContract("certification");\n', '    }\n', '\n', '    function getStakingContract() internal view returns (address) {\n', '        return contractRegistry.getContract("staking");\n', '    }\n', '\n', '    function getSubscriptionsContract() internal view returns (address) {\n', '        return contractRegistry.getContract("subscriptions");\n', '    }\n', '\n', '    function getStakingRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingRewardsWallet");\n', '    }\n', '\n', '    function getBootstrapRewardsWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("bootstrapRewardsWallet");\n', '    }\n', '\n', '    function getGeneralFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("generalFeesWallet");\n', '    }\n', '\n', '    function getCertifiedFeesWallet() internal view returns (address) {\n', '        return contractRegistry.getContract("certifiedFeesWallet");\n', '    }\n', '\n', '    function getStakingContractHandler() internal view returns (address) {\n', '        return contractRegistry.getContract("stakingContractHandler");\n', '    }\n', '\n', '    /*\n', '    * Governance functions\n', '    */\n', '\n', '    event ContractRegistryAddressUpdated(address addr);\n', '\n', '    /// Sets the contract registry address\n', '    /// @dev governance function called only by an admin\n', '    /// @param newContractRegistry is the new registry contract \n', '    function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {\n', '        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");\n', '        contractRegistry = newContractRegistry;\n', '        emit ContractRegistryAddressUpdated(address(newContractRegistry));\n', '    }\n', '\n', '    /// Returns the contract registry that the contract is set to use\n', '    /// @return contractRegistry is the registry contract address\n', '    function getContractRegistry() public override view returns (IContractRegistry) {\n', '        return contractRegistry;\n', '    }\n', '\n', '    function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {\n', '        _transferRegistryManagement(_registryAdmin);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/ILockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title lockable contract interface, allows to lock a contract\n', 'interface ILockable {\n', '\n', '    event Locked();\n', '    event Unlocked();\n', '\n', '    /// Locks the contract to external non-governance function calls\n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon locking all managed contracts\n', '    /// @dev getters and migration functions remain active also for locked contracts\n', '    /// @dev checked by the onlyWhenActive modifier\n', '    function lock() external /* onlyMigrationManager */;\n', '\n', '    /// Unlocks the contract \n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon unlocking all managed contracts\n', '    function unlock() external /* onlyMigrationManager */;\n', '\n', '    /// Returns the contract locking status\n', '    /// @return isLocked is a bool indicating the contract is locked \n', '    function isLocked() view external returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/Lockable.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/// @title lockable contract\n', 'contract Lockable is ILockable, ContractRegistryAccessor {\n', '\n', '    bool public locked;\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\n', '\n', '    /// Locks the contract to external non-governance function calls\n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon locking all managed contracts\n', '    /// @dev getters and migration functions remain active also for locked contracts\n', '    /// @dev checked by the onlyWhenActive modifier\n', '    function lock() external override onlyMigrationManager {\n', '        locked = true;\n', '        emit Locked();\n', '    }\n', '\n', '    /// Unlocks the contract \n', '    /// @dev governance function called only by the migration manager or an admin\n', '    /// @dev typically called by the registry contract upon unlocking all managed contracts\n', '    function unlock() external override onlyMigrationManager {\n', '        locked = false;\n', '        emit Unlocked();\n', '    }\n', '\n', '    /// Returns the contract locking status\n', '    /// @return isLocked is a bool indicating the contract is locked \n', '    function isLocked() external override view returns (bool) {\n', '        return locked;\n', '    }\n', '\n', '    modifier onlyWhenActive() {\n', '        require(!locked, "contract is locked for this operation");\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/ManagedContract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/// @title managed contract\n', 'contract ManagedContract is IManagedContract, Lockable {\n', '\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '    function refreshContracts() virtual override external {}\n', '\n', '}\n', '\n', '// File: contracts/spec_interfaces/IStakingRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Staking rewards contract interface\n', 'interface IStakingRewards {\n', '\n', '    event DelegatorStakingRewardsAssigned(address indexed delegator, uint256 amount, uint256 totalAwarded, address guardian, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta);\n', '    event GuardianStakingRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta, uint256 stakingRewardsPerWeight, uint256 stakingRewardsPerWeightDelta);\n', '    event StakingRewardsClaimed(address indexed addr, uint256 claimedDelegatorRewards, uint256 claimedGuardianRewards, uint256 totalClaimedDelegatorRewards, uint256 totalClaimedGuardianRewards);\n', '    event StakingRewardsAllocated(uint256 allocatedRewards, uint256 stakingRewardsPerWeight);\n', '    event GuardianDelegatorsStakingRewardsPercentMilleUpdated(address indexed guardian, uint256 delegatorsStakingRewardsPercentMille);\n', '\n', '    /*\n', '     * External functions\n', '     */\n', '\n', '    /// Returns the current reward balance of the given address.\n', '    /// @dev calculates the up to date balances (differ from the state)\n', '    /// @param addr is the address to query\n', '    /// @return delegatorStakingRewardsBalance the rewards awarded to the guardian role\n', '    /// @return guardianStakingRewardsBalance the rewards awarded to the guardian role\n', '    function getStakingRewardsBalance(address addr) external view returns (uint256 delegatorStakingRewardsBalance, uint256 guardianStakingRewardsBalance);\n', '\n', '    /// Claims the staking rewards balance of an addr, staking the rewards\n', '    /// @dev Claimed rewards are staked in the staking contract using the distributeRewards interface\n', '    /// @dev includes the rewards for both the delegator and guardian roles\n', '    /// @dev calculates the up to date rewards prior to distribute them to the staking contract\n', '    /// @param addr is the address to claim rewards for\n', '    function claimStakingRewards(address addr) external;\n', '\n', '    /// Returns the current global staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @return stakingRewardsPerWeight is the potential reward per 1E18 (TOKEN_BASE) committee weight assigned to a guardian was in the committee from day zero\n', '    /// @return unclaimedStakingRewards is the of tokens that were assigned to participants and not claimed yet\n', '    function getStakingRewardsState() external view returns (\n', '        uint96 stakingRewardsPerWeight,\n', '        uint96 unclaimedStakingRewards\n', '    );\n', '\n', '    /// Returns the current guardian staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @dev notice that the guardian rewards are the rewards for the guardian role as guardian and do not include delegation rewards\n', "    /// @dev use getDelegatorStakingRewardsData to get the guardian's rewards as delegator\n", '    /// @param guardian is the guardian to query\n', '    /// @return balance is the staking rewards balance for the guardian role\n', '    /// @return claimed is the staking rewards for the guardian role that were claimed\n', "    /// @return delegatorRewardsPerToken is the potential reward per token (1E18 units) assigned to a guardian's delegator that delegated from day zero\n", '    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last guardian update\n', '    /// @return lastStakingRewardsPerWeight is the up to date stakingRewardsPerWeight used for the guardian state calculation\n', '    /// @return stakingRewardsPerWeightDelta is the increment in stakingRewardsPerWeight since the last guardian update\n', '    function getGuardianStakingRewardsData(address guardian) external view returns (\n', '        uint256 balance,\n', '        uint256 claimed,\n', '        uint256 delegatorRewardsPerToken,\n', '        uint256 delegatorRewardsPerTokenDelta,\n', '        uint256 lastStakingRewardsPerWeight,\n', '        uint256 stakingRewardsPerWeightDelta\n', '    );\n', '\n', '    /// Returns the current delegator staking rewards state\n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @param delegator is the delegator to query\n', '    /// @return balance is the staking rewards balance for the delegator role\n', '    /// @return claimed is the staking rewards for the delegator role that were claimed\n', '    /// @return guardian is the guardian the delegator delegated to receiving a portion of the guardian staking rewards\n', '    /// @return lastDelegatorRewardsPerToken is the up to date delegatorRewardsPerToken used for the delegator state calculation\n', '    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last delegator update\n', '    function getDelegatorStakingRewardsData(address delegator) external view returns (\n', '        uint256 balance,\n', '        uint256 claimed,\n', '        address guardian,\n', '        uint256 lastDelegatorRewardsPerToken,\n', '        uint256 delegatorRewardsPerTokenDelta\n', '    );\n', '\n', '    /// Returns an estimation for the delegator and guardian staking rewards for a given duration\n', '    /// @dev the returned value is an estimation, assuming no change in the PoS state\n', '    /// @dev the period calculated for start from the current block time until the current time + duration.\n', '    /// @param addr is the address to estimate rewards for\n', '    /// @param duration is the duration to calculate for in seconds\n', '    /// @return estimatedDelegatorStakingRewards is the estimated reward for the delegator role\n', '    /// @return estimatedGuardianStakingRewards is the estimated reward for the guardian role\n', '    function estimateFutureRewards(address addr, uint256 duration) external view returns (\n', '        uint256 estimatedDelegatorStakingRewards,\n', '        uint256 estimatedGuardianStakingRewards\n', '    );\n', '\n', "    /// Sets the guardian's delegators staking reward portion\n", '    /// @dev by default uses the defaultDelegatorsStakingRewardsPercentMille\n', '    /// @param delegatorRewardsPercentMille is the delegators portion in percent-mille (0 - maxDelegatorsStakingRewardsPercentMille)\n', '    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external;\n', '\n', "    /// Returns a guardian's delegators staking reward portion\n", '    /// @dev If not explicitly set, returns the defaultDelegatorsStakingRewardsPercentMille\n', '    /// @return delegatorRewardsRatioPercentMille is the delegators portion in percent-mille\n', '    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external view returns (uint256 delegatorRewardsRatioPercentMille);\n', '\n', '    /// Returns the amount of ORBS tokens in the staking rewards wallet allocated to staking rewards\n', '    /// @dev The staking wallet balance must always larger than the allocated value\n', '    /// @return allocated is the amount of tokens allocated in the staking rewards wallet\n', '    function getStakingRewardsWalletAllocatedTokens() external view returns (uint256 allocated);\n', '\n', '    /// Returns the current annual staking reward rate\n', '    /// @dev calculated based on the current total committee weight\n', '    /// @return annualRate is the current staking reward rate in percent-mille\n', '    function getCurrentStakingRewardsRatePercentMille() external view returns (uint256 annualRate);\n', '\n', '    /// Notifies an expected change in the committee membership of the guardian\n', '    /// @dev Called only by: the Committee contract\n', '    /// @dev called upon expected change in the committee membership of the guardian\n', '    /// @dev triggers update of the global rewards state and the guardian rewards state\n', '    /// @dev updates the rewards state based on the committee state prior to the change\n', "    /// @param guardian is the guardian who's committee membership is updated\n", '    /// @param weight is the weight of the guardian prior to the change\n', '    /// @param totalCommitteeWeight is the total committee weight prior to the change\n', '    /// @param inCommittee indicates whether the guardian was in the committee prior to the change\n', '    /// @param inCommitteeAfter indicates whether the guardian is in the committee after the change\n', '    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external /* onlyCommitteeContract */;\n', '\n', '    /// Notifies an expected change in a delegator and his guardian delegation state\n', '    /// @dev Called only by: the Delegation contract\n', "    /// @dev called upon expected change in a delegator's delegation state\n", '    /// @dev triggers update of the global rewards state, the guardian rewards state and the delegator rewards state\n', "    /// @dev on delegation change, updates also the new guardian and the delegator's lastDelegatorRewardsPerToken accordingly\n", "    /// @param guardian is the delegator's guardian prior to the change\n", "    /// @param guardianDelegatedStake is the delegated stake of the delegator's guardian prior to the change\n", '    /// @param delegator is the delegator about to change delegation state\n', '    /// @param delegatorStake is the stake of the delegator\n', "    /// @param nextGuardian is the delegator's guardian after to the change\n", "    /// @param nextGuardianDelegatedStake is the delegated stake of the delegator's guardian after to the change\n", '    function delegationWillChange(address guardian, uint256 guardianDelegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external /* onlyDelegationsContract */;\n', '\n', '    /*\n', '     * Governance functions\n', '     */\n', '\n', '    event AnnualStakingRewardsRateChanged(uint256 annualRateInPercentMille, uint256 annualCap);\n', '    event DefaultDelegatorsStakingRewardsChanged(uint32 defaultDelegatorsStakingRewardsPercentMille);\n', '    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\n', '    event RewardDistributionActivated(uint256 startTime);\n', '    event RewardDistributionDeactivated();\n', '    event StakingRewardsBalanceMigrated(address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards, address toRewardsContract);\n', '    event StakingRewardsBalanceMigrationAccepted(address from, address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '\n', '    /// Activates staking rewards allocation\n', '    /// @dev governance function called only by the initialization admin\n', '    /// @dev On migrations, startTime should be set to the previous contract deactivation time\n', '    /// @param startTime sets the last assignment time\n', '    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n', '\n', '    /// Deactivates fees and bootstrap allocation\n', '    /// @dev governance function called only by the migration manager\n', '    /// @dev guardians updates remain active based on the current perMember value\n', '    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n', '    \n', '    /// Sets the default delegators staking reward portion\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille(0 - maxDelegatorsStakingRewardsPercentMille)\n', '    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the default delegators staking reward portion\n', '    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\n', '    function getDefaultDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n', '\n', '    /// Sets the maximum delegators staking reward portion\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille(0 - 100,000)\n', '    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the default delegators staking reward portion\n', '    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\n', '    function getMaxDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n', '\n', '    /// Sets the annual rate and cap for the staking reward\n', '    /// @dev governance function called only by the functional manager\n', '    /// @param annualRateInPercentMille is the annual rate in percent-mille\n', '    /// @param annualCap is the annual staking rewards cap\n', '    function setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the annual staking reward rate\n', '    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\n', '    function getAnnualStakingRewardsRatePercentMille() external view returns (uint32);\n', '\n', '    /// Returns the annual staking rewards cap\n', '    /// @return annualStakingRewardsCap is the annual rate in percent-mille\n', '    function getAnnualStakingRewardsCap() external view returns (uint256);\n', '\n', '    /// Checks if rewards allocation is active\n', '    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\n', '    function isRewardAllocationActive() external view returns (bool);\n', '\n', "    /// Returns the contract's settings\n", '    /// @return annualStakingRewardsCap is the annual rate in percent-mille\n', '    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\n', '    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\n', '    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\n', '    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\n', '    function getSettings() external view returns (\n', '        uint annualStakingRewardsCap,\n', '        uint32 annualStakingRewardsRatePercentMille,\n', '        uint32 defaultDelegatorsStakingRewardsPercentMille,\n', '        uint32 maxDelegatorsStakingRewardsPercentMille,\n', '        bool rewardAllocationActive\n', '    );\n', '\n', '    /// Migrates the staking rewards balance of the given addresses to a new staking rewards contract\n', '    /// @dev The new rewards contract is determined according to the contracts registry\n', '    /// @dev No impact of the calling contract if the currently configured contract in the registry\n', '    /// @dev may be called also while the contract is locked\n', '    /// @param addrs is the list of addresses to migrate\n', '    function migrateRewardsBalance(address[] calldata addrs) external;\n', '\n', '    /// Accepts addresses balance migration from a previous rewards contract\n', '    /// @dev the function may be called by any caller that approves the amounts provided for transfer\n', '    /// @param addrs is the list migrated addresses\n', '    /// @param migratedGuardianStakingRewards is the list of received guardian rewards balance for each address\n', '    /// @param migratedDelegatorStakingRewards is the list of received delegator rewards balance for each address\n', '    /// @param totalAmount is the total amount of staking rewards migrated for all addresses in the list. Must match the sum of migratedGuardianStakingRewards and migratedDelegatorStakingRewards lists.\n', '    function acceptRewardsBalanceMigration(address[] calldata addrs, uint256[] calldata migratedGuardianStakingRewards, uint256[] calldata migratedDelegatorStakingRewards, uint256 totalAmount) external;\n', '\n', '    /// Performs emergency withdrawal of the contract balance\n', '    /// @dev called with a token to withdraw, should be called twice with the fees and bootstrap tokens\n', '    /// @dev governance function called only by the migration manager\n', '    /// @param erc20 is the ERC20 token to withdraw\n', '    function emergencyWithdraw(address erc20) external /* onlyMigrationManager */;\n', '}\n', '\n', '// File: contracts/spec_interfaces/IFeesAndBootstrapRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title Rewards contract interface\n', 'interface IFeesAndBootstrapRewards {\n', '    event FeesAllocated(uint256 allocatedGeneralFees, uint256 generalFeesPerMember, uint256 allocatedCertifiedFees, uint256 certifiedFeesPerMember);\n', '    event FeesAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, bool certification, uint256 feesPerMember);\n', '    event FeesWithdrawn(address indexed guardian, uint256 amount, uint256 totalWithdrawn);\n', '    event BootstrapRewardsAllocated(uint256 allocatedGeneralBootstrapRewards, uint256 generalBootstrapRewardsPerMember, uint256 allocatedCertifiedBootstrapRewards, uint256 certifiedBootstrapRewardsPerMember);\n', '    event BootstrapRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, bool certification, uint256 bootstrapPerMember);\n', '    event BootstrapRewardsWithdrawn(address indexed guardian, uint256 amount, uint256 totalWithdrawn);\n', '\n', '    /*\n', '    * External functions\n', '    */\n', '\n', '    /// Triggers update of the guardian rewards\n', '    /// @dev Called by: the Committee contract\n', '    /// @dev called upon expected change in the committee membership of the guardian\n', "    /// @param guardian is the guardian who's committee membership is updated\n", '    /// @param inCommittee indicates whether the guardian is in the committee prior to the change\n', '    /// @param isCertified indicates whether the guardian is certified prior to the change\n', '    /// @param nextCertification indicates whether after the change, the guardian is certified\n', '    /// @param generalCommitteeSize indicates the general committee size prior to the change\n', '    /// @param certifiedCommitteeSize indicates the certified committee size prior to the change\n', '    function committeeMembershipWillChange(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) external /* onlyCommitteeContract */;\n', '\n', '    /// Returns the fees and bootstrap balances of a guardian\n', '    /// @dev calculates the up to date balances (differ from the state)\n', '    /// @param guardian is the guardian address\n', "    /// @return feeBalance the guardian's fees balance\n", "    /// @return bootstrapBalance the guardian's bootstrap balance\n", '    function getFeesAndBootstrapBalance(address guardian) external view returns (\n', '        uint256 feeBalance,\n', '        uint256 bootstrapBalance\n', '    );\n', '\n', '    /// Returns an estimation of the fees and bootstrap a guardian will be entitled to for a duration of time\n', '    /// The estimation is based on the current system state and there for only provides an estimation\n', '    /// @param guardian is the guardian address\n', '    /// @param duration is the amount of time in seconds for which the estimation is calculated\n', '    /// @return estimatedFees is the estimated received fees for the duration\n', '    /// @return estimatedBootstrapRewards is the estimated received bootstrap for the duration\n', '    function estimateFutureFeesAndBootstrapRewards(address guardian, uint256 duration) external view returns (\n', '        uint256 estimatedFees,\n', '        uint256 estimatedBootstrapRewards\n', '    );\n', '\n', '    /// Transfers the guardian Fees balance to their account\n', '    /// @dev One may withdraw for another guardian\n', '    /// @param guardian is the guardian address\n', '    function withdrawFees(address guardian) external;\n', '\n', '    /// Transfers the guardian bootstrap balance to their account\n', '    /// @dev One may withdraw for another guardian\n', '    /// @param guardian is the guardian address\n', '    function withdrawBootstrapFunds(address guardian) external;\n', '\n', '    /// Returns the current global Fees and Bootstrap rewards state \n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @return certifiedFeesPerMember represents the fees a certified committee member from day 0 would have receive\n', '    /// @return generalFeesPerMember represents the fees a non-certified committee member from day 0 would have receive\n', '    /// @return certifiedBootstrapPerMember represents the bootstrap fund a certified committee member from day 0 would have receive\n', '    /// @return generalBootstrapPerMember represents the bootstrap fund a non-certified committee member from day 0 would have receive\n', '    /// @return lastAssigned is the time the calculation was done to (typically the latest block time)\n', '    function getFeesAndBootstrapState() external view returns (\n', '        uint256 certifiedFeesPerMember,\n', '        uint256 generalFeesPerMember,\n', '        uint256 certifiedBootstrapPerMember,\n', '        uint256 generalBootstrapPerMember,\n', '        uint256 lastAssigned\n', '    );\n', '\n', '    /// Returns the current guardian Fees and Bootstrap rewards state \n', '    /// @dev calculated to the latest block, may differ from the state read\n', '    /// @param guardian is the guardian to query\n', '    /// @return feeBalance is the guardian fees balance \n', '    /// @return lastFeesPerMember is the FeesPerMember on the last update based on the guardian certification state\n', '    /// @return bootstrapBalance is the guardian bootstrap balance \n', '    /// @return lastBootstrapPerMember is the FeesPerMember on the last BootstrapPerMember based on the guardian certification state\n', '    /// @return withdrawnFees is the amount of fees withdrawn by the guardian\n', '    /// @return withdrawnBootstrap is the amount of bootstrap reward withdrawn by the guardian\n', '    /// @return certified is the current guardian certification state \n', '    function getFeesAndBootstrapData(address guardian) external view returns (\n', '        uint256 feeBalance,\n', '        uint256 lastFeesPerMember,\n', '        uint256 bootstrapBalance,\n', '        uint256 lastBootstrapPerMember,\n', '        uint256 withdrawnFees,\n', '        uint256 withdrawnBootstrap,\n', '        bool certified\n', '    );\n', '\n', '    /*\n', '     * Governance\n', '     */\n', '\n', '    event GeneralCommitteeAnnualBootstrapChanged(uint256 generalCommitteeAnnualBootstrap);\n', '    event CertifiedCommitteeAnnualBootstrapChanged(uint256 certifiedCommitteeAnnualBootstrap);\n', '    event RewardDistributionActivated(uint256 startTime);\n', '    event RewardDistributionDeactivated();\n', '    event FeesAndBootstrapRewardsBalanceMigrated(address indexed guardian, uint256 fees, uint256 bootstrapRewards, address toRewardsContract);\n', '    event FeesAndBootstrapRewardsBalanceMigrationAccepted(address from, address indexed guardian, uint256 fees, uint256 bootstrapRewards);\n', '    event EmergencyWithdrawal(address addr, address token);\n', '\n', '    /// Activates fees and bootstrap allocation\n', '    /// @dev governance function called only by the initialization admin\n', '    /// @dev On migrations, startTime should be set as the previous contract deactivation time.\n', '    /// @param startTime sets the last assignment time\n', '    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n', '    \n', '    /// Deactivates fees and bootstrap allocation\n', '    /// @dev governance function called only by the migration manager\n', '    /// @dev guardians updates remain active based on the current perMember value\n', '    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n', '\n', '    /// Returns the rewards allocation activation status\n', '    /// @return rewardAllocationActive is the activation status\n', '    function isRewardAllocationActive() external view returns (bool);\n', '\n', '    /// Sets the annual rate for the general committee bootstrap\n', '    /// @dev governance function called only by the functional manager\n', '    /// @dev updates the global bootstrap and fees state before updating  \n', '    /// @param annualAmount is the annual general committee bootstrap award\n', '    function setGeneralCommitteeAnnualBootstrap(uint256 annualAmount) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the general committee annual bootstrap award\n', '    /// @return generalCommitteeAnnualBootstrap is the general committee annual bootstrap\n', '    function getGeneralCommitteeAnnualBootstrap() external view returns (uint256);\n', '\n', '    /// Sets the annual rate for the certified committee bootstrap\n', '    /// @dev governance function called only by the functional manager\n', '    /// @dev updates the global bootstrap and fees state before updating  \n', '    /// @param annualAmount is the annual certified committee bootstrap award\n', '    function setCertifiedCommitteeAnnualBootstrap(uint256 annualAmount) external /* onlyFunctionalManager */;\n', '\n', '    /// Returns the certified committee annual bootstrap reward\n', '    /// @return certifiedCommitteeAnnualBootstrap is the certified committee additional annual bootstrap\n', '    function getCertifiedCommitteeAnnualBootstrap() external view returns (uint256);\n', '\n', '    /// Migrates the rewards balance to a new FeesAndBootstrap contract\n', '    /// @dev The new rewards contract is determined according to the contracts registry\n', '    /// @dev No impact of the calling contract if the currently configured contract in the registry\n', '    /// @dev may be called also while the contract is locked\n', '    /// @param guardians is the list of guardians to migrate\n', '    function migrateRewardsBalance(address[] calldata guardians) external;\n', '\n', "    /// Accepts guardian's balance migration from a previous rewards contract\n", '    /// @dev the function may be called by any caller that approves the amounts provided for transfer\n', '    /// @param guardians is the list of migrated guardians\n', '    /// @param fees is the list of received guardian fees balance\n', '    /// @param totalFees is the total amount of fees migrated for all guardians in the list. Must match the sum of the fees list.\n', '    /// @param bootstrap is the list of received guardian bootstrap balance.\n', '    /// @param totalBootstrap is the total amount of bootstrap rewards migrated for all guardians in the list. Must match the sum of the bootstrap list.\n', '    function acceptRewardsBalanceMigration(address[] memory guardians, uint256[] memory fees, uint256 totalFees, uint256[] memory bootstrap, uint256 totalBootstrap) external;\n', '\n', '    /// Performs emergency withdrawal of the contract balance\n', '    /// @dev called with a token to withdraw, should be called twice with the fees and bootstrap tokens\n', '    /// @dev governance function called only by the migration manager\n', '    /// @param erc20 is the ERC20 token to withdraw\n', '    function emergencyWithdraw(address erc20) external; /* onlyMigrationManager */\n', '\n', "    /// Returns the contract's settings\n", '    /// @return generalCommitteeAnnualBootstrap is the general committee annual bootstrap\n', '    /// @return certifiedCommitteeAnnualBootstrap is the certified committee additional annual bootstrap\n', '    /// @return rewardAllocationActive indicates the rewards allocation activation state \n', '    function getSettings() external view returns (\n', '        uint generalCommitteeAnnualBootstrap,\n', '        uint certifiedCommitteeAnnualBootstrap,\n', '        bool rewardAllocationActive\n', '    );\n', '}\n', '\n', '// File: contracts/Committee.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Committee contract\n', 'contract Committee is ICommittee, ManagedContract {\n', '\tusing SafeMath for uint256;\n', '\tusing SafeMath for uint96;\n', '\n', '\tuint96 constant CERTIFICATION_MASK = 1 << 95;\n', '\tuint96 constant WEIGHT_MASK = ~CERTIFICATION_MASK;\n', '\n', '\tstruct CommitteeMember {\n', '\t\taddress addr;\n', '\t\tuint96 weightAndCertifiedBit;\n', '\t}\n', '\tCommitteeMember[] committee;\n', '\n', '\tstruct MemberStatus {\n', '\t\tuint32 pos;\n', '\t\tbool inCommittee;\n', '\t}\n', '\tmapping(address => MemberStatus) public membersStatus;\n', '\n', '\tstruct CommitteeStats {\n', '\t\tuint96 totalWeight;\n', '\t\tuint32 generalCommitteeSize;\n', '\t\tuint32 certifiedCommitteeSize;\n', '\t}\n', '\tCommitteeStats committeeStats;\n', '\n', '\tuint8 maxCommitteeSize;\n', '\n', '    /// Constructor\n', '    /// @param _contractRegistry is the contract registry address\n', '    /// @param _registryAdmin is the registry admin address\n', '    /// @param _maxCommitteeSize is the maximum number of committee members\n', '\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin, uint8 _maxCommitteeSize) ManagedContract(_contractRegistry, _registryAdmin) public {\n', '\t\tsetMaxCommitteeSize(_maxCommitteeSize);\n', '\t}\n', '\n', '\tmodifier onlyElectionsContract() {\n', '\t\trequire(msg.sender == electionsContract, "caller is not the elections");\n', '\n', '\t\t_;\n', '\t}\n', '\n', '\t/*\n', '\t * External functions\n', '\t */\n', '\n', '    /// Notifies a weight change of a member\n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the committee member address\n', '    /// @param weight is the updated weight of the committee member\n', '\tfunction memberWeightChange(address addr, uint256 weight) external override onlyElectionsContract onlyWhenActive {\n', '\t\tMemberStatus memory status = membersStatus[addr];\n', '\n', '\t\tif (!status.inCommittee) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tCommitteeMember memory member = committee[status.pos];\n', '\t\t(uint prevWeight, bool isCertified) = getWeightCertification(member);\n', '\n', '\t\tcommitteeStats.totalWeight = uint96(committeeStats.totalWeight.sub(prevWeight).add(weight));\n', '\n', '\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\n', '\t\temit CommitteeChange(addr, weight, isCertified, true);\n', '\t}\n', '\n', '    /// Notifies a change in the certification of a member\n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the committee member address\n', '    /// @param isCertified is the updated certification state of the member\n', '\tfunction memberCertificationChange(address addr, bool isCertified) external override onlyElectionsContract onlyWhenActive {\n', '\t\tMemberStatus memory status = membersStatus[addr];\n', '\n', '\t\tif (!status.inCommittee) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tCommitteeMember memory member = committee[status.pos];\n', '\t\t(uint weight, bool prevCertification) = getWeightCertification(member);\n', '\n', '\t\tCommitteeStats memory _committeeStats = committeeStats;\n', '\n', '\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, true, prevCertification, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n', '\n', '\t\tcommitteeStats.certifiedCommitteeSize = _committeeStats.certifiedCommitteeSize - (prevCertification ? 1 : 0) + (isCertified ? 1 : 0);\n', '\n', '\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\n', '\t\temit CommitteeChange(addr, weight, isCertified, true);\n', '\t}\n', '\n', '    /// Notifies a member removal for example due to voteOut or voteUnready\n', '    /// @dev Called only by: Elections contract\n', '    /// @param memberRemoved is the removed committee member address\n', '    /// @return memberRemoved indicates whether the member was removed from the committee\n', '    /// @return removedMemberWeight indicates the removed member weight\n', '    /// @return removedMemberCertified indicates whether the member was in the certified committee\n', '\tfunction removeMember(address addr) external override onlyElectionsContract onlyWhenActive returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified) {\n', '\t\tMemberStatus memory status = membersStatus[addr];\n', '\t\tif (!status.inCommittee) {\n', '\t\t\treturn (false, 0, false);\n', '\t\t}\n', '\n', '\t\tmemberRemoved = true;\n', '\t\t(removedMemberWeight, removedMemberCertified) = getWeightCertification(committee[status.pos]);\n', '\n', '\t\tcommitteeStats = removeMemberAtPos(status.pos, true, committeeStats);\n', '\t}\n', '\n', '    /// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\n', '    /// The new member will be added only if it is qualified to join the committee \n', '    /// @dev Called only by: Elections contract\n', '    /// @param addr is the added committee member address\n', '    /// @param weight is the added member weight\n', '    /// @param isCertified is the added member certification state\n', '    /// @return memberAdded bool indicates whether the member was added\n', '\tfunction addMember(address addr, uint256 weight, bool isCertified) external override onlyElectionsContract onlyWhenActive returns (bool memberAdded) {\n', '\t\treturn _addMember(addr, weight, isCertified, true);\n', '\t}\n', '\n', '    /// Checks if addMember() would add a the member to the committee (qualified to join)\n', '    /// @param addr is the candidate committee member address\n', '    /// @param weight is the candidate committee member weight\n', '    /// @return wouldAddMember bool indicates whether the member will be added\n', '\tfunction checkAddMember(address addr, uint256 weight) external view override returns (bool wouldAddMember) {\n', '\t\tif (membersStatus[addr].inCommittee) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\n', '\t\t(bool qualified, ) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\n', '\t\treturn qualified;\n', '\t}\n', '\n', '    /// Returns the committee members and their weights\n', '    /// @return addrs is the committee members list\n', '    /// @return weights is an array of uint, indicating committee members list weight\n', '    /// @return certification is an array of bool, indicating the committee members certification status\n', '\tfunction getCommittee() external override view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\n', '\t\treturn _getCommittee();\n', '\t}\n', '\n', '    /// Returns the currently appointed committee data\n', '    /// @return generalCommitteeSize is the number of members in the committee\n', '    /// @return certifiedCommitteeSize is the number of certified members in the committee\n', '    /// @return totalWeight is the total effective stake (weight) of the committee\n', '\tfunction getCommitteeStats() external override view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight) {\n', '\t\tCommitteeStats memory _committeeStats = committeeStats;\n', '\t\treturn (_committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize, _committeeStats.totalWeight);\n', '\t}\n', '\n', '    /// Returns a committee member data\n', '    /// @param addr is the committee member address\n', '    /// @return inCommittee indicates whether the queried address is a member in the committee\n', '    /// @return weight is the committee member weight\n', '    /// @return isCertified indicates whether the committee member is certified\n', '    /// @return totalCommitteeWeight is the total weight of the committee.\n', '\tfunction getMemberInfo(address addr) external override view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight) {\n', '\t\tMemberStatus memory status = membersStatus[addr];\n', '\t\tinCommittee = status.inCommittee;\n', '\t\tif (inCommittee) {\n', '\t\t\t(weight, isCertified) = getWeightCertification(committee[status.pos]);\n', '\t\t}\n', '\t\ttotalCommitteeWeight = committeeStats.totalWeight;\n', '\t}\n', '\t\n', '    /// Emits a CommitteeSnapshot events with current committee info\n', '    /// @dev a CommitteeSnapshot is useful on contract migration or to remove the need to track past events.\n', '\tfunction emitCommitteeSnapshot() external override {\n', '\t\t(address[] memory addrs, uint256[] memory weights, bool[] memory certification) = _getCommittee();\n', '\t\tfor (uint i = 0; i < addrs.length; i++) {\n', '\t\t\temit CommitteeChange(addrs[i], weights[i], certification[i], true);\n', '\t\t}\n', '\t\temit CommitteeSnapshot(addrs, weights, certification);\n', '\t}\n', '\n', '\n', '\t/*\n', '\t * Governance functions\n', '\t */\n', '\n', '    /// Sets the maximum number of committee members\n', '    /// @dev governance function called only by the functional manager\n', '    /// @dev when reducing the number of members, the bottom ones are removed from the committee\n', '    /// @param _maxCommitteeSize is the maximum number of committee members \n', '\tfunction setMaxCommitteeSize(uint8 _maxCommitteeSize) public override onlyFunctionalManager {\n', '\t\tuint8 prevMaxCommitteeSize = maxCommitteeSize;\n', '\t\tmaxCommitteeSize = _maxCommitteeSize;\n', '\n', '\t\twhile (committee.length > _maxCommitteeSize) {\n', '\t\t\t(, ,uint pos) = _getMinCommitteeMember();\n', '\t\t\tcommitteeStats = removeMemberAtPos(pos, true, committeeStats);\n', '\t\t}\n', '\n', '\t\temit MaxCommitteeSizeChanged(_maxCommitteeSize, prevMaxCommitteeSize);\n', '\t}\n', '\n', '    /// Returns the maximum number of committee members\n', '    /// @return maxCommitteeSize is the maximum number of committee members \n', '\tfunction getMaxCommitteeSize() external override view returns (uint8) {\n', '\t\treturn maxCommitteeSize;\n', '\t}\n', '\n', '    /// Imports the committee members from a previous committee contract during migration\n', '    /// @dev initialization function called only by the initializationManager\n', '    /// @dev does not update the reward contract to avoid incorrect notifications \n', '    /// @param previousCommitteeContract is the address of the previous committee contract\n', '\tfunction importMembers(ICommittee previousCommitteeContract) external override onlyInitializationAdmin {\n', '\t\t(address[] memory addrs, uint256[] memory weights, bool[] memory certification) = previousCommitteeContract.getCommittee();\n', '\t\tfor (uint i = 0; i < addrs.length; i++) {\n', '\t\t\t_addMember(addrs[i], weights[i], certification[i], false);\n', '\t\t}\n', '\t}\n', '\n', '\t/*\n', '\t * Private\n', '\t */\n', '\n', '    /// Checks a member eligibility to join the committee and add if eligible\n', '    /// @dev Private function called by AddMember and importMembers\n', '    /// @dev checks if the maximum committee size has reached, removes the lowest weight member if needed\n', '    /// @param addr is the added committee member address\n', '    /// @param weight is the added member weight\n', '    /// @param isCertified is the added member certification state\n', '    /// @param notifyRewards indicates whether to notify the rewards contract on the update, false on members import during migration\n', '\tfunction _addMember(address addr, uint256 weight, bool isCertified, bool notifyRewards) private returns (bool memberAdded) {\n', '\t\tMemberStatus memory status = membersStatus[addr];\n', '\n', '\t\tif (status.inCommittee) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\n', '\t\t(bool qualified, uint entryPos) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\n', '\t\tif (!qualified) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\n', '\t\tmemberAdded = true;\n', '\n', '\t\tCommitteeStats memory _committeeStats = committeeStats;\n', '\n', '\t\tif (notifyRewards) {\n', '\t\t\tstakingRewardsContract.committeeMembershipWillChange(addr, weight, _committeeStats.totalWeight, false, true);\n', '\t\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, false, isCertified, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n', '\t\t}\n', '\n', '\t\t_committeeStats.generalCommitteeSize++;\n', '\t\tif (isCertified) _committeeStats.certifiedCommitteeSize++;\n', '\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.add(weight));\n', '\n', '\t\tCommitteeMember memory newMember = CommitteeMember({\n', '\t\t\taddr: addr,\n', '\t\t\tweightAndCertifiedBit: packWeightCertification(weight, isCertified)\n', '\t\t\t});\n', '\n', '\t\tif (entryPos < committee.length) {\n', '\t\t\tCommitteeMember memory removed = committee[entryPos];\n', '\t\t\tunpackWeightCertification(removed.weightAndCertifiedBit);\n', '\n', '\t\t\t_committeeStats = removeMemberAtPos(entryPos, false, _committeeStats);\n', '\t\t\tcommittee[entryPos] = newMember;\n', '\t\t} else {\n', '\t\t\tcommittee.push(newMember);\n', '\t\t}\n', '\n', '\t\tstatus.inCommittee = true;\n', '\t\tstatus.pos = uint32(entryPos);\n', '\t\tmembersStatus[addr] = status;\n', '\n', '\t\tcommitteeStats = _committeeStats;\n', '\n', '\t\temit CommitteeChange(addr, weight, isCertified, true);\n', '\t}\n', '\n', "    /// Pack a member's weight and certification to a compact uint96 representation\n", '\tfunction packWeightCertification(uint256 weight, bool certification) private pure returns (uint96 weightAndCertified) {\n', '\t\treturn uint96(weight) | (certification ? CERTIFICATION_MASK : 0);\n', '\t}\n', '\n', "    /// Unpacks a compact uint96 representation to a member's weight and certification\n", '\tfunction unpackWeightCertification(uint96 weightAndCertifiedBit) private pure returns (uint256 weight, bool certification) {\n', '\t\treturn (uint256(weightAndCertifiedBit & WEIGHT_MASK), weightAndCertifiedBit & CERTIFICATION_MASK != 0);\n', '\t}\n', '\n', '    /// Returns the weight and certification of a CommitteeMember entry\n', '\tfunction getWeightCertification(CommitteeMember memory member) private pure returns (uint256 weight, bool certification) {\n', '\t\treturn unpackWeightCertification(member.weightAndCertifiedBit);\n', '\t}\n', '\n', '    /// Returns the committee members and their weights\n', '    /// @dev Private function called by getCommittee and emitCommitteeSnapshot\n', '    /// @return addrs is the committee members list\n', '    /// @return weights is an array of uint, indicating committee members list weight\n', '    /// @return certification is an array of bool, indicating the committee members certification status\n', '\tfunction _getCommittee() private view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\n', '\t\tCommitteeMember[] memory _committee = committee;\n', '\t\taddrs = new address[](_committee.length);\n', '\t\tweights = new uint[](_committee.length);\n', '\t\tcertification = new bool[](_committee.length);\n', '\n', '\t\tfor (uint i = 0; i < _committee.length; i++) {\n', '\t\t\taddrs[i] = _committee[i].addr;\n', '\t\t\t(weights[i], certification[i]) = getWeightCertification(_committee[i]);\n', '\t\t}\n', '\t}\n', '\n', '    /// Returns the committee member with the minimum weight as a candidate to be removed from the committee \n', '    /// @dev Private function called by qualifiesToEnterCommittee and setMaxCommitteeSize\n', '    /// @return minMemberAddress is the address of the committee member with the minimum weight\n', '    /// @return minMemberWeight is the weight of the committee member with the minimum weight\n', '    /// @return minMemberPos is the committee array pos of the committee member with the minimum weight\n', '\tfunction _getMinCommitteeMember() private view returns (\n', '\t\taddress minMemberAddress,\n', '\t\tuint256 minMemberWeight,\n', '\t\tuint minMemberPos\n', '\t){\n', '\t\tCommitteeMember[] memory _committee = committee;\n', '\t\tminMemberPos = uint256(-1);\n', '\t\tminMemberWeight = uint256(-1);\n', '\t\tuint256 memberWeight;\n', '\t\taddress memberAddress;\n', '\t\tfor (uint i = 0; i < _committee.length; i++) {\n', '\t\t\tmemberAddress = _committee[i].addr;\n', '\t\t\t(memberWeight,) = getWeightCertification(_committee[i]);\n', '\t\t\tif (memberWeight < minMemberWeight || memberWeight == minMemberWeight && memberAddress < minMemberAddress) {\n', '\t\t\t\tminMemberPos = i;\n', '\t\t\t\tminMemberWeight = memberWeight;\n', '\t\t\t\tminMemberAddress = memberAddress;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\n', '    /// Checks if a potential candidate is qualified to join the committee\n', '    /// @dev Private function called by checkAddMember and _addMember\n', '    /// @param addr is the candidate committee member address\n', '    /// @param weight is the candidate committee member weight\n', '    /// @param _maxCommitteeSize is the maximum number of committee members\n', '    /// @return qualified indicates whether the candidate committee member qualifies to join\n', '    /// @return entryPos is the committee array pos allocated to the member (empty or the position of the minimum weight member)\n', '\tfunction qualifiesToEnterCommittee(address addr, uint256 weight, uint8 _maxCommitteeSize) private view returns (bool qualified, uint entryPos) {\n', '\t\tuint committeeLength = committee.length;\n', '\t\tif (committeeLength < _maxCommitteeSize) {\n', '\t\t\treturn (true, committeeLength);\n', '\t\t}\n', '\n', '\t\t(address minMemberAddress, uint256 minMemberWeight, uint minMemberPos) = _getMinCommitteeMember();\n', '\n', '\t\tif (weight > minMemberWeight || weight == minMemberWeight && addr > minMemberAddress) {\n', '\t\t\treturn (true, minMemberPos);\n', '\t\t}\n', '\n', '\t\treturn (false, 0);\n', '\t}\n', '\n', '    /// Removes a member at a certain pos in the committee array \n', '    /// @dev Private function called by _addMember, removeMember and setMaxCommitteeSize\n', '    /// @param pos is the committee array pos to be removed\n', '    /// @param clearFromList indicates whether to clear the entry in the committee array, false when overriding it with a new member\n', '    /// @param _committeeStats is the current committee statistics\n', '    /// @return newCommitteeStats is the updated committee committee statistics after the removal\n', '\tfunction removeMemberAtPos(uint pos, bool clearFromList, CommitteeStats memory _committeeStats) private returns (CommitteeStats memory newCommitteeStats){\n', '\t\tCommitteeMember memory member = committee[pos];\n', '\n', '\t\t(uint weight, bool certification) = getWeightCertification(member);\n', '\n', '\t\tstakingRewardsContract.committeeMembershipWillChange(member.addr, weight, _committeeStats.totalWeight, true, false);\n', '\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(member.addr, true, certification, certification, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n', '\n', '\t\tdelete membersStatus[member.addr];\n', '\n', '\t\t_committeeStats.generalCommitteeSize--;\n', '\t\tif (certification) _committeeStats.certifiedCommitteeSize--;\n', '\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.sub(weight));\n', '\n', '\t\temit CommitteeChange(member.addr, weight, certification, false);\n', '\n', '\t\tif (clearFromList) {\n', '\t\t\tuint committeeLength = committee.length;\n', '\t\t\tif (pos < committeeLength - 1) {\n', '\t\t\t\tCommitteeMember memory last = committee[committeeLength - 1];\n', '\t\t\t\tcommittee[pos] = last;\n', '\t\t\t\tmembersStatus[last.addr].pos = uint32(pos);\n', '\t\t\t}\n', '\t\t\tcommittee.pop();\n', '\t\t}\n', '\n', '\t\treturn _committeeStats;\n', '\t}\n', '\n', '\t/*\n', '     * Contracts topology / registry interface\n', '     */\n', '\n', '\taddress electionsContract;\n', '\tIStakingRewards stakingRewardsContract;\n', '\tIFeesAndBootstrapRewards feesAndBootstrapRewardsContract;\n', '\n', '    /// Refreshes the address of the other contracts the contract interacts with\n', '    /// @dev called by the registry contract upon an update of a contract in the registry\n', '\tfunction refreshContracts() external override {\n', '\t\telectionsContract = getElectionsContract();\n', '\t\tstakingRewardsContract = IStakingRewards(getStakingRewardsContract());\n', '\t\tfeesAndBootstrapRewardsContract = IFeesAndBootstrapRewards(getFeesAndBootstrapRewardsContract());\n', '\t}\n', '}']