['/**\n', '****************************\n', '* TIME LOCK WALLET FACTORY *\n', '* WWW.GOLDMINING.FARM      *\n', '****************************\n', '**/\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract GoldMiningLocker {\n', '\n', '    address public creator;\n', '    address public owner;\n', '    uint public unlockDate;\n', '    uint public createdAt;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function GoldMiningLocker(\n', '        address _creator,\n', '        address _owner,\n', '        uint _unlockDate\n', '    ) public {\n', '        creator = _creator;\n', '        owner = _owner;\n', '        unlockDate = _unlockDate;\n', '        createdAt = now;\n', '    }\n', '\n', '    // keep all the ether sent to this address\n', '    function() payable public { \n', '        Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // callable by owner only, after specified time\n', '    function withdraw() onlyOwner public {\n', '       require(now >= unlockDate);\n', '       //now send all the balance\n', '       msg.sender.transfer(this.balance);\n', '       Withdrew(msg.sender, this.balance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawTokens(address _tokenContract) onlyOwner public {\n', '       require(now >= unlockDate);\n', '       ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint tokenBalance = token.balanceOf(this);\n', '       token.transfer(owner, tokenBalance);\n', '       WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n', '    }\n', '\n', '    function info() public view returns(address, address, uint, uint, uint) {\n', '        return (creator, owner, unlockDate, createdAt, this.balance);\n', '    }\n', '\n', '    event Received(address from, uint amount);\n', '    event Withdrew(address to, uint amount);\n', '    event WithdrewTokens(address tokenContract, address to, uint amount);\n', '}\n', '\n', 'contract GoldMiningLockerFactory {\n', ' \n', '    mapping(address => address[]) wallets;\n', '\n', '    function getWallets(address _user) \n', '        public\n', '        view\n', '        returns(address[])\n', '    {\n', '        return wallets[_user];\n', '    }\n', '\n', '    function newGoldMiningLocker(address _owner, uint _unlockDate)\n', '        payable\n', '        public\n', '        returns(address wallet)\n', '    {\n', '        // Create new wallet.\n', '        wallet = new GoldMiningLocker(msg.sender, _owner, _unlockDate);\n', '        \n', "        // Add wallet to sender's wallets.\n", '        wallets[msg.sender].push(wallet);\n', '\n', "        // If owner is the same as sender then add wallet to sender's wallets too.\n", '        if(msg.sender != _owner){\n', '            wallets[_owner].push(wallet);\n', '        }\n', '\n', '        // Send ether from this transaction to the created contract.\n', '        wallet.transfer(msg.value);\n', '\n', '      \n', '        Created(wallet, msg.sender, _owner, now, _unlockDate, msg.value);\n', '    }\n', '\n', '    // Prevents accidental sending of ether to the factory\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    event Created(address wallet, address from, address to, uint createdAt, uint unlockDate, uint amount);\n', '}']