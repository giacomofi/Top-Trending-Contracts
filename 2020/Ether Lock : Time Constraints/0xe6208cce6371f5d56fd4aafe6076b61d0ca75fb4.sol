['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: contracts-waifu/waif/utils/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/Ownable.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/SafeMath.sol\n', '\n', 'pragma solidity 0.5.0;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath#mul: OVERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath#div: DIVISION_BY_ZERO");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath#sub: UNDERFLOW");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath#add: OVERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath#mod: DIVISION_BY_ZERO");\n', '        return a % b;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/IERC20.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/Roles.sol\n', '\n', 'pragma solidity 0.5.0;\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/MinterRole.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', 'contract MinterRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(_msgSender());\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(_msgSender());\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/utils/CanTransferRole.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', 'contract CanTransferRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event CanTransferAdded(address indexed account);\n', '    event CanTransferRemoved(address indexed account);\n', '\n', '    Roles.Role private _canTransfer;\n', '\n', '    constructor () internal {\n', '        _addCanTransfer(_msgSender());\n', '    }\n', '\n', '    modifier onlyCanTransfer() {\n', '        require(canTransfer(_msgSender()), "CanTransferRole: caller does not have the CanTransfer role");\n', '        _;\n', '    }\n', '\n', '    function canTransfer(address account) public view returns (bool) {\n', '        return _canTransfer.has(account);\n', '    }\n', '\n', '    function addCanTransfer(address account) public onlyCanTransfer {\n', '        _addCanTransfer(account);\n', '    }\n', '\n', '    function renounceCanTransfer() public {\n', '        _removeCanTransfer(_msgSender());\n', '    }\n', '\n', '    function _addCanTransfer(address account) internal {\n', '        _canTransfer.add(account);\n', '        emit CanTransferAdded(account);\n', '    }\n', '\n', '    function _removeCanTransfer(address account) internal {\n', '        _canTransfer.remove(account);\n', '        emit CanTransferRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/HaremNonTradable.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract HaremNonTradable is Ownable, MinterRole, CanTransferRole {\n', '    using SafeMath for uint256;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _totalClaimed;\n', '    string public name = "HAREM - Non Tradable";\n', '    string public symbol = "HAREM";\n', '    uint8 public decimals = 18;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // Returns the total claimed Harem\n', '    // This is just purely used to display the total Harem claimed by users on the frontend\n', '    function totalClaimed() public view returns (uint256) {\n', '        return _totalClaimed;\n', '    }\n', '\n', '    // Add Harem claimed\n', '    function addClaimed(uint256 _amount) public onlyCanTransfer {\n', '        _totalClaimed = _totalClaimed.add(_amount);\n', '    }\n', '\n', '    // Set Harem claimed to a custom value, for if we wanna reset the counter on new season release\n', '    function setClaimed(uint256 _amount) public onlyCanTransfer {\n', '        require(_amount >= 0, "Cant be negative");\n', '        _totalClaimed = _amount;\n', '    }\n', '\n', '    // As this token is non tradable, only minters are allowed to transfer tokens between accounts\n', '    function transfer(address receiver, uint numTokens) public onlyCanTransfer returns (bool) {\n', '        require(numTokens <= _balances[msg.sender]);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(numTokens);\n', '        _balances[receiver] = _balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    // As this token is non tradable, only minters are allowed to transfer tokens between accounts\n', '    function transferFrom(address owner, address buyer, uint numTokens) public onlyCanTransfer returns (bool) {\n', '        require(numTokens <= _balances[owner]);\n', '\n', '        _balances[owner] = _balances[owner].sub(numTokens);\n', '        _balances[buyer] = _balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public onlyMinter {\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '    function burn(address _account, uint256 value) public onlyCanTransfer {\n', '        require(_balances[_account] >= value, "Cannot burn more than address has");\n', '        _burn(_account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '}\n', '\n', '// File: contracts-waifu/waif/HaremFactory.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract HaremFactory is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of Harems\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accHaremPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accHaremPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 token; // Address of token contract.\n', '        uint256 haremsPerDay; // The amount of Harems per day generated for each token staked\n', '        uint256 maxStake; // The maximum amount of tokens which can be staked in this pool\n', '        uint256 lastUpdateTime; // Last timestamp that Harems distribution occurs.\n', '        uint256 accHaremPerShare; // Accumulated Harems per share, times 1e12. See below.\n', '    }\n', '\n', '    // Treasury address.\n', '    address public treasuryAddr;\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Record whether the pair has been added.\n', '    mapping(address => uint256) public tokenPID;\n', '\n', '    HaremNonTradable public Harem;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(HaremNonTradable _haremAddress, address _treasuryAddr) public {\n', '        Harem = _haremAddress;\n', '        treasuryAddr = _treasuryAddr;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new token to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same token more than once. Rewards will be messed up if you do.\n', '    function add(IERC20 _token, uint256 _haremsPerDay, uint256 _maxStake) public onlyOwner {\n', '        require(tokenPID[address(_token)] == 0, "GiverOfHarem:duplicate add.");\n', '        require(address(_token) != address(Harem), "Cannot add Harem as a pool" );\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                token: _token,\n', '                maxStake: _maxStake,\n', '                haremsPerDay: _haremsPerDay,\n', '                lastUpdateTime: block.timestamp,\n', '                accHaremPerShare: 0\n', '            })\n', '        );\n', '        tokenPID[address(_token)] = poolInfo.length;\n', '    }\n', '\n', '  \n', '    function setMaxStake(uint256 pid, uint256 amount) public onlyOwner {\n', '        require(amount >= 0, "Max stake cannot be negative");\n', '        poolInfo[pid].maxStake = amount;\n', '    }\n', '\n', '    // Set the amount of Harems generated per day for each token staked\n', '    function setHaremsPerDay(uint256 pid, uint256 amount) public onlyOwner {\n', '        require(amount >= 0, "Harems per day cannot be negative");\n', '        updatePool(pid);\n', '        poolInfo[pid].haremsPerDay = amount;\n', '    }\n', '\n', '    // View function to see pending Harems on frontend.\n', '    function pendingHarem(uint256 _pid, address _user) public view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 blockTime = block.timestamp;\n', '        uint256 accHaremPerShare = pool.accHaremPerShare;\n', '        uint256 tokenSupply = pool.token.balanceOf(address(this));\n', '        if (blockTime > pool.lastUpdateTime && tokenSupply != 0) {\n', '            uint256 haremReward = pendingHaremOfPool(_pid);\n', '            accHaremPerShare = accHaremPerShare.add(haremReward.mul(1e12).div(tokenSupply));\n', '        }\n', '        return user.amount.mul(accHaremPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // View function to calculate the total pending Harems of address across all pools\n', '    function totalPendingHarem(address _user) public view returns (uint256) {\n', '        uint256 total = 0;\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            total = total.add(pendingHarem(pid, _user));\n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    // View function to see pending Harems on the whole pool\n', '    function pendingHaremOfPool(uint256 _pid) public view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 blockTime = block.timestamp;\n', '        uint256 tokenSupply = pool.token.balanceOf(address(this));\n', '        return blockTime.sub(pool.lastUpdateTime).mul(tokenSupply.mul(pool.haremsPerDay).div(86400).div(1000000000000000000));\n', '    }\n', '\n', '    // Harvest pending Harems of a list of pools.\n', '    // Be careful of gas spending if you try to harvest a big number of pools\n', '    // Might be worth it checking in the frontend for the pool IDs with pending Harem for this address and only harvest those\n', '    function rugPull(uint256[] memory _pids) public {\n', '        for (uint i=0; i < _pids.length; i++) {\n', '            withdraw(_pids[i], 0);\n', '        }\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function rugPullAll() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.timestamp <= pool.lastUpdateTime) {\n', '            return;\n', '        }\n', '        if (pool.haremsPerDay == 0) {\n', '            pool.lastUpdateTime = block.timestamp;\n', '            return;\n', '        }\n', '        uint256 tokenSupply = pool.token.balanceOf(address(this));\n', '        if (tokenSupply == 0) {\n', '            pool.lastUpdateTime = block.timestamp;\n', '            return;\n', '        }\n', '\n', '        // return blockTime.sub(lastUpdateTime[account]).mul(balanceOf(account).mul(haremsPerDay).div(86400));\n', '        uint256 haremReward = pendingHaremOfPool(_pid);\n', '        //Harem.mint(treasuryAddr, haremReward.div(40)); // 2.5% Harem for the treasury (Usable to purchase NFTs)\n', '        Harem.mint(address(this), haremReward);\n', '\n', '        pool.accHaremPerShare = pool.accHaremPerShare.add(haremReward.mul(1e12).div(tokenSupply));\n', '        pool.lastUpdateTime = block.timestamp;\n', '    }\n', '\n', '    // Deposit LP tokens to pool for Harem allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '\n', '        require(_amount.add(user.amount) <= pool.maxStake, "Cannot stake beyond maxStake value");\n', '\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);\n', '        if (pending > 0) safeHaremTransfer(msg.sender, pending);\n', '        pool.token.transferFrom(address(msg.sender), address(this), _amount);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw tokens from pool.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);\n', '\n', '        // In case the maxStake has been lowered and address is above maxStake, we force it to withdraw what is above current maxStake\n', '        // User can delay his/her withdraw/harvest to take advantage of a reducing of maxStake,\n', '        // if he/she entered the pool at maxStake before the maxStake reducing occured\n', '        uint256 leftAfterWithdraw = user.amount.sub(_amount);\n', '        if (leftAfterWithdraw > pool.maxStake) {\n', '            _amount = _amount.add(leftAfterWithdraw - pool.maxStake);\n', '        }\n', '\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);\n', '        safeHaremTransfer(msg.sender, pending);\n', '        pool.token.transfer(address(msg.sender), _amount);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount > 0, "emergencyWithdraw: not good");\n', '        uint256 _amount = user.amount;\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        pool.token.transfer(address(msg.sender), _amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Safe Harem transfer function, just in case if rounding error causes pool to not have enough Harems.\n', '    function safeHaremTransfer(address _to, uint256 _amount) internal {\n', '        uint256 haremBal = Harem.balanceOf(address(this));\n', '        if (_amount > haremBal) {\n', '            Harem.transfer(_to, haremBal);\n', '            Harem.addClaimed(haremBal);\n', '        } else {\n', '            Harem.transfer(_to, _amount);\n', '            Harem.addClaimed(_amount);\n', '        }\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    function treasury(address _treasuryAddr) public {\n', '        require(msg.sender == treasuryAddr, "Must be called from current treasury address");\n', '        treasuryAddr = _treasuryAddr;\n', '    }\n', '}']