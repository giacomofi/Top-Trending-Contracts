['pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ISwerve {\n', '    function get_virtual_price() external view returns (uint256 out);\n', '    function underlying_coins(int128 tokenId) external view returns (address token);\n', '    function calc_token_amount(uint256[4] calldata amounts, bool deposit) external view returns (uint256 amount);\n', '    function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external view returns (uint256 buyTokenAmt);\n', '}\n', '\n', 'interface ISwerveZap {\n', '  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256 amount);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function decimals() external view returns (uint);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint);\n', '}\n', '\n', 'interface IStakingRewards {\n', '  function balanceOf(address) external view returns (uint256);\n', '  function earned(address) external view returns (uint256);\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "sub-overflow");\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '}\n', '\n', 'contract SwerveHelpers is DSMath {\n', '    /**\n', '     * @dev Return Swerve Swap Address\n', '    */\n', '    function getSwerveSwapAddr() internal pure returns (address) {\n', '        return 0x329239599afB305DA0A2eC69c58F8a6697F9F88d;\n', '    }\n', '\n', '    /**\n', '     * @dev Return Swerve Token Address\n', '    */\n', '    function getSwerveTokenAddr() internal pure returns (address) {\n', '        return 0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059;\n', '    }\n', '\n', '    /**\n', '     * @dev Return Swerve Zap Address\n', '    */\n', '    function getSwerveZapAddr() internal pure returns (address) {\n', '        return 0xa746c67eB7915Fa832a4C2076D403D4B68085431;\n', '    }\n', '\n', '    function getTokenI(address token) internal pure returns (int128 i) {\n', '        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\n', '        // DAI Token\n', '        i = 0;\n', '        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n', '        // USDC Token\n', '        i = 1;\n', '        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\n', '        // USDT Token\n', '        i = 2;\n', '        } else if (token == address(0x0000000000085d4780B73119b644AE5ecd22b376)) {\n', '        // TUSD Token\n', '        i = 3;\n', '        } else {\n', '        revert("token-not-found.");\n', '        }\n', '    }\n', '\n', '    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '        amt = mul(_amt, 10 ** (18 - _dec));\n', '    }\n', '\n', '    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '        amt = (_amt / 10 ** (18 - _dec));\n', '    }\n', '\n', '    function getBuyUnitAmt(\n', '        address buyAddr,\n', '        address sellAddr,\n', '        uint sellAmt,\n', '        uint buyAmt,\n', '        uint slippage\n', '    ) internal view returns (uint unitAmt) {\n', '        uint _sellAmt = convertTo18(TokenInterface(sellAddr).decimals(), sellAmt);\n', '        uint _buyAmt = convertTo18(TokenInterface(buyAddr).decimals(), buyAmt);\n', '        unitAmt = wdiv(_buyAmt, _sellAmt);\n', '        unitAmt = wmul(unitAmt, sub(WAD, slippage));\n', '    }\n', '\n', '    function getDepositUnitAmt(\n', '        address token,\n', '        uint depositAmt,\n', '        uint swerveAmt,\n', '        uint slippage\n', '    ) internal view returns (uint unitAmt) {\n', '        uint _depositAmt = convertTo18(TokenInterface(token).decimals(), depositAmt);\n', '        uint _swerveAmt = convertTo18(TokenInterface(getSwerveTokenAddr()).decimals(), swerveAmt);\n', '        unitAmt = wdiv(_swerveAmt, _depositAmt);\n', '        unitAmt = wmul(unitAmt, sub(WAD, slippage));\n', '    }\n', '\n', '    function getWithdrawtUnitAmt(\n', '        address token,\n', '        uint withdrawAmt,\n', '        uint swerveAmt,\n', '        uint slippage\n', '    ) internal view returns (uint unitAmt) {\n', '        uint _withdrawAmt = convertTo18(TokenInterface(token).decimals(), withdrawAmt);\n', '        uint _swerveAmt = convertTo18(TokenInterface(getSwerveTokenAddr()).decimals(), swerveAmt);\n', '        unitAmt = wdiv(_swerveAmt, _withdrawAmt);\n', '        unitAmt = wmul(unitAmt, add(WAD, slippage));\n', '    }\n', '}\n', '\n', '\n', 'contract Resolver is SwerveHelpers {\n', '\n', '    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\n', '        public\n', '        view\n', '        returns (uint buyAmt, uint unitAmt, uint virtualPrice)\n', '    {\n', '        ISwerve swerve = ISwerve(getSwerveSwapAddr());\n', '        buyAmt = swerve.get_dy(getTokenI(sellAddr), getTokenI(buyAddr), sellAmt);\n', '        virtualPrice = swerve.get_virtual_price();\n', '        unitAmt = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, buyAmt, slippage);\n', '    }\n', '\n', '    function getDepositAmount(address token, uint depositAmt, uint slippage)\n', '        public\n', '        view\n', '        returns (uint swerveAmt, uint unitAmt, uint virtualPrice)\n', '    {\n', '        uint[4] memory amts;\n', '        amts[uint(getTokenI(token))] = depositAmt;\n', '        ISwerve swerve = ISwerve(getSwerveSwapAddr());\n', '        swerveAmt = swerve.calc_token_amount(amts, true);\n', '        virtualPrice = swerve.get_virtual_price();\n', '        unitAmt = getDepositUnitAmt(token, depositAmt, swerveAmt, slippage);\n', '    }\n', '\n', '    function getWithdrawSwerveAmount(address token, uint withdrawAmt, uint slippage)\n', '        public\n', '        view\n', '        returns (uint swerveAmt, uint unitAmt, uint virtualPrice)\n', '    {\n', '        uint[4] memory amts;\n', '        amts[uint(getTokenI(token))] = withdrawAmt;\n', '        ISwerve swerve = ISwerve(getSwerveSwapAddr());\n', '        swerveAmt = swerve.calc_token_amount(amts, false);\n', '        virtualPrice = swerve.get_virtual_price();\n', '        unitAmt = getWithdrawtUnitAmt(token, withdrawAmt, swerveAmt, slippage);\n', '    }\n', '\n', '    function getWithdrawTokenAmount(address token, uint swerveAmt, uint slippage)\n', '        public\n', '        view\n', '        returns (uint tokenAmt, uint unitAmt, uint virtualPrice)\n', '    {\n', '        tokenAmt = ISwerveZap(getSwerveZapAddr()).calc_withdraw_one_coin(swerveAmt, getTokenI(token));\n', '        virtualPrice = ISwerve(getSwerveSwapAddr()).get_virtual_price();\n', '        unitAmt = getWithdrawtUnitAmt(token, tokenAmt, swerveAmt, slippage);\n', '    }\n', '\n', '    function getPosition(\n', '        address user\n', '    ) public view returns (\n', '        uint userBal,\n', '        uint totalSupply,\n', '        uint virtualPrice,\n', '        uint userShare,\n', '        uint poolDaiBal,\n', '        uint poolUsdcBal,\n', '        uint poolUsdtBal,\n', '        uint poolSusdBal\n', '    ) {\n', '        TokenInterface swerveToken = TokenInterface(getSwerveTokenAddr());\n', '        userBal = swerveToken.balanceOf(user);\n', '        totalSupply = swerveToken.totalSupply();\n', '        userShare = wdiv(userBal, totalSupply);\n', '        ISwerve swerveContract = ISwerve(getSwerveSwapAddr());\n', '        virtualPrice = swerveContract.get_virtual_price();\n', '        poolDaiBal = TokenInterface(swerveContract.underlying_coins(0)).balanceOf(getSwerveSwapAddr());\n', '        poolUsdcBal = TokenInterface(swerveContract.underlying_coins(1)).balanceOf(getSwerveSwapAddr());\n', '        poolUsdtBal = TokenInterface(swerveContract.underlying_coins(2)).balanceOf(getSwerveSwapAddr());\n', '        poolSusdBal = TokenInterface(swerveContract.underlying_coins(3)).balanceOf(getSwerveSwapAddr());\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract InstaSwerveResolver is Resolver {\n', '    string public constant name = "Swerve-swUSD-Resolver-v1.0";\n', '}']