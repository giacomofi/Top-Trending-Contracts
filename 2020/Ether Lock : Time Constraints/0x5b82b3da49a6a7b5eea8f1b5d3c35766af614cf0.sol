['pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping (address => bool) public _whitelistedAddresses;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _burnedSupply;\n', '    uint256 private _burnRate;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint256 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint256 decimals, uint256 burnrate, uint256 initSupply) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _burnRate = burnrate;\n', '        _totalSupply = 0;\n', '        _mint(msg.sender, initSupply*(10**_decimals));\n', '        _burnedSupply = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint256) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of burned tokens.\n', '     */\n', '    function burnedSupply() public view returns (uint256) {\n', '        return _burnedSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the burnrate.\n', '     */\n', '    function burnRate() public view returns (uint256) {\n', '        return _burnRate;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function burn(uint256 amount) public virtual returns (bool) {\n', '        _burn(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        if (_whitelistedAddresses[sender] == true || _whitelistedAddresses[recipient] == true) {\n', '            _beforeTokenTransfer(sender, recipient, amount);\n', '            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '            _balances[recipient] = _balances[recipient].add(amount);\n', '            emit Transfer(sender, recipient, amount);\n', '        } else {\n', '            uint256 amount_burn = amount.mul(_burnRate).div(100);\n', '            uint256 amount_send = amount.sub(amount_burn);\n', '            require(amount == amount_send + amount_burn, "Burn value invalid");\n', '            _burn(sender, amount_burn);\n', '            amount = amount_send;\n', '            _beforeTokenTransfer(sender, recipient, amount);\n', '            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '            _balances[recipient] = _balances[recipient].add(amount);\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * \n', "     * HINT: This function is 'internal' and therefore can only be called from another\n", '     * function inside this contract!\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _burnedSupply = _burnedSupply.add(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {burnRate} to a value other than the initial one.\n', '     */\n', '    function _setupBurnrate(uint8 burnrate_) internal virtual {\n', '        _burnRate = burnrate_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an minter) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the minter account will be the one that deploys the contract. This\n', ' * can later be changed with {transferMintership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyMinter`, which can be applied to your functions to restrict their use to\n', ' * the minter.\n', ' */\n', 'contract Mintable is Context {\n', '\n', '    /**\n', "     * @dev So here we seperate the rights of the classic ownership into 'owner' and 'minter'\n", "     * this way the developer/owner stays the 'owner' and can make changes like adding a pool\n", "     * at any time but cannot mint anymore as soon as the 'minter' gets changes (to the chef contract)\n", '     */\n', '    address private _minter;\n', '\n', '    event MintershipTransferred(address indexed previousMinter, address indexed newMinter);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial minter.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _minter = msgSender;\n', '        emit MintershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current minter.\n', '     */\n', '    function minter() public view returns (address) {\n', '        return _minter;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the minter.\n', '     */\n', '    modifier onlyMinter() {\n', '        require(_minter == _msgSender(), "Mintable: caller is not the minter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers mintership of the contract to a new account (`newMinter`).\n', '     * Can only be called by the current minter.\n', '     */\n', '    function transferMintership(address newMinter) public virtual onlyMinter {\n', '        require(newMinter != address(0), "Mintable: new minter is the zero address");\n', '        emit MintershipTransferred(_minter, newMinter);\n', '        _minter = newMinter;\n', '    }\n', '}\n', '\n', '/*\n', '\n', 'website: vox.finance\n', '\n', ' _    ______ _  __   ___________   _____    _   ______________\n', '| |  / / __ \\ |/ /  / ____/  _/ | / /   |  / | / / ____/ ____/\n', '| | / / / / /   /  / /_   / //  |/ / /| | /  |/ / /   / __/   \n', '| |/ / /_/ /   |_ / __/ _/ // /|  / ___ |/ /|  / /___/ /___   \n', '|___/\\____/_/|_(_)_/   /___/_/ |_/_/  |_/_/ |_/\\____/_____/   \n', '                                                              \n', '*/\n', '// VoxToken\n', 'contract VoxToken is ERC20("Vox.Finance", "VOX", 18, 0, 1250), Ownable, Mintable {\n', '    /// @notice Creates `_amount` token to `_to`. Must only be called by the minter (VoxMaster).\n', '    function mint(address _to, uint256 _amount) public onlyMinter {\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '    function setBurnrate(uint8 burnrate_) public onlyOwner {\n', '        _setupBurnrate(burnrate_);\n', '    }\n', '\n', '    function addWhitelistedAddress(address _address) public onlyOwner {\n', '        _whitelistedAddresses[_address] = true;\n', '    }\n', '\n', '    function removeWhitelistedAddress(address _address) public onlyOwner {\n', '        _whitelistedAddresses[_address] = false;\n', '    }\n', '}\n', '\n', '/*\n', '\n', 'website: vox.finance\n', '\n', ' _    ______ _  __   ___________   _____    _   ______________\n', '| |  / / __ \\ |/ /  / ____/  _/ | / /   |  / | / / ____/ ____/\n', '| | / / / / /   /  / /_   / //  |/ / /| | /  |/ / /   / __/   \n', '| |/ / /_/ /   |_ / __/ _/ // /|  / ___ |/ /|  / /___/ /___   \n', '|___/\\____/_/|_(_)_/   /___/_/ |_/_/  |_/_/ |_/\\____/_____/   \n', '                                                              \n', '*/\n', '// Vox Populi token for Governance.\n', 'contract VoxPopuliToken is ERC20("Vox.Populi", "POPULI", 18, 0, 0), Ownable {\n', '    /// @notice Creates `_amount` of tokens to `_to`. Must only be called by the minter (VoxMaster).\n', '    function mint(address _to, uint256 _amount) public onlyOwner {\n', '        _mint(_to, _amount);\n', '    }\n', '    \n', '    /// @notice Burns `_amount` of tokens from `_from`. Must only be called by the minter (VoxMaster).\n', '    function burn(address _from, uint256 _amount) public onlyOwner {\n', '        _burn(_from, _amount);\n', '    }\n', '}\n', '\n', '/*\n', '\n', 'website: vox.finance\n', '\n', ' _    ______ _  __   ___________   _____    _   ______________\n', '| |  / / __ \\ |/ /  / ____/  _/ | / /   |  / | / / ____/ ____/\n', '| | / / / / /   /  / /_   / //  |/ / /| | /  |/ / /   / __/   \n', '| |/ / /_/ /   |_ / __/ _/ // /|  / ___ |/ /|  / /___/ /___   \n', '|___/\\____/_/|_(_)_/   /___/_/ |_/_/  |_/_/ |_/\\____/_____/   \n', '                                                              \n', '*/\n', 'interface IMigrationMaster {\n', '    // Perform LP token migration for swapping liquidity providers.\n', '    // Take the current LP token address and return the new LP token address.\n', "    // Migrator should have full access to the caller's LP token.\n", '    // Return the new LP token address.\n', '    //\n', '    // Migrator must have allowance access to old LP tokens.\n', '    // EXACTLY the same amount of new LP tokens must be minted or\n', '    // else something bad will happen. This function is meant to be used to swap\n', '    // to the native liquidity provider in the future (see the VOX roadmap)!\n', '    function migrate(IERC20 token) external returns (IERC20);\n', '}\n', '\n', 'contract VoxMaster is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        uint256 pendingRewards; // Pending rewards for user.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of VOXs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accVoxPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accVoxPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken; // Address of LP token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. VOXs to distribute per block.\n', '        uint256 lastRewardBlock; // Last block number that VOXs distribution occurs.\n', '        uint256 accVoxPerShare; // Accumulated VOXs per share, times 1e12. See below.\n', '    }\n', '\n', '    // VOX token\n', '    VoxToken public vox;\n', '    // POPULI token\n', '    VoxPopuliToken public populi;\n', '    // Dev fund (4%, initially)\n', '    uint256 public devFundDivRate = 25;\n', '    // Dev address.\n', '    address public devaddr;\n', '    // Block number when bonus VOX period ends.\n', '    uint256 public bonusEndBlock;\n', '    // VOX tokens created per block.\n', '    uint256 public voxPerBlock;\n', '    // Bonus muliplier for early vox liquidity providers.\n', '    uint256 public BONUS_MULTIPLIER = 1;\n', '    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n', '    IMigrationMaster public migrator;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when VOX mining starts.\n', '    uint256 public startBlock;\n', '\n', '    // Events\n', '    event Recovered(address token, uint256 amount);\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event ClaimAndStake(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(\n', '        VoxToken _vox,\n', '        VoxPopuliToken _populi,\n', '        address _devaddr,\n', '        uint256 _voxPerBlock,\n', '        uint256 _startBlock,\n', '        uint256 _bonusEndBlock\n', '    ) public {\n', '        vox = _vox;\n', '        populi = _populi;\n', '        devaddr = _devaddr;\n', '        voxPerBlock = _voxPerBlock;\n', '        bonusEndBlock = _bonusEndBlock;\n', '        startBlock = _startBlock;\n', '\n', '        // staking pool\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _vox,\n', '            allocPoint: 1000,\n', '            lastRewardBlock: startBlock,\n', '            accVoxPerShare: 0\n', '        }));\n', '\n', '        totalAllocPoint = 1000;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_to <= bonusEndBlock) {\n', '            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '        } else if (_from >= bonusEndBlock) {\n', '            return _to.sub(_from);\n', '        } else {\n', '            return\n', '                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n', '                    _to.sub(bonusEndBlock)\n', '                );\n', '        }\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _lpToken,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock\n', '            ? block.number\n', '            : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                lpToken: _lpToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                accVoxPerShare: 0\n', '            })\n', '        );\n', '        updateStakingPool();\n', '    }\n', '\n', "    // Update the given pool's VOX allocation point. Can only be called by the owner.\n", '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '        if (prevAllocPoint != _allocPoint) {\n', '            updateStakingPool();\n', '        }\n', '    }\n', '\n', '    function updateStakingPool() internal {\n', '        uint256 length = poolInfo.length;\n', '        uint256 points = 0;\n', '        for (uint256 pid = 1; pid < length; ++pid) {\n', '            points = points.add(poolInfo[pid].allocPoint);\n', '        }\n', '        if (points != 0) {\n', '            points = points.div(3);\n', '            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\n', '            poolInfo[0].allocPoint = points;\n', '        }\n', '    }\n', '\n', '    // Migrate lp token to another lp contract. Can be called by anyone. \n', '    // We trust that migrator contract is good.\n', '    function migrate(uint256 _pid) public {\n', '        require(address(migrator) != address(0), "migrate: no migrator");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        IERC20 lpToken = pool.lpToken;\n', '        uint256 bal = lpToken.balanceOf(address(this));\n', '        lpToken.safeApprove(address(migrator), bal);\n', '        IERC20 newLpToken = migrator.migrate(lpToken);\n', '        require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");\n', '        pool.lpToken = newLpToken;\n', '    }\n', '\n', '    // View function to see pending VOXs on frontend.\n', '    function pendingVox(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accVoxPerShare = pool.accVoxPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = getMultiplier(\n', '                pool.lastRewardBlock,\n', '                block.number\n', '            );\n', '            uint256 voxReward = multiplier\n', '                .mul(voxPerBlock)\n', '                .mul(pool.allocPoint)\n', '                .div(totalAllocPoint);\n', '            accVoxPerShare = accVoxPerShare.add(\n', '                voxReward.mul(1e12).div(lpSupply)\n', '            );\n', '        }\n', '        return\n', '            user.amount.mul(accVoxPerShare).div(1e12).sub(user.rewardDebt).add(user.pendingRewards);\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 voxReward = multiplier\n', '            .mul(voxPerBlock)\n', '            .mul(pool.allocPoint)\n', '            .div(totalAllocPoint);\n', '        vox.mint(devaddr, voxReward.div(devFundDivRate));\n', '        vox.mint(address(this), voxReward);\n', '        pool.accVoxPerShare = pool.accVoxPerShare.add(\n', '            voxReward.mul(1e12).div(lpSupply)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Deposit LP tokens to VoxMaster for VOX allocation.\n', '    function deposit(uint256 _pid, uint256 _amount, bool _withdrawRewards) public {\n', "        require (_pid != 0, 'please deposit VOX by staking');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user\n', '                .amount\n', '                .mul(pool.accVoxPerShare)\n', '                .div(1e12)\n', '                .sub(user.rewardDebt);\n', '            \n', '            if (pending > 0) {\n', '                user.pendingRewards = user.pendingRewards.add(pending);\n', '\n', '                if (_withdrawRewards) {\n', '                    safeVoxTransfer(msg.sender, user.pendingRewards);\n', '                    emit Claim(msg.sender, _pid, user.pendingRewards);\n', '                    user.pendingRewards = 0;\n', '                }\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from VoxMaster.\n', '    function withdraw(uint256 _pid, uint256 _amount, bool _withdrawRewards) public {\n', "        require (_pid != 0, 'please withdraw VOX by unstaking');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0) {\n', '            user.pendingRewards = user.pendingRewards.add(pending);\n', '\n', '            if (_withdrawRewards) {\n', '                safeVoxTransfer(msg.sender, user.pendingRewards);\n', '                emit Claim(msg.sender, _pid, user.pendingRewards);\n', '                user.pendingRewards = 0;\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', "        require (_pid != 0, 'please withdraw VOX by unstaking');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        user.pendingRewards = 0;\n', '    }\n', '\n', '    // Claim rewards from VoxMaster.\n', '    function claim(uint256 _pid) public {\n', "        require (_pid != 0, 'please claim staking rewards on stake page');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0 || user.pendingRewards > 0) {\n', '            user.pendingRewards = user.pendingRewards.add(pending);\n', '            safeVoxTransfer(msg.sender, user.pendingRewards);\n', '            emit Claim(msg.sender, _pid, user.pendingRewards);\n', '            user.pendingRewards = 0;\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '    }\n', '\n', '    // Claim rewards from VoxMaster and deposit them directly to staking pool.\n', '    function claimAndStake(uint256 _pid) public {\n', "        require (_pid != 0, 'please claim and stake staking rewards on stake page');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0 || user.pendingRewards > 0) {\n', '            user.pendingRewards = user.pendingRewards.add(pending);\n', '            transferToStake(user.pendingRewards);\n', '            emit ClaimAndStake(msg.sender, _pid, user.pendingRewards);\n', '            user.pendingRewards = 0;\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '    }\n', '\n', '    // Transfer rewards from LP pools to staking pool.\n', '    function transferToStake(uint256 _amount) internal {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        updatePool(0);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                user.pendingRewards = user.pendingRewards.add(pending);\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '\n', '        populi.mint(msg.sender, _amount);\n', '        emit Deposit(msg.sender, 0, _amount);\n', '    }\n', '\n', '    // Stake VOX tokens to VoxMaster.\n', '    function enterStaking(uint256 _amount, bool _withdrawRewards) public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        updatePool(0);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                user.pendingRewards = user.pendingRewards.add(pending);\n', '\n', '                if (_withdrawRewards) {\n', '                    safeVoxTransfer(msg.sender, user.pendingRewards);\n', '                    user.pendingRewards = 0;\n', '                }\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '\n', '        populi.mint(msg.sender, _amount);\n', '        emit Deposit(msg.sender, 0, _amount);\n', '    }\n', '\n', '    // Withdraw VOX tokens from staking.\n', '    function leaveStaking(uint256 _amount, bool _withdrawRewards) public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        require(user.amount >= _amount, "unstake: not good");\n', '        require(populi.balanceOf(msg.sender) >= _amount, "unstake: not enough POPULI tokens");\n', '        updatePool(0);\n', '        uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0) {\n', '                user.pendingRewards = user.pendingRewards.add(pending);\n', '\n', '                if (_withdrawRewards) {\n', '                    safeVoxTransfer(msg.sender, user.pendingRewards);\n', '                    user.pendingRewards = 0;\n', '                }\n', '            }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '\n', '        populi.burn(msg.sender, _amount);\n', '        emit Withdraw(msg.sender, 0, _amount);\n', '    }\n', '\n', '    // Claim staking rewards from VoxMaster.\n', '    function claimStaking() public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        updatePool(0);\n', '        uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0 || user.pendingRewards > 0) {\n', '            user.pendingRewards = user.pendingRewards.add(pending);\n', '            safeVoxTransfer(msg.sender, user.pendingRewards);\n', '            emit Claim(msg.sender, 0, user.pendingRewards);\n', '            user.pendingRewards = 0;\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '    }\n', '\n', '    // Transfer staking rewards to staking pool.\n', '    function stakeRewardsStaking() public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        uint256 rewardsToStake;\n', '        updatePool(0);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accVoxPerShare).div(1e12).sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                user.pendingRewards = user.pendingRewards.add(pending);\n', '            }\n', '        }\n', '        if (user.pendingRewards > 0) {\n', '            rewardsToStake = user.pendingRewards;\n', '            user.pendingRewards = 0;\n', '            user.amount = user.amount.add(rewardsToStake);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accVoxPerShare).div(1e12);\n', '\n', '        populi.mint(msg.sender, rewardsToStake);\n', '        emit Deposit(msg.sender, 0, rewardsToStake);\n', '    }\n', '\n', '    // Safe vox transfer function, just in case if rounding error causes pool to not have enough VOXs.\n', '    function safeVoxTransfer(address _to, uint256 _amount) internal {\n', '        uint256 voxBal = vox.balanceOf(address(this));\n', '        if (_amount > voxBal) {\n', '            vox.transfer(_to, voxBal);\n', '        } else {\n', '            vox.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    function setDevAddr(address _devaddr) public {\n', '        require(msg.sender == devaddr, "!dev: nice try, amigo");\n', '        devaddr = _devaddr;\n', '    }\n', '\n', '    // **** Additional functions to edit master attributes ****\n', '\n', '    function setVoxPerBlock(uint256 _voxPerBlock) public onlyOwner {\n', '        require(_voxPerBlock > 0, "!voxPerBlock-0");\n', '        voxPerBlock = _voxPerBlock;\n', '    }\n', '\n', '    function setBonusMultiplier(uint256 _bonusMultiplier) public onlyOwner {\n', '        require(_bonusMultiplier > 0, "!bonusMultiplier-0");\n', '        BONUS_MULTIPLIER = _bonusMultiplier;\n', '    }\n', '\n', '    function setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner {\n', '        bonusEndBlock = _bonusEndBlock;\n', '    }\n', '\n', '    // Set the migrator contract. Can only be called by the owner.\n', '    function setMigrator(IMigrationMaster _migrator) public onlyOwner {\n', '        migrator = _migrator;\n', '    }\n', '\n', '    function setDevFundDivRate(uint256 _devFundDivRate) public onlyOwner {\n', '        require(_devFundDivRate > 0, "!devFundDivRate-0");\n', '        devFundDivRate = _devFundDivRate;\n', '    }\n', '}']