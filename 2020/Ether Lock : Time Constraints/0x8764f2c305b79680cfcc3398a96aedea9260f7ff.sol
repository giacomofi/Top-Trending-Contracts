['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IValueVaultMaster {\n', '    function bank(address) view external returns (address);\n', '    function isVault(address) view external returns (bool);\n', '    function isController(address) view external returns (bool);\n', '    function isStrategy(address) view external returns (bool);\n', '\n', '    function slippage(address) view external returns (uint);\n', '    function convertSlippage(address _input, address _output) view external returns (uint);\n', '\n', '    function valueToken() view external returns (address);\n', '    function govVault() view external returns (address);\n', '    function insuranceFund() view external returns (address);\n', '    function performanceReward() view external returns (address);\n', '\n', '    function govVaultProfitShareFee() view external returns (uint);\n', '    function gasFee() view external returns (uint);\n', '    function insuranceFee() view external returns (uint);\n', '    function withdrawalProtectionFee() view external returns (uint);\n', '}\n', '\n', 'interface IValueMultiVault {\n', '    function cap() external view returns (uint);\n', '    function getConverter(address _want) external view returns (address);\n', '    function getVaultMaster() external view returns (address);\n', '    function balance() external view returns (uint);\n', '    function token() external view returns (address);\n', '    function available(address _want) external view returns (uint);\n', '    function accept(address _input) external view returns (bool);\n', '\n', '    function claimInsurance() external;\n', '    function earn(address _want) external;\n', '    function harvest(address reserve, uint amount) external;\n', '\n', '    function withdraw_fee(uint _shares) external view returns (uint);\n', '    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint);\n', '    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n', '    function convert_rate(address _input, uint _amount) external view returns (uint);\n', '    function getPricePerFullShare() external view returns (uint);\n', '    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\n', '\n', '    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositAll(uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function depositAllFor(address _account, address _to, uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\n', '    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\n', '    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\n', '\n', '    function harvestStrategy(address _strategy) external;\n', '    function harvestWant(address _want) external;\n', '    function harvestAllStrategies() external;\n', '}\n', '\n', 'interface IMultiVaultConverter {\n', '    function token() external returns (address);\n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\n', '    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint _shareAmount);\n', '    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint _outputAmount);\n', '\n', '    function convert(address _input, address _output, uint _inputAmount) external returns (uint _outputAmount);\n', '    function convertAll(uint[] calldata _amounts) external returns (uint _outputAmount);\n', '}\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint value) external returns (uint freed);\n', '}\n', '\n', 'contract ValueMultiVaultBank {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    modifier discountCHI(uint8 _flag) {\n', '        if ((_flag & 0x1) == 0) {\n', '            _;\n', '        } else {\n', '            uint gasStart = gasleft();\n', '            _;\n', '            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n', '        }\n', '    }\n', '\n', '    IERC20 public valueToken = IERC20(0x49E833337ECe7aFE375e44F4E3e8481029218E5c);\n', '\n', '    address public governance;\n', '    address public strategist; // who can call harvestXXX()\n', '\n', '    IValueVaultMaster public vaultMaster;\n', '    \n', '    struct UserInfo {\n', '        uint amount;\n', '        mapping(uint8 => uint) rewardDebt;\n', '        mapping(uint8 => uint) accumulatedEarned; // will accumulate every time user harvest\n', '    }\n', '\n', '    struct RewardPoolInfo {\n', '        IERC20 rewardToken;     // Address of rewardPool token contract.\n', '        uint lastRewardBlock;   // Last block number that rewardPool distribution occurs.\n', '        uint endRewardBlock;    // Block number which rewardPool distribution ends.\n', '        uint rewardPerBlock;    // Reward token amount to distribute per block.\n', '        uint accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\n', '        uint totalPaidRewards;  // for stat only\n', '    }\n', '\n', '    mapping(address => RewardPoolInfo[]) public rewardPoolInfos; // vault address => pool info\n', '    mapping(address => mapping(address => UserInfo)) public userInfo; // vault address => account => userInfo\n', '\n', '    event Deposit(address indexed vault, address indexed user, uint amount);\n', '    event Withdraw(address indexed vault, address indexed user, uint amount);\n', '    event RewardPaid(address indexed vault, uint pid, address indexed user, uint reward);\n', '\n', '    constructor(IERC20 _valueToken, IValueVaultMaster _vaultMaster) public {\n', '        valueToken = _valueToken;\n', '        vaultMaster = _vaultMaster;\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setVaultMaster(IValueVaultMaster _vaultMaster) external {\n', '        require(msg.sender == governance, "!governance");\n', '        vaultMaster = _vaultMaster;\n', '    }\n', '\n', '    function addVaultRewardPool(address _vault, IERC20 _rewardToken, uint _startBlock, uint _endRewardBlock, uint _rewardPerBlock) external {\n', '        require(msg.sender == governance, "!governance");\n', '        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\n', '        require(rewardPools.length < 8, "exceed rwdPoolLim");\n', '        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\n', '        require(_startBlock <= _endRewardBlock, "sVB>eVB");\n', '        updateReward(_vault);\n', '        rewardPools.push(RewardPoolInfo({\n', '            rewardToken : _rewardToken,\n', '            lastRewardBlock : _startBlock,\n', '            endRewardBlock : _endRewardBlock,\n', '            rewardPerBlock : _rewardPerBlock,\n', '            accRewardPerShare : 0,\n', '            totalPaidRewards : 0\n', '            }));\n', '    }\n', '\n', '    function updateRewardPool(address _vault, uint8 _pid, uint _endRewardBlock, uint _rewardPerBlock) external {\n', '        require(msg.sender == governance, "!governance");\n', '        updateRewardPool(_vault, _pid);\n', '        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\n', '        require(block.number <= rewardPool.endRewardBlock, "late");\n', '        rewardPool.endRewardBlock = _endRewardBlock;\n', '        rewardPool.rewardPerBlock = _rewardPerBlock;\n', '    }\n', '\n', '    function updateReward(address _vault) public {\n', '        uint8 rewardPoolLength = uint8(rewardPoolInfos[_vault].length);\n', '        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\n', '            updateRewardPool(_vault, _pid);\n', '        }\n', '    }\n', '\n', '    function updateRewardPool(address _vault, uint8 _pid) public {\n', '        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\n', '        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\n', '        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock) {\n', '            uint lpSupply = IERC20(address(_vault)).balanceOf(address(this));\n', '            if (lpSupply > 0) {\n', '                uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\n', '                uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\n', '                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\n', '            }\n', '            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\n', '        }\n', '    }\n', '\n', '    function cap(IValueMultiVault _vault) external view returns (uint) {\n', '        return _vault.cap();\n', '    }\n', '\n', '    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(!vaultMaster.isVault(address(_token)), "vaultToken");\n', '        _token.safeApprove(_spender, _amount);\n', '    }\n', '\n', '    function deposit(IValueMultiVault _vault, address _input, uint _amount, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) {\n', '        require(_vault.accept(_input), "vault does not accept this asset");\n', '        require(_amount > 0, "!_amount");\n', '\n', '        if (!_isStake) {\n', '            _vault.depositFor(msg.sender, msg.sender, _input, _amount, _min_mint_amount);\n', '        } else {\n', '            uint _mint_amount = _vault.depositFor(msg.sender, address(this), _input, _amount, _min_mint_amount);\n', '            _stakeVaultShares(address(_vault), _mint_amount);\n', '        }\n', '    }\n', '\n', '    function depositAll(IValueMultiVault _vault, uint[] calldata _amounts, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) {\n', '        if (!_isStake) {\n', '            _vault.depositAllFor(msg.sender, msg.sender, _amounts, _min_mint_amount);\n', '        } else {\n', '            uint _mint_amount = _vault.depositAllFor(msg.sender, address(this), _amounts, _min_mint_amount);\n', '            _stakeVaultShares(address(_vault), _mint_amount);\n', '        }\n', '    }\n', '\n', '    function stakeVaultShares(address _vault, uint _shares) external {\n', '        uint _before = IERC20(address(_vault)).balanceOf(address(this));\n', '        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\n', '        uint _after = IERC20(address(_vault)).balanceOf(address(this));\n', '        _shares = _after.sub(_before); // Additional check for deflationary tokens\n', '        _stakeVaultShares(_vault, _shares);\n', '    }\n', '\n', '    function _stakeVaultShares(address _vault, uint _shares) internal {\n', '        UserInfo storage user = userInfo[_vault][msg.sender];\n', '        updateReward(_vault);\n', '        if (user.amount > 0) {\n', '            getAllRewards(_vault, msg.sender, uint8(0));\n', '        }\n', '        user.amount = user.amount.add(_shares);\n', '        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\n', '        uint8 rewardPoolLength = uint8(rewardPools.length);\n', '        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\n', '            user.rewardDebt[_pid] = user.amount.mul(rewardPools[_pid].accRewardPerShare).div(1e18);\n', '        }\n', '        emit Deposit(_vault, msg.sender, _shares);\n', '    }\n', '\n', '    // call unstake(_vault, 0) for getting reward\n', '    function unstake(address _vault, uint _amount, uint8 _flag) public discountCHI(_flag) {\n', '        UserInfo storage user = userInfo[_vault][msg.sender];\n', '        updateReward(_vault);\n', '        if (user.amount > 0) {\n', '            getAllRewards(_vault, msg.sender, uint8(0));\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            IERC20(address(_vault)).safeTransfer(msg.sender, _amount);\n', '        }\n', '        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\n', '        uint8 rewardPoolLength = uint8(rewardPools.length);\n', '        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\n', '            user.rewardDebt[_pid] = user.amount.mul(rewardPools[_pid].accRewardPerShare).div(1e18);\n', '        }\n', '        emit Withdraw(_vault, msg.sender, _amount);\n', '    }\n', '\n', '    // using PUSH pattern\n', '    function getAllRewards(address _vault, address _account, uint8 _flag) public discountCHI(_flag) {\n', '        uint8 rewardPoolLength = uint8(rewardPoolInfos[_vault].length);\n', '        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\n', '            getReward(_vault, _pid, _account, uint8(0));\n', '        }\n', '    }\n', '\n', '    function getReward(address _vault, uint8 _pid, address _account, uint8 _flag) public discountCHI(_flag) {\n', '        updateRewardPool(_vault, _pid);\n', '        UserInfo storage user = userInfo[_vault][_account];\n', '        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\n', '        uint _pendingReward = user.amount.mul(rewardPool.accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\n', '        if (_pendingReward > 0) {\n', '            user.accumulatedEarned[_pid] = user.accumulatedEarned[_pid].add(_pendingReward);\n', '            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\n', '            safeTokenTransfer(rewardPool.rewardToken, _account, _pendingReward);\n', '            emit RewardPaid(_vault, _pid, _account, _pendingReward);\n', '            user.rewardDebt[_pid] = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\n', '        }\n', '    }\n', '\n', '    function pendingReward(address _vault, uint8 _pid, address _account) public view returns (uint _pending) {\n', '        UserInfo storage user = userInfo[_vault][_account];\n', '        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\n', '        uint _accRewardPerShare = rewardPool.accRewardPerShare;\n', '        uint lpSupply = IERC20(_vault).balanceOf(address(this));\n', '        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\n', '        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock && lpSupply != 0) {\n', '            uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\n', '            uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\n', '            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\n', '        }\n', '        _pending = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\n', '    }\n', '\n', '    function shares_owner(address _vault, address _account) public view returns (uint) {\n', '        return IERC20(_vault).balanceOf(_account).add(userInfo[_vault][_account].amount);\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function withdraw(address _vault, uint _shares, address _output, uint _min_output_amount, uint8 _flag) public discountCHI(_flag) {\n', '        uint _userBal = IERC20(address(_vault)).balanceOf(msg.sender);\n', '        if (_shares > _userBal) {\n', '            uint _need = _shares.sub(_userBal);\n', '            require(_need <= userInfo[_vault][msg.sender].amount, "_userBal+staked < _shares");\n', '            unstake(_vault, _need, uint8(0));\n', '        }\n', '        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\n', '        IValueMultiVault(_vault).withdrawFor(msg.sender, _shares, _output, _min_output_amount);\n', '    }\n', '\n', '    function exit(address _vault, address _output, uint _min_output_amount, uint8 _flag) external discountCHI(_flag) {\n', '        unstake(_vault, userInfo[_vault][msg.sender].amount, uint8(0));\n', '        withdraw(_vault, IERC20(address(_vault)).balanceOf(msg.sender), _output, _min_output_amount, uint8(0));\n', '    }\n', '\n', '    function withdraw_fee(IValueMultiVault _vault, uint _shares) external view returns (uint) {\n', '        return _vault.withdraw_fee(_shares);\n', '    }\n', '\n', '    function calc_token_amount_deposit(IValueMultiVault _vault, uint[] calldata _amounts) external view returns (uint) {\n', '        return _vault.calc_token_amount_deposit(_amounts);\n', '    }\n', '\n', '    function calc_token_amount_withdraw(IValueMultiVault _vault, uint _shares, address _output) external view returns (uint) {\n', '        return _vault.calc_token_amount_withdraw(_shares, _output);\n', '    }\n', '\n', '    function convert_rate(IValueMultiVault _vault, address _input, uint _amount) external view returns (uint) {\n', '        return _vault.convert_rate(_input, _amount);\n', '    }\n', '\n', '    function harvestStrategy(IValueMultiVault _vault, address _strategy, uint8 _flag) external discountCHI(_flag) {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        _vault.harvestStrategy(_strategy);\n', '    }\n', '\n', '    function harvestWant(IValueMultiVault _vault, address _want, uint8 _flag) external discountCHI(_flag) {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        _vault.harvestWant(_want);\n', '    }\n', '\n', '    function harvestAllStrategies(IValueMultiVault _vault, uint8 _flag) external discountCHI(_flag) {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        _vault.harvestAllStrategies();\n', '    }\n', '\n', '    // Safe token transfer function, just in case if rounding error causes vinfo to not have enough token.\n', '    function safeTokenTransfer(IERC20 _token, address _to, uint _amount) internal {\n', '        uint bal = _token.balanceOf(address(this));\n', '        if (_amount > bal) {\n', '            _token.safeTransfer(_to, bal);\n', '        } else {\n', '            _token.safeTransfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\n', '     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\n', '     */\n', '    function governanceRecoverUnsupported(IERC20 _token, uint amount, address to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(!vaultMaster.isVault(address(_token)), "vaultToken");\n', '        _token.safeTransfer(to, amount);\n', '    }\n', '}']