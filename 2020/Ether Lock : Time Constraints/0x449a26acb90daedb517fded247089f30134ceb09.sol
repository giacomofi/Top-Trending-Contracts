['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract AMPLGTeamReserve {\n', '\n', '    address public owner;\n', '    uint256 public unlockDate;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "You are not the owner");\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        owner = address(0xF112F4452E8Dc33C5574B13C939383A0aB8aa583); // The reserves wallet address\n', '        unlockDate = 1606845600; // This can be increased, use info() to see the up to date unlocking time\n', '    }\n', '\n', '    // keep all tokens sent to this address\n', '    function() payable public {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // callable by owner only, after specified time\n', '    function withdrawAll() onlyOwner public {\n', '       require(now >= unlockDate, "No time to withdraw yet");\n', '       // withdraw balance\n', '       msg.sender.transfer(address(this).balance);\n', '       emit Withdrew(msg.sender, address(this).balance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawERC20(address _tokenContract) onlyOwner public {\n', '       require(now >= unlockDate, "Funds cannot be withdrawn yet");\n', '       ERC20 token = ERC20(_tokenContract);\n', '       uint256 tokenBalance = token.balanceOf(this);\n', '       token.transfer(owner, tokenBalance);\n', '       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawERC20Amount(address _tokenContract, uint256 _amount) onlyOwner public {\n', '       require(now >= unlockDate, "Funds cannot be withdrawn yet");\n', '       ERC20 token = ERC20(_tokenContract);\n', '       uint256 tokenBalance = token.balanceOf(this);\n', '       require(tokenBalance > _amount, "Not enough funds in the reserve");\n', '       token.transfer(owner, _amount);\n', '       emit WithdrewTokens(_tokenContract, msg.sender, _amount);\n', '    }\n', '\n', '    function info() public view returns(address, uint256, uint256) {\n', '        return (owner, unlockDate, address(this).balance);\n', '    }\n', '\n', '    function calculateUnlockTime() public view returns (uint256, uint256) {\n', '        uint256 time = now;\n', '        uint256 UnlockTime = now + 90 days;\n', '        return (time, UnlockTime);\n', '    }\n', '    \n', '    function infoERC20(address _tokenContract) public view returns(address, uint256, uint256) {\n', '        ERC20 token = ERC20(_tokenContract);\n', '        return (owner, unlockDate, token.balanceOf(this));\n', '    }\n', '    \n', '    function updateUnlockDate(uint256 _newDate) onlyOwner public {\n', '        unlockDate = _newDate;\n', '    }\n', '    \n', '    event Received(address from, uint256 amount);\n', '    event Withdrew(address to, uint256 amount);\n', '    event WithdrewTokens(address tokenContract, address to, uint256 amount);\n', '}']