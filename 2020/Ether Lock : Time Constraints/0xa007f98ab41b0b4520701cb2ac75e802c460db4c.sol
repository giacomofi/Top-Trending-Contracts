['pragma solidity ^0.6.0;\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint _id) external returns (uint _num);\n', '    function setUint(uint _id, uint _val) external;\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '}\n', '\n', '\n', 'contract Helpers is DSMath {\n', '    /**\n', '     * @dev Return Memory Variable Address\n', '     */\n', '    function getMemoryAddr() internal pure returns (address) {\n', '        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n', '    }\n', '\n', '    /**\n', '     * @dev Get Uint value from InstaMemory Contract.\n', '    */\n', '    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n', '    }\n', '\n', '    /**\n', '     * @dev Set Uint value in InstaMemory Contract.\n', '    */\n', '    function setUint(uint setId, uint val) internal {\n', '        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n', '    }\n', '\n', '    /**\n', '     * @dev Connector Details\n', '    */\n', '    function connectorID() public pure returns(uint _type, uint _id) {\n', '        (_type, _id) = (1, 47);\n', '    }\n', '}\n', '\n', 'contract BasicResolver is Helpers {\n', '\n', '    /**\n', '     * @dev Add getIds\n', '     * @param getIds Array of get token amount at this IDs from `InstaMemory` Contract.\n', '     * @param setId Set ctoken amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function addIds(uint[] calldata getIds, uint setId) external payable {\n', '        uint amt;\n', '        for (uint i = 0; i < getIds.length; i++) {\n', '            amt = add(amt, getUint(getIds[i], 0));\n', '        }\n', '\n', '        setUint(setId, amt);\n', '    }\n', '\n', '    /**\n', '     * @dev Sub two getId.\n', '     * @param getIdOne Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param getIdTwo Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set ctoken amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function subIds(uint getIdOne, uint getIdTwo, uint setId) external payable {\n', '        uint amt = sub(getUint(getIdOne, 0), getUint(getIdTwo, 0));\n', '\n', '        setUint(setId, amt);\n', '    }\n', '}\n', '\n', 'contract ConnectVariableMath is BasicResolver {\n', '    string public name = "memory-variable-math-v1";\n', '}']