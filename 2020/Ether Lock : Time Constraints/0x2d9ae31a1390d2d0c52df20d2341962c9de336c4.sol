['// Sources flattened with hardhat v2.0.2 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/GSN/Context.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/Ownable.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/SafeMath.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/Address.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/RampStaking.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract RampStaking is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 DECIMALS = 18;\n', '    uint256 UNITS = 10 ** DECIMALS;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;             // How many LP tokens the user has provided.\n', '        uint256 rewardDebt;         // Reward debt. See explanation below.\n', '        uint256 rewardDebtAtBlock;  // the last block user stake\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 token;             // Address of LP token contract.\n', '        uint256 rampPerBlock;       // Ramps to distribute per block.\n', '        uint256 lastRewardBlock;    // Last block number that Ramps distribution occurs.\n', '        uint256 accRampPerShare;    // Accumulated Ramps per share, times 1e18 (UNITS).\n', '    }\n', '\n', '    IERC20 public rampToken;\n', '    address public rampTokenFarmingWallet;\n', '\n', '    // The block number when Ramp mining starts.\n', '    uint256 public START_BLOCK;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '\n', '    // poolId1 count from 1, subtraction 1 before using with poolInfo\n', '    mapping(address => uint256) public poolId1;\n', '\n', '    // Info of each user that stakes LP tokens. pid => user address => info\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '\n', '    // Default fee to burn is 5%\n', '    uint256 public feePercentage = 5;\n', '\n', '    event Deposit(\n', '        address indexed user,\n', '        uint256 indexed poolId,\n', '        uint256 amount\n', '    );\n', '\n', '    event Withdraw(\n', '        address indexed user,\n', '        uint256 indexed poolId,\n', '        uint256 amount\n', '    );\n', '\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed poolId,\n', '        uint256 amount\n', '    );\n', '\n', '    event SendRampReward(\n', '        address indexed user,\n', '        uint256 indexed poolId,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(\n', '        address _rampTokenAddress,\n', '        address _rampTokenFarmingWallet,\n', '        uint256 _startBlock\n', '    ) public {\n', '\n', '        rampToken = IERC20(_rampTokenAddress);\n', '        rampTokenFarmingWallet = _rampTokenFarmingWallet;\n', '        START_BLOCK = _startBlock;\n', '    }\n', '\n', '    /********************** PUBLIC ********************************/\n', '\n', '\n', '    // Add a new erc20 token to the pool. Can only be called by the owner.\n', '    function add(uint256 _rampPerBlock, IERC20 _token, bool _withUpdate) public onlyOwner {\n', '\n', '        require(poolId1[address(_token)] == 0, "Token is already in pool");\n', '\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;\n', '\n', '        poolId1[address(_token)] = poolInfo.length + 1;\n', '\n', '        poolInfo.push(PoolInfo({\n', '        token : _token,\n', '        rampPerBlock : _rampPerBlock,\n', '        lastRewardBlock : lastRewardBlock,\n', '        accRampPerShare : 0\n', '        }));\n', '    }\n', '\n', "    // Update the given pool's Ramp allocation point. Can only be called by the owner.\n", '    function set(uint256 _poolId, uint256 _rampPerBlock, bool _withUpdate) public onlyOwner {\n', '\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        poolInfo[_poolId].rampPerBlock = _rampPerBlock;\n', '\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '\n', '        uint256 length = poolInfo.length;\n', '\n', '        for (uint256 poolId = 0; poolId < length; ++poolId) {\n', '            updatePool(poolId);\n', '        }\n', '\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _poolId) public {\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '\n', "        // Return if it's too early (if START_BLOCK is in the future probably)\n", '        if (block.number <= pool.lastRewardBlock) return;\n', '\n', '        // Retrieve amount of tokens held in contract\n', '        uint256 poolBalance = pool.token.balanceOf(address(this));\n', '\n', "        // If the contract holds no tokens at all, don't proceed.\n", '        if (poolBalance == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        // Calculate the amount of RAMP to send to the contract to pay out for this pool\n', '        uint256 rewards = getPoolReward(pool.lastRewardBlock, block.number, pool.rampPerBlock);\n', '\n', '\n', '        // Update the accumulated RampPerShare\n', '        pool.accRampPerShare = pool.accRampPerShare.add(rewards.mul(UNITS).div(poolBalance));\n', '\n', '        // Update the last block\n', '        pool.lastRewardBlock = block.number;\n', '\n', '    }\n', '\n', '    // Get rewards for a specific amount of rampPerBlocks\n', '    function getPoolReward(uint256 _from, uint256 _to, uint256 _rampPerBlock)\n', '    public view\n', '    returns (uint256 rewards) {\n', '\n', '        // Calculate number of blocks covered.\n', '        uint256 blockCount = _to.sub(_from);\n', '\n', '        // Get the amount of RAMP for this pool\n', '        uint256 amount = blockCount.mul(_rampPerBlock);\n', '\n', '        // Retrieve allowance and balance\n', '        uint256 allowedRamp = rampToken.allowance(rampTokenFarmingWallet, address(this));\n', '        uint256 farmingBalance = rampToken.balanceOf(rampTokenFarmingWallet);\n', '\n', '        // If the actual balance is less than the allowance, use the balance.\n', '        allowedRamp = farmingBalance < allowedRamp ? farmingBalance : allowedRamp;\n', '\n', '        // If we reached the total amount allowed already, return the allowedRamp\n', '        if (allowedRamp < amount) {\n', '            rewards = allowedRamp;\n', '        } else {\n', '            rewards = amount;\n', '        }\n', '    }\n', '\n', '\n', '    function claimReward(uint256 _poolId) public {\n', '        updatePool(_poolId);\n', '        _harvest(_poolId);\n', '    }\n', '\n', '    // Deposit LP tokens to RampStaking for Ramp allocation.\n', '    function deposit(uint256 _poolId, uint256 _amount) public {\n', '        require(_amount > 0, "Amount cannot be 0");\n', '\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '        UserInfo storage user = userInfo[_poolId][msg.sender];\n', '\n', '        updatePool(_poolId);\n', '\n', '        _harvest(_poolId);\n', '\n', '        pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '\n', '        // This is the very first deposit\n', '        if (user.amount == 0) {\n', '            user.rewardDebtAtBlock = block.number;\n', '        }\n', '\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accRampPerShare).div(UNITS);\n', '        emit Deposit(msg.sender, _poolId, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from RampStaking.\n', '    function withdraw(uint256 _poolId, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '        UserInfo storage user = userInfo[_poolId][msg.sender];\n', '\n', '        require(_amount > 0, "Amount cannot be 0");\n', '        require(user.amount >= _amount, "Cannot withdraw more than balance");\n', '\n', '        updatePool(_poolId);\n', '        _harvest(_poolId);\n', '\n', '        user.amount = user.amount.sub(_amount);\n', '\n', '        pool.token.safeTransfer(address(msg.sender), _amount);\n', '\n', '        user.rewardDebt = user.amount.mul(pool.accRampPerShare).div(UNITS);\n', '\n', '        emit Withdraw(msg.sender, _poolId, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _poolId) public {\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '        UserInfo storage user = userInfo[_poolId][msg.sender];\n', '\n', '        pool.token.safeTransfer(address(msg.sender), user.amount);\n', '\n', '        emit EmergencyWithdraw(msg.sender, _poolId, user.amount);\n', '\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '\n', '    }\n', '\n', '    /********************** EXTERNAL ********************************/\n', '\n', '    // Return the number of registered pools\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // View function to see pending Ramps on frontend.\n', '    function pendingReward(uint256 _poolId, address _user) external view returns (uint256) {\n', '\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '        UserInfo storage user = userInfo[_poolId][_user];\n', '\n', '        uint256 accRampPerShare = pool.accRampPerShare;\n', '        uint256 poolBalance = pool.token.balanceOf(address(this));\n', '\n', '        if (block.number > pool.lastRewardBlock && poolBalance > 0) {\n', '\n', '            uint256 rewards = getPoolReward(pool.lastRewardBlock, block.number, pool.rampPerBlock);\n', '            accRampPerShare = accRampPerShare.add(rewards.mul(UNITS).div(poolBalance));\n', '\n', '        }\n', '\n', '        uint256 pending = user.amount.mul(accRampPerShare).div(UNITS).sub(user.rewardDebt);\n', '\n', '        uint256 fee = pending.mul(feePercentage).div(100);\n', '\n', '        return pending.sub(fee);\n', '    }\n', '\n', '    function setFee(uint256 _feePercentage) external onlyOwner {\n', '        require(_feePercentage <= 10, "Max 10");\n', '        feePercentage = _feePercentage;\n', '    }\n', '\n', '    /********************** INTERNAL ********************************/\n', '\n', '    // Burn Ramp tokens (used for fees)\n', '    function _burnRamp(uint256 _amount) internal {\n', "        // Since RampToken is using OpenZeppelin's ERC20, sending to address(0) is not possible\n", "        // We'll send to address(1) instead.\n", '        rampToken.transferFrom(rampTokenFarmingWallet, address(1), _amount);\n', '    }\n', '\n', '    function _harvest(uint256 _poolId) internal {\n', '        PoolInfo storage pool = poolInfo[_poolId];\n', '        UserInfo storage user = userInfo[_poolId][msg.sender];\n', '\n', '        if (user.amount == 0) return;\n', '\n', '        uint256 pending = user.amount.mul(pool.accRampPerShare).div(UNITS).sub(user.rewardDebt);\n', '\n', '        uint256 rampAvailable = rampToken.balanceOf(rampTokenFarmingWallet);\n', '\n', '        if (pending > rampAvailable) {\n', '            pending = rampAvailable;\n', '        }\n', '\n', '        if (pending > 0) {\n', '\n', '            uint256 fee = pending.mul(feePercentage).div(100);\n', '\n', '            // Burn the fees if there were any\n', '            _burnRamp(fee);\n', '\n', '            // Pay out the pending rewards\n', '            rampToken.transferFrom(rampTokenFarmingWallet, msg.sender, pending.sub(fee));\n', '\n', '            user.rewardDebtAtBlock = block.number;\n', '\n', '            emit SendRampReward(msg.sender, _poolId, pending.sub(fee));\n', '        }\n', '\n', '        user.rewardDebt = user.amount.mul(pool.accRampPerShare).div(UNITS);\n', '\n', '    }\n', '}']