['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by .\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves  tokens from the caller's account to .\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that  will be\n', '     * allowed to spend on behalf of  through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets  as the allowance of  over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves  tokens from  to  using the\n', "     * allowance mechanism.  is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when  tokens are moved from one account () to\n', '     * another ().\n', '     *\n', '     * Note that  may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a  for an  is set by\n', '     * a call to {approve}.  is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a  statement to your contract,\n', ' * which allows you to call the safe operations as , etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' *  restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's  operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's ~ operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's ~ operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's  operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's  operator. Note: this function uses a\n", '     *  opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's  operator. Note: this function uses a\n", '     *  opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's  operator. This function uses a\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's  operator. This function uses a\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if  is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others,  will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's : sends  wei to\n", '     * , forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by , making them unable to receive funds via\n', '     * . {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to , care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level . A\n', '     * plain is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If  reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * -  must be a contract.\n', '     * - calling  with  must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[], but with\n', '     *  as a fallback revert reason when  reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[],\n', '     * but also transferring  wei to .\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least .\n', '     * - the called Solidity function must be .\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[], but\n', '     * with  as a fallback revert reason when  reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * \n', ' *   USDTex - investment platform based on Ethereun blockchain smart-contract technology. Safe and legit!\n', ' *\n', ' *   ┌───────────────────────────────────────────────────────────────────────┐  \n', ' *   │   Website: https://usdtex.pro                                        │\n', ' *   │                                                                       │  \n', ' *   |   E-mail: admin@usdtex.pro                                  \t\t |\n', ' *   └───────────────────────────────────────────────────────────────────────┘ \n', ' *\n', ' *\n', ' */\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract USDTexPro {\n', '\tusing SafeMath for uint256;\n', '\tusing SafeERC20 for IERC20;\n', '\t// USDT contract  Decimals: 6\n', '\tIERC20 public  investToken;\n', '\n', '\tuint256 constant public INVEST_MIN_AMOUNT = 1e7; // 10 usdt\n', '\tuint256 constant public PERCENTS_DIVIDER =  1e13 ;//1000;\n', '\tuint256 constant public BASE_PERCENT = 1e11;\n', '\tuint256 constant public MAX_PERCENT = 18*(1e12);\n', '\tuint256 constant public MARKETING_FEE = 60*(1e10);\n', '\tuint256 constant public PROJECT_FEE = 20*(1e10);\n', '\tuint256 constant public DEV_FEE = 20*(1e10);\n', '\n', '\t// uint256 constant public REFERRAL_PERCENTS = 1e11;\n', '\tuint256 public REFERRAL_PERCENTS = 1e11;\n', '\t\n', '\tuint256 constant public TIME_STEP = 1 days ; //days\n', '\tuint256 constant public BASE_AMOUNT_DALIY = 1e11; // 10w USDT\n', '\tuint256 constant public START_POINT = 1605064271; // Singapore time at: 2020-11-11 11:11:11\n', '\tuint256 constant public PERCENT_INVEST = 10; // increase percent pre Invest\n', '\tuint256 constant public PERCENT_WITHDRAW = 15; // decreased percent pre Withdraw\n', '\n', '\tuint256 public presentPercent = 1e11;\n', '\n', '\tuint256 public presentDayAmount = BASE_AMOUNT_DALIY;\n', '\tuint256 public presentDaysInterval = 0;\n', '\n', '\tuint256 public totalLottery; //sum of latest 100 ticker\n', '\tuint256 public totalLotteryReward; //sum of 5% of invest\n', '\n', '\tuint256 public totalUsers;\n', '\tuint256 public totalInvested;\n', '\tuint256 public totalWithdrawn;\n', '\tuint256 public totalDeposits;\n', '\n', '\tuint256 public announceAt;\n', '\tbool public announceWinner; //  announce Winners\n', '\n', '\taddress public marketingAddress;\n', '\taddress public projectAddress;\n', '\taddress public devAddress;\n', '\n', '\taddress public rewardPool;\n', '\taddress public obsoleteExitTo;\n', '\t\n', '\n', '\tstruct Deposit {\n', '\t\tuint256 amount;\n', '\t\tuint256 withdrawn;\n', '\t\tuint256 start;\n', '\t}\n', '\n', '\tstruct User {\n', '\t\tDeposit[] deposits;\n', '\t\tuint256 checkpoint;\n', '\t\taddress referrer;\n', '\t\tuint256 bonus;\n', '\t\tuint256 totalInvested;\n', '\t\t// invite reward\n', '\t\tuint256 totalBonus;\n', '\t\tuint256 missedBonus;\n', '\t\t//lottery reward\n', '\t\tuint256 lotteryBonus;\n', '\t}\n', '\tstruct LotteryTicket {\n', '\t\taddress user;\n', '\t\tuint256 amount;\n', '\t}\n', '\n', '\tmapping (address => User) internal users;\n', '\tmapping (uint256 => uint256) internal daliyInvestAmount;\n', '\tmapping(address => uint256[]) public userLotteryTicker;\n', '\tLotteryTicket[] public  lotteryPool;\n', '\n', '\tevent Newbie(address user);\n', '\tevent NewDeposit(address indexed user, uint256 amount);\n', '\tevent Withdrawn(address indexed user, uint256 amount);\n', '\tevent MissBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\n', '\tevent FeePayed(address indexed user, uint256 totalAmount);\n', '\tevent WithdrawWinning(address indexed user, uint256 amount);\n', '\n', '\tconstructor(address _investToken, address marketingAddr, address projectAddr, address devAddr, address _obsoleteExitTo) public {\n', '\t\trequire(!isContract(marketingAddr) && !isContract(projectAddr));\n', '\t\tinvestToken = IERC20(_investToken);\n', '\t\tmarketingAddress = marketingAddr;\n', '\t\tprojectAddress = projectAddr;\n', '\t\tdevAddress = devAddr;\n', '\t\tobsoleteExitTo = _obsoleteExitTo;\n', '\n', '\t}\n', '\n', '\tfunction setRewardPool(address _rewardPool) public {\n', '\t\trequire(rewardPool == address(0), "Invalid operation");\n', '\t\trewardPool = _rewardPool;\n', '\t}\n', '\n', '\tfunction updateTodayAmount(uint daysInterval) private {\n', '\n', '\t\tif(daysInterval > presentDaysInterval) {\n', '\t\t\tuint power = daysInterval - presentDaysInterval;\n', '\n', '\t\t\t// presentDayAmount = presentDayAmount.mul(11**power).div(10**power);\n', '\t\t\tfor (uint256 index = 0; index < power; index++) {\n', '\t\t\t\tpresentDayAmount = presentDayAmount.mul(11).div(10);\n', '\t\t\t}\n', '\n', '\t\t\tpresentDaysInterval = daysInterval;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction invest(address referrer , uint256 _amount) public {\n', '\t\trequire(_amount >= INVEST_MIN_AMOUNT, "Less than minimum");\n', '\t\trequire(!isContract(msg.sender), "cannot call from contract");\n', '\t\trequire(!announceWinner, "Game Over"); // game over!\n', '\t\t\n', '\t\tuint daysInterval = getDaysInterval(); // count days passed\n', '\t\tupdateTodayAmount(daysInterval);\n', '\t\n', '\t\tuint todayAmount = presentDayAmount.sub(daliyInvestAmount[daysInterval]);\n', '\t\trequire(todayAmount>0, "Sold out today");\n', '\t\tuint amount = _amount > todayAmount  ? _amount.sub(todayAmount) : _amount;\n', '\n', '\t\tinvestToken.safeTransferFrom(address(msg.sender), address(this), amount);\n', '\t\tinvestToken.safeTransfer( address(marketingAddress), amount.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));\n', '\t\tinvestToken.safeTransfer( address(projectAddress), amount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER));\n', '\t\tinvestToken.safeTransfer( address(devAddress), amount.mul(DEV_FEE).div(PERCENTS_DIVIDER));\n', '\t\t\n', '\t\t// emit FeePayed(msg.sender, amount.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER));\n', '\n', '\t\tUser storage user = users[msg.sender];\n', '\n', '\t\tif (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\n', '\t\t\tuser.referrer = referrer;\n', '\t\t}\n', '\n', '\t\tif (user.referrer != address(0)) {\n', '\n', '\t\t\taddress upline = user.referrer;\n', '\t\t\tfor (uint256 i = 0; i < 10; i++) {\n', '\t\t\t\tif (upline != address(0)) {\n', '\t\t\t\t\tuint256 bonuAmount = amount.mul(REFERRAL_PERCENTS).div(PERCENTS_DIVIDER);\n', '\t\t\t\t\tif (users[upline].totalBonus.add(bonuAmount) <= users[upline].totalInvested) {\n', '\t\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(bonuAmount);\n', '\t\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(bonuAmount);\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t} else {\n', '\t\t\t\t\t\tusers[upline].missedBonus = users[upline].missedBonus.add(bonuAmount);\t\n', '\t\t\t\t\t\temit MissBonus(upline, msg.sender, i, bonuAmount);\n', '\t\t\t\t\t}\n', '\t\t\t\t\tupline = users[upline].referrer;\n', '\t\t\t\t} else break;\n', '\t\t\t}\n', '\n', '\t\t}\n', '\n', '\t\tif (user.deposits.length == 0) {\n', '\t\t\tuser.checkpoint = block.timestamp;\n', '\t\t\ttotalUsers = totalUsers.add(1);\n', '\t\t\t// emit Newbie(msg.sender);\n', '\t\t}\n', '\n', '\t\tuser.deposits.push(Deposit(amount, 0, block.timestamp));\n', '\t\tuser.totalInvested = user.totalInvested.add(amount);\n', '\n', '\t\tupdateRate(amount, true);\n', '\t\taddLotteryTicket(msg.sender, amount);\n', '\n', '\t\tdaliyInvestAmount[daysInterval] = daliyInvestAmount[daysInterval].add(amount);\n', '\n', '\t\ttotalInvested = totalInvested.add(amount);\n', '\t\ttotalDeposits = totalDeposits.add(1);\n', '\t\t\n', '\t\temit NewDeposit(msg.sender, amount);\n', '\t}\n', '\n', '\tfunction addLotteryTicket(address _user, uint256 _amount) private {\n', '\t\tuint256 index = totalDeposits  % 100;//100  totalDeposits from 0\n', '\t\tLotteryTicket[] storage  lotPool = lotteryPool;\n', '\n', '\t\tif (lotPool.length == 100) { //reuse 100\n', '\t\t\ttotalLottery = totalLottery.add(_amount).sub(lotPool[index].amount);\n', '\t\t\tlotPool[index].amount = _amount;\n', '\t\t\tlotPool[index].user   = _user;\n', '\n', '\t\t} else {\n', '\t\t\tlotPool.push(LotteryTicket({\n', '\t\t\t\tuser : _user,\n', '\t\t\t\tamount : _amount\n', '\t\t\t}));\n', '\t\t\ttotalLottery = totalLottery.add(_amount);\n', '\t\t}\n', '\t\tuserLotteryTicker[_user].push(index);\n', '\n', '\t\ttotalLotteryReward = totalLotteryReward.add( _amount.div(20) );\n', '\t\t//transafer Reward to Pool\n', '\t\tinvestToken.safeTransfer( rewardPool, _amount.div(20));\n', '\t}\n', '\n', '\tfunction withdrawWinning() public {\t\n', '\t\trequire(announceWinner, "Not allowed");\n', '\t\t\n', '\t\tuint256 winning = winningAmount(msg.sender);\n', '\t\trequire(winning > 0, "No winnings");\n', '\n', '\t\tUser storage user = users[msg.sender];\n', '\t\tuser.lotteryBonus = user.lotteryBonus.add(winning);\n', '\n', '\t\t// investToken.safeTransfer( msg.sender, winning);\n', '\t\tinvestToken.safeTransferFrom( rewardPool , msg.sender, winning);\n', '\n', '\t\temit WithdrawWinning(msg.sender, winning);\n', '\t}\n', '\n', '\tfunction winningAmount(address _user) public view returns (uint256) {\n', '\t\tuint256[] memory useTickers = userLotteryTicker[_user];\n', '\n', '\t\tif (useTickers.length == 0 ) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint userAmount;\n', '\t\tLotteryTicket[] memory lotPool = lotteryPool;\n', '\t\tfor (uint256 i = useTickers.length - 1 ; i < useTickers.length; i--) {\n', '\n', '\t\t\tif(lotPool[useTickers[i]].user == _user) {\n', '\t\t\t\tuserAmount = userAmount.add(lotPool[useTickers[i]].amount);\n', '\t\t\t}else break;\n', '\t\t}\n', '\n', '\t\treturn userAmount.mul(totalLotteryReward).div(totalLottery).sub(users[msg.sender].lotteryBonus);\n', '\n', '\t}\n', '\n', '\tfunction withdraw() public {\n', '\t\trequire(!announceWinner, "Game Over"); // game over!\n', '\t\tUser storage user = users[msg.sender];\n', '\n', '\t\tuint256 userPercentRate = presentPercent;\n', '\n', '\t\tuint256 totalAmount;\n', '\t\tuint256 dividends;\n', '\n', '\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\n', '\n', '\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(18).div(10)) {\n', '\n', '\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\n', '\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\n', '\t\t\t\t\t\t.div(TIME_STEP);\n', '\n', '\t\t\t\t} else {\n', '\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\n', '\t\t\t\t\t\t.div(TIME_STEP);\n', '\n', '\t\t\t\t}\n', '\n', '\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(18).div(10)) {\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(18).div(10)).sub(user.deposits[i].withdrawn);\n', '\t\t\t\t}\n', '\n', '\t\t\t\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\n', '\t\t\t\ttotalAmount = totalAmount.add(dividends);\n', '\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\n', '\t\tif (referralBonus > 0) {\n', '\t\t\ttotalAmount = totalAmount.add(referralBonus);\n', '\t\t\tuser.bonus = 0;\n', '\t\t}\n', '\n', '\t\trequire(totalAmount > 0, "User has no dividends");\n', '\t\t// balance = ERC20.balanceOf().sub(totalLotteryReward);\n', '\t\tuint256 contractBalance = investToken.balanceOf(address(this));\n', '\t\tif (contractBalance <= totalAmount) {\n', '\t\t\ttotalAmount = contractBalance;\n', '\t\t\t// Announce Winner, Game Over\n', '\t\t\tannounceWinner = true;\n', '\t\t\tannounceAt = block.timestamp;\n', '\t\t}\n', '\n', '\t\tuser.checkpoint = block.timestamp;\n', '\n', '\t\tinvestToken.safeTransfer( msg.sender, totalAmount);\n', '\n', '\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\n', '\n', '\t\tupdateRate(totalAmount, false);\n', '\t\temit Withdrawn(msg.sender, totalAmount);\n', '\n', '\t}\n', '\n', '\tfunction getDailyAmount() public view returns (uint256) {\n', '\t\t\n', '\t\tuint256 timePower = getDaysInterval().sub(presentDaysInterval);\n', '\t\tuint presentAmount = presentDayAmount;\n', '\t\tfor (uint256 index = 0; index < timePower; index++) { // 10% increase daily\n', '\t\t\t\tpresentAmount = presentAmount.mul(11).div(10);\n', '\t\t}\n', '\t\treturn presentAmount; \n', '\t}\n', '\n', '\tfunction getDaysInterval() public view returns (uint256) {\n', '\t\trequire(now >= START_POINT, "Not yet started");\n', '\t\treturn  now.div(TIME_STEP).sub(START_POINT.div(TIME_STEP));\n', '\t}\n', '\tfunction getContractBalance() public view returns (uint256) {\n', '\t\treturn investToken.balanceOf(address(this));\n', '\t}\n', '\tfunction updateRate(uint256 _amount, bool _invest) private {\n', '\t\tif (_invest) {\n', '\t\t\tpresentPercent = presentPercent.add( _amount.mul(PERCENT_INVEST) );\n', '\t\t\tif ( presentPercent > MAX_PERCENT ) {\n', '\t\t\t\tpresentPercent = MAX_PERCENT;\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\tuint decrease = _amount.mul(PERCENT_WITHDRAW);\n', '\t\t\tif ( presentPercent < BASE_PERCENT.add(decrease) ) {\n', '\t\t\t\tpresentPercent = BASE_PERCENT;\n', '\t\t\t} else {\n', '\t\t\t\tpresentPercent = presentPercent.sub(decrease);\n', '\t\t\t}\n', '\t\t}\n', '\t\t\n', '\t}\n', '\n', '\tfunction getUserDividends(address userAddress) public view returns (uint256) {\n', '\t\tUser storage user = users[userAddress];\n', '\n', '\t\tuint256 userPercentRate = presentPercent;\n', '\n', '\t\tuint256 totalDividends;\n', '\t\tuint256 dividends;\n', '\n', '\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\n', '\n', '\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(18).div(10)) {\n', '\n', '\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\n', '\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\n', '\t\t\t\t\t\t.div(TIME_STEP);\n', '\n', '\t\t\t\t} else {\n', '\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\n', '\t\t\t\t\t\t.div(TIME_STEP);\n', '\n', '\t\t\t\t}\n', '\n', '\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(18).div(10)) {\n', '\t\t\t\t\tdividends = (user.deposits[i].amount.mul(18).div(10)).sub(user.deposits[i].withdrawn);\n', '\t\t\t\t}\n', '\n', '\t\t\t\ttotalDividends = totalDividends.add(dividends);\n', '\n', '\t\t\t\t/// no update of withdrawn because that is view function\n', '\n', '\t\t\t}\n', '\n', '\t\t}\n', '\n', '\t\treturn totalDividends;\n', '\t}\n', '\n', '\n', '\tfunction obsoleteExit() public {\n', '\t\t\n', '\t\trequire( announceWinner, "Not yet announce winner" );\n', '\t\t\n', '\t\tuint256 step = 3 days;\n', '\t\trequire( now > announceAt.add(step), "Not yet ripe" );\n', '\n', '\t\tuint256 amount = investToken.balanceOf(rewardPool);\n', '\t\tinvestToken.safeTransferFrom(rewardPool, obsoleteExitTo, amount);\n', '\t}\n', '\n', '\tfunction getStartPoint() public pure returns(uint256) {\n', '\t\treturn START_POINT;\n', '\t} \n', '\tfunction getUserPercent() public view returns(uint256) {\n', '\t\treturn presentPercent.div(1e9);\n', '\t}\n', '\tfunction getBasePercent() public pure returns(uint256) {\n', '\t\treturn BASE_PERCENT.div(1e9);\n', '\t}\n', '\tfunction getContractPercent() public view returns(uint256) {\n', '\t\treturn presentPercent.sub(BASE_PERCENT).div(1e9);\n', '\t}\n', '\n', '\tfunction getTodayAmount() public view returns(uint256) {\n', '\t\treturn getDailyAmount().sub(daliyInvestAmount[getDaysInterval()]);\n', '\t}\n', '\n', '\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\n', '\t\treturn users[userAddress].checkpoint;\n', '\t}\n', '\n', '\tfunction getUserMissedBonus(address userAddress) public view returns(uint256) {\n', '\t\treturn users[userAddress].missedBonus;\n', '\t}\n', '\n', '\tfunction getUserTotalBonus(address userAddress) public view returns(uint256) {\n', '\t\treturn users[userAddress].totalBonus;\n', '\t}\n', '\n', '\tfunction getUserReferrer(address userAddress) public view returns(address) {\n', '\t\treturn users[userAddress].referrer;\n', '\t}\n', '\n', '\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\n', '\t\treturn users[userAddress].bonus;\n', '\t}\n', '\n', '\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\n', '\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\n', '\t}\n', '\n', '\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {\n', '\t    User storage user = users[userAddress];\n', '\n', '\t\treturn (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\n', '\t}\n', '\n', '\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\n', '\t\treturn users[userAddress].deposits.length;\n', '\t}\n', '\n', '\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\n', '\t    User storage user = users[userAddress];\n', '\n', '\t\tuint256 amount;\n', '\n', '\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\n', '\t\t\tamount = amount.add(user.deposits[i].amount);\n', '\t\t}\n', '\n', '\t\treturn amount;\n', '\t}\n', '\n', '\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\n', '\t    User storage user = users[userAddress];\n', '\n', '\t\tuint256 amount;\n', '\n', '\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\n', '\t\t\tamount = amount.add(user.deposits[i].withdrawn);\n', '\t\t}\n', '\n', '\t\treturn amount;\n', '\t}\n', '\n', '\tfunction isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}']