['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-22\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// ---------------------FSI - an indepedent fork based on YFI technology. ----------------\n', '// -----------------------------Official website : fansi.finance----------------\n', '// ----------------------------------------------------------------------------\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function decimals() external view returns (uint8 digits);\n', '\n', '    function totalSupply() external view returns (uint256 supply);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe Math Library \n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); \n', '        c = a - b; \n', '    } \n', '    function safeMul(uint a, uint b) public pure returns (uint c) { \n', '        c = a * b; \n', '        require(a == 0 || c / a == b); \n', '    } \n', '    function safeDiv(uint a, uint b) public pure returns (uint c) { \n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract Sale {\n', '    uint256 public rate;\n', '    address public admin;\n', '    bool public saleStatus;\n', '    IERC20 token;\n', '    \n', '    event TkSale(\n', '        uint256 indexed ethWeiValue,\n', '        uint256 indexed rate\n', '    );\n', '\n', '    constructor(IERC20 _token, uint256 _rate) public {\n', '        token = _token;\n', '        rate = _rate;\n', '        saleStatus = true;\n', '        admin = msg.sender;\n', '    }\n', '    \n', '    modifier onlyAdmin() {\n', '        require(\n', '            msg.sender == admin,\n', '            "Only admin can do this."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier saleEnable() {\n', '        require (\n', '            saleStatus,\n', '            "TK Sale is off"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    // @dev Fallback payable function\n', '    function() external payable {}\n', '    \n', '    function buyTk(uint256 amount) \n', '        external\n', '        payable \n', '        returns (uint256)\n', '    {\n', '        require(msg.value == amount);\n', '        uint256 tokenAmount = amount * rate;\n', "        require(tokenAmount < token.balanceOf(address(this)), 'out of order');\n", '        \n', '        token.transfer(msg.sender, tokenAmount);\n', '        \n', '        emit TkSale({\n', '            ethWeiValue: amount,\n', '            rate: rate\n', '        });\n', '        \n', '        return tokenAmount;\n', '    }\n', '    \n', '    function setRate(uint256 _rate)\n', '    external\n', '    onlyAdmin\n', '    {\n', '        rate = _rate;\n', '    }\n', '    \n', '    function setSaleStatus(bool _status)\n', '    external\n', '    onlyAdmin\n', '    {\n', '        saleStatus = _status;\n', '    }\n', '    \n', '    function withdrawEther(uint amount, address payable sendTo) \n', '    external \n', '    onlyAdmin \n', '    {\n', '        sendTo.transfer(amount);\n', '    }\n', '    \n', '    function withdrawToken(uint amount, address to)\n', '    external\n', '    onlyAdmin\n', '    {\n', '        token.transfer(to, amount);\n', '    }\n', '    \n', '    function changeAdmin(address _admin)\n', '    external\n', '    onlyAdmin\n', '    {\n', '        admin = _admin;\n', '    }\n', '}']