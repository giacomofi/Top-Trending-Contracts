['// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/MasterGame.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import "@openzeppelin/contracts/utils/EnumerableSet.sol";\n', '\n', '/**\n', ' * @dev Ticket contract interface\n', ' */\n', 'interface ITicketsToken is IERC20 {\n', '    function burnFromUsdt(address account, uint256 usdtAmount) external;\n', '\n', '    function vendingAndBurn(address account, uint256 amount) external;\n', '\n', '    function price() external returns (uint256);\n', '\n', '    function totalVending() external returns (uint256);\n', '}\n', '\n', '/**\n', ' * @dev Master contract\n', ' */\n', 'contract MasterGame is Ownable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    IERC20 usdt;\n', '    uint256 constant usdter = 1e6;\n', '\n', '    // Creation time\n', '    uint256 public createdAt;\n', '    // Total revenue\n', '    uint256 public totalRevenue;\n', '\n', '    // Ticket contract\n', '    ITicketsToken ticket;\n', '\n', '    // Static income cycle: 1 day\n', '    uint256 constant STATIC_CYCLE = 1 days;\n', '    // Daily prize pool cycle: 1 day\n', '    uint256 constant DAY_POOL_CYCLE = 1 days;\n', '    // Weekly prize pool cycle: 7 days\n', '    uint256 constant WEEK_POOL_CYCLE = 7 days;\n', '    // Upgrade node discount: 100 days\n', '    uint256 constant NODE_DISCOUNT_TIME = 100 days;\n', '\n', '    // Static rate of return, parts per thousand\n', '    uint256 staticRate = 5;\n', '    // Dynamic rate of return, parts per thousand\n', '    uint256[12] dynamicRates = [\n', '        100,\n', '        80,\n', '        60,\n', '        50,\n', '        50,\n', '        60,\n', '        70,\n', '        50,\n', '        50,\n', '        50,\n', '        60,\n', '        80\n', '    ];\n', '    // Technology founding team\n', '    uint256 public founder;\n', '    // Market value management fee\n', '    uint256 public operation;\n', '    // Insurance pool\n', '    uint256 public insurance;\n', '    // Perpetual capital pool\n', '    uint256 public sustainable;\n', '    // Dex Market making\n', '    uint256 public dex;\n', '    // Account ID\n', '    uint256 public id;\n', '    // Number of people activating Pa Point\n', '    uint8 public nodeBurnNumber;\n', '    // Account data\n', '    mapping(address => Account) public accounts;\n', '    mapping(address => AccountCount) public stats;\n', '    // Node burn data\n', '    mapping(address => AccountNodeBurn) public burns;\n', '    // Team data\n', '    mapping(address => AccountPerformance) public performances;\n', '    mapping(address => address[]) public teams;\n', '    // Node data\n', '    // 1 Light node; 2 Intermediate node; 3 Super node; 4 Genesis node\n', '    mapping(uint8 => address[]) public nodes;\n', '\n', '    // Weekly prize pool\n', '    uint64 public weekPoolId;\n', '    mapping(uint64 => Pool) public weekPool;\n', '\n', '    // Daily prize pool\n', '    uint64 public dayPoolId;\n', '    mapping(uint64 => Pool) public dayPool;\n', '\n', '    // Address with a deposit of 15,000 or more\n', '    EnumerableSet.AddressSet private richman;\n', '\n', '    // Account\n', '    struct Account {\n', '        uint256 id;\n', '        address referrer; // Direct push\n', '        bool reinvest; // Whether to reinvest\n', '        uint8 nodeLevel; // Node level\n', '        uint256 joinTime; // Join time: This value needs to be updated when joining again\n', '        uint256 lastTakeTime; // Last time the static income was received\n', '        uint256 deposit; // Deposited quantity: 0 means "out"\n', '        uint256 nodeIncome; // Node revenue balance\n', '        uint256 dayPoolIncome; // Daily bonus pool income balance\n', '        uint256 weekPoolIncome; // Weekly bonus pool income balance\n', '        uint256 dynamicIncome; // Dynamic income balance\n', '        uint256 income; // Total revenue\n', '        uint256 maxIncome; // Exit condition\n', '        uint256 reward; // Additional other rewards\n', '    }\n', '\n', '    // Account statistics\n', '    struct AccountCount {\n', '        uint256 income; // Total revenue\n', '        uint256 investment; // Total investment\n', '    }\n', '\n', '    // Performance\n', '    struct AccountPerformance {\n', '        uint256 performance; // Direct performance\n', '        uint256 wholeLine; // Performance of all layers below\n', '    }\n', '\n', '    // Node burn\n', '    struct AccountNodeBurn {\n', '        bool active; // Whether to activate Node burn\n', '        uint256 income; // Node burn income\n', '    }\n', '\n', '    // Prize pool\n', '    struct Pool {\n', '        uint256 amount; // Prize pool amount\n', '        uint256 date; // Creation time: Use this field to determine the draw time\n', '        mapping(uint8 => address) ranks; // Ranking: up to 256\n', '        mapping(address => uint256) values; // Quantity/Performance\n', '    }\n', '\n', '    /**\n', '     * @dev Determine whether the address is an already added address\n', '     */\n', '    modifier onlyJoined(address addr) {\n', '        require(accounts[addr].id > 0, "ANR");\n', '        _;\n', '    }\n', '\n', '    constructor(IERC20 _usdt) public {\n', '        usdt = _usdt;\n', '\n', '        createdAt = now;\n', '\n', '        // Genius\n', '        Account storage user = accounts[msg.sender];\n', '        user.id = ++id;\n', '        user.referrer = address(0);\n', '        user.joinTime = now;\n', '    }\n', '\n', '    /**\n', '     * @dev Join or reinvest the game\n', '     */\n', '    function join(address referrer, uint256 _amount)\n', '        public\n', '        onlyJoined(referrer)\n', '    {\n', '        require(referrer != msg.sender, "NS");\n', '        require(_amount >= usdter.mul(100), "MIN");\n', '\n', '        // Receive USDT\n', '        usdt.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        // Burn 12%\n', '        _handleJoinBurn(msg.sender, _amount);\n', '\n', '        Account storage user = accounts[msg.sender];\n', '        // Create new account\n', '        if (user.id == 0) {\n', '            user.id = ++id;\n', '            user.referrer = referrer;\n', '            user.joinTime = now;\n', '            // Direct team\n', '            teams[referrer].push(msg.sender);\n', '        }\n', '\n', '        // Reinvest to join\n', '        if (user.deposit != 0) {\n', '            require(!user.reinvest, "Reinvest");\n', '\n', '            // Can reinvest after paying back\n', '            uint256 income = calculateStaticIncome(msg.sender)\n', '                .add(user.dynamicIncome)\n', '                .add(user.nodeIncome)\n', '                .add(burns[msg.sender].income)\n', '                .add(user.income);\n', '            require(income >= user.deposit, "Not Coast");\n', '\n', '            // Half or all reinvestment\n', '            require(\n', '                _amount == user.deposit || _amount == user.deposit.div(2),\n', '                "FOH"\n', '            );\n', '\n', '            if (_amount == user.deposit) {\n', '                // All reinvestment\n', '                user.maxIncome = user.maxIncome.add(\n', '                    _calculateFullOutAmount(_amount)\n', '                );\n', '            } else {\n', '                // Half return\n', '                user.maxIncome = user.maxIncome.add(\n', '                    _calculateOutAmount(_amount)\n', '                );\n', '            }\n', '            user.reinvest = true;\n', '            user.deposit = user.deposit.add(_amount);\n', '        } else {\n', '            // Join out\n', '            user.deposit = _amount;\n', '            user.lastTakeTime = now;\n', '            user.maxIncome = _calculateOutAmount(_amount);\n', '            // Cumulative income cleared\n', '            user.nodeIncome = 0;\n', '            user.dayPoolIncome = 0;\n', '            user.weekPoolIncome = 0;\n', '            user.dynamicIncome = 0;\n', '            burns[msg.sender].income = 0;\n', '        }\n', '\n', '        // Processing performance\n', '        performances[msg.sender].wholeLine = performances[msg.sender]\n', '            .wholeLine\n', '            .add(_amount);\n', '        _handlePerformance(user.referrer, _amount);\n', '        // Processing node rewards\n', '        _handleNodeReward(_amount);\n', '        // Handling Node burn Reward\n', '        _handleNodeBurnReward(msg.sender, _amount);\n', '        // Processing node level\n', '        _handleNodeLevel(user.referrer);\n', '        // Handling prizes and draws\n', '        _handlePool(user.referrer, _amount);\n', '\n', '        // Technology founding team: 4%\n', '        founder = founder.add(_amount.mul(4).div(100));\n', '        // Expansion operating expenses: 4%\n', '        operation = operation.add(_amount.mul(4).div(100));\n', '        // Dex market making capital 2%\n', '        dex = dex.add(_amount.mul(2).div(100));\n', '\n', '        // Insurance pool: 1.5%\n', '        insurance = insurance.add(_amount.mul(15).div(1000));\n', '        // Perpetual pool: 3.5%\n', '        sustainable = sustainable.add(_amount.mul(35).div(1000));\n', '\n', '        // Record the address of deposit 15000\n', '        if (user.deposit >= usdter.mul(15000)) {\n', '            EnumerableSet.add(richman, msg.sender);\n', '        }\n', '\n', '        // Statistics total investment\n', '        stats[msg.sender].investment = stats[msg.sender].investment.add(\n', '            _amount\n', '        );\n', '        // Total revenue\n', '        totalRevenue = totalRevenue.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn tickets when you join\n', '     */\n', '    function _handleJoinBurn(address addr, uint256 _amount) internal {\n', '        uint256 burnUsdt = _amount.mul(12).div(100);\n', '        uint256 burnAmount = burnUsdt.mul(ticket.price()).div(usdter);\n', '        uint256 bal = ticket.balanceOf(addr);\n', '\n', '        if (bal >= burnAmount) {\n', '            ticket.burnFromUsdt(addr, burnUsdt);\n', '        } else {\n', '            // USDT can be used to deduct tickets after the resonance of 4.5 million\n', '            require(\n', '                ticket.totalVending() >= uint256(1e18).mul(4500000),\n', '                "4.5M"\n', '            );\n', '\n', '            // Use USDT to deduct tickets\n', '            usdt.safeTransferFrom(addr, address(this), burnUsdt);\n', '            ticket.vendingAndBurn(addr, burnAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Receive revenue and calculate outgoing data\n', '     */\n', '    function take() public onlyJoined(msg.sender) {\n', '        Account storage user = accounts[msg.sender];\n', '\n', '        require(user.deposit > 0, "OUT");\n', '\n', '        uint256 staticIncome = calculateStaticIncome(msg.sender);\n', '        if (staticIncome > 0) {\n', '            user.lastTakeTime =\n', '                now -\n', '                ((now - user.lastTakeTime) % STATIC_CYCLE);\n', '        }\n', '\n', '        uint256 paid = staticIncome\n', '            .add(user.dynamicIncome)\n', '            .add(user.nodeIncome)\n', '            .add(burns[msg.sender].income);\n', '\n', '        // Cleared\n', '        user.nodeIncome = 0;\n', '        user.dynamicIncome = 0;\n', '        burns[msg.sender].income = 0;\n', '\n', '        // Cumulative income\n', '        user.income = user.income.add(paid);\n', '\n', '        // Meet the exit conditions, or no re-investment and reach 1.3 times\n', '        uint256 times13 = user.deposit.mul(13).div(10);\n', '        bool special = !user.reinvest && user.income >= times13;\n', '        // Out of the game\n', '        if (user.income >= user.maxIncome || special) {\n', '            // Deduct excess income\n', '            if (special) {\n', '                paid = times13.sub(user.income.sub(paid));\n', '            } else {\n', '                paid = paid.sub(user.income.sub(user.maxIncome));\n', '            }\n', '            // Data clear\n', '            user.deposit = 0;\n', '            user.income = 0;\n', '            user.maxIncome = 0;\n', '            user.reinvest = false;\n', '        }\n', '\n', '        // Static income returns to superior dynamic income\n', '        // When zooming in half of the quota (including re-investment), dynamic acceleration is not provided to the upper 12 layers\n', '        if (staticIncome > 0 && user.income < user.maxIncome.div(2)) {\n', '            _handleDynamicIncome(msg.sender, staticIncome);\n', '        }\n', '\n', '        // Total income statistics\n', '        stats[msg.sender].income = stats[msg.sender].income.add(paid);\n', '\n', '        // USDT transfer\n', '        _safeUsdtTransfer(msg.sender, paid);\n', '\n', '        // Trigger\n', '        _openWeekPool();\n', '        _openDayPool();\n', '    }\n', '\n', '    /**\n', '     * @dev Receive insurance pool rewards\n', '     */\n', '    function takeReward() public {\n', '        uint256 paid = accounts[msg.sender].reward;\n', '        accounts[msg.sender].reward = 0;\n', '        usdt.transfer(msg.sender, paid);\n', '\n', '        // Total income statistics\n', '        stats[msg.sender].income = stats[msg.sender].income.add(paid);\n', '    }\n', '\n', '    /**\n', '     * @dev Receive prize pool income\n', '     */\n', '    function takePoolIncome() public {\n', '        Account storage user = accounts[msg.sender];\n', '\n', '        uint256 paid = user.dayPoolIncome.add(user.weekPoolIncome);\n', '        user.dayPoolIncome = 0;\n', '        user.weekPoolIncome = 0;\n', '\n', '        // Total income statistics\n', '        stats[msg.sender].income = stats[msg.sender].income.add(paid);\n', '\n', '        _safeUsdtTransfer(msg.sender, paid);\n', '    }\n', '\n', '    /**\n', '     * @dev To activate Node burn, you need to destroy some tickets worth a specific USDT\n', '     */\n', '    function activateNodeBurn() public onlyJoined(msg.sender) {\n', '        require(!burns[msg.sender].active, "ACT");\n', '        require(nodeBurnNumber < 500, "LIMIT");\n', '\n', '        uint256 burn = activateNodeBurnAmount();\n', '\n', '        ticket.burnFromUsdt(msg.sender, burn);\n', '        nodeBurnNumber++;\n', '\n', '        burns[msg.sender].active = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the amount of USDT that activates the burned ticket for Node burn\n', '     */\n', '    function activateNodeBurnAmount() public view returns (uint256) {\n', '        uint8 num = nodeBurnNumber + 1;\n', '\n', '        if (num >= 400) {\n', '            return usdter.mul(7000);\n', '        } else if (num >= 300) {\n', '            return usdter.mul(6000);\n', '        } else if (num >= 200) {\n', '            return usdter.mul(5000);\n', '        } else if (num >= 100) {\n', '            return usdter.mul(4000);\n', '        } else {\n', '            return usdter.mul(3000);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Handling Node burn Reward\n', '     */\n', '    function _handleNodeBurnReward(address addr, uint256 _amount) internal {\n', '        address referrer = accounts[addr].referrer;\n', '        bool pioneer = false;\n', '\n', '        while (referrer != address(0)) {\n', '            AccountNodeBurn storage ap = burns[referrer];\n', '            if (ap.active) {\n', '                if (accounts[referrer].nodeLevel > 0) {\n', '                    uint256 paid;\n', '                    if (pioneer) {\n', '                        paid = _amount.mul(4).div(100); // 4%\n', '                    } else {\n', '                        paid = _amount.mul(7).div(100); // 7%\n', '                    }\n', '                    ap.income = ap.income.add(paid);\n', '                    break;\n', '                } else if (!pioneer) {\n', '                    ap.income = ap.income.add(_amount.mul(3).div(100)); // 3%\n', '                    pioneer = true;\n', '                }\n', '            }\n', '            referrer = accounts[referrer].referrer;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Dealing with dynamic revenue\n', '     */\n', '    function _handleDynamicIncome(address addr, uint256 _amount) internal {\n', '        address account = accounts[addr].referrer;\n', '        // Up to 12 layers\n', '        for (uint8 i = 1; i <= 12; i++) {\n', '            if (account == address(0)) {\n', '                break;\n', '            }\n', '\n', '            Account storage user = accounts[account];\n', '            if (\n', '                user.deposit > 0 &&\n', '                _canDynamicIncomeAble(\n', '                    performances[account].performance,\n', '                    user.deposit,\n', '                    i\n', '                )\n', '            ) {\n', '                uint256 _income = _amount.mul(dynamicRates[i - 1]).div(1000);\n', '                user.dynamicIncome = user.dynamicIncome.add(_income);\n', '            }\n', '\n', '            account = user.referrer;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Judge whether you can get dynamic income\n', '     */\n', '    function _canDynamicIncomeAble(\n', '        uint256 performance,\n', '        uint256 deposit,\n', '        uint8 floor\n', '    ) internal pure returns (bool) {\n', '        // Deposit more than 1500\n', '        if (deposit >= usdter.mul(1500)) {\n', '            if (performance >= usdter.mul(10000)) {\n', '                return floor <= 12;\n', '            }\n', '            if (performance >= usdter.mul(6000)) {\n', '                return floor <= 8;\n', '            }\n', '            if (performance >= usdter.mul(3000)) {\n', '                return floor <= 5;\n', '            }\n', '            if (performance >= usdter.mul(1500)) {\n', '                return floor <= 3;\n', '            }\n', '        } else if (deposit >= usdter.mul(300)) {\n', '            if (performance >= usdter.mul(1500)) {\n', '                return floor <= 3;\n', '            }\n', '        }\n', '        return floor <= 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Process prize pool data and draw\n', '     */\n', '    function _handlePool(address referrer, uint256 _amount) internal {\n', '        _openWeekPool();\n', '        _openDayPool();\n', '\n', '        uint256 prize = _amount.mul(3).div(100); // 3%\n', '\n', '        uint256 dayPrize = prize.mul(60).div(100); // 60%\n', '        uint256 weekPrize = prize.sub(dayPrize); // 40%\n', '\n', '        _handleWeekPool(referrer, _amount, weekPrize);\n', '        _handleDayPool(referrer, _amount, dayPrize);\n', '    }\n', '\n', '    /**\n', '     * @dev Manually trigger the draw\n', '     */\n', '    function triggerOpenPool() public {\n', '        _openWeekPool();\n', '        _openDayPool();\n', '    }\n', '\n', '    /**\n', '     * @dev Processing weekly prize pool\n', '     */\n', '    function _handleWeekPool(\n', '        address referrer,\n', '        uint256 _amount,\n', '        uint256 _prize\n', '    ) internal {\n', '        Pool storage week = weekPool[weekPoolId];\n', '\n', '        week.amount = week.amount.add(_prize);\n', '        week.values[referrer] = week.values[referrer].add(_amount);\n', '        _PoolSort(week, referrer, 3);\n', '    }\n', '\n', '    /**\n', '     * @dev Handling the daily prize pool\n', '     */\n', '    function _handleDayPool(\n', '        address referrer,\n', '        uint256 _amount,\n', '        uint256 _prize\n', '    ) internal {\n', '        Pool storage day = dayPool[dayPoolId];\n', '\n', '        day.amount = day.amount.add(_prize);\n', '        day.values[referrer] = day.values[referrer].add(_amount);\n', '        _PoolSort(day, referrer, 7);\n', '    }\n', '\n', '    /**\n', '     * @dev Prize pool sorting\n', '     */\n', '    function _PoolSort(\n', '        Pool storage pool,\n', '        address addr,\n', '        uint8 number\n', '    ) internal {\n', '        for (uint8 i = 0; i < number; i++) {\n', '            address key = pool.ranks[i];\n', '            if (key == addr) {\n', '                break;\n', '            }\n', '            if (pool.values[addr] > pool.values[key]) {\n', '                for (uint8 j = number; j > i; j--) {\n', '                    pool.ranks[j] = pool.ranks[j - 1];\n', '                }\n', '                pool.ranks[i] = addr;\n', '\n', '                for (uint8 k = i + 1; k < number; k++) {\n', '                    if (pool.ranks[k] == addr) {\n', '                        for (uint8 l = k; l < number; l++) {\n', '                            pool.ranks[l] = pool.ranks[l + 1];\n', '                        }\n', '                        break;\n', '                    }\n', '                }\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Weekly prize pool draw\n', '     */\n', '    function _openWeekPool() internal {\n', '        Pool storage week = weekPool[weekPoolId];\n', '        // Determine whether the weekly prize pool can draw prizes\n', '        if (now >= week.date + WEEK_POOL_CYCLE) {\n', '            weekPoolId++;\n', '            weekPool[weekPoolId].date = now;\n', '\n', '            // 15% for the draw\n', '            uint256 prize = week.amount.mul(15).div(100);\n', '            // 85% naturally rolled into the next round\n', '            weekPool[weekPoolId].amount = week.amount.sub(prize);\n', '\n', '            if (prize > 0) {\n', '                // No prizes left\n', '                uint256 surplus = prize;\n', '\n', '                // Proportion 70%、20%、10%\n', '                uint256[3] memory rates = [\n', '                    uint256(70),\n', '                    uint256(20),\n', '                    uint256(10)\n', '                ];\n', '                // Top 3\n', '                for (uint8 i = 0; i < 3; i++) {\n', '                    address addr = week.ranks[i];\n', '                    uint256 reward = prize.mul(rates[i]).div(100);\n', '\n', '                    // Reward for rankings, and rollover to the next round without rankings\n', '                    if (addr != address(0)) {\n', '                        accounts[addr].weekPoolIncome = accounts[addr]\n', '                            .weekPoolIncome\n', '                            .add(reward);\n', '                        surplus = surplus.sub(reward);\n', '                    }\n', '                }\n', '\n', '                // Add the rest to the next round\n', '                weekPool[weekPoolId].amount = weekPool[weekPoolId].amount.add(\n', '                    surplus\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Daily prize pool draw\n', '     */\n', '    function _openDayPool() internal {\n', '        Pool storage day = dayPool[dayPoolId];\n', '        // Determine whether the daily prize pool can be drawn\n', '        if (now >= day.date + DAY_POOL_CYCLE) {\n', '            dayPoolId++;\n', '            dayPool[dayPoolId].date = now;\n', '\n', '            // 15% for the draw\n', '            uint256 prize = day.amount.mul(15).div(100);\n', '            // 85% naturally rolled into the next round\n', '            dayPool[dayPoolId].amount = day.amount.sub(prize);\n', '\n', '            if (prize > 0) {\n', '                // No prizes left\n', '                uint256 surplus = prize;\n', '\n', '                // The first and second place ratios are 70%, 20%; 10% is evenly distributed to the remaining 5\n', '                uint256[2] memory rates = [uint256(70), uint256(20)];\n', '\n', '                // Top 2\n', '                for (uint8 i = 0; i < 2; i++) {\n', '                    address addr = day.ranks[i];\n', '                    uint256 reward = prize.mul(rates[i]).div(100);\n', '\n', '                    // Reward for rankings, and rollover to the next round without rankings\n', '                    if (addr != address(0)) {\n', '                        accounts[addr].dayPoolIncome = accounts[addr]\n', '                            .dayPoolIncome\n', '                            .add(reward);\n', '                        surplus = surplus.sub(reward);\n', '                    }\n', '                }\n', '\n', '                // 10% is evenly divided among the remaining 5\n', '                uint256 avg = prize.div(50);\n', '                for (uint8 i = 2; i <= 6; i++) {\n', '                    address addr = day.ranks[i];\n', '\n', '                    if (addr != address(0)) {\n', '                        accounts[addr].dayPoolIncome = accounts[addr]\n', '                            .dayPoolIncome\n', '                            .add(avg);\n', '                        surplus = surplus.sub(avg);\n', '                    }\n', '                }\n', '\n', '                // Add the rest to the next round\n', '                dayPool[dayPoolId].amount = dayPool[dayPoolId].amount.add(\n', '                    surplus\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Processing account performance\n', '     */\n', '    function _handlePerformance(address referrer, uint256 _amount) internal {\n', '        // Direct performance\n', '        performances[referrer].performance = performances[referrer]\n', '            .performance\n', '            .add(_amount);\n', '        // Full line performance\n', '        address addr = referrer;\n', '        while (addr != address(0)) {\n', '            performances[addr].wholeLine = performances[addr].wholeLine.add(\n', '                _amount\n', '            );\n', '            addr = accounts[addr].referrer;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Processing node level\n', '     */\n', '    function _handleNodeLevel(address referrer) internal {\n', '        address addr = referrer;\n', '\n', '        // Condition\n', '        uint256[4] memory c1s = [\n', '            usdter.mul(100000),\n', '            usdter.mul(300000),\n', '            usdter.mul(600000),\n', '            usdter.mul(1200000)\n', '        ];\n', '        uint256[4] memory c2s = [\n', '            usdter.mul(250000),\n', '            usdter.mul(600000),\n', '            usdter.mul(1200000),\n', '            usdter.mul(2250000)\n', '        ];\n', '        uint256[4] memory s1s = [\n', '            usdter.mul(20000),\n', '            usdter.mul(60000),\n', '            usdter.mul(90000),\n', '            usdter.mul(160000)\n', '        ];\n', '        uint256[4] memory s2s = [\n', '            usdter.mul(30000),\n', '            usdter.mul(90000),\n', '            usdter.mul(135000),\n', '            usdter.mul(240000)\n', '        ];\n', '\n', '        while (addr != address(0)) {\n', '            uint8 level = accounts[addr].nodeLevel;\n', '            if (level < 4) {\n', '                uint256 c1 = c1s[level];\n', '                uint256 c2 = c2s[level];\n', '\n', '                if (now - accounts[addr].joinTime <= NODE_DISCOUNT_TIME) {\n', '                    c1 = c1.sub(s1s[level]);\n', '                    c2 = c2.sub(s2s[level]);\n', '                }\n', '\n', '                if (_handleNodeLevelUpgrade(addr, c1, c2)) {\n', '                    accounts[addr].nodeLevel = level + 1;\n', '                    nodes[level + 1].push(addr);\n', '                }\n', '            }\n', '\n', '            addr = accounts[addr].referrer;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Determine whether the upgrade conditions are met according to the conditions\n', '     */\n', '    function _handleNodeLevelUpgrade(\n', '        address addr,\n', '        uint256 c1,\n', '        uint256 c2\n', '    ) internal view returns (bool) {\n', '        uint8 count = 0;\n', '        uint256 min = uint256(-1);\n', '\n', '        for (uint256 i = 0; i < teams[addr].length; i++) {\n', '            uint256 w = performances[teams[addr][i]].wholeLine;\n', '\n', '            // Case 1\n', '            if (w >= c1) {\n', '                count++;\n', '                if (count >= 3) {\n', '                    return true;\n', '                }\n', '            }\n', '\n', '            // Case 2\n', '            if (w >= c2 && w < min) {\n', '                min = w;\n', '            }\n', '        }\n', '        if (min < uint256(-1) && performances[addr].wholeLine.sub(min) >= c2) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Processing node rewards\n', '     */\n', '    function _handleNodeReward(uint256 _amount) internal {\n', '        uint256 reward = _amount.div(25);\n', '        for (uint8 i = 1; i <= 4; i++) {\n', '            address[] storage _nodes = nodes[i];\n', '            uint256 len = _nodes.length;\n', '            if (len > 0) {\n', '                uint256 _reward = reward.div(len);\n', '                for (uint256 j = 0; j < len; j++) {\n', '                    Account storage user = accounts[_nodes[j]];\n', '                    user.nodeIncome = user.nodeIncome.add(_reward);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate static income\n', '     */\n', '    function calculateStaticIncome(address addr) public view returns (uint256) {\n', '        Account storage user = accounts[addr];\n', '        if (user.deposit > 0) {\n', '            uint256 last = user.lastTakeTime;\n', '            uint256 day = (now - last) / STATIC_CYCLE;\n', '\n', '            if (day == 0) {\n', '                return 0;\n', '            }\n', '\n', '            if (day > 30) {\n', '                day = 30;\n', '            }\n', '\n', '            return user.deposit.mul(staticRate).div(1000).mul(day);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate out multiple\n', '     */\n', '    function _calculateOutAmount(uint256 _amount)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if (_amount >= usdter.mul(15000)) {\n', '            return _amount.mul(35).div(10);\n', '        } else if (_amount >= usdter.mul(4000)) {\n', '            return _amount.mul(30).div(10);\n', '        } else if (_amount >= usdter.mul(1500)) {\n', '            return _amount.mul(25).div(10);\n', '        } else {\n', '            return _amount.mul(20).div(10);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the out multiple of all reinvestments\n', '     */\n', '    function _calculateFullOutAmount(uint256 _amount)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if (_amount >= usdter.mul(15000)) {\n', '            return _amount.mul(45).div(10);\n', '        } else if (_amount >= usdter.mul(4000)) {\n', '            return _amount.mul(40).div(10);\n', '        } else if (_amount >= usdter.mul(1500)) {\n', '            return _amount.mul(35).div(10);\n', '        } else {\n', '            return _amount.mul(25).div(10);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get the number of nodes at a certain level\n', '     */\n', '    function nodeLength(uint8 level) public view returns (uint256) {\n', '        return nodes[level].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Number of teams\n', '     */\n', '    function teamsLength(address addr) public view returns (uint256) {\n', '        return teams[addr].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Daily prize pool ranking\n', '     */\n', '    function dayPoolRank(uint64 _id, uint8 _rank)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return dayPool[_id].ranks[_rank];\n', '    }\n', '\n', '    /**\n', '     * @dev Daily prize pool performance\n', '     */\n', '    function dayPoolValue(uint64 _id, address _addr)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return dayPool[_id].values[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Weekly prize pool ranking\n', '     */\n', '    function weekPoolRank(uint64 _id, uint8 _rank)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return weekPool[_id].ranks[_rank];\n', '    }\n', '\n', '    /**\n', '     * @dev Weekly prize pool performance\n', '     */\n', '    function weekPoolValue(uint64 _id, address _addr)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return weekPool[_id].values[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Team statistics, return the smallest, medium and most performance\n', '     */\n', '    function teamsStats(address addr) public view returns (uint256, uint256) {\n', '        uint256 count = teams[addr].length;\n', '        if (count > 0) {\n', '            uint256 max = performances[teams[addr][count - 1]].wholeLine;\n', '            uint256 min = performances[teams[addr][count - 1]].wholeLine;\n', '            for (uint256 i = 0; i < count; i++) {\n', '                if (performances[teams[addr][i]].wholeLine > max) {\n', '                    max = performances[teams[addr][i]].wholeLine;\n', '                }\n', '                if (performances[teams[addr][i]].wholeLine < min) {\n', '                    min = performances[teams[addr][i]].wholeLine;\n', '                }\n', '            }\n', '\n', '            return (max, min);\n', '        }\n', '        return (0, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Count how many people meet the conditions\n', '     */\n', '    function teamsCount(address addr, uint256 _amount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 count;\n', '\n', '        for (uint256 i = 0; i < teams[addr].length; i++) {\n', '            if (_amount <= performances[teams[addr][i]].wholeLine) {\n', '                count++;\n', '            }\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the number of large account addresses\n', '     */\n', '    function richmanLength() public view returns (uint256) {\n', '        return EnumerableSet.length(richman);\n', '    }\n', '\n', '    /**\n', '     * @dev Safe USDT transfer, excluding the balance of insurance pool and perpetual pool\n', '     */\n', '    function _safeUsdtTransfer(address addr, uint256 _amount) internal {\n', '        uint256 bal = usdt.balanceOf(address(this));\n', '        bal = bal.sub(insurance).sub(sustainable);\n', '\n', '        if (bal < _amount) {\n', '            usdt.transfer(addr, bal);\n', '        } else {\n', '            usdt.transfer(addr, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Activate the insurance pool, only the administrator can call\n', '     */\n', '    function activeInsurance() public onlyOwner {\n', '        uint256 nodePaid = insurance.mul(70).div(100);\n', '        uint256 bigPaid = insurance.sub(nodePaid);\n', '\n', '        insurance = 0;\n', '\n', '        // Issued to richman\n', '        uint256 _richmanLen = EnumerableSet.length(richman);\n', '        if (_richmanLen > 0) {\n', '            uint256 paid = bigPaid.div(_richmanLen);\n', '            for (uint256 i = 0; i < _richmanLen; i++) {\n', '                Account storage user = accounts[EnumerableSet.at(richman, i)];\n', '                user.reward = user.reward.add(paid);\n', '            }\n', '        }\n', '\n', '        // Issued to node\n', '        uint256[4] memory _rates = [\n', '            uint256(10),\n', '            uint256(20),\n', '            uint256(30),\n', '            uint256(40)\n', '        ];\n', '        for (uint8 i = 1; i <= 4; i++) {\n', '            uint256 _nodeLen = nodes[i].length;\n', '            if (_nodeLen > 0) {\n', '                uint256 paid = nodePaid.mul(_rates[i - 1]).div(100).div(\n', '                    _nodeLen\n', '                );\n', '                for (uint256 j = 0; j < _nodeLen; j++) {\n', '                    Account storage user = accounts[nodes[i][j]];\n', '                    user.reward = user.reward.add(paid);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer to the perpetual pool, only the administrator can call\n', '     */\n', '    function activeSustainable(address next) public onlyOwner {\n', '        require(sustainable > 0);\n', '        uint256 paid = sustainable;\n', '        uint256 bal = usdt.balanceOf(address(this));\n', '        if (bal < paid) {\n', '            usdt.transfer(next, bal);\n', '        } else {\n', '            usdt.transfer(next, paid);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Set static rate of return, only the administrator can call\n', '     */\n', '    function setStaticRate(uint256 _rate) public onlyOwner {\n', '        require(_rate <= 1000);\n', '        staticRate = _rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set dynamic rate of return, only the administrator can call\n', '     */\n', '    function setDynamicRates(uint8 level, uint256 _rate) public onlyOwner {\n', '        require(level < 12);\n', '        require(_rate <= 1000);\n', '        dynamicRates[level] = _rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set up the ticket contract, only the administrator can call\n', '     */\n', '    function setTicket(ITicketsToken _ticket) public onlyOwner {\n', '        ticket = _ticket;\n', '    }\n', '\n', '    /**\n', '     * @dev Receive the technical founding team, only the administrator can call\n', '     */\n', '    function takeFounder() public onlyOwner {\n', '        uint256 paid = founder;\n', '        founder = 0;\n', '        usdt.transfer(msg.sender, paid);\n', '    }\n', '\n', '    /**\n', '     * @dev Receive expansion operation fee, only the administrator can call\n', '     */\n', '    function takeOperation() public onlyOwner {\n', '        uint256 paid = operation.add(dex);\n', '        operation = 0;\n', '        dex = 0;\n', '        usdt.transfer(msg.sender, paid);\n', '    }\n', '}']