['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ISparkleTimestamp.sol\n', '\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', '// import "../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol";\n', '// import "../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol";\n', '\n', '/**\n', ' * @dev Sparkle Timestamp Contract\n', ' * @author SparkleMobile Inc. (c) 2019-2020\n', ' */\n', 'interface ISparkleTimestamp {\n', '\n', '  /**\n', '   * @dev Add new reward timestamp for address\n', '   * @param _rewardAddress being added to timestamp collection\n', '   */\n', '  function addTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Reset timestamp maturity for loyalty address\n', '   * @param _rewardAddress to have reward period reset\n', '   */\n', '  function resetTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Zero/delete existing loyalty timestamp entry\n', '   * @param _rewardAddress being requested for timestamp deletion\n', '   * @notice Test(s) not passed\n', '   */\n', '  function deleteTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Get address confirmation for loyalty address\n', '   * @param _rewardAddress being queried for address information\n', '   */\n', '  function getAddress(address _rewardAddress)\n', '  external\n', '  returns(address);\n', '\n', '  /**\n', '   * @dev Get timestamp of initial joined timestamp for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getJoinedTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Get timestamp of last deposit for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getDepositTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Get timestamp of reward maturity for loyalty address\n', '   * @param _rewardAddress being queried for timestamp information\n', '   */\n', '  function getRewardTimestamp(address _rewardAddress)\n', '  external\n', '  returns(uint256);\n', '\n', '  /**\n', '   * @dev Determine if address specified has a timestamp record\n', '   * @param _rewardAddress being queried for timestamp existance\n', '   */\n', '  function hasTimestamp(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', "   * @dev Calculate time remaining in seconds until this address' reward matures\n", '   * @param _rewardAddress to query remaining time before reward matures\n', '   */\n', '  function getTimeRemaining(address _rewardAddress)\n', '  external\n', '  returns(uint256, bool, uint256);\n', '\n', '  /**\n', '   * @dev Determine if reward is mature for  address\n', '   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\n', '   */\n', '  function isRewardReady(address _rewardAddress)\n', '  external\n', '  returns(bool);\n', '\n', '  /**\n', '   * @dev Change the stored loyalty controller contract address\n', '   * @param _newAddress of new loyalty controller contract address\n', '   */\n', '  function setContractAddress(address _newAddress)\n', '  external;\n', '\n', '  /**\n', '   * @dev Return the stored authorized controller address\n', '   * @return Address of loyalty controller contract\n', '   */\n', '  function getContractAddress()\n', '  external\n', '  returns(address);\n', '\n', '  /**\n', '   * @dev Change the stored loyalty time period\n', '   * @param _newTimePeriod of new reward period (in seconds)\n', '   */\n', '  function setTimePeriod(uint256 _newTimePeriod)\n', '  external;\n', '\n', '  /**\n', '   * @dev Return the current loyalty timer period\n', '   * @return Current stored value of loyalty time period\n', '   */\n', '  function getTimePeriod()\n', '  external\n', '  returns(uint256);\n', '\n', '\t/**\n', '\t * @dev Event signal: Reset timestamp\n', '\t */\n', '  event ResetTimestamp(address _rewardAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty contract address waws changed\n', '\t */\n', '\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward time period was changed\n', '\t */\n', '\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was added\n', '\t */\n', '\tevent TimestampAdded( address indexed _newTimestampAddress );\n', '\n', '\t/**\n', '\t * @dev Event signal: Loyalty reward timestamp was removed\n', '\t */\n', '\tevent TimestampDeleted( address indexed _newTimestampAddress );\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp for address was reset\n', '   */\n', '  event TimestampReset(address _rewardAddress);\n', '\n', '}\n', '\n', '// File: contracts/ISparkleRewardTiers.sol\n', '\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', "// import '../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol';\n", "// import '../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol';\n", '\n', '/**\n', '  * @title A contract for managing reward tiers\n', '  * @author SparkleLoyalty Inc. (c) 2019-2020\n', '  */\n', '// interface ISparkleRewardTiers is Ownable, Pausable, ReentrancyGuard {\n', 'interface ISparkleRewardTiers {\n', '\n', '  /**\n', '    * @dev Add a new reward tier to the contract for future proofing\n', '    * @param _index of the new reward tier to add\n', '    * @param _rate of the added reward tier\n', '    * @param _price of the added reward tier\n', '    * @param _enabled status of the added reward tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Update an existing reward tier with new values\n', '    * @param _index of reward tier to update\n', '    * @param _rate of the reward tier\n', '    * @param _price of the reward tier\n', '    * @param _enabled status of the reward tier\n', '    * @return (bool) indicating success/failure\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Remove an existing reward tier from list of tiers\n', '    * @param _index of reward tier to remove\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function deleteTier(uint256 _index)\n', '  external\n', '  // view\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Get the rate value of specified tier\n', '    * @param _index of tier to query\n', '    * @return specified reward tier rate\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getRate(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(uint256);\n', '\n', '  /**\n', '    * @dev Get price of tier\n', '    * @param _index of tier to query\n', '    * @return uint256 indicating tier price\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getPrice(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(uint256);\n', '\n', '  /**\n', '    * @dev Get the enabled status of tier\n', '    * @param _index of tier to query\n', '    * @return bool indicating status of tier\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function getEnabled(uint256 _index)\n', '  external\n', '  // view\n', '  // whenNotPaused\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Withdraw ether that has been sent directly to the contract\n', '    * @return bool indicating withdraw success\n', '    * @notice Test(s) Need rewrite\n', '    */\n', '  function withdrawEth()\n', '  external\n', '  // onlyOwner\n', '  // whenNotPaused\n', '  // nonReentrant\n', '  returns(bool);\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is deleted\n', '    * @param _index of tier to deleted\n', '    */\n', '  event TierDeleted(uint256 _index);\n', '\n', '  /**\n', '    * @dev Event triggered when a reward tier is updated\n', '    * @param _index of the updated tier\n', '    * @param _rate of updated tier\n', '    * @param _price of updated tier\n', '    * @param _enabled status of updated tier\n', '    */\n', '  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '  /**\n', '    * @dev Event triggered when a new reward tier is added\n', '    * @param _index of the tier added\n', '    * @param _rate of added tier\n', '    * @param _price of added tier\n', '    * @param _enabled status of added tier\n', '    */\n', '  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\n', '\n', '}\n', '\n', '// File: contracts/SparkleLoyalty.sol\n', '\n', '\n', '/// SWC-103:  Floating Pragma\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '  * @dev Sparkle Loyalty Rewards\n', '  * @author SparkleMobile Inc.\n', '  */\n', 'contract SparkleLoyalty is Ownable, Pausable, ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev Ensure math safety through SafeMath\n', '   */\n', '  using SafeMath for uint256;\n', '\n', '  // Gas to send with certain transations that may cost more in the future due to chain growth\n', '  uint256 private gasToSendWithTX = 25317;\n', '  // Base rate APR (5%) factored to 365.2422 gregorian days\n', '  uint256 private baseRate = 0.00041069 * 10e7; // A full year is 365.2422 gregorian days (5%)\n', '\n', '  // Account data structure\n', '  struct Account {\n', '    address _address; // Loyalty reward address\n', '    uint256 _balance; // Total tokens deposited\n', '    uint256 _collected; // Total tokens collected\n', '    uint256 _claimed; // Total succesfull reward claims\n', '    uint256 _joined; // Total times address has joined\n', '    uint256 _tier; // Tier index of reward tier\n', '    bool _isLocked; // Is the account locked\n', '  }\n', '\n', '  // tokenAddress of erc20 token address\n', '  address private tokenAddress;\n', '\n', '  // timestampAddress of time stamp contract address\n', '  address private timestampAddress;\n', '\n', '  // treasuryAddress of token treeasury address\n', '  address private treasuryAddress;\n', '\n', '  // collectionAddress to receive eth payed for tier upgrades\n', '  address private collectionAddress;\n', '\n', '  // rewardTiersAddress to resolve reward tier specifications\n', '  address private tiersAddress;\n', '\n', '  // minProofRequired to deposit of rewards to be eligibile\n', '  uint256 private minRequired;\n', '\n', '  // maxProofAllowed for deposit to be eligibile\n', '  uint256 private maxAllowed;\n', '\n', '  // totalTokensClaimed of all rewards awarded\n', '  uint256 private totalTokensClaimed;\n', '\n', '  // totalTimesClaimed of all successfully claimed rewards\n', '  uint256 private totalTimesClaimed;\n', '\n', '  // totalActiveAccounts count of all currently active addresses\n', '  uint256 private totalActiveAccounts;\n', '\n', '  // Accounts mapping of user loyalty records\n', '  mapping(address => Account) private accounts;\n', '\n', '  /**\n', '   * @dev Sparkle Loyalty Rewards Program contract .cTor\n', '   * @param _tokenAddress of token used for proof of loyalty rewards\n', '   * @param _treasuryAddress of proof of loyalty token reward distribution\n', '   * @param _collectionAddress of ethereum account to collect tier upgrade eth\n', '   * @param _tiersAddress of the proof of loyalty tier rewards support contract\n', '   * @param _timestampAddress of the proof of loyalty timestamp support contract\n', '  */\n', '  constructor(address _tokenAddress, address _treasuryAddress, address _collectionAddress, address _tiersAddress, address _timestampAddress)\n', '  public\n', '  Ownable()\n', '  Pausable()\n', '  ReentrancyGuard()\n', '  {\n', '    // Initialize contract internal addresse(s) from params\n', '    tokenAddress = _tokenAddress;\n', '    treasuryAddress = _treasuryAddress;\n', '    collectionAddress = _collectionAddress;\n', '    tiersAddress = _tiersAddress;\n', '    timestampAddress = _timestampAddress;\n', '\n', '    // Initialize minimum/maximum allowed deposit limits\n', '    minRequired = uint256(1000).mul(10e7);\n', '    maxAllowed = uint256(250000).mul(10e7);\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit additional tokens to a reward address loyalty balance\n', '   * @param _depositAmount of tokens to deposit into  a reward address balance\n', '   * @return bool indicating the success of the deposit operation (true == success)\n', '   */\n', '  function depositLoyalty(uint _depositAmount)\n', '  public\n', '  whenNotPaused\n', '  nonReentrant\n', '  returns (bool)\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}1');\n", '    // Validate specified value meets minimum requirements\n', "    require(_depositAmount >= minRequired, 'Minimum required');\n", '\n', '    // Determine if caller has approved enough allowance for this deposit\n', '    if(IERC20(tokenAddress).allowance(msg.sender, address(this)) < _depositAmount) {\n', '      // No, rever informing that deposit amount exceeded allownce amount\n', "      revert('Exceeds allowance');\n", '    }\n', '\n', '    // Obtain a storage instsance of callers account record\n', '    Account storage loyaltyAccount = accounts[msg.sender];\n', '\n', '    // Determine if there is an upper deposit cap\n', '    if(maxAllowed > 0) {\n', '      // Yes, determine if the deposit amount + current balance exceed max deposit cap\n', '      if(loyaltyAccount._balance.add(_depositAmount) > maxAllowed || _depositAmount > maxAllowed) {\n', '        // Yes, revert informing that the maximum deposit cap has been exceeded\n', "        revert('Exceeds cap');\n", '      }\n', '\n', '    }\n', '\n', '    // Determine if the tier selected is enabled\n', '    if(!ISparkleRewardTiers(tiersAddress).getEnabled(loyaltyAccount._tier)) {\n', '      // No, then this tier cannot be selected\n', "      revert('Invalid tier');\n", '    }\n', '\n', '    // Determine of transfer from caller has succeeded\n', '    if(IERC20(tokenAddress).transferFrom(msg.sender, address(this), _depositAmount)) {\n', '      // Yes, thend determine if the specified address has a timestamp record\n', '      if(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender)) {\n', '        // Yes, update callers account balance by deposit amount\n', '        loyaltyAccount._balance = loyaltyAccount._balance.add(_depositAmount);\n', '        // Reset the callers reward timestamp\n', '        _resetTimestamp(msg.sender);\n', '        //\n', '        emit DepositLoyaltyEvent(msg.sender, _depositAmount, true);\n', '        // Return success\n', '        return true;\n', '      }\n', '\n', '      // Determine if a timestamp has been added for caller\n', '      if(!ISparkleTimestamp(timestampAddress).addTimestamp(msg.sender)) {\n', '        // No, revert indicating there was some kind of error\n', "        revert('No timestamp created');\n", '      }\n', '\n', '      // Prepare loyalty account record\n', '      loyaltyAccount._address = address(msg.sender);\n', '      loyaltyAccount._balance = _depositAmount;\n', '      loyaltyAccount._joined = loyaltyAccount._joined.add(1);\n', '      // Update global account counter\n', '      totalActiveAccounts = totalActiveAccounts.add(1);\n', '      //\n', '      emit DepositLoyaltyEvent(msg.sender, _depositAmount, false);\n', '      // Return success\n', '      return true;\n', '    }\n', '\n', '    // Return failure\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * @dev Claim Sparkle Loyalty reward\n', '   */\n', '  function claimLoyaltyReward()\n', '  public\n', '  whenNotPaused\n', '  nonReentrant\n', '  returns(bool)\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // Validate caller has a timestamp and it has matured\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender), 'No record');\n", "    require(ISparkleTimestamp(timestampAddress).isRewardReady(msg.sender), 'Not mature');\n", '\n', '    // Obtain the current state of the callers timestamp\n', '    (uint256 timeRemaining, bool isReady, uint256 rewardDate) = ISparkleTimestamp(timestampAddress).getTimeRemaining(msg.sender);\n', '    // Determine if the callers reward has matured\n', '    if(isReady) {\n', '      // Value not used but throw unused var warning (cleanup)\n', '      rewardDate = 0;\n', '      // Yes, then obtain a storage instance of callers account record\n', '      Account storage loyaltyAccount = accounts[msg.sender];\n', '      // Obtain values required for caculations\n', '      uint256 dayCount = (timeRemaining.div(ISparkleTimestamp(timestampAddress).getTimePeriod())).add(1);\n', '      uint256 tokenBalance = loyaltyAccount._balance.add(loyaltyAccount._collected);\n', '      uint256 rewardRate = ISparkleRewardTiers(tiersAddress).getRate(loyaltyAccount._tier);\n', '      uint256 rewardTotal = baseRate.mul(tokenBalance).mul(rewardRate).mul(dayCount).div(10e7).div(10e7);\n', '      // Increment collected by reward total\n', '      loyaltyAccount._collected = loyaltyAccount._collected.add(rewardTotal);\n', '      // Increment total number of times a reward has been claimed\n', '      loyaltyAccount._claimed = loyaltyAccount._claimed.add(1);\n', '      // Incrememtn total number of times rewards have been collected by all\n', '      totalTimesClaimed = totalTimesClaimed.add(1);\n', '      // Increment total number of tokens claimed\n', '      totalTokensClaimed += rewardTotal;\n', '      // Reset the callers timestamp record\n', '      _resetTimestamp(msg.sender);\n', '      // Emit event log to the block chain for future web3 use\n', '      emit RewardClaimedEvent(msg.sender, rewardTotal);\n', '      // Return success\n', '      return true;\n', '    }\n', '\n', '    // Revert opposed to returning boolean (May or may not return a txreceipt)\n', "    revert('Failed claim');\n", '  }\n', '\n', '  /**\n', '   * @dev Withdraw the current deposit balance + any earned loyalty rewards\n', '   */\n', '  function withdrawLoyalty()\n', '  public\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // validate that caller has a loyalty timestamp\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender), 'No timestamp2');\n", '\n', '    // Determine if the account has been locked\n', '    if(accounts[msg.sender]._isLocked) {\n', '      // Yes, revert informing that this loyalty account has been locked\n', "      revert('Locked');\n", '    }\n', '\n', '    // Obtain values needed from account record before zeroing\n', '    uint256 joinCount = accounts[msg.sender]._joined;\n', '    uint256 collected = accounts[msg.sender]._collected;\n', '    uint256 deposit = accounts[msg.sender]._balance;\n', '    bool isLocked = accounts[msg.sender]._isLocked;\n', '    // Zero out the callers account record\n', '    Account storage account = accounts[msg.sender];\n', '    account._address = address(0x0);\n', '    account._balance = 0x0;\n', '    account._collected = 0x0;\n', '    account._joined = joinCount;\n', '    account._claimed = 0x0;\n', '    account._tier = 0x0;\n', '    // Preserve account lock even after withdraw (account always locked)\n', '    account._isLocked = isLocked;\n', '    // Decement the total number of active accounts\n', '    totalActiveAccounts = totalActiveAccounts.sub(1);\n', '\n', '    // Delete the callers timestamp record\n', '    _deleteTimestamp(msg.sender);\n', '\n', '    // Determine if transfer from treasury address is a success\n', '    if(!IERC20(tokenAddress).transferFrom(treasuryAddress, msg.sender, collected)) {\n', '      // No, revert indicating that the transfer and wisthdraw has failed\n', "      revert('Withdraw failed');\n", '    }\n', '\n', '    // Determine if transfer from contract address is a sucess\n', '    if(!IERC20(tokenAddress).transfer(msg.sender, deposit)) {\n', '      // No, revert indicating that the treansfer and withdraw has failed\n', "      revert('Withdraw failed');\n", '    }\n', '\n', '    // Emit event log to the block chain for future web3 use\n', '    emit LoyaltyWithdrawnEvent(msg.sender, deposit.add(collected));\n', '  }\n', '\n', '  function returnLoyaltyDeposit(address _rewardAddress)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // validate that caller has a loyalty timestamp\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2');\n", '    // Validate that reward address is locked\n', "    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\n", '    uint256 deposit = accounts[_rewardAddress]._balance;\n', '    Account storage account = accounts[_rewardAddress];\n', '    account._balance = 0x0;\n', '    // Determine if transfer from contract address is a sucess\n', '    if(!IERC20(tokenAddress).transfer(_rewardAddress, deposit)) {\n', '      // No, revert indicating that the treansfer and withdraw has failed\n', "      revert('Withdraw failed');\n", '    }\n', '\n', '    // Emit event log to the block chain for future web3 use\n', '    emit LoyaltyDepositWithdrawnEvent(_rewardAddress, deposit);\n', '  }\n', '\n', '  function returnLoyaltyCollected(address _rewardAddress)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // validate that caller has a loyalty timestamp\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2b');\n", '    // Validate that reward address is locked\n', "    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\n", '    uint256 collected = accounts[_rewardAddress]._collected;\n', '    Account storage account = accounts[_rewardAddress];\n', '    account._collected = 0x0;\n', '    // Determine if transfer from treasury address is a success\n', '    if(!IERC20(tokenAddress).transferFrom(treasuryAddress, _rewardAddress, collected)) {\n', '      // No, revert indicating that the transfer and wisthdraw has failed\n', "      revert('Withdraw failed');\n", '    }\n', '\n', '    // Emit event log to the block chain for future web3 use\n', '    emit LoyaltyCollectedWithdrawnEvent(_rewardAddress, collected);\n', '  }\n', '\n', '  function removeLoyaltyAccount(address _rewardAddress)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // validate that caller has a loyalty timestamp\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2b');\n", '    // Validate that reward address is locked\n', "    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\n", '    uint256 joinCount = accounts[_rewardAddress]._joined;\n', '    Account storage account = accounts[_rewardAddress];\n', '    account._address = address(0x0);\n', '    account._balance = 0x0;\n', '    account._collected = 0x0;\n', '    account._joined = joinCount;\n', '    account._claimed = 0x0;\n', '    account._tier = 0x0;\n', '    account._isLocked = false;\n', '    // Decement the total number of active accounts\n', '    totalActiveAccounts = totalActiveAccounts.sub(1);\n', '\n', '    // Delete the callers timestamp record\n', '    _deleteTimestamp(_rewardAddress);\n', '\n', '    emit LoyaltyAccountRemovedEvent(_rewardAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the locked status of the specified address\n', '   * @param _loyaltyAddress of account\n', '   * @return (bool) indicating locked status\n', '   */\n', '  function isLocked(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns (bool)\n', '  {\n', '    return accounts[_loyaltyAddress]._isLocked;\n', '  }\n', '\n', '  function lockAccount(address _rewardAddress, bool _value)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}');\n", "    require(_rewardAddress != address(0x0), 'Invalid {reward}');\n", '    // Validate specified address has timestamp\n', "    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timstamp');\n", "    // Set the specified address' locked status\n", '    accounts[_rewardAddress]._isLocked = _value;\n', '    // Emit event log to the block chain for future web3 use\n', '    emit LockedAccountEvent(_rewardAddress, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the storage address value of the specified address\n', '   * @param _loyaltyAddress of account\n', '   * @return (address) indicating the address stored calls account record\n', '   */\n', '  function getLoyaltyAddress(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return accounts[_loyaltyAddress]._address;\n', '  }\n', '\n', '  /**\n', '   * @dev Get the deposit balance value of specified address\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256) indicating the balance value\n', '   */\n', '  function getDepositBalance(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._balance;\n', '  }\n', '\n', '  /**\n', '   * @dev Get the tokens collected by the specified address\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256) indicating the tokens collected\n', '   */\n', '  function getTokensCollected(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._collected;\n', '  }\n', '\n', '  /**\n', '   * @dev Get the total balance (deposit + collected) of tokens\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256) indicating total balance\n', '   */\n', '  function getTotalBalance(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._balance.add(accounts[_loyaltyAddress]._collected);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the times loyalty has been claimed\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256) indicating total time claimed\n', '   */\n', '  function getTimesClaimed(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._claimed;\n', '  }\n', '\n', '  /**\n', '   * @dev Get total number of times joined\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256)\n', '   */\n', '  function getTimesJoined(address _loyaltyAddress)\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._joined;\n', '  }\n', '\n', '  /**\n', '   * @dev Get time remaining before reward maturity\n', '   * @param _loyaltyAddress of account\n', '   * @return (uint256, bool) Indicating time remaining/past and boolean indicating maturity\n', '   */\n', '  function getTimeRemaining(address _loyaltyAddress)\n', '  public\n', '  whenNotPaused\n', '  returns (uint256, bool, uint256)\n', '  {\n', '    (uint256 remaining, bool status, uint256 deposit) = ISparkleTimestamp(timestampAddress).getTimeRemaining(_loyaltyAddress);\n', '    return (remaining, status, deposit);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw any ether that has been sent directly to the contract\n', '   * @param _loyaltyAddress of account\n', '   * @return Total number of tokens that have been claimed by users\n', '   * @notice Test(s) Not written\n', '   */\n', '  function getRewardTier(address _loyaltyAddress)\n', '  public\n', '  view whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return accounts[_loyaltyAddress]._tier;\n', '  }\n', '\n', '  /**\n', '   * @dev Select reward tier for msg.sender\n', '   * @param _tierSelected id of the reward tier interested in purchasing\n', '   * @return (bool) indicating failure/success\n', '   */\n', '  function selectRewardTier(uint256 _tierSelected)\n', '  public\n', '  payable\n', '  whenNotPaused\n', '  nonReentrant\n', '  returns(bool)\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    // Validate specified address has a timestamp\n', "    require(accounts[msg.sender]._address == address(msg.sender), 'No timestamp3');\n", '    // Validate tier selection\n', "    require(accounts[msg.sender]._tier != _tierSelected, 'Already selected');\n", '    // Validate that ether was sent with the call\n', "    require(msg.value > 0, 'No ether');\n", '\n', '    // Determine if the specified rate is > than existing rate\n', '    if(ISparkleRewardTiers(tiersAddress).getRate(accounts[msg.sender]._tier) >= ISparkleRewardTiers(tiersAddress).getRate(_tierSelected)) {\n', '      // No, revert indicating failure\n', "      revert('Invalid tier');\n", '    }\n', '\n', '    // Determine if ether transfer for tier upgrade has completed successfully\n', "    (bool success, ) = address(collectionAddress).call{value: ISparkleRewardTiers(tiersAddress).getPrice(_tierSelected), gas: gasToSendWithTX}('');\n", "    require(success, 'Rate unchanged');\n", '\n', '    // Update callers rate with the new selected rate\n', '    accounts[msg.sender]._tier = _tierSelected;\n', '    emit TierSelectedEvent(msg.sender, _tierSelected);\n', '    // Return success\n', '    return true;\n', '  }\n', '\n', '  function getRewardTiersAddress()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return tiersAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Set tier collectionm address\n', '   * @param _newAddress of new collection address\n', '   * @notice Test(s) not written\n', '   */\n', '  function setRewardTiersAddress(address _newAddress)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    // Validate specified address is valid\n', "    require(_newAddress != address(0), 'Invalid {reward}');\n", '    // Set tier rewards contract address\n', '    tiersAddress = _newAddress;\n', '    emit TiersAddressChanged(_newAddress);\n', '  }\n', '\n', '  function getCollectionAddress()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return collectionAddress;\n', '  }\n', '\n', '  /** @notice Test(s) passed\n', '   * @dev Set tier collectionm address\n', '   * @param _newAddress of new collection address\n', '   */\n', '  function setCollectionAddress(address _newAddress)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {From}');\n", '    // Validate specified address is valid\n', "    require(_newAddress != address(0), 'Invalid {collection}');\n", '    // Set tier collection address\n', '    collectionAddress = _newAddress;\n', '    emit CollectionAddressChanged(_newAddress);\n', '  }\n', '\n', '  function getTreasuryAddress()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return treasuryAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Set treasury address\n', '   * @param _newAddress of the treasury address\n', '   * @notice Test(s) passed\n', '   */\n', '  function setTreasuryAddress(address _newAddress)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', '    require(msg.sender != address(0), "Invalid {from}");\n', '    // Validate specified address\n', '    require(_newAddress != address(0), "Invalid {treasury}");\n', '    // Set current treasury contract address\n', '    treasuryAddress = _newAddress;\n', '    emit TreasuryAddressChanged(_newAddress);\n', '  }\n', '\n', '  function getTimestampAddress()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return timestampAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the timestamp address\n', '   * @param _newAddress of timestamp address\n', '   * @notice Test(s) passed\n', '   */\n', '  function setTimestampAddress(address _newAddress)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', '    require(msg.sender != address(0), "Invalid {from}");\n', '    // Set current timestamp contract address\n', '    timestampAddress = _newAddress;\n', '    emit TimestampAddressChanged(_newAddress);\n', '  }\n', '\n', '  function getTokenAddress()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(address)\n', '  {\n', '    return tokenAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the loyalty token address\n', '   * @param _newAddress of the new token address\n', '   * @notice Test(s) passed\n', '   */\n', '  function setTokenAddress(address _newAddress)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', '    require(msg.sender != address(0), "Invalid {from}");\n', '    // Set current token contract address\n', '    tokenAddress = _newAddress;\n', '    emit TokenAddressChangedEvent(_newAddress);\n', '  }\n', '\n', '  function getSentGasAmount()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return gasToSendWithTX;\n', '  }\n', '\n', '  function setSentGasAmount(uint256 _amount)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // Set the current minimum deposit allowed\n', '    gasToSendWithTX = _amount;\n', '    emit GasSentChanged(_amount);\n', '  }\n', '\n', '  function getBaseRate()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    return baseRate;\n', '  }\n', '\n', '  function setBaseRate(uint256 _newRate)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // Set the current minimum deposit allowed\n', '    baseRate = _newRate;\n', '    emit BaseRateChanged(_newRate);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the minimum Proof Of Loyalty amount allowed for deposit\n', '   * @param _minProof amount for new minimum accepted loyalty reward deposit\n', '   * @notice _minProof value is multiplied internally by 10e7. Do not multiply before calling!\n', '   */\n', '  function setMinProof(uint256 _minProof)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", '    // Validate specified minimum is not lower than 1000 tokens\n', "    require(_minProof >= 1000, 'Invalid amount');\n", '    // Set the current minimum deposit allowed\n', '    minRequired = _minProof.mul(10e7);\n', '    emit MinProofChanged(minRequired);\n', '  }\n', '\n', '  event MinProofChanged(uint256);\n', '  /**\n', '   * @dev Get the minimum Proof Of Loyalty amount allowed for deposit\n', '   * @return Amount of tokens required for Proof Of Loyalty Rewards\n', '   * @notice Test(s) passed\n', '   */\n', '  function getMinProof()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    // Return indicating minimum deposit allowed\n', '    return minRequired;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the maximum Proof Of Loyalty amount allowed for deposit\n', '   * @param _maxProof amount for new maximum loyalty reward deposit\n', '   * @notice _maxProof value is multiplied internally by 10e7. Do not multiply before calling!\n', '   * @notice Smallest maximum value is 1000 + _minProof amount. (Ex: If _minProof == 1000 then smallest _maxProof possible is 2000)\n', '   */\n', '  function setMaxProof(uint256 _maxProof)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0), 'Invalid {from}');\n", "    require(_maxProof >= 2000, 'Invalid amount');\n", '    // Set allow maximum deposit\n', '    maxAllowed = _maxProof.mul(10e7);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the maximum Proof Of Loyalty amount allowed for deposit\n', '   * @return Maximum amount of tokens allowed for Proof Of Loyalty deposit\n', '   * @notice Test(s) passed\n', '   */\n', '  function getMaxProof()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    // Return indicating current allowed maximum deposit\n', '    return maxAllowed;\n', '  }\n', '\n', '  /**\n', '   * @dev Get the total number of tokens claimed by all users\n', '   * @return Total number of tokens that have been claimed by users\n', '   * @notice Test(s) Not written\n', '   */\n', '  function getTotalTokensClaimed()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    // Return indicating total number of tokens that have been claimed by all\n', '    return totalTokensClaimed;\n', '  }\n', '\n', '  /**\n', '   * @dev Get total number of times rewards have been claimed for all users\n', '   * @return Total number of times rewards have been claimed\n', '   */\n', '  function getTotalTimesClaimed()\n', '  public\n', '  view\n', '  whenNotPaused\n', '  returns(uint256)\n', '  {\n', '    // Return indicating total number of tokens that have been claimed by all\n', '    return totalTimesClaimed;\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw any ether that has been sent directly to the contract\n', '   */\n', '  function withdrawEth(address _toAddress)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}');\n", '    // Validate specified address\n', "    require(_toAddress != address(0x0), 'Invalid {to}');\n", '    // Validate there is ether to withdraw\n', "    require(address(this).balance > 0, 'No ether');\n", '    // Determine if ether transfer of stored ether has completed successfully\n', "    // require(address(_toAddress).call.value(address(this).balance).gas(gasToSendWithTX)(), 'Withdraw failed');\n", "    (bool success, ) = address(_toAddress).call{value:address(this).balance, gas: gasToSendWithTX}('');\n", "    require(success, 'Withdraw failed');\n", '  }\n', '\n', '  /**\n', '   * @dev Withdraw any ether that has been sent directly to the contract\n', '   * @param _toAddress to receive any stored token balance\n', '   */\n', '  function withdrawTokens(address _toAddress)\n', '  public\n', '  onlyOwner\n', '  whenNotPaused\n', '  nonReentrant\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}');\n", '    // Validate specified address\n', '    require(_toAddress != address(0), "Invalid {to}");\n', '    // Validate there are tokens to withdraw\n', '    uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\n', '    require(balance != 0, "No tokens");\n', '\n', '    // Validate the transfer of tokens completed successfully\n', '    if(IERC20(tokenAddress).transfer(_toAddress, balance)) {\n', '      emit TokensWithdrawn(_toAddress, balance);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Override loyalty account tier by contract owner\n', '   * @param _loyaltyAccount loyalty account address to tier override\n', '   * @param _tierSelected reward tier to override current tier value\n', '   * @return (bool) indicating success status\n', '   */\n', '  function overrideRewardTier(address _loyaltyAccount, uint256 _tierSelected)\n', '  public\n', '  whenNotPaused\n', '  onlyOwner\n', '  nonReentrant\n', '  returns(bool)\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}');\n", "    require(_loyaltyAccount != address(0x0), 'Invalid {account}');\n", '    // Validate specified address has a timestamp\n', "    require(accounts[_loyaltyAccount]._address == address(_loyaltyAccount), 'No timestamp4');\n", '    // Update the specified loyalty address tier reward index\n', '    accounts[_loyaltyAccount]._tier = _tierSelected;\n', '    emit RewardTierChanged(_loyaltyAccount, _tierSelected);\n', '  }\n', '\n', '  /**\n', '   * @dev Reset the specified loyalty account timestamp\n', '   * @param _rewardAddress of the loyalty account to perfornm a reset\n', '   */\n', '  function _resetTimestamp(address _rewardAddress)\n', '  internal\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}');\n", '    // Validate specified address\n', '    require(_rewardAddress != address(0), "Invalid {reward}");\n', '    // Reset callers timestamp for specified address\n', "    require(ISparkleTimestamp(timestampAddress).resetTimestamp(_rewardAddress), 'Reset failed');\n", '    emit ResetTimestampEvent(_rewardAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Delete the specified loyalty account timestamp\n', '   * @param _rewardAddress of the loyalty account to perfornm the delete\n', '   */\n', '  function _deleteTimestamp(address _rewardAddress)\n', '  internal\n', '  {\n', '    // Validate calling address (msg.sender)\n', "    require(msg.sender != address(0x0), 'Invalid {from}16');\n", '    // Validate specified address\n', '    require(_rewardAddress != address(0), "Invalid {reward}");\n', '    // Delete callers timestamp for specified address\n', "    require(ISparkleTimestamp(timestampAddress).deleteTimestamp(_rewardAddress), 'Delete failed');\n", '    emit DeleteTimestampEvent(_rewardAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Event signal: Treasury address updated\n', '   */\n', '  event TreasuryAddressChanged(address);\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp address updated\n', '   */\n', '  event TimestampAddressChanged(address);\n', '\n', '  /**\n', '   * @dev Event signal: Token address updated\n', '   */\n', '  event TokenAddressChangedEvent(address);\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp reset\n', '   */\n', '  event ResetTimestampEvent(address _rewardAddress);\n', '\n', '  /**\n', '   * @dev Event signal: Timestamp deleted\n', '   */\n', '  event DeleteTimestampEvent(address _rewardAddress);\n', '\n', '  /**\n', '   * @dev Event signal: Loyalty deposited event\n', '   */\n', '  event DepositLoyaltyEvent(address, uint256, bool);\n', '\n', '  /**\n', '   * @dev Event signal: Reward claimed successfully for address\n', '   */\n', '  event RewardClaimedEvent(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Loyalty withdrawn\n', '   */\n', '  event LoyaltyWithdrawnEvent(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Account locked/unlocked\n', '   */\n', '  event LockedAccountEvent(address _rewardAddress, bool _locked);\n', '\n', '  /**\n', '   * @dev Event signal: Loyalty deposit balance withdrawn\n', '   */\n', '  event LoyaltyDepositWithdrawnEvent(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Loyalty collected balance withdrawn\n', '   */\n', '  event LoyaltyCollectedWithdrawnEvent(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Loyalty account removed\n', '   */\n', '  event LoyaltyAccountRemovedEvent(address);\n', '\n', '  /**\n', '   * @dev Event signal: Gas sent with call.value amount updated\n', '   */\n', '  event GasSentChanged(uint256);\n', '  /**\n', '   * @dev Event signal: Reward tiers address updated\n', '   */\n', '  event TierSelectedEvent(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Reward tiers address updated\n', '   */\n', '  event TiersAddressChanged(address);\n', '\n', '   /**\n', '   * @dev Event signal: Reward tier has been updated\n', '   */\n', '  event RewardTierChanged(address, uint256);\n', '\n', ' /**\n', '   * @dev Event signal: Collection address updated\n', '   */\n', '  event CollectionAddressChanged(address);\n', '\n', '  /**\n', '   * @dev Event signal: All stored tokens have been removed\n', '   */\n', '  event TokensWithdrawn(address, uint256);\n', '\n', '  /**\n', '   * @dev Event signal: Apr base rate has been changed\n', '   */\n', '  event BaseRateChanged(uint256);\n', '}']