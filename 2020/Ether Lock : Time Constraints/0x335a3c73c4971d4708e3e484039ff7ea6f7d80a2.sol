['pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract ERC20TokenBankInterface{\n', '  function balance() public view returns(uint);\n', '  function token() public view returns(address, string memory);\n', '  function issue(address _to, uint _amount) public returns (bool success);\n', '}\n', '\n', 'contract LimitedGrant{\n', '  address public owner;\n', '  ERC20TokenBankInterface public token_bank;\n', '  uint256 public limit_period;\n', '  uint256 public limit_amount;\n', '  uint256 public last_grant_block_num;\n', '  string public name;\n', '\n', '\n', '  constructor(string memory _name, address _erc20bank,\n', '              uint256 _limit_period, uint256 _limit_amount) public{\n', '                owner = msg.sender;\n', '                name = _name;\n', '                token_bank = ERC20TokenBankInterface(_erc20bank);\n', '                limit_period = _limit_period;\n', '                limit_amount = _limit_amount;\n', '                last_grant_block_num = 0;\n', '  }\n', '\n', '  function transferOwnership(address _new) public{\n', '    require(msg.sender == owner, "only owner can call this");\n', '    owner = _new;\n', '  }\n', '\n', '  event LGrantUser(address to, uint256 amount, string reason);\n', '  function grant(address _to, uint256 _amount, string memory _reason) public{\n', '    require(msg.sender == owner, "only owner can call this");\n', '    require(block.number > last_grant_block_num + limit_period, "too close");\n', '    require(_amount <= limit_amount, "too much");\n', '    require(token_bank.balance() >= _amount, "not enough token");\n', '\n', '    token_bank.issue(_to, _amount);\n', '    emit LGrantUser(_to, _amount, _reason);\n', '  }\n', '}\n', '\n', 'contract LimitedGrantFactory{\n', '  event NewLimitedGrant(address addr);\n', '\n', '  function createLimitedGrant(string memory name, address erc20bank, uint256 limit_period, uint256 limit_amount)\n', '  public returns(address){\n', '    LimitedGrant lg = new LimitedGrant(name, erc20bank, limit_period, limit_amount);\n', '    lg.transferOwnership(msg.sender);\n', '    emit NewLimitedGrant(address(lg));\n', '    return address(lg);\n', '  }\n', '}']