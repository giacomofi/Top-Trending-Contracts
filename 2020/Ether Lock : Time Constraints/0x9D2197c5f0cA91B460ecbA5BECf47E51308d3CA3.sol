['pragma solidity ^0.7.0;\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface ERC20Interface {\n', '    function totalSupply() \n', '\t\texternal \n', '\t\tview \n', '\t\treturns (uint);\n', '\n', '    function balanceOf(address tokenOwner) \n', '\t\texternal \n', '\t\tview \n', '\t\treturns (uint balance);\n', '    \n', '\tfunction allowance\n', '\t\t(address tokenOwner, address spender) \n', '\t\texternal \n', '\t\tview \n', '\t\treturns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) \t\t\t\texternal \n', '\t\treturns (bool success);\n', '    \n', '\tfunction approve(address spender, uint tokens) \t\texternal \n', '\t\treturns (bool success);\n', '\n', '    function transferFrom \n', '\t\t(address from, address to, uint tokens) \t\t\t\texternal \n', '\t\treturns (bool success);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    \n', '    \n', '}\n', '\n', 'contract GrowthEscrowContract {\n', '    \n', '    address private owner; \n', '    uint256 public time; \n', '    uint public requestedAmount;\n', '    \n', '    uint public constant delay = 604800; \n', '    \n', '\n', '    ERC20Interface private constant token = ERC20Interface(0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0);\n', '\n', '    constructor () {\n', '        owner = msg.sender;\n', '        time = block.timestamp; \n', '        requestedAmount = 0;\n', '    }\n', '    \n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner, "Unauthorized to call. ");\n', '        _;\n', '    }\n', '    \n', '\n', '    function depositToken(uint amount) public onlyOwner {\n', '   \n', '        require(amount > 0, "Amount must be greater than zero. ");\n', '        require(token.transferFrom(msg.sender, address(this), amount) == true, "Inefficent balance or Unauthorized");\n', '        \n', '    }\n', '\n', '\n', '    function withdrawToken() public onlyOwner {\n', '\n', '        \n', '        require(block.timestamp >= (time + delay) , "Cannot withdraw until 7 days afer requested. ");\n', '        require(requestedAmount > 0, "There are currently no pending withraws to be processed. ");\n', '        \n', '        require(token.transfer(msg.sender, requestedAmount) == true, "Inefficient balance. ");\n', '        requestedAmount = 0;\n', '        \n', '    }\n', '    \n', '\n', '    function requestWithdraw(uint amount) public onlyOwner {\n', '\n', '        require(amount > 0, "Amount must be greater than zero. ");\n', '        require(amount <= token.balanceOf(address(this)), "Amount requested is greater than balance on contract ");\n', '        require(requestedAmount == 0, "There is already an amount requested pending.  ");\n', '        time = block.timestamp;\n', '        requestedAmount = amount;\n', '        \n', '    }\n', '    \n', '\n', '    function cancelWithdrawRequest() public onlyOwner {\n', '\n', '        require(requestedAmount > 0, "There are currently no requested amounts to be cancelled. ");\n', '        requestedAmount = 0; \n', '    }\n', '    \n', '\n', '    function getBalance() view public returns (uint) {\n', '     \n', '        return token.balanceOf(address(this));\n', '    }\n', '    \n', '\n', '    function updateOwner(address newOwner) public onlyOwner {\n', '\n', '        owner = newOwner; \n', '    }\n', '    \n', '\n', '    function getOwner() view public returns (address) {\n', '        return owner; \n', '    }\n', '    \n', '}']