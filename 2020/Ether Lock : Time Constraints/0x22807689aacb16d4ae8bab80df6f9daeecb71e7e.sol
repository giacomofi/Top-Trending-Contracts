['/* \n', '\n', 'website: bns.finance\n', '\n', 'This project is freshly written to change the way ICO is done.\n', '\n', '    \n', '\n', '\n', 'BBBBBBBBBBBBBBBBB   NNNNNNNN        NNNNNNNN   SSSSSSSSSSSSSSS         DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFIIIIIIIIII\n', 'B::::::::::::::::B  N:::::::N       N::::::N SS:::::::::::::::S        D::::::::::::DDD   E::::::::::::::::::::EF::::::::::::::::::::FI::::::::I\n', 'B::::::BBBBBB:::::B N::::::::N      N::::::NS:::::SSSSSS::::::S        D:::::::::::::::DD E::::::::::::::::::::EF::::::::::::::::::::FI::::::::I\n', 'BB:::::B     B:::::BN:::::::::N     N::::::NS:::::S     SSSSSSS        DDD:::::DDDDD:::::DEE::::::EEEEEEEEE::::EFF::::::FFFFFFFFF::::FII::::::II\n', '  B::::B     B:::::BN::::::::::N    N::::::NS:::::S                      D:::::D    D:::::D E:::::E       EEEEEE  F:::::F       FFFFFF  I::::I  \n', '  B::::B     B:::::BN:::::::::::N   N::::::NS:::::S                      D:::::D     D:::::DE:::::E               F:::::F               I::::I  \n', '  B::::BBBBBB:::::B N:::::::N::::N  N::::::N S::::SSSS                   D:::::D     D:::::DE::::::EEEEEEEEEE     F::::::FFFFFFFFFF     I::::I  \n', '  B:::::::::::::BB  N::::::N N::::N N::::::N  SS::::::SSSSS              D:::::D     D:::::DE:::::::::::::::E     F:::::::::::::::F     I::::I  \n', '  B::::BBBBBB:::::B N::::::N  N::::N:::::::N    SSS::::::::SS            D:::::D     D:::::DE:::::::::::::::E     F:::::::::::::::F     I::::I  \n', '  B::::B     B:::::BN::::::N   N:::::::::::N       SSSSSS::::S           D:::::D     D:::::DE::::::EEEEEEEEEE     F::::::FFFFFFFFFF     I::::I  \n', '  B::::B     B:::::BN::::::N    N::::::::::N            S:::::S          D:::::D     D:::::DE:::::E               F:::::F               I::::I  \n', '  B::::B     B:::::BN::::::N     N:::::::::N            S:::::S          D:::::D    D:::::D E:::::E       EEEEEE  F:::::F               I::::I  \n', 'BB:::::BBBBBB::::::BN::::::N      N::::::::NSSSSSSS     S:::::S        DDD:::::DDDDD:::::DEE::::::EEEEEEEE:::::EFF:::::::FF           II::::::II\n', 'B:::::::::::::::::B N::::::N       N:::::::NS::::::SSSSSS:::::S ...... D:::::::::::::::DD E::::::::::::::::::::EF::::::::FF           I::::::::I\n', 'B::::::::::::::::B  N::::::N        N::::::NS:::::::::::::::SS  .::::. D::::::::::::DDD   E::::::::::::::::::::EF::::::::FF           I::::::::I\n', 'BBBBBBBBBBBBBBBBB   NNNNNNNN         NNNNNNN SSSSSSSSSSSSSSS    ...... DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFF           IIIIIIIIII\n', '                                                                                                                                                \n', '                                                       \n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SAO");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SMO");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "IB");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "RR");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "IBC");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "CNC");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length != 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "DAB0");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "LF1");\n', '        if (returndata.length != 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "LF2");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 public _totalSupply;\n', '\n', '    string public _name;\n', '    string public _symbol;\n', '    uint8 public _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    // /**\n', '    //  * @dev Returns the name of the token.\n', '    //  */\n', '    // function name() public view returns (string memory) {\n', '    //     return _name;\n', '    // }\n', '\n', '    // /**\n', '    //  * @dev Returns the symbol of the token, usually a shorter version of the\n', '    //  * name.\n', '    //  */\n', '    // function symbol() public view returns (string memory) {\n', '    //     return _symbol;\n', '    // }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    // function decimals() public view returns (uint8) {\n', '    //     return _decimals;\n', '    // }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ISA");\n', '        require(recipient != address(0), "IRA");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "TIF");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "M0");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "B0");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "BIB");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "IA");\n', '        require(spender != address(0), "A0");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    // /**\n', '    //  * @dev Sets {decimals} to a value other than the default one of 18.\n', '    //  *\n', '    //  * WARNING: This function should only be called from the constructor. Most\n', '    //  * applications that interact with token contracts will not expect\n', '    //  * {decimals} to ever change, and may work incorrectly if it does.\n', '    //  */\n', '    // function _setupDecimals(uint8 decimals_) internal {\n', '    //     _decimals = decimals_;\n', '    // }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract BnsdLaunchPool is Context {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of a raising pool.\n', '    struct RaisePoolInfo {\n', '        IERC20 raiseToken;         // Address of raising token contract.\n', '        uint256 maxTokensPerPerson;     // Maximum tokens a user can buy.\n', '        uint256 totalTokensOnSale;  // Total tokens available on offer.\n', '        uint256 startBlock; // When the sale starts\n', '        uint256 endBlock; // When the sale ends\n', '        uint256 totalTokensSold; // Total tokens sold to users so far\n', '        uint256 tokensDeposited; // Total ICO tokens deposited\n', '        uint256 votes; // Voted by users\n', '        address owner; // Owner of the pool\n', '        bool updateLocked; // No pool info can be updated once this is turned ON\n', '        bool balanceAdded; // Whether ICO tokens are added in correct amount\n', '        bool paymentMethodAdded; // Supported currencies added or not\n', '        string poolName; // Human readable string name of the pool\n', '    }\n', '\n', '    struct AirdropPoolInfo {\n', '        uint256 totalTokensAvailable;     // Total tokens staked so far.\n', '        IERC20 airdropToken;         // Address of staking LP token.\n', '        bool airdropExists;\n', '    }\n', '\n', '    // Info of a raising pool.\n', '    struct UseCasePoolInfo {\n', '        uint256 tokensAllocated; // Total tokens available for this use\n', '        uint256 tokensClaimed; // Total tokens claimed\n', '        address reserveAdd;  // Address where tokens will be released for that usecase.\n', '        bool tokensDeposited; // No pool info can be updated once this is turned ON\n', '        bool exists; // Whether reserve already exists for a pool\n', '        string useName; // Human readable string name of the pool\n', '        uint256[] unlock_perArray; // Release percent for usecase\n', '        uint256[] unlock_daysArray; // Release days for usecase\n', '    }\n', '\n', '    struct DistributionInfo {\n', '        uint256[] percentArray; // Percentage of tokens to be unlocked every phase\n', '        uint256[] daysArray; // Days from the endDate when tokens starts getting unlocked\n', '    }\n', '\n', '    // The BNSD TOKEN!\n', '    address public timeLock;\n', '    // Dev address.\n', '    address public devaddr;\n', '\n', '    // Temp dev address while switching\n', '    address private potentialAdmin;\n', '\n', '    // To store owner diistribution info after sale ends\n', '    mapping (uint256 => DistributionInfo) private ownerDistInfo; \n', '\n', '    // To store user distribution info after sale ends\n', '    mapping (uint256 => DistributionInfo) private userDistInfo;\n', '\n', '    // To store tokens on sale and their rates\n', '    mapping (uint256 => mapping (address => uint256)) public saleRateInfo;\n', '\n', '    // To store invite codes and corresponding token address and pool owners, INVITE CODE => TOKEN => OWNER => bool\n', '    mapping (uint256 => mapping (address => mapping (address => bool))) private inviteCodeList;\n', '\n', '    // To store user contribution for a sale -  POOL => USER => USDT\n', '    mapping (uint256 => mapping (address => mapping (address => uint256))) public userDepositInfo;\n', '\n', '    // To store total token promised to a user - POOL => USER\n', '    mapping (uint256 => mapping (address => uint256)) public userTokenAllocation;\n', '\n', '    // To store total token claimed by a user already\n', '    mapping (uint256 => mapping (address => uint256)) public userTokenClaimed;\n', '\n', '    // To store total token redeemed by users after sale\n', '    mapping (uint256 =>  uint256) public totalTokenClaimed;\n', '\n', '    // To store total token raised by a project - POOL => TOKEN => AMT\n', '    mapping (uint256 => mapping (address => uint256)) public fundsRaisedSoFar;\n', '\n', '    mapping (uint256 => address) private tempAdmin;\n', '\n', '    // To store total token claimed by a project\n', '    mapping (uint256 => mapping (address => uint256)) public fundsClaimedSoFar;\n', '\n', '    // To store addresses voted for a project - POOL => USER => BOOL\n', '    mapping (uint256 => mapping (address => bool)) public userVotes;\n', '\n', '    // No of blocks in a day  - 6700\n', '    uint256 public constant BLOCKS_PER_DAY = 6700; // Changing to 5 for test cases\n', '\n', '    // Info of each pool on blockchain.\n', '    RaisePoolInfo[] public poolInfo;\n', '\n', '    // Info of reserve pool of any project - POOL => RESERVE_ADD => USECASEINFO \n', '    mapping (uint256 => mapping (address => UseCasePoolInfo)) public useCaseInfo;\n', '\n', '    // To store total token reserved \n', '    mapping (uint256 =>  uint256) public totalTokenReserved;\n', '\n', '    // To store total reserved claimed \n', '    mapping (uint256 =>  uint256) public totalReservedTokenClaimed;\n', '\n', '    // To store list of all sales associated with a token \n', '    mapping (address =>  uint256[]) public listSaleTokens;\n', '\n', '    // To store list of all currencies allowed for a sale \n', '    mapping (uint256 =>  address[]) public listSupportedCurrencies;\n', '\n', '    // To store list of all reserve addresses for a sale \n', '    mapping (uint256 =>  address[]) public listReserveAddresses;\n', '\n', '    // To check if staking is enabled on a token \n', '    mapping (address =>  bool) public stakingEnabled;\n', '\n', '    // To get staking weight of a token \n', '    mapping (address =>  uint256) public stakingWeight;\n', '\n', '    // To store sum of weight of all staking tokens\n', '    uint256 public totalStakeWeight;\n', '\n', '    // To store list of staking addresses \n', '    address[] public stakingPools;\n', '\n', '    // To store stats of staked tokens per sale  \n', '    mapping (uint256 => mapping (address => uint256)) public stakedLPTokensInfo;\n', '\n', '    // To store user staked amount for a sale -  POOL => USER => LP_TOKEN\n', '    mapping (uint256 => mapping (address => mapping (address => uint256))) public userStakeInfo;\n', '\n', '    // To store reward claimed by a user - POOL => USER => BOOL\n', '    mapping (uint256 => mapping (address => bool)) public rewardClaimed;\n', '\n', '    // To store airdrop claimed by a user - POOL => USER => BOOL\n', '    mapping (uint256 => mapping (address => bool)) public airdropClaimed;\n', '\n', '    // To store extra airdrop tokens withdrawn by fund raiser - POOL => BOOL\n', '    mapping (uint256 =>  bool) public extraAirdropClaimed;\n', '\n', '    // To store airdrop info for a sale  \n', '    mapping (uint256 =>  AirdropPoolInfo) public airdropInfo;\n', '\n', '    // To store airdrop tokens balance of a user , TOKEN => USER => BAL\n', '    mapping (address => mapping (address => uint256)) public airdropBalances;\n', '\n', '    uint256 public fee = 300; // To be divided by 1e4 before using it anywhere => 3.00%\n', '\n', '    uint256 public constant rewardPer = 8000; // To be divided by 1e4 before using it anywhere => 80.00%\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Stake(address indexed user, address indexed lptoken, uint256 indexed pid, uint256 amount);\n', '    event UnStake(address indexed user, address indexed lptoken, uint256 indexed pid, uint256 amount);\n', '    event MoveStake(address indexed user, address indexed lptoken, uint256 pid, uint256 indexed pidnew, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event WithdrawAirdrop(address indexed user, address indexed token, uint256 amount);\n', '    event ClaimAirdrop(address indexed user, address indexed token, uint256 amount);\n', '    event AirdropDeposit(address indexed user, address indexed token, uint256 indexed pid, uint256 amount);\n', '    event AirdropExtraWithdraw(address indexed user, address indexed token, uint256 indexed pid, uint256 amount);\n', '    event Voted(address indexed user, uint256 indexed pid);\n', '\n', '    constructor() public {\n', '        devaddr = _msgSender();\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(devaddr == _msgSender(), "ND");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdminOrTimeLock() {\n', '        require((devaddr == _msgSender() || timeLock == _msgSender()), "ND");\n', '        _;\n', '    }\n', '\n', '    function setTimeLockAdd(address _add) public onlyAdmin {\n', '        timeLock = _add;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    function getListOfSale(address _token) external view returns (uint256[] memory) {\n', '        return listSaleTokens[_token];\n', '    }\n', '    \n', '    function getUserDistPercent(uint256 _pid) external view returns (uint256[] memory) {\n', '        return userDistInfo[_pid].percentArray;\n', '    }\n', '    \n', '    function getUserDistDays(uint256 _pid) external view returns (uint256[] memory) {\n', '        return userDistInfo[_pid].daysArray;\n', '    }\n', '\n', '    function getReserveUnlockPercent(uint256 _pid, address _reserveAdd) external view returns (uint256[] memory) {\n', '        return useCaseInfo[_pid][_reserveAdd].unlock_perArray;\n', '    }\n', '    \n', '    function getReserveUnlockDays(uint256 _pid, address _reserveAdd) external view returns (uint256[] memory) {\n', '        return useCaseInfo[_pid][_reserveAdd].unlock_daysArray;\n', '    }\n', '\n', '    function getUserDistBlocks(uint256 _pid) external view returns (uint256[] memory) {\n', '        uint256[] memory daysArray =  userDistInfo[_pid].daysArray;\n', '\n', '        uint256 endPool = poolInfo[_pid].endBlock;\n', '        for(uint256 i=0; i<daysArray.length; i++){\n', '            daysArray[i] = (daysArray[i].mul(BLOCKS_PER_DAY)).add(endPool);\n', '        }\n', '        return daysArray;\n', '    }\n', '\n', '    function getOwnerDistPercent(uint256 _pid) external view returns (uint256[] memory) {\n', '        return ownerDistInfo[_pid].percentArray;\n', '    }\n', '    \n', '    function getOwnerDistDays(uint256 _pid) external view returns (uint256[] memory) {\n', '        return ownerDistInfo[_pid].daysArray;\n', '    }\n', '\n', '    // Add a new token sale to the pool. Can only be called by the person having the invite code.\n', '    \n', '    function addNewPool(uint256 totalTokens, uint256 maxPerPerson, uint256 startBlock, uint256 endBlock, string memory namePool, IERC20 tokenAddress, uint256 _inviteCode) external returns (uint256) {\n', '        require(endBlock > startBlock, "ESC"); // END START COMPARISON FAILED\n', '        require(startBlock > block.number, "TLS"); // TIME LIMIT START SALE\n', '        require(maxPerPerson !=0 && totalTokens!=0, "IIP"); // INVALID INDIVIDUAL PER PERSON\n', '        require(inviteCodeList[_inviteCode][address(tokenAddress)][_msgSender()]==true,"IIC"); // INVALID INVITE CODE\n', '        poolInfo.push(RaisePoolInfo({\n', '            raiseToken: tokenAddress,\n', '            maxTokensPerPerson: maxPerPerson,\n', '            totalTokensOnSale: totalTokens,\n', '            startBlock: startBlock,\n', '            endBlock: endBlock,\n', '            poolName: namePool,\n', '            updateLocked: false,\n', '            owner: _msgSender(),\n', '            totalTokensSold: 0,\n', '            balanceAdded: false,\n', '            tokensDeposited: 0,\n', '            paymentMethodAdded: false,\n', '            votes: 0\n', '        }));\n', '        uint256 poolId = (poolInfo.length - 1);\n', '        listSaleTokens[address(tokenAddress)].push(poolId);\n', '        // This makes the invite code claimed\n', '        inviteCodeList[_inviteCode][address(tokenAddress)][_msgSender()] = false;\n', '        return poolId;\n', '    }\n', '\n', '    function _checkSumArray(uint256[] memory _percentArray) internal pure returns (bool) {\n', '        uint256 _sum;\n', '        for (uint256 i = 0; i < _percentArray.length; i++) {\n', '            _sum = _sum.add(_percentArray[i]);\n', '        }\n', '        return (_sum==10000);\n', '    }\n', '\n', '    function _checkValidDaysArray(uint256[] memory _daysArray) internal pure returns (bool) {\n', '        uint256 _lastDay = _daysArray[0];\n', '        for (uint256 i = 1; i < _daysArray.length; i++) {\n', '            if(_lastDay < _daysArray[i]){\n', '                _lastDay = _daysArray[i];\n', '            }\n', '            else {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _checkUpdateAllowed(uint256 _pid) internal view{\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.updateLocked == false, "CT2"); // CRITICAL TERMINATION 2\n', '        require(pool.owner==_msgSender(), "OAU"); // OWNER AUTHORIZATION FAILED\n', '        require(pool.startBlock > block.number, "CT"); // CRITICAL TERMINATION\n', '    }\n', '\n', '    // Add rule for funds locking after sale\n', '    function updateUserDistributionRule(uint256 _pid, uint256[] memory _percentArray, uint256[] memory _daysArray) external {\n', '        require(_percentArray.length == _daysArray.length, "LM"); // LENGTH MISMATCH\n', '        _checkUpdateAllowed(_pid);\n', '        require(_checkSumArray(_percentArray), "SE"); // SUM OF PERCENT INVALID\n', '        require(_checkValidDaysArray(_daysArray), "DMI"); // DAYS SHOULD BE MONOTONIICALLY INCREASING\n', '        userDistInfo[_pid] = DistributionInfo({\n', '            percentArray: _percentArray,\n', '            daysArray: _daysArray\n', '        });\n', '    }\n', '\n', '\n', '    // Add rule for funds unlocking of the fund raiser after sale\n', '    function updateOwnerDistributionRule(uint256 _pid, uint256[] memory _percentArray, uint256[] memory _daysArray) external {\n', '        require(_percentArray.length == _daysArray.length, "LM"); // LENGTH MISMATCH\n', '        _checkUpdateAllowed(_pid);\n', '        require(_checkSumArray(_percentArray), "SE"); // SUM OF PERCENT INVALID\n', '        require(_checkValidDaysArray(_daysArray), "DMI"); // DAYS SHOULD BE MONOTONIICALLY INCREASING\n', '        ownerDistInfo[_pid] = DistributionInfo({\n', '            percentArray: _percentArray,\n', '            daysArray: _daysArray\n', '        });\n', '    }\n', '\n', '\n', '    // Lock sale detail changes in future\n', '    function lockPool(uint256 _pid) external {\n', '        require(poolInfo[_pid].paymentMethodAdded==true, "CP"); // CHECK PAYMENT METHOD FAILED\n', '        _checkUpdateAllowed(_pid);\n', '        poolInfo[_pid].updateLocked = true;\n', '    }\n', '\n', '    \n', '    // Add supported currencies and their rate w.r.t token on sale\n', '    // rateToken = price of one satoshi of the token in terms of token to be raised * 1e18\n', '    // 1 BNSD =  0.00021 ETH => 1e18 BNSD Satoshi = 0.00021 * 1e18 ETH satoshi => 1 BNSD Satoshi = 0.00021 ETH satoshi => rateToken = 0.00021 * 1e18 = 21 * 1e13\n', '    // rateToken for BNSD/ETH pair = 21 * 1e13;\n', '    function addSupportedCurrencies(uint256 _pid, address _tokenRaise, uint256 rateToken) external {\n', '        _checkUpdateAllowed(_pid);\n', '        require(rateToken!=0, "IR"); // INVALID RATE\n', '        require(_tokenRaise!=address(poolInfo[_pid].raiseToken), "IT"); // INVALIID PURCHASE TOKEN\n', '        if(saleRateInfo[_pid][_tokenRaise] == 0){\n', '            listSupportedCurrencies[_pid].push(_tokenRaise);\n', '        }\n', '        saleRateInfo[_pid][_tokenRaise] = rateToken;\n', '        poolInfo[_pid].paymentMethodAdded = true; \n', '    }\n', '\n', '    function getSupportedCurrencies(uint256 _pid) external view returns (address[] memory) {\n', '        return listSupportedCurrencies[_pid];\n', '    }\n', '\n', '    function _checkUpdateReserveAllowed(uint256 _pid, address _resAdd) internal view returns (bool) {\n', '        UseCasePoolInfo storage poolU = useCaseInfo[_pid][_resAdd];\n', '        return (poolU.exists == false || poolU.tokensDeposited == false);\n', '        // if(poolU.exists == false || poolU.tokensDeposited == false){\n', '        //     return true;\n', '        // }\n', '        // return false;\n', '    }\n', '\n', '    function addReservePool(uint256 _pid, address _reserveAdd, string memory _nameReserve, uint256 _totalTokens, uint256[] memory _perArray, uint256[] memory _daysArray) external {\n', '        _checkUpdateAllowed(_pid);\n', '        require(_checkUpdateReserveAllowed(_pid, _reserveAdd) == true, "UB"); // UPDATE RESERVE FAILED\n', '        require(_checkSumArray(_perArray), "SE"); // SUM OF PERCENT INVALID\n', '        require(_checkValidDaysArray(_daysArray), "DMI"); // DAYS SHOULD BE MONOTONIICALLY INCREASING\n', '        require(_perArray.length==_daysArray.length, "IAL"); // INVALID ARRAY LENGTH\n', '        if(useCaseInfo[_pid][_reserveAdd].exists == false){\n', '            listReserveAddresses[_pid].push(_reserveAdd);\n', '        }\n', '        useCaseInfo[_pid][_reserveAdd] = UseCasePoolInfo({\n', '            reserveAdd: _reserveAdd,\n', '            useName: _nameReserve,\n', '            tokensAllocated: _totalTokens,\n', '            unlock_perArray: _perArray,\n', '            unlock_daysArray: _daysArray,\n', '            tokensDeposited: false,\n', '            tokensClaimed: 0,\n', '            exists: true\n', '        });\n', '    }\n', '\n', '    function getReserveAddresses(uint256 _pid) external view returns (address[] memory) {\n', '        return listReserveAddresses[_pid];\n', '    }\n', '\n', '    function tokensPurchaseAmt(uint256 _pid, address _tokenAdd, uint256 amt) public view returns (uint256) {\n', '        uint256 rateToken = saleRateInfo[_pid][_tokenAdd];\n', '        require(rateToken!=0, "NAT"); // NOT AVAILABLE TOKEN\n', '        return (amt.mul(1e18)).div(rateToken);\n', '    }\n', '\n', '    // Check if user can deposit specfic amount of funds to the pool \n', '    function _checkDepositAllowed(uint256 _pid, address _tokenAdd, uint256 _amt) internal view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        uint256 userBought = userTokenAllocation[_pid][_msgSender()];\n', '        uint256 purchasePossible = tokensPurchaseAmt(_pid, _tokenAdd, _amt);\n', '        require(pool.balanceAdded == true, "NA"); // NOT AVAILABLE\n', '        require(pool.startBlock <= block.number, "NT1"); // NOT AVAILABLE TIME 1\n', '        require(pool.endBlock >= block.number, "NT2"); // NOT AVAILABLE TIME 2\n', '        require(pool.totalTokensSold.add(purchasePossible) <= pool.totalTokensOnSale, "PLE"); // POOL LIMIT EXCEEDED\n', '        require(userBought.add(purchasePossible) <= pool.maxTokensPerPerson, "ILE"); // INDIVIDUAL LIMIT EXCEEDED\n', '        return purchasePossible;\n', '    }\n', '\n', '\n', '    // Check max a user can deposit right now\n', '    function getMaxDepositAllowed(uint256 _pid, address _tokenAdd, address _user) external view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        uint256 maxBuyPossible = (pool.maxTokensPerPerson).sub(userTokenAllocation[_pid][_user]);\n', '        uint256 maxBuyPossiblePoolLimit = (pool.totalTokensOnSale).sub(pool.totalTokensSold);\n', '\n', '        if(maxBuyPossiblePoolLimit < maxBuyPossible){\n', '            maxBuyPossible = maxBuyPossiblePoolLimit;\n', '        }\n', '\n', '        if(block.number >= pool.startBlock && block.number <= pool.endBlock && pool.balanceAdded == true){\n', '            uint256 rateToken = saleRateInfo[_pid][_tokenAdd];\n', '            return (maxBuyPossible.mul(rateToken).div(1e18));\n', '        }\n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // Check if deposit is enabled for a pool\n', '    function checkDepositEnabled(uint256 _pid) external view returns (bool){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '\n', '        if(pool.balanceAdded == true && pool.startBlock <= block.number && pool.endBlock >= block.number && pool.totalTokensSold <= pool.totalTokensOnSale && pool.paymentMethodAdded==true){\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Deposit ICO tokens to start a pool for ICO.\n', '    function depositICOTokens(uint256 _pid, uint256 _amount, IERC20 _tokenAdd) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        address msgSender = _msgSender();\n', '        require(_tokenAdd == pool.raiseToken, "NOT"); // NOT VALID TOKEN\n', '        require(msgSender == pool.owner, "NAU"); // NOT AUTHORISED USER\n', '        require(block.number < pool.endBlock, "NT"); // No point adding tokens after sale has ended - Possible deadlock case\n', '        _tokenAdd.safeTransferFrom(msgSender, address(this), _amount);\n', '        pool.tokensDeposited = (pool.tokensDeposited).add(_amount);\n', '        if(pool.tokensDeposited >= pool.totalTokensOnSale){\n', '            pool.balanceAdded = true;\n', '        }\n', '        emit Deposit(msgSender, _pid, _amount);\n', '    }\n', '\n', '    // Deposit Airdrop tokens anytime before end of the sale.\n', '    function depositAirdropTokens(uint256 _pid, uint256 _amount, IERC20 _tokenAdd) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(block.number < pool.endBlock, "NT"); // NOT VALID TIME\n', '        AirdropPoolInfo storage airdrop = airdropInfo[_pid];\n', '        require((_tokenAdd == airdrop.airdropToken || airdrop.airdropExists==false), "NOT"); // NOT VALID TOKEN\n', '        require(_msgSender() == pool.owner || _msgSender() == devaddr , "NAU"); // NOT AUTHORISED USER\n', '        _tokenAdd.safeTransferFrom(_msgSender(), address(this), _amount);\n', '        airdrop.totalTokensAvailable = (airdrop.totalTokensAvailable).add(_amount);\n', '        if(!airdrop.airdropExists){\n', '            airdrop.airdropToken = _tokenAdd;\n', '            airdrop.airdropExists = true;\n', '        }\n', '        emit AirdropDeposit(_msgSender(), address(_tokenAdd), _pid, _amount);\n', '    }\n', '\n', '    // Withdraw extra airdrop tokens - Possible only if no one added liquidity to one of the pools\n', '    function withdrawExtraAirdropTokens(uint256 _pid) external {\n', '        require(extraAirdropClaimed[_pid]==false, "NA"); // NOT AVAILABLE\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(block.number > pool.endBlock, "NSE"); // SALE NOT ENDED\n', '        address msgSender = _msgSender();\n', '        require(msgSender == pool.owner, "NAU"); //  NOT AUTHORISED USER\n', '        uint256 extraTokens = calculateExtraAirdropTokens(_pid);\n', '        require(extraTokens!=0, "NAT"); // NOT AVAILABLE TOKEN\n', '        extraAirdropClaimed[_pid] = true;\n', '        airdropInfo[_pid].airdropToken.safeTransfer(msgSender, extraTokens);\n', '        emit AirdropExtraWithdraw(msg.sender, address(airdropInfo[_pid].airdropToken), _pid, extraTokens);\n', '    }\n', '\n', '    function calculateExtraAirdropTokens(uint256 _pid) public view returns (uint256){\n', '        if(extraAirdropClaimed[_pid] == true) return 0;\n', '        uint256 _totalTokens;\n', '        for (uint256 i=0; i<stakingPools.length; i++){\n', '            uint256 stake = stakedLPTokensInfo[_pid][stakingPools[i]];\n', '            if(stake == 0){\n', '                _totalTokens = _totalTokens.add(((stakingWeight[stakingPools[i]]).mul(airdropInfo[_pid].totalTokensAvailable)).div(totalStakeWeight));\n', '            }\n', '        }\n', '        return _totalTokens;\n', '    }\n', '\n', '    // Deposit LP tokens for a sale.\n', '    function stakeLPTokens(uint256 _pid, uint256 _amount, IERC20 _lpAdd) external {\n', '        require(stakingEnabled[address(_lpAdd)]==true, "NST"); // NOT STAKING TOKEN\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(block.number < pool.startBlock, "NT"); // NOT VALID TIME\n', '        address msgSender = _msgSender();\n', '        _lpAdd.safeTransferFrom(msgSender, address(this), _amount);\n', '        stakedLPTokensInfo[_pid][address(_lpAdd)] = (stakedLPTokensInfo[_pid][address(_lpAdd)]).add(_amount);\n', '        userStakeInfo[_pid][msgSender][address(_lpAdd)] = (userStakeInfo[_pid][msgSender][address(_lpAdd)]).add(_amount);\n', '        emit Stake(msg.sender, address(_lpAdd), _pid, _amount);\n', '    }\n', '\n', "    // Withdraw LP tokens from a sale after it's over => Automatically claims rewards and airdrops also\n", '    function withdrawLPTokens(uint256 _pid, uint256 _amount, IERC20 _lpAdd) external {\n', '        require(stakingEnabled[address(_lpAdd)]==true, "NAT"); // NOT AUTHORISED TOKEN\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(block.number > pool.endBlock, "SE"); // SALE NOT ENDED\n', '        address msgSender = _msgSender();\n', '        claimRewardAndAirdrop(_pid);\n', '        userStakeInfo[_pid][msgSender][address(_lpAdd)] = (userStakeInfo[_pid][msgSender][address(_lpAdd)]).sub(_amount);\n', '        _lpAdd.safeTransfer(msgSender, _amount);\n', '        emit UnStake(msg.sender, address(_lpAdd), _pid, _amount);\n', '    }\n', '\n', '    // Withdraw airdrop tokens accumulated over one or more than one sale.\n', '    function withdrawAirdropTokens(IERC20 _token, uint256 _amount) external {\n', '        address msgSender = _msgSender();\n', '        airdropBalances[address(_token)][msgSender] = (airdropBalances[address(_token)][msgSender]).sub(_amount);\n', '        _token.safeTransfer(msgSender, _amount);\n', '        emit WithdrawAirdrop(msgSender, address(_token), _amount);\n', '    }\n', '\n', '    // Move LP tokens from one sale to another directly => Automatically claims rewards and airdrops also\n', '    function moveLPTokens(uint256 _pid, uint256 _newpid, uint256 _amount, address _lpAdd) external {\n', '        require(stakingEnabled[_lpAdd]==true, "NAT1"); // NOT AUTHORISED TOKEN 1\n', '        RaisePoolInfo storage poolOld = poolInfo[_pid];\n', '        RaisePoolInfo storage poolNew = poolInfo[_newpid];\n', '        require(block.number > poolOld.endBlock, "NUA"); // OLD SALE NOT ENDED\n', '        require(block.number < poolNew.startBlock, "NSA"); // SALE START CHECK FAILED\n', '        address msgSender = _msgSender();\n', '        claimRewardAndAirdrop(_pid);\n', '        userStakeInfo[_pid][msgSender][_lpAdd] = (userStakeInfo[_pid][msgSender][_lpAdd]).sub(_amount);\n', '        userStakeInfo[_newpid][msgSender][_lpAdd] = (userStakeInfo[_newpid][msgSender][_lpAdd]).add(_amount);\n', '        emit MoveStake(msg.sender, _lpAdd, _pid, _newpid, _amount);\n', '    }\n', '\n', '    function claimRewardAndAirdrop(uint256 _pid) public {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(block.number > pool.endBlock, "SE"); // SUM INVALID\n', '        _claimReward(_pid, _msgSender());\n', '        _claimAirdrop(_pid, _msgSender());\n', '    }\n', '\n', '    function _claimReward(uint256 _pid, address _user) internal {\n', '        if (rewardClaimed[_pid][_user]==false){\n', '            rewardClaimed[_pid][_user] = true;\n', '            for (uint256 i=0; i<stakingPools.length; i++){\n', '                for(uint256 j=0; j<listSupportedCurrencies[_pid].length; j++){\n', '                    uint256 _tokenAmt = getReward(_pid, _user, stakingPools[i], listSupportedCurrencies[_pid][j]);\n', '                    _creditAirdrop(_user, listSupportedCurrencies[_pid][j], _tokenAmt);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function _claimAirdrop(uint256 _pid, address _user) internal {\n', '        if (airdropClaimed[_pid][_user]==false){\n', '            airdropClaimed[_pid][_user] = true;\n', '            address _airdropToken = address(airdropInfo[_pid].airdropToken);\n', '            uint256 _tokenAmt = 0;\n', '            for (uint256 i=0; i<stakingPools.length; i++){\n', '                _tokenAmt = _tokenAmt.add(getAirdrop(_pid, _user, stakingPools[i]));\n', '            }\n', '            if(_tokenAmt !=0){\n', '                _creditAirdrop(_user, _airdropToken, _tokenAmt);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _creditAirdrop(address _user, address _token, uint256 _amt) internal {\n', '        airdropBalances[_token][_user] = (airdropBalances[_token][_user]).add(_amt);\n', '        emit ClaimAirdrop(_user, _token, _amt);\n', '    }\n', '\n', '    function getReward(uint256 _pid, address _user, address _lpAdd, address _token) public view returns (uint256) {\n', '          uint256 stake = stakedLPTokensInfo[_pid][_lpAdd];\n', '          if(stake==0) return 0;\n', '          uint256 _multipliedData = (userStakeInfo[_pid][_user][_lpAdd]).mul(fundsRaisedSoFar[_pid][_token]);\n', '          _multipliedData = (_multipliedData).mul(rewardPer).mul(fee).mul(stakingWeight[_lpAdd]);\n', '          return (((_multipliedData).div(stake)).div(1e8)).div(totalStakeWeight);\n', '    }\n', '\n', '    function getAirdrop(uint256 _pid, address _user, address _lpAdd) public view returns (uint256) {\n', '          uint256 _userStaked = userStakeInfo[_pid][_user][_lpAdd];\n', '          uint256 _totalStaked = stakedLPTokensInfo[_pid][_lpAdd];\n', '          if(_totalStaked==0) return 0;\n', '          return ((((_userStaked).mul(airdropInfo[_pid].totalTokensAvailable).mul(stakingWeight[_lpAdd])).div(_totalStaked))).div(totalStakeWeight);\n', '    }\n', '\n', '    // Deposit ICO tokens for a use case as reserve.\n', '    function depositReserveICOTokens(uint256 _pid, uint256 _amount, IERC20 _tokenAdd, address _resAdd) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        UseCasePoolInfo storage poolU = useCaseInfo[_pid][_resAdd];\n', '        address msgSender = _msgSender();\n', '        require(_tokenAdd == pool.raiseToken, "NOT"); // NOT AUTHORISED TOKEN\n', '        require(msgSender == pool.owner, "NAU"); // NOT AUTHORISED USER\n', '        require(poolU.tokensDeposited == false, "DR"); // TOKENS NOT DEPOSITED\n', '        require(poolU.tokensAllocated == _amount && _amount!=0, "NA"); // NOT AVAILABLE\n', '        require(block.number < pool.endBlock, "CRN"); // CANNOT_RESERVE_NOW to avoid deadlocks\n', '        _tokenAdd.safeTransferFrom(msgSender, address(this), _amount);\n', '        totalTokenReserved[_pid] = (totalTokenReserved[_pid]).add(_amount);\n', '        poolU.tokensDeposited = true;\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    \n', '\n', '    // Withdraw extra unsold ICO tokens or extra deposited tokens.\n', '    function withdrawExtraICOTokens(uint256 _pid, uint256 _amount, IERC20 _tokenAdd) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        address msgSender = _msgSender();\n', '\n', '        require(_tokenAdd == pool.raiseToken, "NT"); // NOT AUTHORISED TOKEN\n', '        require(msgSender == pool.owner, "NAU"); // NOT AUTHORISED USER\n', '        require(block.number > pool.endBlock, "NA"); // NOT AVAILABLE TIME\n', '\n', '        uint256 _amtAvail = pool.tokensDeposited.sub(pool.totalTokensSold);\n', '        require(_amtAvail >= _amount, "NAT"); // NOT AVAILABLE TOKEN\n', '        pool.tokensDeposited = (pool.tokensDeposited).sub(_amount);\n', '        _tokenAdd.safeTransfer(msgSender, _amount);\n', '        emit Withdraw(msgSender, _pid, _amount);\n', '    }\n', '\n', '\n', '    // Fetch extra ICO tokens available.\n', '    function fetchExtraICOTokens(uint256 _pid) external view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        return pool.tokensDeposited.sub(pool.totalTokensSold);\n', '    }\n', '\n', '\n', '    // Deposit tokens to a pool for ICO.\n', '    function deposit(uint256 _pid, uint256 _amount, IERC20 _tokenAdd) external {\n', '        address msgSender = _msgSender();\n', '        uint256 _buyThisStep = _checkDepositAllowed(_pid, address(_tokenAdd), _amount);\n', '        // require(_buyThisStep >= _amount, "CDE");\n', '        _tokenAdd.safeTransferFrom(msgSender, address(this), _amount);\n', '        userDepositInfo[_pid][msgSender][address(_tokenAdd)] = userDepositInfo[_pid][msgSender][address(_tokenAdd)].add(_amount);\n', '        userTokenAllocation[_pid][msgSender] = userTokenAllocation[_pid][msgSender].add(_buyThisStep);\n', '        poolInfo[_pid].totalTokensSold = poolInfo[_pid].totalTokensSold.add(_buyThisStep);\n', '        fundsRaisedSoFar[_pid][address(_tokenAdd)] = fundsRaisedSoFar[_pid][address(_tokenAdd)].add(_amount);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '\n', '    // Vote your favourite ICO project.\n', '    function voteProject(uint256 _pid) external {\n', '        address msgSender = _msgSender();\n', '        require(userVotes[_pid][msgSender]==false,"AVO"); // ALREADY VOTED\n', '        require(poolInfo[_pid].endBlock >= block.number,"CVO"); // CANNOT VOTE NOW\n', '        userVotes[_pid][msgSender] = true;\n', '        poolInfo[_pid].votes = (poolInfo[_pid].votes).add(1);\n', '        emit Voted(msgSender, _pid);\n', '    }\n', '\n', '    function _calculatePerAvailable(uint256[] memory _daysArray, uint256[] memory _percentArray, uint256 blockEnd) internal view returns (uint256) {\n', '        uint256 _defaultPer = 10000;\n', '        uint256 _perNow;\n', '        if(_daysArray.length==0){\n', '            return _defaultPer;\n', '        }\n', '        uint256 daysDone = ((block.number).sub(blockEnd)).div(BLOCKS_PER_DAY);\n', '        for (uint256 i = 0; i < _daysArray.length; i++) {\n', '            if(_daysArray[i] <= daysDone){\n', '                _perNow = _perNow.add(_percentArray[i]);\n', '            }\n', '            else {\n', '                break;\n', '            }\n', '        }\n', '        return _perNow;\n', '    }\n', '\n', '    function _getPercentAvailable(uint256 _pid, uint256 blockEnd) internal view returns (uint256){\n', '        DistributionInfo storage distInfo = userDistInfo[_pid];\n', '        uint256[] storage _percentArray = distInfo.percentArray;\n', '        uint256[] storage _daysArray = distInfo.daysArray;\n', '        return _calculatePerAvailable(_daysArray, _percentArray, blockEnd);\n', '    }\n', '\n', '    // Check amount of ICO tokens withdrawable by user till now - public\n', '    function amountAvailToWithdrawUser(uint256 _pid, address _user) public view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        if(pool.endBlock < block.number){\n', '            uint256 percentAvail = _getPercentAvailable(_pid, pool.endBlock);\n', '            return ((percentAvail).mul(userTokenAllocation[_pid][_user]).div(10000)).sub(userTokenClaimed[_pid][_user]);\n', '        }\n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    // Withdraw ICO tokens after sale is over based on distribution rules.\n', '    function withdrawUser(uint256 _pid, uint256 _amount) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        address msgSender = _msgSender();\n', '        uint256 _amtAvail = amountAvailToWithdrawUser(_pid, msgSender);\n', '        require(_amtAvail >= _amount, "NAT"); // NOT AUTHORISED TOKEN\n', '        userTokenClaimed[_pid][msgSender] = userTokenClaimed[_pid][msgSender].add(_amount);\n', '        totalTokenClaimed[_pid] = totalTokenClaimed[_pid].add(_amount);\n', '        pool.raiseToken.safeTransfer(msgSender, _amount);\n', '        emit Withdraw(msgSender, _pid, _amount);\n', '    }\n', '\n', '\n', '    function _getPercentAvailableFundRaiser(uint256 _pid, uint256 blockEnd) internal view returns (uint256){\n', '        DistributionInfo storage distInfo = ownerDistInfo[_pid];\n', '        uint256[] storage _percentArray = distInfo.percentArray;\n', '        uint256[] storage _daysArray = distInfo.daysArray;\n', '        return _calculatePerAvailable(_daysArray, _percentArray, blockEnd);\n', '    }\n', '\n', '    // Check amount of ICO tokens withdrawable by user till now\n', '    function amountAvailToWithdrawFundRaiser(uint256 _pid, IERC20 _tokenAdd) public view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        if(pool.endBlock < block.number){\n', '            uint256 percentAvail = _getPercentAvailableFundRaiser(_pid, pool.endBlock);\n', '            return (((percentAvail).mul(fundsRaisedSoFar[_pid][address(_tokenAdd)]).div(10000))).sub(fundsClaimedSoFar[_pid][address(_tokenAdd)]);\n', '        }\n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function _getPercentAvailableReserve(uint256 _pid, uint256 blockEnd, address _resAdd) internal view returns (uint256){\n', '        UseCasePoolInfo storage poolU = useCaseInfo[_pid][_resAdd];\n', '        uint256[] storage _percentArray = poolU.unlock_perArray;\n', '        uint256[] storage _daysArray = poolU.unlock_daysArray;\n', '        return _calculatePerAvailable(_daysArray, _percentArray, blockEnd);\n', '    }\n', '\n', '    // Check amount of ICO tokens withdrawable by reserve user till now\n', '    function amountAvailToWithdrawReserve(uint256 _pid, address _resAdd) public view returns (uint256){\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        UseCasePoolInfo storage poolU = useCaseInfo[_pid][_resAdd];\n', '        if(pool.endBlock < block.number){\n', '            uint256 percentAvail = _getPercentAvailableReserve(_pid, pool.endBlock, _resAdd);\n', '            return ((percentAvail).mul(poolU.tokensAllocated).div(10000)).sub(poolU.tokensClaimed);\n', '        }\n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // Withdraw ICO tokens for various use cases as per the schedule promised on provided address.\n', '    function withdrawReserveICOTokens(uint256 _pid, uint256 _amount, IERC20 _tokenAdd) external {\n', '        UseCasePoolInfo storage poolU = useCaseInfo[_pid][_msgSender()];\n', '        require(poolU.reserveAdd == _msgSender(), "NAUTH"); // NOT AUTHORISED USER\n', '        require(_tokenAdd == poolInfo[_pid].raiseToken, "NT"); // NOT AUTHORISED TOKEN\n', '        uint256 _amtAvail = amountAvailToWithdrawReserve(_pid, _msgSender());\n', '        require(_amtAvail >= _amount, "NAT"); // NOT AVAILABLE USER\n', '        poolU.tokensClaimed = poolU.tokensClaimed.add(_amount);\n', '        totalTokenReserved[_pid] = totalTokenReserved[_pid].sub(_amount);\n', '        totalReservedTokenClaimed[_pid] = totalReservedTokenClaimed[_pid].add(_amount);\n', '        _tokenAdd.safeTransfer(_msgSender(), _amount);\n', '        emit Withdraw(_msgSender(), _pid, _amount);\n', '    }\n', '\n', '\n', '    // Withdraw raised funds after sale is over as per the schedule promised\n', '    function withdrawFundRaiser(uint256 _pid, uint256 _amount, IERC20 _tokenAddress) external {\n', '        RaisePoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.owner == _msgSender(), "NAUTH"); // NOT AUTHORISED USER\n', '        uint256 _amtAvail = amountAvailToWithdrawFundRaiser(_pid, _tokenAddress);\n', '        require(_amtAvail >= _amount, "NAT"); // NOT AUTHORISED TOKEN\n', '        uint256 _fee = ((_amount).mul(fee)).div(1e4);\n', '        uint256 _actualTransfer = _amtAvail.sub(_fee);\n', '        uint256 _feeDev = (_fee).mul(10000 - rewardPer).div(1e4); // Remaining tokens for reward mining \n', '        fundsClaimedSoFar[_pid][address(_tokenAddress)] = fundsClaimedSoFar[_pid][address(_tokenAddress)].add(_amount);\n', '        _tokenAddress.safeTransfer(_msgSender(), _actualTransfer);\n', '        _tokenAddress.safeTransfer(devaddr, _feeDev);\n', '        emit Withdraw(_msgSender(), _pid, _actualTransfer);\n', '        emit Withdraw(devaddr, _pid, _feeDev);\n', '    }\n', '\n', '    // Update dev address by initiating with the previous dev.\n', '    function changeDev(address _newowner) external onlyAdmin {\n', '        potentialAdmin = _newowner;\n', '    }\n', '\n', '    function becomeDev() external {\n', '        require(potentialAdmin == msg.sender, "NA"); // NOT ALLOWED\n', '        devaddr = msg.sender;\n', '    }\n', '\n', '    // Update temp pool owner address by initiating with the previous pool owner.\n', '    function changePoolOwner(uint256 _pid, address _newowner) external {\n', '        require(_msgSender()==poolInfo[_pid].owner, "OA"); // NOT AUTHORISED USER\n', '        tempAdmin[_pid] = _newowner;\n', '    }\n', '\n', '    // Claim pool ownership with new address\n', '    function becomePoolOwner(uint256 _pid) external {\n', '        if (tempAdmin[_pid] == _msgSender()) poolInfo[_pid].owner = _msgSender();\n', '    }\n', '\n', '    // Update fee, can never be more than 3%.\n', '    function changeFee(uint256 _fee) external onlyAdmin{\n', '        require(_fee <= 300, "MAX3"); // MAX FEE POSSIBLE\n', '        fee = _fee;\n', '    }\n', '\n', '    // To generate a new invite code\n', '    function generateNewCode(address _token, address _poolOwner) external onlyAdminOrTimeLock returns (uint256) {\n', '        uint256 inviteCode = block.number;\n', '        inviteCodeList[inviteCode][_token][_poolOwner] = true;\n', '        return inviteCode;\n', '    }\n', '\n', '    // To invalidate an invite code\n', '    function invalidateOldCode(uint256 _inviteCode, address _token, address _poolOwner) external onlyAdmin {\n', '        inviteCodeList[_inviteCode][_token][_poolOwner] = false;\n', '    }\n', '\n', '\n', '    // To add or update a staking pool with weight\n', '    function addStakingPool(address _token, uint256 _weight) external onlyAdmin {\n', '        if(stakingEnabled[_token]==false){\n', '            stakingPools.push(_token);  \n', '            stakingEnabled[_token] = true;  \n', '        }\n', '        totalStakeWeight = totalStakeWeight.sub(stakingWeight[_token]).add(_weight);\n', '        stakingWeight[_token] = _weight;\n', '    }\n', '\n', '}']