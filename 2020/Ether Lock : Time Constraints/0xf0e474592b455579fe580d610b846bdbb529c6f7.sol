['/**\n', ' * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface TheProtocol{\n', '    function getLoanPoolsList(\n', '        uint256 start,\n', '        uint256 count)\n', '        external\n', '        view\n', '        returns (address[] memory loanPoolsList);\n', '\n', '    function loanPoolToUnderlying(address _loanPool)\n', '        external\n', '        view\n', '        returns(address);\n', '}\n', '\n', 'contract TokenRegistry {\n', '\n', '    address public bZxContract;\n', '\n', '    struct TokenMetadata {\n', '        address token; // iToken\n', '        address asset; // underlying asset\n', '    }\n', '\n', '    constructor(\n', '        address _bZxContract)\n', '        public\n', '    {\n', '        bZxContract = _bZxContract;\n', '    }\n', '\n', '    function getTokens(\n', '        uint256 _start,\n', '        uint256 _count)\n', '        external\n', '        view\n', '        returns (TokenMetadata[] memory metadata)\n', '    {\n', '        address[] memory loanPool;\n', '        TheProtocol theProtocol = TheProtocol(bZxContract);\n', '        loanPool = theProtocol.getLoanPoolsList(_start, _count);\n', '\n', '        metadata = new TokenMetadata[](loanPool.length);\n', '        for(uint256 i = 0; i < loanPool.length; i++){\n', '            metadata[i].token = loanPool[i];\n', '            metadata[i].asset = theProtocol.loanPoolToUnderlying(loanPool[i]);\n', '        }\n', '    }\n', '}']