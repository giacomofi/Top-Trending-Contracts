['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface PoolInterface {\n', '    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '    function getDenormalizedWeight(address) external view returns (uint);\n', '    function getBalance(address) external view returns (uint);\n', '    function getSwapFee() external view returns (uint);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '    function allowance(address, address) external view returns (uint);\n', '    function approve(address, uint) external returns (bool);\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface RegistryInterface {\n', '    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\n', '}\n', '\n', 'contract ExchangeProxy is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Pool {\n', '        address pool;\n', '        uint    tokenBalanceIn;\n', '        uint    tokenWeightIn;\n', '        uint    tokenBalanceOut;\n', '        uint    tokenWeightOut;\n', '        uint    swapFee;\n', '        uint    effectiveLiquidity;\n', '    }\n', '\n', '    struct Swap {\n', '        address pool;\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint    swapAmount; // tokenInAmount / tokenOutAmount\n', '        uint    limitReturnAmount; // minAmountOut / maxAmountIn\n', '        uint    maxPrice;\n', '    }\n', '\n', '    TokenInterface weth;\n', '    RegistryInterface registry;\n', '    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    uint private constant BONE = 10**18;\n', '\n', '    constructor(address _weth) public {\n', '        weth = TokenInterface(_weth);\n', '    }\n', '\n', '    function setRegistry(address _registry) external onlyOwner {\n', '        registry = RegistryInterface(_registry);\n', '    }\n', '\n', '    function batchSwapExactIn(\n', '        Swap[] memory swaps,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    )\n', '        public payable\n', '        returns (uint totalAmountOut)\n', '    {\n', '        transferFromAll(tokenIn, totalAmountIn);\n', '\n', '        for (uint i = 0; i < swaps.length; i++) {\n', '            Swap memory swap = swaps[i];\n', '            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '            PoolInterface pool = PoolInterface(swap.pool);\n', '\n', '            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                SwapTokenIn.approve(swap.pool, 0);\n', '            }\n', '            SwapTokenIn.approve(swap.pool, swap.swapAmount);\n', '\n', '            (uint tokenAmountOut,) = pool.swapExactAmountIn(\n', '                                        swap.tokenIn,\n', '                                        swap.swapAmount,\n', '                                        swap.tokenOut,\n', '                                        swap.limitReturnAmount,\n', '                                        swap.maxPrice\n', '                                    );\n', '            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n', '        }\n', '\n', '        require(totalAmountOut >= minTotalAmountOut, "ERR_LIMIT_OUT");\n', '\n', '        transferAll(tokenOut, totalAmountOut);\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '    }\n', '\n', '    function batchSwapExactOut(\n', '        Swap[] memory swaps,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint maxTotalAmountIn\n', '    )\n', '        public payable\n', '        returns (uint totalAmountIn)\n', '    {\n', '        transferFromAll(tokenIn, maxTotalAmountIn);\n', '\n', '        for (uint i = 0; i < swaps.length; i++) {\n', '            Swap memory swap = swaps[i];\n', '            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '            PoolInterface pool = PoolInterface(swap.pool);\n', '\n', '            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                SwapTokenIn.approve(swap.pool, 0);\n', '            }\n', '            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n', '\n', '            (uint tokenAmountIn,) = pool.swapExactAmountOut(\n', '                                        swap.tokenIn,\n', '                                        swap.limitReturnAmount,\n', '                                        swap.tokenOut,\n', '                                        swap.swapAmount,\n', '                                        swap.maxPrice\n', '                                    );\n', '            totalAmountIn = tokenAmountIn.add(totalAmountIn);\n', '        }\n', '        require(totalAmountIn <= maxTotalAmountIn, "ERR_LIMIT_IN");\n', '\n', '        transferAll(tokenOut, getBalance(tokenOut));\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '\n', '    }\n', '\n', '    function multihopBatchSwapExactIn(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    )\n', '        public payable\n', '        returns (uint totalAmountOut)\n', '    {\n', '\n', '        transferFromAll(tokenIn, totalAmountIn);\n', '\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            uint tokenAmountOut;\n', '            for (uint k = 0; k < swapSequences[i].length; k++) {\n', '                Swap memory swap = swapSequences[i][k];\n', '                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '                if (k == 1) {\n', '                    // Makes sure that on the second swap the output of the first was used\n', '                    // so there is not intermediate token leftover\n', '                    swap.swapAmount = tokenAmountOut;\n', '                }\n', '\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                    SwapTokenIn.approve(swap.pool, 0);\n', '                }\n', '                SwapTokenIn.approve(swap.pool, swap.swapAmount);\n', '                (tokenAmountOut,) = pool.swapExactAmountIn(\n', '                                            swap.tokenIn,\n', '                                            swap.swapAmount,\n', '                                            swap.tokenOut,\n', '                                            swap.limitReturnAmount,\n', '                                            swap.maxPrice\n', '                                        );\n', '            }\n', '            // This takes the amountOut of the last swap\n', '            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n', '        }\n', '\n', '        require(totalAmountOut >= minTotalAmountOut, "ERR_LIMIT_OUT");\n', '\n', '        transferAll(tokenOut, totalAmountOut);\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '\n', '    }\n', '\n', '    function multihopBatchSwapExactOut(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint maxTotalAmountIn\n', '    )\n', '        public payable\n', '        returns (uint totalAmountIn)\n', '    {\n', '\n', '        transferFromAll(tokenIn, maxTotalAmountIn);\n', '\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            uint tokenAmountInFirstSwap;\n', '            // Specific code for a simple swap and a multihop (2 swaps in sequence)\n', '            if (swapSequences[i].length == 1) {\n', '                Swap memory swap = swapSequences[i][0];\n', '                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                    SwapTokenIn.approve(swap.pool, 0);\n', '                }\n', '                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n', '\n', '                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\n', '                                        swap.tokenIn,\n', '                                        swap.limitReturnAmount,\n', '                                        swap.tokenOut,\n', '                                        swap.swapAmount,\n', '                                        swap.maxPrice\n', '                                    );\n', '            } else {\n', '                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\n', '                // of token C. But first we need to buy B with A so we can then buy C with B\n', "                // To get the exact amount of C we then first need to calculate how much B we'll need:\n", '                uint intermediateTokenAmount; // This would be token B as described above\n', '                Swap memory secondSwap = swapSequences[i][1];\n', '                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\n', '                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\n', '                                        poolSecondSwap.getBalance(secondSwap.tokenIn),\n', '                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\n', '                                        poolSecondSwap.getBalance(secondSwap.tokenOut),\n', '                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\n', '                                        secondSwap.swapAmount,\n', '                                        poolSecondSwap.getSwapFee()\n', '                                    );\n', '\n', '                //// Buy intermediateTokenAmount of token B with A in the first pool\n', '                Swap memory firstSwap = swapSequences[i][0];\n', '                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\n', '                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\n', '                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\n', '                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\n', '                }\n', '\n', '                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\n', '                                        firstSwap.tokenIn,\n', '                                        firstSwap.limitReturnAmount,\n', '                                        firstSwap.tokenOut,\n', '                                        intermediateTokenAmount, // This is the amount of token B we need\n', '                                        firstSwap.maxPrice\n', '                                    );\n', '\n', '                //// Buy the final amount of token C desired\n', '                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\n', '                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\n', '                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\n', '                }\n', '\n', '                poolSecondSwap.swapExactAmountOut(\n', '                                        secondSwap.tokenIn,\n', '                                        secondSwap.limitReturnAmount,\n', '                                        secondSwap.tokenOut,\n', '                                        secondSwap.swapAmount,\n', '                                        secondSwap.maxPrice\n', '                                    );\n', '            }\n', '            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\n', '        }\n', '\n', '        require(totalAmountIn <= maxTotalAmountIn, "ERR_LIMIT_IN");\n', '\n', '        transferAll(tokenOut, getBalance(tokenOut));\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '\n', '    }\n', '\n', '    function smartSwapExactIn(\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut,\n', '        uint nPools\n', '    )\n', '        public payable\n', '        returns (uint totalAmountOut)\n', '    {\n', '        Swap[] memory swaps;\n', '        if (isETH(tokenIn)) {\n', '          (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\n', '        } else if (isETH(tokenOut)){\n', '          (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\n', '        } else {\n', '          (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\n', '        }\n', '\n', '        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\n', '    }\n', '\n', '    function smartSwapExactOut(\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountOut,\n', '        uint maxTotalAmountIn,\n', '        uint nPools\n', '    )\n', '        public payable\n', '        returns (uint totalAmountIn)\n', '    {\n', '        Swap[] memory swaps;\n', '        if (isETH(tokenIn)) {\n', '          (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\n', '        } else if (isETH(tokenOut)){\n', '          (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\n', '        } else {\n', '          (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\n', '        }\n', '\n', '        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\n', '    }\n', '\n', '    function viewSplitExactIn(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint swapAmount,\n', '        uint nPools\n', '    )\n', '        public view\n', '        returns (Swap[] memory swaps, uint totalOutput)\n', '    {\n', '        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n', '\n', '        Pool[] memory pools = new Pool[](poolAddresses.length);\n', '        uint sumEffectiveLiquidity;\n', '        for (uint i = 0; i < poolAddresses.length; i++) {\n', '            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n', '            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n', '        }\n', '\n', '        uint[] memory bestInputAmounts = new uint[](pools.length);\n', '        uint totalInputAmount;\n', '        for (uint i = 0; i < pools.length; i++) {\n', '            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n', '            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n', '        }\n', '\n', '        if (totalInputAmount < swapAmount) {\n', '            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n', '        } else {\n', '            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n', '        }\n', '\n', '        swaps = new Swap[](pools.length);\n', '\n', '        for (uint i = 0; i < pools.length; i++) {\n', '            swaps[i] = Swap({\n', '                        pool: pools[i].pool,\n', '                        tokenIn: tokenIn,\n', '                        tokenOut: tokenOut,\n', '                        swapAmount: bestInputAmounts[i],\n', '                        limitReturnAmount: 0,\n', '                        maxPrice: uint(-1)\n', '                    });\n', '        }\n', '\n', '        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\n', '\n', '        return (swaps, totalOutput);\n', '    }\n', '\n', '    function viewSplitExactOut(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint swapAmount,\n', '        uint nPools\n', '    )\n', '        public view\n', '        returns (Swap[] memory swaps, uint totalOutput)\n', '    {\n', '        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n', '\n', '        Pool[] memory pools = new Pool[](poolAddresses.length);\n', '        uint sumEffectiveLiquidity;\n', '        for (uint i = 0; i < poolAddresses.length; i++) {\n', '            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n', '            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n', '        }\n', '\n', '        uint[] memory bestInputAmounts = new uint[](pools.length);\n', '        uint totalInputAmount;\n', '        for (uint i = 0; i < pools.length; i++) {\n', '            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n', '            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n', '        }\n', '        \n', '         if (totalInputAmount < swapAmount) {\n', '            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n', '        } else {\n', '            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n', '        }\n', '\n', '        swaps = new Swap[](pools.length);\n', '\n', '        for (uint i = 0; i < pools.length; i++) {\n', '            swaps[i] = Swap({\n', '                        pool: pools[i].pool,\n', '                        tokenIn: tokenIn,\n', '                        tokenOut: tokenOut,\n', '                        swapAmount: bestInputAmounts[i],\n', '                        limitReturnAmount: uint(-1),\n', '                        maxPrice: uint(-1)\n', '                    });\n', '        }\n', '\n', '        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\n', '\n', '        return (swaps, totalOutput);\n', '    }\n', '\n', '    function getPoolData(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        address poolAddress\n', '    )\n', '        internal view\n', '        returns (Pool memory)\n', '    {\n', '        PoolInterface pool = PoolInterface(poolAddress);\n', '        uint tokenBalanceIn = pool.getBalance(tokenIn);\n', '        uint tokenBalanceOut = pool.getBalance(tokenOut);\n', '        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\n', '        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\n', '        uint swapFee = pool.getSwapFee();\n', '\n', '        uint effectiveLiquidity = calcEffectiveLiquidity(\n', '                                            tokenWeightIn,\n', '                                            tokenBalanceOut,\n', '                                            tokenWeightOut\n', '                                        );\n', '        Pool memory returnPool = Pool({\n', '            pool: poolAddress,\n', '            tokenBalanceIn: tokenBalanceIn,\n', '            tokenWeightIn: tokenWeightIn,\n', '            tokenBalanceOut: tokenBalanceOut,\n', '            tokenWeightOut: tokenWeightOut,\n', '            swapFee: swapFee,\n', '            effectiveLiquidity: effectiveLiquidity\n', '        });\n', '\n', '        return returnPool;\n', '    }\n', '\n', '    function calcEffectiveLiquidity(\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut\n', '    )\n', '        internal pure\n', '        returns (uint effectiveLiquidity)\n', '    {\n', '\n', '        // Bo * wi/(wi+wo)\n', '        effectiveLiquidity = \n', '            tokenWeightIn.mul(BONE).div(\n', '                tokenWeightOut.add(tokenWeightIn)\n', '            ).mul(tokenBalanceOut).div(BONE);\n', '\n', '        return effectiveLiquidity;\n', '    }\n', '\n', '    function calcTotalOutExactIn(\n', '        uint[] memory bestInputAmounts,\n', '        Pool[] memory bestPools\n', '    )\n', '        internal pure\n', '        returns (uint totalOutput)\n', '    {\n', '        totalOutput = 0;\n', '        for (uint i = 0; i < bestInputAmounts.length; i++) {\n', '            uint output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\n', '                                bestPools[i].tokenBalanceIn,\n', '                                bestPools[i].tokenWeightIn,\n', '                                bestPools[i].tokenBalanceOut,\n', '                                bestPools[i].tokenWeightOut,\n', '                                bestInputAmounts[i],\n', '                                bestPools[i].swapFee\n', '                            );\n', '\n', '            totalOutput = totalOutput.add(output);\n', '        }\n', '        return totalOutput;\n', '    }\n', '\n', '    function calcTotalOutExactOut(\n', '        uint[] memory bestInputAmounts,\n', '        Pool[] memory bestPools\n', '    )\n', '        internal pure\n', '        returns (uint totalOutput)\n', '    {\n', '        totalOutput = 0;\n', '        for (uint i = 0; i < bestInputAmounts.length; i++) {\n', '            uint output = PoolInterface(bestPools[i].pool).calcInGivenOut(\n', '                                bestPools[i].tokenBalanceIn,\n', '                                bestPools[i].tokenWeightIn,\n', '                                bestPools[i].tokenBalanceOut,\n', '                                bestPools[i].tokenWeightOut,\n', '                                bestInputAmounts[i],\n', '                                bestPools[i].swapFee\n', '                            );\n', '\n', '            totalOutput = totalOutput.add(output);\n', '        }\n', '        return totalOutput;\n', '    }\n', '\n', '    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\n', '        if (isETH(token)) {\n', '            weth.deposit.value(msg.value)();\n', '        } else {\n', '            require(token.transferFrom(msg.sender, address(this), amount), "ERR_TRANSFER_FAILED");\n', '        }\n', '    }\n', '\n', '    function getBalance(TokenInterface token) internal view returns (uint) {\n', '        if (isETH(token)) {\n', '            return address(this).balance;\n', '        } else {\n', '            return token.balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (isETH(token)) {\n', '            weth.withdraw(amount);\n', '            (bool xfer,) = msg.sender.call.value(amount)("");\n', '            require(xfer, "ERR_ETH_FAILED");\n', '        } else {\n', '            require(token.transfer(msg.sender, amount), "ERR_TRANSFER_FAILED");\n', '        }\n', '    }\n', '\n', '    function isETH(TokenInterface token) internal pure returns(bool) {\n', '        return (address(token) == ETH_ADDRESS);\n', '    }\n', '\n', '    function() external payable {}\n', '}']