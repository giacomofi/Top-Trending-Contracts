['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '/**\n', ' * @title Ownership Contract\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface of DefiBids\n', ' */\n', 'interface BIDSInterface { \n', '    function transfer(address recipient, uint256 amount) external returns(bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function BURN_RATE() external view returns(uint256);\n', '    function isStackingActive() external view returns(bool);\n', '} \n', '\n', '\n', 'contract StakingPoolFunds is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    address public divPoolAddress;\n', '    address public constant bidsTokenAddress = 0x912B38134F395D1BFAb4C6F9db632C31667ACF98;\n', '    \n', '    modifier onlyDivPool() {\n', '        require(divPoolAddress == msg.sender, "Ownable: caller is not the authorized.");\n', '        _;\n', '    }\n', '    \n', '    /*\n', '        Fallback function. It just accepts incoming ETH\n', '    */\n', '    function () payable external {}\n', '    \n', '    function requestDividendRewards() external onlyDivPool returns(uint256 ethRewards, uint256 bidsRewards){\n', '        \n', '        bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));\n', '        \n', '        // Calculate remaining amount to be tranferred at staking portal\n', '        uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();\n', '        bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();\n', '        \n', '        uint256 remainingAmount = bidsRewards;\n', '        if(BURN_RATE > 0){\n', '            uint256 burnAmount = bidsRewards.mul(BURN_RATE).div(1000);\n', '            remainingAmount = remainingAmount.sub(burnAmount);\n', '\n', '        }\n', '        \n', '        if(isStakingActive){\n', '            uint256 amountToStakePool = bidsRewards.mul(10).div(1000);\n', '            remainingAmount = remainingAmount.sub(amountToStakePool);\n', '        }\n', '        \n', '        if(bidsRewards > 0){\n', '            BIDSInterface(bidsTokenAddress).transfer(msg.sender, bidsRewards);\n', '        }\n', '        \n', '        ethRewards = address(this).balance;\n', '        if(ethRewards > 0){\n', '            msg.sender.transfer(ethRewards);\n', '        }\n', '        \n', '        return (ethRewards, remainingAmount);\n', '        \n', '    }\n', '    \n', '    function availableDividendRewards() external view returns(uint256 ethRewards, uint256 bidsRewards){\n', '        \n', '        bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));\n', '        ethRewards = address(this).balance;\n', '        \n', '         // Calculate remaining amount to be tranferred at staking portal\n', '        uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();\n', '        bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();\n', '        \n', '        uint256 remainingAmount = bidsRewards;\n', '        if(BURN_RATE > 0){\n', '            uint256 burnAmount = bidsRewards.mul(BURN_RATE).div(1000);\n', '            remainingAmount = remainingAmount.sub(burnAmount);\n', '        }\n', '        \n', '        if(isStakingActive){\n', '            uint256 amountToStakePool = bidsRewards.mul(10).div(1000);\n', '            remainingAmount = remainingAmount.sub(amountToStakePool);\n', '        }\n', '        \n', '        return (ethRewards, remainingAmount);\n', '        \n', '    }\n', '    \n', '    function setDivPoolAddress(address _a) public onlyOwner returns(bool){\n', '        divPoolAddress = _a;\n', '        return true;\n', '    }\n', '    \n', '}']