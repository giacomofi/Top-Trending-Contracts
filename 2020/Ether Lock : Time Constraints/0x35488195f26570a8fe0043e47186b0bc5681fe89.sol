['////////////////////////////////////////////////////\n', '//******** In the name of god **********************\n', '//******** https://Helixnebula.help  ***************\n', '////p2p blockchain based helping system/////////////\n', '////////////Lottery for EOG Holders/////////////////\n', '//This is an endless profitable cycle for everyone//\n', '////Contact us: support@helixnebula.help////////////\n', '////////////////////////////////////////////////////\n', '\n', 'pragma solidity ^0.5.0;\n', 'contract EIP20Interface {\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', 'contract EOGLottery\n', '{\n', '    address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;\n', '    address owner;\n', '    address public LastMaxWinner;\n', '    address public LastLotteryWinner;\n', '    uint public MinEOG = 5*10**18;\n', '    uint private seed;\n', '    uint public ChargedETH;\n', '    address payable[]  private Competitors;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    constructor() public {\n', '        owner=msg.sender;\n', '    }\n', '    function transferOwnership(address payable _newOwner) external onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '    function GetUserPoints(address _adr) external view returns(uint){\n', '        for(uint i=0 ;i < Competitors.length;i++){\n', '            if( _adr==Competitors[i]){\n', '                return EIP20Interface(EOGAddress).balanceOf(_adr);\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '    function ChangeMinEog(uint _newval,uint _seed) external onlyOwner{\n', '        MinEOG=_newval;\n', '        seed=_seed;\n', '    }\n', '    \n', '    function GetPoints() public view returns(uint){\n', '        uint Maxrand=0;\n', '        for(uint i=0 ;i < Competitors.length;i++){\n', '            if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){\n', '                Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\n', '            }\n', '        }\n', '        return Maxrand;\n', '    }\n', '    function chargeLottery() public payable {\n', '        ChargedETH=msg.value;\n', '    }\n', '    function Random(uint max) public view returns(uint){\n', '        uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max;\n', '        return randomnumber;\n', '    }\n', '    function GetMaxHolder() public view returns(address payable){\n', '       address payable MaxHolder;\n', '       MaxHolder=Competitors[0];\n', '        for(uint i=1 ;i < Competitors.length;i++){\n', '            if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){\n', '                MaxHolder=Competitors[i];\n', '            }\n', '        }\n', '        return MaxHolder;\n', '    }\n', '    function StartLottery() external onlyOwner{\n', '        uint RandNum=Random(GetPoints());\n', '        uint counter=0;\n', '        for(uint i=0 ;i < Competitors.length;i++){\n', '            if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){\n', '                uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\n', '                if(RandNum < counter+tempnum && RandNum >= counter){\n', '                    //uint256 Balance=address(this).balance;\n', '                    if(Competitors[i] != LastLotteryWinner){\n', '                        Competitors[i].transfer((address(this).balance/4)*3);\n', '                        LastLotteryWinner=Competitors[i];\n', '                    }\n', '                    if(Competitors[i] != LastMaxWinner){\n', '                        address payable MaxHold=GetMaxHolder();\n', '                        MaxHold.transfer(address(this).balance);\n', '                        LastMaxWinner=MaxHold;\n', '                    }\n', '                }else{\n', '                    counter += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    function ExistCompetitor(address _adr) internal view returns(bool){\n', '        for(uint i=0 ;i < Competitors.length;i++){\n', '            if(Competitors[i]==_adr){\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '    function Register() public {\n', '        require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);\n', '        require(ExistCompetitor(msg.sender) == false);\n', '        Competitors.push(msg.sender);\n', '    }\n', '    \n', '}']