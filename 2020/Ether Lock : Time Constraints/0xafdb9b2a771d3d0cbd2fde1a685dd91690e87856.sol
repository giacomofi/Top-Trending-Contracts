['/*\n', '    Tomato Private-Sale\n', '    \n', '    Rate: <1eth 1eth=10000   tomato\n', '          <3eth 1eth=10000*2 tomato\n', '\t      <5eth 1eth=10000*3 tomato\n', '\t      >=5eth 1eth=10000*5 tomato\n', '\n', '    Website: https://tomatoswap.xyz\n', '    \n', '*/\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', 'interface token{\n', '    \n', '    function mint(address _to,uint amount) external;\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract PreSale is SafeMath{\n', '    \n', '    uint public tokenExchangeRate; \n', '    \n', '    address public beneficiary;\n', '\n', '    bool public isFunding; \n', '\n', '    token public tokenReward;\n', '\n', '    uint tokenAmount;\n', '\n', '    event tokenMint(address backer,uint amount);     \n', '\n', '    constructor() public {\n', '        \n', '        isFunding = true;  \n', '                     \n', '        beneficiary = msg.sender; \n', '        \n', '         tokenExchangeRate = 10000;\n', '\t\n', '\ttokenReward = token(0xA42Cf329478e15E337CBE0025d19295B72b4bb16);\n', '    }\n', '\n', '    modifier isOwner()  { require(msg.sender == beneficiary); _; }\n', '\n', '    function stopFunding() isOwner external {\n', '        require(isFunding);\n', '        isFunding = false;\n', '    }\n', '\n', '    function startFunding() isOwner external {\n', '        require(!isFunding);\n', '        isFunding = true;\n', '    }\n', '    \n', '    function () public payable {\n', '        buytoken();\n', '    }\n', '    \n', '    function buytoken() public payable {\n', '        \n', '        require(isFunding);\n', '\n', '        require(msg.value > 0);\n', '\n', '\tif (msg.value < 1 ether) {\n', '\n', '\ttokenAmount = safeMult(msg.value, tokenExchangeRate); \n', '\t\n', '\t} else if (msg.value >= 1 ether && msg.value < 3 ether ) {\n', '\n', '\ttokenAmount = safeMult(msg.value, tokenExchangeRate*2); \n', '\n', '\t} else if (msg.value >= 3 ether && msg.value < 5 ether ) {\n', '\n', '\ttokenAmount = safeMult(msg.value, tokenExchangeRate*3); \n', '\t\n', '\t} else {\n', '\n', '        tokenAmount = safeMult(msg.value, tokenExchangeRate*5); \n', '\t\n', '\t}\n', '\n', '        tokenReward.mint(msg.sender,tokenAmount);\n', '\n', '        emit tokenMint(msg.sender, tokenAmount);  \n', '        \n', '    }\n', '    \n', '    function withdraw() isOwner external {  \n', '\n', '    require(msg.sender == beneficiary);\n', '\n', '    beneficiary.transfer(address(this).balance);\n', '\n', '    }\n', '\n', '}']