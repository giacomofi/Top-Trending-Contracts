['pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'KEK' token contract\n", '\n', '// Symbol      : KEK\n', '// Name        : KEK\n', '// Total supply: 70,000,000 (70 million)\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract KEKToken is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "KEK";\n', '    string public  name = "KEK";\n', '    uint256 public decimals = 18;\n', '    uint256 _totalSupply = 7e7 * 10 ** decimals;\n', '    uint256 private stakingRewards = 0;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping(address => bool) allowedPools;\n', '    \n', '    modifier onlyPools(address _caller){\n', '        require(allowedPools[_caller], "UnAuthorized");\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address team, address payable presale, address production, address airdropRewards) public {\n', '        owner = presale;\n', '        \n', '        balances[address(this)] = totalSupply();\n', '\n', '        emit Transfer(address(0),address(this), totalSupply());\n', '\n', '        balances[address(this)] = balances[address(this)].sub(3500000 * 10 ** decimals);\n', '        balances[presale] = balances[presale].add(3500000 * 10 ** decimals);\n', '        emit Transfer(address(this), presale, 3500000 * 10 ** decimals);\n', '\n', '        balances[address(this)] = balances[address(this)].sub(7000000 * 10 ** decimals);\n', '        balances[team] = balances[team].add(7000000 * 10 ** decimals);\n', '        emit Transfer(address(this), team, 7000000 * 10 ** decimals);\n', '\n', '        balances[address(this)] = balances[address(this)].sub(7000000 * 10 ** decimals);\n', '        balances[production] = balances[production].add(7000000 * 10 ** decimals);\n', '        emit Transfer(address(this), production, 7000000 * 10 ** decimals);\n', '\n', '        balances[address(this)] = balances[address(this)].sub(3500000 * 10 ** decimals);\n', '        balances[airdropRewards] = balances[airdropRewards].add(3500000 * 10 ** decimals);\n', '        emit Transfer(address(this), airdropRewards, 3500000 * 10 ** decimals);\n', '        \n', '        stakingRewards = 49000000 * 10 ** decimals; // keep rest of all stakingRewards inside the contract\n', '    }\n', '    \n', '    function claimRewards(uint256 rewards, address rewardedTo) public onlyPools(msg.sender) returns(bool){\n', '        \n', '        // check the address should not be 0\n', '        require(address(rewardedTo) != address(0), "Reward taker shall not be address 0");\n', '        require(stakingRewards > 0, "Insufficient rewards available in KEK");\n', '        \n', '        if(stakingRewards < rewards)\n', '            rewards = stakingRewards;\n', '            \n', '        balances[address(this)] = balances[address(this)].sub(rewards);\n', '        balances[rewardedTo] = balances[rewardedTo].add(rewards);\n', '        emit Transfer(address(this),rewardedTo,rewards); \n', '        \n', '        stakingRewards = stakingRewards.sub(rewards);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function configureAllowedPools(address poolAddress) external onlyOwner{\n', '        require(poolAddress != address(0), "Invalid pool address");\n', '        allowedPools[poolAddress] = true;\n', '    }\n', '    \n', '    function removePools(address poolAddress) external onlyOwner{\n', '        require(poolAddress != address(0), "Invalid pool address");\n', '        allowedPools[poolAddress] = false;\n', '    }\n', '    \n', '    function stakingRewardsAvailable() public view returns(uint256 _rewardsAvailable){\n', '        return stakingRewards;\n', '    }\n', '    \n', '    function getTokensInEmergency(uint256 tokens) public onlyOwner{\n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        balances[owner] = balances[owner].add(tokens);\n', '        emit Transfer(address(this),owner,tokens); \n', '    }\n', '    \n', "    /** ERC20Interface function's implementation **/\n", '\n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens);\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) public override returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // @dev Public function that burns an amount of the token from a given account\n', '    // @param _amount The amount that will be burnt\n', '    // @param _account The tokens to burn from\n', '    // can be used from account owner\n', '    // ------------------------------------------------------------------------\n', '    function burnTokens(uint256 _amount, address _account) public {\n', '        require(msg.sender == _account, "UnAuthorized");\n', '        require(balances[_account] >= _amount, "Insufficient account balance");\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '}']