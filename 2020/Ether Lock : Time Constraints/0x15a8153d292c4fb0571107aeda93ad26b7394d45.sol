['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface sbControllerInterface {\n', '  function requestRewards(address miner, uint256 amount) external;\n', '\n', '  function isValuePoolAccepted(address valuePool) external view returns (bool);\n', '\n', '  function getValuePoolRewards(address valuePool, uint256 day) external view returns (uint256);\n', '\n', '  function getValuePoolMiningFee(address valuePool) external returns (uint256, uint256);\n', '\n', '  function getValuePoolUnminingFee(address valuePool) external returns (uint256, uint256);\n', '\n', '  function getValuePoolClaimingFee(address valuePool) external returns (uint256, uint256);\n', '\n', '  function isServicePoolAccepted(address servicePool) external view returns (bool);\n', '\n', '  function getServicePoolRewards(address servicePool, uint256 day) external view returns (uint256);\n', '\n', '  function getServicePoolClaimingFee(address servicePool) external returns (uint256, uint256);\n', '\n', '  function getServicePoolRequestFeeInWei(address servicePool) external returns (uint256);\n', '\n', '  function getVoteForServicePoolsCount() external view returns (uint256);\n', '\n', '  function getVoteForServicesCount() external view returns (uint256);\n', '\n', '  function getVoteCastersRewards(uint256 dayNumber) external view returns (uint256);\n', '\n', '  function getVoteReceiversRewards(uint256 dayNumber) external view returns (uint256);\n', '\n', '  function getMinerMinMineDays() external view returns (uint256);\n', '\n', '  function getServiceMinMineDays() external view returns (uint256);\n', '\n', '  function getMinerMinMineAmountInWei() external view returns (uint256);\n', '\n', '  function getServiceMinMineAmountInWei() external view returns (uint256);\n', '\n', '  function getValuePoolVestingDays(address valuePool) external view returns (uint256);\n', '\n', '  function getServicePoolVestingDays(address poservicePoolol) external view returns (uint256);\n', '\n', '  function getVoteCasterVestingDays() external view returns (uint256);\n', '\n', '  function getVoteReceiverVestingDays() external view returns (uint256);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface sbStrongValuePoolInterface {\n', '  function mineFor(address miner, uint256 amount) external;\n', '\n', '  function getMinerMineData(address miner, uint256 day)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    );\n', '\n', '  function getMineData(uint256 day)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    );\n', '\n', '  function serviceMinMined(address miner) external view returns (bool);\n', '\n', '  function minerMinMined(address miner) external view returns (bool);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./sbControllerInterface.sol";\n', 'import "./sbStrongValuePoolInterface.sol";\n', '\n', 'contract sbEthFeePool {\n', '    using SafeMath for uint256;\n', '    bool public initDone;\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    address payable public superAdmin;\n', '    address payable public pendingSuperAdmin;\n', '\n', '    sbControllerInterface public sbController;\n', '    sbStrongValuePoolInterface public sbStrongValuePool;\n', '    IERC20 public strongToken;\n', '\n', '    uint256 public superAdminFeeNumerator;\n', '    uint256 public superAdminFeeDenominator;\n', '\n', '    uint256 public logsSumFeeAmount;\n', '    mapping(address => uint256[]) public logsContractFeeDays;\n', '    mapping(address => uint256[]) public logsContractFeeAmounts;\n', '\n', '    address public constant burnAddress = address(\n', '        0x000000000000000000000000000000000000dEaD\n', '    );\n', '\n', '    function init(\n', '        address sbControllerAddress,\n', '        address sbStrongValuePoolAddress,\n', '        address strongTokenAddress,\n', '        address adminAddress,\n', '        address payable superAdminAddress\n', '    ) public {\n', '        require(!initDone, "init done");\n', '        sbController = sbControllerInterface(sbControllerAddress);\n', '        sbStrongValuePool = sbStrongValuePoolInterface(\n', '            sbStrongValuePoolAddress\n', '        );\n', '        strongToken = IERC20(strongTokenAddress);\n', '        admin = adminAddress;\n', '        superAdmin = superAdminAddress;\n', '        initDone = true;\n', '    }\n', '\n', '    function updateSuperAdminFee(uint256 numerator, uint256 denominator)\n', '        public\n', '    {\n', '        require(msg.sender == superAdmin);\n', '        require(denominator != 0, "invalid value");\n', '        superAdminFeeNumerator = numerator;\n', '        superAdminFeeDenominator = denominator;\n', '    }\n', '\n', '    function deposit() public payable {\n', '        uint256 currentDay = _getCurrentDay();\n', '        uint256 len = logsContractFeeDays[msg.sender].length;\n', '        if (len == 0) {\n', '            logsContractFeeDays[msg.sender].push(currentDay);\n', '            logsContractFeeAmounts[msg.sender].push(msg.value);\n', '        } else {\n', '            uint256 lastIndex = logsContractFeeDays[msg.sender].length.sub(1);\n', '            uint256 lastDay = logsContractFeeDays[msg.sender][lastIndex];\n', '            if (lastDay == currentDay) {\n', '                logsContractFeeAmounts[msg\n', '                    .sender][lastIndex] = logsContractFeeAmounts[msg\n', '                    .sender][lastIndex]\n', '                    .add(msg.value);\n', '            } else {\n', '                logsContractFeeDays[msg.sender].push(currentDay);\n', '                logsContractFeeAmounts[msg.sender].push(msg.value);\n', '            }\n', '        }\n', '        uint256 toSuperAdmin = msg.value.mul(superAdminFeeNumerator).div(\n', '            superAdminFeeDenominator\n', '        );\n', '        logsSumFeeAmount = logsSumFeeAmount.add(msg.value);\n', '        superAdmin.transfer(toSuperAdmin);\n', '    }\n', '\n', '    function setPendingAdmin(address newPendingAdmin) public {\n', '        require(msg.sender == admin, "not admin");\n', '        pendingAdmin = newPendingAdmin;\n', '    }\n', '\n', '    function acceptAdmin() public {\n', '        require(\n', '            msg.sender == pendingAdmin && msg.sender != address(0),\n', '            "not pendingAdmin"\n', '        );\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    function setPendingSuperAdmin(address payable newPendingSuperAdmin) public {\n', '        require(msg.sender == superAdmin, "not superAdmin");\n', '        pendingSuperAdmin = newPendingSuperAdmin;\n', '    }\n', '\n', '    function acceptSuperAdmin() public {\n', '        require(\n', '            msg.sender == pendingSuperAdmin && msg.sender != address(0),\n', '            "not pendingSuperAdmin"\n', '        );\n', '        superAdmin = pendingSuperAdmin;\n', '        pendingSuperAdmin = address(0);\n', '    }\n', '\n', '    function getContractFeeData(address cntrct, uint256 dayNumber)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\n', '        return _getContractFeeData(cntrct, day);\n', '    }\n', '\n', '    function _getContractFeeData(address cntrct, uint256 day)\n', '        internal\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        uint256[] memory _Days = logsContractFeeDays[cntrct];\n', '        uint256[] memory _Amounts = logsContractFeeAmounts[cntrct];\n', '        return _get(_Days, _Amounts, day);\n', '    }\n', '\n', '    function _get(\n', '        uint256[] memory _Days,\n', '        uint256[] memory _Units,\n', '        uint256 day\n', '    ) internal pure returns (uint256, uint256) {\n', '        uint256 len = _Days.length;\n', '        if (len == 0) {\n', '            return (day, 0);\n', '        }\n', '        if (day < _Days[0]) {\n', '            return (day, 0);\n', '        }\n', '        uint256 lastIndex = len.sub(1);\n', '        uint256 lastDay = _Days[lastIndex];\n', '        if (day == lastDay) {\n', '            return (day, _Units[lastIndex]);\n', '        }\n', '        return _find(_Days, _Units, day);\n', '    }\n', '\n', '    function _find(\n', '        uint256[] memory _Days,\n', '        uint256[] memory _Units,\n', '        uint256 day\n', '    ) internal pure returns (uint256, uint256) {\n', '        uint256 left = 0;\n', '        uint256 right = _Days.length.sub(1);\n', '        uint256 middle = right.add(left).div(2);\n', '        while (_Days[middle] != day && left < right) {\n', '            if (_Days[middle] > day) {\n', '                right = middle.sub(1);\n', '            } else if (_Days[middle] < day) {\n', '                left = middle.add(1);\n', '            }\n', '            middle = right.add(left).div(2);\n', '        }\n', '        if (_Days[middle] != day) {\n', '            return (day, 0);\n', '        } else {\n', '            return (day, _Units[middle]);\n', '        }\n', '    }\n', '\n', '    function _getCurrentDay() internal view returns (uint256) {\n', '        return block.timestamp.div(1 days).add(1);\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n']
