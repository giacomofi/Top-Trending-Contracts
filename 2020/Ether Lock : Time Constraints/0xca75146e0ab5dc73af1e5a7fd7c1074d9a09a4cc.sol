['// MEE Pair\n', 'pragma solidity 0.5.12;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'contract IMPool is IERC20 {\n', '    function isBound(address t) external view returns (bool);\n', '    function getFinalTokens() external view returns(address[] memory);\n', '    function getBalance(address token) external view returns (uint);\n', '    function setSwapFee(uint swapFee) external;\n', '    function setController(address controller) external;\n', '    function setPublicSwap(bool public_) external;\n', '    function finalize() external;\n', '    function bind(address token, uint balance, uint denorm) external;\n', '    function rebind(address token, uint balance, uint denorm) external;\n', '    function unbind(address token) external;\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function joinswapExternAmountIn(\n', '        address tokenIn, uint tokenAmountIn, uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract PairERC20 is IERC20 {\n', '    using SafeMath for uint;\n', '\n', "    string public constant name = 'Mercurity Pair Token';\n", "    string public constant symbol = 'MPT';\n", '    uint8 public constant decimals = 18;\n', '    uint  public totalSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function _mint(uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[address(this)] = balanceOf[address(this)].add(value);\n', '        emit Transfer(address(0), address(this), value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        require(balanceOf[from] >= value, "ERR_INSUFFICIENT_BAL");\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _move(address from, address to, uint value) internal {\n', '        _transfer(from, to, value);\n', '    }\n', '}\n', '\n', 'contract PairToken is PairERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;           // How many LP tokens or gp amount the user has provided.\n', '        uint256 rewardDebt;       // Reward debt. See explanation below.\n', '    }\n', '    // Controller.\n', '    address private _controller;\n', '    // Pair tokens created per block.\n', '    uint256 private _pairPerBlock;\n', '    // Set gp share reward rate 0%~15%\n', '    uint256 private _gpRate;\n', '    // Pool contract\n', '    IMPool private _pool;\n', '    // Info of each gp.\n', '    address[] private _gpInfo;\n', '    // Info of each user that stakes LP shares;\n', '    mapping(address => UserInfo) public lpInfoList;\n', '    // Info of each user that stakes GP shares;\n', '    mapping(address => UserInfo) public gpInfoList;\n', '\n', '    uint256 private _endBlock;\n', '    uint256 public _totalGpSupply;\n', '    uint256 public _totalLpSupply;\n', '    // Pool Status\n', '    uint256 public _poolLastRewardBlock;\n', '    uint256 public _poolAccPairPerShare;\n', '    uint256 public _poolAccPairGpPerShare;\n', '\n', '    event Deposit(bool isGp, address indexed user, uint256 amount);\n', '    event Withdraw(bool isGp, address indexed user, uint256 amount);\n', '\n', '    constructor(\n', '        address pool,\n', '        uint256 pairPerBlock,\n', '        uint256 rate\n', '    ) public {\n', '        _pool = IMPool(pool);\n', '        _controller = msg.sender;\n', '\n', '        _pairPerBlock = pairPerBlock;\n', '        _endBlock = block.number.add(12500000);\n', '        _poolLastRewardBlock = block.number;\n', '\n', '        require(rate < 100, "ERR_OVER_MAXIMUM");\n', '        _gpRate = rate;\n', '    }\n', '\n', '    function isGeneralPartner(address _user)\n', '    external view\n', '    returns (bool) {\n', '        return gpInfoList[_user].amount > 0;\n', '    }\n', '\n', '    // View function to see pending Pairs on frontend.\n', '    function pendingPair(bool gpReward, address _user) external view returns (uint256) {\n', '\n', '        UserInfo storage user = gpReward ? gpInfoList[_user] : lpInfoList[_user];\n', '\n', '        if (user.amount == 0) {return 0;}\n', '        uint256 rate = gpReward ? _gpRate : 100 - _gpRate;\n', '        uint256 accPerShare = gpReward ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\n', '        uint256 lpSupply = gpReward? _totalGpSupply: _totalLpSupply;\n', '\n', '        if (block.number > _poolLastRewardBlock && lpSupply != 0) {\n', '            uint256 blockNum = block.number.sub(_poolLastRewardBlock);\n', '            uint256 pairReward = blockNum.mul(_pairPerBlock);\n', '            if (_gpRate > 0) {\n', '                pairReward = pairReward.mul(rate).div(100);\n', '            }\n', '            accPerShare = accPerShare.add(pairReward.mul(1e12)).div(lpSupply);\n', '        }\n', '        return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward variables of the given user to be up-to-date.\n', '    function updatePool() public {\n', '        if (block.number <= _poolLastRewardBlock) {return;}\n', '\n', '        if (_totalLpSupply == 0) {\n', '            _poolLastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        if (_poolLastRewardBlock == _endBlock) {return;}\n', '\n', '        uint256 blockNum;\n', '        if (block.number < _endBlock) {\n', '            blockNum = block.number.sub(_poolLastRewardBlock);\n', '            _poolLastRewardBlock = block.number;\n', '        } else {\n', '            blockNum = _endBlock.sub(_poolLastRewardBlock);\n', '            _poolLastRewardBlock = _endBlock;\n', '        }\n', '\n', '        uint256 pairReward = blockNum.mul(_pairPerBlock);\n', '        _mint(pairReward);\n', '\n', '        uint256 lpPairReward;\n', '        if (_gpRate == 0) {\n', '            lpPairReward = pairReward;\n', '        } else {\n', '            uint256 gpReward = pairReward.mul(_gpRate).div(100);\n', '            _poolAccPairGpPerShare = _poolAccPairGpPerShare.add(gpReward.mul(1e12).div(_totalGpSupply));\n', '            lpPairReward = pairReward.sub(gpReward);\n', '        }\n', '\n', '        _poolAccPairPerShare = _poolAccPairPerShare.add(lpPairReward.mul(1e12).div(_totalLpSupply));\n', '    }\n', '\n', '    // add liquidity LP tokens to PairBar for Pair allocation.\n', '    function addLiquidity(bool isGp, address _user, uint256 _amount) external {\n', '        require(msg.sender == address(_pool), "ERR_POOL_ONLY");\n', '        _addLiquidity(isGp, _user, _amount);\n', '    }\n', '\n', '    function _addLiquidity(bool isGp, address _user, uint256 _amount) internal {\n', '        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\n', '\n', '        if (isGp) { require(_gpRate > 0, "ERR_NO_GP_SHARE_REMAIN"); }\n', '\n', '        updatePool();\n', '\n', '        uint256 accPerShare = isGp ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                _move(address(this), _user, pending);\n', '            }\n', '        }\n', '\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.add(_amount);\n', '            if (isGp) {\n', '                _totalGpSupply += _amount;\n', '            } else {\n', '                _totalLpSupply += _amount;\n', '            }\n', '            emit Deposit(isGp, _user, _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\n', '    }\n', '\n', '    function claimPair(bool isGp, address _user) external {\n', '        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\n', '\n', '        if (isGp) { require(_gpRate > 0, "ERR_NO_GP_SHARE_REMAIN"); }\n', '\n', '        updatePool();\n', '\n', '        uint256 accPerShare = isGp ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                _move(address(this), _user, pending);\n', '            }\n', '        }\n', '        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\n', '        return;\n', '    }\n', '\n', '    // remove liquidity LP tokens from PairBar.\n', '    function removeLiquidity(bool isGp, address _user, uint256 _amount) external {\n', '        require(msg.sender == address(_pool), "ERR_POOL_ONLY");\n', '        _removeLiquidity(isGp, _user, _amount);\n', '    }\n', '\n', '    function _removeLiquidity(bool isGp, address _user, uint256 _amount) internal {\n', '        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\n', '        require(user.amount >= _amount, "ERR_UNDER_WITHDRAW_AMOUNT_LIMIT");\n', '\n', '        updatePool();\n', '\n', '        uint256 accPerShare = isGp ? _poolAccPairGpPerShare : _poolAccPairPerShare;\n', '        uint256 totalSupply = isGp ? _totalGpSupply: _totalLpSupply ;\n', '\n', '        uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\n', '        if (pending > 0) {\n', '            _move(address(this), _user, pending);\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            totalSupply -= _amount;\n', '            emit Withdraw(isGp, _user, _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\n', '    }\n', '\n', '    function updateGPInfo(address[] calldata gps, uint256[] calldata amounts) external {\n', '        require(msg.sender == address(_pool), "ERR_POOL_ONLY");\n', '        require(_gpRate > 0, "ERR_NO_GP_SHARE_REMAIN");\n', '        require(gps.length == amounts.length, "ERR_INVALID_PARAM");\n', '\n', '        // init setup\n', '        if (_totalGpSupply == 0) {\n', '            for (uint i = 0; i < gps.length; i++) {\n', '                UserInfo memory user = gpInfoList[gps[i]];\n', '                if (user.amount == 0) {\n', '                    _totalGpSupply += amounts[i];\n', '                    _gpInfo.push(gps[i]);\n', '                }\n', '            }\n', '            for (uint i = 0; i < gps.length; i++) {\n', '                _addLiquidity(true, gps[i], amounts[i]);\n', '            }\n', '            return;\n', '        }\n', '\n', '        for (uint i = 0; i < gps.length; i++) {\n', '            if (gps[i] == address(0)) {\n', '                continue;\n', '            }\n', '            UserInfo memory user = gpInfoList[gps[i]];\n', '            // add new gp\n', '            if (user.amount == 0) {\n', '                _totalGpSupply += amounts[i];\n', '                _addLiquidity(true, gps[i], amounts[i]);\n', '                _gpInfo.push(gps[i]);\n', '            }else if (user.amount > amounts[i]) {\n', '                uint256 shareChange = user.amount.sub(amounts[i]);\n', '                _totalGpSupply -= shareChange;\n', '                _removeLiquidity(true, gps[i], shareChange);\n', '            }else if (user.amount < amounts[i]) {\n', '                uint256 shareChange = amounts[i].sub(user.amount);\n', '                _totalGpSupply += shareChange;\n', '                _addLiquidity(true, gps[i], shareChange);\n', '            }\n', '        }\n', '\n', '        // filter gpInfo find out which gp need to remove\n', '        for (uint i = 0; i < _gpInfo.length; i++) {\n', '            bool needRemove = true;\n', '            for (uint j = 0; j < gps.length; i++) {\n', '                if (gps[i] == _gpInfo[j]) {\n', '                    needRemove = false;\n', '                }\n', '            }\n', '            if (needRemove) {\n', '                UserInfo memory user = gpInfoList[gps[i]];\n', '                _removeLiquidity(true, gps[i], user.amount);\n', '                _totalGpSupply -= user.amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    function setController(address controller) public {\n', '        require(msg.sender == _controller, "ERR_CONTROLLER_ONLY");\n', '        _controller = controller;\n', '    }\n', '\n', '}\n', '\n', 'contract PairFactory {\n', '    address private _controller;\n', '\n', '    mapping(address => address) private _hasPair;\n', '\n', '    constructor() public {\n', '        _controller = msg.sender;\n', '    }\n', '\n', '    function newPair(address pool, uint256 perBlock, uint256 rate)\n', '    external\n', '    returns (PairToken pair)\n', '    {\n', '        require(_hasPair[address(pool)] == address(0), "ERR_ALREADY_HAS_PAIR");\n', '\n', '        pair = new PairToken(pool, perBlock, rate);\n', '        _hasPair[address(pool)] = address(pair);\n', '\n', '        pair.setController(msg.sender);\n', '        return pair;\n', '    }\n', '\n', '\n', '    function getPairToken(address pool)\n', '    external view\n', '    returns (address)\n', '    {\n', '        return _hasPair[pool];\n', '    }\n', '}']