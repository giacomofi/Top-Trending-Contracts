['// "SPDX-License-Identifier: UNLICENSED "\n', 'pragma solidity ^0.6.0;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}']
['// "SPDX-License-Identifier: UNLICENSED "\n', 'pragma solidity ^0.6.0;\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}']
['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./Owned.sol";\n', 'import "./BREE.sol";\n', 'import "./ERC20contract.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract BREE_STAKE_FARM is Owned{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public yieldCollectionFee = 0.01 ether;\n', '    uint256 public stakingPeriod = 30 days;\n', '    uint256 public stakeClaimFee = 0.001 ether;\n', '    uint256 public minStakeLimit = 500 * 10 **(18); //500 BREE\n', '    uint256 public totalYield;\n', '    uint256 public totalRewards;\n', '    \n', '    Token public bree;\n', '    \n', '    struct Tokens{\n', '        bool exists;\n', '        uint256 rate;\n', '    }\n', '    \n', '    mapping(address => Tokens) public tokens;\n', '    address[] TokensAddresses;\n', '    address governance;\n', '    \n', '    struct DepositedToken{\n', '        bool    whitelisted;\n', '        uint256 activeDeposit;\n', '        uint256 totalDeposits;\n', '        uint256 startTime;\n', '        uint256 pendingGains;\n', '        uint256 lastClaimedDate;\n', '        uint256 totalGained;\n', '        uint    rate;\n', '        uint    period;\n', '    }\n', '    \n', '    mapping(address => mapping(address => DepositedToken)) users;\n', '    \n', '    event TokenAdded(address indexed tokenAddress, uint256 indexed APY);\n', '    event TokenRemoved(address indexed tokenAddress, uint256 indexed APY);\n', '    event FarmingRateChanged(address indexed tokenAddress, uint256 indexed newAPY);\n', '    event YieldCollectionFeeChanged(uint256 indexed yieldCollectionFee);\n', '    event FarmingStarted(address indexed _tokenAddress, uint256 indexed _amount);\n', '    event YieldCollected(address indexed _tokenAddress, uint256 indexed _yield);\n', '    event AddedToExistingFarm(address indexed _tokenAddress, uint256 indexed tokens);\n', '    \n', '    event Staked(address indexed staker, uint256 indexed tokens);\n', '    event AddedToExistingStake(address indexed staker, uint256 indexed tokens);\n', '    event StakingRateChanged(uint256 indexed newAPY);\n', '    event TokensClaimed(address indexed claimer, uint256 indexed stakedTokens);\n', '    event RewardClaimed(address indexed claimer, uint256 indexed reward);\n', '    \n', '    event GovernanceSet(address indexed governanceAddress);\n', '    \n', '    modifier validStake(uint256 stakeAmount){\n', '        require(stakeAmount >= minStakeLimit, "stake amount should be equal/greater than min stake limit");\n', '        _;\n', '    }\n', '    \n', '    modifier OwnerOrGovernance(address _caller){\n', '        require(_caller == owner || _caller == governance);\n', '        _;\n', '    }\n', '    \n', '    constructor(address _tokenAddress) public {\n', '        bree = Token(_tokenAddress);\n', '        \n', '        // add bree token to ecosystem\n', '        _addToken(_tokenAddress, 40); // 40 apy initially\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //####################################################FARMING EXTERNAL FUNCTIONS###########################################################################//\n', '    //#########################################################################################################################################################// \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Add assets to farm\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _amount amount of tokens to deposit\n', '    // ------------------------------------------------------------------------\n', '    function Farm(address _tokenAddress, uint256 _amount) external{\n', '        require(_tokenAddress != address(bree), "Use staking instead"); \n', '        \n', '        // add to farm\n', '        _newDeposit(_tokenAddress, _amount);\n', '        \n', '        // transfer tokens from user to the contract balance\n', '        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender, address(this), _amount));\n', '        \n', '        emit FarmingStarted(_tokenAddress, _amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Add more deposits to already running farm\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _amount amount of tokens to deposit\n', '    // ------------------------------------------------------------------------\n', '    function AddToFarm(address _tokenAddress, uint256 _amount) external{\n', '        require(_tokenAddress != address(bree), "use staking instead");\n', '        _addToExisting(_tokenAddress, _amount);\n', '        \n', '        // move the tokens from the caller to the contract address\n', '        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender,address(this), _amount));\n', '        \n', '        emit AddedToExistingFarm(_tokenAddress, _amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Withdraw accumulated yield\n', '    // @param _tokenAddress address of the token asset\n', '    // @required must pay yield claim fee\n', '    // ------------------------------------------------------------------------\n', '    function Yield(address _tokenAddress) external payable {\n', '        require(msg.value >= yieldCollectionFee, "should pay exact claim fee");\n', '        require(PendingYield(_tokenAddress, msg.sender) > 0, "No pending yield");\n', '        require(tokens[_tokenAddress].exists, "Token doesn\'t exist");\n', '        require(_tokenAddress != address(bree), "use staking instead");\n', '    \n', '        uint256 _pendingYield = PendingYield(_tokenAddress, msg.sender);\n', '        \n', '        // Global stats update\n', '        totalYield = totalYield.add(_pendingYield);\n', '        \n', '        // update the record\n', '        users[msg.sender][_tokenAddress].totalGained = users[msg.sender][_tokenAddress].totalGained.add(_pendingYield);\n', '        users[msg.sender][_tokenAddress].lastClaimedDate = now;\n', '        users[msg.sender][_tokenAddress].pendingGains = 0;\n', '        \n', '        // transfer fee to the owner\n', '        owner.transfer(msg.value);\n', '        \n', '        // mint more tokens inside token contract equivalent to _pendingYield\n', '        require(bree.MintTokens(_pendingYield, msg.sender));\n', '        \n', '        emit YieldCollected(_tokenAddress, _pendingYield);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Withdraw any amount of tokens, the contract will update the farming \n', '    // @param _tokenAddress address of the token asset\n', '    // @param _amount amount of tokens to deposit\n', '    // ------------------------------------------------------------------------\n', '    function WithdrawFarmedTokens(address _tokenAddress, uint256 _amount) external {\n', '        require(users[msg.sender][_tokenAddress].activeDeposit >= _amount, "insufficient amount in farming");\n', '        require(_tokenAddress != address(bree), "use withdraw of staking instead");\n', '        \n', '        // update farming stats\n', '            // check if we have any pending yield, add it to previousYield var\n', '            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\n', '            // update amount \n', '            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.sub(_amount);\n', '            // update farming start time -- new farming will begin from this time onwards\n', '            users[msg.sender][_tokenAddress].startTime = now;\n', '            // reset last claimed figure as well -- new farming will begin from this time onwards\n', '            users[msg.sender][_tokenAddress].lastClaimedDate = now;\n', '        \n', '        // withdraw the tokens and move from contract to the caller\n', '        require(ERC20Interface(_tokenAddress).transfer(msg.sender, _amount));\n', '        \n', '        emit TokensClaimed(msg.sender, _amount);\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //####################################################STAKING EXTERNAL FUNCTIONS###########################################################################//\n', '    //#########################################################################################################################################################//    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Start staking\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _amount amount of tokens to deposit\n', '    // ------------------------------------------------------------------------\n', '    function Stake(uint256 _amount) external validStake(_amount) {\n', '        // add new stake\n', '        _newDeposit(address(bree), _amount);\n', '        \n', '        // transfer tokens from user to the contract balance\n', '        require(bree.transferFrom(msg.sender, address(this), _amount));\n', '        \n', '        emit Staked(msg.sender, _amount);\n', '        \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Add more deposits to already running farm\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _amount amount of tokens to deposit\n', '    // ------------------------------------------------------------------------\n', '    function AddToStake(uint256 _amount) external {\n', '        require(now - users[msg.sender][address(bree)].startTime < users[msg.sender][address(bree)].period, "current staking expired");\n', '        _addToExisting(address(bree), _amount);\n', '\n', '        // move the tokens from the caller to the contract address\n', '        require(bree.transferFrom(msg.sender,address(this), _amount));\n', '        \n', '        emit AddedToExistingStake(msg.sender, _amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Claim reward and staked tokens\n', '    // @required user must be a staker\n', '    // @required must be claimable\n', '    // ------------------------------------------------------------------------\n', '    function ClaimStakedTokens() external {\n', '        //require(users[msg.sender][address(bree)].running, "no running stake");\n', '        require(users[msg.sender][address(bree)].activeDeposit > 0, "no running stake");\n', '        require(users[msg.sender][address(bree)].startTime.add(users[msg.sender][address(bree)].period) < now, "not claimable before staking period");\n', '        \n', '        uint256 _currentDeposit = users[msg.sender][address(bree)].activeDeposit;\n', '        \n', '        // check if we have any pending reward, add it to pendingGains var\n', '        users[msg.sender][address(bree)].pendingGains = PendingReward(msg.sender);\n', '        // update amount \n', '        users[msg.sender][address(bree)].activeDeposit = 0;\n', '        \n', '        // transfer staked tokens\n', '        require(bree.transfer(msg.sender, _currentDeposit));\n', '        \n', '        emit TokensClaimed(msg.sender, _currentDeposit);\n', '        \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Claim reward and staked tokens\n', '    // @required user must be a staker\n', '    // @required must be claimable\n', '    // ------------------------------------------------------------------------\n', '    function ClaimReward() external payable {\n', '        require(msg.value >= stakeClaimFee, "should pay exact claim fee");\n', '        require(PendingReward(msg.sender) > 0, "nothing pending to claim");\n', '    \n', '        uint256 _pendingReward = PendingReward(msg.sender);\n', '        \n', '        // add claimed reward to global stats\n', '        totalRewards = totalRewards.add(_pendingReward);\n', '        // add the reward to total claimed rewards\n', '        users[msg.sender][address(bree)].totalGained = users[msg.sender][address(bree)].totalGained.add(_pendingReward);\n', '        // update lastClaim amount\n', '        users[msg.sender][address(bree)].lastClaimedDate = now;\n', '        // reset previous rewards\n', '        users[msg.sender][address(bree)].pendingGains = 0;\n', '        \n', '        // transfer the claim fee to the owner\n', '        owner.transfer(msg.value);\n', '        \n', '        // mint more tokens inside token contract\n', '        require(bree.MintTokens(_pendingReward, msg.sender));\n', '         \n', '        emit RewardClaimed(msg.sender, _pendingReward);\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //##########################################################FARMING QUERIES################################################################################//\n', '    //#########################################################################################################################################################//\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the pending yield\n', '    // @param _tokenAddress address of the token asset\n', '    // ------------------------------------------------------------------------\n', '    function PendingYield(address _tokenAddress, address _caller) public view returns(uint256 _pendingRewardWeis){\n', '        uint256 _totalFarmingTime = now.sub(users[_caller][_tokenAddress].lastClaimedDate);\n', '        \n', '        uint256 _reward_token_second = ((tokens[_tokenAddress].rate).mul(10 ** 21)).div(365 days); // added extra 10^21\n', '        \n', '        uint256 yield = ((users[_caller][_tokenAddress].activeDeposit).mul(_totalFarmingTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // 10^2 are for 100 (%)\n', '        \n', '        return yield.add(users[_caller][_tokenAddress].pendingGains);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the active farm of the user\n', '    // @param farming asset/ token address\n', '    // ------------------------------------------------------------------------\n', '    function ActiveFarmDeposit(address _tokenAddress, address _user) external view returns(uint256 _activeDeposit){\n', '        return users[_user][_tokenAddress].activeDeposit;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the total farming of the user\n', '    // @param farming asset/ token address\n', '    // ------------------------------------------------------------------------\n', '    function YourTotalFarmingTillToday(address _tokenAddress, address _user) external view returns(uint256 _totalFarming){\n', '        return users[_user][_tokenAddress].totalDeposits;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the time of last farming of user\n', '    // ------------------------------------------------------------------------\n', '    function LastFarmedOn(address _tokenAddress, address _user) external view returns(uint256 _unixLastFarmedTime){\n', '        return users[_user][_tokenAddress].startTime;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get total earned rewards from particular farming\n', '    // @param farming asset/ token address\n', '    // ------------------------------------------------------------------------\n', '    function TotalFarmingRewards(address _tokenAddress, address _user) external view returns(uint256 _totalEarned){\n', '        return users[_user][_tokenAddress].totalGained;\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //####################################################FARMING ONLY OWNER FUNCTIONS#########################################################################//\n', '    //#########################################################################################################################################################//\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Links governance contract to this contract\n', '    // @param _govAddress address of the governance contract\n', '    // @required only owner \n', '    // ------------------------------------------------------------------------    \n', '    function setGovernanceContract(address _govAddress) external onlyOwner {\n', '        governance = _govAddress;\n', '        emit GovernanceSet(_govAddress);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Add supported tokens\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _farmingRate rate applied for farming yield to produce\n', '    // @required only owner or governance contract\n', '    // ------------------------------------------------------------------------    \n', '    function AddToken(address _tokenAddress, uint256 _rate) public OwnerOrGovernance(msg.sender) {\n', '        _addToken(_tokenAddress, _rate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Remove tokens if no longer supported\n', '    // @param _tokenAddress address of the token asset\n', '    // @required only owner or governance contract\n', '    // ------------------------------------------------------------------------  \n', '    function RemoveToken(address _tokenAddress) public OwnerOrGovernance(msg.sender) {\n', '        \n', '        require(tokens[_tokenAddress].exists, "token doesn\'t exist");\n', '        \n', '        tokens[_tokenAddress].exists = false;\n', '        \n', '        emit TokenRemoved(_tokenAddress, tokens[_tokenAddress].rate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Change farming rate of the supported token\n', '    // @param _tokenAddress address of the token asset\n', '    // @param _newFarmingRate new rate applied for farming yield to produce\n', '    // @required only owner or governance contract\n', '    // ------------------------------------------------------------------------  \n', '    function ChangeFarmingRate(address _tokenAddress, uint256 _newFarmingRate) public OwnerOrGovernance(msg.sender) {\n', '        \n', '        require(tokens[_tokenAddress].exists, "token doesn\'t exist");\n', '        \n', '        tokens[_tokenAddress].rate = _newFarmingRate;\n', '        \n', '        emit FarmingRateChanged(_tokenAddress, _newFarmingRate);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Change Yield collection fee\n', '    // @param _fee fee to claim the yield\n', '    // @required only owner or governance contract\n', '    // ------------------------------------------------------------------------     \n', '    function SetYieldCollectionFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\n', '        yieldCollectionFee = _fee;\n', '        emit YieldCollectionFeeChanged(_fee);\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //####################################################STAKING QUERIES######################################################################################//\n', '    //#########################################################################################################################################################//\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the pending reward\n', '    // ------------------------------------------------------------------------\n', '    function PendingReward(address _caller) public view returns(uint256 _pendingReward){\n', '        uint256 _totalStakedTime = 0;\n', '        uint256 expiryDate = (users[_caller][address(bree)].period).add(users[_caller][address(bree)].startTime);\n', '        \n', '        if(now < expiryDate)\n', '            _totalStakedTime = now.sub(users[_caller][address(bree)].lastClaimedDate);\n', '        else{\n', '            if(users[_caller][address(bree)].lastClaimedDate >= expiryDate) // if claimed after expirydate already\n', '                _totalStakedTime = 0;\n', '            else\n', '                _totalStakedTime = expiryDate.sub(users[_caller][address(bree)].lastClaimedDate);\n', '        }\n', '            \n', '        uint256 _reward_token_second = ((users[_caller][address(bree)].rate).mul(10 ** 21)); // added extra 10^21\n', '        uint256 reward =  ((users[_caller][address(bree)].activeDeposit).mul(_totalStakedTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // the two extra 10^2 is for 100 (%) // another two extra 10^4 is for decimals to be allowed\n', '        reward = reward.div(365 days);\n', '        return (reward.add(users[_caller][address(bree)].pendingGains));\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the active stake of the user\n', '    // ------------------------------------------------------------------------\n', '    function YourActiveStake(address _user) external view returns(uint256 _activeStake){\n', '        return users[_user][address(bree)].activeDeposit;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the total stakes of the user\n', '    // ------------------------------------------------------------------------\n', '    function YourTotalStakesTillToday(address _user) external view returns(uint256 _totalStakes){\n', '        return users[_user][address(bree)].totalDeposits;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the time of last stake of user\n', '    // ------------------------------------------------------------------------\n', '    function LastStakedOn(address _user) public view returns(uint256 _unixLastStakedTime){\n', '        return users[_user][address(bree)].startTime;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get total earned rewards from stake\n', '    // ------------------------------------------------------------------------\n', '    function TotalStakeRewardsClaimedTillToday(address _user) external view returns(uint256 _totalEarned){\n', '        return users[_user][address(bree)].totalGained;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the staking rate\n', '    // ------------------------------------------------------------------------\n', '    function LatestStakingRate() external view returns(uint256 APY){\n', '        return tokens[address(bree)].rate;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the staking rate you staked at\n', '    // ------------------------------------------------------------------------\n', '    function YourStakingRate(address _user) external view returns(uint256 _stakingRate){\n', '        return users[_user][address(bree)].rate;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the staking period you staked at\n', '    // ------------------------------------------------------------------------\n', '    function YourStakingPeriod(address _user) external view returns(uint256 _stakingPeriod){\n', '        return users[_user][address(bree)].period;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the staking time left\n', '    // ------------------------------------------------------------------------\n', '    function StakingTimeLeft(address _user) external view returns(uint256 _secsLeft){\n', '        uint256 left = 0; \n', '        uint256 expiryDate = (users[_user][address(bree)].period).add(LastStakedOn(_user));\n', '        \n', '        if(now < expiryDate)\n', '            left = expiryDate.sub(now);\n', '            \n', '        return left;\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //####################################################STAKING ONLY OWNER FUNCTION##########################################################################//\n', '    //#########################################################################################################################################################//\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Change staking rate\n', '    // @param _newStakingRate new rate applied for staking\n', '    // @required only owner or governance contract\n', '    // ------------------------------------------------------------------------  \n', '    function ChangeStakingRate(uint256 _newStakingRate) public OwnerOrGovernance(msg.sender){\n', '        \n', '        tokens[address(bree)].rate = _newStakingRate;\n', '        \n', '        emit StakingRateChanged(_newStakingRate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Change the min stake limit\n', '    // @param _minStakeLimit minimum stake limit value\n', '    // @required only callable by owner or governance contract\n', '    // ------------------------------------------------------------------------\n', '    function SetMinStakeLimit(uint256 _minStakeLimit) public OwnerOrGovernance(msg.sender){\n', '       minStakeLimit = _minStakeLimit;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Change the staking period\n', '    // @param _seconds number of seconds to stake (n days = n*24*60*60)\n', '    // @required only callable by owner or governance contract\n', '    // ------------------------------------------------------------------------\n', '    function SetStakingPeriod(uint256 _seconds) public OwnerOrGovernance(msg.sender){\n', '       stakingPeriod = _seconds;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Change the staking claim fee\n', '    // @param _fee claim fee in weis\n', '    // @required only callable by owner or governance contract\n', '    // ------------------------------------------------------------------------\n', '    function SetClaimFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\n', '       stakeClaimFee = _fee;\n', '    }\n', '    \n', '    //#########################################################################################################################################################//\n', '    //################################################################COMMON UTILITIES#########################################################################//\n', '    //#########################################################################################################################################################//    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Internal function to add new deposit\n', '    // ------------------------------------------------------------------------        \n', '    function _newDeposit(address _tokenAddress, uint256 _amount) internal{\n', '        require(users[msg.sender][_tokenAddress].activeDeposit ==  0, "Already running");\n', '        require(tokens[_tokenAddress].exists, "Token doesn\'t exist");\n', '        \n', '        // add that token into the contract balance\n', '        // check if we have any pending reward/yield, add it to pendingGains variable\n', '        if(_tokenAddress == address(bree)){\n', '            users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\n', '            users[msg.sender][_tokenAddress].period = stakingPeriod;\n', '            users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate for stakers will be fixed at time of staking\n', '        }\n', '        else\n', '            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\n', '            \n', '        users[msg.sender][_tokenAddress].activeDeposit = _amount;\n', '        users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\n', '        users[msg.sender][_tokenAddress].startTime = now;\n', '        users[msg.sender][_tokenAddress].lastClaimedDate = now;\n', '        \n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Internal function to add to existing deposit\n', '    // ------------------------------------------------------------------------        \n', '    function _addToExisting(address _tokenAddress, uint256 _amount) internal{\n', '        require(tokens[_tokenAddress].exists, "Token doesn\'t exist");\n', '        // require(users[msg.sender][_tokenAddress].running, "no running farming/stake");\n', '        require(users[msg.sender][_tokenAddress].activeDeposit > 0, "no running farming/stake");\n', '        // update farming stats\n', '            // check if we have any pending reward/yield, add it to pendingGains variable\n', '            if(_tokenAddress == address(bree)){\n', '                users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\n', '                users[msg.sender][_tokenAddress].period = stakingPeriod;\n', '                users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate of only staking will be updated when more is added to stake\n', '            }\n', '            else\n', '                users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\n', '            // update current deposited amount \n', '            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.add(_amount);\n', '            // update total deposits till today\n', '            users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\n', '            // update new deposit start time -- new stake/farming will begin from this time onwards\n', '            users[msg.sender][_tokenAddress].startTime = now;\n', '            // reset last claimed figure as well -- new stake/farming will begin from this time onwards\n', '            users[msg.sender][_tokenAddress].lastClaimedDate = now;\n', '            \n', '            \n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Internal function to add token\n', '    // ------------------------------------------------------------------------     \n', '    function _addToken(address _tokenAddress, uint256 _rate) internal{\n', '        require(!tokens[_tokenAddress].exists, "token already exists");\n', '        \n', '        tokens[_tokenAddress] = Tokens({\n', '            exists: true,\n', '            rate: _rate\n', '        });\n', '        \n', '        TokensAddresses.push(_tokenAddress);\n', '        emit TokenAdded(_tokenAddress, _rate);\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n']
['// "SPDX-License-Identifier: UNLICENSED "\n', 'pragma solidity ^0.6.0;\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}']
['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'BREE' token contract\n", '\n', '// Symbol      : BREE \n', '// Name        : CBDAO \n', '// Total supply: 10 million\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', "import './SafeMath.sol';\n", "import './ERC20contract.sol';\n", "import './Owned.sol';\n", '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Token is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "BREE";\n', '    string public  name = "CBDAO";\n', '    uint256 public decimals = 18;\n', '    uint256 private maxCapSupply = 1e7 * 10**(decimals); // 10 million\n', '    uint256 _totalSupply = 1530409 * 10 ** (decimals); // 1,530,409\n', '    address stakeFarmingContract;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        // mint _totalSupply amount of tokens and send to owner\n', '        balances[owner] = balances[owner].add(_totalSupply);\n', '        emit Transfer(address(0),owner, _totalSupply);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Set the STAKE_FARMING_CONTRACT\n', '    // @required only owner\n', '    // ------------------------------------------------------------------------\n', '    function SetStakeFarmingContract(address _address) external onlyOwner{\n', '        require(_address != address(0), "Invalid address");\n', '        stakeFarmingContract = _address;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token Minting function\n', '    // @params _amount expects the amount of tokens to be minted excluding the \n', '    // required decimals\n', '    // @params _beneficiary tokens will be sent to _beneficiary\n', '    // @required only owner OR stakeFarmingContract\n', '    // ------------------------------------------------------------------------\n', '    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\n', '        require(msg.sender == stakeFarmingContract);\n', '        require(_beneficiary != address(0), "Invalid address");\n', '        require(_totalSupply.add(_amount) <= maxCapSupply, "exceeds max cap supply 10 million");\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        \n', '        // mint _amount tokens and keep inside contract\n', '        balances[_beneficiary] = balances[_beneficiary].add(_amount);\n', '        \n', '        emit Transfer(address(0),_beneficiary, _amount);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Burn the `_amount` amount of tokens from the calling `account`\n', '    // @params _amount the amount of tokens to burn\n', '    // ------------------------------------------------------------------------\n', '    function BurnTokens(uint256 _amount) external {\n', '        _burn(_amount, msg.sender);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // @dev Internal function that burns an amount of the token from a given account\n', '    // @param _amount The amount that will be burnt\n', '    // @param _account The tokens to burn from\n', '    // ------------------------------------------------------------------------\n', '    function _burn(uint256 _amount, address _account) internal {\n', '        require(balances[_account] >= _amount, "insufficient account balance");\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '    \n', "    /** ERC20Interface function's implementation **/\n", '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the total supply of the `token`\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply; \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns  (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to].add(tokens) >= balances[to]);\n', '            \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        require(from != address(0), "Invalid address");\n', '        require(to != address(0), "Invalid address");\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '}']
