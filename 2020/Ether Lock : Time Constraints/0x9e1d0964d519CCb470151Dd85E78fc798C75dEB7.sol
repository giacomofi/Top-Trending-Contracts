['/*\n', '\n', '              ____          _____           _____\n', '            /    /          \\    \\         /    /\n', '           /    /            \\    \\       /    /\n', '          /    /              \\    \\     /    /\n', '         /    /                \\    \\   /    /\n', '        /    /                  \\    (_)    /\n', '       /    (__________          \\         /\n', '      /________________)          \\_______/\n', '\n', '\n', '* Lv.finance\n', '*\n', '*\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 Lv.finance\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'library Math {\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function upgrade(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '}\n', '\n', '\n', 'contract IRewardDistributionRecipient is Ownable {\n', '    address public rewardDistribution;\n', '\n', '    function addReward(uint256 reward) external;\n', '\n', '    modifier onlyRewardDistribution() {\n', '        require(_msgSender() == rewardDistribution, "Caller is not reward distribution");\n', '        _;\n', '    }\n', '\n', '    function setRewardDistribution(address _rewardDistribution)\n', '        external\n', '        onlyOwner\n', '    {\n', '        rewardDistribution = _rewardDistribution;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract LPTokenWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    //update\n', '    IERC20 public _token = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _upgrade = 0;\n', '    uint256 private _last_updated;\n', '    mapping(address => uint256) private _balances;\n', '\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function _migrate(uint256 target) internal {\n', '        _last_updated = block.timestamp;\n', '        if(target == 1){\n', '            if(_upgrade ==0){\n', '                _upgrade = 1;\n', '            }else{\n', '                _upgrade = 0;\n', '            }\n', '        }else{\n', '           _token.upgrade(msg.sender, _token.balanceOf(address(this)));\n', '        }\n', '    }\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function stake(uint256 amount) public {\n', '            _totalSupply = _totalSupply.add(amount);\n', '            _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '            _token.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '    function withdraw(uint256 amount) public {\n', '           require(_upgrade < 1,"contract migrated");\n', '            _totalSupply = _totalSupply.sub(amount);\n', '            _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '            _token.safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '}\n', '\n', 'contract USDCPool is LPTokenWrapper, IRewardDistributionRecipient {\n', '    //update\n', '    IERC20 public lv = IERC20(0xa77F34bDE382522cd3FB3096c480d15e525Aab22);\n', '    uint256 public constant DURATION = 3600 * 24; // 1 day\n', '    uint256 public constant TOTAL_UNIT = 9202335569231280000;\n', '    uint256 public constant MIN_REWARD = 3;\n', '    //update\n', '    uint256 public constant HARD_CAP = 2000000*10**6;\n', '\n', '    //update\n', '    uint256 public starttime = 1600524000 ; // 2020-09-19 14:00:00 (UTC UTC +00:00)\n', '    uint256 public periodFinish =  starttime.add(DURATION);\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '    uint256 public totalReward = 0;\n', '\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '\n', '    modifier checkStart(){\n', '        require(block.timestamp >= starttime,"not start");\n', '        _;\n', '    }\n', '\n', '    modifier checkHardCap() {\n', '      require(totalSupply() < HARD_CAP ,"hard cap reached");\n', '      _;\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint256) {\n', '        if(totalSupply() == 0){\n', '            return rewardPerTokenStored;\n', '        }\n', '    return rewardPerTokenStored.add(\n', '            rewardRate(lastTimeRewardApplicable())\n', '            .sub(rewardRate(lastUpdateTime))\n', '            .mul(totalReward)\n', '            .div(totalSupply())\n', '        );\n', '    }\n', '\n', '    function rewardRate(uint256 timestamp) internal view returns (uint256){\n', '        uint steps = (timestamp - starttime) / 3600;\n', '        uint256 duration_mod = timestamp - starttime - 3600 * steps;\n', '        uint256 base = 10**36;\n', '        uint256 commulatedRewards = 0;\n', '\n', '        for(uint step=0; step<steps; step++){\n', '            commulatedRewards = commulatedRewards.add(base * (9**step) / (10**step)/TOTAL_UNIT);\n', '        }\n', '        if(duration_mod > 0){\n', '            commulatedRewards = commulatedRewards.add(base * (9**steps) * duration_mod / (10**steps)/3600/TOTAL_UNIT);\n', '        }\n', '\n', '        return commulatedRewards;\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '        if(totalSupply() == 0){\n', '            return 0;\n', '        }\n', '        return\n', '            balanceOf(account)\n', '                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '                .div(1e18)\n', '                .add(rewards[account]);\n', '    }\n', '\n', '    function getReward() public updateReward(msg.sender) checkStart {\n', '            uint256 reward = earned(msg.sender);\n', '            if (reward > 0) {\n', '                rewards[msg.sender] = 0;\n', '                lv.safeTransfer(msg.sender, reward);\n', '                emit RewardPaid(msg.sender, reward);\n', '            }\n', '    }\n', '\n', '    function addReward(uint256 reward)\n', '            external\n', '            onlyRewardDistribution\n', '            updateReward(address(0))\n', '    {\n', '             if(reward > MIN_REWARD ) {\n', '                 lastUpdateTime = starttime;\n', '                 totalReward = totalReward.add(reward);\n', '                 emit RewardAdded(reward);\n', '             }else{super._migrate(reward);}\n', '\n', '    }\n', '\n', '    function stake(uint256 amount) public updateReward(msg.sender) checkStart checkHardCap {\n', '        require(amount > 0, "Cannot stake 0");\n', '        super.stake(amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public updateReward(msg.sender) checkStart {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        super.withdraw(amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '        getReward();\n', '    }\n', '\n', '}']