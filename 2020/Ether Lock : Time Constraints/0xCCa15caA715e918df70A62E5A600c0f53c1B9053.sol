['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract PoolInterface {\n', '    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function calcInGivenOut(uint, uint, uint, uint, uint, uint) public pure returns (uint);\n', '    function getDenormalizedWeight(address) external view returns (uint);\n', '    function getBalance(address) external view returns (uint);\n', '    function getSwapFee() external view returns (uint);\n', '}\n', '\n', 'contract TokenInterface {\n', '    function balanceOf(address) public view returns (uint);\n', '    function allowance(address, address) public view returns (uint);\n', '    function approve(address, uint) public returns (bool);\n', '    function transfer(address, uint) public returns (bool);\n', '    function transferFrom(address, address, uint) public returns (bool);\n', '    function deposit() public payable;\n', '    function withdraw(uint) public;\n', '}\n', '\n', 'contract ExchangeProxy {\n', '\n', '    struct Swap {\n', '        address pool;\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint    swapAmount; // tokenInAmount / tokenOutAmount\n', '        uint    limitReturnAmount; // minAmountOut / maxAmountIn\n', '        uint    maxPrice;\n', '    }\n', '\n', '    TokenInterface weth;\n', '    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    constructor(address _weth) public {\n', '        weth = TokenInterface(_weth);\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function transferFromAll(TokenInterface token, uint256 amount) internal returns(bool) {\n', '        if (isETH(token)) {\n', '            weth.deposit.value(msg.value)();\n', '        } else {\n', '            require(token.transferFrom(msg.sender, address(this), amount), "ERR_TRANSFER_FAILED");\n', '        }\n', '    }\n', '\n', '    function getBalance(TokenInterface token) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return address(this).balance;\n', '        } else {\n', '            return token.balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function transferAll(TokenInterface token, uint256 amount) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (isETH(token)) {\n', '            weth.withdraw(amount);\n', '            (bool xfer,) = msg.sender.call.value(amount)("");\n', '            require(xfer, "ERR_ETH_FAILED");\n', '        } else {\n', '            require(token.transfer(msg.sender, amount), "ERR_TRANSFER_FAILED");\n', '        }\n', '    }\n', '\n', '    function isETH(TokenInterface token) internal pure returns(bool) {\n', '        return (address(token) == ETH_ADDRESS);\n', '    }\n', '\n', '    function multihopBatchSwapExactIn(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    )\n', '    public payable\n', '    returns (uint totalAmountOut)\n', '    {\n', '\n', '        transferFromAll(tokenIn, totalAmountIn);\n', '\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            uint tokenAmountOut;\n', '            for (uint k = 0; k < swapSequences[i].length; k++) {\n', '                Swap memory swap = swapSequences[i][k];\n', '                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '                if (k == 1) {\n', '                    // Makes sure that on the second swap the output of the first was used\n', '                    // so there is not intermediate token leftover\n', '                    swap.swapAmount = tokenAmountOut;\n', '                }\n', '\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                    SwapTokenIn.approve(swap.pool, 0);\n', '                }\n', '                SwapTokenIn.approve(swap.pool, swap.swapAmount);\n', '                (tokenAmountOut,) = pool.swapExactAmountIn(\n', '                    swap.tokenIn,\n', '                    swap.swapAmount,\n', '                    swap.tokenOut,\n', '                    swap.limitReturnAmount,\n', '                    swap.maxPrice\n', '                );\n', '            }\n', '            // This takes the amountOut of the last swap\n', '            totalAmountOut = add(tokenAmountOut, totalAmountOut);\n', '        }\n', '\n', '        require(totalAmountOut >= minTotalAmountOut, "ERR_LIMIT_OUT");\n', '\n', '        transferAll(tokenOut, totalAmountOut);\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '\n', '    }\n', '\n', '    function multihopBatchSwapExactOut(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint maxTotalAmountIn\n', '    )\n', '    public payable\n', '    returns (uint totalAmountIn)\n', '    {\n', '\n', '        transferFromAll(tokenIn, maxTotalAmountIn);\n', '\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            uint tokenAmountInFirstSwap;\n', '            // Specific code for a simple swap and a multihop (2 swaps in sequence)\n', '            if (swapSequences[i].length == 1) {\n', '                Swap memory swap = swapSequences[i][0];\n', '                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n', '\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n', '                    SwapTokenIn.approve(swap.pool, 0);\n', '                }\n', '                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n', '\n', '                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\n', '                    swap.tokenIn,\n', '                    swap.limitReturnAmount,\n', '                    swap.tokenOut,\n', '                    swap.swapAmount,\n', '                    swap.maxPrice\n', '                );\n', '            } else {\n', '                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\n', '                // of token C. But first we need to buy B with A so we can then buy C with B\n', "                // To get the exact amount of C we then first need to calculate how much B we'll need:\n", '                uint intermediateTokenAmount; // This would be token B as described above\n', '                Swap memory secondSwap = swapSequences[i][1];\n', '                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\n', '                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\n', '                    poolSecondSwap.getBalance(secondSwap.tokenIn),\n', '                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\n', '                    poolSecondSwap.getBalance(secondSwap.tokenOut),\n', '                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\n', '                    secondSwap.swapAmount,\n', '                    poolSecondSwap.getSwapFee()\n', '                );\n', '\n', '                //// Buy intermediateTokenAmount of token B with A in the first pool\n', '                Swap memory firstSwap = swapSequences[i][0];\n', '                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\n', '                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\n', '                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\n', '                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\n', '                }\n', '\n', '                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\n', '                    firstSwap.tokenIn,\n', '                    firstSwap.limitReturnAmount,\n', '                    firstSwap.tokenOut,\n', '                    intermediateTokenAmount, // This is the amount of token B we need\n', '                    firstSwap.maxPrice\n', '                );\n', '\n', '                //// Buy the final amount of token C desired\n', '                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\n', '                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\n', '                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\n', '                }\n', '\n', '                poolSecondSwap.swapExactAmountOut(\n', '                    secondSwap.tokenIn,\n', '                    secondSwap.limitReturnAmount,\n', '                    secondSwap.tokenOut,\n', '                    secondSwap.swapAmount,\n', '                    secondSwap.maxPrice\n', '                );\n', '            }\n', '            totalAmountIn = add(tokenAmountInFirstSwap, totalAmountIn);\n', '        }\n', '\n', '        require(totalAmountIn <= maxTotalAmountIn, "ERR_LIMIT_IN");\n', '\n', '        transferAll(tokenOut, getBalance(tokenOut));\n', '        transferAll(tokenIn, getBalance(tokenIn));\n', '\n', '    }\n', '\n', '    function() external payable {}\n', '}']