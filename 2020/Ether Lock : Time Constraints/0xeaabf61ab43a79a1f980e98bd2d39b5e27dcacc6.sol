['pragma solidity 0.4.25;\n', '\n', '// File: contracts/sogur/interfaces/IModelDataSource.sol\n', '\n', '/**\n', ' * @title Model Data Source Interface.\n', ' */\n', 'interface IModelDataSource {\n', '    /**\n', '     * @dev Get interval parameters.\n', '     * @param _rowNum Interval row index.\n', '     * @param _colNum Interval column index.\n', '     * @return Interval minimum amount of SGR.\n', '     * @return Interval maximum amount of SGR.\n', '     * @return Interval minimum amount of SDR.\n', '     * @return Interval maximum amount of SDR.\n', '     * @return Interval alpha value (scaled up).\n', '     * @return Interval beta  value (scaled up).\n', '     */\n', '    function getInterval(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\n', '\n', '    /**\n', '     * @dev Get interval alpha and beta.\n', '     * @param _rowNum Interval row index.\n', '     * @param _colNum Interval column index.\n', '     * @return Interval alpha value (scaled up).\n', '     * @return Interval beta  value (scaled up).\n', '     */\n', '    function getIntervalCoefs(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256);\n', '\n', '    /**\n', '     * @dev Get the amount of SGR required for moving to the next minting-point.\n', '     * @param _rowNum Interval row index.\n', '     * @return Required amount of SGR.\n', '     */\n', '    function getRequiredMintAmount(uint256 _rowNum) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/sogur/interfaces/IMintingPointTimersManager.sol\n', '\n', '/**\n', ' * @title Minting Point Timers Manager Interface.\n', ' */\n', 'interface IMintingPointTimersManager {\n', '    /**\n', '     * @dev Start a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be either 'running' or 'expired'.\n", '     */\n', '    function start(uint256 _id) external;\n', '\n', '    /**\n', '     * @dev Reset a given timestamp.\n', '     * @param _id The ID of the timestamp.\n', "     * @notice When tested, this timestamp will be neither 'running' nor 'expired'.\n", '     */\n', '    function reset(uint256 _id) external;\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'running'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'running'.\n", "     * @notice Even if this timestamp is not 'running', it is not necessarily 'expired'.\n", '     */\n', '    function running(uint256 _id) external view returns (bool);\n', '\n', '    /**\n', "     * @dev Get an indication of whether or not a given timestamp is 'expired'.\n", '     * @param _id The ID of the timestamp.\n', "     * @return An indication of whether or not a given timestamp is 'expired'.\n", "     * @notice Even if this timestamp is not 'expired', it is not necessarily 'running'.\n", '     */\n', '    function expired(uint256 _id) external view returns (bool);\n', '}\n', '\n', '// File: contracts/sogur/interfaces/ISGRAuthorizationManager.sol\n', '\n', '/**\n', ' * @title SGR Authorization Manager Interface.\n', ' */\n', 'interface ISGRAuthorizationManager {\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to buy SGR.\n', '     * @param _sender The address of the user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToBuy(address _sender) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to sell SGR.\n', '     * @param _sender The address of the user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToSell(address _sender) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to transfer SGR to another user.\n', '     * @param _sender The address of the source user.\n', '     * @param _target The address of the target user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to transfer SGR from one user to another user.\n', '     * @param _sender The address of the custodian user.\n', '     * @param _source The address of the source user.\n', '     * @param _target The address of the target user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized for public operation.\n', '     * @param _sender The address of the user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\n', '}\n', '\n', '// File: contracts/sogur/interfaces/IMintListener.sol\n', '\n', '/**\n', ' * @title Mint Listener Interface.\n', ' */\n', 'interface IMintListener {\n', '    /**\n', '     * @dev Mint SGR for SGN holders.\n', '     * @param _value The amount of SGR to mint.\n', '     */\n', '    function mintSgrForSgnHolders(uint256 _value) external;\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/IMintHandler.sol\n', '\n', '/**\n', ' * @title Mint Handler Interface.\n', ' */\n', 'interface IMintHandler {\n', '    /**\n', '     * @dev Upon minting of SGN vested in delay.\n', '     * @param _index The minting-point index.\n', '     */\n', '    function mintSgnVestedInDelay(uint256 _index) external;\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/IMintManager.sol\n', '\n', '/**\n', ' * @title Mint Manager Interface.\n', ' */\n', 'interface IMintManager {\n', '    /**\n', '     * @dev Return the current minting-point index.\n', '     */\n', '    function getIndex() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Interface.\n', ' */\n', 'interface IContractAddressLocator {\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) external view returns (address);\n', '\n', '    /**\n', '     * @dev Determine whether or not a contract address relates to one of the identifiers.\n', '     * @param _contractAddress The contract address to look for.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the contract address relates to one of the identifiers.\n', '     */\n', '    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n', '}\n', '\n', '// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Holder.\n', ' * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n', ' * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n', ' * @dev Thus, any contract can remain "oblivious" to the replacement of any other contract in the system.\n', ' * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n', ' */\n', 'contract ContractAddressLocatorHolder {\n', '    bytes32 internal constant _IAuthorizationDataSource_ = "IAuthorizationDataSource";\n', '    bytes32 internal constant _ISGNConversionManager_    = "ISGNConversionManager"      ;\n', '    bytes32 internal constant _IModelDataSource_         = "IModelDataSource"        ;\n', '    bytes32 internal constant _IPaymentHandler_          = "IPaymentHandler"            ;\n', '    bytes32 internal constant _IPaymentManager_          = "IPaymentManager"            ;\n', '    bytes32 internal constant _IPaymentQueue_            = "IPaymentQueue"              ;\n', '    bytes32 internal constant _IReconciliationAdjuster_  = "IReconciliationAdjuster"      ;\n', '    bytes32 internal constant _IIntervalIterator_        = "IIntervalIterator"       ;\n', '    bytes32 internal constant _IMintHandler_             = "IMintHandler"            ;\n', '    bytes32 internal constant _IMintListener_            = "IMintListener"           ;\n', '    bytes32 internal constant _IMintManager_             = "IMintManager"            ;\n', '    bytes32 internal constant _IPriceBandCalculator_     = "IPriceBandCalculator"       ;\n', '    bytes32 internal constant _IModelCalculator_         = "IModelCalculator"        ;\n', '    bytes32 internal constant _IRedButton_               = "IRedButton"              ;\n', '    bytes32 internal constant _IReserveManager_          = "IReserveManager"         ;\n', '    bytes32 internal constant _ISagaExchanger_           = "ISagaExchanger"          ;\n', '    bytes32 internal constant _ISogurExchanger_           = "ISogurExchanger"          ;\n', '    bytes32 internal constant _SgnToSgrExchangeInitiator_ = "SgnToSgrExchangeInitiator"          ;\n', '    bytes32 internal constant _IMonetaryModel_               = "IMonetaryModel"              ;\n', '    bytes32 internal constant _IMonetaryModelState_          = "IMonetaryModelState"         ;\n', '    bytes32 internal constant _ISGRAuthorizationManager_ = "ISGRAuthorizationManager";\n', '    bytes32 internal constant _ISGRToken_                = "ISGRToken"               ;\n', '    bytes32 internal constant _ISGRTokenManager_         = "ISGRTokenManager"        ;\n', '    bytes32 internal constant _ISGRTokenInfo_         = "ISGRTokenInfo"        ;\n', '    bytes32 internal constant _ISGNAuthorizationManager_ = "ISGNAuthorizationManager";\n', '    bytes32 internal constant _ISGNToken_                = "ISGNToken"               ;\n', '    bytes32 internal constant _ISGNTokenManager_         = "ISGNTokenManager"        ;\n', '    bytes32 internal constant _IMintingPointTimersManager_             = "IMintingPointTimersManager"            ;\n', '    bytes32 internal constant _ITradingClasses_          = "ITradingClasses"         ;\n', '    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = "IWalletsTLValueConverter"       ;\n', '    bytes32 internal constant _BuyWalletsTradingDataSource_       = "BuyWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _SellWalletsTradingDataSource_       = "SellWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = "WalletsTLSGNTokenManager"         ;\n', '    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = "BuyWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = "SellWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _IETHConverter_             = "IETHConverter"   ;\n', '    bytes32 internal constant _ITransactionLimiter_      = "ITransactionLimiter"     ;\n', '    bytes32 internal constant _ITransactionManager_      = "ITransactionManager"     ;\n', '    bytes32 internal constant _IRateApprover_      = "IRateApprover"     ;\n', '    bytes32 internal constant _SGAToSGRInitializer_      = "SGAToSGRInitializer"     ;\n', '\n', '    IContractAddressLocator private contractAddressLocator;\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator) internal {\n', '        require(_contractAddressLocator != address(0), "locator is illegal");\n', '        contractAddressLocator = _contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address locator.\n', '     * @return The contract address locator.\n', '     */\n', '    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n', '        return contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n', '        return contractAddressLocator.getContractAddress(_identifier);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Determine whether or not the sender relates to one of the identifiers.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the sender relates to one of the identifiers.\n', '     */\n', '    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n', '        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n', '    }\n', '\n', '    /**\n', '     * @dev Verify that the caller is mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     */\n', '    modifier only(bytes32 _identifier) {\n', '        require(msg.sender == getContractAddress(_identifier), "caller is illegal");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/sogur/MintManager.sol\n', '\n', '/**\n', ' * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n', ' */\n', '\n', '/**\n', ' * @title Mint Manager.\n', ' */\n', 'contract MintManager is IMintManager, ContractAddressLocatorHolder {\n', '    string public constant VERSION = "2.0.0";\n', '\n', '    uint256 public index;\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IModelDataSource interface.\n', '     */\n', '    function getModelDataSource() public view returns (IModelDataSource) {\n', '        return IModelDataSource(getContractAddress(_IModelDataSource_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IMintingPointTimersManager interface.\n', '     */\n', '    function getMintingPointTimersManager() public view returns (IMintingPointTimersManager) {\n', '        return IMintingPointTimersManager(getContractAddress(_IMintingPointTimersManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the ISGRAuthorizationManager interface.\n', '     */\n', '    function getSGRAuthorizationManager() public view returns (ISGRAuthorizationManager) {\n', '        return ISGRAuthorizationManager(getContractAddress(_ISGRAuthorizationManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IMintHandler interface.\n', '     */\n', '    function getMintHandler() public view returns (IMintHandler) {\n', '        return IMintHandler(getContractAddress(_IMintHandler_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IMintListener interface.\n', '     */\n', '    function getMintListener() public view returns (IMintListener) {\n', '        return IMintListener(getContractAddress(_IMintListener_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return whether or not the minting-state should be updated.\n', '     */\n', '    function isMintingStateOutdated() public view returns (bool) {\n', '        return getMintingPointTimersManager().expired(index + 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Update the minting-state if it is outdated.\n', '     */\n', '    function updateMintingState() external {\n', '        require(getSGRAuthorizationManager().isAuthorizedForPublicOperation(msg.sender), "update minting state is not authorized");\n', '        if (isMintingStateOutdated()) {\n', '            uint256 amount = getModelDataSource().getRequiredMintAmount(index);\n', '            getMintListener().mintSgrForSgnHolders(amount);\n', '            getMintHandler().mintSgnVestedInDelay(index + 1);\n', '            index += 1;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return the current minting-point index.\n', '     */\n', '    function getIndex() external view returns (uint256) {\n', '        return index;\n', '    }\n', '}']