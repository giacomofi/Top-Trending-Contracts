['pragma solidity ^0.5.17;\n', '\n', 'contract remoteConfiguration\n', '{\n', '    \n', '    //The keyword "public" makes those variables readable from outside and inside.\n', "    //The address type is a 160-bit value that doesn't allow any arithmetic operations\n", '    address public manufacturer;\n', '    \n', '    //This declares a new complex type which will be used for variables later. It will represent a single device.\n', '    struct info {\n', '        address owner;\n', '        //uint256[] configurations;\n', '        uint256 configurations0;\n', '        uint256 configurations1;\n', '        uint256 configurations2;\n', '    }\n', '    \n', '    //The type maps unsigned integers to info. Mappings can be seen as hash tables which are virtually initialized such that\n', '    //every possible key exists and is mapped to a value whose byte-representation is all zeros.\n', '    mapping (uint => info) public idInfo;\n', '    \n', '    uint256 currentConfig;\n', '    uint256 configStartTime;\n', '    uint256 configPeriod;\n', '    bool tempUpdated;\n', '    uint256 lastTempUpdate;\n', '\n', '    modifier onlyManufacturer()\n', '    {\n', '        require(\n', '            msg.sender == manufacturer,\n', '            "Only the mamanufacturer can register a new device."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    constructor() public payable \n', '    {\n', '        manufacturer = msg.sender;\n', '        //manufacturer = 0xFAFC4C0769f69Fc583A09380bD6Ee3136Eb4754C;\n', '        //manufacturer = _manufacturer;\n', '        //tempUpdated = true;\n', '        //lastTempUpdate = block.number;\n', '    }\n', '\n', '    function registerDevice(uint _identifier, uint256 config0, uint256 config1, uint256 config2) public payable onlyManufacturer {\n', '        idInfo[_identifier].owner = msg.sender;\n', '        idInfo[_identifier].configurations0 = config0; //this is the encrypted default configuration\n', '        idInfo[_identifier].configurations1 = config1;\n', '        idInfo[_identifier].configurations2 = config2;\n', '    }\n', '    \n', '    function transferOwnership(uint _identifier, address buyer) public {\n', '\t\trequire(\n', '            msg.sender == idInfo[_identifier].owner,\n', '            "Only the device owner can transfer the ownership."\n', '        );\n', '        idInfo[_identifier].owner = buyer;\n', '        \n', '    }\n', '    \n', '    function upgradeConfiguration(uint _identifier, uint256 requestedConfig, uint256 configTimer) public payable \n', '    {\n', '        require(\n', '            msg.sender == idInfo[_identifier].owner,\n', '            "Only the device owner can request for configuration upgrade."\n', '        );\n', '        \n', '        if( requestedConfig == 1 ){\n', '            if (msg.value < 10 szabo){ \n', '                revert(); \n', '            } else {\n', '                currentConfig = idInfo[_identifier].configurations1;\n', '            }\n', '        } else if( requestedConfig == 2 ){\n', '            if (msg.value < 20 szabo){ \n', '                revert(); \n', '            } else {\n', '                currentConfig = idInfo[_identifier].configurations2;\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '        configStartTime = block.timestamp;\n', '        configPeriod = configTimer;\n', '    }\n', '    \n', '        \n', '    function queryConfiguration() public view returns (uint256, uint256)\n', '    {\n', '        if (block.timestamp - configStartTime < configPeriod) {\n', '            return (currentConfig, configPeriod);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function transferContractValue () public payable onlyManufacturer {\n', '        uint256 transferAmount = address(this).balance - 1 finney;\n', '        address(msg.sender).transfer(transferAmount);\n', '    }\n', '}']