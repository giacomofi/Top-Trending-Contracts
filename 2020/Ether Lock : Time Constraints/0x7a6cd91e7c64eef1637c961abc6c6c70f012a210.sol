['pragma solidity 0.5.16;\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '    function transfer(address, uint) external returns (bool);\n', '    function burn(uint) external;\n', '}\n', '\n', 'interface YFVRewards {\n', '    function periodFinish() external view returns (uint);\n', '}\n', '\n', '// https://yfv.finance/voting\n', 'contract VIP2 {\n', '\n', '    address payable owner;\n', '    YFVRewards pool0 = YFVRewards(0xa8d3084Fa61C893eACAE2460ee77E3E5f11C8CFE);\n', '    TokenInterface yfv = TokenInterface(0x45f24BaEef268BB6d63AEe5129015d69702BCDfa);\n', '    TokenInterface usdc = TokenInterface(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    TokenInterface uniswapYFVETH = TokenInterface(0xcB4f983E705caeb7217c5C3785001Cb138115F0b);\n', '    address payable yfvMultisig = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa;\n', '    uint contractDeployTime;\n', '    uint initialPool0PeriodFinish;\n', '    bool isUniswapLPTLocked;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        contractDeployTime = block.timestamp;\n', '        initialPool0PeriodFinish = pool0.periodFinish();\n', '    }\n', '\n', '    // 325.76YFV will be sent to this contract before voting start\n', '    // If fund is unlocked, anyone can call this function to burn the 325.76YFV\n', '    function giveBack1_BurnYFV() public {\n', '        require(isFundUnlocked());\n', '        yfv.burn(yfv.balanceOf(address(this)));\n', '    }\n', '\n', '    // Liquidity token of 500YFV+ETH on uniswap will be sent to this contract before voting start\n', '    // If fund is unlocked, anyone can call this function to lock the LP tokens so owner can only withdraw after 6 weeks from contractDeployTime\n', '    function giveBack2_LockUNI() public {\n', '        require(isFundUnlocked());\n', '        isUniswapLPTLocked = true;\n', '    }\n', '\n', '    // 10,000 USDC will be sent to this contract before voting start\n', '    // If fund is unlocked, anyone can call this function to send the 10,000 USDC to the yfv multisig address\n', '    function giveBack3_DonationToTeam() public {\n', '        require(isFundUnlocked());\n', '        usdc.transfer(yfvMultisig, usdc.balanceOf(address(this)));\n', '    }\n', '\n', '    // Use the periodFinish data to check for unlock status\n', '    function isFundUnlocked() public view returns (bool) {\n', '        return pool0.periodFinish() > initialPool0PeriodFinish;\n', '    }\n', '\n', '    // If the fund is not unlocked after 2 weeks from contractDeployTime, owner can get back all assets in this contract\n', '    function ownerGetBackAfterTwoWeeks() public {\n', '        require(msg.sender == owner);\n', '        require(block.timestamp > contractDeployTime + 14 days);\n', '        yfv.transfer(owner, yfv.balanceOf(address(this)));\n', '        usdc.transfer(owner, usdc.balanceOf(address(this)));\n', '\n', '        if (!isUniswapLPTLocked) {\n', '          uniswapYFVETH.transfer(owner, uniswapYFVETH.balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    // If the fund is unlocked, owner can only get back the YFV/ETH liquidity token after 6 weeks from contractDeployTime\n', '    function ownerGetBackUniswapTokenAfterSixWeeks() public {\n', '        require(msg.sender == owner);\n', '        require(block.timestamp > contractDeployTime + 42 days);\n', '        uniswapYFVETH.transfer(owner, uniswapYFVETH.balanceOf(address(this)));\n', '    }\n', '\n', '}']