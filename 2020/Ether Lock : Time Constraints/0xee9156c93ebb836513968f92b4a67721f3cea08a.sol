['// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) internal virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// Stabilize Token Interface\n', 'interface StabilizeToken is IERC20 {\n', '\n', '    /// Controller is the only contract that can mint\n', '    function mint(address _to, uint256 _amount) external returns (bool);\n', '\n', '    // Operator has initiated the burn to start\n', '    function initiateBurn(uint256 rate) external returns (bool);\n', '    \n', '    // Owner call\n', '    function owner() external view returns (address);\n', '\n', '}\n', '\n', 'interface StabilizePriceOracle {\n', '    function getPrice(address _address) external returns (uint256);\n', '}\n', '\n', '// File: contracts/Operator.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// Operator is the controller of Stabilize Token, it can mint each week and controls the eventual 1% emission\n', '// Operator ownership of the Stabilize Token cannot be changed once set, all controller modifications require a 24 hour timelock\n', '// Aave & Chainlink Price Oracles are used to update price data\n', '// \n', 'contract Operator is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for StabilizeToken;\n', '    using Address for address;\n', '    \n', '    // variables\n', '    uint256 constant duration = 604800; // Each reward period lasts for one week\n', '    uint256 private _periodFinished; // The UTC time that the current reward period ends\n', '    uint256 public protocolStart; // UTC time that the protocol begins to reward tokens\n', '    uint256 public lastOracleTime; // UTC time that oracle was last ran\n', '    uint256 constant minOracleRefresh = 21600; // The minimum amount of time we need to wait before refreshing the oracle prices\n', '    uint256 private targetPrice = 1000000000000000000; // The target price for the stablecoins in USD\n', '    StabilizeToken private StabilizeT; // A reference to the StabilizeToken\n', '    StabilizePriceOracle private oracleContract; // A reference to the price oracle contract\n', '    \n', '    uint256 private _currentWeek = 0; // Week 1 to 52 are bootstrap weeks that have emissions, after week 52, token burns\n', '    uint256 private _weekStart = 0; // This is the time that the current week starts, must be at least duration before starting a new week\n', '    uint256[] private _mintSchedule; // The pre-programmed schedule for minting tokens from contract\n', '    uint256 private weeklyReward; // The reward for the current week, this determines the reward rate\n', '    \n', '    // Reward variables\n', '    uint256 private _maxSupplyFirstYear = 1000000000000000000000000; // Max emission during the first year, max 1,000,000 Stablize Token\n', '    uint256 private _rewardPercentLP = 50000; // This is the percent of rewards reserved for LP pools. Represents 50% of all Stabilize Token rewards \n', '    uint256 constant _rewardPercentDev = 1000; // This percent of rewards going to development team during first year, 1%\n', '    uint256 private _emissionRateLong = 1000; // This is the minting rate after the first year, currently 1% per year\n', '    uint256 private _burnRateLong = 0; // This is the burn per transaction after the first year\n', '    uint256 private _earlyBurnRate = 0; // Optionally, the contract may burn tokens if extra not needed\n', '    uint256 constant divisionFactor = 100000;\n', '    \n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP/Stablecoin tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. The amount of rewards already given to depositer\n', '        uint256 unclaimedReward; // Total reward potential\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 sToken; // Address of LP/Stablecoin token contract.\n', '        uint256 rewardRate; // The rate at which Stabilize Token is earned per second\n', '        uint256 rewardPerTokenStored; // Reward per token stored which should gradually increase with time\n', '        uint256 lastUpdateTime; // Time the pool was last updated\n', '        uint256 totalSupply; // The total amount of LP/Stablecoin in the pool\n', '        bool active; // If active, the pool is earning rewards, otherwise its not\n', '        uint256 poolID; // ID for the pool\n', '        bool lpPool; // LP pools are calculated separate from stablecoin pools\n', '        uint256 price; // Oracle price of token in pool\n', '        uint256 poolWeight; // Weight of pool compared to the total\n', '    }\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] private totalPools;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) private userInfo;\n', '    // List of the active pools IDs\n', '    uint256[] private activePools;\n', '\n', '    // Events\n', '    event RewardAdded(uint256 pid, uint256 reward);\n', '    event Deposited(uint256 pid, address indexed user, uint256 amount);\n', '    event Withdrawn(uint256 pid, address indexed user, uint256 amount);\n', '    event RewardPaid(uint256 pid, address indexed user, uint256 reward);\n', '    event RewardDenied(uint256 pid, address indexed user, uint256 reward);\n', '    event NewWeek(uint256 weekNum, uint256 rewardAmount);\n', '\n', '    constructor(\n', '        StabilizeToken _stabilize,\n', '        StabilizePriceOracle _oracle,\n', '        uint256 startTime\n', '    ) public {\n', '        StabilizeT = _stabilize;\n', '        oracleContract = _oracle;\n', '        protocolStart = startTime;\n', '        setupEmissionSchedule(); // Publicize mint schedule\n', '    }\n', '    \n', '    // Modifiers\n', '    \n', '    modifier updateRewardEarned(uint256 _pid, address account) {\n', '        totalPools[_pid].rewardPerTokenStored = rewardPerToken(_pid);\n', '        totalPools[_pid].lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            userInfo[_pid][account].unclaimedReward = rewardEarned(_pid,account);\n', '            userInfo[_pid][account].rewardDebt = totalPools[_pid].rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '    \n', '    // Initialization functions\n', '    \n', '    function setupEmissionSchedule() internal {\n', '        // This function creates the initial schedule of emission of tokens during the first year, only called during construction\n', '        _mintSchedule.push(76000000000000000000000); // Week 1 emission\n', '        _mintSchedule.push(57000000000000000000000); // Week 2 emission\n', '        _mintSchedule.push(38000000000000000000000); // Week 3 emission\n', '        _mintSchedule.push(19000000000000000000000); // Week 4 emission\n', '        for(uint i = 4; i < 52; i++){\n', '            _mintSchedule.push(16875000000000000000000); // Week 5-52 emissions, can be adjusted\n', '        }\n', '    }\n', '    \n', '    // Anyone can call the mintNewWeek function, this may be a gas heavy function\n', '    function mintNewWeek() external {\n', '        require(now >= protocolStart,"Too soon to start this protocol");\n', '        if(_currentWeek > 0){\n', '            // We cannot mint a new week until the current week is over\n', '            require(now >= _periodFinished,"Too early to start next week");\n', '        }\n', '        require(StabilizeT.owner() == address(this),"The Operator does not have permission to mint tokens");\n', '        _currentWeek = _currentWeek.add(1);\n', '        // We will mint new tokens per the mint schedule, then the emission schedule\n', '        uint256 rewardAmount = 0;\n', '        if(_currentWeek < 53){\n', '            // Mint per mint schedule\n', '            uint256 devShare = 0;\n', '            if(_currentWeek > 1){\n', '                // First week was pre-allocated\n', '                // devShare from total allocation\n', '                devShare = _mintSchedule[_currentWeek-1].mul(_rewardPercentDev).div(divisionFactor);\n', '                _mintSchedule[_currentWeek-1] = _mintSchedule[_currentWeek-1].sub(devShare);\n', '                // Mint to the developer account\n', '                StabilizeT.mint(owner(),devShare); // The Operator will mint tokens to the developer\n', '            }else{\n', "                // This is the first week, let's activate all the pending pools\n", '                for(uint256 i = 0; i < totalPools.length; i++){\n', '                    activePools.push(totalPools[i].poolID);\n', '                    totalPools[i].active = true;\n', '                }             \n', '            }\n', '            rewardAmount = _mintSchedule[_currentWeek-1];\n', '            if(_earlyBurnRate > 0){\n', '                // This will be utilized only if the contract has called for an early burn to reduce token supply\n', '                rewardAmount = rewardAmount.sub(rewardAmount.mul(_earlyBurnRate).div(divisionFactor));\n', '            }\n', '        }else{\n', '            // Mint per emission schedule\n', '            if(_currentWeek == 53){\n', '                // Start the burn rate\n', '                StabilizeT.initiateBurn(_burnRateLong);\n', '                // Set the maximum supply to the real total supply rate now\n', '                _maxSupplyFirstYear = StabilizeT.totalSupply();\n', '            }\n', '            // No more devShare\n', '            // Emission rate divided per week\n', '            rewardAmount = _maxSupplyFirstYear.mul(_emissionRateLong).div(divisionFactor).div(52);\n', '        }\n', '        StabilizeT.mint(address(this),rewardAmount); // Mint at a set rate\n', '        // Now adjust the contract values\n', '        // Force update all the active pools before we extend the period\n', '        for(uint256 i = 0; i < activePools.length; i++){\n', '            forceUpdateRewardEarned(activePools[i],address(0));\n', '            totalPools[activePools[i]].rewardRate = 0; // Set the reward rate to 0 until pools rebalanced\n', '        }\n', '        _periodFinished = now + duration;\n', "        weeklyReward = rewardAmount; // This is this week's distribution\n", '        lastOracleTime = now - minOracleRefresh; // Force oracle price to update\n', '        rebalancePoolRewards(); // The pools will determine their reward rates based on the price\n', '        emit NewWeek(_currentWeek,weeklyReward);\n', '    }\n', '    \n', '    function currentWeek() external view returns (uint256){\n', '        return _currentWeek;\n', '    }\n', '    \n', '    function emissionRate() external view returns (uint256){\n', '        return _emissionRateLong;\n', '    }\n', '    \n', '    function periodFinished() external view returns (uint256){\n', '        return _periodFinished;\n', '    }\n', '\n', '    function poolLength() public view returns (uint256) {\n', '        return totalPools.length;\n', '    }\n', '    \n', '    function rebalancePoolRewards() public {\n', '        // This function can only be called once every 6 hours, it updates all the active pools reward rates based on the prices\n', '        require(now >= lastOracleTime + minOracleRefresh, "Cannot update the oracle prices now");\n', '        require(_currentWeek > 0, "Protocol has not started yet");\n', '        require(oracleContract != StabilizePriceOracle(address(0)),"No price oracle contract has been selected yet");\n', '        lastOracleTime = now;\n', '        uint256 rewardPerSecond = weeklyReward.div(duration);\n', '        uint256 rewardLeft = 0;\n', '        uint256 timeLeft = 0;\n', '        if(now < _periodFinished){\n', '            timeLeft = _periodFinished.sub(now);\n', '            rewardLeft = timeLeft.mul(rewardPerSecond); // The amount of rewards left in this week\n', '        }\n', '        uint256 lpRewardLeft = rewardLeft.mul(_rewardPercentLP).div(divisionFactor);\n', '        uint256 sbRewardLeft = rewardLeft.sub(lpRewardLeft);\n', '        \n', '        // First figure out the pool splits for the lp tokens\n', '        // LP pools are split evenly\n', '        uint256 length = activePools.length;\n', '        require(length > 0,"No active pools exist on the protocol");\n', '        uint256 totalWeight = 0;\n', '        uint256 i = 0;\n', '        for(i = 0; i < length; i++){\n', '            if(totalPools[activePools[i]].lpPool == true){\n', '                totalPools[activePools[i]].poolWeight = 1;\n', '                totalWeight++;\n', '            }else{\n', '                // Get the prices of the non LP pools\n', '                uint256 price = oracleContract.getPrice(address(totalPools[activePools[i]].sToken));\n', '                if(price > 0){\n', '                    totalPools[activePools[i]].price = price;\n', '                }\n', '            }\n', '        }\n', '        // Now split the lpReward between the pools\n', '        for(i = 0; i < length; i++){\n', '            if(totalPools[activePools[i]].lpPool == true){\n', '                uint256 rewardPercent = totalPools[activePools[i]].poolWeight.mul(divisionFactor).div(totalWeight);\n', '                uint256 poolReward = lpRewardLeft.mul(rewardPercent).div(divisionFactor);\n', '                forceUpdateRewardEarned(activePools[i],address(0)); // Update the stored rewards for this pool before changing the rates\n', '                if(timeLeft > 0){\n', '                    totalPools[activePools[i]].rewardRate = poolReward.div(timeLeft); // The rate of return per second for this pool\n', '                }else{\n', '                    totalPools[activePools[i]].rewardRate = 0;\n', '                }               \n', '            }\n', '        }\n', '        \n', '        // Now we are going to rank the stablecoin pools from lowest price to highest and price closest to targetPrice\n', '        totalWeight = 0;\n', '        uint256 i2 = 0;\n', '        for(i = 0; i < length; i++){\n', '            if(totalPools[activePools[i]].lpPool == false){\n', '                uint256 amountBelow = 0;\n', '                for(i2 = 0; i2 < length; i2++){\n', '                    if(totalPools[activePools[i2]].lpPool == false){\n', '                        if(i != i2){ // Do not want to check itself\n', '                            if(totalPools[activePools[i]].price <= totalPools[activePools[i2]].price){\n', '                                amountBelow++;\n', '                            }\n', '                        }\n', '                    }\n', '                }\n', '                // Rank would be total non-LP pools minus amountBelow\n', '                uint256 weight = (1 + amountBelow) * 100000;\n', '                uint256 diff = 0;\n', '                // Now multiply or divide the weight by its distance from the target price\n', '                if(totalPools[activePools[i]].price > targetPrice){\n', '                    diff = totalPools[activePools[i]].price - targetPrice;\n', '                    diff = diff.div(1e14); // Normalize the difference\n', '                    uint256 weightReduction = diff.mul(50); // Weight is reduced for each $0.0001 above target price\n', '                    if(weightReduction >= weight){\n', '                        weight = 1;\n', '                    }else{\n', '                        weight = weight.sub(weightReduction);\n', '                    }\n', '                }else if(totalPools[activePools[i]].price < targetPrice){\n', '                    diff = targetPrice - totalPools[activePools[i]].price;\n', '                    diff = diff.div(1e14); // Normalize the difference\n', '                    uint256 weightGain = diff.mul(50); // Weight is added for each $0.0001 below target price\n', '                    weight = weight.add(weightGain);      \n', '                }\n', '                totalPools[activePools[i]].poolWeight = weight;\n', '                totalWeight = totalWeight.add(weight);\n', '            }\n', '        }\n', '        // Now split the sbReward among the stablecoin pools\n', '        for(i = 0; i < length; i++){\n', '            if(totalPools[activePools[i]].lpPool == false){\n', '                uint256 rewardPercent = totalPools[activePools[i]].poolWeight.mul(divisionFactor).div(totalWeight);\n', '                uint256 poolReward = sbRewardLeft.mul(rewardPercent).div(divisionFactor);\n', '                forceUpdateRewardEarned(activePools[i],address(0)); // Update the stored rewards for this pool before changing the rates\n', '                if(timeLeft > 0){\n', '                    totalPools[activePools[i]].rewardRate = poolReward.div(timeLeft); // The rate of return per second for this pool\n', '                }else{\n', '                    totalPools[activePools[i]].rewardRate = 0;\n', '                }               \n', '            }\n', '        }\n', '    }\n', '    \n', '    function forceUpdateRewardEarned(uint256 _pid, address _address) internal updateRewardEarned(_pid, _address) {\n', '        \n', '    }\n', '    \n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return block.timestamp < _periodFinished ? block.timestamp : _periodFinished;\n', '    }\n', '    \n', '    function rewardRate(uint256 _pid) external view returns (uint256) {\n', '        return totalPools[_pid].rewardRate;\n', '    }\n', '    \n', '    function poolSize(uint256 _pid) external view returns (uint256) {\n', '        return totalPools[_pid].totalSupply;\n', '    }\n', '    \n', '    function poolBalance(uint256 _pid, address _address) external view returns (uint256) {\n', '        return userInfo[_pid][_address].amount;\n', '    }\n', '    \n', '    function poolTokenAddress(uint256 _pid) external view returns (address) {\n', '        return address(totalPools[_pid].sToken);\n', '    }\n', '\n', '    function rewardPerToken(uint256 _pid) public view returns (uint256) {\n', '        if (totalPools[_pid].totalSupply == 0) {\n', '            return totalPools[_pid].rewardPerTokenStored;\n', '        }\n', '        return\n', '            totalPools[_pid].rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(totalPools[_pid].lastUpdateTime)\n', '                    .mul(totalPools[_pid].rewardRate)\n', '                    .mul(1e18)\n', '                    .div(totalPools[_pid].totalSupply)\n', '            );\n', '    }\n', '\n', '    function rewardEarned(uint256 _pid, address account) public view returns (uint256) {\n', '        return\n', '            userInfo[_pid][account].amount\n', '                .mul(rewardPerToken(_pid).sub(userInfo[_pid][account].rewardDebt))\n', '                .div(1e18)\n', '                .add(userInfo[_pid][account].unclaimedReward);\n', '    }\n', '\n', '    function deposit(uint256 _pid, uint256 amount) public updateRewardEarned(_pid, _msgSender()) {\n', '        require(amount > 0, "Cannot deposit 0");\n', '        if(_currentWeek > 0){\n', '            require(totalPools[_pid].active == true, "This pool is no longer active");\n', '        }      \n', '        totalPools[_pid].totalSupply = totalPools[_pid].totalSupply.add(amount);\n', '        userInfo[_pid][_msgSender()].amount = userInfo[_pid][_msgSender()].amount.add(amount);\n', '        totalPools[_pid].sToken.safeTransferFrom(_msgSender(), address(this), amount);\n', '        emit Deposited(_pid, _msgSender(), amount);\n', '    }\n', '\n', '    // User can withdraw without claiming reward tokens\n', '    function withdraw(uint256 _pid, uint256 amount) public updateRewardEarned(_pid, _msgSender()) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        totalPools[_pid].totalSupply = totalPools[_pid].totalSupply.sub(amount);\n', '        userInfo[_pid][_msgSender()].amount = userInfo[_pid][_msgSender()].amount.sub(amount);\n', '        totalPools[_pid].sToken.safeTransfer(_msgSender(), amount);\n', '        emit Withdrawn(_pid, _msgSender(), amount);\n', '    }\n', '\n', '    // Normally used to exit the contract and claim reward tokens\n', '    function exit(uint256 _pid, uint256 _amount) external {\n', '        withdraw(_pid, _amount);\n', '        getReward(_pid);\n', '    }\n', '\n', '    /// A push mechanism for accounts that have not claimed their rewards for a long time.\n', '    function pushReward(uint256 _pid, address recipient) external updateRewardEarned(_pid, recipient) onlyOwner {\n', '        uint256 reward = rewardEarned(_pid,recipient);\n', '        if (reward > 0) {\n', '            userInfo[_pid][recipient].unclaimedReward = 0;\n', '            // If it is a normal user and not smart contract,\n', '            // then the requirement will pass\n', '            // If it is a smart contract, it will fail as those contracts usually dump.\n', '            if (!recipient.isContract()) {\n', '                uint256 contractBalance = StabilizeT.balanceOf(address(this));\n', '                if(contractBalance < reward){ // This prevents a contract with zero balance locking up\n', '                    reward = contractBalance;\n', '                }\n', '                StabilizeT.safeTransfer(recipient, reward);\n', '                emit RewardPaid(_pid, recipient, reward);\n', '            } else {\n', '                emit RewardDenied(_pid, recipient, reward);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getReward(uint256 _pid) public updateRewardEarned(_pid, _msgSender()) {\n', '        uint256 reward = rewardEarned(_pid,_msgSender());\n', '        if (reward > 0) {\n', '            userInfo[_pid][_msgSender()].unclaimedReward = 0;\n', '            // If it is a normal user and not smart contract,\n', '            // then the requirement will pass\n', '            // If it is a smart contract, it will fail as those contracts usually dump.\n', '            if (tx.origin == _msgSender()) {\n', '                // Check the contract to make sure the reward exists\n', '                uint256 contractBalance = StabilizeT.balanceOf(address(this));\n', '                if(contractBalance < reward){ // This prevents a contract with zero balance locking up\n', '                    reward = contractBalance;\n', '                }\n', '                StabilizeT.safeTransfer(_msgSender(), reward);\n', '                emit RewardPaid(_pid, _msgSender(), reward);\n', '            } else {\n', '                emit RewardDenied(_pid, _msgSender(), reward);\n', '            }\n', '        }\n', '    }\n', '    \n', '    // Governance only functions\n', '    \n', '    // Timelock variables\n', "    // Timelock doesn't activate until protocol has started to distribute rewards\n", '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant _timelockDuration = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    uint256 private _timelock_data_1;\n', '    address private _timelock_address_1;\n', '    bool private _timelock_bool_1;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        if(_currentWeek > 0){\n', '            // Timelock is only required after the protocol starts\n', '            require(now >= _timelockStart + _timelockDuration, "Timelock time not met");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    // Due to no tokens existing, must mint some tokens to add into the initial liquidity pool \n', '    function bootstrapLiquidty() external onlyOwner {\n', '        require(StabilizeT.totalSupply() == 0, "This token has already been bootstrapped");\n', '        require(StabilizeT.owner() == address(this),"The Operator does not have permission to mint tokens");\n', '        // Take dev amount from the first week mint schedule\n', '        uint256 devAmount = _mintSchedule[0].mul(_rewardPercentDev).div(divisionFactor);\n', "        _mintSchedule[0] = _mintSchedule[0].sub(devAmount); // The first week doesn't give dev team any extra tokens\n", '        StabilizeT.mint(owner(),devAmount); // The Operator will mint tokens to the developer\n', '    }\n', '    \n', '    // Change the owner of the Operator contract\n', '    // --------------------\n', '    function startOwnerChange(address _address) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address_1 = _address;       \n', '    }\n', '    \n', '    function finishOwnerChange() external onlyOwner timelockConditionsMet(1) {\n', '        transferOwnership(_timelock_address_1);\n', '    }\n', '    // --------------------\n', '\n', '    // Used to reduce minting rate in first 52 weeks\n', '    // --------------------\n', '    function startChangeEarlyBurnRate(uint256 _percent) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeEarlyBurnRate() external onlyOwner timelockConditionsMet(2) {\n', '        _earlyBurnRate = _timelock_data_1;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the per transaction burn rate\n', '    // --------------------\n', '    function startChangeBurnRateLong(uint256 _percent) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 3;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeBurnRateLong() external onlyOwner timelockConditionsMet(3) {\n', '       _burnRateLong  = _timelock_data_1;\n', '       if(_currentWeek >= 53){\n', "           // Adjust the token's burn rate\n", '           StabilizeT.initiateBurn(_burnRateLong);\n', '       }\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the long term emission rate\n', '    // --------------------\n', '    function startChangeEmissionRateLong(uint256 _percent) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 4;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeEmissionRateLong() external onlyOwner timelockConditionsMet(4) {\n', '        _emissionRateLong =_timelock_data_1;\n', '    }\n', '    // --------------------\n', '\n', '    // Change the percent of rewards that is dedicated to LP providers\n', '    // --------------------\n', '    function startChangeRewardPercentLP(uint256 _percent) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 5;\n', '        _timelock_data_1 = _percent;\n', '    }\n', '    \n', '    function finishChangeRewardPercentLP() external onlyOwner timelockConditionsMet(5) {\n', '        _rewardPercentLP = _timelock_data_1;\n', '    }\n', '    // --------------------\n', '\n', '    // Change the target price for the stablecoins, due to inflation issues\n', '    // --------------------\n', '    function startChangeTargetPrice(uint256 _price) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 6;\n', '        _timelock_data_1 = _price;\n', '    }\n', '    \n', '    function finishChangeTargetPrice() external onlyOwner timelockConditionsMet(6) {\n', '        targetPrice = _timelock_data_1;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the price oracle contract used, in case of upgrades\n', '    // --------------------\n', '    function startChangePriceOracle(address _address) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 7;\n', '        _timelock_address_1 = _address;\n', '    }\n', '    \n', '    function finishChangePriceOracle() external onlyOwner timelockConditionsMet(7) {\n', '        oracleContract = StabilizePriceOracle(_timelock_address_1);\n', '    }\n', '    // --------------------\n', '   \n', '    // Add a new token to the pool\n', '    // --------------------\n', '    function startAddNewPool(address _address, bool _lpPool) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 8;\n', '        _timelock_address_1 = _address;\n', '        _timelock_bool_1 = _lpPool;\n', '        if(_currentWeek == 0){\n', "            finishAddNewPool(); // Automatically add the pool if protocol hasn't started yet\n", '        }\n', '    }\n', '    \n', '    function finishAddNewPool() public onlyOwner timelockConditionsMet(8) {\n', '        // This adds a new pool to the pool lists\n', '        totalPools.push(\n', '            PoolInfo({\n', '                sToken: IERC20(_timelock_address_1),\n', '                poolID: poolLength(),\n', '                lpPool: _timelock_bool_1,\n', '                rewardRate: 0,\n', '                poolWeight: 0,\n', '                price: 0,\n', '                rewardPerTokenStored: 0,\n', '                lastUpdateTime: 0,\n', '                totalSupply: 0,\n', '                active: false\n', '            })\n', '        );\n', '    }\n', '    // --------------------\n', '    \n', '    // Select a pool to activate in rewards distribution\n', '    // --------------------\n', '    function startAddActivePool(uint256 _pid) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 9;\n', '        _timelock_data_1 = _pid;\n', '    }\n', '    \n', '    function finishAddActivePool() external onlyOwner timelockConditionsMet(9) {\n', '        require(totalPools[_timelock_data_1].active == false, "This pool is already active");\n', '        activePools.push(_timelock_data_1);\n', '        totalPools[_timelock_data_1].active = true;\n', '        // Rebalance the pools now that there is a new pool\n', '        if(_currentWeek > 0){\n', '            lastOracleTime = now - minOracleRefresh; // Force oracle price to update\n', '            rebalancePoolRewards();\n', '        }\n', '    }\n', '    // --------------------\n', '    \n', '    // Select a pool to deactivate from rewards distribution\n', '    // --------------------\n', '    function startRemoveActivePool(uint256 _pid) external onlyOwner {\n', '        _timelockStart = now;\n', '        _timelockType = 10;\n', '        _timelock_data_1 = _pid;\n', '    }\n', '    \n', '    function finishRemoveActivePool() external onlyOwner timelockConditionsMet(10) updateRewardEarned(_timelock_data_1, address(0)) {\n', '        uint256 length = activePools.length;\n', '        for(uint256 i = 0; i < length; i++){\n', '            if(totalPools[activePools[i]].poolID == _timelock_data_1){\n', '                // Move all the remaining elements down one\n', '                totalPools[activePools[i]].active = false;\n', '                totalPools[activePools[i]].rewardRate = 0; // Deactivate rewards but first make sure to store current rewards\n', '                for(uint256 i2 = i; i2 < length-1; i2++){\n', '                    activePools[i2] = activePools[i2 + 1]; // Shift the data down one\n', '                }\n', '                activePools.pop(); //Remove last element\n', '                break;\n', '            }\n', '        }\n', '        // Rebalance the remaining pools \n', '        if(_currentWeek > 0){\n', '            lastOracleTime = now - minOracleRefresh; // Force oracle price to update\n', '            rebalancePoolRewards();\n', '        }\n', '    }\n', '    // --------------------\n', '}']