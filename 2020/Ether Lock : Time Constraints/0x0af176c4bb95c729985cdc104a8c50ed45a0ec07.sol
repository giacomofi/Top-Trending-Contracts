['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.11;\n', '\n', 'contract NamedForwarder {\n', '\n', '    mapping(bytes32 => uint256) public _userBalances;\n', '    mapping(bytes32 => address) public _usersByAddress;\n', '    mapping(address => bool) public _oracles;\n', '    address internal owner;\n', '\n', '    event DepositEvent(address from, bytes32 to, uint256 value);\n', '    event WithdrawEvent(bytes32 from, address to, uint256 value);\n', '\n', '    modifier onlyOwner {\n', '        require(owner == msg.sender, "Only the owner of this contract can perform this action");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOracles {\n', '        require(_oracles[msg.sender], "Only oracles can confirm operations.");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        _oracles[owner] = true;\n', '    }\n', '\n', '    function enableOracle(address oracle) external onlyOwner {\n', '        _oracles[oracle] = true;\n', '    }\n', '\n', '    function disableOracle(address oracle) external onlyOwner {\n', '        require(_oracles[oracle], "Oracle does not exists.");\n', '        require(oracle != owner, "Owner oracle can not be removed.");\n', '        _oracles[oracle] = false;\n', '    }\n', '\n', '    function deposit(bytes32 account) external payable {\n', '        require(msg.value > 0, "No ether sent.");\n', '        _userBalances[account] += msg.value;\n', '        emit DepositEvent(msg.sender, account, msg.value);\n', '    }\n', '\n', '    function withdraw(bytes32 account) external {\n', '        require(_usersByAddress[account] == msg.sender, "You can not withdraw for this account");\n', '        require(_userBalances[account] > 0, "There is nothing to withdraw");\n', '        payable(_usersByAddress[account]).transfer(_userBalances[account]);\n', '        emit WithdrawEvent(account, _usersByAddress[account], _userBalances[account]);\n', '        _userBalances[account] = 0;\n', '    }\n', '\n', '    function approveAddress(address wallet, bytes32 account) external onlyOracles {\n', '        _usersByAddress[account] = wallet;\n', '    }\n', '\n', '}']