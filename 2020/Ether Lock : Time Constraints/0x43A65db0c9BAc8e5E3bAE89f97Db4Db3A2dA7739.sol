['pragma solidity ^0.6.0;\n', '\n', 'interface CrTokenInterface {\n', '    function mint(uint mintAmount) external returns (uint);\n', '    function redeem(uint redeemTokens) external returns (uint);\n', '    function borrow(uint borrowAmount) external returns (uint);\n', '    function repayBorrow(uint repayAmount) external returns (uint);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint);\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '}\n', '\n', 'interface CrETHInterface {\n', '    function mint() external payable;\n', '    function repayBorrow() external payable;\n', '}\n', '\n', 'interface TokenInterface {\n', '    function allowance(address, address) external view returns (uint);\n', '    function balanceOf(address) external view returns (uint);\n', '    function approve(address, uint) external;\n', '    function transfer(address, uint) external returns (bool);\n', '}\n', '\n', 'interface ComptrollerInterface {\n', '    function enterMarkets(address[] calldata CrTokens) external returns (uint[] memory);\n', '    function exitMarket(address CrTokenAddress) external returns (uint);\n', '    function getAssetsIn(address account) external view returns (address[] memory);\n', '}\n', '\n', 'interface InstaCreamMapping {\n', '    function CrTokenMapping(address) external view returns (address);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint _id) external returns (uint _num);\n', '    function setUint(uint _id, uint _val) external;\n', '}\n', '\n', 'interface EventInterface {\n', '    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Helpers is DSMath {\n', '    /**\n', '     * @dev Return ethereum address\n', '     */\n', '    function getAddressETH() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n', '    }\n', '\n', '    /**\n', '     * @dev Return Memory Variable Address\n', '     */\n', '    function getMemoryAddr() internal pure returns (address) {\n', '        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n', '    }\n', '\n', '    /**\n', '     * @dev Return InstaEvent Address.\n', '     */\n', '    function getEventAddr() internal pure returns (address) {\n', '        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n', '    }\n', '\n', '    /**\n', '     * @dev Get Uint value from InstaMemory Contract.\n', '    */\n', '    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n', '    }\n', '\n', '    /**\n', '     * @dev Set Uint value in InstaMemory Contract.\n', '    */\n', '    function setUint(uint setId, uint val) internal {\n', '        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n', '    }\n', '\n', '    /**\n', '     * @dev Connector Details\n', '    */\n', '    function connectorID() public pure returns(uint _type, uint _id) {\n', '        (_type, _id) = (1, 50);\n', '    }\n', '}\n', '\n', '\n', 'contract CreamHelpers is Helpers {\n', '    /**\n', '     * @dev Return Cream Comptroller Address\n', '     */\n', '    function getComptrollerAddress() internal pure returns (address) {\n', '        return 0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258;\n', '    }\n', '\n', '    /**\n', '     * @dev Return InstaDApp Mapping Addresses\n', '     */\n', '    function getMappingAddr() internal pure returns (address) {\n', '        return 0x0a9b8a5D1A5FbF939CFD766bC22a018c5595faFe; // InstaCreamMapping Address\n', '    }\n', '\n', '    /**\n', '     * @dev enter cream market\n', '     */\n', '    function enterMarket(address CrToken) internal {\n', '        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\n', '        address[] memory markets = troller.getAssetsIn(address(this));\n', '        bool isEntered = false;\n', '        for (uint i = 0; i < markets.length; i++) {\n', '            if (markets[i] == CrToken) {\n', '                isEntered = true;\n', '            }\n', '        }\n', '        if (!isEntered) {\n', '            address[] memory toEnter = new address[](1);\n', '            toEnter[0] = CrToken;\n', '            troller.enterMarkets(toEnter);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract BasicResolver is CreamHelpers {\n', '    event LogDeposit(address indexed token, address CrToken, uint256 tokenAmt, uint256 getId, uint256 setId);\n', '    event LogWithdraw(address indexed token, address CrToken, uint256 tokenAmt, uint256 getId, uint256 setId);\n', '    event LogBorrow(address indexed token, address CrToken, uint256 tokenAmt, uint256 getId, uint256 setId);\n', '    event LogPayback(address indexed token, address CrToken, uint256 tokenAmt, uint256 getId, uint256 setId);\n', '\n', '    /**\n', '     * @dev Deposit ETH/ERC20_Token.\n', '     * @param token token address to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param amt token amount to deposit.\n', '     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function deposit(address token, uint amt, uint getId, uint setId) external payable{\n', '        uint _amt = getUint(getId, amt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        enterMarket(CrToken);\n', '        if (token == getAddressETH()) {\n', '            _amt = _amt == uint(-1) ? address(this).balance : _amt;\n', '            CrETHInterface(CrToken).mint.value(_amt)();\n', '        } else {\n', '            TokenInterface tokenContract = TokenInterface(token);\n', '            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\n', '            tokenContract.approve(CrToken, _amt);\n', '            require(CrTokenInterface(CrToken).mint(_amt) == 0, "minting-failed");\n', '        }\n', '        setUint(setId, _amt);\n', '\n', '        emit LogDeposit(token, CrToken, _amt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogDeposit(address,address,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw ETH/ERC20_Token.\n', '     * @param token token address to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param amt token amount to withdraw.\n', '     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function withdraw(address token, uint amt, uint getId, uint setId) external payable{\n', '        uint _amt = getUint(getId, amt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        CrTokenInterface CrTokenContract = CrTokenInterface(CrToken);\n', '        if (_amt == uint(-1)) {\n', '            TokenInterface tokenContract = TokenInterface(token);\n', '            uint initialBal = token == getAddressETH() ? address(this).balance : tokenContract.balanceOf(address(this));\n', '            require(CrTokenContract.redeem(CrTokenContract.balanceOf(address(this))) == 0, "full-withdraw-failed");\n', '            uint finalBal = token == getAddressETH() ? address(this).balance : tokenContract.balanceOf(address(this));\n', '            _amt = finalBal - initialBal;\n', '        } else {\n', '            require(CrTokenContract.redeemUnderlying(_amt) == 0, "withdraw-failed");\n', '        }\n', '        setUint(setId, _amt);\n', '\n', '        emit LogWithdraw(token, CrToken, _amt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogWithdraw(address,address,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '    }\n', '\n', '    /**\n', '     * @dev Borrow ETH/ERC20_Token.\n', '     * @param token token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param amt token amount to borrow.\n', '     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function borrow(address token, uint amt, uint getId, uint setId) external payable {\n', '        uint _amt = getUint(getId, amt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        enterMarket(CrToken);\n', '        require(CrTokenInterface(CrToken).borrow(_amt) == 0, "borrow-failed");\n', '        setUint(setId, _amt);\n', '\n', '        emit LogBorrow(token, CrToken, _amt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogBorrow(address,address,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '    }\n', '\n', '    /**\n', '     * @dev Payback borrowed ETH/ERC20_Token.\n', '     * @param token token address to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param amt token amount to payback.\n', '     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function payback(address token, uint amt, uint getId, uint setId) external payable {\n', '        uint _amt = getUint(getId, amt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        CrTokenInterface CrTokenContract = CrTokenInterface(CrToken);\n', '        _amt = _amt == uint(-1) ? CrTokenContract.borrowBalanceCurrent(address(this)) : _amt;\n', '\n', '        if (token == getAddressETH()) {\n', '            require(address(this).balance >= _amt, "not-enough-eth");\n', '            CrETHInterface(CrToken).repayBorrow.value(_amt)();\n', '        } else {\n', '            TokenInterface tokenContract = TokenInterface(token);\n', '            require(tokenContract.balanceOf(address(this)) >= _amt, "not-enough-token");\n', '            tokenContract.approve(CrToken, _amt);\n', '            require(CrTokenContract.repayBorrow(_amt) == 0, "repay-failed.");\n', '        }\n', '        setUint(setId, _amt);\n', '\n', '        emit LogPayback(token, CrToken, _amt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogPayback(address,address,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '    }\n', '}\n', '\n', 'contract ExtraResolver is BasicResolver {\n', '    event LogDepositCrToken(address indexed token, address CrToken, uint256 tokenAmt, uint256 CrTokenAmt,uint256 getId, uint256 setId);\n', '    event LogWithdrawCrToken(address indexed token, address CrToken, uint256 CrTokenAmt, uint256 getId, uint256 setId);\n', '\n', '    /**\n', '     * @dev Deposit ETH/ERC20_Token.\n', '     * @param token token address to depositCrToken.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param amt token amount to depositCrToken.\n', '     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set CrToken amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function depositCrToken(address token, uint amt, uint getId, uint setId) external payable{\n', '        uint _amt = getUint(getId, amt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        enterMarket(CrToken);\n', '\n', '        CrTokenInterface CrTokenContract = CrTokenInterface(CrToken);\n', '        uint initialBal = CrTokenContract.balanceOf(address(this));\n', '\n', '        if (token == getAddressETH()) {\n', '            _amt = _amt == uint(-1) ? address(this).balance : _amt;\n', '            CrETHInterface(CrToken).mint.value(_amt)();\n', '        } else {\n', '            TokenInterface tokenContract = TokenInterface(token);\n', '            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\n', '            tokenContract.approve(CrToken, _amt);\n', '            require(CrTokenContract.mint(_amt) == 0, "deposit-CrToken-failed.");\n', '        }\n', '\n', '        uint finalBal = CrTokenContract.balanceOf(address(this));\n', '        uint _cAmt = finalBal - initialBal;\n', '        setUint(setId, _cAmt);\n', '\n', '        emit LogDepositCrToken(token, CrToken, _amt, _cAmt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogDepositCrToken(address,address,uint256,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, _cAmt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw CrETH/CrERC20_Token using CrToken Amt.\n', '     * @param token token address to withdraw CrToken.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '     * @param CrTokenAmt CrToken amount to withdrawCrToken.\n', '     * @param getId Get CrToken amount at this ID from `InstaMemory` Contract.\n', '     * @param setId Set CrToken amount at this ID in `InstaMemory` Contract.\n', '    */\n', '    function withdrawCrToken(address token, uint CrTokenAmt, uint getId, uint setId) external payable {\n', '        uint _amt = getUint(getId, CrTokenAmt);\n', '        address CrToken = InstaCreamMapping(getMappingAddr()).CrTokenMapping(token);\n', '        CrTokenInterface CrTokenContract = CrTokenInterface(CrToken);\n', '        _amt = _amt == uint(-1) ? CrTokenContract.balanceOf(address(this)) : _amt;\n', '        require(CrTokenContract.redeem(_amt) == 0, "redeem-failed");\n', '        setUint(setId, _amt);\n', '\n', '        emit LogWithdrawCrToken(token, CrToken, _amt, getId, setId);\n', '        bytes32 _eventCode = keccak256("LogWithdrawCrToken(address,address,uint256,uint256,uint256)");\n', '        bytes memory _eventParam = abi.encode(token, CrToken, _amt, getId, setId);\n', '        (uint _type, uint _id) = connectorID();\n', '        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n', '\n', '    }\n', '}\n', '\n', '\n', 'contract ConnectCreamFinance is ExtraResolver {\n', '    string constant public name = "Cream-finance-v1.0";\n', '}']