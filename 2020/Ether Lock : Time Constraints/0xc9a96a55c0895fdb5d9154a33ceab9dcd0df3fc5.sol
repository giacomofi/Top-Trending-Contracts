['pragma solidity 0.4.25;\n', '\n', '// File: contracts/saga-genesis/interfaces/IMintManager.sol\n', '\n', '/**\n', ' * @title Mint Manager Interface.\n', ' */\n', 'interface IMintManager {\n', '    /**\n', '     * @dev Return the current minting-point index.\n', '     */\n', '    function getIndex() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/ISGNTokenManager.sol\n', '\n', '/**\n', ' * @title SGN Token Manager Interface.\n', ' */\n', 'interface ISGNTokenManager {\n', '    /**\n', '     * @dev Get the current SGR worth of a given SGN amount.\n', '     * @param _sgnAmount The amount of SGN to convert.\n', '     * @return The equivalent amount of SGR.\n', '     */\n', '    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Exchange SGN for SGR.\n', '     * @param _sender The address of the sender.\n', '     * @param _sgnAmount The amount of SGN received.\n', '     * @return The amount of SGR that the sender is entitled to.\n', '     */\n', '    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Handle direct SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransfer(address _sender, address _to, uint256 _value) external;\n', '\n', '    /**\n', '     * @dev Handle custodian SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _from The address of the source account.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n', '\n', '    /** \n', '     * @dev Upon minting of SGN vested in delay.\n', '     * @param _value The amount of SGN to mint.\n', '     */\n', '    function uponMintSgnVestedInDelay(uint256 _value) external;\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/ISGNConversionManager.sol\n', '\n', '/**\n', ' * @title SGN Conversion Manager Interface.\n', ' */\n', 'interface ISGNConversionManager {\n', '    /**\n', '     * @dev Compute the SGR worth of a given SGN amount at a given minting-point.\n', '     * @param _amount The amount of SGN.\n', '     * @param _index The minting-point index.\n', '     * @return The equivalent amount of SGR.\n', '     */\n', '    function sgn2sgr(uint256 _amount, uint256 _index) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/ISGNAuthorizationManager.sol\n', '\n', '/**\n', ' * @title SGN Authorization Manager Interface.\n', ' */\n', 'interface ISGNAuthorizationManager {\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to sell SGN.\n', '     * @param _sender The address of the user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToSell(address _sender) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to transfer SGN to another user.\n', '     * @param _sender The address of the source user.\n', '     * @param _target The address of the target user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Determine whether or not a user is authorized to transfer SGN from one user to another user.\n', '     * @param _sender The address of the custodian user.\n', '     * @param _source The address of the source user.\n', '     * @param _target The address of the target user.\n', '     * @return Authorization status.\n', '     */\n', '    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\n', '}\n', '\n', '// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\n', '\n', '/**\n', ' * @title Wallets Trading Limiter Interface.\n', ' */\n', 'interface IWalletsTradingLimiter {\n', '    /**\n', '     * @dev Increment the limiter value of a wallet.\n', '     * @param _wallet The address of the wallet.\n', '     * @param _value The amount to be updated.\n', '     */\n', '    function updateWallet(address _wallet, uint256 _value) external;\n', '}\n', '\n', '// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Interface.\n', ' */\n', 'interface IContractAddressLocator {\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) external view returns (address);\n', '\n', '    /**\n', '     * @dev Determine whether or not a contract address relates to one of the identifiers.\n', '     * @param _contractAddress The contract address to look for.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the contract address relates to one of the identifiers.\n', '     */\n', '    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n', '}\n', '\n', '// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n', '\n', '/**\n', ' * @title Contract Address Locator Holder.\n', ' * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n', ' * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n', ' * @dev Thus, any contract can remain "oblivious" to the replacement of any other contract in the system.\n', ' * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n', ' */\n', 'contract ContractAddressLocatorHolder {\n', '    bytes32 internal constant _IAuthorizationDataSource_ = "IAuthorizationDataSource";\n', '    bytes32 internal constant _ISGNConversionManager_    = "ISGNConversionManager"      ;\n', '    bytes32 internal constant _IModelDataSource_         = "IModelDataSource"        ;\n', '    bytes32 internal constant _IPaymentHandler_          = "IPaymentHandler"            ;\n', '    bytes32 internal constant _IPaymentManager_          = "IPaymentManager"            ;\n', '    bytes32 internal constant _IPaymentQueue_            = "IPaymentQueue"              ;\n', '    bytes32 internal constant _IReconciliationAdjuster_  = "IReconciliationAdjuster"      ;\n', '    bytes32 internal constant _IIntervalIterator_        = "IIntervalIterator"       ;\n', '    bytes32 internal constant _IMintHandler_             = "IMintHandler"            ;\n', '    bytes32 internal constant _IMintListener_            = "IMintListener"           ;\n', '    bytes32 internal constant _IMintManager_             = "IMintManager"            ;\n', '    bytes32 internal constant _IPriceBandCalculator_     = "IPriceBandCalculator"       ;\n', '    bytes32 internal constant _IModelCalculator_         = "IModelCalculator"        ;\n', '    bytes32 internal constant _IRedButton_               = "IRedButton"              ;\n', '    bytes32 internal constant _IReserveManager_          = "IReserveManager"         ;\n', '    bytes32 internal constant _ISagaExchanger_           = "ISagaExchanger"          ;\n', '    bytes32 internal constant _ISogurExchanger_           = "ISogurExchanger"          ;\n', '    bytes32 internal constant _SgnToSgrExchangeInitiator_ = "SgnToSgrExchangeInitiator"          ;\n', '    bytes32 internal constant _IMonetaryModel_               = "IMonetaryModel"              ;\n', '    bytes32 internal constant _IMonetaryModelState_          = "IMonetaryModelState"         ;\n', '    bytes32 internal constant _ISGRAuthorizationManager_ = "ISGRAuthorizationManager";\n', '    bytes32 internal constant _ISGRToken_                = "ISGRToken"               ;\n', '    bytes32 internal constant _ISGRTokenManager_         = "ISGRTokenManager"        ;\n', '    bytes32 internal constant _ISGRTokenInfo_         = "ISGRTokenInfo"        ;\n', '    bytes32 internal constant _ISGNAuthorizationManager_ = "ISGNAuthorizationManager";\n', '    bytes32 internal constant _ISGNToken_                = "ISGNToken"               ;\n', '    bytes32 internal constant _ISGNTokenManager_         = "ISGNTokenManager"        ;\n', '    bytes32 internal constant _IMintingPointTimersManager_             = "IMintingPointTimersManager"            ;\n', '    bytes32 internal constant _ITradingClasses_          = "ITradingClasses"         ;\n', '    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = "IWalletsTLValueConverter"       ;\n', '    bytes32 internal constant _BuyWalletsTradingDataSource_       = "BuyWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _SellWalletsTradingDataSource_       = "SellWalletsTradingDataSource"      ;\n', '    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = "WalletsTLSGNTokenManager"         ;\n', '    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = "BuyWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = "SellWalletsTLSGRTokenManager"         ;\n', '    bytes32 internal constant _IETHConverter_             = "IETHConverter"   ;\n', '    bytes32 internal constant _ITransactionLimiter_      = "ITransactionLimiter"     ;\n', '    bytes32 internal constant _ITransactionManager_      = "ITransactionManager"     ;\n', '    bytes32 internal constant _IRateApprover_      = "IRateApprover"     ;\n', '    bytes32 internal constant _SGAToSGRInitializer_      = "SGAToSGRInitializer"     ;\n', '\n', '    IContractAddressLocator private contractAddressLocator;\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator) internal {\n', '        require(_contractAddressLocator != address(0), "locator is illegal");\n', '        contractAddressLocator = _contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address locator.\n', '     * @return The contract address locator.\n', '     */\n', '    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n', '        return contractAddressLocator;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the contract address mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     * @return The contract address.\n', '     */\n', '    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n', '        return contractAddressLocator.getContractAddress(_identifier);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Determine whether or not the sender relates to one of the identifiers.\n', '     * @param _identifiers The identifiers.\n', '     * @return A boolean indicating if the sender relates to one of the identifiers.\n', '     */\n', '    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n', '        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n', '    }\n', '\n', '    /**\n', '     * @dev Verify that the caller is mapped to a given identifier.\n', '     * @param _identifier The identifier.\n', '     */\n', '    modifier only(bytes32 _identifier) {\n', '        require(msg.sender == getContractAddress(_identifier), "caller is illegal");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/saga-genesis/SGNTokenManager.sol\n', '\n', '/**\n', ' * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n', ' */\n', '\n', '/**\n', ' * @title SGN Token Manager.\n', ' */\n', 'contract SGNTokenManager is ISGNTokenManager, ContractAddressLocatorHolder {\n', '    string public constant VERSION = "1.0.1";\n', '\n', '    event ExchangeSgnForSgrCompleted(address indexed _user, uint256 _input, uint256 _output);\n', '    event MintSgnVestedInDelayCompleted(uint256 _value);\n', '\n', '    /**\n', '     * @dev Create the contract.\n', '     * @param _contractAddressLocator The contract address locator.\n', '     */\n', '    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n', '\n', '    /**\n', '     * @dev Return the contract which implements the ISGNAuthorizationManager interface.\n', '     */\n', '    function getSGNAuthorizationManager() public view returns (ISGNAuthorizationManager) {\n', '        return ISGNAuthorizationManager(getContractAddress(_ISGNAuthorizationManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the ISGNConversionManager interface.\n', '     */\n', '    function getSGNConversionManager() public view returns (ISGNConversionManager) {\n', '        return ISGNConversionManager(getContractAddress(_ISGNConversionManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IMintManager interface.\n', '     */\n', '    function getMintManager() public view returns (IMintManager) {\n', '        return IMintManager(getContractAddress(_IMintManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the contract which implements the IWalletsTradingLimiter interface.\n', '     */\n', '    function getWalletsTradingLimiter() public view returns (IWalletsTradingLimiter) {\n', '        return IWalletsTradingLimiter(getContractAddress(_WalletsTradingLimiter_SGNTokenManager_));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current SGR worth of a given SGN amount.\n', '       function name is convertSgnToSga and not convertSgnToSgr for backward compatibility.\n', '     * @param _sgnAmount The amount of SGN to convert.\n', '     * @return The equivalent amount of SGR.\n', '     */\n', '    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256) {\n', '        return convertSgnToSgrFunc(_sgnAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Exchange SGN for SGR.\n', '       function name is exchangeSgnForSga and not exchangeSgnForSgr for backward compatibility.\n', '     * @param _sender The address of the sender.\n', '     * @param _sgnAmount The amount of SGN received.\n', '     * @return The amount of SGR that the sender is entitled to.\n', '     */\n', '    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external only(_ISGNToken_) returns (uint256) {\n', '        require(getSGNAuthorizationManager().isAuthorizedToSell(_sender), "exchanging SGN for SGR is not authorized");\n', '        uint256 sgrAmount = convertSgnToSgrFunc(_sgnAmount);\n', '        require(sgrAmount > 0, "returned amount is zero");\n', '        emit ExchangeSgnForSgrCompleted(_sender, _sgnAmount, sgrAmount);\n', '        return sgrAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Handle direct SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransfer(address _sender, address _to, uint256 _value) external only(_ISGNToken_) {\n', '        require(getSGNAuthorizationManager().isAuthorizedToTransfer(_sender, _to), "direct-transfer of SGN is not authorized");\n', '        getWalletsTradingLimiter().updateWallet(_to, _value);\n', '        _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Handle custodian SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _from The address of the source account.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external only(_ISGNToken_) {\n', '        require(getSGNAuthorizationManager().isAuthorizedToTransferFrom(_sender, _from, _to), "custodian-transfer of SGN is not authorized");\n', '        getWalletsTradingLimiter().updateWallet(_to, _value);\n', '        _value;\n', '    }\n', '\n', '    /** \n', '     * @dev Upon minting of SGN vested in delay.\n', '     * @param _value The amount of SGN to mint.\n', '     */\n', '    function uponMintSgnVestedInDelay(uint256 _value) external only(_ISGNToken_) {\n', '        emit MintSgnVestedInDelayCompleted(_value);\n', '    }\n', '\n', '    /**\n', '     * @dev  Get the amount of SGR received upon conversion of a given SGN amount.\n', '     * @param _sgnAmount the amount of SGN to convert.\n', '     * @return The amount of SGR received upon conversion .\n', '     */\n', '    function convertSgnToSgrFunc(uint256 _sgnAmount) private view returns (uint256) {\n', '        return getSGNConversionManager().sgn2sgr(_sgnAmount, getMintManager().getIndex());\n', '    }\n', '}']