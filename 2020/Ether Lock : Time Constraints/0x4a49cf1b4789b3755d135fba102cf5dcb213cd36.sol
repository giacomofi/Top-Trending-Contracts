['pragma solidity ^0.6.0;\n', '\n', 'abstract contract ERC20 {\n', '  function balanceOf(address account) external view virtual returns (uint256);\n', '  function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '  function burn(uint256 amount) external virtual returns (bool);\n', '}\n', '\n', 'contract Presale {\n', '  address payable public owner = msg.sender;\n', '  uint public startBlock = 11221812;\n', '  uint public duration = 120;\n', '  uint public min = 500 finney;\n', '  uint public max = 1000 finney;\n', '  uint public price = 10 finney;\n', '  address public tokenAddress = 0xb3ef3ce629B6E81944f532580806B399Fe6f0Bd0;\n', '  bool finished;\n', '  \n', '  mapping (address => uint) public bought;\n', '  \n', '  receive() external payable {\n', '    require(!finished);\n', '    require(block.number >= startBlock);\n', '    require(msg.value >= min);\n', '    require(msg.value % price == 0);\n', '    require(bought[msg.sender] + msg.value <= max);\n', '    \n', '    ERC20 token = ERC20(tokenAddress);\n', '    \n', '    if (block.number > startBlock + duration) {\n', '      token.burn(token.balanceOf(address(this)));\n', '      finished = true;\n', '    } else {\n', '      bought[msg.sender] += msg.value;\n', '      owner.transfer(msg.value);\n', '      token.transfer(msg.sender, msg.value / price * 1 ether);\n', '    }\n', '  }\n', '}']