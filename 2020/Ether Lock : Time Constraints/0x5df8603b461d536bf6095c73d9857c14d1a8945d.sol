['// File: contracts/lib/Ownable.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract Ownable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor() internal {\n', '        _OWNER_ = msg.sender;\n', '        emit OwnershipTransferred(address(0), _OWNER_);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0), "INVALID_OWNER");\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() external {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/lib/DecimalMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title DecimalMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Functions for fixed point number with 18 decimals\n', ' */\n', 'library DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant ONE = 10**18;\n', '\n', '    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d) / ONE;\n', '    }\n', '\n', '    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(ONE).div(d);\n', '    }\n', '\n', '    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(ONE).divCeil(d);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', "    This is a simplified version of OpenZepplin's SafeERC20 library\n", '\n', '*/\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/token/DODOMine.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', 'contract DODOMine is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of DODOs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accDODOPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accDODOPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        address lpToken; // Address of LP token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. DODOs to distribute per block.\n', '        uint256 lastRewardBlock; // Last block number that DODOs distribution occurs.\n', '        uint256 accDODOPerShare; // Accumulated DODOs per share, times 1e12. See below.\n', '    }\n', '\n', '    address public dodoToken;\n', '    uint256 public dodoPerBlock;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfos;\n', '    mapping(address => uint256) public lpTokenRegistry;\n', '\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    mapping(address => uint256) public realizedReward;\n', '\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when DODO mining starts.\n', '    uint256 public startBlock;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Claim(address indexed user, uint256 amount);\n', '\n', '    constructor(address _dodoToken, uint256 _startBlock) public {\n', '        dodoToken = _dodoToken;\n', '        startBlock = _startBlock;\n', '    }\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier lpTokenExist(address lpToken) {\n', '        require(lpTokenRegistry[lpToken] > 0, "LP Token Not Exist");\n', '        _;\n', '    }\n', '\n', '    modifier lpTokenNotExist(address lpToken) {\n', '        require(lpTokenRegistry[lpToken] == 0, "LP Token Already Exist");\n', '        _;\n', '    }\n', '\n', '    // ============ Helper ============\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfos.length;\n', '    }\n', '\n', '    function getPid(address _lpToken) public view lpTokenExist(_lpToken) returns (uint256) {\n', '        return lpTokenRegistry[_lpToken] - 1;\n', '    }\n', '\n', '    function getUserLpBalance(address _lpToken, address _user) public view returns (uint256) {\n', '        uint256 pid = getPid(_lpToken);\n', '        return userInfo[pid][_user].amount;\n', '    }\n', '\n', '    // ============ Ownable ============\n', '\n', '    function addLpToken(\n', '        address _lpToken,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public lpTokenNotExist(_lpToken) onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfos.push(\n', '            PoolInfo({\n', '                lpToken: _lpToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                accDODOPerShare: 0\n', '            })\n', '        );\n', '        lpTokenRegistry[_lpToken] = poolInfos.length;\n', '    }\n', '\n', '    function setLpToken(\n', '        address _lpToken,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 pid = getPid(_lpToken);\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfos[pid].allocPoint).add(_allocPoint);\n', '        poolInfos[pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    function setReward(uint256 _dodoPerBlock) external onlyOwner {\n', '        dodoPerBlock = _dodoPerBlock;\n', '    }\n', '\n', '    // ============ View Rewards ============\n', '\n', '    function getPendingReward(address _lpToken, address _user) external view returns (uint256) {\n', '        uint256 pid = getPid(_lpToken);\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        UserInfo storage user = userInfo[pid][_user];\n', '        uint256 accDODOPerShare = pool.accDODOPerShare;\n', '        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 DODOReward = block\n', '                .number\n', '                .sub(pool.lastRewardBlock)\n', '                .mul(dodoPerBlock)\n', '                .mul(pool.allocPoint)\n', '                .div(totalAllocPoint);\n', '            accDODOPerShare = accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\n', '        }\n', '        return DecimalMath.mul(user.amount, accDODOPerShare).sub(user.rewardDebt);\n', '    }\n', '\n', '    function getAllPendingReward(address _user) external view returns (uint256) {\n', '        uint256 length = poolInfos.length;\n', '        uint256 totalReward = 0;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            if (userInfo[pid][_user].amount == 0 || poolInfos[pid].allocPoint == 0) {\n', '                continue; // save gas\n', '            }\n', '            PoolInfo storage pool = poolInfos[pid];\n', '            UserInfo storage user = userInfo[pid][_user];\n', '            uint256 accDODOPerShare = pool.accDODOPerShare;\n', '            uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n', '            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '                uint256 DODOReward = block\n', '                    .number\n', '                    .sub(pool.lastRewardBlock)\n', '                    .mul(dodoPerBlock)\n', '                    .mul(pool.allocPoint)\n', '                    .div(totalAllocPoint);\n', '                accDODOPerShare = accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\n', '            }\n', '            totalReward = totalReward.add(\n', '                DecimalMath.mul(user.amount, accDODOPerShare).sub(user.rewardDebt)\n', '            );\n', '        }\n', '        return totalReward;\n', '    }\n', '\n', '    function getRealizedReward(address _user) external view returns (uint256) {\n', '        return realizedReward[_user];\n', '    }\n', '\n', '    function getDlpMiningSpeed(address _lpToken) external view returns (uint256) {\n', '        uint256 pid = getPid(_lpToken);\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        return dodoPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n', '    }\n', '\n', '    // ============ Update Pools ============\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfos.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfos[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 DODOReward = block\n', '            .number\n', '            .sub(pool.lastRewardBlock)\n', '            .mul(dodoPerBlock)\n', '            .mul(pool.allocPoint)\n', '            .div(totalAllocPoint);\n', '        pool.accDODOPerShare = pool.accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // ============ Deposit & Withdraw & Claim ============\n', '    // Deposit & withdraw will also trigger claim\n', '\n', '    function deposit(address _lpToken, uint256 _amount) public {\n', '        uint256 pid = getPid(_lpToken);\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '        updatePool(pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = DecimalMath.mul(user.amount, pool.accDODOPerShare).sub(\n', '                user.rewardDebt\n', '            );\n', '            safeDODOTransfer(msg.sender, pending);\n', '        }\n', '        IERC20(pool.lpToken).safeTransferFrom(address(msg.sender), address(this), _amount);\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);\n', '        emit Deposit(msg.sender, pid, _amount);\n', '    }\n', '\n', '    function withdraw(address _lpToken, uint256 _amount) public {\n', '        uint256 pid = getPid(_lpToken);\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw too much");\n', '        updatePool(pid);\n', '        uint256 pending = DecimalMath.mul(user.amount, pool.accDODOPerShare).sub(user.rewardDebt);\n', '        safeDODOTransfer(msg.sender, pending);\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);\n', '        IERC20(pool.lpToken).safeTransfer(address(msg.sender), _amount);\n', '        emit Withdraw(msg.sender, pid, _amount);\n', '    }\n', '\n', '    function withdrawAll(address _lpToken) public {\n', '        uint256 balance = getUserLpBalance(_lpToken, msg.sender);\n', '        withdraw(_lpToken, balance);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(address _lpToken) public {\n', '        uint256 pid = getPid(_lpToken);\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '        IERC20(pool.lpToken).safeTransfer(address(msg.sender), user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    function claim(address _lpToken) public {\n', '        uint256 pid = getPid(_lpToken);\n', '        if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {\n', '            return; // save gas\n', '        }\n', '        PoolInfo storage pool = poolInfos[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '        updatePool(pid);\n', '        uint256 pending = DecimalMath.mul(user.amount, pool.accDODOPerShare).sub(user.rewardDebt);\n', '        user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);\n', '        safeDODOTransfer(msg.sender, pending);\n', '    }\n', '\n', '    function claimAll() public {\n', '        uint256 length = poolInfos.length;\n', '        uint256 pending = 0;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {\n', '                continue; // save gas\n', '            }\n', '            PoolInfo storage pool = poolInfos[pid];\n', '            UserInfo storage user = userInfo[pid][msg.sender];\n', '            updatePool(pid);\n', '            pending = pending.add(\n', '                DecimalMath.mul(user.amount, pool.accDODOPerShare).sub(user.rewardDebt)\n', '            );\n', '            user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);\n', '        }\n', '        safeDODOTransfer(msg.sender, pending);\n', '    }\n', '\n', '    // Safe DODO transfer function, just in case if rounding error causes pool to not have enough DODOs.\n', '    function safeDODOTransfer(address _to, uint256 _amount) internal {\n', '        IERC20(dodoToken).safeTransfer(_to, _amount);\n', '        realizedReward[_to] = realizedReward[_to].add(_amount);\n', '        emit Claim(_to, _amount);\n', '    }\n', '}']