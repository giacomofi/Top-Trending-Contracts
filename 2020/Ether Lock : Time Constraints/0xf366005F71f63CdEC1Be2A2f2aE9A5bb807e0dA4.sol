['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newowner;\n', '    address public admin;\n', '    address public dev;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNewOwner {\n', '        require(msg.sender == newowner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newowner = _newOwner;\n', '    }\n', '    \n', '    function takeOwnership() public onlyNewOwner {\n', '        owner = newowner;\n', '    }    \n', '    \n', '    function setAdmin(address _admin) public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '    \n', '    function setDev(address _dev) public onlyOwner {\n', '        dev = _dev;\n', '    }\n', '    \n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDev {\n', '        require(msg.sender == dev || msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }    \n', '}\n', '\n', 'abstract contract ContractConn{\n', '    function transfer(address _to, uint _value) virtual public;\n', '    function transferFrom(address _from, address _to, uint _value) virtual public;\n', '    function balanceOf(address who) virtual public view returns (uint);\n', '}\n', '\n', '\n', 'contract Deposit is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    struct DepositInfo {\n', '        uint256 id;\n', '        address depositor;\n', '        string coinType;\n', '        uint256 amount;\n', '        uint256 depositTime;\n', '        uint256 depositBlock;\n', '        uint256 ExpireBlock;\n', '    }\n', '    \n', '    ContractConn public usdt;\n', '    ContractConn public zild;\n', '    \n', '\n', '    uint256 public depositBlock = 78000;\n', '    uint256 public depositBlockChange;\n', '    uint256 public changeDepositTime;\n', '    bool    public needChangeTime = false;\n', '    \n', '    mapping(address => DepositInfo[]) public eth_deposit;\n', '    mapping(address => DepositInfo[]) public usdt_deposit;\n', '    mapping(address => DepositInfo[]) public zild_deposit;\n', '    \n', '    mapping(address => uint256) public user_ethdeposit_amount;\n', '    mapping(address => uint256) public user_usdtdeposit_amount;\n', '    mapping(address => uint256) public user_zilddeposit_amount;\n', '\n', '    uint256 public ethTotalDeposit;\n', '    uint256 public usdtTotalDeposit;\n', '    uint256 public zildTotalDeposit;\n', '\n', '    event SetDepositBlock(uint256 dblock,address indexed who,uint256 time);\n', '    event EffectDepositBlock(uint256 dblock,address indexed who,uint256 time);\n', '    event DepositETH(address indexed from,uint256 depid,uint256 damount,uint256 bblock,uint256 eblock,uint256 time);\n', '    event DepositUSDT(address indexed from,uint256 depid,uint256 damount,uint256 bblock,uint256 eblock,uint256 time);\n', '    event DepositZILD(address indexed from,uint256 depid,uint256 damount,uint256 bblock,uint256 eblock,uint256 time);\n', '    event WithdrawETH(address indexed to,uint256 damount,uint256 time);\n', '    event WithdrawUSDT(address indexed to,uint256 damount,uint256 time);\n', '    event WithdrawZILD(address indexed to,uint256 damount,uint256 time);\n', '    \n', '    constructor(address _usdt,address _zild) public {\n', '        usdt = ContractConn(_usdt);\n', '        zild = ContractConn(_zild);\n', '    }\n', '    \n', '    function setdepositblock(uint256 _block) public onlyAdmin {\n', '        require(_block > 0,"Desposit: New deposit time must be greater than 0");\n', '        depositBlockChange = _block;\n', '        changeDepositTime = block.number;\n', '        needChangeTime = true;\n', '        emit SetDepositBlock(_block,msg.sender,now);\n', '    }\n', '    \n', '    function effectblockchange() public onlyAdmin {\n', '        require(needChangeTime,"Deposit: No new deposit time are set");\n', '        uint256 currentTime = block.number;\n', '        uint256 effectTime = changeDepositTime.add(depositBlock);\n', '        if (currentTime < effectTime) return;\n', '        depositBlock = depositBlockChange;\n', '        needChangeTime = false;\n', '        emit SetDepositBlock(depositBlockChange,msg.sender,now);\n', '    }    \n', '\n', '    function DepositETHCount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return eth_deposit[_user].length;\n', '    }\n', '    \n', '    function DepositUSDTCount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return usdt_deposit[_user].length;\n', '    }\n', '    \n', '    function DepositZILDCount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return zild_deposit[_user].length;\n', '    }   \n', '\n', '    function DepositETHAmount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return user_ethdeposit_amount[_user];\n', '    }\n', '    \n', '    function DepositUSDTAmount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return user_usdtdeposit_amount[_user];\n', '    }\n', '    \n', '    function DepositZILDAmount(address _user)  view public returns(uint256) {\n', '        require(msg.sender == _user || msg.sender == owner, "Deposit: Only check your own deposit records");\n', '        return user_zilddeposit_amount[_user];\n', '    } \n', '\n', '    function depositETH() public payable returns(uint256){\n', '        uint256 length = eth_deposit[msg.sender].length;\n', '        uint256 deposit_id;\n', '        eth_deposit[msg.sender].push(\n', '            DepositInfo({\n', '                id: length,\n', '                depositor: msg.sender,\n', '                coinType: "eth",\n', '                amount: msg.value,\n', '                depositTime: now,\n', '                depositBlock: block.number,\n', '                ExpireBlock: block.number.add(depositBlock)\n', '            })\n', '        );\n', '        deposit_id = eth_deposit[msg.sender].length;\n', '        user_ethdeposit_amount[msg.sender] = user_ethdeposit_amount[msg.sender].add(msg.value);\n', '        ethTotalDeposit = ethTotalDeposit.add(msg.value);\n', '        emit DepositETH(msg.sender,length,msg.value,block.number,block.number.add(depositBlock),now);\n', '        return length;\n', '    }\n', '    \n', '    function depositUSDT(uint256 _amount) public returns(uint256){\n', '        usdt.transferFrom(address(msg.sender), address(this), _amount);\n', '        uint256 length = usdt_deposit[msg.sender].length;\n', '        usdt_deposit[msg.sender].push(\n', '            DepositInfo({\n', '                id: length,\n', '                depositor: msg.sender,\n', '                coinType: "usdt",\n', '                amount: _amount,\n', '                depositTime: now,\n', '                depositBlock: block.number,\n', '                ExpireBlock: block.number.add(depositBlock)\n', '            })\n', '        );\n', '        user_usdtdeposit_amount[msg.sender] = user_usdtdeposit_amount[msg.sender].add(_amount);\n', '        usdtTotalDeposit = usdtTotalDeposit.add(_amount);\n', '        emit DepositUSDT(msg.sender,length,_amount,block.number,block.number.add(depositBlock),now);\n', '        return length;\n', '    }\n', '\n', '    function depositZILD(uint256 _amount) public returns(uint256){\n', '        zild.transferFrom(address(msg.sender), address(this), _amount);\n', '        uint256 length = zild_deposit[msg.sender].length;\n', '        zild_deposit[msg.sender].push(\n', '            DepositInfo({\n', '                id: length,\n', '                depositor: msg.sender,\n', '                coinType: "zild",\n', '                amount: _amount,\n', '                depositTime: now,\n', '                depositBlock: block.number,\n', '                ExpireBlock: block.number.add(depositBlock)\n', '            })\n', '        );\n', '        user_zilddeposit_amount[msg.sender] = user_zilddeposit_amount[msg.sender].add(_amount);\n', '        zildTotalDeposit = zildTotalDeposit.add(_amount);\n', '        emit DepositZILD(msg.sender,length,_amount,block.number,block.number.add(depositBlock),now);\n', '        return length;\n', '    }\n', '\n', '    function withdrawEth(uint256 _deposit_id) public returns(bool){\n', '        require(block.number > eth_deposit[msg.sender][_deposit_id].ExpireBlock, "The withdrawal block has not arrived!");\n', '        require(eth_deposit[msg.sender][_deposit_id].amount > 0, "There is no deposit available!");\n', '        msg.sender.transfer(eth_deposit[msg.sender][_deposit_id].amount);\n', '        user_ethdeposit_amount[msg.sender] = user_ethdeposit_amount[msg.sender].sub(eth_deposit[msg.sender][_deposit_id].amount);\n', '        ethTotalDeposit = ethTotalDeposit.sub(eth_deposit[msg.sender][_deposit_id].amount);\n', '        eth_deposit[msg.sender][_deposit_id].amount =  0;\n', '        emit WithdrawETH(msg.sender,eth_deposit[msg.sender][_deposit_id].amount,now);\n', '        return true;\n', '    }\n', '    \n', '    function withdrawUSDT(uint256 _deposit_id) public returns(bool){\n', '        require(block.number > usdt_deposit[msg.sender][_deposit_id].ExpireBlock, "The withdrawal block has not arrived!");\n', '        require(usdt_deposit[msg.sender][_deposit_id].amount > 0, "There is no deposit available!");\n', '        usdt.transfer(msg.sender, usdt_deposit[msg.sender][_deposit_id].amount);\n', '        user_usdtdeposit_amount[msg.sender] = user_usdtdeposit_amount[msg.sender].sub(usdt_deposit[msg.sender][_deposit_id].amount);\n', '        usdtTotalDeposit = usdtTotalDeposit.sub(usdt_deposit[msg.sender][_deposit_id].amount);\n', '        usdt_deposit[msg.sender][_deposit_id].amount =  0;\n', '        emit WithdrawUSDT(msg.sender,usdt_deposit[msg.sender][_deposit_id].amount,now);\n', '        return true;\n', '    }\n', '\n', '    function withdrawZILD(uint256 _deposit_id) public returns(bool){\n', '        require(block.number > zild_deposit[msg.sender][_deposit_id].ExpireBlock, "The withdrawal block has not arrived!");\n', '        require(zild_deposit[msg.sender][_deposit_id].amount > 0, "There is no deposit available!");\n', '        zild.transfer(msg.sender,zild_deposit[msg.sender][_deposit_id].amount);\n', '        user_zilddeposit_amount[msg.sender] = user_zilddeposit_amount[msg.sender].sub(zild_deposit[msg.sender][_deposit_id].amount);\n', '        zildTotalDeposit = zildTotalDeposit.sub(zild_deposit[msg.sender][_deposit_id].amount);\n', '        zild_deposit[msg.sender][_deposit_id].amount =  0;\n', '        emit WithdrawZILD(msg.sender,zild_deposit[msg.sender][_deposit_id].amount,now);\n', '        return true;\n', '    }\n', '}']