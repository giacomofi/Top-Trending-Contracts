['// Dependency file: contracts/modules/BaseToken.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'contract BaseToken {\n', '    address public baseToken;\n', '\n', '    // called after deployment\n', '    function initBaseToken(address _baseToken) internal {\n', "        require(baseToken == address(0), 'INITIALIZED');\n", "        require(_baseToken != address(0), 'ADDRESS_IS_ZERO');\n", '        baseToken = _baseToken;  // it should be dgas token address\n', '    }\n', '}\n', '// Dependency file: contracts/interfaces/IERC20.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/libraries/SafeMath.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '// Dependency file: contracts/modules/Ownable.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'Ownable: FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function changeOwner(address _newOwner) public onlyOwner {\n', "        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\n", '        emit OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', '// Dependency file: contracts/modules/DgasStaking.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', "// import '../libraries/TransferHelper.sol';\n", "// import '../libraries/SafeMath.sol';\n", "// import '../interfaces/IERC20.sol';\n", "// import '../interfaces/IDemaxConfig.sol';\n", "// import '../modules/BaseToken.sol';\n", '\n', '\n', 'contract DgasStaking is BaseToken {\n', '    using SafeMath for uint;\n', '\n', '    uint public lockTime;\n', '    uint public totalSupply;\n', '    uint public stakingSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => uint) public allowance;\n', '\n', '\n', '    constructor (address _baseToken) public {\n', '        initBaseToken(_baseToken);\n', '    }\n', '\n', '    function _add(address user, uint value) internal {\n', "        require(value > 0, 'ZERO');\n", '        balanceOf[user] = balanceOf[user].add(value);\n', '        stakingSupply = stakingSupply.add(value);\n', '        allowance[user] = block.number;\n', '    }\n', '\n', '    function _reduce(address user, uint value) internal {\n', "        require(balanceOf[user] >= value && value > 0, 'DgasStaking: INSUFFICIENT_BALANCE');\n", '        balanceOf[user] = balanceOf[user].sub(value);\n', '        stakingSupply = stakingSupply.sub(value);\n', '    }\n', '\n', '    function deposit(uint _amount) external returns (bool) {\n', '        TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\n', '        _add(msg.sender, _amount);\n', '        totalSupply = IERC20(baseToken).balanceOf(address(this));\n', '        return true;\n', '    }\n', '\n', '    function withdraw(uint _amount) external returns (bool) {\n', "        require(block.number > allowance[msg.sender] + lockTime, 'DgasStaking: NOT_DUE');\n", '        TransferHelper.safeTransfer(baseToken, msg.sender, _amount);\n', '        _reduce(msg.sender, _amount);\n', '        totalSupply = IERC20(baseToken).balanceOf(address(this));\n', '        return true;\n', '    }\n', '\n', '}\n', '// Dependency file: contracts/libraries/TransferHelper.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', '// pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// Dependency file: contracts/libraries/ConfigNames.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'library ConfigNames {\n', "    bytes32 public constant PRODUCE_DGAS_RATE = bytes32('PRODUCE_DGAS_RATE');\n", "    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\n", "    bytes32 public constant LIST_DGAS_AMOUNT = bytes32('LIST_DGAS_AMOUNT');\n", "    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\n", "    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\n", "    bytes32 public constant TOKEN_TO_DGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_DGAS_PAIR_MIN_PERCENT');\n", "    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\n", "    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\n", "    bytes32 public constant PROPOSAL_DGAS_AMOUNT = bytes32('PROPOSAL_DGAS_AMOUNT');\n", "    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\n", "    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\n", "    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\n", "    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\n", '}\n', '// Dependency file: contracts/interfaces/ITokenRegistry.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'interface ITokenRegistry {\n', '    function tokenStatus(address _token) external view returns(uint);\n', '    function pairStatus(address tokenA, address tokenB) external view returns (uint);\n', '    function NONE() external view returns(uint);\n', '    function REGISTERED() external view returns(uint);\n', '    function PENDING() external view returns(uint);\n', '    function OPENED() external view returns(uint);\n', '    function CLOSED() external view returns(uint);\n', '    function registryToken(address _token) external returns (bool);\n', '    function publishToken(address _token) external returns (bool);\n', '    function updateToken(address _token, uint _status) external returns (bool);\n', '    function updatePair(address tokenA, address tokenB, uint _status) external returns (bool);\n', '    function tokenCount() external view returns(uint);\n', '    function validTokens() external view returns(address[] memory);\n', '    function iterateValidTokens(uint32 _start, uint32 _end) external view returns (address[] memory);\n', '}\n', '// Dependency file: contracts/interfaces/IDgas.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDgas {\n', '    function amountPerBlock() external view returns (uint);\n', '    function changeAmountPerBlock(uint value) external returns (bool);\n', '    function getProductivity(address user) external view returns (uint, uint);\n', '    function increaseProductivity(address user, uint value) external returns (bool);\n', '    function decreaseProductivity(address user, uint value) external returns (bool);\n', '    function take() external view returns (uint);\n', '    function takes() external view returns (uint, uint);\n', '    function mint() external returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function upgradeImpl(address _newImpl) external;\n', '    function upgradeGovernance(address _newGovernor) external;\n', '}\n', '// Dependency file: contracts/interfaces/IDemaxBallot.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxBallot {\n', '    function proposer() external view returns(address);\n', '    function endBlockNumber() external view returns(uint);\n', '    function value() external view returns(uint);\n', '    function result() external view returns(bool);\n', '    function end() external returns (bool);\n', '    function total() external view returns(uint);\n', '    function weight(address user) external view returns (uint);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IDemaxBallotFactory.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxBallotFactory {\n', '    function create(\n', '        address _proposer,\n', '        uint _value,\n', '        uint _endBlockNumber,\n', '        string calldata _subject,\n', '        string calldata _content\n', '    ) external returns (address);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IDemaxConfig.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IDemaxConfig {\n', '    function governor() external view returns (address);\n', '    function PERCENT_DENOMINATOR() external view returns (uint);\n', '    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\n', '    function getConfigValue(bytes32 _name) external view returns (uint);\n', '    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\n', '    function checkToken(address _token) external view returns(bool);\n', '    function checkPair(address tokenA, address tokenB) external view returns (bool);\n', '    function listToken(address _token) external returns (bool);\n', '    function getDefaultListTokens() external returns (address[] memory);\n', '    function platform() external view returns  (address);\n', '}\n', 'pragma solidity >=0.6.6;\n', '\n', "// import './interfaces/IDemaxConfig.sol';\n", "// import './interfaces/IDemaxBallotFactory.sol';\n", "// import './interfaces/IDemaxBallot.sol';\n", "// import './interfaces/IDgas.sol';\n", "// import './interfaces/ITokenRegistry.sol';\n", "// import './libraries/ConfigNames.sol';\n", "// import './libraries/TransferHelper.sol';\n", "// import './modules/DgasStaking.sol';\n", "// import './modules/Ownable.sol';\n", '\n', 'contract DemaxGovernance is DgasStaking, Ownable {\n', '    uint public version = 1;\n', '    address public configAddr;\n', '    address public ballotFactoryAddr;\n', '    address public rewardAddr;\n', '\n', '    uint public T_CONFIG = 1;\n', '    uint public T_LIST_TOKEN = 2;\n', '    uint public T_TOKEN = 3;\n', '    mapping(address => uint) public ballotTypes;\n', '    mapping(address => bytes32) public configBallots;\n', '    mapping(address => address) public tokenBallots;\n', '    mapping(address => uint) public rewardOf;\n', '    mapping(address => uint) public ballotOf;\n', '    mapping(address => mapping(address => uint)) public applyTokenOf;\n', '    mapping(address => mapping(address => bool)) public collectUsers;\n', '    mapping(address => address) public tokenUsers;\n', '\n', '    address[] public ballots;\n', '\n', '    event ConfigAudited(bytes32 name, address indexed ballot, uint proposal);\n', '    event ConfigBallotCreated(address indexed proposer, bytes32 name, uint value, address indexed ballotAddr, uint reward);\n', '    event TokenBallotCreated(address indexed proposer, address indexed token, uint value, address indexed ballotAddr, uint reward);\n', '    event ProposalerRewardRateUpdated(uint oldVaue, uint newValue);\n', '    event RewardTransfered(address indexed from, address indexed to, uint value);\n', '    event TokenListed(address user, address token, uint amount);\n', '    event ListTokenAudited(address user, address token, uint status, uint burn, uint reward, uint refund);\n', '    event TokenAudited(address user, address token, uint status, bool result);\n', '    event RewardCollected(address indexed user, address indexed ballot, uint value);\n', '    event RewardReceived(address indexed user, uint value);\n', '\n', '    modifier onlyRewarder() {\n', "        require(msg.sender == rewardAddr, 'DemaxGovernance: ONLY_REWARDER');\n", '        _;\n', '    }\n', '\n', '    constructor (address _dgas) DgasStaking(_dgas) public {\n', '    }\n', '\n', '    // called after deployment\n', '    function initialize(address _rewardAddr, address _configContractAddr, address _ballotFactoryAddr) external onlyOwner {\n', "        require(_rewardAddr != address(0) && _configContractAddr != address(0) && _ballotFactoryAddr != address(0), 'DemaxGovernance: INPUT_ADDRESS_IS_ZERO');\n", '\n', '        rewardAddr = _rewardAddr;\n', '        configAddr = _configContractAddr;\n', '        ballotFactoryAddr = _ballotFactoryAddr;\n', '        lockTime = getConfigValue(ConfigNames.UNSTAKE_DURATION);\n', '    }\n', '\n', '    function audit(address _ballot) external returns (bool) {\n', '        if(ballotTypes[_ballot] == T_CONFIG) {\n', '            return auditConfig(_ballot);\n', '        } else if (ballotTypes[_ballot] == T_LIST_TOKEN) {\n', '            return auditListToken(_ballot);\n', '        } else if (ballotTypes[_ballot] == T_TOKEN) {\n', '            return auditToken(_ballot);\n', '        } else {\n', "            revert('DemaxGovernance: UNKNOWN_TYPE');\n", '        }\n', '    }\n', '\n', '    function auditConfig(address _ballot) public returns (bool) {\n', '        bool result = IDemaxBallot(_ballot).end();\n', "        require(result, 'DemaxGovernance: NO_PASS');\n", '        uint value = IDemaxBallot(_ballot).value();\n', '        bytes32 name = configBallots[_ballot];\n', '        result = IDemaxConfig(configAddr).changeConfigValue(name, value);\n', '        if (name == ConfigNames.UNSTAKE_DURATION) {\n', '            lockTime = value;\n', '        } else if (name == ConfigNames.PRODUCE_DGAS_RATE) {\n', '            _changeAmountPerBlock(value);\n', '        }\n', '        emit ConfigAudited(name, _ballot, value);\n', '        return result;\n', '    }\n', '\n', '    function auditListToken(address _ballot) public returns (bool) {\n', '        bool result = IDemaxBallot(_ballot).end();\n', '        address token = tokenBallots[_ballot];\n', '        address user = tokenUsers[token];\n', "        require(ITokenRegistry(configAddr).tokenStatus(token) == ITokenRegistry(configAddr).REGISTERED(), 'DemaxGovernance: AUDITED');\n", '        uint status = result ? ITokenRegistry(configAddr).PENDING() : ITokenRegistry(configAddr).CLOSED();\n', '\t    uint amount = applyTokenOf[user][token];\n', '        (uint burnAmount, uint rewardAmount, uint refundAmount) = (0, 0, 0);\n', '        if (result) {\n', '            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT) / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\n', '            rewardAmount = amount - burnAmount;\n', '            if (burnAmount > 0) {\n', '                TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\n', '                totalSupply = totalSupply.sub(burnAmount);\n', '            }\n', '            if (rewardAmount > 0) {\n', '                rewardOf[rewardAddr] = rewardOf[rewardAddr].add(rewardAmount);\n', '                ballotOf[_ballot] = ballotOf[_ballot].add(rewardAmount);\n', '                _rewardTransfer(rewardAddr, _ballot, rewardAmount);\n', '            }\n', '            ITokenRegistry(configAddr).publishToken(token);\n', '        } else {\n', '            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT) / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\n', '            refundAmount = amount - burnAmount;\n', '            if (burnAmount > 0) TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\n', '            if (refundAmount > 0) TransferHelper.safeTransfer(baseToken, user, refundAmount);\n', '            totalSupply = totalSupply.sub(amount);\n', '            ITokenRegistry(configAddr).updateToken(token, status);\n', '        }\n', '\t    emit ListTokenAudited(user, token, status, burnAmount, rewardAmount, refundAmount);\n', '        return result;\n', '    }\n', '\n', '    function auditToken(address _ballot) public returns (bool) {\n', '        bool result = IDemaxBallot(_ballot).end();\n', '        uint status = IDemaxBallot(_ballot).value();\n', '        address token = tokenBallots[_ballot];\n', '        address user = tokenUsers[token];\n', "        require(ITokenRegistry(configAddr).tokenStatus(token) != status, 'DemaxGovernance: TOKEN_STATUS_NO_CHANGE');\n", '        if (result) {\n', '            ITokenRegistry(configAddr).updateToken(token, status);\n', '        } else {\n', '            status = ITokenRegistry(configAddr).tokenStatus(token);\n', '        }\n', '\t    emit TokenAudited(user, token, status, result);\n', '        return result;\n', '    }\n', '\n', '    function getConfigValue(bytes32 _name) public view returns (uint) {\n', '        return IDemaxConfig(configAddr).getConfigValue(_name);\n', '    }\n', '\n', '    function createConfigBallot(bytes32 _name, uint _value, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\n', "        require(_value >= 0, 'DemaxGovernance: INVALID_PARAMTERS');\n", '        { // avoids stack too deep errors\n', '        (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) = IDemaxConfig(configAddr).getConfig(_name);\n', '        require(enable == 1, "DemaxGovernance: CONFIG_DISABLE");\n', '        require(_value >= minValue && _value <= maxValue, "DemaxGovernance: OUTSIDE");\n', '        uint span = _value >= value? (_value - value) : (value - _value);\n', '        require(maxSpan >= span, "DemaxGovernance: OVERSTEP");\n', '        }\n', '        require(_amount >= getConfigValue(ConfigNames.PROPOSAL_DGAS_AMOUNT), "DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL");\n', '        if(_amount > 0) {\n', '            _amount = _transferForBallot(_amount, _wallet);\n', '            rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\n', '        }\n', '        uint endBlockNumber = block.number + getConfigValue(ConfigNames.VOTE_DURATION);\n', '        address ballotAddr = IDemaxBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endBlockNumber, _subject, _content);\n', '        configBallots[ballotAddr] = _name;\n', '        uint reward = _createdBallot(ballotAddr, T_CONFIG);\n', '        emit ConfigBallotCreated(msg.sender, _name, _value, ballotAddr, reward);\n', '        return ballotAddr;\n', '    }\n', '\n', '    function createTokenBallot(address _token, uint _value, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\n', "        require(!_isDefaultToken(_token), 'DemaxGovernance: DEFAULT_LIST_TOKENS_PROPOSAL_DENY');\n", '        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\n', "        require(status > ITokenRegistry(configAddr).REGISTERED() && status < ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: INVALID_STATUS');\n", '        if(status == ITokenRegistry(configAddr).PENDING()) {\n', "            require(_value == ITokenRegistry(configAddr).OPENED() || _value == ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: INVALID_STATUS');\n", '        } else if(status == ITokenRegistry(configAddr).OPENED()) {\n', "            require(_value == ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: INVALID_STATUS');\n", '        } \n', "        require(status != _value, 'DemaxGovernance: STATUS_NO_CHANGE');\n", '        require(_amount >= getConfigValue(ConfigNames.PROPOSAL_DGAS_AMOUNT), "DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL");\n', '        if(_amount > 0) {\n', '            _amount = _transferForBallot(_amount, _wallet);\n', '            rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\n', '        }\n', '        address ballotAddr = _createTokenBallot(T_TOKEN, _token, _value, _subject, _content);\n', '        return ballotAddr;\n', '    }\n', '\n', '\tfunction listToken(address _token, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\n', '        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\n', "        require(status == ITokenRegistry(configAddr).NONE() || status == ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: LISTED');\n", '\t    require(_amount >= getConfigValue(ConfigNames.LIST_DGAS_AMOUNT), "DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_LIST");\n', '\t    tokenUsers[_token] = msg.sender;\n', '        if(_amount > 0) {\n', '            applyTokenOf[msg.sender][_token] = _transferForBallot(_amount, _wallet);\n', '        }\n', '\t    ITokenRegistry(configAddr).registryToken(_token);\n', '        address ballotAddr = _createTokenBallot(T_LIST_TOKEN, _token, ITokenRegistry(configAddr).PENDING(), _subject, _content);\n', '\t    emit TokenListed(msg.sender, _token, _amount);\n', '        return ballotAddr;\n', '\t}\n', '\n', '    function _createTokenBallot(uint _type, address _token, uint _value, string memory _subject, string memory _content) private returns (address) {\n', '        uint endBlockNumber = block.number + getConfigValue(ConfigNames.VOTE_DURATION);\n', '        address ballotAddr = IDemaxBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endBlockNumber, _subject, _content);\n', '        uint reward = _createdBallot(ballotAddr, _type);\n', '        ballotOf[ballotAddr] = reward;\n', '        tokenBallots[ballotAddr] = _token;\n', '        emit TokenBallotCreated(msg.sender, _token, _value, ballotAddr, reward);\n', '        return ballotAddr;\n', '    }\n', '\n', '    function collectReward(address _ballot) external returns (uint) {\n', '        require(block.number >= IDemaxBallot(_ballot).endBlockNumber(), "DemaxGovernance: NOT_YET_ENDED");\n', "        require(!collectUsers[_ballot][msg.sender], 'DemaxGovernance: REWARD_COLLECTED');\n", '        uint amount = getReward(_ballot);\n', '        _rewardTransfer(_ballot, msg.sender, amount);\n', '        collectUsers[_ballot][msg.sender] = true;\n', '        emit RewardCollected(msg.sender, _ballot, amount);\n', '    }\n', '\n', '    function getReward(address _ballot) public view returns (uint) {\n', '        if (block.number < IDemaxBallot(_ballot).endBlockNumber() || collectUsers[_ballot][msg.sender]) {\n', '            return 0;\n', '        }\n', '        uint amount;\n', '        uint shares = ballotOf[_ballot];\n', '        if (IDemaxBallot(_ballot).result()) {\n', '            uint extra;\n', '            uint rewardRate = getConfigValue(ConfigNames.VOTE_REWARD_PERCENT);\n', '            if ( rewardRate > 0) {\n', '               extra = shares * rewardRate / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\n', '               shares -= extra;\n', '            }\n', '            if (msg.sender == IDemaxBallot(_ballot).proposer()) {\n', '                amount = extra;\n', '            }\n', '        }\n', '\n', '        if (IDemaxBallot(_ballot).total() > 0) {\n', '            amount += shares * IDemaxBallot(_ballot).weight(msg.sender) / IDemaxBallot(_ballot).total();\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function addReward(uint _value) external onlyRewarder returns (bool) {\n', "        require(_value > 0, 'DemaxGovernance: ADD_REWARD_VALUE_IS_ZERO');\n", '        uint total = IERC20(baseToken).balanceOf(address(this));\n', '        uint diff = total.sub(totalSupply);\n', "        require(_value <= diff, 'DemaxGovernance: ADD_REWARD_EXCEED');\n", '        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_value);\n', '        totalSupply = total;\n', '        emit RewardReceived(rewardAddr, _value);\n', '    }\n', '\n', '    function _rewardTransfer(address _from, address _to, uint _value) private returns (bool) {\n', "        require(_value >= 0 && rewardOf[_from] >= _value, 'DemaxGovernance: INSUFFICIENT_BALANCE');\n", '        rewardOf[_from] = rewardOf[_from].sub(_value);\n', '        rewardOf[_to] = rewardOf[_to].add(_value);\n', '        emit RewardTransfered(_from, _to, _value);\n', '    }\n', '\n', '    function _isDefaultToken(address _token) internal returns (bool) {\n', '        address[] memory tokens = IDemaxConfig(configAddr).getDefaultListTokens();\n', '        for(uint i = 0 ; i < tokens.length; i++){\n', '            if (tokens[i] == _token) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _transferForBallot(uint _amount, bool _wallet) internal returns (uint) {\n', '        if (_wallet) {\n', '            TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\n', '            totalSupply += _amount;\n', '        } else {\n', '            _reduce(msg.sender, _amount);\n', '        }\n', '        return _amount;\n', '    }\n', '\n', '    function _createdBallot(address _ballot, uint _type) internal returns (uint) {\n', '        uint reward = rewardOf[rewardAddr];\n', '        ballotOf[_ballot] = reward;\n', '        _rewardTransfer(rewardAddr, _ballot, reward);\n', '        ballots.push(_ballot);\n', '        ballotTypes[_ballot] = _type;\n', '        return reward;\n', '    }\n', '\n', '    function ballotCount() external view returns (uint) {\n', '        return ballots.length;\n', '    }\n', '\n', '    function _changeAmountPerBlock(uint _value) internal returns (bool) {\n', '        return IDgas(baseToken).changeAmountPerBlock(_value);\n', '    }\n', '\n', '    function updateDgasGovernor(address _new) external onlyOwner {\n', '        IDgas(baseToken).upgradeGovernance(_new);\n', '    }\n', '\n', '    function upgradeApproveReward() external returns (uint) {\n', "        require(rewardOf[rewardAddr] > 0, 'DemaxGovernance: UPGRADE_NO_REWARD');\n", "        require(IDemaxConfig(configAddr).governor() != address(this), 'DemaxGovernance: UPGRADE_NO_CHANGE');\n", '        TransferHelper.safeApprove(baseToken, IDemaxConfig(configAddr).governor(), rewardOf[rewardAddr]);\n', '        return rewardOf[rewardAddr]; \n', '    }\n', '\n', '    function receiveReward(address _from, uint _value) external returns (bool) {\n', "        require(_value > 0, 'DemaxGovernance: RECEIVE_REWARD_VALUE_IS_ZERO');\n", '        TransferHelper.safeTransferFrom(baseToken, _from, address(this), _value);\n', '        rewardOf[rewardAddr] += _value;\n', '        totalSupply += _value;\n', '        emit RewardReceived(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}']