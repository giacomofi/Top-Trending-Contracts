['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/IBridgeValidators.sol\n', '\n', 'interface IBridgeValidators {\n', '    function isValidator(address _validator) public view returns(bool);\n', '    function requiredSignatures() public view returns(uint256);\n', '    function owner() public view returns(address);\n', '}\n', '\n', '// File: contracts/libraries/Message.sol\n', '\n', 'library Message {\n', '    // function uintToString(uint256 inputValue) internal pure returns (string) {\n', '    //     // figure out the length of the resulting string\n', '    //     uint256 length = 0;\n', '    //     uint256 currentValue = inputValue;\n', '    //     do {\n', '    //         length++;\n', '    //         currentValue /= 10;\n', '    //     } while (currentValue != 0);\n', '    //     // allocate enough memory\n', '    //     bytes memory result = new bytes(length);\n', '    //     // construct the string backwards\n', '    //     uint256 i = length - 1;\n', '    //     currentValue = inputValue;\n', '    //     do {\n', '    //         result[i--] = byte(48 + currentValue % 10);\n', '    //         currentValue /= 10;\n', '    //     } while (currentValue != 0);\n', '    //     return string(result);\n', '    // }\n', '\n', '    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\n', '        for (uint256 i = 0; i < array.length; i++) {\n', '            if (array[i] == value) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '    // layout of message :: bytes:\n', '    // offset  0: 32 bytes :: uint256 - message length\n', '    // offset 32: 20 bytes :: address - recipient address\n', '    // offset 52: 32 bytes :: uint256 - value\n', '    // offset 84: 32 bytes :: bytes32 - transaction hash\n', '    // offset 116: 32 bytes :: uint256 - home gas price\n', '\n', '    // bytes 1 to 32 are 0 because message length is stored as little endian.\n', '    // mload always reads 32 bytes.\n', '    // so we can and have to start reading recipient at offset 20 instead of 32.\n', '    // if we were to read at 32 the address would contain part of value and be corrupted.\n', '    // when reading from offset 20 mload will read 12 zero bytes followed\n', '    // by the 20 recipient address bytes and correctly convert it into an address.\n', '    // this saves some storage/gas over the alternative solution\n', '    // which is padding address to 32 bytes and reading recipient at offset 32.\n', '    // for more details see discussion in:\n', '    // https://github.com/paritytech/parity-bridge/issues/61\n', '    function parseMessage(bytes message)\n', '    internal\n', '    pure\n', '    returns(address recipient, uint256 amount, bytes32 txHash)\n', '    {\n', '        require(isMessageValid(message));\n', '        assembly {\n', '            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '            amount := mload(add(message, 52))\n', '            txHash := mload(add(message, 84))\n', '        }\n', '    }\n', '\n', '    function isMessageValid(bytes _msg) internal pure returns(bool) {\n', '        return _msg.length == 116;\n', '    }\n', '\n', '    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n', '        require(signature.length == 65);\n', '        bytes32 r;\n', '        bytes32 s;\n', '        bytes1 v;\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := mload(add(signature, 0x60))\n', '        }\n', '        return ecrecover(hashMessage(message), uint8(v), r, s);\n', '    }\n', '\n', '    function hashMessage(bytes message) internal pure returns (bytes32) {\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n";\n', '        // message is always 116 length\n', '        string memory msgLength = "116";\n', '        return keccak256(prefix, msgLength, message);\n', '    }\n', '\n', '    function hasEnoughValidSignatures(\n', '        bytes _message,\n', '        uint8[] _vs,\n', '        bytes32[] _rs,\n', '        bytes32[] _ss,\n', '        IBridgeValidators _validatorContract) internal view {\n', '        require(isMessageValid(_message));\n', '        uint256 requiredSignatures = _validatorContract.requiredSignatures();\n', '        require(_vs.length >= requiredSignatures);\n', '        bytes32 hash = hashMessage(_message);\n', '        address[] memory encounteredAddresses = new address[](requiredSignatures);\n', '\n', '        for (uint256 i = 0; i < requiredSignatures; i++) {\n', '            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\n', '            require(_validatorContract.isValidator(recoveredAddress));\n', '            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\n', '                revert();\n', '            }\n', '            encounteredAddresses[i] = recoveredAddress;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/upgradeability/EternalStorage.sol\n', '\n', '/**\n', ' * @title EternalStorage\n', ' * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n', ' */\n', 'contract EternalStorage {\n', '\n', '    mapping(bytes32 => uint256) internal uintStorage;\n', '    mapping(bytes32 => string) internal stringStorage;\n', '    mapping(bytes32 => address) internal addressStorage;\n', '    mapping(bytes32 => bytes) internal bytesStorage;\n', '    mapping(bytes32 => bool) internal boolStorage;\n', '    mapping(bytes32 => int256) internal intStorage;\n', '\n', '}\n', '\n', '// File: contracts/IOwnedUpgradeabilityProxy.sol\n', '\n', 'interface IOwnedUpgradeabilityProxy {\n', '    function proxyOwner() public view returns (address);\n', '}\n', '\n', '// File: contracts/upgradeable_contracts/OwnedUpgradeability.sol\n', '\n', 'contract OwnedUpgradeability {\n', '\n', '    function upgradeabilityAdmin() public view returns (address) {\n', '        return IOwnedUpgradeabilityProxy(this).proxyOwner();\n', '    }\n', '\n', '    // Avoid using onlyProxyOwner name to prevent issues with implementation from proxy contract\n', '    modifier onlyIfOwnerOfProxy() {\n', '        require(msg.sender == upgradeabilityAdmin());\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/upgradeable_contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev This contract has an owner address providing basic authorization control\n', ' */\n', 'contract Ownable is EternalStorage {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function owner() public view returns (address) {\n', '        return addressStorage[keccak256("owner")];\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner the address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        setOwner(newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Sets a new owner address\n', '    */\n', '    function setOwner(address newOwner) internal {\n', '        emit OwnershipTransferred(owner(), newOwner);\n', '        addressStorage[keccak256("owner")] = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/upgradeable_contracts/Validatable.sol\n', '\n', 'contract Validatable is EternalStorage {\n', '\n', '    function validatorContract() public view returns(IBridgeValidators) {\n', '        return IBridgeValidators(addressStorage[keccak256("validatorContract")]);\n', '    }\n', '\n', '    modifier onlyValidator() {\n', '        require(validatorContract().isValidator(msg.sender));\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/upgradeable_contracts/U_BasicBridge.sol\n', '\n', 'contract BasicBridge is EternalStorage, Validatable, Ownable {\n', '    event GasPriceChanged(uint256 gasPrice);\n', '    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\n', '\n', '    function setGasPrice(uint256 _gasPrice) public onlyOwner {\n', '        require(_gasPrice > 0);\n', '        uintStorage[keccak256("gasPrice")] = _gasPrice;\n', '        emit GasPriceChanged(_gasPrice);\n', '    }\n', '\n', '    function gasPrice() public view returns(uint256) {\n', '        return uintStorage[keccak256("gasPrice")];\n', '    }\n', '\n', '    function setRequiredBlockConfirmations(uint256 _blockConfirmations) public onlyOwner {\n', '        require(_blockConfirmations > 0);\n', '        uintStorage[keccak256("requiredBlockConfirmations")] = _blockConfirmations;\n', '        emit RequiredBlockConfirmationChanged(_blockConfirmations);\n', '    }\n', '\n', '    function requiredBlockConfirmations() public view returns(uint256) {\n', '        return uintStorage[keccak256("requiredBlockConfirmations")];\n', '    }\n', '}\n', '\n', '// File: contracts/upgradeable_contracts/U_HomeBridge.sol\n', '\n', 'contract Sacrifice {\n', '    constructor(address _recipient) public payable {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', 'contract HomeBridge is EternalStorage, BasicBridge, OwnedUpgradeability {\n', '    using SafeMath for uint256;\n', '    event GasConsumptionLimitsUpdated(uint256 gas);\n', '    event Deposit (address recipient, uint256 value);\n', '    event Withdraw (address recipient, uint256 value, bytes32 transactionHash);\n', '    event DailyLimit(uint256 newLimit);\n', '    event ForeignDailyLimit(uint256 newLimit);\n', '\n', '    function initialize (\n', '        address _validatorContract,\n', '        uint256 _homeDailyLimit,\n', '        uint256 _maxPerTx,\n', '        uint256 _minPerTx,\n', '        uint256 _homeGasPrice,\n', '        uint256 _requiredBlockConfirmations\n', '    ) public\n', '    returns(bool)\n', '    {\n', '        require(!isInitialized());\n', '        require(_validatorContract != address(0));\n', '        require(_homeGasPrice > 0);\n', '        require(_requiredBlockConfirmations > 0);\n', '        require(_minPerTx > 0 && _maxPerTx > _minPerTx && _homeDailyLimit > _maxPerTx);\n', '        addressStorage[keccak256("validatorContract")] = _validatorContract;\n', '        uintStorage[keccak256("deployedAtBlock")] = block.number;\n', '        uintStorage[keccak256("homeDailyLimit")] = _homeDailyLimit;\n', '        uintStorage[keccak256("maxPerTx")] = _maxPerTx;\n', '        uintStorage[keccak256("minPerTx")] = _minPerTx;\n', '        uintStorage[keccak256("gasPrice")] = _homeGasPrice;\n', '        uintStorage[keccak256("requiredBlockConfirmations")] = _requiredBlockConfirmations;\n', '        setInitialize(true);\n', '        return isInitialized();\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        require(msg.data.length == 0);\n', '        require(withinLimit(msg.value));\n', '        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(msg.value));\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function upgradeFrom3To4() public {\n', '        require(owner() == address(0));\n', '        setOwner(validatorContract().owner());\n', '    }\n', '\n', '    function gasLimitWithdrawRelay() public view returns(uint256) {\n', '        return uintStorage[keccak256("gasLimitWithdrawRelay")];\n', '    }\n', '\n', '    function deployedAtBlock() public view returns(uint256) {\n', '        return uintStorage[keccak256("deployedAtBlock")];\n', '    }\n', '\n', '    function homeDailyLimit() public view returns(uint256) {\n', '        return uintStorage[keccak256("homeDailyLimit")];\n', '    }\n', '\n', '    function foreignDailyLimit() public view returns(uint256) {\n', '        return uintStorage[keccak256("foreignDailyLimit")];\n', '    }\n', '\n', '    function totalSpentPerDay(uint256 _day) public view returns(uint256) {\n', '        return uintStorage[keccak256("totalSpentPerDay", _day)];\n', '    }\n', '\n', '    function totalExecutedPerDay(uint256 _day) public view returns(uint256) {\n', '        return uintStorage[keccak256("totalExecutedPerDay", _day)];\n', '    }\n', '\n', '    function withdraws(bytes32 _withdraw) public view returns(bool) {\n', '        return boolStorage[keccak256("withdraws", _withdraw)];\n', '    }\n', '\n', '    function setGasLimitWithdrawRelay(uint256 _gas) external onlyOwner {\n', '        uintStorage[keccak256("gasLimitWithdrawRelay")] = _gas;\n', '        emit GasConsumptionLimitsUpdated(_gas);\n', '    }\n', '\n', '    function withdraw(uint8[] vs, bytes32[] rs, bytes32[] ss, bytes message) external {\n', '        Message.hasEnoughValidSignatures(message, vs, rs, ss, validatorContract());\n', '        address recipient;\n', '        uint256 amount;\n', '        bytes32 txHash;\n', '        (recipient, amount, txHash) = Message.parseMessage(message);\n', '        require(withinForeignLimit(amount));\n', '        setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(amount));\n', '        require(!withdraws(txHash));\n', '        setWithdraws(txHash, true);\n', '\n', '        // pay out recipient\n', '        if (!recipient.send(amount)) {\n', '            (new Sacrifice).value(amount)(recipient);\n', '        }\n', '\n', '        emit Withdraw(recipient, amount, txHash);\n', '    }\n', '\n', '    function setHomeDailyLimit(uint256 _homeDailyLimit) external onlyOwner {\n', '        uintStorage[keccak256("homeDailyLimit")] = _homeDailyLimit;\n', '        emit DailyLimit(_homeDailyLimit);\n', '    }\n', '\n', '    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\n', '        require(_maxPerTx < homeDailyLimit());\n', '        uintStorage[keccak256("maxPerTx")] = _maxPerTx;\n', '    }\n', '\n', '    function setForeignDailyLimit(uint256 _foreignDailyLimit) external onlyOwner {\n', '        uintStorage[keccak256("foreignDailyLimit")] = _foreignDailyLimit;\n', '        emit ForeignDailyLimit(_foreignDailyLimit);\n', '    }\n', '\n', '    function setForeignMaxPerTx(uint256 _maxPerTx) external onlyOwner {\n', '        require(_maxPerTx < foreignDailyLimit());\n', '        uintStorage[keccak256("foreignMaxPerTx")] = _maxPerTx;\n', '    }\n', '\n', '    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\n', '        require(_minPerTx < homeDailyLimit() && _minPerTx < maxPerTx());\n', '        uintStorage[keccak256("minPerTx")] = _minPerTx;\n', '    }\n', '\n', '    function minPerTx() public view returns(uint256) {\n', '        return uintStorage[keccak256("minPerTx")];\n', '    }\n', '\n', '    function getCurrentDay() public view returns(uint256) {\n', '        return now / 1 days;\n', '    }\n', '\n', '    function maxPerTx() public view returns(uint256) {\n', '        return uintStorage[keccak256("maxPerTx")];\n', '    }\n', '\n', '    function foreignMaxPerTx() public view returns(uint256) {\n', '        return uintStorage[keccak256("foreignMaxPerTx")];\n', '    }\n', '\n', '    function withinLimit(uint256 _amount) public view returns(bool) {\n', '        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\n', '        return homeDailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\n', '    }\n', '\n', '    function withinForeignLimit(uint256 _amount) public view returns(bool) {\n', '        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\n', '        return foreignDailyLimit() >= nextLimit && _amount <= foreignMaxPerTx();\n', '    }\n', '\n', '    function isInitialized() public view returns(bool) {\n', '        return boolStorage[keccak256("isInitialized")];\n', '    }\n', '\n', '    function setTotalSpentPerDay(uint256 _day, uint256 _value) private {\n', '        uintStorage[keccak256("totalSpentPerDay", _day)] = _value;\n', '    }\n', '\n', '    function setTotalExecutedPerDay(uint256 _day, uint256 _value) private {\n', '        uintStorage[keccak256("totalExecutedPerDay", _day)] = _value;\n', '    }\n', '\n', '    function setWithdraws(bytes32 _withdraw, bool _status) private {\n', '        boolStorage[keccak256("withdraws", _withdraw)] = _status;\n', '    }\n', '\n', '    function setInitialize(bool _status) private {\n', '        boolStorage[keccak256("isInitialized")] = _status;\n', '    }\n', '}']