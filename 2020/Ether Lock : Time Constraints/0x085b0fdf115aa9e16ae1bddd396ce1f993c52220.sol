['pragma solidity 0.4.19;\n', '\n', '// -------------------------------------------------------------------------------------------\n', '// Created by HIGHLANDER NETWORK\n', '// "ONEX Network"\n', '//\n', '// Homepage: https://onex.network\n', '// ONEX Network is a ERC223 Proof-of-Stake standard token on Ethereum with a max supply of 10 Million.\n', '// For details, please visit: https://github.com/HighlanderNetwork/ONEX-Network\n', '// -------------------------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '/**\n', ' * @title PoSTokenStandard\n', ' * @dev the interface of PoSTokenStandard\n', ' */\n', 'contract PoSTokenStandard {\n', '    uint256 public stakeStartTime;\n', '    uint256 public stakeMinAge;\n', '    uint256 public stakeMaxAge;\n', '    function mint() public returns (bool);\n', '    function coinAge(address staker) public view returns (uint256);\n', '    function annualInterest() public view returns (uint256);\n', '    event Mint(address indexed _address, uint _reward);\n', '}\n', '\n', '\n', 'contract ONEXN is ERC223, PoSTokenStandard {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "ONEX Network";\n', '    string public symbol = "ONEXN";\n', '    uint8 public decimals = 18;\n', '\n', '    uint public chainStartTime; //chain start time\n', '    uint public chainStartBlockNumber; //chain start block number\n', '    uint public stakeStartTime; //stake start time\n', '    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\n', '    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\n', '    uint public maxMintProofOfStake = 10**17; // default 10% annual interest\n', '\n', '    uint public totalSupply;\n', '    uint public maxTotalSupply;\n', '    uint public totalInitialSupply;\n', '\n', '    struct transferInStruct{\n', '        uint128 amount;\n', '        uint64 time;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => transferInStruct[]) transferIns;\n', '\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '\n', '    function ONEXN() public {\n', '        maxTotalSupply = 10**25; // 10 Mil.\n', '        totalInitialSupply = 10**24; // 1 Mil.\n', '\n', '        chainStartTime = now;\n', '        stakeStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '\n', '        balances[msg.sender] = totalInitialSupply;\n', '        totalSupply = totalInitialSupply;\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '        if(isContract(_to)) {\n', '          return transferToContract(_to, _value, _data);\n', '        } else {\n', '          return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      if(msg.sender == _to) return mint();\n', '      if(balanceOf(msg.sender) < _value) revert();\n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '      balances[_to] = balanceOf(_to).add(_value);\n', '\n', '      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '      uint64 _now = uint64(now);\n', '      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '      transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '\n', '      Transfer(msg.sender, _to, _value);\n', '      ERC223Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '\n', '    //function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      if(msg.sender == _to) return mint();\n', '      if (balanceOf(msg.sender) < _value) revert();\n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '      balances[_to] = balanceOf(_to).add(_value);\n', '      ContractReceiver reciever = ContractReceiver(_to);\n', '      reciever.tokenFallback(msg.sender, _value, _data);\n', '\n', '      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '      uint64 _now = uint64(now);\n', '      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '      transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '\n', '      Transfer(msg.sender, _to, _value);\n', '      ERC223Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '\n', '    function mint() public canPoSMint returns (bool) {\n', '        if(balances[msg.sender] <= 0) return false;\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = getProofOfStakeReward(msg.sender);\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        Mint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '\n', '    function getBlockNumber() public view returns (uint blockNumber) {\n', '        blockNumber = block.number.sub(chainStartBlockNumber);\n', '    }\n', '\n', '\n', '    function coinAge(address staker) public view returns (uint256) {\n', '        return getCoinAge(staker, now);\n', '    }\n', '\n', '\n', '    function annualInterest() public view returns(uint interest) {\n', '        uint _now = now;\n', '        interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\n', '            interest = (770 * maxMintProofOfStake).div(100);\n', '        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\n', '            interest = (435 * maxMintProofOfStake).div(100);\n', '        }\n', '    }\n', '\n', '\n', '    function getProofOfStakeReward(address _address) internal view returns (uint) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint _now = now;\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge <= 0) return 0;\n', '\n', '        uint interest = maxMintProofOfStake;\n', '        // Due to the high interest rate for the first two years, compounding should be taken into account.\n', '        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n', '        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\n', '            // 1st year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\n', '            interest = (770 * maxMintProofOfStake).div(100);\n', '        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\n', '            // 2nd year effective annual interest rate is 50%\n', '            interest = (435 * maxMintProofOfStake).div(100);\n', '        }\n', '\n', '        uint offset = 10**uint(decimals);\n', '\n', '        return (_coinAge * interest).div(365 * offset);\n', '    }\n', '\n', '\n', '    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    // Function to access name of token .\n', '    function name() constant returns (string _name) {\n', '        return name;\n', '    }\n', '    // Function to access symbol of token .\n', '    function symbol() constant returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    // Function to access decimals of token .\n', '    function decimals() constant returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    // Function to access total supply of tokens .\n', '    function totalSupply() constant returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '}']