['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface sbControllerInterface {\n', '  function getDayMineSecondsUSDTotal(uint256 day) external view returns (uint256);\n', '\n', '  function getCommunityDayMineSecondsUSD(address community, uint256 day) external view returns (uint256);\n', '\n', '  function getCommunityDayRewards(address community, uint256 day) external view returns (uint256);\n', '\n', '  function getStartDay() external view returns (uint256);\n', '\n', '  function getMaxYears() external view returns (uint256);\n', '\n', '  function getStrongPoolDailyRewards(uint256 day) external view returns (uint256);\n', '\n', '  function communityAccepted(address community) external view returns (bool);\n', '\n', '  function getCommunities() external view returns (address[] memory);\n', '\n', '  function upToDate() external view returns (bool);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface sbVotesInterface {\n', '  function getCommunityData(address community, uint256 day)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    );\n', '\n', '  function getPriorProposalVotes(address account, uint256 blockNumber) external view returns (uint96);\n', '\n', '  function receiveServiceRewards(uint256 day, uint256 amount) external;\n', '\n', '  function receiveVoterRewards(uint256 day, uint256 amount) external;\n', '\n', '  function updateVotes(\n', '    address staker,\n', '    uint256 rawAmount,\n', '    bool adding\n', '  ) external;\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface sbTokensInterface {\n', '  function getTokens() external view returns (address[] memory);\n', '\n', '  function getTokenPrices(uint256 day) external view returns (uint256[] memory);\n', '\n', '  function tokenAccepted(address token) external view returns (bool);\n', '\n', '  function upToDate() external view returns (bool);\n', '\n', '  function getTokenPrice(address token, uint256 day) external view returns (uint256);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface sbCommunityInterface {\n', '  function getTokenData(address token, uint256 day)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    );\n', '\n', '  function receiveRewards(uint256 day, uint256 amount) external;\n', '\n', '  function serviceAccepted(address service) external view returns (bool);\n', '\n', '  function getMinerRewardPercentage() external view returns (uint256);\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./IERC20.sol";\n', 'import "./sbTokensInterface.sol";\n', 'import "./sbControllerInterface.sol";\n', 'import "./sbStrongPoolInterface.sol";\n', 'import "./sbVotesInterface.sol";\n', '\n', 'contract sbCommunityV2 {\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '    event MinerRewardsPercentageUpdated(uint256 percentage);\n', '    event RewardsReceived(uint256 indexed day, uint256 amount);\n', '    event ETHMined(address indexed miner, uint256 amount, uint256 indexed day);\n', '    event ETHUnmined(\n', '        address indexed miner,\n', '        uint256 amount,\n', '        uint256 indexed day\n', '    );\n', '    event ERC20Mined(\n', '        address indexed miner,\n', '        address indexed token,\n', '        uint256 amount,\n', '        uint256 indexed day\n', '    );\n', '    event ERC20Unmined(\n', '        address indexed miner,\n', '        address indexed token,\n', '        uint256 amount,\n', '        uint256 indexed day\n', '    );\n', '    event Claimed(address indexed miner, uint256 amount, uint256 indexed day);\n', '    event ServiceAdded(address indexed service, string tag);\n', '    event TagAddedForService(address indexed service, string tag);\n', '\n', '    using SafeMath for uint256;\n', '    bool internal initDone;\n', '    address internal constant ETH = address(0);\n', '    string internal name;\n', '    uint256 internal minerRewardPercentage;\n', '\n', '    IERC20 internal strongToken;\n', '    sbTokensInterface internal sbTokens;\n', '    sbControllerInterface internal sbController;\n', '    sbStrongPoolInterface internal sbStrongPool;\n', '    sbVotesInterface internal sbVotes;\n', '    address internal sbTimelock;\n', '    address internal admin;\n', '    address internal pendingAdmin;\n', '\n', '    mapping(address => mapping(address => uint256[])) internal minerTokenDays;\n', '    mapping(address => mapping(address => uint256[]))\n', '        internal minerTokenAmounts;\n', '    mapping(address => mapping(address => uint256[]))\n', '        internal minerTokenMineSeconds;\n', '\n', '    mapping(address => uint256[]) internal tokenDays;\n', '    mapping(address => uint256[]) internal tokenAmounts;\n', '    mapping(address => uint256[]) internal tokenMineSeconds;\n', '\n', '    mapping(address => uint256) internal minerDayLastClaimedFor;\n', '    mapping(uint256 => uint256) internal dayServiceRewards;\n', '\n', '    address[] internal services;\n', '    mapping(address => string[]) internal serviceTags;\n', '\n', '    address internal superAdmin;\n', '    address internal pendingSuperAdmin;\n', '    uint256 internal delayDays;\n', '\n', '    function setSuperAdmin() public {\n', '        require(superAdmin == address(0), "superAdmin already set");\n', '        superAdmin = address(0x4B5057B2c87Ec9e7C047fb00c0E406dfF2FDaCad);\n', '    }\n', '\n', '    function setPendingSuperAdmin(address newPendingSuperAdmin) public {\n', '        require(\n', '            msg.sender == superAdmin && msg.sender != address(0),\n', '            "not superAdmin"\n', '        );\n', '        pendingSuperAdmin = newPendingSuperAdmin;\n', '    }\n', '\n', '    function acceptSuperAdmin() public {\n', '        require(\n', '            msg.sender == pendingSuperAdmin && msg.sender != address(0),\n', '            "not pendingSuperAdmin"\n', '        );\n', '        superAdmin = pendingSuperAdmin;\n', '        pendingSuperAdmin = address(0);\n', '    }\n', '\n', '    function getSuperAdminAddressUsed() public view returns (address) {\n', '        return superAdmin;\n', '    }\n', '\n', '    function getPendingSuperAdminAddressUsed() public view returns (address) {\n', '        return pendingSuperAdmin;\n', '    }\n', '\n', '    function superAdminUpdateMinerRewardPercentage(uint256 percentage)\n', '        external\n', '    {\n', '        require(\n', '            msg.sender == superAdmin && msg.sender != address(0),\n', '            "not superAdmin"\n', '        );\n', '        require(percentage <= 100, "greater than 100");\n', '        minerRewardPercentage = percentage;\n', '        emit MinerRewardsPercentageUpdated(percentage);\n', '    }\n', '\n', '    function setDelayDays(uint256 dayCount) public {\n', '        require(\n', '            msg.sender == superAdmin && msg.sender != address(0),\n', '            "not superAdmin"\n', '        );\n', '        require(dayCount >= 1, "zero");\n', '        delayDays = dayCount;\n', '    }\n', '\n', '    function getDelayDays() public view returns (uint256) {\n', '        return delayDays;\n', '    }\n', '\n', '    function updateMinerRewardPercentage(uint256 percentage) external {\n', '        require(msg.sender == sbTimelock, "not sbTimelock");\n', '        require(percentage <= 100, "greater than 100");\n', '        minerRewardPercentage = percentage;\n', '        emit MinerRewardsPercentageUpdated(percentage);\n', '    }\n', '\n', '    function getTokenData(address token, uint256 day)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        require(sbTokens.tokenAccepted(token), "invalid token");\n', '        require(day <= _getCurrentDay(), "invalid day");\n', '        return _getTokenData(token, day);\n', '    }\n', '\n', '    function serviceAccepted(address service) external view returns (bool) {\n', '        return _serviceExists(service);\n', '    }\n', '\n', '    function receiveRewards(uint256 day, uint256 amount) external {\n', '        require(amount > 0, "zero");\n', '        require(msg.sender == address(sbController), "not sbController");\n', '        strongToken.transferFrom(address(sbController), address(this), amount);\n', '        uint256 oneHundred = 100;\n', '        uint256 serviceReward = oneHundred\n', '            .sub(minerRewardPercentage)\n', '            .mul(amount)\n', '            .div(oneHundred);\n', '        (, , uint256 communityVoteSeconds) = sbVotes.getCommunityData(\n', '            address(this),\n', '            day\n', '        );\n', '        if (communityVoteSeconds != 0 && serviceReward != 0) {\n', '            dayServiceRewards[day] = serviceReward;\n', '            strongToken.approve(address(sbVotes), serviceReward);\n', '            sbVotes.receiveServiceRewards(day, serviceReward);\n', '        }\n', '        emit RewardsReceived(day, amount.sub(serviceReward));\n', '    }\n', '\n', '    function getMinerRewardPercentage() external view returns (uint256) {\n', '        return minerRewardPercentage;\n', '    }\n', '\n', '    function addService(address service, string memory tag) public {\n', '        require(msg.sender == admin, "not admin");\n', '        require(sbStrongPool.serviceMinMined(service), "not min mined");\n', '        require(service != address(0), "service not zero address");\n', '        require(!_serviceExists(service), "service exists");\n', '        services.push(service);\n', '        serviceTags[service].push(tag);\n', '        emit ServiceAdded(service, tag);\n', '    }\n', '\n', '    function getServices() public view returns (address[] memory) {\n', '        return services;\n', '    }\n', '\n', '    function getServiceTags(address service)\n', '        public\n', '        view\n', '        returns (string[] memory)\n', '    {\n', '        require(_serviceExists(service), "invalid service");\n', '        return serviceTags[service];\n', '    }\n', '\n', '    function addTag(address service, string memory tag) public {\n', '        require(msg.sender == admin, "not admin");\n', '        require(_serviceExists(service), "invalid service");\n', '        require(!_serviceTagExists(service, tag), "tag exists");\n', '        serviceTags[service].push(tag);\n', '        emit TagAddedForService(service, tag);\n', '    }\n', '\n', '    function setPendingAdmin(address newPendingAdmin) public {\n', '        require(msg.sender == admin, "not admin");\n', '        address oldPendingAdmin = pendingAdmin;\n', '        pendingAdmin = newPendingAdmin;\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '    }\n', '\n', '    function acceptAdmin() public {\n', '        require(\n', '            msg.sender == pendingAdmin && msg.sender != address(0),\n', '            "not pendingAdmin"\n', '        );\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '    }\n', '\n', '    function getAdminAddressUsed() public view returns (address) {\n', '        return admin;\n', '    }\n', '\n', '    function getPendingAdminAddressUsed() public view returns (address) {\n', '        return pendingAdmin;\n', '    }\n', '\n', '    function getSbControllerAddressUsed() public view returns (address) {\n', '        return address(sbController);\n', '    }\n', '\n', '    function getStrongAddressUsed() public view returns (address) {\n', '        return address(strongToken);\n', '    }\n', '\n', '    function getSbTokensAddressUsed() public view returns (address) {\n', '        return address(sbTokens);\n', '    }\n', '\n', '    function getSbStrongPoolAddressUsed() public view returns (address) {\n', '        return address(sbStrongPool);\n', '    }\n', '\n', '    function getSbVotesAddressUsed() public view returns (address) {\n', '        return address(sbVotes);\n', '    }\n', '\n', '    function getSbTimelockAddressUsed() public view returns (address) {\n', '        return sbTimelock;\n', '    }\n', '\n', '    function getDayServiceRewards(uint256 day) public view returns (uint256) {\n', '        return dayServiceRewards[day];\n', '    }\n', '\n', '    function getName() public view returns (string memory) {\n', '        return name;\n', '    }\n', '\n', '    function getCurrentDay() public view returns (uint256) {\n', '        return _getCurrentDay();\n', '    }\n', '\n', '    function mineETH() public payable {\n', '        require(msg.value > 0, "zero");\n', '        require(sbTokens.tokenAccepted(ETH), "invalid token");\n', '        uint256 currentDay = _getCurrentDay();\n', '        uint256 startDay = sbController.getStartDay();\n', '        uint256 MAX_YEARS = sbController.getMaxYears();\n', '        uint256 year = _getYearDayIsIn(currentDay, startDay);\n', '        require(year <= MAX_YEARS, "invalid year");\n', '        require(sbStrongPool.minerMinMined(msg.sender), "not min mined");\n', '        _updateMinerTokenData(msg.sender, ETH, msg.value, true, currentDay);\n', '        _updateTokenData(ETH, msg.value, true, currentDay);\n', '        emit ETHMined(msg.sender, msg.value, currentDay);\n', '    }\n', '\n', '    function mineERC20(address token, uint256 amount) public {\n', '        require(amount > 0, "zero");\n', '        require(token != ETH, "no mine ETH");\n', '        require(sbTokens.tokenAccepted(token), "invalid token");\n', '        IERC20(token).transferFrom(msg.sender, address(this), amount);\n', '        uint256 currentDay = _getCurrentDay();\n', '        uint256 startDay = sbController.getStartDay();\n', '        uint256 MAX_YEARS = sbController.getMaxYears();\n', '        uint256 year = _getYearDayIsIn(currentDay, startDay);\n', '        require(year <= MAX_YEARS, "invalid year");\n', '        require(sbStrongPool.minerMinMined(msg.sender), "not min mined");\n', '        _updateMinerTokenData(msg.sender, token, amount, true, currentDay);\n', '        _updateTokenData(token, amount, true, currentDay);\n', '        emit ERC20Mined(msg.sender, token, amount, currentDay);\n', '    }\n', '\n', '    function unmine(address token, uint256 amount) public {\n', '        require(amount > 0, "zero");\n', '        require(sbTokens.tokenAccepted(token), "invalid token");\n', '\n', '        uint256 currentDay = _getCurrentDay();\n', '        _updateMinerTokenData(msg.sender, token, amount, false, currentDay);\n', '        _updateTokenData(token, amount, false, currentDay);\n', '\n', '        if (token == ETH) {\n', '            msg.sender.transfer(amount);\n', '            emit ETHUnmined(msg.sender, amount, currentDay);\n', '        } else {\n', '            IERC20(token).transfer(msg.sender, amount);\n', '            emit ERC20Unmined(msg.sender, token, amount, currentDay);\n', '        }\n', '    }\n', '\n', '    function claimAll() public {\n', '        require(delayDays > 0, "zero");\n', '        uint256 currentDay = _getCurrentDay();\n', '        uint256 dayLastClaimedFor = minerDayLastClaimedFor[msg.sender] == 0\n', '            ? sbController.getStartDay().sub(1)\n', '            : minerDayLastClaimedFor[msg.sender];\n', '        require(\n', '            currentDay > dayLastClaimedFor.add(delayDays),\n', '            "already claimed"\n', '        );\n', '        require(sbTokens.upToDate(), "need token prices");\n', '        require(sbController.upToDate(), "need rewards released");\n', '        _claim(currentDay, msg.sender, dayLastClaimedFor);\n', '    }\n', '\n', '    function claimUpTo(uint256 day) public {\n', '        require(delayDays > 0, "zero");\n', '        require(day <= _getCurrentDay(), "invalid day");\n', '        uint256 dayLastClaimedFor = minerDayLastClaimedFor[msg.sender] == 0\n', '            ? sbController.getStartDay().sub(1)\n', '            : minerDayLastClaimedFor[msg.sender];\n', '        require(day > dayLastClaimedFor.add(delayDays), "already claimed");\n', '        require(sbTokens.upToDate(), "need token prices");\n', '        require(sbController.upToDate(), "need rewards released");\n', '        _claim(day, msg.sender, dayLastClaimedFor);\n', '    }\n', '\n', '    function getRewardsDueAll(address miner) public view returns (uint256) {\n', '        require(delayDays > 0, "zero");\n', '        uint256 currentDay = _getCurrentDay();\n', '        uint256 dayLastClaimedFor = minerDayLastClaimedFor[miner] == 0\n', '            ? sbController.getStartDay().sub(1)\n', '            : minerDayLastClaimedFor[miner];\n', '        if (!(currentDay > dayLastClaimedFor.add(delayDays))) {\n', '            return 0;\n', '        }\n', '        require(sbTokens.upToDate(), "need token prices");\n', '        require(sbController.upToDate(), "need rewards released");\n', '        return _getRewardsDue(currentDay, miner, dayLastClaimedFor);\n', '    }\n', '\n', '    function getRewardsDueUpTo(uint256 day, address miner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(delayDays > 0, "zero");\n', '        require(day <= _getCurrentDay(), "invalid day");\n', '        uint256 dayLastClaimedFor = minerDayLastClaimedFor[miner] == 0\n', '            ? sbController.getStartDay().sub(1)\n', '            : minerDayLastClaimedFor[miner];\n', '        if (!(day > dayLastClaimedFor.add(delayDays))) {\n', '            return 0;\n', '        }\n', '        require(sbTokens.upToDate(), "need token prices");\n', '        require(sbController.upToDate(), "need rewards released");\n', '        return _getRewardsDue(day, miner, dayLastClaimedFor);\n', '    }\n', '\n', '    function getMinerDayLastClaimedFor(address miner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            minerDayLastClaimedFor[miner] == 0\n', '                ? sbController.getStartDay().sub(1)\n', '                : minerDayLastClaimedFor[miner];\n', '    }\n', '\n', '    function getMinerTokenData(\n', '        address miner,\n', '        address token,\n', '        uint256 day\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        require(sbTokens.tokenAccepted(token), "invalid token");\n', '        require(day <= _getCurrentDay(), "invalid day");\n', '        return _getMinerTokenData(miner, token, day);\n', '    }\n', '\n', '    function _getMinerTokenData(\n', '        address miner,\n', '        address token,\n', '        uint256 day\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256[] memory _Days = minerTokenDays[miner][token];\n', '        uint256[] memory _Amounts = minerTokenAmounts[miner][token];\n', '        uint256[] memory _UnitSeconds = minerTokenMineSeconds[miner][token];\n', '        return _get(_Days, _Amounts, _UnitSeconds, day);\n', '    }\n', '\n', '    function _getTokenData(address token, uint256 day)\n', '        internal\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256[] memory _Days = tokenDays[token];\n', '        uint256[] memory _Amounts = tokenAmounts[token];\n', '        uint256[] memory _UnitSeconds = tokenMineSeconds[token];\n', '        return _get(_Days, _Amounts, _UnitSeconds, day);\n', '    }\n', '\n', '    function _updateMinerTokenData(\n', '        address miner,\n', '        address token,\n', '        uint256 amount,\n', '        bool adding,\n', '        uint256 currentDay\n', '    ) internal {\n', '        uint256[] storage _Days = minerTokenDays[miner][token];\n', '        uint256[] storage _Amounts = minerTokenAmounts[miner][token];\n', '        uint256[] storage _UnitSeconds = minerTokenMineSeconds[miner][token];\n', '        _update(_Days, _Amounts, _UnitSeconds, amount, adding, currentDay);\n', '    }\n', '\n', '    function _updateTokenData(\n', '        address token,\n', '        uint256 amount,\n', '        bool adding,\n', '        uint256 currentDay\n', '    ) internal {\n', '        uint256[] storage _Days = tokenDays[token];\n', '        uint256[] storage _Amounts = tokenAmounts[token];\n', '        uint256[] storage _UnitSeconds = tokenMineSeconds[token];\n', '        _update(_Days, _Amounts, _UnitSeconds, amount, adding, currentDay);\n', '    }\n', '\n', '    function _get(\n', '        uint256[] memory _Days,\n', '        uint256[] memory _Amounts,\n', '        uint256[] memory _UnitSeconds,\n', '        uint256 day\n', '    )\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 len = _Days.length;\n', '        if (len == 0) {\n', '            return (day, 0, 0);\n', '        }\n', '        if (day < _Days[0]) {\n', '            return (day, 0, 0);\n', '        }\n', '        uint256 lastIndex = len.sub(1);\n', '        uint256 lastMinedDay = _Days[lastIndex];\n', '        if (day == lastMinedDay) {\n', '            return (day, _Amounts[lastIndex], _UnitSeconds[lastIndex]);\n', '        } else if (day > lastMinedDay) {\n', '            return (day, _Amounts[lastIndex], _Amounts[lastIndex].mul(1 days));\n', '        }\n', '        return _find(_Days, _Amounts, _UnitSeconds, day);\n', '    }\n', '\n', '    function _find(\n', '        uint256[] memory _Days,\n', '        uint256[] memory _Amounts,\n', '        uint256[] memory _UnitSeconds,\n', '        uint256 day\n', '    )\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 left = 0;\n', '        uint256 right = _Days.length.sub(1);\n', '        uint256 middle = right.add(left).div(2);\n', '        while (left < right) {\n', '            if (_Days[middle] == day) {\n', '                return (day, _Amounts[middle], _UnitSeconds[middle]);\n', '            } else if (_Days[middle] > day) {\n', '                if (middle > 0 && _Days[middle.sub(1)] < day) {\n', '                    return (\n', '                        day,\n', '                        _Amounts[middle.sub(1)],\n', '                        _Amounts[middle.sub(1)].mul(1 days)\n', '                    );\n', '                }\n', '                if (middle == 0) {\n', '                    return (day, 0, 0);\n', '                }\n', '                right = middle.sub(1);\n', '            } else if (_Days[middle] < day) {\n', '                if (\n', '                    middle < _Days.length.sub(1) && _Days[middle.add(1)] > day\n', '                ) {\n', '                    return (\n', '                        day,\n', '                        _Amounts[middle],\n', '                        _Amounts[middle].mul(1 days)\n', '                    );\n', '                }\n', '                left = middle.add(1);\n', '            }\n', '            middle = right.add(left).div(2);\n', '        }\n', '        if (_Days[middle] != day) {\n', '            return (day, 0, 0);\n', '        } else {\n', '            return (day, _Amounts[middle], _UnitSeconds[middle]);\n', '        }\n', '    }\n', '\n', '    function _update(\n', '        uint256[] storage _Days,\n', '        uint256[] storage _Amounts,\n', '        uint256[] storage _UnitSeconds,\n', '        uint256 amount,\n', '        bool adding,\n', '        uint256 currentDay\n', '    ) internal {\n', '        uint256 len = _Days.length;\n', '        uint256 secondsInADay = 1 days;\n', '        uint256 secondsSinceStartOfDay = block.timestamp % secondsInADay;\n', '        uint256 secondsUntilEndOfDay = secondsInADay.sub(\n', '            secondsSinceStartOfDay\n', '        );\n', '\n', '        if (len == 0) {\n', '            if (adding) {\n', '                _Days.push(currentDay);\n', '                _Amounts.push(amount);\n', '                _UnitSeconds.push(amount.mul(secondsUntilEndOfDay));\n', '            } else {\n', '                require(false, "1: not enough mine");\n', '            }\n', '        } else {\n', '            uint256 lastIndex = len.sub(1);\n', '            uint256 lastMinedDay = _Days[lastIndex];\n', '            uint256 lastMinedAmount = _Amounts[lastIndex];\n', '            uint256 lastUnitSeconds = _UnitSeconds[lastIndex];\n', '\n', '            uint256 newAmount;\n', '            uint256 newUnitSeconds;\n', '\n', '            if (lastMinedDay == currentDay) {\n', '                if (adding) {\n', '                    newAmount = lastMinedAmount.add(amount);\n', '                    newUnitSeconds = lastUnitSeconds.add(\n', '                        amount.mul(secondsUntilEndOfDay)\n', '                    );\n', '                } else {\n', '                    require(lastMinedAmount >= amount, "2: not enough mine");\n', '                    newAmount = lastMinedAmount.sub(amount);\n', '                    newUnitSeconds = lastUnitSeconds.sub(\n', '                        amount.mul(secondsUntilEndOfDay)\n', '                    );\n', '                }\n', '                _Amounts[lastIndex] = newAmount;\n', '                _UnitSeconds[lastIndex] = newUnitSeconds;\n', '            } else {\n', '                if (adding) {\n', '                    newAmount = lastMinedAmount.add(amount);\n', '                    newUnitSeconds = lastMinedAmount.mul(1 days).add(\n', '                        amount.mul(secondsUntilEndOfDay)\n', '                    );\n', '                } else {\n', '                    require(lastMinedAmount >= amount, "3: not enough mine");\n', '                    newAmount = lastMinedAmount.sub(amount);\n', '                    newUnitSeconds = lastMinedAmount.mul(1 days).sub(\n', '                        amount.mul(secondsUntilEndOfDay)\n', '                    );\n', '                }\n', '                _Days.push(currentDay);\n', '                _Amounts.push(newAmount);\n', '                _UnitSeconds.push(newUnitSeconds);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _claim(\n', '        uint256 upToDay,\n', '        address miner,\n', '        uint256 dayLastClaimedFor\n', '    ) internal {\n', '        uint256 rewards = _getRewardsDue(upToDay, miner, dayLastClaimedFor);\n', '        require(rewards > 0, "no rewards");\n', '        minerDayLastClaimedFor[miner] = upToDay.sub(delayDays);\n', '        strongToken.approve(address(sbStrongPool), rewards);\n', '        sbStrongPool.mineFor(miner, rewards);\n', '        emit Claimed(miner, rewards, _getCurrentDay());\n', '    }\n', '\n', '    function _getRewardsDue(\n', '        uint256 upToDay,\n', '        address miner,\n', '        uint256 dayLastClaimedFor\n', '    ) internal view returns (uint256) {\n', '        address[] memory tokens = sbTokens.getTokens();\n', '        uint256 rewards;\n', '        for (\n', '            uint256 day = dayLastClaimedFor.add(1);\n', '            day <= upToDay.sub(delayDays);\n', '            day++\n', '        ) {\n', '            uint256 communityDayMineSecondsUSD = sbController\n', '                .getCommunityDayMineSecondsUSD(address(this), day);\n', '            if (communityDayMineSecondsUSD == 0) {\n', '                continue;\n', '            }\n', '            uint256 minerDayMineSecondsUSD = 0;\n', '            uint256[] memory tokenPrices = sbTokens.getTokenPrices(day);\n', '            for (uint256 i = 0; i < tokens.length; i++) {\n', '                address token = tokens[i];\n', '                (, , uint256 minerMineSeconds) = _getMinerTokenData(\n', '                    miner,\n', '                    token,\n', '                    day\n', '                );\n', '                uint256 amount = minerMineSeconds.mul(tokenPrices[i]).div(1e18);\n', '                minerDayMineSecondsUSD = minerDayMineSecondsUSD.add(amount);\n', '            }\n', '            uint256 communityDayRewards = sbController\n', '                .getCommunityDayRewards(address(this), day)\n', '                .sub(dayServiceRewards[day]);\n', '            uint256 amount = communityDayRewards\n', '                .mul(minerDayMineSecondsUSD)\n', '                .div(communityDayMineSecondsUSD);\n', '            rewards = rewards.add(amount);\n', '        }\n', '        return rewards;\n', '    }\n', '\n', '    function _serviceExists(address service) internal view returns (bool) {\n', '        return serviceTags[service].length > 0;\n', '    }\n', '\n', '    function _serviceTagExists(address service, string memory tag)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < serviceTags[service].length; i++) {\n', '            if (\n', '                keccak256(abi.encode(tag)) ==\n', '                keccak256(abi.encode(serviceTags[service][i]))\n', '            ) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _getYearDayIsIn(uint256 day, uint256 startDay)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return day.sub(startDay).div(366).add(1); // dividing by 366 makes day 1 and 365 be in year 1\n', '    }\n', '\n', '    function _getCurrentDay() internal view returns (uint256) {\n', '        return block.timestamp.div(1 days).add(1);\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface sbStrongPoolInterface {\n', '  function serviceMinMined(address miner) external view returns (bool);\n', '\n', '  function minerMinMined(address miner) external view returns (bool);\n', '\n', '  function mineFor(address miner, uint256 amount) external;\n', '\n', '  function getMineData(uint256 day)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    );\n', '\n', '  function receiveRewards(uint256 day, uint256 amount) external;\n', '}\n']
