['pragma solidity ^0.5.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract Context {\n', '    constructor() internal {}\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(\n', '            account,\n', '            _msgSender(),\n', '            _allowances[account][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: burn amount exceeds allowance"\n', '            )\n', '        );\n', '    }\n', '}\n', '\n', 'contract BubbleUtil {\n', '    uint256 ethWei = 1 ether;\n', '    uint256 public startTime;\n', '\n', '    //limit user max calc ETH is 15 ether\n', '    function getMaxEthMiner(uint256 value) public view returns (uint256) {\n', '        if (value > 15 * ethWei) {\n', '            return 15 * ethWei;\n', '        }\n', '        return value;\n', '    }\n', '\n', '    //limit user max calc BUB is frozenEth * 1000\n', '    function getMaxBubMiner(uint256 frozenEth, uint256 value)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (value > (frozenEth / ethWei) * 100000) {\n', '            return (frozenEth / ethWei) * 100000;\n', '        }\n', '        return value;\n', '    }\n', '\n', '    function getLevel(uint256 value) public view returns (uint256) {\n', '        if (value >= 1 * ethWei && value < 6 * ethWei) {\n', '            return 1;\n', '        }\n', '        if (value >= 6 * ethWei && value < 11 * ethWei) {\n', '            return 2;\n', '        }\n', '        if (value >= 11 * ethWei) {\n', '            return 3;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getBoostLevel(uint256 value) public view returns (uint256) {\n', '        if (value >= 40000 && value < 150000) {\n', '            return 1;\n', '        }\n', '        if (value >= 150000 && value < 200000) {\n', '            return 2;\n', '        }\n', '        if (value >= 200000 && value < 800000) {\n', '            return 3;\n', '        }\n', '        if (value >= 800000 && value < 4000000) {\n', '            return 4;\n', '        }\n', '        if (value >= 4000000 && value < 20000000) {\n', '            return 5;\n', '        }\n', '        if (value >= 20000000) {\n', '            return 6;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getUserLevelCoefficient(uint256 level)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        //30%\n', '        if (level == 1) {\n', '            return 30;\n', '        }\n', '        //60%\n', '        if (level == 2) {\n', '            return 60;\n', '        }\n', '        //100%\n', '        if (level >= 3) {\n', '            return 100;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    function getUserBoostCoefficient(uint256 boostLevel)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        //150%\n', '        if (boostLevel == 1) {\n', '            return 150;\n', '        }\n', '        //170%\n', '        if (boostLevel == 2) {\n', '            return 170;\n', '        }\n', '        //200%\n', '        if (boostLevel >= 3) {\n', '            return 200;\n', '        }\n', '        return 100;\n', '    }\n', '\n', '    function getUserInviterBoostCoefficient(uint256 boostLevel)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        //120%\n', '        if (boostLevel == 4) {\n', '            return 120;\n', '        }\n', '        //150%\n', '        if (boostLevel == 5) {\n', '            return 150;\n', '        }\n', '        //200%\n', '        if (boostLevel >= 6) {\n', '            return 200;\n', '        }\n', '        return 100;\n', '    }\n', '\n', '    function getUserReinvestCoefficient(uint256 reinvestCount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        //130%\n', '        if (reinvestCount == 1) {\n', '            return 130;\n', '        }\n', '        //170%\n', '        if (reinvestCount == 2) {\n', '            return 170;\n', '        }\n', '        //220%\n', '        if (reinvestCount == 3) {\n', '            return 220;\n', '        }\n', '        if (reinvestCount >= 4) {\n', '            return 300;\n', '        }\n', '        return 100;\n', '    }\n', '\n', '    function getGameCoefficient() public view returns (uint256) {\n', '        if (now < startTime + 14 days) {\n', '            return 2;\n', '        }\n', '        return 1;\n', '    }\n', '\n', '    function compareStr(string memory _str, string memory str)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        bool checkResult = false;\n', '        if (\n', '            keccak256(abi.encodePacked(_str)) ==\n', '            keccak256(abi.encodePacked(str))\n', '        ) {\n', '            checkResult = true;\n', '        }\n', '        return checkResult;\n', '    }\n', '}\n', '\n', 'contract Bubble is BubbleUtil, ERC20 {\n', '    using SafeMath for *;\n', '\n', '    //Token\n', '    string public name = "BubbleToken";\n', '    string public symbol = "BUB";\n', '    uint256 public decimals = 2;\n', '    uint256 public INITIAL_SUPPLY = 10000000000;\n', '\n', '    //Game\n', '    address administrator;\n', '    bool isGameOver;\n', '\n', '    //0.3%\n', '    uint256 public ETHCoefficient = 30;\n', '    //15%\n', '    uint256 public BUBCoefficient = 1500;\n', '    //2%\n', '    uint256 public JackpotCoefficient = 2;\n', '\n', '    uint256 invitePoolTokenAmount;\n', '    uint256 reservedTokenAmount;\n', '    uint256 public diggedTokenAmount;\n', '    uint256 public totalFrozenTokenAmount;\n', '    uint256 LIMITREINVESTTIME = 12 hours;\n', '    uint256 USERLOCKTIME = 5 days;\n', '    uint256 GROWTHPERIOD = 20 days;\n', '\n', '    constructor() public {\n', '        //init token\n', '        //0.2%\n', '        _mint(msg.sender, INITIAL_SUPPLY / 500);\n', '\n', '        _mint(address(this), (INITIAL_SUPPLY * 499) / 500);\n', '        //1.8% to increase prize pool eth balance\n', '        reservedTokenAmount = (INITIAL_SUPPLY * 9) / 500;\n', '        //init game\n', '        administrator = msg.sender;\n', '        //2%\n', '        invitePoolTokenAmount = INITIAL_SUPPLY / 50;\n', '        isGameOver = false;\n', '        startTime = now;\n', '    }\n', '\n', '    struct User {\n', '        address payable userAddress;\n', '        uint256 frozenToken;\n', '        uint256 freeToken;\n', '        uint256 frozenEth;\n', '        uint256 freeEth;\n', '        uint256 startTime;\n', '        uint256 level;\n', '        uint256 boostLevel;\n', '        uint256 totalEthProfit;\n', '        uint256 totalTokenProfit;\n', '        uint256 inviteCount;\n', '        uint256 inviteRewardEth;\n', '        uint256 inviteRewardToken;\n', '        uint256 reinvestCount;\n', '        bool isSendV1Award;\n', '        bool isSendV2Award;\n', '        bool isSendV3Award;\n', '        string inviteCode;\n', '        string referrer;\n', '        uint256 status;\n', '    }\n', '\n', '    mapping(address => User) users;\n', '    mapping(string => address payable) addressMapping;\n', '\n', '    address payable public jackpotAddr = address(0);\n', '    address payable public devAddr = address(\n', '        0xd7E023642177432b029A274fee54Fb134B829293\n', '    );\n', '\n', '    event InvestEvent(\n', '        address indexed user,\n', '        uint256 ethAmount,\n', '        uint256 tokenAmount\n', '    );\n', '\n', '    modifier onlyOwner {\n', '        require(\n', '            msg.sender == administrator,\n', '            "OnlyOwner methods called by non-owner."\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier isHuman() {\n', '        address addr = msg.sender;\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(addr)\n', '        }\n', '        require(codeLength == 0, "sorry humans only");\n', '        require(tx.origin == msg.sender, "sorry, human only");\n', '        _;\n', '    }\n', '\n', '    modifier checkStart() {\n', '        require(now > startTime, "not start");\n', '        _;\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    function setJackpotAddress(address payable addr) public {\n', '        //excute once\n', '        if (jackpotAddr == address(0) && msg.sender == administrator) {\n', '            jackpotAddr = addr;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function registerUser(\n', '        User storage userGlobal,\n', '        address payable userAddress,\n', '        string memory inviteCode,\n', '        string memory referrer\n', '    ) private {\n', '        userGlobal.userAddress = userAddress;\n', '        userGlobal.inviteCode = inviteCode;\n', '        userGlobal.referrer = referrer;\n', '        userGlobal.status = 0;\n', '        address invitedAddress = getUserByInvitedCode(referrer);\n', '        User storage invitedUser = users[invitedAddress];\n', '        invitedUser.inviteCount = invitedUser.inviteCount + 1;\n', '\n', '        addressMapping[inviteCode] = userAddress;\n', '    }\n', '\n', '    function registerUserByOwner(\n', '        address payable userAddress,\n', '        string memory inviteCode,\n', '        string memory referrer\n', '    ) public onlyOwner() {\n', '        User storage user = users[userAddress];\n', '        require(user.userAddress == address(0), "user is exist");\n', '        require(isCodeUsed(inviteCode) == false, "invite code is used");\n', '        registerUser(user, userAddress, inviteCode, referrer);\n', '    }\n', '\n', '    function invest(\n', '        uint256 tokenAmount,\n', '        string memory inviteCode,\n', '        string memory referrer\n', '    ) public payable isHuman() checkStart() {\n', '        require(!isGameOver, "game is over");\n', '\n', '        address payable userAddress = msg.sender;\n', '        uint256 ethAmount = msg.value;\n', '\n', '        //check token balance\n', '        require(\n', '            balanceOf(userAddress) >= tokenAmount,\n', '            "token balance is insufficient"\n', '        );\n', '\n', '        User storage user = users[userAddress];\n', '\n', '        //register\n', '        if (user.userAddress == address(0)) {\n', '            require(!compareStr(inviteCode, ""), "empty invite code");\n', '            address referrerAddr = getUserByInvitedCode(referrer);\n', '            require(referrerAddr != address(0), "referrer not exist");\n', '            require(referrerAddr != userAddress, "referrer can\'t be self");\n', '            require(isCodeUsed(inviteCode) == false, "invite code is used");\n', '            registerUser(user, userAddress, inviteCode, referrer);\n', '        }\n', '\n', '        if (tokenAmount > 0) {\n', '            transfer(address(this), tokenAmount);\n', '        }\n', '\n', '        //invest first\n', '        if (user.status == 0 || user.status == 2) {\n', '            restartUser(user, ethAmount, tokenAmount);\n', '        } else {\n', '            require(user.status == 1, "user status error");\n', '\n', '            // user can additional investment in 1 day\n', '            require(\n', '                now < user.startTime + LIMITREINVESTTIME,\n', '                "over the stipulated time, account is locked"\n', '            );\n', '            //reset start time\n', '            restartUser(user, ethAmount, tokenAmount);\n', '        }\n', '\n', '        require(user.frozenEth + ethAmount >= 1 * ethWei, "greater than 1 eth");\n', '\n', '        calcInvitedAndSendAward(user);\n', '\n', '        user.level = getLevel(user.frozenEth);\n', '        user.boostLevel = getBoostLevel(user.frozenToken);\n', '\n', '        if (ethAmount >= 0) {\n', '            sendFeeToJackpot(ethAmount);\n', '            sendFeeToAdmin(ethAmount);\n', '        }\n', '\n', '        emit InvestEvent(userAddress, ethAmount, tokenAmount);\n', '    }\n', '\n', '    function reinvest() public isHuman() {\n', '        require(!isGameOver, "game is over");\n', '\n', '        User storage user = users[msg.sender];\n', '        uint256 unlockTime = getUserUnlockTime(user.startTime);\n', '\n', '        require(now > unlockTime, "user is locking");\n', '        require(user.status == 1, "user status err");\n', '\n', '        //empty frozen ETH\n', '        settleAccount(user);\n', '\n', '        require(user.freeEth > 1 * ethWei, "greater than 1 eth");\n', '\n', '        uint256 reinvestEth = user.freeEth;\n', '        user.freeEth = 0;\n', '\n', '        uint256 reinvestToken = user.freeToken;\n', '        user.freeToken = 0;\n', '\n', '        //reset frozen Eth\n', '        restartUser(user, reinvestEth, reinvestToken);\n', '\n', '        calcInvitedAndSendAward(user);\n', '        user.level = getLevel(user.frozenEth);\n', '        user.boostLevel = getBoostLevel(user.frozenToken);\n', '        user.reinvestCount = user.reinvestCount + 1;\n', '\n', '        sendFeeToJackpot(reinvestEth);\n', '        sendFeeToAdmin(reinvestEth);\n', '\n', '        emit InvestEvent(user.userAddress, reinvestEth, reinvestToken);\n', '    }\n', '\n', '    function withdraw() public isHuman() checkStart() {\n', '        User storage user = users[msg.sender];\n', '\n', '        //withdraw will set reinvest to 0\n', '        user.reinvestCount = 0;\n', '\n', '        settleAccount(user);\n', '\n', '        uint256 sendMoney = user.freeEth;\n', '        uint256 sendToken = user.freeToken;\n', '        bool isEthEnough = false;\n', '        bool isTokenEnough = false;\n', '        uint256 resultMoney = 0;\n', '        uint256 resultToken = 0;\n', '\n', '        (isEthEnough, resultMoney) = isEthBalanceEnough(sendMoney);\n', '        (isTokenEnough, resultToken) = isTokenBalanceEnough(sendToken);\n', '\n', '        if (resultMoney > 0) {\n', '            user.freeEth = user.freeEth.sub(resultMoney);\n', '            msg.sender.transfer(resultMoney);\n', '        }\n', '        if (resultToken > 0) {\n', '            user.freeToken = user.freeToken.sub(resultToken);\n', '            sendTokenTo(msg.sender, resultToken);\n', '        }\n', '\n', '        if (!isEthEnough) {\n', '            endRound();\n', '        }\n', '    }\n', '\n', '    function getUserByInvitedCode(string memory code)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return addressMapping[code];\n', '    }\n', '\n', '    function restartUser(\n', '        User storage user,\n', '        uint256 ethAmount,\n', '        uint256 tokenAmount\n', '    ) private {\n', '        user.frozenEth = user.frozenEth.add(ethAmount);\n', '        user.frozenToken = user.frozenToken.add(tokenAmount);\n', '        user.startTime = now;\n', '        user.status = 1;\n', '        totalFrozenTokenAmount = totalFrozenTokenAmount + tokenAmount;\n', '    }\n', '\n', '    function settleAccount(User storage user) private returns (bool) {\n', '        uint256 unlockTime = getUserUnlockTime(user.startTime);\n', '\n', '        if (user.status == 1 && now > unlockTime) {\n', '            totalFrozenTokenAmount = totalFrozenTokenAmount - user.frozenToken;\n', '            uint256 calcEth = getMaxEthMiner(user.frozenEth);\n', '            uint256 earningMoney = getUserEthEarning(user.userAddress, calcEth);\n', '            uint256 calcBub = getMaxBubMiner(user.frozenEth, user.frozenToken);\n', '            uint256 earningToken = getUserTokenEarning(\n', '                user.userAddress,\n', '                calcBub\n', '            );\n', '            user.freeToken = user.freeToken + user.frozenToken + earningToken;\n', '            user.freeEth = user.freeEth + user.frozenEth + earningMoney;\n', '            user.totalEthProfit = user.totalEthProfit + earningMoney;\n', '            user.totalTokenProfit = user.totalTokenProfit + earningToken;\n', '            user.frozenEth = 0;\n', '            user.frozenToken = 0;\n', '            user.level = 0;\n', '            user.status = 2;\n', '            user.isSendV1Award = false;\n', '            user.isSendV2Award = false;\n', '            user.isSendV3Award = false;\n', '            address inviter = getUserByInvitedCode(user.referrer);\n', '            sendInviteReward(earningMoney, inviter);\n', '            diggedTokenAmount = diggedTokenAmount + earningToken;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function sendInviteReward(uint256 earningMoney, address inviter) private {\n', '        User storage user = users[inviter];\n', '        uint256 inviteEarning = 0;\n', '        inviteEarning =\n', '            (earningMoney *\n', '                getUserLevelCoefficient(user.level) *\n', '                getUserInviterBoostCoefficient(user.boostLevel)) /\n', '            (100 * 100 * 2);\n', '        if (inviteEarning > 0) {\n', '            user.freeEth = user.freeEth + inviteEarning;\n', '            user.inviteRewardEth = user.inviteRewardEth + inviteEarning;\n', '        }\n', '    }\n', '\n', '    function getUserUnlockTime(uint256 startTime)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return startTime + USERLOCKTIME;\n', '    }\n', '\n', '    function getUserTokenEarning(address userAddress, uint256 frozenToken)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        //500 /10000 = 5%\n', '        return (frozenToken * getUserEarningRatio(userAddress, false)) / 10000;\n', '    }\n', '\n', '    function getUserEarningRatio(address userAddress, bool isEth)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        User memory user = users[userAddress];\n', '        if (user.status == 1) {\n', '            if (isEth) {\n', '                //default 0.3% per day\n', '                uint256 defaultCoefficient = ETHCoefficient;\n', '                defaultCoefficient =\n', '                    (defaultCoefficient *\n', '                        getGameCoefficient() *\n', '                        getUserLevelCoefficient(user.level) *\n', '                        getUserBoostCoefficient(user.boostLevel) *\n', '                        getUserReinvestCoefficient(user.reinvestCount)) /\n', '                    (100 * 100 * 100);\n', '                return defaultCoefficient;\n', '            } else {\n', '                //default 5% per round\n', '                uint256 defaultCoefficient = BUBCoefficient;\n', '                defaultCoefficient =\n', '                    (defaultCoefficient *\n', '                        getGameCoefficient() *\n', '                        getUserLevelCoefficient(user.level) *\n', '                        getUserReinvestCoefficient(user.reinvestCount)) /\n', '                    (100 * 100);\n', '                return defaultCoefficient;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getUserEthEarning(address userAddress, uint256 frozenEth)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // 30 / 10000 = 0.3%\n', '        uint256 dailyProfit = (frozenEth *\n', '            getUserEarningRatio(userAddress, true)) / 10000;\n', '\n', '        return dailyProfit * 5;\n', '    }\n', '\n', '    function isEthBalanceEnough(uint256 sendMoney)\n', '        private\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        if (address(this).balance > 0) {\n', '            if (sendMoney >= address(this).balance) {\n', '                return (false, address(this).balance);\n', '            } else {\n', '                return (true, sendMoney);\n', '            }\n', '        } else {\n', '            return (false, 0);\n', '        }\n', '    }\n', '\n', '    function isTokenBalanceEnough(uint256 sendMoney)\n', '        private\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 tokenBalance = balanceOf(address(this));\n', '        if (tokenBalance > 0) {\n', '            if (sendMoney >= tokenBalance) {\n', '                return (false, tokenBalance);\n', '            } else {\n', '                return (true, sendMoney);\n', '            }\n', '        } else {\n', '            return (false, 0);\n', '        }\n', '    }\n', '\n', '    function calcInvitedAndSendAward(User storage user) private {\n', '        uint256 currentLvel = getLevel(user.frozenEth);\n', '        uint256 sendToken = 0;\n', '        if (currentLvel >= 1 && !user.isSendV1Award) {\n', '            sendToken += 20000;\n', '            user.isSendV1Award = true;\n', '        }\n', '\n', '        if (currentLvel >= 2 && !user.isSendV2Award) {\n', '            sendToken += 40000;\n', '            user.isSendV2Award = true;\n', '        }\n', '\n', '        if (currentLvel >= 3 && !user.isSendV3Award) {\n', '            sendToken += 40000;\n', '            user.isSendV3Award = true;\n', '        }\n', '\n', '        address inviterAddress = getUserByInvitedCode(user.referrer);\n', '        if (\n', '            invitePoolTokenAmount >= sendToken &&\n', '            balanceOf(address(this)) >= sendToken &&\n', '            sendToken > 0\n', '        ) {\n', '            invitePoolTokenAmount -= sendToken;\n', '            User storage inviter = users[inviterAddress];\n', '            if (inviter.level > 0) {\n', '                inviter.freeToken = inviter.freeToken + sendToken;\n', '                inviter.inviteRewardToken =\n', '                    inviter.inviteRewardToken +\n', '                    sendToken;\n', '            }\n', '        }\n', '    }\n', '\n', '    function sendFeeToJackpot(uint256 amount) private {\n', '        jackpotAddr.transfer(amount.mul(JackpotCoefficient).div(100));\n', '    }\n', '\n', '    function sendFeeToAdmin(uint256 amount) private {\n', '        devAddr.transfer(amount.mul(5).div(100));\n', '    }\n', '\n', '    function sendTokenTo(address recipient, uint256 amount) private {\n', '        _transfer(address(this), recipient, amount);\n', '    }\n', '\n', '    function isCodeUsed(string memory code) public view returns (bool) {\n', '        address user = getUserByInvitedCode(code);\n', '        return user != address(0);\n', '    }\n', '\n', '    function getUserInfo(address user)\n', '        public\n', '        view\n', '        returns (\n', '            uint256[18] memory ct,\n', '            string memory inviteCode,\n', '            string memory referrer\n', '        )\n', '    {\n', '        User memory userInfo = users[user];\n', '        ct[0] = userInfo.frozenToken;\n', '        ct[1] = userInfo.frozenEth;\n', '        ct[2] = userInfo.startTime;\n', '        ct[3] = getUserUnlockTime(userInfo.startTime);\n', '        ct[4] = userInfo.level;\n', '        ct[5] = userInfo.status;\n', '        ct[6] = userInfo.totalEthProfit;\n', '        ct[7] = userInfo.totalTokenProfit;\n', '        ct[8] = userInfo.reinvestCount;\n', '        ct[9] = userInfo.inviteCount;\n', '        ct[10] = userInfo.isSendV1Award ? 1 : 0;\n', '        ct[11] = userInfo.isSendV2Award ? 1 : 0;\n', '        ct[12] = userInfo.isSendV3Award ? 1 : 0;\n', '        ct[13] = userInfo.boostLevel;\n', '        ct[14] = userInfo.freeEth;\n', '        ct[15] = userInfo.freeToken;\n', '        ct[16] = userInfo.inviteRewardEth;\n', '        ct[17] = userInfo.inviteRewardToken;\n', '\n', '        inviteCode = userInfo.inviteCode;\n', '        referrer = userInfo.referrer;\n', '\n', '        return (ct, inviteCode, referrer);\n', '    }\n', '\n', '    function endRound() private {\n', '        if (now > startTime + GROWTHPERIOD) {\n', '            isGameOver = true;\n', '        }\n', '    }\n', '\n', '    //Game Coefficient\n', '    // vote to change\n', '    function resetETHCoefficient(uint256 Coefficient) public onlyOwner() {\n', '        require(Coefficient > 0);\n', '        ETHCoefficient = Coefficient;\n', '    }\n', '\n', '    // vote to change\n', '    function resetBUBCoefficient(uint256 Coefficient) public onlyOwner() {\n', '        require(Coefficient > 0);\n', '        BUBCoefficient = Coefficient;\n', '    }\n', '\n', '    //20 days to 3%; 30 days to 4%; 40 days to 5%\n', '    function resetJackpotcCoefficient(uint256 Coefficient) public onlyOwner() {\n', '        require(Coefficient > 0);\n', '        JackpotCoefficient = Coefficient;\n', '    }\n', '\n', '    function drawAward() public onlyOwner() {\n', '        //total 1.8%\n', '        uint256 totalAmount = (INITIAL_SUPPLY * 9) / 500;\n', '        uint256 eachAmount = totalAmount / 10;\n', '        if (\n', '            jackpotAddr.balance >= 100 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 10\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 150 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 9\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 200 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 8\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 250 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 7\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 300 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 6\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 400 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 5\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 500 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 4\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 600 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 3\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 700 * ethWei &&\n', '            reservedTokenAmount == eachAmount * 2\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        } else if (\n', '            jackpotAddr.balance >= 800 * ethWei &&\n', '            reservedTokenAmount == eachAmount\n', '        ) {\n', '            reservedTokenAmount = reservedTokenAmount - eachAmount;\n', '            sendTokenTo(msg.sender, eachAmount);\n', '        }\n', '    }\n', '\n', '    //Jackpot call\n', '    function getGameOverStatus() external view returns (bool) {\n', '        return isGameOver;\n', '    }\n', '\n', '    function transferAllEthToJackPot() external {\n', '        if (!isGameOver) {\n', '            jackpotAddr.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    function sendTokenToJackpot(address sender, uint256 amount) external {\n', '        require(msg.sender == jackpotAddr, "call only by jackpot");\n', '        _transfer(sender, jackpotAddr, amount);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '}']