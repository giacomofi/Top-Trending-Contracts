['pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'interface ERC20Basic {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "transferring to a zero address");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 Pausable token\n', ' */\n', 'contract PausableToken is ERC20Basic, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256  internal totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public override virtual returns (bool) {\n', '        require(_to != address(0), "trasferring to zero address");\n', '        require(_value <= balances[msg.sender], "transfer amount exceeds available balance");\n', '        require(!paused, "token transfer while paused");\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public override view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another based on allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\n', '        require(_from != address(0), "from must not be zero address"); \n', '        require(_to != address(0), "to must not be zero address"); \n', '        require(!paused, "token transfer while paused");\n', '        require(_value <= allowed[_from][msg.sender], "tranfer amount exceeds allowance");\n', '        require(_value <= balances[_from], "transfer amount exceeds available balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Because approve/tranferFrom method is susceptible of multiple withdrawal attack,\n', '    * please be careful when using approve additional amount of tokens.\n', '    * Before approving additional allowances to a certain address, \n', '    * it is desired to check the changes of allowance of the address due to previous transferFrom activities.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public override returns (bool) {\n', '        require(_spender != address(0), "approving to a zero address");\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public override view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '        public \n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0), "approving to zero address");\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool)\n', '    {\n', '        require(_spender != address(0), "spender must not be a zero address");\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', '* @title Mintable token\n', '*/\n', 'contract MintableToken is PausableToken {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool private mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished, "minting is finished");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool)\n', '    {\n', '        require(_to != address(0), "minting to zero address");\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract FreezableMintableToken is MintableToken {\n', '\n', '    mapping (address => bool) private frozenAccounts;\n', '\n', '    // total frozen balance per address\n', '    mapping (address => uint256) private frozenBalance;\n', '\n', '    event FrozenAccount(address target, bool frozen);\n', '    event TokensFrozen(address indexed account, uint amount);\n', '    event TokensUnfrozen(address indexed account, uint amount);\n', '\n', '    /**\n', '     * @dev Freeze the specified address.\n', '     * @param target The address to freeze.\n', '     * @param freeze A boolean that indicates if this address is frozen or not.\n', '     */\n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        frozenAccounts[target] = freeze;\n', '        emit FrozenAccount(target, freeze);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of frozen tokens at the specified address.\n', '     */\n', '    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return frozenBalance[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address which are not frozen and thus transferrable.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return balance An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function usableBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return (balances[_owner].sub(frozenBalance[_owner]));\n', '    }\n', '\n', '    /**\n', '     * @dev Send the specified amount of token to the specified address and freeze it.\n', '     * @param _to Address to which token will be frozen.\n', '     * @param _amount Amount of token to freeze.\n', '     */\n', '    function freezeTo(address _to, uint _amount) public onlyOwner {\n', '        require(_to != address(0), "freezing a zero address");\n', '        require(_amount <= balances[msg.sender], "amount exceeds balance");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        frozenBalance[_to] = frozenBalance[_to].add(_amount);\n', '\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        emit TokensFrozen(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze freezing tokens at the specified address.\n', '     * @param _from Address from which frozen tokens are to be released.\n', '     * @param _amount Amount of frozen tokens to release.\n', '     */\n', '    function unfreezeFrom(address _from, uint _amount) public onlyOwner {\n', '        require(_from != address(0), "unfreezing from zero address");\n', '        require(_amount <= frozenBalance[_from], "amount exceeds frozen balance");\n', '\n', '        frozenBalance[_from] = frozenBalance[_from].sub(_amount);\n', '        emit TokensUnfrozen(_from, _amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Mint the specified amount of token to the specified address and freeze it.\n', '     * @param _to Address to which token will be frozen.\n', '     * @param _amount Amount of token to mint and freeze.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintAndFreeze(address _to, uint _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        frozenBalance[_to] = frozenBalance[_to].add(_amount);\n', '\n', '        emit Mint(_to, _amount);\n', '        emit TokensFrozen(_to, _amount);  \n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }  \n', '    \n', '    function transfer(address _to, uint256 _value) public override virtual returns (bool) {\n', '        require(!frozenAccounts[msg.sender], "account is frozen");\n', '        require(_value <= (balances[msg.sender].sub(frozenBalance[msg.sender])), \n', '            "amount exceeds usable balance");\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\n', '        require(!frozenAccounts[msg.sender], "account is frozen");\n', '        require(_value <= (balances[_from].sub(frozenBalance[_from])), \n', '            "amount to transfer exceeds usable balance");\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title BurnableFreezableMintableToken Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableFreezableMintableToken is FreezableMintableToken {\n', '    mapping (address => bool) private blocklistedAccounts;\n', '\n', '    event Burn(address indexed owner, uint256 value);\n', '\n', '    event AccountBlocked(address user);\n', '    event AccountUnblocked(address user);\n', '    event BlockedFundsDestroyed(address blockedListedUser, uint destroyedAmount);\n', '\n', '    function transfer(address _to, uint256 _value) public override returns (bool) {\n', '        require(!blocklistedAccounts[msg.sender], "account is blocklisted");\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\n', '        require(!blocklistedAccounts[_from], "account is blocklisted");\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function isBlocklisted(address _maker) public view returns (bool) {\n', '        return blocklistedAccounts[_maker];\n', '    } \n', '    \n', '    function blockAccount(address _evilUser) public onlyOwner returns (bool) {\n', '        require(_evilUser != address(0), "address to block must not be zero address");\n', '        blocklistedAccounts[_evilUser] = true;\n', '        emit AccountBlocked(_evilUser);\n', '        return true;\n', '    }\n', '\n', '    function unblockAccount(address _clearedUser) public onlyOwner returns (bool) {\n', '        blocklistedAccounts[_clearedUser] = false;\n', '        emit AccountUnblocked(_clearedUser);\n', '        return true;\n', '    }\n', '\n', '    function destroyBlockedFunds(address _blockListedUser) public onlyOwner returns (bool) {\n', '        require(blocklistedAccounts[_blockListedUser], "account must be blocklisted");\n', '        uint dirtyFunds = balanceOf(_blockListedUser);\n', '        _burn(_blockListedUser, dirtyFunds);\n', '        emit BlockedFundsDestroyed(_blockListedUser, dirtyFunds);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '    function burn(address _owner, uint256 _value) public onlyOwner {\n', '        _burn(_owner, _value);\n', '    }\n', '  \n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_who != address(0));\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract MainToken is BurnableFreezableMintableToken {\n', '\n', '    uint8 constant private DECIMALS = 18;\n', '    uint constant private INITIAL_SUPPLY = 98000000000 * (10 ** uint(DECIMALS));\n', '    string constant private NAME = "AllmediCoin";\n', '    string constant private SYMBOL = "AMDC";\n', '\n', '    constructor() public {\n', '        address mintAddress = msg.sender;\n', '        mint(mintAddress, INITIAL_SUPPLY);\n', '    }\n', '  \n', '    function name() public view returns (string memory _name) {\n', '        return NAME;\n', '    }\n', '\n', '    function symbol() public view returns (string memory _symbol) {\n', '        return SYMBOL;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return DECIMALS;\n', '    }\n', '    \n', '}']