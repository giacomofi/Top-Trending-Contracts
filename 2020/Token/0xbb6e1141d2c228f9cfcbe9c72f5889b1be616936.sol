['pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'interface ILidCertifiableToken {\n', '    function activateTransfers() external;\n', '    function activateTax() external;\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '    function addMinter(address account) external;\n', '    function renounceMinter() external;\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function isMinter(address account) external view returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'library BasisPoints {\n', '    using SafeMath for uint;\n', '\n', '    uint constant private BASIS_POINTS = 10000;\n', '\n', '    function mulBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        return amt.mul(bp).div(BASIS_POINTS);\n', '    }\n', '\n', '    function divBP(uint amt, uint bp) internal pure returns (uint) {\n', '        require(bp > 0, "Cannot divide by zero.");\n', '        if (amt == 0) return 0;\n', '        return amt.mul(BASIS_POINTS).div(bp);\n', '    }\n', '\n', '    function addBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.add(mulBP(amt, bp));\n', '    }\n', '\n', '    function subBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.sub(mulBP(amt, bp));\n', '    }\n', '}\n', '\n', '\n', 'contract LidTeamLock is Initializable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint public releaseInterval;\n', '    uint public releaseStart;\n', '    uint public releaseBP;\n', '\n', '    uint public startingLid;\n', '    uint public startingEth;\n', '\n', '    address payable[] public teamMemberAddresses;\n', '    uint[] public teamMemberBPs;\n', '    mapping(address => uint) public teamMemberClaimedEth;\n', '    mapping(address => uint) public teamMemberClaimedLid;\n', '\n', '    ILidCertifiableToken private lidToken;\n', '\n', '    modifier onlyAfterStart {\n', '        require(releaseStart != 0 && now > releaseStart, "Has not yet started.");\n', '        _;\n', '    }\n', '\n', '    function() external payable { }\n', '\n', '    function initialize(\n', '        uint _releaseInterval,\n', '        uint _releaseBP,\n', '        address payable[] calldata _teamMemberAddresses,\n', '        uint[] calldata _teamMemberBPs,\n', '        ILidCertifiableToken _lidToken\n', '    ) external initializer {\n', '        require(_teamMemberAddresses.length == _teamMemberBPs.length, "Must have one BP for every address.");\n', '\n', '        releaseInterval = _releaseInterval;\n', '        releaseBP = _releaseBP;\n', '        lidToken = _lidToken;\n', '\n', '        for (uint i = 0; i < _teamMemberAddresses.length; i++) {\n', '            teamMemberAddresses.push(_teamMemberAddresses[i]);\n', '        }\n', '\n', '        uint totalTeamBP = 0;\n', '        for (uint i = 0; i < _teamMemberBPs.length; i++) {\n', '            teamMemberBPs.push(_teamMemberBPs[i]);\n', '            totalTeamBP = totalTeamBP.add(_teamMemberBPs[i]);\n', '        }\n', '        require(totalTeamBP == 10000, "Must allocate exactly 100% (10000 BP) to team.");\n', '    }\n', '\n', '    function claimLid(uint id) external onlyAfterStart {\n', '        require(checkIfTeamMember(msg.sender), "Can only be called by team members.");\n', '        require(msg.sender == teamMemberAddresses[id], "Sender must be team member ID");\n', '        uint bp = teamMemberBPs[id];\n', '        uint cycle = getCurrentCycleCount();\n', '        uint totalClaimAmount = cycle.mul(startingLid.mulBP(bp).mulBP(releaseBP));\n', '        uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);\n', '        if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));\n', '        teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);\n', '        lidToken.transfer(msg.sender, toClaim);\n', '    }\n', '\n', '    function claimEth(uint id) external {\n', '        require(checkIfTeamMember(msg.sender), "Can only be called by team members.");\n', '        require(msg.sender == teamMemberAddresses[id], "Sender must be team member ID");\n', '        uint bp = teamMemberBPs[id];\n', '        uint totalClaimAmount = startingEth.mulBP(bp);\n', '        uint toClaim = totalClaimAmount.sub(teamMemberClaimedEth[msg.sender]);\n', '        if (address(this).balance < toClaim) toClaim = address(this).balance;\n', '        teamMemberClaimedEth[msg.sender] = teamMemberClaimedEth[msg.sender].add(toClaim);\n', '        msg.sender.transfer(toClaim);\n', '    }\n', '\n', '    function startRelease() external {\n', '        require(releaseStart == 0, "Has already started.");\n', '        require(address(this).balance != 0, "Must have some ether deposited.");\n', '        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");\n', '        startingLid = lidToken.balanceOf(address(this));\n', '        startingEth = address(this).balance;\n', '        releaseStart = now.add(24 hours);\n', '    }\n', '\n', '    function migrateMember(uint i, address payable newAddress) external {\n', '        require(msg.sender == teamMemberAddresses[0], "Must be project lead.");\n', '        address oldAddress = teamMemberAddresses[i];\n', '        teamMemberClaimedLid[newAddress] = teamMemberClaimedLid[oldAddress];\n', '        delete teamMemberClaimedLid[oldAddress];\n', '        teamMemberAddresses[i] = newAddress;\n', '    }\n', '\n', '    function resetTeam(\n', '        address payable[] calldata _teamMemberAddresses,\n', '        uint[] calldata _teamMemberBPs\n', '    ) external {\n', '        require(msg.sender == teamMemberAddresses[0], "Must be project lead.");\n', '        delete teamMemberAddresses;\n', '        delete teamMemberBPs;\n', '        for (uint i = 0; i < _teamMemberAddresses.length; i++) {\n', '            teamMemberAddresses.push(_teamMemberAddresses[i]);\n', '        }\n', '\n', '        uint totalTeamBP = 0;\n', '        for (uint i = 0; i < _teamMemberBPs.length; i++) {\n', '            teamMemberBPs.push(_teamMemberBPs[i]);\n', '            totalTeamBP = totalTeamBP.add(_teamMemberBPs[i]);\n', '        }\n', '    }\n', '\n', '    function getCurrentCycleCount() public view returns (uint) {\n', '        if (now <= releaseStart) return 0;\n', '        return now.sub(releaseStart).div(releaseInterval).add(1);\n', '    }\n', '\n', '    function checkIfTeamMember(address member) internal view returns (bool) {\n', '        for (uint i; i < teamMemberAddresses.length; i++) {\n', '            if (teamMemberAddresses[i] == member)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '}']