['pragma solidity ^0.4.21;\n', '/*\n', 'The full name of YFIP is YFIPOOL, which is a token produced by YFIM liquid mining. The total amount of YFIP is 6,000,000 and 60,000 pieces are produced every day,\n', 'and it is mined in 100 days.YFIP is the YFIM liquid mining token. Add liquidity to the ETH/YFIM trading pair in Uniswap, you can participate in mining and get YFIP token rewards, \n', 'which are distributed according to the proportion of injection into the liquidity pool.\n', '*/\n', '\n', 'contract  IYFIP {\n', '   \n', '    uint256 public totalSupply;\n', '\n', ' \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); \n', '    uint256 c = a / b;\n', '\n', '\n', '    return c;\n', '  }\n', '\n', '\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract YFIP is IYFIP {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '\n', '    function YFIP(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;               \n', '        totalSupply = _initialAmount;                       \n', '        name = _tokenName;                                  \n', '        decimals = _decimalUnits;                            \n', '        symbol = _tokenSymbol;                             \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '      \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '  \n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        require(_to != address(0));\n', '      \n', '        balances[_to] = balances[_to].add(_value);\n', ' \n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', ' \n', '        emit Transfer(_from, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        require(_spender != address(0));\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']