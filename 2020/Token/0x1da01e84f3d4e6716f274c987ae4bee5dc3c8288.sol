['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @notice Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownership Contract\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface of Token recipient contrcat\n', ' */\n', 'interface ApproveAndCallFallback { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) external;\n', '    function tokenCallback(address _from, uint256 _tokens, bytes memory _data) external;\n', '} \n', '\n', '\n', '\n', '\n', '/**\n', ' * @title BIDS TOKEN\n', ' */\n', 'contract DefiBids is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    uint256 public BURN_RATE = 0;\n', '    uint256 constant STACKING_POOL_RATE = 10;\n', '\tuint256 constant public PERCENTS_DIVIDER = 1000;\n', '\t\n', '\tbool public isStackingActive = false;\n', '\taddress payable public stackingPoolAddress;\n', '    \n', '    // timestamp when token 5M BIDS is enabled\n', '    uint256 private _releaseTime;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    constructor (address _tokenHolder) public{\n', '        _name = "DefiBids";\n', '        _symbol = "BID";\n', '        _decimals = 18;\n', '        _releaseTime = 1630713600;\n', '        _mint(_tokenHolder, 45000000 * 10**uint256(_decimals));\n', '        _mint(address(this), 5000000 * 10**uint256(_decimals));\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    /**\n', '     * @return the time when the 5M BIDS are released.\n', '     */\n', '    function releaseTime() public view returns (uint256) {\n', '        return _releaseTime;\n', '    }\n', '    \n', '    /**\n', "     * @notice Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Owner can burn his own token.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     * \n', '     */\n', '    function burnMyBIDS(uint256 amount) public virtual returns (bool) {\n', '        _burn(msg.sender, amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    \n', '    /**\n', "     * @notice Sets `amount` as the allowance of `spender` over the caller's tokens..\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     * \n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Moves tokens `amount` from `sender` to `recipient`.\n', '     * \n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual returns(uint256) {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        \n', '        _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '\n', '        uint256 remainingAmount = amount;\n', '        if(BURN_RATE > 0){\n', '            uint256 burnAmount = amount.mul(BURN_RATE).div(PERCENTS_DIVIDER);\n', '            _burn(sender, burnAmount);\n', '            remainingAmount = remainingAmount.sub(burnAmount);\n', '        }\n', '        \n', '        if(isStackingActive){\n', '            uint256 amountToStackPool = amount.mul(STACKING_POOL_RATE).div(PERCENTS_DIVIDER);\n', '            remainingAmount = remainingAmount.sub(amountToStackPool);\n', '            _balances[sender] = _balances[sender].sub(amountToStackPool, "ERC20: transfer amount exceeds balance");\n', '            _balances[stackingPoolAddress] = _balances[stackingPoolAddress].add(amountToStackPool);\n', '            emit Transfer(sender, stackingPoolAddress, amountToStackPool);\n', '        }\n', '\n', '        _balances[sender] = _balances[sender].sub(remainingAmount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(remainingAmount);\n', '        emit Transfer(sender, recipient, remainingAmount);\n', '        return remainingAmount;\n', '    }\n', '    \n', '    /**\n', '     * @notice Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    /** @notice Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function releaseLokedBIDS() public virtual onlyOwner returns(bool){\n', '        require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");\n', '\n', '        uint256 amount = _balances[address(this)];\n', '        require(amount > 0, "TokenTimelock: no tokens to release");\n', '\n', '        _transfer(address(this), msg.sender, amount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice User to perform {approve} of token and {transferFrom} in one function call.\n', '     *\n', '     *\n', '     * Requirements\n', '     *\n', "     * - `spender' must have implemented {receiveApproval} function.\n", '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)  public returns (bool success) {\n', '\t    if (approve(_spender, _value)) {\n', '\t    \tApproveAndCallFallback(_spender).receiveApproval(msg.sender, _value, address(this), _extraData);\n', '\t    \treturn true;\n', '\t    }\n', '    }\n', '    \n', '     /**\n', '     * @notice Same like approveAndCall but doing both transaction in one one call.\n', '     *\n', '     *\n', '     * Requirements\n', '     *\n', "     * - `_to' must have implemented {tokenCallback} function.\n", '     */\n', '    function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\n', '\t\tuint256 _transferred = _transfer(msg.sender, _to, _tokens);\n', '\t\tApproveAndCallFallback(_to).tokenCallback(msg.sender, _transferred, _data);\n', '\t\treturn true;\n', '\t}\n', '    \n', '    /**\n', '     * @notice Do bulk transfers in one transaction.\n', '     */\n', '    function bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\n', '\t\trequire(_receivers.length == _amounts.length);\n', '\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\n', '\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\n', '\t\t}\n', '\t}\n', '    \n', '    /**\n', '     * @notice setStackingPoolContract address where staking fees will be transferred\n', '     */\n', '    function setStackingPoolContract(address payable _a) public onlyOwner returns (bool) { \n', '        stackingPoolAddress = _a;\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Change Status of the `staking`. If this is set to true then\n', '     * portion of transfer amount goes to stacking pool.\n', '     */\n', '    function changeStackingStatus() public virtual onlyOwner returns (bool currentStackingStatus) { \n', '        if(isStackingActive){\n', '            isStackingActive = false;\n', '        } else {\n', '            isStackingActive = true;\n', '        }\n', '        return isStackingActive;\n', '    }\n', '    \n', '    /**\n', '     * @notice Change the `burn` ratio which is deducted while transfer.\n', '     * \n', '     * {burnRatio_} is in multiplication of 10. For example if burnRatio_ is 1% then input will be 10.\n', '     */\n', '    function chnageTransferBurnRate(uint256 burnRatio_) public onlyOwner returns (bool) { \n', '        BURN_RATE = burnRatio_;\n', '        return true;\n', '    }\n', '\n', '}']