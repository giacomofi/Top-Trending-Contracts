['// File: contracts/lib/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/lib/IRewardDistributionRecipient.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'interface IRewardDistributionRecipient {\n', '    function notifyRewardAmount(uint256 reward) external;\n', '\n', '    // Note that this is specific to the Unipool contracts used\n', '    function rewardToken() external view returns (IERC20 token);\n', '}\n', '\n', '// File: contracts/RewardsInitiator.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', 'contract RewardsInitiator {\n', '    string constant private ERROR_TOO_EARLY = "REWARDS_CTRL:TOO_EARLY";\n', '\n', '    uint256 constant public earliestStartTime = 1603983600; // 2020-10-29 15:00 UTC\n', '\n', '    // Pools\n', '    IRewardDistributionRecipient uniPool = IRewardDistributionRecipient(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IRewardDistributionRecipient bptPool = IRewardDistributionRecipient(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    function initiate() external {\n', '        require(block.timestamp >= earliestStartTime, ERROR_TOO_EARLY);\n', '\n', '        uint256 uniRewardBalance = uniRewardBalance();\n', '        uniPool.notifyRewardAmount(uniRewardBalance);\n', '\n', '        uint256 bptRewardBalance = bptRewardBalance();\n', '        bptPool.notifyRewardAmount(bptRewardBalance);\n', '    }\n', '\n', '    function uniRewardBalance() public view returns (uint256) {\n', '        IERC20 uniRewardToken = uniPool.rewardToken();\n', '        return uniRewardToken.balanceOf(address(uniPool));\n', '    }\n', '\n', '    function bptRewardBalance() public view returns (uint256) {\n', '        IERC20 bptRewardToken = bptPool.rewardToken();\n', '        return bptRewardToken.balanceOf(address(bptPool));\n', '    }\n', '}']