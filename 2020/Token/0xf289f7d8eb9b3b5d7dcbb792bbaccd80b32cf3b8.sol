['// UUUUUUUU     UUUUUUUUNNNNNNNN        NNNNNNNNIIIIIIIIIIFFFFFFFFFFFFFFFFFFFFFF      AAA               RRRRRRRRRRRRRRRRR   MMMMMMMM               MMMMMMMM\n', '// U::::::U     U::::::UN:::::::N       N::::::NI::::::::IF::::::::::::::::::::F     A:::A              R::::::::::::::::R  M:::::::M             M:::::::M\n', '// U::::::U     U::::::UN::::::::N      N::::::NI::::::::IF::::::::::::::::::::F    A:::::A             R::::::RRRRRR:::::R M::::::::M           M::::::::M\n', '// UU:::::U     U:::::UUN:::::::::N     N::::::NII::::::IIFF::::::FFFFFFFFF::::F   A:::::::A            RR:::::R     R:::::RM:::::::::M         M:::::::::M\n', '//  U:::::U     U:::::U N::::::::::N    N::::::N  I::::I    F:::::F       FFFFFF  A:::::::::A             R::::R     R:::::RM::::::::::M       M::::::::::M\n', '//  U:::::D     D:::::U N:::::::::::N   N::::::N  I::::I    F:::::F              A:::::A:::::A            R::::R     R:::::RM:::::::::::M     M:::::::::::M\n', '//  U:::::D     D:::::U N:::::::N::::N  N::::::N  I::::I    F::::::FFFFFFFFFF   A:::::A A:::::A           R::::RRRRRR:::::R M:::::::M::::M   M::::M:::::::M\n', '//  U:::::D     D:::::U N::::::N N::::N N::::::N  I::::I    F:::::::::::::::F  A:::::A   A:::::A          R:::::::::::::RR  M::::::M M::::M M::::M M::::::M\n', '//  U:::::D     D:::::U N::::::N  N::::N:::::::N  I::::I    F:::::::::::::::F A:::::A     A:::::A         R::::RRRRRR:::::R M::::::M  M::::M::::M  M::::::M\n', '//  U:::::D     D:::::U N::::::N   N:::::::::::N  I::::I    F::::::FFFFFFFFFFA:::::AAAAAAAAA:::::A        R::::R     R:::::RM::::::M   M:::::::M   M::::::M\n', '//  U:::::D     D:::::U N::::::N    N::::::::::N  I::::I    F:::::F         A:::::::::::::::::::::A       R::::R     R:::::RM::::::M    M:::::M    M::::::M\n', '//  U::::::U   U::::::U N::::::N     N:::::::::N  I::::I    F:::::F        A:::::AAAAAAAAAAAAA:::::A      R::::R     R:::::RM::::::M     MMMMM     M::::::M\n', '//  U:::::::UUU:::::::U N::::::N      N::::::::NII::::::IIFF:::::::FF     A:::::A             A:::::A   RR:::::R     R:::::RM::::::M               M::::::M\n', '//   UU:::::::::::::UU  N::::::N       N:::::::NI::::::::IF::::::::FF    A:::::A               A:::::A  R::::::R     R:::::RM::::::M               M::::::M\n', '//     UU:::::::::UU    N::::::N        N::::::NI::::::::IF::::::::FF   A:::::A                 A:::::A R::::::R     R:::::RM::::::M               M::::::M\n', '//       UUUUUUUUU      NNNNNNNN         NNNNNNNIIIIIIIIIIFFFFFFFFFFF  AAAAAAA                   AAAAAAARRRRRRRR     RRRRRRRMMMMMMMM               MMMMMMMM\n', '//\n', '// TOKEN CONTRACT \n', '// unifarm.io - t.me/unifarm\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) \n', '            return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowed;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return A uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token to a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * Note that while this function emits an Approval event, this is not required as per the specification,\n', '    * and other compliant implementations may not emit the event.\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        if (from != msg.sender && _allowed[from][msg.sender] != uint256(-1))\n', '            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Mintable is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function _mint(address to, uint256 amount) internal {\n', '        _balances[to] = _balances[to].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    function _burn(address from, uint256 amount) internal {\n', '        _balances[from] = _balances[from].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(from, address(0), amount);\n', '    }\n', '}\n', '\n', 'contract UnifarmCore is ERC20Mintable, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => bool) public isMinter;\n', '\n', '    constructor() public {\n', '        name = "UNIFARM.IO";\n', '        symbol = "UNF";\n', '        decimals = 18;\n', '    }\n', '\n', '    function setMinter(address minter, bool flag) external onlyOwner {\n', '        isMinter[minter] = flag;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) external {\n', '        require(isMinter[msg.sender], "Not Minter");\n', '        _mint(to, amount);\n', '    }\n', '\n', '    function burn(address from, uint256 amount) external {\n', '        if (from != msg.sender && _allowed[from][msg.sender] != uint256(-1))\n', '            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(amount);\n', '        require(_balances[from] >= amount, "insufficient-balance");\n', '        _burn(from, amount);\n', '    }\n', '    \n', '}']