['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Capped.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n', ' */\n', 'abstract contract ERC20Capped is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n', '     * set once during construction.\n', '     */\n', '    constructor (uint256 cap_) {\n', '        require(cap_ > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap_;\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the cap on the token's total supply.\n", '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - minted tokens must not cause the total supply to go over the cap.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '/**\n', ' * @title IERC1363 Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for a Payable Token contract as defined in\n', ' *  https://eips.ethereum.org/EIPS/eip-1363\n', ' */\n', 'interface IERC1363 is IERC20, IERC165 {\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n', '     * 0x4bbee2df ===\n', "     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n", "     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n", "     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n", "     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n", '     */\n', '\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n', '     * 0xfb9ec8ce ===\n', "     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n", "     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n", '     */\n', '\n', '    /**\n', '     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 The amount of tokens to be transferred\n', '     * @return true unless throwing\n', '     */\n', '    function transferAndCall(address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 The amount of tokens to be transferred\n', '     * @param data bytes Additional data with no specified format, sent in call to `to`\n', '     * @return true unless throwing\n', '     */\n', '    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 The amount of tokens to be transferred\n', '     * @return true unless throwing\n', '     */\n', '    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 The amount of tokens to be transferred\n', '     * @param data bytes Additional data with no specified format, sent in call to `to`\n', '     * @return true unless throwing\n', '     */\n', '    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n', '\n', '    /**\n', '     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '     * and then call `onApprovalReceived` on spender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender address The address which will spend the funds\n', '     * @param value uint256 The amount of tokens to be spent\n', '     */\n', '    function approveAndCall(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '     * and then call `onApprovalReceived` on spender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender address The address which will spend the funds\n', '     * @param value uint256 The amount of tokens to be spent\n', '     * @param data bytes Additional data with no specified format, sent in call to `spender`\n', '     */\n', '    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @title IERC1363Receiver Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n', ' *  from ERC1363 token contracts as defined in\n', ' *  https://eips.ethereum.org/EIPS/eip-1363\n', ' */\n', 'interface IERC1363Receiver {\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n', '     * 0x88a7ca5c === bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))\n', '     */\n', '\n', '    /**\n', '     * @notice Handle the receipt of ERC1363 tokens\n', '     * @dev Any ERC1363 smart contract calls this function on the recipient\n', '     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n', '     * transfer. Return of other than the magic value MUST result in the\n', '     * transaction being reverted.\n', '     * Note: the token contract address is always the message sender.\n', '     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n', '     * @param from address The address which are token transferred from\n', '     * @param value uint256 The amount of tokens transferred\n', '     * @param data bytes Additional data with no specified format\n', '     * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`\n', '     *  unless throwing\n', '     */\n', '    function onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @title IERC1363Spender Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for any contract that wants to support approveAndCall\n', ' *  from ERC1363 token contracts as defined in\n', ' *  https://eips.ethereum.org/EIPS/eip-1363\n', ' */\n', 'interface IERC1363Spender {\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n', '     * 0x7b04a2d0 === bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))\n', '     */\n', '\n', '    /**\n', '     * @notice Handle the approval of ERC1363 tokens\n', '     * @dev Any ERC1363 smart contract calls this function on the recipient\n', '     * after an `approve`. This function MAY throw to revert and reject the\n', '     * approval. Return of other than the magic value MUST result in the\n', '     * transaction being reverted.\n', '     * Note: the token contract address is always the message sender.\n', '     * @param owner address The address which called `approveAndCall` function\n', '     * @param value uint256 The amount of tokens to be spent\n', '     * @param data bytes Additional data with no specified format\n', '     * @return `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`\n', '     *  unless throwing\n', '     */\n', '    function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/ERC165Checker.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Library used to query support of an interface declared via {IERC165}.\n', ' *\n', ' * Note that these functions return the actual result of the query: they do not\n', ' * `revert` if an interface is not supported. It is up to the caller to decide\n', ' * what to do in these cases.\n', ' */\n', 'library ERC165Checker {\n', '    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n', '    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n', '\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports the {IERC165} interface,\n', '     */\n', '    function supportsERC165(address account) internal view returns (bool) {\n', '        // Any contract that implements ERC165 must explicitly indicate support of\n', '        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n', '        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n', '            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports the interface defined by\n', '     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n', '        // query support of both ERC165 as per the spec and support of _interfaceId\n', '        return supportsERC165(account) &&\n', '            _supportsERC165Interface(account, interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if `account` supports all the interfaces defined in\n', '     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n', '     *\n', '     * Batch-querying can lead to gas savings by skipping repeated checks for\n', '     * {IERC165} support.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n', '        // query support of ERC165 itself\n', '        if (!supportsERC165(account)) {\n', '            return false;\n', '        }\n', '\n', '        // query support of each interface in _interfaceIds\n', '        for (uint256 i = 0; i < interfaceIds.length; i++) {\n', '            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        // all interfaces supported\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Query if a contract implements an interface, does not check ERC165 support\n', '     * @param account The address of the contract to query for support of an interface\n', '     * @param interfaceId The interface identifier, as specified in ERC-165\n', '     * @return true if the contract at account indicates support of the interface with\n', '     * identifier interfaceId, false otherwise\n', '     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n', '     * the behavior of this method is undefined. This precondition can be checked\n', '     * with {supportsERC165}.\n', '     * Interface identification is specified in ERC-165.\n', '     */\n', '    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n', '        // success determines whether the staticcall succeeded and result determines\n', '        // whether the contract at account indicates support of _interfaceId\n', '        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n', '\n', '        return (success && result);\n', '    }\n', '\n', '    /**\n', '     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n', '     * @param account The address of the contract to query for support of an interface\n', '     * @param interfaceId The interface identifier, as specified in ERC-165\n', '     * @return success true if the STATICCALL succeeded, false otherwise\n', '     * @return result true if the STATICCALL succeeded and the contract at account\n', '     * indicates support of the interface with identifier interfaceId, false otherwise\n', '     */\n', '    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n', '        private\n', '        view\n', '        returns (bool, bool)\n', '    {\n', '        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n', '        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n', '        if (result.length < 32) return (false, false);\n', '        return (success, abi.decode(result, (bool)));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/ERC165.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC1363\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Implementation of an ERC1363 interface\n', ' */\n', 'contract ERC1363 is ERC20, IERC1363, ERC165 {\n', '    using Address for address;\n', '\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n', '     * 0x4bbee2df ===\n', "     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n", "     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n", "     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n", "     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n", '     */\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\n', '\n', '    /*\n', '     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n', '     * 0xfb9ec8ce ===\n', "     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n", "     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n", '     */\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\n', '\n', '    // Equals to `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\n', '    bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\n', '\n', '    // Equals to `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\n', '    bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\n', '\n', '    /**\n', '     * @param name Name of the token\n', '     * @param symbol A symbol to be used as ticker\n', '     */\n', '    constructor (string memory name, string memory symbol) ERC20(name, symbol) {\n', '        // register the supported interfaces to conform to ERC1363 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC1363_TRANSFER);\n', '        _registerInterface(_INTERFACE_ID_ERC1363_APPROVE);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferAndCall(address to, uint256 value) public override returns (bool) {\n', '        return transferAndCall(to, value, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n', '     * @param to The address to transfer to\n', '     * @param value The amount to be transferred\n', '     * @param data Additional data with no specified format\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferAndCall(address to, uint256 value, bytes memory data) public override returns (bool) {\n', '        transfer(to, value);\n', '        require(_checkAndCallTransfer(_msgSender(), to, value, data), "ERC1363: _checkAndCallTransfer reverts");\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n', '     * @param from The address which you want to send tokens from\n', '     * @param to The address which you want to transfer to\n', '     * @param value The amount of tokens to be transferred\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferFromAndCall(address from, address to, uint256 value) public override returns (bool) {\n', '        return transferFromAndCall(from, to, value, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n', '     * @param from The address which you want to send tokens from\n', '     * @param to The address which you want to transfer to\n', '     * @param value The amount of tokens to be transferred\n', '     * @param data Additional data with no specified format\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public override returns (bool) {\n', '        transferFrom(from, to, value);\n', '        require(_checkAndCallTransfer(from, to, value, data), "ERC1363: _checkAndCallTransfer reverts");\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n', '     * @param spender The address allowed to transfer to\n', '     * @param value The amount allowed to be transferred\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function approveAndCall(address spender, uint256 value) public override returns (bool) {\n', '        return approveAndCall(spender, value, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n', '     * @param spender The address allowed to transfer to.\n', '     * @param value The amount allowed to be transferred.\n', '     * @param data Additional data with no specified format.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function approveAndCall(address spender, uint256 value, bytes memory data) public override returns (bool) {\n', '        approve(spender, value);\n', '        require(_checkAndCallApprove(spender, value, data), "ERC1363: _checkAndCallApprove reverts");\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke `onTransferReceived` on a target address\n', '     *  The call is not executed if the target address is not a contract\n', '     * @param from address Representing the previous owner of the given token value\n', '     * @param to address Target address that will receive the tokens\n', '     * @param value uint256 The amount mount of tokens to be transferred\n', '     * @param data bytes Optional data to send along with the call\n', '     * @return whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkAndCallTransfer(address from, address to, uint256 value, bytes memory data) internal returns (bool) {\n', '        if (!to.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Receiver(to).onTransferReceived(\n', '            _msgSender(), from, value, data\n', '        );\n', '        return (retval == _ERC1363_RECEIVED);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke `onApprovalReceived` on a target address\n', '     *  The call is not executed if the target address is not a contract\n', '     * @param spender address The address which will spend the funds\n', '     * @param value uint256 The amount of tokens to be spent\n', '     * @param data bytes Optional data to send along with the call\n', '     * @return whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkAndCallApprove(address spender, uint256 value, bytes memory data) internal returns (bool) {\n', '        if (!spender.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\n', '            _msgSender(), value, data\n', '        );\n', '        return (retval == _ERC1363_APPROVED);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: eth-token-recover/contracts/TokenRecover.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '/**\n', ' * @title TokenRecover\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Allow to recover any ERC20 sent into the contract for error\n', ' */\n', 'contract TokenRecover is Ownable {\n', '\n', '    /**\n', '     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n', '     * @param tokenAddress The token contract address\n', '     * @param tokenAmount Number of tokens to be sent\n', '     */\n', '    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n', '        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '    }\n', '}\n', '\n', '// File: contracts/service/ServiceReceiver.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @title ServiceReceiver\n', ' * @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n', ' * @dev Implementation of the ServiceReceiver\n', ' */\n', 'contract ServiceReceiver is TokenRecover {\n', '\n', '    mapping (bytes32 => uint256) private _prices;\n', '\n', '    event Created(string serviceName, address indexed serviceAddress);\n', '\n', '    function pay(string memory serviceName) public payable {\n', '        require(msg.value == _prices[_toBytes32(serviceName)], "ServiceReceiver: incorrect price");\n', '\n', '        emit Created(serviceName, _msgSender());\n', '    }\n', '\n', '    function getPrice(string memory serviceName) public view returns (uint256) {\n', '        return _prices[_toBytes32(serviceName)];\n', '    }\n', '\n', '    function setPrice(string memory serviceName, uint256 amount) public onlyOwner {\n', '        _prices[_toBytes32(serviceName)] = amount;\n', '    }\n', '\n', '    function withdraw(uint256 amount) public onlyOwner {\n', '        payable(owner()).transfer(amount);\n', '    }\n', '\n', '    function _toBytes32(string memory serviceName) private pure returns (bytes32) {\n', '        return keccak256(abi.encode(serviceName));\n', '    }\n', '}\n', '\n', '// File: contracts/service/ServicePayer.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @title ServicePayer\n', ' * @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n', ' * @dev Implementation of the ServicePayer\n', ' */\n', 'contract ServicePayer {\n', '\n', '    constructor (address payable receiver, string memory serviceName) payable {\n', '        ServiceReceiver(receiver).pay{value: msg.value}(serviceName);\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/PowerfulERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title PowerfulERC20\n', ' * @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n', ' * @dev Implementation of the PowerfulERC20\n', ' */\n', 'contract PowerfulERC20 is ERC20Capped, ERC20Burnable, ERC1363, TokenRecover, ServicePayer {\n', '\n', '    // indicates if minting is finished\n', '    bool private _mintingFinished = false;\n', '\n', '    /**\n', '     * @dev Emitted during finish minting\n', '     */\n', '    event MintFinished();\n', '\n', '    /**\n', '     * @dev Tokens can be minted only before minting finished.\n', '     */\n', '    modifier canMint() {\n', '        require(!_mintingFinished, "PowerfulERC20: minting is finished");\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 cap,\n', '        uint256 initialBalance,\n', '        address payable feeReceiver\n', '    ) ERC1363(name, symbol) ERC20Capped(cap) ServicePayer(feeReceiver, "PowerfulERC20") payable {\n', '        _setupDecimals(decimals);\n', '\n', '        _mint(_msgSender(), initialBalance);\n', '    }\n', '\n', '    /**\n', '     * @return if minting is finished or not.\n', '     */\n', '    function mintingFinished() public view returns (bool) {\n', '        return _mintingFinished;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens.\n', '     * @param to The address that will receive the minted tokens\n', '     * @param value The amount of tokens to mint\n', '     */\n', '    function mint(address to, uint256 value) public canMint onlyOwner {\n', '        _mint(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     */\n', '    function finishMinting() public canMint onlyOwner {\n', '        _mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']