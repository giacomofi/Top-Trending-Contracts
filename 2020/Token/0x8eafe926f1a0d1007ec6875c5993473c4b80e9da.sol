['// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', 'library TokenFlags {\n', '    uint32 internal constant BIT_PAUSABLE = 0;\n', '    uint32 internal constant BIT_MINTABLE = 1;\n', '    uint32 internal constant BIT_BURNABLE = 2;\n', '    uint32 internal constant BIT_ETH_REFUNDABLE = 3;\n', '    uint32 internal constant BIT_ERC20_REFUNDABLE = 4;\n', '    uint32 internal constant BIT_BLACKLISTABLE = 5;\n', '    uint32 internal constant BIT_DIRECT_MODE = 6;\n', '\n', '    function isPausable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_PAUSABLE) & 1) > 0;\n', '    }\n', '\n', '    function isMintable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_MINTABLE) & 1) > 0;\n', '    }\n', '\n', '    function isBurnable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_BURNABLE) & 1) > 0;\n', '    }\n', '\n', '    function isETHRefundable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_ETH_REFUNDABLE) & 1) > 0;\n', '    }\n', '\n', '    function isERC20Refundable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_ERC20_REFUNDABLE) & 1) > 0;\n', '    }\n', '\n', '    function isBlacklistable(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_BLACKLISTABLE) & 1) > 0;\n', '    }\n', '\n', '    function isDirectMode(uint32 flags) internal pure returns (bool) {\n', '        return ((flags >> BIT_DIRECT_MODE) & 1) > 0;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', 'interface ICashier {\n', '    function getPayee() external view returns (address payable);\n', '    function calcFee(address addr, uint256 kind, bytes4 func) external view returns (uint256);\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', 'contract Chargeable {\n', '\n', '    function sendFee(uint256 kind) internal {\n', '        sendFee(msg.sig, kind);\n', '    }\n', '\n', '    function sendFee(bytes4 func, uint256 kind) internal {\n', '        address cashier = _getCashier();\n', '        if (address(cashier) == address(0x0)) {\n', '            return;\n', '        }\n', '        address payable payee = ICashier(cashier).getPayee();\n', '        if (payee == address(0x0)) {\n', '            return;\n', '        }\n', '        uint256 fee = ICashier(cashier).calcFee(address(this), kind, func);\n', '        if (fee > 0) {\n', '            require(address(this).balance >= fee, "Function fee is not enough.");\n', '            payee.transfer(fee);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the cashier contract.\n', '     * This is the keccak-256 hash of "x.cashier.contract" and is validated in the constructor.\n', '     */\n', '    bytes32\n', '        internal constant _CASHIER_SLOT = 0xe4daccb11a797004e79d649410b00658e14f3296aae1b244a00c23be3d595cd4;\n', '\n', '    /**\n', '     * @dev Returns the current cashier contract address.\n', '     */\n', '    function _getCashier() internal view returns (address cashier) {\n', '        bytes32 slot = _CASHIER_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            cashier := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the cashier slot.\n', '     */\n', '    function _setCashier(address addr) internal {\n', '        // zero address is enabled, which means not chargeable\n', '        bytes32 slot = _CASHIER_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, addr)\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', '\n', 'contract BaseTokenV1 is IERC20, Chargeable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant CONTRACT_KIND = 1;\n', '\n', '    mapping(address => uint256) internal _balances;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint256 internal _totalSupply;\n', '    uint8 internal _decimals;\n', '    uint8 internal _version;\n', '    address internal _owner;\n', '    uint32 internal _flags;\n', '    bool internal _paused;\n', '\n', '    mapping(address => bool) internal _blacklist;\n', '\n', '    constructor() public {}\n', '\n', '    function init(\n', '        address cashier,\n', '        address theOwner,\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 initSupply,\n', '        uint32 flags\n', '    ) public {\n', '        require(_version == 0, "I had been initialized already");\n', '        require(cashier != address(0x0), "Cashier address can not be zero");\n', '\n', '        _version = 1;\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _flags = flags;\n', '\n', '        _setOwner(theOwner);\n', '        _setCashier(cashier);\n', '        _mint(theOwner, initSupply);\n', '    }\n', '\n', '    function getCashier() public view returns (address) {\n', '        return _getCashier();\n', '    }\n', '\n', '    function version() public virtual view returns (uint8) {\n', '        return _version;\n', '    }\n', '\n', '    function flags() public view returns (uint256) {\n', '        return _flags;\n', '    }\n', '\n', '    function _setFlag(uint32 flagBit, bool b) internal {\n', '        if (b) {\n', '            _flags = _flags | (uint32(1) << flagBit);\n', '        } else {\n', '            _flags = _flags & (0xFFFFFFFF - (uint32(1) << flagBit));\n', '        }\n', '    }\n', '\n', '    function isPausable() public view returns (bool) {\n', '        return TokenFlags.isPausable(_flags);\n', '    }\n', '\n', '    function isMintable() public view returns (bool) {\n', '        return TokenFlags.isMintable(_flags);\n', '    }\n', '\n', '    function isBurnable() public view returns (bool) {\n', '        return TokenFlags.isBurnable(_flags);\n', '    }\n', '\n', '    function isETHRefundable() public view returns (bool) {\n', '        return TokenFlags.isETHRefundable(_flags);\n', '    }\n', '\n', '    function isERC20Refundable() public view returns (bool) {\n', '        return TokenFlags.isERC20Refundable(_flags);\n', '    }\n', '\n', '    function isBlacklistable() public view returns (bool) {\n', '        return TokenFlags.isBlacklistable(_flags);\n', '    }\n', '\n', '    function isDirectMode() public view returns (bool) {\n', '        return TokenFlags.isDirectMode(_flags);\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setOwner(newOwner);\n', '    }\n', '\n', '    function _setOwner(address newOwner) internal {\n', '        require(newOwner != address(0), "Can not set owner to zero");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused state");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: unpaused state");\n', '        _;\n', '    }\n', '\n', '    function pause() public payable whenNotPaused onlyOwner {\n', '        require(isPausable(), "Contract is not pausable");\n', '        sendFee(CONTRACT_KIND);\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function unpause() public payable whenPaused onlyOwner {\n', '        require(isPausable(), "Contract is not pausable");\n', '        sendFee(CONTRACT_KIND);\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function stopPausable() public payable whenNotPaused onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_MINTABLE, false);\n', '    }\n', '\n', '    function mint(address to, uint256 value) public payable whenNotPaused onlyOwner returns (bool) {\n', '        require(isMintable(), "Contract is not mintable");\n', '        sendFee(CONTRACT_KIND);\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    function stopMintable() public payable onlyOwner {\n', '        require(isMintable(), "Contract is not mintable");\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_MINTABLE, false);\n', '    }\n', '\n', '    function burn(uint256 value) public whenNotPaused {\n', '        require(isBurnable(), "Contract is not burnable");\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    function setBurnable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_BURNABLE, true);\n', '    }\n', '\n', '    function unsetBurnable() public payable onlyOwner {\n', '        // require(isBurnable(), "Contract is not burnable");\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_BURNABLE, false);\n', '    }\n', '\n', '    event RefundETH(address indexed payee, uint256 amount);\n', '    event RefundERC20(address indexed payee, address indexed token, uint256 amount);\n', '\n', '    function refundETH(address payee, uint256 amount) public payable onlyOwner {\n', '        require(isETHRefundable(), "Not refundable for ETH");\n', '        require(payee != address(0), "Refund to address 0x0");\n', '        sendFee(CONTRACT_KIND);\n', '        require(amount <= address(this).balance, "Balance not enough");\n', '        payable(payee).transfer(amount);\n', '        emit RefundETH(payee, amount);\n', '    }\n', '\n', '    function refundETHAll(address payee) public payable onlyOwner {\n', '        require(isETHRefundable(), "Not refundable for ETH");\n', '        require(payee != address(0), "Refund to address 0x0");\n', '        sendFee(CONTRACT_KIND);\n', '        uint256 amount = address(this).balance;\n', '        payable(payee).transfer(amount);\n', '        emit RefundETH(payee, amount);\n', '    }\n', '\n', '    function setETHRefundable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_ETH_REFUNDABLE, true);\n', '    }\n', '\n', '    function unsetETHRefundable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_ETH_REFUNDABLE, false);\n', '    }\n', '\n', '    function refundERC20(\n', '        address tokenContract,\n', '        address payee,\n', '        uint256 amount\n', '    ) public payable onlyOwner {\n', '        require(isERC20Refundable(), "Not refundable for ERC20");\n', '        require(payee != address(0), "Refund to address 0x0");\n', '        bool isContract;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            isContract := gt(extcodesize(tokenContract), 0)\n', '        }\n', '        require(isContract, "contract address is required");\n', '        sendFee(CONTRACT_KIND);\n', '\n', '        IERC20 token = IERC20(tokenContract);\n', '        token.transfer(payee, amount);\n', '        emit RefundERC20(payee, tokenContract, amount);\n', '    }\n', '\n', '    function refundERC20All(address tokenContract, address payee) public payable onlyOwner {\n', '        uint256 balance = IERC20(tokenContract).balanceOf(address(this));\n', '        refundERC20(tokenContract, payee, balance);\n', '    }\n', '\n', '    function setERC20Refundable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_ERC20_REFUNDABLE, true);\n', '    }\n', '\n', '    function unsetERC20Refundable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_ERC20_REFUNDABLE, false);\n', '    }\n', '\n', '    event Blacklisted(address indexed account);\n', '    event UnBlacklisted(address indexed account);\n', '\n', '    function isInBlacklist(address account) public view returns (bool) {\n', '        return _blacklist[account];\n', '    }\n', '\n', '    function blacklist(address account) public payable onlyOwner {\n', '        require(isBlacklistable(), "Contract is not blacklistable");\n', '        sendFee(CONTRACT_KIND);\n', '        _blacklist[account] = true;\n', '        emit Blacklisted(account);\n', '    }\n', '\n', '    function unBlacklist(address account) public payable onlyOwner {\n', '        require(isBlacklistable(), "Contract is not blacklistable");\n', '        sendFee(CONTRACT_KIND);\n', '        _blacklist[account] = false;\n', '        emit UnBlacklisted(account);\n', '    }\n', '\n', '    function setBlacklistable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_BLACKLISTABLE, true);\n', '    }\n', '\n', '    function unsetBlacklistable() public payable onlyOwner {\n', '        sendFee(CONTRACT_KIND);\n', '        _setFlag(TokenFlags.BIT_BLACKLISTABLE, false);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address from, address spender) public virtual override view returns (uint256) {\n', '        return _allowances[from][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "Transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(\n', '            msg.sender,\n', '            spender,\n', '            _allowances[msg.sender][spender].sub(subtractedValue, "Decreased allowance below zero")\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "Transfer from the zero address");\n', '        require(recipient != address(0), "Transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "Mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "Burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "Burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `from` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address from,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(from != address(0), "Approve from the zero address");\n', '        require(spender != address(0), "Approve to the zero address");\n', '\n', '        _allowances[from][spender] = amount;\n', '        emit Approval(from, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 /*amount*/\n', '    ) internal view whenNotPaused {\n', '        if (isBlacklistable()) {\n', '            require(!isInBlacklist(from), "From is blacklisted");\n', '            require(!isInBlacklist(to), "To is blacklisted");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', 'interface ITokenRegistry {\n', '    function register(\n', '        address token,\n', '        address creator,\n', '        address inviter\n', '    ) external payable;\n', '}\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', 'contract TokenV1 is BaseTokenV1 {\n', '    constructor(\n', '        ITokenRegistry registry,\n', '        uint256 fee,\n', '        address cashier,\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 initSupply,\n', '        uint32 flags,\n', '        address inviter,\n', '        bytes32 h\n', '    ) public payable {\n', '        require(fee > 0 && msg.value >= fee, "Function fee is not enough");\n', '        require(TokenFlags.isDirectMode(flags), "Invalid flags");\n', '        bytes32 vh = keccak256(abi.encode(address(registry), fee, cashier, name, flags));\n', '        require(h == vh, "Invalid h");\n', '        registry.register{value: msg.value}(address(this), msg.sender, inviter);\n', '        init(cashier, msg.sender, name, symbol, decimals, initSupply, flags);\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    fallback() external payable {}\n', '}']