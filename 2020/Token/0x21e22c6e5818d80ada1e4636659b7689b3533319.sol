['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenLock {\n', '    address public lockedToken;\n', '    address public withdrawAddress = 0x66C0ca89b1246612Ee1E4454B779E2dBEd55B876;\n', '    uint public releaseTime = 1605125871 + 14 days;\n', '    \n', '    constructor() public {\n', '        lockedToken = 0xE1c94F1dF9f1A06252da006C623E07982787ceE4;\n', '        \n', '    }\n', '\n', '    function lockedTokens() public view returns (uint256) {\n', '        IERC20 token = IERC20(lockedToken);\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function withdrawTokens()  public  {\n', '        require(block.timestamp>releaseTime);\n', '        require(msg.sender == withdrawAddress);\n', '        IERC20 token = IERC20(lockedToken);\n', '        uint256 balancetransfer =  lockedTokens();\n', '        \n', '        token.transfer(address(msg.sender), balancetransfer);\n', '    }\n', '    \n', '}']