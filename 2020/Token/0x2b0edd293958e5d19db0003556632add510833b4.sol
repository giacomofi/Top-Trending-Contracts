['pragma solidity ^0.6.0;\n', '\n', 'contract LiquidityLock {\n', '\n', '    IERC20 public uni;\n', '    IERC20 public flap;\n', '    uint256 public duration;\n', '    uint256 public ratio;\n', '    uint256 public totalLocked;\n', '    address internal _owner;\n', '    \n', '    mapping(address => uint256) locked;\n', '    mapping(address => uint256) time;\n', '\n', '    event Locked (address indexed user, uint256 amount);\n', '    event Unlocked (address indexed user, uint256 amount);\n', '\n', '    constructor (IERC20 _uni, IERC20 _flap) public {\n', '        uni = _uni;\n', '        flap = _flap;\n', '        duration = 1814400;\n', '        ratio = 5000;\n', '        _owner = msg.sender;\n', '        \n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '    require(msg.sender == _owner);\n', '    _;\n', '    }\n', '    \n', '    function setRatio(uint256 flapsxuni) public onlyOwner {\n', '        ratio = flapsxuni;\n', '    }\n', '    \n', '    function lock(uint256 amount) public {\n', '        \n', '        uint256 flaps = amount*ratio;\n', '        require(flaps <= flap.balanceOf(address(this)), "This contract has run out of flapp rewards, wait for replenishment or try a different contract");\n', '        require(uni.transferFrom(msg.sender, address(this), amount), "You need to approve UNI tokens to be transferred to this contract before locking");\n', '        locked[msg.sender] = locked[msg.sender] + amount;\n', '        totalLocked = totalLocked + amount;\n', '        time[msg.sender] = now;\n', '        flap.transfer(msg.sender, flaps);\n', '        emit Locked(msg.sender, amount);\n', '    }\n', '\n', '     function unlock() public {\n', '\n', '        require(now >= time[msg.sender] + duration, "You can\'t unlock yet, wait for the lock to end");\n', '        uint256 amount = locked[msg.sender];\n', '        require(amount > 0, "You have no tokens to unlock");\n', '        locked[msg.sender] = locked[msg.sender] - amount;\n', '        totalLocked = totalLocked - amount;\n', '        uni.transfer(msg.sender, amount);\n', '        emit Unlocked(msg.sender, amount);\n', '    }\n', '\n', '    function getLockedAmount(address user) public view returns (uint256) {\n', '        return locked[user];\n', '    }\n', '\n', '    function getUnlockTime(address user) public view returns (uint256) {\n', '        return (time[user] + duration);\n', '    }\n', '\n', '    function getMyStatus() public view returns (uint256, uint256) {\n', '        uint256 lockedAmount = getLockedAmount(msg.sender);\n', '        uint256 unlockTime = getUnlockTime(msg.sender);\n', '        return (lockedAmount, unlockTime);\n', '    }\n', '\n', '    function getTotalLocked() public view returns (uint256) {\n', '        return totalLocked;\n', '    }\n', '\n', '    \n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']