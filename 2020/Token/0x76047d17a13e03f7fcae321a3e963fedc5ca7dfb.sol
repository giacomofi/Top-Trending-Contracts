['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', 'contract YFLAND is StandardToken  {\n', '\n', '    string public name;                  \n', '    uint8 public decimals;               \n', '    string public symbol;                \n', "    string public version = 'Y2.1';       \n", '    Token public usdtToken ;\n', '    address public contractOwner;\n', '    uint256 public totalUSDTFarm;\n', '    uint256 public totalcountUSDTFarm;\n', '    uint256 public farmRate;\n', '    uint256 public timeReceiveFarm;\n', '    struct listFarm {\n', '    uint256 amount;\n', '    uint256 timeReceive;\n', '    }\n', '\n', '    mapping(address => listFarm) public allFarm;  \n', '    address[] private listAddressFarm;  \n', '    constructor( ) public {\n', '                usdtToken = Token(0xdac17f958d2ee523a2206206994597c13d831ec7); //usdt contract\n', '                totalSupply = 30000000000000000000000;                       \n', '                name = "YFLAND";                                   \n', '                decimals = 18;                            \n', '                symbol = "YFLAND";    \n', '                contractOwner = msg.sender;\n', '                balances[contractOwner] = totalSupply;\n', '                Transfer(address(0),contractOwner,totalSupply);\n', '                totalUSDTFarm = 0;\n', '                totalcountUSDTFarm =0;\n', '                farmRate = 10;\n', '\t\t\t\ttimeReceiveFarm = 24 * 3600; \n', '    }\n', '    function transferUSDTtoContractOwner( uint256 _amount) public  returns (bool) {\n', '            require(msg.sender == contractOwner);\n', '            require(usdtToken.balanceOf(address(this)) >= _amount);\n', '            if(msg.sender == contractOwner && usdtToken.balanceOf(address(this)) >= _amount){          \n', '            return usdtToken.transfer(contractOwner,_amount);\n', '            }else{\n', '            return false;    \n', '            }\n', '    }\n', '    function setTimeReceiveFarm( uint256 _hours) public  returns (bool) {\n', '                require(msg.sender == contractOwner);\n', '                if(msg.sender == contractOwner){          \n', '                timeReceiveFarm = _hours * 3600;\n', '                return true;\n', '                }else{\n', '                return false;    \n', '                }                \n', '\n', '    }    \n', '    function setFarmRate( uint256 _rate) public  returns (bool) {\n', '            require(msg.sender == contractOwner);\n', '            if(msg.sender == contractOwner){          \n', '            farmRate = _rate;\n', '            return true;\n', '            }else{\n', '            return false;    \n', '            }\n', '    }      \n', '    function getAllFarmAddress()public view returns( address  [] memory){\n', '        return listAddressFarm;\n', '    }\n', '    \n', '    function removeListAddress( address _addr) private  returns (bool) {\n', '        for(uint256 i = 0 ; i < listAddressFarm.length ; i++ ){\n', '            if(listAddressFarm[i] == _addr){\n', '                delete listAddressFarm[i];\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function createFarm( uint256 _amount) public returns (bool) {\n', '           require(usdtToken.allowance(msg.sender,address(this)) >= _amount);\n', '           if(usdtToken.allowance(msg.sender,address(this)) >= _amount){\n', '           usdtToken.transferFrom(msg.sender,address(this),_amount);\n', '            allFarm[msg.sender].amount += _amount;\n', '            allFarm[msg.sender].timeReceive = now + timeReceiveFarm;\n', '            removeListAddress(msg.sender);\n', '            listAddressFarm.push(msg.sender);\n', '            totalUSDTFarm  += _amount;\n', '            totalcountUSDTFarm++;\n', '            return true;\n', '            }else{\n', '            return false;    \n', '            }\n', '    }\n', '    function getContractUSDTBalance( ) public view returns (uint256) {\n', '            return usdtToken.balanceOf(address(this));\n', '    }\n', '    function cancelFarm() public  returns (bool) {\n', '            require(allFarm[msg.sender].amount > 0);\n', '            if(allFarm[msg.sender].amount > 0)\n', '            {\n', '            totalcountUSDTFarm--;\n', '            totalUSDTFarm -= allFarm[msg.sender].amount;\n', '            removeListAddress(msg.sender);\n', '            usdtToken.transfer(msg.sender , allFarm[msg.sender].amount);\n', '            allFarm[msg.sender].amount = 0;\n', '            allFarm[msg.sender].timeReceive = 0;                 \n', '            return true;\n', '            }\n', '    }  \n', '    function receiveFarm() public  returns (bool) {\n', '            require(allFarm[msg.sender].amount > 0);\n', '            require(allFarm[msg.sender].timeReceive <= now);\n', '            if(allFarm[msg.sender].amount > 0 && allFarm[msg.sender].timeReceive <= now)\n', '            {\n', '            StandardToken(address(this)).transfer(msg.sender , allFarm[msg.sender].amount * farmRate / 100);\n', '            allFarm[msg.sender].timeReceive = now + timeReceiveFarm;\n', '            return true;\n', '            }\n', '    }   \n', '\n', '\n', '\n', '   \n', '\n', '}']