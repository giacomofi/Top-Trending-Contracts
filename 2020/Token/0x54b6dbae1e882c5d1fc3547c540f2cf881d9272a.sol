['pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '  // Empty internal constructor, to prevent people from mistakenly deploying\n', '  // an instance of this contract, which should be used via inheritance.\n', '  constructor () internal { }\n', '  // solhint-disable-previous-line no-empty-blocks\n', '\n', '  function _msgSender() internal view returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    * - Addition cannot overflow.\n', '    */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    * - Subtraction cannot overflow.\n', '    *\n', '    * _Available since v2.4.0._\n', '    */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    * - Multiplication cannot overflow.\n', '    */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    *\n', '    * _Available since v2.4.0._\n', '    */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts with custom message when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    *\n', '    * _Available since v2.4.0._\n', '    */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '    * @dev Returns the amount of tokens in existence.\n', '    */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '    * @dev Returns the amount of tokens owned by `account`.\n', '    */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "    * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '    * @dev Returns the remaining number of tokens that `spender` will be\n', '    * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '    * zero by default.\n', '    *\n', '    * This value changes when {approve} or {transferFrom} are called.\n', '    */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '    * that someone may use both the old and the new allowance by unfortunate\n', '    * transaction ordering. One possible solution to mitigate this race\n', "    * condition is to first reduce the spender's allowance to 0 and set the\n", '    * desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    *\n', '    * Emits an {Approval} event.\n', '    */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '    * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "    * allowance mechanism. `amount` is then deducted from the caller's\n", '    * allowance.\n', '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    */\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '    * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '    * another (`to`).\n', '    *\n', '    * Note that `value` may be zero.\n', '    */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '    * a call to {approve}. `value` is the new allowance.\n', '    */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '    * @dev See {IERC20-totalSupply}.\n', '    */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '    * @dev See {IERC20-balanceOf}.\n', '    */\n', '  function balanceOf(address account) public view returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  /**\n', '    * @dev See {IERC20-transfer}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `recipient` cannot be the zero address.\n', '    * - the caller must have a balance of at least `amount`.\n', '    */\n', '  function transfer(address recipient, uint256 amount) public returns (bool) {\n', '    _transfer(_msgSender(), recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev See {IERC20-allowance}.\n', '    */\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  /**\n', '    * @dev See {IERC20-approve}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '  function approve(address spender, uint256 amount) public returns (bool) {\n', '    _approve(_msgSender(), spender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev See {IERC20-transferFrom}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance. This is not\n', '    * required by the EIP. See the note at the beginning of {ERC20};\n', '    *\n', '    * Requirements:\n', '    * - `sender` and `recipient` cannot be the zero address.\n', '    * - `sender` must have a balance of at least `amount`.\n', "    * - the caller must have allowance for `sender`'s tokens of at least\n", '    * `amount`.\n', '    */\n', '  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '    _transfer(sender, recipient, amount);\n', '    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '    *\n', '    * This is an alternative to {approve} that can be used as a mitigation for\n', '    * problems described in {IERC20-approve}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '    *\n', '    * This is an alternative to {approve} that can be used as a mitigation for\n', '    * problems described in {IERC20-approve}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    * - `spender` must have allowance for the caller of at least\n', '    * `subtractedValue`.\n', '    */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '    *\n', '    * This is internal function is equivalent to {transfer}, and can be used to\n', '    * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `sender` cannot be the zero address.\n', '    * - `recipient` cannot be the zero address.\n', '    * - `sender` must have a balance of at least `amount`.\n', '    */\n', '  function _transfer(address sender, address recipient, uint256 amount) internal {\n', '    require(sender != address(0), "ERC20: transfer from the zero address");\n', '    require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '    _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '    _balances[recipient] = _balances[recipient].add(amount);\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '\n', '  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '    * the total supply.\n', '    *\n', '    * Emits a {Transfer} event with `from` set to the zero address.\n', '    *\n', '    * Requirements\n', '    *\n', '    * - `to` cannot be the zero address.\n', '    */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '    * @dev Destroys `amount` tokens from `account`, reducing the\n', '    * total supply.\n', '    *\n', '    * Emits a {Transfer} event with `to` set to the zero address.\n', '    *\n', '    * Requirements\n', '    *\n', '    * - `account` cannot be the zero address.\n', '    * - `account` must have at least `amount` tokens.\n', '    */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '    _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '    *\n', '    * This is internal function is equivalent to `approve`, and can be used to\n', '    * e.g. set automatic allowances for certain subsystems, etc.\n', '    *\n', '    * Emits an {Approval} event.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `owner` cannot be the zero address.\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '  function _approve(address owner, address spender, uint256 amount) internal {\n', '    require(owner != address(0), "ERC20: approve from the zero address");\n', '    require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    _allowances[owner][spender] = amount;\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  /**\n', '    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "    * from the caller's allowance.\n", '    *\n', '    * See {_burn} and {_approve}.\n', '    */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    _burn(account, amount);\n', '    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '  /**\n', '    * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '    */\n', '  event Paused(address account);\n', '\n', '  /**\n', '    * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '    */\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  /**\n', '    * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '    * to the deployer.\n', '    */\n', '  constructor () internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns true if the contract is paused, and false otherwise.\n', '    */\n', '  function paused() public view returns (bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '  modifier whenNotPaused() {\n', '    require(!_paused, "Pausable: paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '  modifier whenPaused() {\n', '    require(_paused, "Pausable: not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Called by a owner to pause, triggers stopped state.\n', '    */\n', '  function _pause() internal {\n', '    _paused = true;\n', '    emit Paused(_msgSender());\n', '  }\n', '\n', '  /**\n', '    * @dev Called by a owner to unpause, returns to normal state.\n', '    */\n', '  function _unpause() internal {\n', '    _paused = false;\n', '    emit Unpaused(_msgSender());\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions, and hidden onwer account that can change owner.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _hiddenOwner;\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  event HiddenOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '    * @dev Initializes the contract setting the deployer as the initial owner.\n', '    */\n', '  constructor () internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    _hiddenOwner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '    emit HiddenOwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the address of the current owner.\n', '    */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the address of the current hidden owner.\n', '    */\n', '  function hiddenOwner() public view returns (address) {\n', '    return _hiddenOwner;\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the hidden owner.\n', '    */\n', '  modifier onlyHiddenOwner() {\n', '    require(_hiddenOwner == _msgSender(), "Ownable: caller is not the hidden owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '    */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '\n', '  /**\n', '    * @dev Transfers hidden ownership of the contract to a new account (`newHiddenOwner`).\n', '    */\n', '  function _transferHiddenOwnership(address newHiddenOwner) internal {\n', '    require(newHiddenOwner != address(0), "Ownable: new hidden owner is the zero address");\n', '    emit HiddenOwnershipTransferred(_owner, newHiddenOwner);\n', '    _hiddenOwner = newHiddenOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'contract Burnable is Context {\n', '\n', '  mapping(address => bool) private _burners;\n', '\n', '  event BurnerAdded(address indexed account);\n', '  event BurnerRemoved(address indexed account);\n', '\n', '  /**\n', '    * @dev Returns whether the address is burner.\n', '    */\n', '  function isBurner(address account) public view returns (bool) {\n', '    return _burners[account];\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the burner.\n', '    */\n', '  modifier onlyBurner() {\n', '    require(_burners[_msgSender()], "Ownable: caller is not the burner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Add burner, only owner can add burner.\n', '    */\n', '  function _addBurner(address account) internal {\n', '    _burners[account] = true;\n', '    emit BurnerAdded(account);\n', '  }\n', '\n', '  /**\n', '    * @dev Remove operator, only owner can remove operator\n', '    */\n', '  function _removeBurner(address account) internal {\n', '    _burners[account] = false;\n', '    emit BurnerRemoved(account);\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Contract for locking mechanism.\n', ' * Locker can add and remove locked account.\n', ' * If locker send coin to unlocked address, the address is locked automatically.\n', ' */\n', 'contract Lockable is Context {\n', '  using SafeMath for uint;\n', '\n', '  struct TimeLock {\n', '    uint amount;\n', '    uint expiresAt;\n', '  }\n', '\n', '  mapping(address => bool) private _lockers;\n', '  mapping(address => bool) private _locks;\n', '  mapping(address => TimeLock[]) private _timeLocks;\n', '\n', '  event LockerAdded(address indexed account);\n', '  event LockerRemoved(address indexed account);\n', '  event Locked(address indexed account);\n', '  event Unlocked(address indexed account);\n', '  event TimeLocked(address indexed account);\n', '  event TimeUnlocked(address indexed account);\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the locker.\n', '    */\n', '  modifier onlyLocker {\n', '    require(_lockers[_msgSender()], "Lockable: caller is not the locker");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns whether the address is locker.\n', '    */\n', '  function isLocker(address account) public view returns (bool) {\n', '    return _lockers[account];\n', '  }\n', '\n', '  /**\n', '    * @dev Add locker, only owner can add locker\n', '    */\n', '  function _addLocker(address account) internal {\n', '    _lockers[account] = true;\n', '    emit LockerAdded(account);\n', '  }\n', '\n', '  /**\n', '    * @dev Remove locker, only owner can remove locker\n', '    */\n', '  function _removeLocker(address account) internal {\n', '    _lockers[account] = false;\n', '    emit LockerRemoved(account);\n', '  }\n', '\n', '  /**\n', '    * @dev Returns whether the address is locked.\n', '    */\n', '  function isLocked(address account) public view returns (bool) {\n', '    return _locks[account];\n', '  }\n', '\n', '  /**\n', '    * @dev Lock account, only locker can lock\n', '    */\n', '  function _lock(address account) internal {\n', '    _locks[account] = true;\n', '    emit Locked(account);\n', '  }\n', '\n', '  /**\n', '    * @dev Unlock account, only locker can unlock\n', '    */\n', '  function _unlock(address account) internal {\n', '    _locks[account] = false;\n', '    emit Unlocked(account);\n', '  }\n', '\n', '  /**\n', '    * @dev Add time lock, only locker can add\n', '    */\n', '  function _addTimeLock(address account, uint amount, uint expiresAt) internal {\n', '    require(amount > 0, "Time Lock: lock amount must be greater than 0");\n', '    require(expiresAt > block.timestamp, "Time Lock: expire date must be later than now");\n', '    _timeLocks[account].push(TimeLock(amount, expiresAt));\n', '  }\n', '\n', '  /**\n', '    * @dev Remove time lock, only locker can remove\n', '    * @param account The address want to know the time lock state.\n', '    * @param index Time lock index\n', '    */\n', '  function _removeTimeLock(address account, uint8 index) internal {\n', '    require(_timeLocks[account].length > index && index >= 0, "Time Lock: index must be valid");\n', '\n', '    uint len = _timeLocks[account].length;\n', '    if (len - 1 != index) { // if it is not last item, swap it\n', '      _timeLocks[account][index] = _timeLocks[account][len - 1];\n', '    }\n', '    _timeLocks[account].pop();\n', '  }\n', '\n', '  /**\n', '    * @dev Get time lock array length\n', '    * @param account The address want to know the time lock length.\n', '    * @return time lock length\n', '    */\n', '  function getTimeLockLength(address account) public view returns (uint){\n', '    return _timeLocks[account].length;\n', '  }\n', '\n', '  /**\n', '    * @dev Get time lock info\n', '    * @param account The address want to know the time lock state.\n', '    * @param index Time lock index\n', '    * @return time lock info\n', '    */\n', '  function getTimeLock(address account, uint8 index) public view returns (uint, uint){\n', '    require(_timeLocks[account].length > index && index >= 0, "Time Lock: index must be valid");\n', '    return (_timeLocks[account][index].amount, _timeLocks[account][index].expiresAt);\n', '  }\n', '\n', '  /**\n', '    * @dev get total time locked amount of address\n', '    * @param account The address want to know the time lock amount.\n', '    * @return time locked amount\n', '    */\n', '  function getTimeLockedAmount(address account) public view returns (uint) {\n', '    uint timeLockedAmount = 0;\n', '\n', '    uint len = _timeLocks[account].length;\n', '    for (uint i = 0; i < len; i++) {\n', '      if (block.timestamp < _timeLocks[account][i].expiresAt) {\n', '        timeLockedAmount = timeLockedAmount.add(_timeLocks[account][i].amount);\n', '      }\n', '    }\n', '    return timeLockedAmount;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  /**\n', '    * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '    * these values are immutable: they can only be set once during\n', '    * construction.\n', '    */\n', '  constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the name of the token.\n', '    */\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the symbol of the token, usually a shorter version of the\n', '    * name.\n', '    */\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the number of decimals used to get its user representation.\n', '    * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '    * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '    *\n', '    * Tokens usually opt for a value of 18, imitating the relationship between\n', '    * Ether and Wei.\n', '    *\n', '    * NOTE: This information is only used for _display_ purposes: it in\n', '    * no way affects any of the arithmetic of the contract, including\n', '    * {IERC20-balanceOf} and {IERC20-transfer}.\n', '    */\n', '  function decimals() public view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract for Gold QR New\n', ' */\n', 'contract GQCN is Pausable, Ownable, Burnable, Lockable, ERC20, ERC20Detailed {\n', '\n', '  uint private constant _initialSupply = 3300000000e18;\n', '\n', '  constructor() ERC20Detailed("Gold QR Coin New", "GQCN", 18) public {\n', '    _mint(_msgSender(), _initialSupply);\n', '  }\n', '\n', '  /**\n', '    * @dev Recover ERC20 coin in contract address.\n', '    * @param tokenAddress The token contract address\n', '    * @param tokenAmount Number of tokens to be sent\n', '    */\n', '  function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n', '    IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '  }\n', '\n', '  /**\n', '    * @dev lock and pause and check time lock before transfer token\n', '    */\n', '  function _beforeTokenTransfer(address from, address to, uint256 amount) internal view {\n', '    require(!isLocked(from), "Lockable: token transfer from locked account");\n', '    require(!isLocked(to), "Lockable: token transfer to locked account");\n', '    require(!paused(), "Pausable: token transfer while paused");\n', '    require(balanceOf(from).sub(getTimeLockedAmount(from)) >= amount, "Lockable: token transfer from time locked account");\n', '  }\n', '\n', '  function transfer(address recipient, uint256 amount) public returns (bool) {\n', '    _beforeTokenTransfer(_msgSender(), recipient, amount);\n', '    return super.transfer(recipient, amount);\n', '  }\n', '\n', '  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '    _beforeTokenTransfer(sender, recipient, amount);\n', '    return super.transferFrom(sender, recipient, amount);\n', '  }\n', '\n', '  /**\n', '    * @dev only hidden owner can transfer ownership\n', '    */\n', '  function transferOwnership(address newOwner) public onlyHiddenOwner whenNotPaused {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '    * @dev only hidden owner can transfer hidden ownership\n', '    */\n', '  function transferHiddenOwnership(address newHiddenOwner) public onlyHiddenOwner whenNotPaused {\n', '    _transferHiddenOwnership(newHiddenOwner);\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can add burner\n', '    */\n', '  function addBurner(address account) public onlyOwner whenNotPaused {\n', '    _addBurner(account);\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can remove burner\n', '    */\n', '  function removeBurner(address account) public onlyOwner whenNotPaused {\n', '    _removeBurner(account);\n', '  }\n', '\n', '  /**\n', "    * @dev burn burner's coin\n", '    */\n', '  function burn(uint256 amount) public onlyBurner whenNotPaused {\n', '    _beforeTokenTransfer(_msgSender(), address(0), amount);\n', '    _burn(_msgSender(), amount);\n', '  }\n', '\n', '  /**\n', '    * @dev pause all coin transfer\n', '    */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    _pause();\n', '  }\n', '\n', '  /**\n', '    * @dev unpause all coin transfer\n', '    */\n', '  function unpause() public onlyOwner whenPaused {\n', '    _unpause();\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can add locker\n', '    */\n', '  function addLocker(address account) public onlyOwner whenNotPaused {\n', '    _addLocker(account);\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can remove locker\n', '    */\n', '  function removeLocker(address account) public onlyOwner whenNotPaused {\n', '    _removeLocker(account);\n', '  }\n', '\n', '  /**\n', '    * @dev only locker can lock account\n', '    */\n', '  function lock(address account) public onlyLocker whenNotPaused {\n', '    _lock(account);\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can unlock account, not locker\n', '    */\n', '  function unlock(address account) public onlyOwner whenNotPaused {\n', '    _unlock(account);\n', '  }\n', '\n', '  /**\n', '    * @dev only locker can add time lock\n', '    */\n', '  function addTimeLock(address account, uint amount, uint expiresAt) public onlyLocker whenNotPaused {\n', '    _addTimeLock(account, amount, expiresAt);\n', '  }\n', '\n', '  /**\n', '    * @dev only owner can remove time lock\n', '    */\n', '  function removeTimeLock(address account, uint8 index) public onlyOwner whenNotPaused {\n', '    _removeTimeLock(account, index);\n', '  }\n', '\n', '}']