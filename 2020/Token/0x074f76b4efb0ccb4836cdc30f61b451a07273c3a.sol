['// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/v1/AbstractFiatTokenV1.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'abstract contract AbstractFiatTokenV1 is IERC20 {\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 value\n', '    ) internal virtual;\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal virtual;\n', '}\n', '\n', '// File: contracts/v1/Ownable.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @notice The Ownable contract has an owner address, and provides basic\n', ' * authorization control functions\n', ' * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\n', ' * Modifications:\n', ' * 1. Consolidate OwnableStorage into this contract (7/13/18)\n', ' * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\n', ' * 3. Make public functions external (5/27/20)\n', ' */\n', 'contract Ownable {\n', '    // Owner of the contract\n', '    address private _owner;\n', '\n', '    /**\n', '     * @dev Event to show ownership has been transferred\n', '     * @param previousOwner representing the address of the previous owner\n', '     * @param newOwner representing the address of the new owner\n', '     */\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    /**\n', '     * @dev The constructor sets the original owner of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '        setOwner(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Tells the address of the owner\n', '     * @return the address of the owner\n', '     */\n', '    function owner() external view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets a new owner address\n', '     */\n', '    function setOwner(address newOwner) internal {\n', '        _owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        setOwner(newOwner);\n', '    }\n', '}\n', '\n', '// File: contracts/v1/Pausable.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @notice Base contract which allows children to implement an emergency stop\n', ' * mechanism\n', ' * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol\n', ' * Modifications:\n', ' * 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\n', ' * 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\n', ' * 3. Removed whenPaused (6/14/2018)\n', ' * 4. Switches ownable library to use ZeppelinOS (7/12/18)\n', ' * 5. Remove constructor (7/13/18)\n', ' * 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20)\n', ' * 7. Make public functions external (5/27/20)\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    event PauserChanged(address indexed newAddress);\n', '\n', '    address public pauser;\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev throws if called by any account other than the pauser\n', '     */\n', '    modifier onlyPauser() {\n', '        require(msg.sender == pauser, "Pausable: caller is not the pauser");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() external onlyPauser {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() external onlyPauser {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev update the pauser role\n', '     */\n', '    function updatePauser(address _newPauser) external onlyOwner {\n', '        require(\n', '            _newPauser != address(0),\n', '            "Pausable: new pauser is the zero address"\n', '        );\n', '        pauser = _newPauser;\n', '        emit PauserChanged(pauser);\n', '    }\n', '}\n', '\n', '// File: contracts/v1/Blacklistable.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title Blacklistable Token\n', ' * @dev Allows accounts to be blacklisted by a "blacklister" role\n', ' */\n', 'contract Blacklistable is Ownable {\n', '    address public blacklister;\n', '    mapping(address => bool) internal blacklisted;\n', '\n', '    event Blacklisted(address indexed _account);\n', '    event UnBlacklisted(address indexed _account);\n', '    event BlacklisterChanged(address indexed newBlacklister);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the blacklister\n', '     */\n', '    modifier onlyBlacklister() {\n', '        require(\n', '            msg.sender == blacklister,\n', '            "Blacklistable: caller is not the blacklister"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if argument account is blacklisted\n', '     * @param _account The address to check\n', '     */\n', '    modifier notBlacklisted(address _account) {\n', '        require(\n', '            !blacklisted[_account],\n', '            "Blacklistable: account is blacklisted"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is blacklisted\n', '     * @param _account The address to check\n', '     */\n', '    function isBlacklisted(address _account) external view returns (bool) {\n', '        return blacklisted[_account];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds account to blacklist\n', '     * @param _account The address to blacklist\n', '     */\n', '    function blacklist(address _account) external onlyBlacklister {\n', '        blacklisted[_account] = true;\n', '        emit Blacklisted(_account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes account from blacklist\n', '     * @param _account The address to remove from the blacklist\n', '     */\n', '    function unBlacklist(address _account) external onlyBlacklister {\n', '        blacklisted[_account] = false;\n', '        emit UnBlacklisted(_account);\n', '    }\n', '\n', '    function updateBlacklister(address _newBlacklister) external onlyOwner {\n', '        require(\n', '            _newBlacklister != address(0),\n', '            "Blacklistable: new blacklister is the zero address"\n', '        );\n', '        blacklister = _newBlacklister;\n', '        emit BlacklisterChanged(blacklister);\n', '    }\n', '}\n', '\n', '// File: contracts/v1/FiatTokenV1.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FiatToken\n', ' * @dev ERC20 Token backed by fiat reserves\n', ' */\n', 'contract FiatTokenV1 is AbstractFiatTokenV1, Ownable, Pausable, Blacklistable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    string public currency;\n', '    address public masterMinter;\n', '    bool internal initialized;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    uint256 internal totalSupply_ = 0;\n', '    mapping(address => bool) internal minters;\n', '    mapping(address => uint256) internal minterAllowed;\n', '\n', '    event Mint(address indexed minter, address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 amount);\n', '    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\n', '    event MinterRemoved(address indexed oldMinter);\n', '    event MasterMinterChanged(address indexed newMasterMinter);\n', '\n', '    function initialize(\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        string memory tokenCurrency,\n', '        uint8 tokenDecimals,\n', '        address newMasterMinter,\n', '        address newPauser,\n', '        address newBlacklister,\n', '        address newOwner\n', '    ) public {\n', '        require(!initialized, "FiatToken: contract is already initialized");\n', '        require(\n', '            newMasterMinter != address(0),\n', '            "FiatToken: new masterMinter is the zero address"\n', '        );\n', '        require(\n', '            newPauser != address(0),\n', '            "FiatToken: new pauser is the zero address"\n', '        );\n', '        require(\n', '            newBlacklister != address(0),\n', '            "FiatToken: new blacklister is the zero address"\n', '        );\n', '        require(\n', '            newOwner != address(0),\n', '            "FiatToken: new owner is the zero address"\n', '        );\n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        currency = tokenCurrency;\n', '        decimals = tokenDecimals;\n', '        masterMinter = newMasterMinter;\n', '        pauser = newPauser;\n', '        blacklister = newBlacklister;\n', '        setOwner(newOwner);\n', '        initialized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than a minter\n', '     */\n', '    modifier onlyMinters() {\n', '        require(minters[msg.sender], "FiatToken: caller is not a minter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint. Must be less than or equal\n', '     * to the minterAllowance of the caller.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount)\n', '        external\n', '        whenNotPaused\n', '        onlyMinters\n', '        notBlacklisted(msg.sender)\n', '        notBlacklisted(_to)\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0), "FiatToken: mint to the zero address");\n', '        require(_amount > 0, "FiatToken: mint amount not greater than 0");\n', '\n', '        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\n', '        require(\n', '            _amount <= mintingAllowedAmount,\n', '            "FiatToken: mint amount exceeds minterAllowance"\n', '        );\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\n', '        emit Mint(msg.sender, _to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the masterMinter\n', '     */\n', '    modifier onlyMasterMinter() {\n', '        require(\n', '            msg.sender == masterMinter,\n', '            "FiatToken: caller is not the masterMinter"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Get minter allowance for an account\n', '     * @param minter The address of the minter\n', '     */\n', '    function minterAllowance(address minter) external view returns (uint256) {\n', '        return minterAllowed[minter];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is a minter\n', '     * @param account The address to check\n', '     */\n', '    function isMinter(address account) external view returns (bool) {\n', '        return minters[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Amount of remaining tokens spender is allowed to transfer on\n', '     * behalf of the token owner\n', "     * @param owner     Token owner's address\n", "     * @param spender   Spender's address\n", '     * @return Allowance amount\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Get totalSupply of token\n', '     */\n', '    function totalSupply() external override view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Get token balance of an account\n', '     * @param account address The account\n', '     */\n', '    function balanceOf(address account)\n', '        external\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', "     * @notice Set spender's allowance over the caller's tokens to be a given\n", '     * value.\n', "     * @param spender   Spender's address\n", '     * @param value     Allowance amount\n', '     * @return True if successful\n', '     */\n', '    function approve(address spender, uint256 value)\n', '        external\n', '        override\n', '        whenNotPaused\n', '        notBlacklisted(msg.sender)\n', '        notBlacklisted(spender)\n', '        returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set allowance\n', "     * @param owner     Token owner's address\n", "     * @param spender   Spender's address\n", '     * @param value     Allowance amount\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 value\n', '    ) internal override {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens by spending allowance\n', "     * @param from  Payer's address\n", "     * @param to    Payee's address\n", '     * @param value Transfer amount\n', '     * @return True if successful\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        override\n', '        whenNotPaused\n', '        notBlacklisted(msg.sender)\n', '        notBlacklisted(from)\n', '        notBlacklisted(to)\n', '        returns (bool)\n', '    {\n', '        require(\n', '            value <= allowed[from][msg.sender],\n', '            "ERC20: transfer amount exceeds allowance"\n', '        );\n', '        _transfer(from, to, value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from the caller\n', "     * @param to    Payee's address\n", '     * @param value Transfer amount\n', '     * @return True if successful\n', '     */\n', '    function transfer(address to, uint256 value)\n', '        external\n', '        override\n', '        whenNotPaused\n', '        notBlacklisted(msg.sender)\n', '        notBlacklisted(to)\n', '        returns (bool)\n', '    {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to process transfers\n', "     * @param from  Payer's address\n", "     * @param to    Payee's address\n", '     * @param value Transfer amount\n', '     */\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal override {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(\n', '            value <= balances[from],\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to add/update a new minter\n', '     * @param minter The address of the minter\n', '     * @param minterAllowedAmount The minting amount allowed for the minter\n', '     * @return True if the operation was successful.\n', '     */\n', '    function configureMinter(address minter, uint256 minterAllowedAmount)\n', '        external\n', '        whenNotPaused\n', '        onlyMasterMinter\n', '        returns (bool)\n', '    {\n', '        minters[minter] = true;\n', '        minterAllowed[minter] = minterAllowedAmount;\n', '        emit MinterConfigured(minter, minterAllowedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to remove a minter\n', '     * @param minter The address of the minter to remove\n', '     * @return True if the operation was successful.\n', '     */\n', '    function removeMinter(address minter)\n', '        external\n', '        onlyMasterMinter\n', '        returns (bool)\n', '    {\n', '        minters[minter] = false;\n', '        minterAllowed[minter] = 0;\n', '        emit MinterRemoved(minter);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev allows a minter to burn some of its own tokens\n', '     * Validates that caller is a minter and that sender is not blacklisted\n', "     * amount is less than or equal to the minter's account balance\n", '     * @param _amount uint256 the amount of tokens to be burned\n', '     */\n', '    function burn(uint256 _amount)\n', '        external\n', '        whenNotPaused\n', '        onlyMinters\n', '        notBlacklisted(msg.sender)\n', '    {\n', '        uint256 balance = balances[msg.sender];\n', '        require(_amount > 0, "FiatToken: burn amount not greater than 0");\n', '        require(balance >= _amount, "FiatToken: burn amount exceeds balance");\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[msg.sender] = balance.sub(_amount);\n', '        emit Burn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '    }\n', '\n', '    function updateMasterMinter(address _newMasterMinter) external onlyOwner {\n', '        require(\n', '            _newMasterMinter != address(0),\n', '            "FiatToken: new masterMinter is the zero address"\n', '        );\n', '        masterMinter = _newMasterMinter;\n', '        emit MasterMinterChanged(masterMinter);\n', '    }\n', '}']