['//Symbol: Shrink\n', '//Decimals: 18\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      require(c >= a);\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b <= a);\n', '      uint256 c = a - b;\n', '      return c;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address holder) public view returns (uint256);\n', '  function allowance(address holder, address spender) public view returns (uint256);\n', '  function transfer(address to, uint256 amount) public returns (bool success);\n', '  function approve(address spender, uint256 amount) public returns (bool success);\n', '  function transferFrom(address from, address to, uint256 amount) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 amount);\n', '  event Approval(address indexed holder, address indexed spender, uint256 amount);\n', '}\n', '\n', 'contract Shrink is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public symbol = "SRK";\n', '    string public name = "Shrink Finance";\n', '    uint8 public decimals = 18;\n', '    uint256 private _totalSupply = 200000000000000000000;\n', '    uint256 oneHundredPercent = 100;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '      return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address holder) public view returns (uint256) {\n', '        return balances[holder];\n', '    }\n', '\n', '    function allowance(address holder, address spender) public view returns (uint256) {\n', '        return allowed[holder][spender];\n', '    }\n', '\n', '    function findOnePercent(uint256 amount) private view returns (uint256)  {\n', '        uint256 roundAmount = amount.ceil(oneHundredPercent);\n', '        uint256 fivePercent = roundAmount.mul(oneHundredPercent).div(2000);\n', '        return fivePercent;\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public returns (bool success) {\n', '      require(amount <= balances[msg.sender]);\n', '      require(to != address(0));\n', '\n', '      uint256 tokensToBurn = findOnePercent(amount);\n', '      uint256 tokensToTransfer = amount.sub(tokensToBurn);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(amount);\n', '      balances[to] = balances[to].add(tokensToTransfer);\n', '\n', '      _totalSupply = _totalSupply.sub(tokensToBurn);\n', '\n', '      emit Transfer(msg.sender, to, tokensToTransfer);\n', '      emit Transfer(msg.sender, address(0), tokensToBurn);\n', '      return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\n', '      require(amount <= balances[from]);\n', '      require(amount <= allowed[from][msg.sender]);\n', '      require(to != address(0));\n', '\n', '      balances[from] = balances[from].sub(amount);\n', '\n', '      uint256 tokensToBurn = findOnePercent(amount);\n', '      uint256 tokensToTransfer = amount.sub(tokensToBurn);\n', '\n', '      balances[to] = balances[to].add(tokensToTransfer);\n', '      _totalSupply = _totalSupply.sub(tokensToBurn);\n', '\n', '      allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '\n', '      emit Transfer(from, to, tokensToTransfer);\n', '      emit Transfer(from, address(0), tokensToBurn);\n', '\n', '      return true;\n', '    }\n', '}']