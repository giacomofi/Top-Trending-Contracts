['/*\n', '\n', '█████████████████████████████████████████████████████████\n', '█▄─██─▄█▄─▀█▄─▄█▄─▄█▄─▄▄▀█▄─▄▄─█▄─▀─▄███▄─▄─▀█─▄▄─█─▄─▄─█\n', '██─██─███─█▄▀─███─███─██─██─▄█▀██▀─▀█████─▄─▀█─██─███─███\n', '▀▀▄▄▄▄▀▀▄▄▄▀▀▄▄▀▄▄▄▀▄▄▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▀▀▄▄▄▄▀▀▄▄▄▄▀▀▄▄▄▀▀\n', '\n', 'AUTOMATED TRADING ON UNISWAP\n', '\n', 'https://unibot.cash\n', '\n', 'Unidex Bot is an application for convenient trading on UNISWAP. \n', 'Limit orders, stop orders, trailer stop and everything else that is available on traditional exchanges.\n', '\n', '*/\n', 'pragma solidity ^0.5.1;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable{\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    string public constant name = "unibot.cash";\n', '    string public constant symbol = "UNDB";\n', '    uint public constant decimals = 18;\n', '    uint constant total = 1000;\n', '    uint256 private _totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    constructor() public {\n', '        _mint(msg.sender, total * 10**decimals);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale {\n', '    address payable owner;\n', '    address me = address(this);\n', '    uint sat = 1e18;\n', '    \n', '    // *** Config ***\n', '    uint startFst = 1599753600;\n', '    uint periodFst = 1 days;\n', '    uint periodScd = 1 days;\n', '    uint percentSell = 35;\n', '    uint256 priceFst = 4; // 0.4 ETH\n', '    uint256 priceScd = 5; // 0.5 ETH\n', '    // --- Config ---\n', '\n', '    uint startScd =  startFst + periodFst;\n', '    uint stopSell = startScd + periodScd;\n', '    ERC20 token = new ERC20();\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));\n', '    }\n', '\n', '    function() external payable {\n', '        require(startFst < now && now < stopSell, "Period error");\n', '        uint amount = msg.value / getPrice() * 10;\n', '        require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");\n', '        token.transfer(msg.sender, amount);\n', '    }\n', '    \n', '    function manualGetETH() public payable {\n', '        require(msg.sender == owner, "You is not owner");\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function getLeftTokens() public {\n', '        require(msg.sender == owner, "You is not owner");\n', '        require(now > stopSell, "ICO is not closed");\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '    \n', '    function getPrice() public view returns (uint) {\n', '        return now < startScd ? priceFst : priceScd;\n', '    }\n', '    \n', '    // Utils\n', '    function getStartICO() public view returns (uint) {\n', '        return startFst - now;\n', '    }\n', '    function getStartScd() public view returns (uint) {\n', '        return startScd - now;\n', '    }\n', '    function getStopSell() public view returns(uint){\n', '        return stopSell - now;\n', '    }\n', '    function tokenAddress() public view returns (address){\n', '        return address(token);\n', '    }\n', '    function ICO_deposit() public view returns(uint){\n', '        return token.balanceOf(address(this));\n', '    }\n', '    function myBalance() public view returns(uint){\n', '        return token.balanceOf(msg.sender);\n', '    }\n', '}']