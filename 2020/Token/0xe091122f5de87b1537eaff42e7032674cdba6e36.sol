['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n']
['pragma solidity 0.5.2;\n', '\n', "import './Ownable.sol';\n", "import './MemberCertificateV2.sol';\n", '\n', 'contract ABIV2 is Ownable{\n', '    event NewMemberCertificate(address memberAddr, bytes32 name, uint validityDate);\n', '    constructor() public{\n', '    }\n', '\n', '    function generateCertificate(bytes32 _name, uint _validityDate) public onlyOwner() returns(address){\n', '        MemberCertificateV2 member = new MemberCertificateV2(_name, _validityDate);\n', '        emit NewMemberCertificate(address(member), _name, _validityDate);\n', '        return address(member);\n', '    }\n', '    \n', '    function setName(address certificateAddr, bytes32 newName) onlyOwner() public {\n', '        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);\n', '        member.setName(newName);\n', '    }\n', '\n', '    \n', '    function setValidityDate(address certificateAddr, uint newValidityDate) onlyOwner() public{\n', '        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);\n', '        member.setValidityDate(newValidityDate);\n', '    }\n', '}\n', '/*\n', '1. deploy contract admin\n', '\n', 'deploy admin 0.050054 * 5,5jt = 275ribu\n', 'deploy abi 0.080423 * 5,5jt = 443ribu\n', 'add abi to admin 0.004351 * 5,5jt = 25ribu\n', 'generate certificate 0.055407 * 5,5jt = 305ribu * 21 member = 6,4jt\n', '\n', '7,148,000\n', '\n', '\n', 'V2\n', 'Deploy abi 0.018428 * 6jt = 110ribu\n', 'bikin member 0.009852 * 6jt = 60ribu\n', 'update tiap tahun 0.00074 * 6jt = 4,4ribu\n', 'incase mau set name 0.000739 * 6jt = 4,4ribu\n', '*current gas price = 22 wei\n', '*/']
['pragma solidity 0.5.2;\n', '\n', "import './Ownable.sol';\n", '\n', 'contract MemberCertificateV2 is Ownable{\n', '    address public creator;\n', '    uint public validityDate;\n', '    bytes32 public name;\n', '\n', '    event ChangeName(bytes32 prevName, bytes32 newName);\n', '    event ChangeValidityDate(uint prevValidityDate, uint newValidityDate);\n', '\n', '    constructor(bytes32 _name, uint _validityDate) public{\n', '        creator = msg.sender;\n', '        name = _name;\n', '        validityDate = _validityDate;\n', '    }\n', '\n', '    function setName(bytes32 newName) onlyOwner() public {\n', '        bytes32 prevName = name;\n', '        name = newName;\n', '        emit ChangeName(prevName, name);\n', '    }\n', '\n', '    \n', '    function setValidityDate(uint newValidityDate) onlyOwner() public{\n', '        uint prevValidityDate = validityDate;\n', '        validityDate = newValidityDate;\n', '        emit ChangeValidityDate(prevValidityDate, validityDate);\n', '    }\n', '\n', '}']
