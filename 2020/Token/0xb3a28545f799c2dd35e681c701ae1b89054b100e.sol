['// UUUUUUUU     UUUUUUUUNNNNNNNN        NNNNNNNNIIIIIIIIIIFFFFFFFFFFFFFFFFFFFFFF      AAA               RRRRRRRRRRRRRRRRR   MMMMMMMM               MMMMMMMM\n', '// U::::::U     U::::::UN:::::::N       N::::::NI::::::::IF::::::::::::::::::::F     A:::A              R::::::::::::::::R  M:::::::M             M:::::::M\n', '// U::::::U     U::::::UN::::::::N      N::::::NI::::::::IF::::::::::::::::::::F    A:::::A             R::::::RRRRRR:::::R M::::::::M           M::::::::M\n', '// UU:::::U     U:::::UUN:::::::::N     N::::::NII::::::IIFF::::::FFFFFFFFF::::F   A:::::::A            RR:::::R     R:::::RM:::::::::M         M:::::::::M\n', '//  U:::::U     U:::::U N::::::::::N    N::::::N  I::::I    F:::::F       FFFFFF  A:::::::::A             R::::R     R:::::RM::::::::::M       M::::::::::M\n', '//  U:::::D     D:::::U N:::::::::::N   N::::::N  I::::I    F:::::F              A:::::A:::::A            R::::R     R:::::RM:::::::::::M     M:::::::::::M\n', '//  U:::::D     D:::::U N:::::::N::::N  N::::::N  I::::I    F::::::FFFFFFFFFF   A:::::A A:::::A           R::::RRRRRR:::::R M:::::::M::::M   M::::M:::::::M\n', '//  U:::::D     D:::::U N::::::N N::::N N::::::N  I::::I    F:::::::::::::::F  A:::::A   A:::::A          R:::::::::::::RR  M::::::M M::::M M::::M M::::::M\n', '//  U:::::D     D:::::U N::::::N  N::::N:::::::N  I::::I    F:::::::::::::::F A:::::A     A:::::A         R::::RRRRRR:::::R M::::::M  M::::M::::M  M::::::M\n', '//  U:::::D     D:::::U N::::::N   N:::::::::::N  I::::I    F::::::FFFFFFFFFFA:::::AAAAAAAAA:::::A        R::::R     R:::::RM::::::M   M:::::::M   M::::::M\n', '//  U:::::D     D:::::U N::::::N    N::::::::::N  I::::I    F:::::F         A:::::::::::::::::::::A       R::::R     R:::::RM::::::M    M:::::M    M::::::M\n', '//  U::::::U   U::::::U N::::::N     N:::::::::N  I::::I    F:::::F        A:::::AAAAAAAAAAAAA:::::A      R::::R     R:::::RM::::::M     MMMMM     M::::::M\n', '//  U:::::::UUU:::::::U N::::::N      N::::::::NII::::::IIFF:::::::FF     A:::::A             A:::::A   RR:::::R     R:::::RM::::::M               M::::::M\n', '//   UU:::::::::::::UU  N::::::N       N:::::::NI::::::::IF::::::::FF    A:::::A               A:::::A  R::::::R     R:::::RM::::::M               M::::::M\n', '//     UU:::::::::UU    N::::::N        N::::::NI::::::::IF::::::::FF   A:::::A                 A:::::A R::::::R     R:::::RM::::::M               M::::::M\n', '//       UUUUUUUUU      NNNNNNNN         NNNNNNNIIIIIIIIIIFFFFFFFFFFF  AAAAAAA                   AAAAAAARRRRRRRR     RRRRRRRMMMMMMMM               MMMMMMMM\n', '//\n', '// FARM CONTRACT \n', '// unifarm.io - \n', '// t.me/unifarm_official\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) \n', '            return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowed;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return A uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token to a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * Note that while this function emits an Approval event, this is not required as per the specification,\n', '    * and other compliant implementations may not emit the event.\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        if (from != msg.sender && _allowed[from][msg.sender] != uint256(-1))\n', '            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Mintable is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function _mint(address to, uint256 amount) internal {\n', '        _balances[to] = _balances[to].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    function _burn(address from, uint256 amount) internal {\n', '        _balances[from] = _balances[from].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(from, address(0), amount);\n', '    }\n', '}\n', '\n', 'contract Unifarm is ERC20Mintable, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => bool) public isMinter;\n', '\n', '    constructor() public {\n', '        name = "UNIFARM.IO";\n', '        symbol = "UNF";\n', '        decimals = 18;\n', '    }\n', '\n', '    function setMinter(address minter, bool flag) external onlyOwner {\n', '        isMinter[minter] = flag;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) external {\n', '        require(isMinter[msg.sender], "Not Minter");\n', '        _mint(to, amount);\n', '    }\n', '\n', '    function burn(address from, uint256 amount) external {\n', '        if (from != msg.sender && _allowed[from][msg.sender] != uint256(-1))\n', '            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(amount);\n', '        require(_balances[from] >= amount, "insufficient-balance");\n', '        _burn(from, amount);\n', '    }\n', '    \n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Farm is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    Unifarm public unifarm; //white unifarm\n', '    IUniswapV2Pair public cUnifarm; //colored unifarm\n', '    ERC20 public token; //token\n', '    uint256 public today;\n', '    uint256 public spawnRate;\n', '    uint256 public withdrawRate;\n', '    uint256 public timeLock;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balances;\n', '    mapping(address => uint256) public depositTimeStamp;\n', '\n', '    constructor(uint256 _spawnRate, uint256 _withdrawRate, uint256 _timeLock, address _unifarm, address _cUnifarm, address _token) public {\n', '        today = now / 1 days;\n', '        spawnRate = _spawnRate;\n', '        withdrawRate = _withdrawRate;\n', '        timeLock = _timeLock;\n', '        unifarm = Unifarm(_unifarm);\n', '        cUnifarm = IUniswapV2Pair(_cUnifarm);\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function setParams(uint256 _spawnRate, uint256 _withdrawRate, uint256 _timeLock) external onlyOwner {\n', '        require(_spawnRate <= 0.1e18);\n', '        require(_withdrawRate >= 0.85e18 && _withdrawRate <= 1e18);\n', '        require(_timeLock <= 15 days);\n', '        spawnRate = _spawnRate;\n', '        withdrawRate = _withdrawRate;\n', '        timeLock = _timeLock;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function totalValue() public view returns(uint256) {\n', '        return cUnifarm.balanceOf(address(this));\n', '    }\n', '\n', '    function deposit(uint256 amount) external returns (uint256 share) {\n', '        if(totalSupply() > 0) \n', '            share = totalSupply().mul(amount).div(totalValue());\n', '        else\n', '            share = amount;\n', '        _balances[msg.sender] = _balances[msg.sender].add(share);\n', '        depositTimeStamp[msg.sender] = now;\n', '        _totalSupply = _totalSupply.add(share);\n', '        require(cUnifarm.transferFrom(msg.sender, address(this), amount));\n', '    }\n', '\n', '    function withdraw(address to, uint256 share) external returns (uint256 amount) {\n', '        require(depositTimeStamp[msg.sender].add(timeLock) <= now, "locked");\n', '        amount = share.mul(totalValue()).div(totalSupply());\n', '        if(share < _totalSupply)\n', '            amount = amount.mul(withdrawRate).div(1e18);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(share);\n', '        _totalSupply = _totalSupply.sub(share);\n', '        require(cUnifarm.transfer(to, amount));\n', '    }\n', '\n', '    function rescueToken(ERC20 _token, uint256 _amount) onlyOwner public {\n', '        require(_token != ERC20(address(cUnifarm)));\n', '        _token.transfer(msg.sender, _amount);\n', '    }\n', '\n', '    function breed() external {\n', '        require(now / 1 days > today);\n', '        today += 1;\n', '\n', '        uint256 unifarmPairAmount = unifarm.balanceOf(address(cUnifarm));\n', '        uint256 tokenPairAmount = token.balanceOf(address(cUnifarm));\n', '        uint256 newUnifarm = unifarmPairAmount.mul(spawnRate).div(1e18);\n', '        uint256 amount = UniswapV2Library.getAmountOut(newUnifarm, unifarmPairAmount, tokenPairAmount);\n', '\n', '        unifarm.mint(address(cUnifarm), newUnifarm);\n', '        if(address(unifarm) < address(token))\n', '            cUnifarm.swap(0, amount, address(this), "");\n', '        else\n', '            cUnifarm.swap(amount, 0, address(this), "");\n', '        token.transfer(address(cUnifarm), amount);\n', '        unifarm.mint(address(cUnifarm), newUnifarm);\n', '        cUnifarm.mint(address(this));\n', '    }\n', '}']