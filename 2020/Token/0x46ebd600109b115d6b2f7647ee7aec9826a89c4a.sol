['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.4.25 <0.7.0;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'abstract contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract YZY is ERC20Detailed {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  address[] internal _tokenHolders;\n', '\n', '  string constant tokenName = "YZY Art Fund";\n', '  string constant tokenSymbol = "YZY";\n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 _totalSupply = 1100000000000000000000000;\n', '  uint256 _minSupply = 111111111000000000000000;\n', '  uint256 public burnPercent = 1000;\n', '  uint256 public rewardPercent = 1000;\n', '  uint256 private _basePercent = 1000;\n', '\n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    _mint(msg.sender, _totalSupply);\n', '  }\n', '\n', '  function totalSupply() override public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) override public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function allowance(address owner, address spender) override public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) override public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    if (_totalSupply <= _minSupply) {\n', '      _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '      _balances[to] = _balances[to].add(value);\n', '\n', '      emit Transfer(msg.sender, to, value);\n', '    } else {\n', '      (uint256 tokensToBurn, uint256 tokensToReward) = burnAndReward(value);\n', '      uint256 tokensToTransfer = value.sub(tokensToBurn);\n', '      tokensToTransfer = tokensToTransfer.sub(tokensToReward);\n', '\n', '      _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '      _balances[to] = _balances[to].add(tokensToTransfer);\n', '\n', '      if (_balances[msg.sender] == 0) {\n', '        _removeTokenHolder(msg.sender);\n', '      }\n', '\n', '      (bool isNewholder, ) = _isTokenHolder(to);\n', '      if (!isNewholder) _tokenHolders.push(to);\n', '\n', '      _totalSupply = _totalSupply.sub(tokensToBurn);\n', '      _totalSupply = _totalSupply.sub(tokensToReward);\n', '\n', '      emit Transfer(msg.sender, to, tokensToTransfer);\n', '      emit Transfer(msg.sender, address(0), tokensToBurn);\n', '\n', '      _distributeReward(msg.sender, to, tokensToReward);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) override public returns (bool) {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    if (_totalSupply <= _minSupply) {\n', '      _balances[from] = _balances[from].sub(value);\n', '      _balances[to] = _balances[to].add(value);\n', '      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '      emit Transfer(from, to, value);\n', '    } else {\n', '      (uint256 tokensToBurn, uint256 tokensToReward) = burnAndReward(value);\n', '      uint256 tokensToTransfer = value.sub(tokensToBurn);\n', '      tokensToTransfer = tokensToTransfer.sub(tokensToReward);\n', '\n', '      _balances[from] = _balances[from].sub(value);\n', '      _balances[to] = _balances[to].add(tokensToTransfer);\n', '\n', '      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '      if (_balances[from] == 0) {\n', '        _removeTokenHolder(from);\n', '      }\n', '\n', '      (bool isNewholder, ) = _isTokenHolder(to);\n', '      if (!isNewholder) _tokenHolders.push(to);\n', '\n', '      _totalSupply = _totalSupply.sub(tokensToBurn);\n', '      _totalSupply = _totalSupply.sub(tokensToReward);\n', '\n', '      emit Transfer(from, to, tokensToTransfer);\n', '      emit Transfer(from, address(0), tokensToBurn);\n', '\n', '      _distributeReward(from, to, tokensToReward);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 value) override public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function upAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function burnAndReward(uint256 value) public view returns (uint256, uint256)  {\n', '    uint256 roundValue = value.ceil(_basePercent);\n', '    uint256 burnValue = roundValue.mul(burnPercent).div(100000);\n', '    uint256 rewardValue = roundValue.mul(rewardPercent).div(100000);\n', '    return (burnValue, rewardValue);\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    _balances[account] = _balances[account].add(amount);\n', '    _tokenHolders.push(account);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  function _removeTokenHolder(address _holder) internal {\n', '    (bool isHolder, uint256 s) = _isTokenHolder(_holder);\n', '    if (isHolder) {\n', '      _tokenHolders[s] = _tokenHolders[_tokenHolders.length - 1];\n', '      _tokenHolders.pop();\n', '    }\n', '  }\n', '\n', '  function _isTokenHolder(address _address) internal view returns(bool, uint256)\n', '  {\n', '      for (uint256 s = 0; s < _tokenHolders.length; s += 1){\n', '          if (_address == _tokenHolders[s]) return (true, s);\n', '      }\n', '      return (false, 0);\n', '  }\n', '\n', '  function _distributeReward(address from, address to, uint256 value) internal {\n', '    uint256 _totalReward = 0;\n', '    uint256 _sumBalance = _totalSupply.sub(_balances[from]);\n', '    _sumBalance = _totalSupply.sub(_balances[to]);\n', '    for (uint256 s = 0; s < _tokenHolders.length; s += 1) {\n', '      address _holder = _tokenHolders[s];\n', '      if (_holder != from && _holder != to) {\n', '        uint256 _reward = _balances[_holder].mul(value);\n', '        _reward = _reward.div(_sumBalance);\n', '        _balances[_holder] = _balances[_holder].add(_reward);\n', '        _totalReward = _totalReward.add(_reward);\n', '\n', '        emit Transfer(address(0), _holder, _reward);\n', '      }\n', '    }\n', '    _totalSupply = _totalSupply.add(_totalReward);\n', '  }\n', '}']