['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >0.6.0;\n', '\n', '\n', 'contract Token {\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {}\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){}\n', '}\n', '\n', '\n', 'contract Burnamint {\n', '\n', '    mapping (address => bool) private admins;\n', '\n', '    mapping (address => mapping (address => uint256)) private burnamintable;\n', '\n', '    address public owner;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    event BurnaMint(address indexed _oldToken, address indexed _newToken, address indexed _address, uint256 _oldValue, uint256 newValue);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admins[msg.sender] = true;\n', '    }\n', '\n', '    function addAdmin(address _admin) external onlyOwner{\n', '        admins[_admin] = true;\n', '    }\n', '\n', '    function removeAdmin(address _admin) external onlyOwner{\n', '        admins[_admin] = false;\n', '    }\n', '\n', '    function isAdmin(address _admin) external view returns(bool _isAdmin){\n', '        return admins[_admin];\n', '    }\n', '\n', '    function addBurnamintable(address _oldContractAddress, address _newContractAddress, uint256 _ratio)\n', '    external\n', '    onlyAdmin\n', '    returns (bool success){\n', '        require(burnamintable[_oldContractAddress][_newContractAddress] == 0, "Tokens are not burnamintables");\n', '        burnamintable[_oldContractAddress][_newContractAddress] = _ratio;\n', '        return true;\n', '    }\n', '\n', '    function burnamint(address _oldContractAddress, address _newContractAddress, address _receiver, uint256 _amount)\n', '    external returns(bool success){\n', '        uint256 ratio = burnamintable[_oldContractAddress][_newContractAddress];\n', '        require(ratio > 0, "Tokens are not burnamintables");\n', '        Token oldToken = Token(_oldContractAddress);\n', '        require(oldToken.transferFrom(msg.sender, address(this), _amount)); // use safetransfer from\n', '        (Token(_newContractAddress)).transfer(_receiver, _amount/ratio);\n', '        emit BurnaMint(_oldContractAddress, _newContractAddress, _receiver, _amount, _amount/ratio);\n', '        return true;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender], "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function withdrawToken(address _token, address _to, uint256 _value) external onlyOwner returns (bool success){\n', '        Token(_token).transfer(_to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function withdraw(address payable _to, uint256 _value) external onlyOwner returns (bool success){\n', '        _to.transfer(_value);\n', '        return true;\n', '    }\n', '\n', '    function destroy(address payable _to) external onlyOwner {\n', '        selfdestruct(_to);\n', '    }\n', '}']