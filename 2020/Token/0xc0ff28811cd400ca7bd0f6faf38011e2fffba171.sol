['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract Bitdex is StandardToken  {\n', '    string public name;                  \n', '    uint8 public decimals;               \n', '    string public symbol;                \n', '    address public contractOwner;  \n', '    uint256 public tokenPerOneETH; // how many token = 1 ethereum\n', '    uint256 public timeUnlockToken; // lock all token  5 years\n', '    uint256 public lockToken;\n', '    constructor() public {\n', '        totalSupply = 100000000000000000000000000;    \n', '        lockToken = 61000000000000000000000000;\n', '        name = "Bitdex Finance";                                   \n', '        decimals = 18;                            \n', '        symbol = "BDEX";    \n', '        tokenPerOneETH = 4000;\n', '        timeUnlockToken =  now +  5 years; // Lock 5 year\n', '        contractOwner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '        balances[address(this)] = totalSupply;\n', '        Transfer(address(0),address(this), totalSupply);\n', '    }\n', '    \n', '    function () public  payable {\n', '        require(msg.value > 0);\n', '        if(msg.value > 0){\n', '        StandardToken(address(this)).transfer(msg.sender , msg.value * tokenPerOneETH);\n', '        }\n', '    }\n', '    function  ownerWithdrawToken(address _addr , uint256 _value) public returns (bool ){\n', '       require(msg.sender == contractOwner);\n', '       _value = _value * 1000000000000000000;\n', '       if(msg.sender == contractOwner &&  now >= timeUnlockToken){\n', '          StandardToken(address(this)).transfer(_addr , _value );\n', '            return true;         \n', '       }else{\n', '        if(msg.sender == contractOwner){\n', '            if((balanceOf(address(this))  - _value) >=  lockToken  ){\n', '             StandardToken(address(this)).transfer(_addr , _value );\n', '               return true;\n', '            }else{\n', '                return false;\n', '            }\n', '        }else{\n', '            return false;\n', '        }   \n', '           \n', '       }\n', '       \n', '    } \n', '    function ownerWithdrawETH() public returns (bool ){\n', '        require(msg.sender == contractOwner );\n', '        if(msg.sender == contractOwner ){\n', '            uint256 bal = address(this).balance;\n', '            address(contractOwner).transfer(bal);   \n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }    \n', '    function setTokenPerETH(uint256 _value) public returns (bool ){\n', '        require(msg.sender == contractOwner );\n', '        if(msg.sender == contractOwner){\n', '        tokenPerOneETH = _value;  \n', '        return true;\n', '        }else{\n', '        return false;\n', '        }\n', '    }\n', '}']