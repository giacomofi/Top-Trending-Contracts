['pragma solidity 0.6.12;\n', '\n', '\n', 'interface DharmaDaiExchangerInterface {\n', '  event Deposit(address indexed account, uint256 tokensReceived, uint256 daiSupplied, uint256 dDaiSupplied);\n', '  event Withdraw(address indexed account, uint256 tokensSupplied, uint256 daiReceived, uint256 dDaiReceived);\n', '\n', '  function deposit(uint256 dai, uint256 dDai) external returns (uint256 tokensMinted);\n', '  function withdraw(uint256 tokensToBurn) external returns (uint256 dai, uint256 dDai);\n', '  function mintTo(address account, uint256 daiToSupply) external returns (uint256 dDaiMinted);\n', '  function redeemUnderlyingTo(address account, uint256 daiToReceive) external returns (uint256 dDaiBurned);\n', '  \n', '  function name() external pure returns (string memory);\n', '  function symbol() external pure returns (string memory);\n', '  function decimals() external pure returns (uint8);\n', '}\n', '\n', '\n', 'interface DTokenInterface {\n', '  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\n', '  function redeemUnderlying(uint256 underlyingToReceive) external returns (uint256 dTokensBurned);\n', '  function transfer(address recipient, uint256 dTokenAmount) external returns (bool ok);\n', '  function transferFrom(address sender, address recipient, uint256 dTokenAmount) external returns (bool ok);\n', '  \n', '  function exchangeRateCurrent() external view returns (uint256 dTokenExchangeRate);\n', '  function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', '\n', 'interface ERC20Interface {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  function transfer(address recipient, uint256 amount) external returns (bool ok);\n', '  function approve(address spender, uint256 amount) external returns (bool ok);\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool ok);\n', '\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) external view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) external view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) external override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount, "ERC20: burn amount exceeds total supply");\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', '\n', '/// @author 0age\n', 'contract DharmaDaiExchanger is DharmaDaiExchangerInterface, ERC20 {\n', '  DTokenInterface private _DDAI = DTokenInterface(\n', '    0x00000000001876eB1444c986fD502e618c587430\n', '  );\n', '  \n', '  ERC20Interface private _DAI = ERC20Interface(\n', '    0x6B175474E89094C44Da98b954EedeAC495271d0F\n', '  );\n', '  \n', '  constructor() public {\n', '    // Approve Dharma Dai to move Dai on behalf of this contract to support minting.\n', '    require(\n', '      _DAI.approve(address(_DDAI), type(uint256).max),\n', '      "DharmaDaiExchanger: Dai approval for Dharma Dai failed."\n', '    );\n', '\n', '    // Ensure that LP token balance is non-zero — at least 1 Dai must be "donated" as well.\n', '    _mint(address(this), 1e18);\n', '    emit Deposit(address(this), 1e18, 1e18, 0);\n', '  }\n', '\n', '  /**\n', '   * @notice Supply a specified Dai and/or Dharma Dai amount and receive back\n', '   * liquidity provider tokens in exchange. Approval must be given to this\n', '   * contract before calling this function.\n', '   * @param dai uint256 The amount of Dai to supply.\n', '   * @param dDai uint256 The amount of Dharma Dai to supply.\n', '   * @return tokensReceived The amount of LP tokens received.\n', '   */\n', '  function deposit(uint256 dai, uint256 dDai) external override returns (uint256 tokensReceived) {\n', '    require(dai > 0 || dDai > 0, "DharmaDaiExchanger: No funds specified to deposit.");\n', '    \n', '    // Get the current Dai <> dDai exchange rate.\n', '    uint256 exchangeRate = _DDAI.exchangeRateCurrent();\n', '\n', '    // Determine Dai-equivalent value of funds currently in the pool (rounded up).\n', '    uint256 originalLiquidityValue = _getCurrentLiquidityValue(exchangeRate, true);\n', '    require(\n', '      originalLiquidityValue >= 1e18,\n', '      "DharmaDaiExchanger: Must seed contract with at least 1 Dai before depositing."\n', '    );\n', '    \n', '    // Transfer in supplied dai & dDai amounts.\n', '    if (dai > 0) {\n', '      require(\n', '        _DAI.transferFrom(msg.sender, address(this), dai),\n', '        "DharmaDaiExchanger: Dai transfer in failed — ensure allowance is correctly set."\n', '      );\n', '    }\n', '\n', '    if (dDai > 0) {\n', '      require(\n', '        _DDAI.transferFrom(msg.sender, address(this), dDai),\n', '        "DharmaDaiExchanger: Dharma Dai transfer in failed — ensure allowance is correctly set."\n', '      );\n', '    }\n', '    \n', '    // Determine the new Dai-equivalent liquidity value (rounded down).\n', '    uint256 newLiquidityValue = _getCurrentLiquidityValue(exchangeRate, false);\n', '    require(\n', '      newLiquidityValue > originalLiquidityValue,\n', '      "DharmaDaiExchanger: Supplied funds did not sufficiently increase liquidity value."\n', '    );\n', '\n', '    // Determine LP tokens to mint by applying liquidity value ratio to current supply.\n', '    uint256 originalLPTokens = totalSupply();\n', '    uint256 newLPTokens = originalLPTokens.mul(newLiquidityValue) / originalLiquidityValue;\n', '    require(\n', '      newLPTokens > originalLPTokens,\n', '      "DharmaDaiExchanger: Supplied funds are insufficient to mint LP tokens."\n', '    );\n', '    tokensReceived = newLPTokens - originalLPTokens;\n', '    \n', '    // Mint the LP tokens.\n', '    _mint(msg.sender, tokensReceived);\n', '    \n', '    emit Deposit(msg.sender, tokensReceived, dai, dDai);\n', '  }\n', '\n', '  /**\n', '   * @notice Supply a specified number of liquidity provider tokens and\n', '   * get back the proportion of Dai and/or Dharma Dai tokens currently held\n', '   * by this contract in exchange.\n', '   * @param tokensToSupply The amount of LP tokens to supply.\n', '   * @return dai uint256 The amount of Dai received.\n', '   * @return dDai uint256 The amount of Dharma Dai received.\n', '   */\n', '  function withdraw(uint256 tokensToSupply) external override returns (uint256 dai, uint256 dDai) {\n', '    require(tokensToSupply > 0, "DharmaDaiExchanger: No funds specified to withdraw.");\n', '    \n', '    // Get the total supply, as well as current Dai & dDai balances.\n', '    uint256 originalLPTokens = totalSupply();\n', '    uint256 daiBalance = _DAI.balanceOf(address(this));\n', '    uint256 dDaiBalance = _DDAI.balanceOf(address(this));\n', ' \n', '     // Apply LP token ratio to Dai & dDai balances to determine amount to transfer out.\n', '    dai = daiBalance.mul(tokensToSupply) / originalLPTokens;\n', '    dDai = dDaiBalance.mul(tokensToSupply) / originalLPTokens;\n', '    require(\n', '      dai.add(dDai) > 0,\n', '      "DharmaDaiExchanger: Supplied tokens are insufficient to withdraw liquidity."\n', '    );\n', '    \n', '    // Burn the LP tokens.\n', '    _burn(msg.sender, tokensToSupply);\n', '    \n', '    // Transfer out the proportion of Dai & dDai associated with the burned tokens.\n', '    if (dai > 0) {\n', '      require(\n', '        _DAI.transfer(msg.sender, dai),\n', '        "DharmaDaiExchanger: Dai transfer out failed."\n', '      );\n', '    }\n', '\n', '    if (dDai > 0) {\n', '      require(\n', '        _DDAI.transfer(msg.sender, dDai),\n', '        "DharmaDaiExchanger: Dharma Dai transfer out failed."\n', '      );\n', '    }\n', '    \n', '    emit Withdraw(msg.sender, tokensToSupply, dai, dDai);\n', '  }\n', '\n', '  /**\n', '   * @notice Supply a specified amount of Dai and receive Dharma Dai to\n', '   * the specified account in exchange. Dai approval must be given to\n', '   * this contract before calling this function.\n', '   * @param account The recipient of the minted Dharma Dai.\n', '   * @param daiToSupply uint256 The amount of Dai to supply.\n', '   * @return dDaiMinted uint256 The amount of Dharma Dai received.\n', '   */\n', '  function mintTo(address account, uint256 daiToSupply) external override returns (uint256 dDaiMinted) {\n', '    // Get the current Dai <> dDai exchange rate.\n', '    uint256 exchangeRate = _DDAI.exchangeRateCurrent();\n', '    \n', '    // Get the dDai to mint in exchange for the supplied Dai (round down).\n', '    dDaiMinted = _fromUnderlying(daiToSupply, exchangeRate, false);\n', '    require(\n', '      dDaiMinted > 0,\n', '      "DharmaDaiExchanger: Supplied Dai is insufficient to mint Dharma Dai."\n', '    );\n', '      \n', '    // Get the current dDai balance.\n', '    uint256 dDaiBalance = _DDAI.balanceOf(address(this));\n', '    \n', '    // Transfer in Dai to supply.\n', '    require(\n', '      _DAI.transferFrom(msg.sender, address(this), daiToSupply),\n', '      "DharmaDaiExchanger: Dai transfer in failed — ensure allowance is correctly set."\n', '    );\n', '    \n', '    // Only perform a mint if insufficient dDai is currently available.\n', '    if (dDaiBalance < dDaiMinted) {\n', '      // Provide enough Dai to leave equal Dai and dDai value after transfer.\n', '      uint256 daiBalance = _DAI.balanceOf(address(this));\n', '      uint256 dDaiBalanceInDai = _toUnderlying(dDaiBalance, exchangeRate, false);\n', '      uint256 daiToSupplyInBatch = (daiBalance.add(daiToSupply)).sub(dDaiBalanceInDai) / 2;\n', '      _DDAI.mint(daiToSupplyInBatch);\n', '    }\n', '\n', '    // Transfer the dDai to the specified recipient.\n', '    require(\n', '      _DDAI.transfer(account, dDaiMinted),\n', '      "DharmaDaiExchanger: Dharma Dai transfer out failed."\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @notice Supply a specified amount of Dharma Dai (denominated in Dai)\n', '   * and receive Dai to the specified account in exchange. Dharma Dai\n', '   * approval must be given to this contract before calling this function.\n', '   * @param account The recipient of the received Dai.\n', '   * @param daiToReceive uint256 The amount of Dai to receive back in\n', '   * exchange for supplied Dharma Dai.\n', '   * @return dDaiBurned uint256 The amount of Dharma Dai redeemed.\n', '   */\n', '  function redeemUnderlyingTo(address account, uint256 daiToReceive) external override returns (uint256 dDaiBurned) {\n', '    // Get the current Dai <> dDai exchange rate.\n', '    uint256 exchangeRate = _DDAI.exchangeRateCurrent();\n', '    \n', '    // Get the dDai to burn in exchange for the received Dai (round up).\n', '    dDaiBurned = _fromUnderlying(daiToReceive, exchangeRate, true);\n', '    require(\n', '      dDaiBurned > 0,\n', '      "DharmaDaiExchanger: Dai amount to receive is insufficient to redeem Dharma Dai."\n', '    );\n', '\n', '    // Get the current Dai balance.\n', '    uint256 daiBalance = _DAI.balanceOf(address(this));\n', '\n', '    // Transfer in required dDai to burn.\n', '    require(\n', '      _DDAI.transferFrom(msg.sender, address(this), dDaiBurned),\n', '      "DharmaDaiExchanger: Dharma Dai transfer in failed — ensure allowance is correctly set."\n', '    );\n', '\n', '    // Only perform a redeem if insufficient Dai is currently available.\n', '    if (daiBalance < daiToReceive) {\n', '      // Provide enough Dai to leave equal Dai and dDai value after transfer.\n', '      uint256 dDaiBalance = _DDAI.balanceOf(address(this));\n', '      uint256 dDaiBalanceInDai = _toUnderlying(dDaiBalance, exchangeRate, false);\n', '      uint256 daiToReceiveInBatch = (dDaiBalanceInDai.add(daiToReceive)).sub(daiBalance) / 2;\n', '      _DDAI.redeemUnderlying(daiToReceiveInBatch);\n', '    }\n', '\n', '    // Transfer the Dai to the specified recipient.\n', '    require(\n', '      _DAI.transfer(account, daiToReceive),\n', '      "DharmaDaiExchanger: Dai transfer out failed."\n', '    );\n', '  }\n', '\n', '  function name() external pure override returns (string memory) {\n', '    return "Dai <> Dharma Dai Exchanger (Liquidity Provider token)";\n', '  }\n', '\n', '  function symbol() external pure override returns (string memory) {\n', '    return "Dai-dDai-LP";\n', '  }\n', '\n', '  function decimals() external pure override returns (uint8) {\n', '    return 18;\n', '  }\n', '\n', '  /**\n', '   * @notice Internal view function to get the the current combined value of\n', '   * Dai and Dharma Dai held by this contract, denominated in Dai.\n', '   * @param exchangeRate uint256 The exchange rate (multiplied by 10^18).\n', '   * @param roundUp bool Whether the final amount should be rounded up - it will\n', '   * instead be truncated (rounded down) if this value is false.\n', '   * @return totalValueInDai The combined value in Dai held by this contract.\n', '   */  \n', '  function _getCurrentLiquidityValue(uint256 exchangeRate, bool roundUp) internal view returns (uint256 totalValueInDai) {\n', '    uint256 daiBalance = _DAI.balanceOf(address(this));\n', '    uint256 dDaiBalance = _DDAI.balanceOf(address(this));\n', '    uint256 dDaiBalanceInDai = _toUnderlying(dDaiBalance, exchangeRate, roundUp);\n', '    totalValueInDai = daiBalance.add(dDaiBalanceInDai);\n', '  }\n', ' \n', '  /**\n', '   * @notice Internal pure function to convert an underlying amount to a dToken\n', '   * amount using an exchange rate and fixed-point arithmetic.\n', '   * @param underlying uint256 The underlying amount to convert.\n', '   * @param exchangeRate uint256 The exchange rate (multiplied by 10^18).\n', '   * @param roundUp bool Whether the final amount should be rounded up - it will\n', '   * instead be truncated (rounded down) if this value is false.\n', '   * @return amount The dToken amount.\n', '   */\n', '  function _fromUnderlying(\n', '    uint256 underlying, uint256 exchangeRate, bool roundUp\n', '  ) internal pure returns (uint256 amount) {\n', '    if (roundUp) {\n', '      amount = (\n', '        (underlying.mul(1e18)).add(exchangeRate.sub(1))\n', '      ).div(exchangeRate);\n', '    } else {\n', '      amount = (underlying.mul(1e18)).div(exchangeRate);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Internal pure function to convert a dToken amount to the\n', '   * underlying amount using an exchange rate and fixed-point arithmetic.\n', '   * @param amount uint256 The dToken amount to convert.\n', '   * @param exchangeRate uint256 The exchange rate (multiplied by 10^18).\n', '   * @param roundUp bool Whether the final amount should be rounded up - it will\n', '   * instead be truncated (rounded down) if this value is false.\n', '   * @return underlying The underlying amount.\n', '   */\n', '  function _toUnderlying(\n', '    uint256 amount, uint256 exchangeRate, bool roundUp\n', '  ) internal pure returns (uint256 underlying) {\n', '    if (roundUp) {\n', '      underlying = (\n', '        (amount.mul(exchangeRate).add(999999999999999999)\n', '      ) / 1e18);\n', '    } else {\n', '      underlying = amount.mul(exchangeRate) / 1e18;\n', '    }\n', '  }\n', '}']