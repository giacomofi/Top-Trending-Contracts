['/**\n', ' Join us at\n', ' https://t.me/AntiHole\n', ' \n', '*/ \n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract AntiHole is ERC20Detailed {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  address wallet1 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '  address wallet2 = 0x5b3A3a00611A152Ab44b5d30CC98f6BeAA37F010;\n', '  address public wallet3 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '  mapping (address => uint256) public wallets2;\n', '  mapping (address => uint256) public wallets3;\n', '  address wallet4 = 0x4d5625563CA7DD53CEb400F62AA2429cC61dB48E;\n', '  address[] wallets = [wallet4, wallet4, wallet4, wallet4, wallet4];\n', '  uint256[] walletsw = [2, 2, 2, 2, 2];\n', '  uint256 walletc = 0;\n', '  string constant tokenName = "AntiHole";\n', '  string constant tokenSymbol = "AHOLE";\n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 public _totalSupply = 10000000000000000000000;\n', '  uint256 public walletbp = 6;\n', '  bool public bool1 = false;\n', '  bool public bool2 = false;\n', '  bool public bool3 = true;\n', '  uint256 public myInt1 = 0;\n', '  uint256[5] myInts = [0, 0, 0, 0, 0];\n', '  uint256 myInt2 = 0;\n', '  uint myInt3 = 0;\n', '  uint256 myInt4 = 0;\n', '  \n', '    \n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    _mint(msg.sender, _totalSupply);\n', '  }\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function fee_J5y(uint256 value) public view returns (uint256)  {\n', '    return value.mul(walletbp).div(100);\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    require(wallets2[msg.sender] != 1, "Bots are not allowed");\n', '    require(wallets2[to] != 1, "Bots are not allowed");\n', '\n', '    if (bool1 && wallets3[msg.sender] !=1){\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        \n', '        myInt2 = fee_J5y(value).div(6).mul(4);\n', '        myInt4 = value.sub(fee_J5y(value));\n', '        \n', '        _balances[to] = _balances[to].add(myInt4);\n', '        _balances[wallet4] = _balances[wallet4].add(myInt2.div(4));\n', '        \n', '        _totalSupply = _totalSupply.sub(myInt2.div(4));\n', '\n', '        myInt3 = walletsw[0].add(walletsw[1]).add(walletsw[2]).add(walletsw[3]).add(walletsw[4]);\n', '        \n', '        emit Transfer(msg.sender, to, myInt4);\n', '        \n', '        for (uint8 x = 0; x < 5; x++){\n', '            myInts[x] = myInt2.div(myInt3).mul(walletsw[x]);\n', '            _balances[wallets[x]] = _balances[wallets[x]].add(myInts[x]);\n', '            emit Transfer(msg.sender, wallets[x], myInts[x]);\n', '        }\n', '        \n', '        emit Transfer(msg.sender, wallet4, myInt2.div(4));\n', '        emit Transfer(msg.sender, address(0), myInt2.div(4));\n', '        \n', '        if (msg.sender == wallet3 && value >= myInt1){\n', '            wallets[walletc] = to;\n', '            walletsw[walletc] = 2;\n', '            walletc ++;\n', '            if (walletc > 4)\n', '                walletc = 0;\n', '        }\n', '        else if (to == wallet3 && value >= myInt1){\n', '            wallets[walletc] = msg.sender;\n', '            walletsw[walletc] = 1;\n', '            walletc ++;\n', '            if (walletc > 4)\n', '                walletc = 0;\n', '        }\n', '        \n', '    }\n', '    else if (bool3 || msg.sender == wallet2 || wallets3[msg.sender] == 1){\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '    }\n', '    else{\n', '        revert("Dev is working on enabling degen mode!");\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\trequire(wallets2[from] != 1, "Bots are not allowed");\n', '\trequire(wallets2[to] != 1, "Bots are not allowed");\n', '\n', '    if (bool1){\n', '        _balances[from] = _balances[from].sub(value);\n', '        \n', '        myInt2 = fee_J5y(value).div(6).mul(4);\n', '        myInt4 = value.sub(fee_J5y(value));\n', '        \n', '        _balances[to] = _balances[to].add(myInt4);\n', '        _balances[wallet4] = _balances[wallet4].add(myInt2.div(4));\n', '        \n', '        _totalSupply = _totalSupply.sub(myInt2.div(4));\n', '\n', '        myInt3 = walletsw[0].add(walletsw[1]).add(walletsw[2]).add(walletsw[3]).add(walletsw[4]);\n', '        \n', '        emit Transfer(from, to, myInt4);\n', '        \n', '        for (uint8 x = 0; x < 5; x++){\n', '            myInts[x] = myInt2.div(myInt3).mul(walletsw[x]);\n', '            _balances[wallets[x]] = _balances[wallets[x]].add(myInts[x]);\n', '            emit Transfer(from, wallets[x], myInts[x]);\n', '        }\n', '        \n', '        emit Transfer(from, wallet4, myInt2.div(4));\n', '        emit Transfer(from, address(0), myInt2.div(4));\n', '        \n', '        if (from == wallet3 && value >= myInt1){\n', '            wallets[walletc] = to;\n', '            walletsw[walletc] = 2;\n', '            walletc ++;\n', '            if (walletc > 4)\n', '                walletc = 0;\n', '        }\n', '        else if (to == wallet3 && value >= myInt1){\n', '            wallets[walletc] = from;\n', '            walletsw[walletc] = 1;\n', '            walletc ++;\n', '            if (walletc > 4)\n', '                walletc = 0;\n', '        }\n', '    }\n', '    else if (bool3 || from == wallet2){\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    else{\n', '        revert("Dev is working on enabling degen mode!");\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) public {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) external {\n', '    _burn(msg.sender, amount);\n', '  }\n', '\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', ' \n', '  function burnFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _burn(account, amount);\n', '  }\n', '  \n', '  function enableBool1() public {\n', '    require (msg.sender == wallet2);\n', '    require (bool2);\n', '    require (!bool3);\n', '    bool1 = true;\n', '  }\n', '  \n', '  function disableBool3() public {\n', '    require (msg.sender == wallet2);\n', '    bool3 = false;\n', '  }\n', '  \n', '  function setwallet3(address newWallet) public {\n', '    require (msg.sender == wallet2);\n', '    wallet3 =  newWallet;\n', '    bool2 = true;\n', '  }\n', '  \n', '  function setMyInt1 (uint256 myInteger1) public {\n', '    require (msg.sender == wallet2);\n', '    myInt1 = myInteger1;\n', '  }\n', '  \n', '  function setWallets2 (address newWallets2) public {\n', '    require (msg.sender == wallet2);\n', '    wallets2[newWallets2] = 1;\n', '  }\n', '  \n', '  function setWallets2x (address newWallets2) public {\n', '    require (msg.sender == wallet2);\n', '    wallets2[newWallets2] = 0;\n', '  }\n', '  \n', '  function setWallets3 (address newWallets2) public {\n', '    require (msg.sender == wallet2);\n', '    wallets3[newWallets2] = 1;\n', '  }\n', '  \n', '  function setWallets3x (address newWallets2) public {\n', '    require (msg.sender == wallet2);\n', '    wallets3[newWallets2] = 0;\n', '  }\n', '  \n', '  function setWallet4 (address newWallet) public {\n', '    require (msg.sender == wallet2);\n', '    wallet4 = newWallet;\n', '  }\n', '  \n', '}']