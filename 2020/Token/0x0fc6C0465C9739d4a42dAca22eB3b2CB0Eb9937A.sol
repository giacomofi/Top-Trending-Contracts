['// File: contracts/thirdParty/ECDSA.sol\n', '\n', '// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\n', '// Line 60 added to original source in accordance with recommendation on accepting signatures with 0/1 for v\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n', '            revert("ECDSA: invalid signature \'s\' value");\n', '        }\n', '\n', '        if (v < 27) v += 27;\n', '\n', '        if (v != 27 && v != 28) {\n', '            revert("ECDSA: invalid signature \'v\' value");\n', '        }\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC777.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '// As defined in https://eips.ethereum.org/EIPS/eip-777\n', 'interface IERC777 {\n', '  event Sent(address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data,\n', '      bytes operatorData);\n', '  event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n', '  event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n', '  event AuthorizedOperator(address indexed operator,address indexed holder);\n', '  event RevokedOperator(address indexed operator, address indexed holder);\n', '\n', '  function name() external view returns (string memory);\n', '  function symbol() external view returns (string memory);\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address holder) external view returns (uint256);\n', '  function granularity() external view returns (uint256);\n', '  function defaultOperators() external view returns (address[] memory);\n', '  function isOperatorFor(address operator, address holder) external view returns (bool);\n', '  function authorizeOperator(address operator) external;\n', '  function revokeOperator(address operator) external;\n', '  function send(address to, uint256 amount, bytes calldata data) external;\n', '  function operatorSend(address from, address to, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n', '  function burn(uint256 amount, bytes calldata data) external;\n', '  function operatorBurn( address from, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '// As described in https://eips.ethereum.org/EIPS/eip-20\n', 'interface IERC20 {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  function name() external view returns (string memory); // optional method - see eip spec\n', '  function symbol() external view returns (string memory); // optional method - see eip spec\n', '  function decimals() external view returns (uint8); // optional method - see eip spec\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address owner) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/thirdParty/interfaces/IERC1820Registry.sol\n', '\n', '// From open https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/introspection/IERC1820Registry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the global ERC1820 Registry, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n', ' * implementers for interfaces in this registry, as well as query support.\n', ' *\n', ' * Implementers may be shared by multiple accounts, and can also implement more\n', ' * than a single interface for each account. Contracts can implement interfaces\n', ' * for themselves, but externally-owned accounts (EOA) must delegate this to a\n', ' * contract.\n', ' *\n', ' * {IERC165} interfaces can also be queried via the registry.\n', ' *\n', ' * For an in-depth explanation and source code analysis, see the EIP text.\n', ' */\n', 'interface IERC1820Registry {\n', '    /**\n', '     * @dev Sets `newManager` as the manager for `account`. A manager of an\n', '     * account is able to set interface implementers for it.\n', '     *\n', '     * By default, each account is its own manager. Passing a value of `0x0` in\n', '     * `newManager` will reset the manager to this initial state.\n', '     *\n', '     * Emits a {ManagerChanged} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     */\n', '    function setManager(address account, address newManager) external;\n', '\n', '    /**\n', '     * @dev Returns the manager for `account`.\n', '     *\n', '     * See {setManager}.\n', '     */\n', '    function getManager(address account) external view returns (address);\n', '\n', '    /**\n', "     * @dev Sets the `implementer` contract as ``account``'s implementer for\n", '     * `interfaceHash`.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     * The zero address can also be used in `implementer` to remove an old one.\n', '     *\n', '     * See {interfaceHash} to learn how these are created.\n', '     *\n', '     * Emits an {InterfaceImplementerSet} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n', '     * end in 28 zeroes).\n', '     * - `implementer` must implement {IERC1820Implementer} and return true when\n', '     * queried for support, unless `implementer` is the caller. See\n', '     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n', '     */\n', '    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n', '\n', '    /**\n', '     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n', '     * implementer is registered, returns the zero address.\n', '     *\n', '     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n', '     * zeroes), `account` will be queried for support of it.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     */\n', '    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n', '     * corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n', '     */\n', '    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n', '\n', '    /**\n', '     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n', '     *  @param account Address of the contract for which to update the cache.\n', '     *  @param interfaceId ERC165 interface for which to update the cache.\n', '     */\n', '    function updateERC165Cache(address account, bytes4 interfaceId) external;\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not.\n', '     *  If the result is not cached a direct lookup on the contract address is performed.\n', '     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n', '     *  {updateERC165Cache} with the contract address.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n', '\n', '    event ManagerChanged(address indexed account, address indexed newManager);\n', '}\n', '\n', '// File: contracts/interfaces/IERC777Sender.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', "// As defined in the 'ERC777TokensSender And The tokensToSend Hook' section of https://eips.ethereum.org/EIPS/eip-777\n", 'interface IERC777Sender {\n', '  function tokensToSend(address operator, address from, address to, uint256 amount, bytes calldata data,\n', '      bytes calldata operatorData) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC777Recipient.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', "// As defined in the 'ERC777TokensRecipient And The tokensReceived Hook' section of https://eips.ethereum.org/EIPS/eip-777\n", 'interface IERC777Recipient {\n', '  function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata data,\n', '      bytes calldata operatorData) external;\n', '}\n', '\n', '// File: contracts/thirdParty/SafeMath.sol\n', '\n', '// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/LToken.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', '\n', '\n', '\n', 'struct TokenState {\n', '  uint256 totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) approvals;\n', '  mapping(address => mapping(address => bool)) authorizedOperators;\n', '  address[] defaultOperators;\n', '  mapping(address => bool) defaultOperatorIsRevoked;\n', '  mapping(address => bool) minters;\n', '}\n', '\n', 'library LToken {\n', '  using SafeMath for uint256;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Sent(address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data,\n', '      bytes operatorData);\n', '  event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n', '  event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n', '  event AuthorizedOperator(address indexed operator, address indexed holder);\n', '  event RevokedOperator(address indexed operator, address indexed holder);\n', '\n', '  // Universal address as defined in Registry Contract Address section of https://eips.ethereum.org/EIPS/eip-1820\n', '  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '  // precalculated hashes - see https://github.com/ethereum/solidity/issues/4024\n', '  // keccak256("ERC777TokensSender")\n', '  bytes32 constant internal ERC777_TOKENS_SENDER_HASH = 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n', '  // keccak256("ERC777TokensRecipient")\n', '  bytes32 constant internal ERC777_TOKENS_RECIPIENT_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n', '\n', '  modifier checkSenderNotOperator(address _operator) {\n', '    require(_operator != msg.sender, "Cannot be operator for self");\n', '    _;\n', '  }\n', '\n', '  function initState(TokenState storage _tokenState, uint8 _decimals, uint256 _initialSupply)\n', '    external\n', '  {\n', '    _tokenState.defaultOperators.push(address(this));\n', '    _tokenState.totalSupply = _initialSupply.mul(10**uint256(_decimals));\n', '    _tokenState.balances[msg.sender] = _tokenState.totalSupply;\n', '  }\n', '\n', '  function transferFrom(TokenState storage _tokenState, address _from, address _to, uint256 _value)\n', '    external\n', '  {\n', '    _tokenState.approvals[_from][msg.sender] = _tokenState.approvals[_from][msg.sender].sub(_value, "Amount not approved");\n', '    doSend(_tokenState, msg.sender, _from, _to, _value, "", "", false);\n', '  }\n', '\n', '  function approve(TokenState storage _tokenState, address _spender, uint256 _value)\n', '    external\n', '  {\n', '    require(_spender != address(0), "Cannot approve to zero address");\n', '    _tokenState.approvals[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function authorizeOperator(TokenState storage _tokenState, address _operator)\n', '    checkSenderNotOperator(_operator)\n', '    external\n', '  {\n', '    if (_operator == address(this))\n', '      _tokenState.defaultOperatorIsRevoked[msg.sender] = false;\n', '    else\n', '      _tokenState.authorizedOperators[_operator][msg.sender] = true;\n', '    emit AuthorizedOperator(_operator, msg.sender);\n', '  }\n', '\n', '  function revokeOperator(TokenState storage _tokenState, address _operator)\n', '    checkSenderNotOperator(_operator)\n', '    external\n', '  {\n', '    if (_operator == address(this))\n', '      _tokenState.defaultOperatorIsRevoked[msg.sender] = true;\n', '    else\n', '      _tokenState.authorizedOperators[_operator][msg.sender] = false;\n', '    emit RevokedOperator(_operator, msg.sender);\n', '  }\n', '\n', '  function authorizeMinter(TokenState storage _tokenState, address _minter)\n', '    external\n', '  {\n', '    _tokenState.minters[_minter] = true;\n', '  }\n', '\n', '  function revokeMinter(TokenState storage _tokenState, address _minter)\n', '    external\n', '  {\n', '    _tokenState.minters[_minter] = false;\n', '  }\n', '\n', '  function doMint(TokenState storage _tokenState, address _to, uint256 _amount)\n', '    external\n', '  {\n', '    assert(_to != address(0));\n', '\n', '    _tokenState.totalSupply = _tokenState.totalSupply.add(_amount);\n', '    _tokenState.balances[_to] = _tokenState.balances[_to].add(_amount);\n', '\n', '    // From ERC777: The token contract MUST call the tokensReceived hook after updating the state.\n', '    receiveHook(address(this), address(0), _to, _amount, "", "", true);\n', '\n', '    emit Minted(address(this), _to, _amount, "", "");\n', '    emit Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  function doBurn(TokenState storage _tokenState, address _operator, address _from, uint256 _amount, bytes calldata _data,\n', '      bytes calldata _operatorData)\n', '    external\n', '  {\n', '    assert(_from != address(0));\n', '    // From ERC777: The token contract MUST call the tokensToSend hook before updating the state.\n', '    sendHook(_operator, _from, address(0), _amount, _data, _operatorData);\n', '\n', '    _tokenState.balances[_from] = _tokenState.balances[_from].sub(_amount, "Cannot burn more than balance");\n', '    _tokenState.totalSupply = _tokenState.totalSupply.sub(_amount);\n', '\n', '    emit Burned(_operator, _from, _amount, _data, _operatorData);\n', '    emit Transfer(_from, address(0), _amount);\n', '  }\n', '\n', '  function doSend(TokenState storage _tokenState, address _operator, address _from, address _to, uint256 _amount,\n', '      bytes memory _data, bytes memory _operatorData, bool _enforceERC777)\n', '    public\n', '  {\n', '    assert(_from != address(0));\n', '\n', '    require(_to != address(0), "Cannot send funds to 0 address");\n', '    // From ERC777: The token contract MUST call the tokensToSend hook before updating the state.\n', '    sendHook(_operator, _from, _to, _amount, _data, _operatorData);\n', '\n', '    _tokenState.balances[_from] = _tokenState.balances[_from].sub(_amount, "Amount exceeds available funds");\n', '    _tokenState.balances[_to] = _tokenState.balances[_to].add(_amount);\n', '\n', '    emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\n', '    emit Transfer(_from, _to, _amount);\n', '\n', '    // From ERC777: The token contract MUST call the tokensReceived hook after updating the state.\n', '    receiveHook(_operator, _from, _to, _amount, _data, _operatorData, _enforceERC777);\n', '  }\n', '\n', '  function receiveHook(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\n', '      bytes memory _operatorData, bool _enforceERC777)\n', '    public\n', '  {\n', '    address implementer = ERC1820_REGISTRY.getInterfaceImplementer(_to, ERC777_TOKENS_RECIPIENT_HASH);\n', '    if (implementer != address(0))\n', '      IERC777Recipient(implementer).tokensReceived(_operator, _from, _to, _amount, _data, _operatorData);\n', '    else if (_enforceERC777)\n', '      require(!isContract(_to), "Must be registered with ERC1820");\n', '  }\n', '\n', '  function sendHook(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\n', '      bytes memory _operatorData)\n', '    public\n', '  {\n', '    address implementer = ERC1820_REGISTRY.getInterfaceImplementer(_from, ERC777_TOKENS_SENDER_HASH);\n', '    if (implementer != address(0))\n', '      IERC777Sender(implementer).tokensToSend(_operator, _from, _to, _amount, _data, _operatorData);\n', '  }\n', '\n', '  function isContract(address _account)\n', '    private\n', '    view\n', '    returns (bool isContract_)\n', '  {\n', '    uint256 size;\n', '\n', '    assembly {\n', '      size := extcodesize(_account)\n', '    }\n', '\n', '    isContract_ = size != 0;\n', '  }\n', '}\n', '\n', '// File: contracts/Token.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Implements ERC777 with ERC20 as defined in https://eips.ethereum.org/EIPS/eip-777, with minting support.\n', ' * NOTE: Minting is internal only: derive from this contract according to usage.\n', ' */\n', 'contract Token is IERC777, IERC20 {\n', '\n', '  string private tokenName;\n', '  string private tokenSymbol;\n', '  uint8 constant private tokenDecimals = 18;\n', '  uint256 constant private tokenGranularity = 1;\n', '  TokenState public tokenState;\n', '\n', '  // Universal address as defined in Registry Contract Address section of https://eips.ethereum.org/EIPS/eip-1820\n', '  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '  // keccak256("ERC777Token")\n', '  bytes32 constant internal ERC777_TOKEN_HASH = 0xac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054;\n', '  // keccak256("ERC20Token")\n', '  bytes32 constant internal ERC20_TOKEN_HASH = 0xaea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a;\n', '\n', '  event AuthorizedMinter(address minter);\n', '  event RevokedMinter(address minter);\n', '\n', '  constructor(string memory _name, string memory _symbol, uint256 _initialSupply)\n', '    internal\n', '  {\n', '    require(bytes(_name).length != 0, "Needs a name");\n', '    require(bytes(_symbol).length != 0, "Needs a symbol");\n', '    tokenName = _name;\n', '    tokenSymbol = _symbol;\n', '    LToken.initState(tokenState, tokenDecimals, _initialSupply);\n', '\n', '    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKEN_HASH, address(this));\n', '    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC20_TOKEN_HASH, address(this));\n', '  }\n', '\n', '  modifier onlyOperator(address _holder) {\n', '    require(isOperatorFor(msg.sender, _holder), "Not an operator");\n', '    _;\n', '  }\n', '\n', '  modifier onlyMinter {\n', '    require(tokenState.minters[msg.sender], "onlyMinter");\n', '    _;\n', '  }\n', '\n', '  function name()\n', '    external\n', '    view\n', '    override(IERC777, IERC20)\n', '    returns (string memory name_)\n', '  {\n', '    name_ = tokenName;\n', '  }\n', '\n', '  function symbol()\n', '    external\n', '    view\n', '    override(IERC777, IERC20)\n', '    returns (string memory symbol_)\n', '  {\n', '    symbol_ = tokenSymbol;\n', '  }\n', '\n', '  function decimals()\n', '    external\n', '    view\n', '    override\n', '    returns (uint8 decimals_)\n', '  {\n', '    decimals_ = tokenDecimals;\n', '  }\n', '\n', '  function granularity()\n', '    external\n', '    view\n', '    override\n', '    returns (uint256 granularity_)\n', '  {\n', '    granularity_ = tokenGranularity;\n', '  }\n', '\n', '  function balanceOf(address _holder)\n', '    external\n', '    override(IERC777, IERC20)\n', '    view\n', '    returns (uint256 balance_)\n', '  {\n', '    balance_ = tokenState.balances[_holder];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value)\n', '    external\n', '    override\n', '    returns (bool success_)\n', '  {\n', '    doSend(msg.sender, msg.sender, _to, _value, "", "", false);\n', '    success_ = true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external\n', '    override\n', '    returns (bool success_)\n', '  {\n', '    LToken.transferFrom(tokenState, _from, _to, _value);\n', '    success_ = true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    external\n', '    override\n', '    returns (bool success_)\n', '  {\n', '    LToken.approve(tokenState, _spender, _value);\n', '    success_ = true;\n', '  }\n', '\n', '  function allowance(address _holder, address _spender)\n', '    external\n', '    view\n', '    override\n', '    returns (uint256 remaining_)\n', '  {\n', '    remaining_ = tokenState.approvals[_holder][_spender];\n', '  }\n', '\n', '  function defaultOperators()\n', '    external\n', '    view\n', '    override\n', '    returns (address[] memory)\n', '  {\n', '    return tokenState.defaultOperators;\n', '  }\n', '\n', '  function authorizeOperator(address _operator)\n', '    external\n', '    override\n', '  {\n', '    LToken.authorizeOperator(tokenState, _operator);\n', '  }\n', '\n', '  function revokeOperator(address _operator)\n', '    external\n', '    override\n', '  {\n', '    LToken.revokeOperator(tokenState, _operator);\n', '  }\n', '\n', '  function send(address _to, uint256 _amount, bytes calldata _data)\n', '    external\n', '    override\n', '  {\n', '    doSend(msg.sender, msg.sender, _to, _amount, _data, "", true);\n', '  }\n', '\n', '  function operatorSend(address _from, address _to, uint256 _amount, bytes calldata _data, bytes calldata _operatorData)\n', '    external\n', '    override\n', '    onlyOperator(_from)\n', '  {\n', '    doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\n', '  }\n', '\n', '  function burn(uint256 _amount, bytes calldata _data)\n', '    external\n', '    override\n', '  {\n', '    doBurn(msg.sender, msg.sender, _amount, _data, "");\n', '  }\n', '\n', '  function operatorBurn(address _from, uint256 _amount, bytes calldata _data, bytes calldata _operatorData)\n', '    external\n', '    override\n', '    onlyOperator(_from)\n', '  {\n', '    doBurn(msg.sender, _from, _amount, _data, _operatorData);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount)\n', '    external\n', '    onlyMinter\n', '  {\n', '    LToken.doMint(tokenState, _to, _amount);\n', '  }\n', '\n', '  function totalSupply()\n', '    external\n', '    view\n', '    override(IERC777, IERC20)\n', '    returns (uint256 totalSupply_)\n', '  {\n', '    totalSupply_ = tokenState.totalSupply;\n', '  }\n', '\n', '  function isOperatorFor(address _operator, address _holder)\n', '    public\n', '    view\n', '    override\n', '    returns (bool isOperatorFor_)\n', '  {\n', '    isOperatorFor_ = (_operator == _holder || tokenState.authorizedOperators[_operator][_holder]\n', '        || _operator == address(this) && !tokenState.defaultOperatorIsRevoked[_holder]);\n', '  }\n', '\n', '  function doSend(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\n', '      bytes memory _operatorData, bool _enforceERC777)\n', '    internal\n', '    virtual\n', '  {\n', '    LToken.doSend(tokenState, _operator, _from, _to, _amount, _data, _operatorData, _enforceERC777);\n', '  }\n', '\n', '  function doBurn(address _operator, address _from, uint256 _amount, bytes memory _data, bytes memory _operatorData)\n', '    internal\n', '  {\n', '    LToken.doBurn(tokenState, _operator, _from, _amount, _data, _operatorData);\n', '  }\n', '\n', '  function authorizeMinter(address _minter)\n', '    internal\n', '  {\n', '    LToken.authorizeMinter(tokenState, _minter);\n', '\n', '    emit AuthorizedMinter(_minter);\n', '  }\n', '\n', '  function revokeMinter(address _minter)\n', '    internal\n', '  {\n', '    LToken.revokeMinter(tokenState, _minter);\n', '\n', '    emit RevokedMinter(_minter);\n', '  }\n', '}\n', '\n', '// File: contracts/Owned.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'contract Owned {\n', '\n', '  address public owner = msg.sender;\n', '\n', '  event LogOwnershipTransferred(address indexed owner, address indexed newOwner);\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner, "Sender must be owner");\n', '    _;\n', '  }\n', '\n', '  function setOwner(address _owner)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(_owner != address(0), "Owner cannot be zero address");\n', '    emit LogOwnershipTransferred(owner, _owner);\n', '    owner = _owner;\n', '  }\n', '}\n', '\n', '// File: contracts/VOWToken.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', '\n', '\n', '/**\n', ' * ERC777/20 contract which also:\n', ' * - is owned\n', ' * - supports proxying of own tokens (only if signed correctly)\n', ' * - supports partner contracts, keyed by hash\n', ' * - supports minting (only by owner approved contracts)\n', ' * - has a USD price\n', ' */\n', 'contract VOWToken is Token, IERC777Recipient, Owned {\n', '\n', '  mapping (bytes32 => bool) public proxyProofs;\n', '  uint256[2] public usdRate;\n', '  address public usdRateSetter;\n', '  mapping(bytes32 => address payable) public partnerContracts;\n', '\n', '  // precalculated hash - see https://github.com/ethereum/solidity/issues/4024\n', '  // keccak256("ERC777TokensRecipient")\n', '  bytes32 constant internal ERC777_TOKENS_RECIPIENT_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n', '\n', '  event LogUSDRateSetterSet(address indexed usdRateSetter);\n', '  event LogUSDRateSet(uint256 numTokens, uint256 numUSD);\n', '  event LogProxiedTokens(address indexed from, address indexed to, uint256 amount, bytes data, uint256 nonce, bytes proof);\n', '  event LogPartnerContractSet(bytes32 indexed keyHash, address indexed partnerContract);\n', '  event LogMintPermissionSet(address indexed contractAddress, bool canMint);\n', '\n', '  constructor(string memory _name, string memory _symbol, uint256 _initialSupply, uint256[2] memory _initialUSDRate)\n', '    public\n', '    Token(_name, _symbol, _initialSupply)\n', '  {\n', '    doSetUSDRate(_initialUSDRate[0], _initialUSDRate[1]);\n', '\n', '    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKENS_RECIPIENT_HASH, address(this));\n', '  }\n', '\n', '  modifier onlyUSDRateSetter() {\n', '    require(msg.sender == usdRateSetter, "onlyUSDRateSetter");\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnTokens {\n', '    require(msg.sender == address(this), "onlyOwnTokens");\n', '    _;\n', '  }\n', '\n', '  modifier addressNotNull(address _address) {\n', '    require(_address != address(0), "Address cannot be null");\n', '    _;\n', '  }\n', '\n', '  function tokensReceived(address /* _operator */, address /* _from */, address /* _to */, uint256 _amount,\n', '      bytes calldata _data, bytes calldata /* _operatorData */)\n', '    external\n', '    override\n', '    onlyOwnTokens\n', '  {\n', '    (address from, address to, uint256 amount, bytes memory data, uint256 nonce, bytes memory proof) =\n', '        abi.decode(_data, (address, address, uint256, bytes, uint256, bytes));\n', '    checkProxying(from, to, amount, data, nonce, proof);\n', '\n', '    if (_amount != 0)\n', '      this.send(from, _amount, "");\n', '\n', '    this.operatorSend(from, to, amount, data, _data);\n', '\n', '    emit LogProxiedTokens(from, to, amount, data, nonce, proof);\n', '  }\n', '\n', '  function setPartnerContract(bytes32 _keyHash, address payable _partnerContract)\n', '    external\n', '    onlyOwner\n', '    addressNotNull(_partnerContract)\n', '  {\n', '    require(_keyHash != bytes32(0), "Missing key hash");\n', '    partnerContracts[_keyHash] = _partnerContract;\n', '\n', '    emit LogPartnerContractSet(_keyHash, _partnerContract);\n', '  }\n', '\n', '  function setUSDRateSetter(address _usdRateSetter)\n', '    external\n', '    onlyOwner\n', '    addressNotNull(_usdRateSetter)\n', '  {\n', '    usdRateSetter = _usdRateSetter;\n', '\n', '    emit LogUSDRateSetterSet(_usdRateSetter);\n', '  }\n', '\n', '  function setUSDRate(uint256 _numTokens, uint256 _numUSD)\n', '    external\n', '    onlyUSDRateSetter\n', '  {\n', '    doSetUSDRate(_numTokens, _numUSD);\n', '\n', '    emit LogUSDRateSet(_numTokens, _numUSD);\n', '  }\n', '\n', '  function setMintPermission(address _contract, bool _canMint)\n', '    external\n', '    onlyOwner\n', '    addressNotNull(_contract)\n', '  {\n', '    if (_canMint)\n', '      authorizeMinter(_contract);\n', '    else\n', '      revokeMinter(_contract);\n', '\n', '    emit LogMintPermissionSet(_contract, _canMint);\n', '  }\n', '\n', '  function doSetUSDRate(uint256 _numTokens, uint256 _numUSD)\n', '    private\n', '  {\n', '    require(_numTokens != 0, "numTokens cannot be zero");\n', '    require(_numUSD != 0, "numUSD cannot be zero");\n', '    usdRate = [_numTokens, _numUSD];\n', '  }\n', '\n', '  function checkProxying(address _from, address _to, uint256 _amount, bytes memory _data, uint256 _nonce, bytes memory _proof)\n', '    private\n', '  {\n', '    require(!proxyProofs[keccak256(_proof)], "Proxy proof not unique");\n', '    proxyProofs[keccak256(_proof)] = true;\n', '    bytes32 hash = keccak256(abi.encodePacked(address(this), _from, _to, _amount, _data, _nonce));\n', '    address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), _proof);\n', '    require(signer == _from, "Bad signer");\n', '  }\n', '}\n', '\n', '// File: contracts/VSCToken.sol\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', '/**\n', ' * VSCToken is a VOWToken with:\n', ' * - a linked parent Vow token\n', ' * - tier 1 burn (with owner aproved exceptions)\n', ' * - tier 2 delegated lifting (only by owner approved contracts)\n', ' */\n', 'contract VSCToken is VOWToken {\n', '  using SafeMath for uint256;\n', '\n', '  address public immutable vowContract;\n', '  mapping(address => bool) public canLift;\n', '  mapping(address => bool) public skipTier1Burn;\n', '  uint256[2] public tier1BurnVSC;\n', '\n', '  event LogTier1BurnVSCUpdated(uint256[2] ratio);\n', '  event LogLiftPermissionSet(address indexed liftingAddress, bool canLift);\n', '  event LogSkipTier1BurnSet(address indexed skipTier1BurnAddress, bool skipTier1Burn);\n', '\n', '  constructor(string memory _name, string memory _symbol, uint256[2] memory _initialVSCUSD, address _vowContract)\n', '    VOWToken(_name, _symbol, 0, _initialVSCUSD)\n', '    public\n', '  {\n', '    vowContract = _vowContract;\n', '\n', '    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKENS_RECIPIENT_HASH, address(this));\n', '\n', '    tier1BurnVSC = [0, 1]; // Default to no burn: ie burn 0 VSC for every 1 VSC sent on tier 1\n', '\n', '    setSkipTier1Burn(address(this), true);\n', '  }\n', '\n', '  modifier onlyLifter() {\n', '    require(canLift[msg.sender], "onlyLifter");\n', '    _;\n', '  }\n', '\n', '  function setLiftPermission(address _liftingAddress, bool _canLift)\n', '    external\n', '    onlyOwner\n', '    addressNotNull(_liftingAddress)\n', '  {\n', '    canLift[_liftingAddress] = _canLift;\n', '\n', '    emit LogLiftPermissionSet(_liftingAddress, _canLift);\n', '  }\n', '\n', '  function setTier1BurnVSC(uint256 _numVSCBurned, uint256 _numVSCSent)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(_numVSCSent != 0, "Invalid burn ratio: div by zero");\n', '    require(_numVSCSent >= _numVSCBurned, "Invalid burn ratio: above 100%");\n', '    tier1BurnVSC = [_numVSCBurned, _numVSCSent];\n', '\n', '    emit LogTier1BurnVSCUpdated(tier1BurnVSC);\n', '  }\n', '\n', '  function lift(address _liftAccount, uint256 _amount, bytes calldata _data)\n', '    external\n', '    onlyLifter\n', '  {\n', '    address tier2ScalingManager = partnerContracts[keccak256(abi.encodePacked("FTScalingManager"))];\n', '    this.operatorSend(_liftAccount, tier2ScalingManager, _amount , _data, "");\n', '  }\n', '\n', '  function setSkipTier1Burn(address _skipTier1BurnAddress, bool _skipTier1Burn)\n', '    public\n', '    onlyOwner\n', '    addressNotNull(_skipTier1BurnAddress)\n', '  {\n', '    skipTier1Burn[_skipTier1BurnAddress] = _skipTier1Burn;\n', '\n', '    emit LogSkipTier1BurnSet(_skipTier1BurnAddress, _skipTier1Burn);\n', '  }\n', '\n', '  function doSend(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\n', '      bytes memory _operatorData, bool _enforceERC777)\n', '    internal\n', '    virtual\n', '    override\n', '  {\n', '    uint256 actualSendAmount = _amount;\n', '\n', '    if (!skipTier1Burn[_from] && !skipTier1Burn[_to]) {\n', '      uint256 burnAmount = _amount.mul(tier1BurnVSC[0]).div(tier1BurnVSC[1]);\n', '      doBurn(_operator, _from, burnAmount, _data, _operatorData);\n', '      actualSendAmount = actualSendAmount.sub(burnAmount);\n', '    }\n', '    super.doSend(_operator, _from, _to, actualSendAmount, _data, _operatorData, _enforceERC777);\n', '  }\n', '}']