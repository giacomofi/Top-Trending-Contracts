['pragma solidity 0.5.4;\n', '\n', 'interface IERC20 {\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}']
['pragma solidity 0.5.4;\n', '\n', 'contract Ownable {\n', '\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}']
['pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']
['pragma solidity 0.5.4;\n', '\n', "import 'SafeMath.sol';\n", "import 'Ownable.sol';\n", "import 'IERC20.sol';\n", '\n', 'contract ZildFinanceCoin is Ownable, IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', "    string public constant name = 'Zild Finance Coin';\n", "    string public constant symbol = 'Zild';\n", '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply = 9980 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public allowBurn = 2100 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public tokenDestroyed;\n', '\t\n', '    uint256 public constant FounderAllocation = 1497 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public constant FounderLockupAmount = 998 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public constant FounderLockupCliff = 365 days;\n', '    uint256 public constant FounderReleaseInterval = 30 days;\n', '    uint256 public constant FounderReleaseAmount = 20.7916 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public constant MarketingAllocation = 349 * 10000 * 10 ** uint256(decimals);\n', '    uint256 public constant FurnaceAllocation = 150 * 10000 * 10 ** uint256(decimals);\n', '\t\n', '    address public founder = address(0);\n', '    uint256 public founderLockupStartTime = 0;\n', '    uint256 public founderReleasedAmount = 0;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed to, uint256 value);\n', '    event ChangeFounder(address indexed previousFounder, address indexed newFounder);\n', '    event SetMinter(address indexed minter);\n', '    event SetMarketing(address indexed marketing);\n', '    event SetFurnace(address indexed furnace);\t\n', '    event Burn(address indexed _from, uint256 _tokenDestroyed, uint256 _timestamp);\n', '    event FrozenFunds(address target, bool frozen);\n', '\t\n', '    constructor(address _founder, address _marketing) public {\n', '        require(_founder != address(0), "ZildFinanceCoin: founder is the zero address");\n', '        require(_marketing != address(0), "ZildFinanceCoin: operator is the zero address");\n', '        founder = _founder;\n', '        founderLockupStartTime = block.timestamp;\n', '        _balances[address(this)] = totalSupply;\n', '        _transfer(address(this), _marketing, MarketingAllocation);\n', '    }\n', '\n', '    function release() public {\n', '        uint256 currentTime = block.timestamp;\n', '        uint256 cliffTime = founderLockupStartTime.add(FounderLockupCliff);\n', '        if (currentTime < cliffTime) return;\n', '        if (founderReleasedAmount >= FounderLockupAmount) return;\n', '        uint256 month = currentTime.sub(cliffTime).div(FounderReleaseInterval);\n', '        uint256 releaseAmount = month.mul(FounderReleaseAmount);\n', '        if (releaseAmount > FounderLockupAmount) releaseAmount = FounderLockupAmount;\n', '        if (releaseAmount <= founderReleasedAmount) return;\n', '        uint256 amount = releaseAmount.sub(founderReleasedAmount);\n', '        founderReleasedAmount = releaseAmount;\n', '        _transfer(address(this), founder, amount);\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        require(to != address(0), "ERC20: tranfer to the zero address");\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[to]);\n', '        _transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\t\n', '    function burn(uint256 _value) public returns (bool){\n', '        _burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function _burn(address _who, uint256 _burntAmount) internal {\n', '        require (tokenDestroyed.add(_burntAmount) <= allowBurn, "ZildFinanceCoin: exceeded the maximum allowable burning amount" );\n', '        require(_balances[msg.sender] >= _burntAmount && _burntAmount > 0);\n', '        _transfer(address(_who), address(0), _burntAmount);\n', '        totalSupply = totalSupply.sub(_burntAmount);\n', '        tokenDestroyed = tokenDestroyed.add(_burntAmount);\n', '        emit Burn(_who, _burntAmount, block.timestamp);\n', '    }\n', '\t\n', '\n', '    function allowance(address from, address to) public view returns (uint256) {\n', '        return _allowances[from][to];\n', '    }\n', '\n', '    function approve(address to, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n', '        uint256 remaining = _allowances[from][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance");\n', '        require(to != address(0), "ERC20: tranfer to the zero address");\n', '        require(!frozenAccount[from]);\n', '        require(!frozenAccount[to]);\n', '        require(!frozenAccount[msg.sender]);\n', '        _transfer(from, to, amount);\n', '        _approve(from, msg.sender, remaining);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        _balances[from] = _balances[from].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[to] = _balances[to].add(amount);\n', '        emit Transfer(from, to, amount);\n', '    }\n', '\n', '    function _approve(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: approve from the zero address");\n', '        require(to != address(0), "ERC20: approve to the zero address");\n', '        _allowances[from][to] = amount;\n', '        emit Approval(from, to, amount);\n', '    }\n', '\n', '    function changeFounder(address _founder) public onlyOwner {\n', '        require(_founder != address(0), "ZildFinanceCoin: founder is the zero address");\n', '        emit ChangeFounder(founder, _founder);\n', '        founder = _founder;\n', '    }\n', '\n', '    function setMinter(address minter) public onlyOwner {\n', '        require(minter != address(0), "ZildFinanceCoin: minter is the zero address");\n', '        require(_balances[minter] == 0, "ZildFinanceCoin: minter has been initialized");\n', '        _transfer(address(this), minter, totalSupply.sub(FounderAllocation));\n', '        emit SetMinter(minter);\n', '    }\n', '\n', '    function setFurnace(address furnace) public onlyOwner {\n', '        require(furnace != address(0), "ZildFinanceCoin: furnace is the zero address");\n', '        require(_balances[furnace] == 0, "ZildFinanceCoin: furnace has been initialized");\n', '        _transfer(address(this), furnace, FurnaceAllocation);\n', '        emit SetFurnace(furnace);\n', '    }\n', '\t\n', '    function freezeAccount(address _target, bool _bool) public onlyOwner {\n', '        if (_target != address(0)) {\n', '            frozenAccount[_target] = _bool;\n', '            emit FrozenFunds(_target,_bool);\n', '        }\n', '    }\n', '\n', '}']
