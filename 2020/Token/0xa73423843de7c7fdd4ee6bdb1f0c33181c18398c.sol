['/**\n', ' *Submitted for verification at Etherscan.io on 2019-06-04\n', '*/\n', '\n', 'pragma solidity ^ 0.4.21;\n', '\n', 'contract Token{\n', '    // token总量，默认会为public变量生成一个getter函数接口，名称为totalSupply().\n', '    uint256 public totalSupply;\n', '\n', '    /// 获取账户_owner拥有token的数量 \n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function transfer(address _to, uint256 _value) public returns(bool success);\n', '\n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns\n', '        (bool success);\n', '\n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '\n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function allowance(address _owner, address _spender) public constant returns \n', '        (uint256 remaining);\n', '\n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) revert();\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y) revert();\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (y == 0) return 0;\n', '        if (x > MAX_UINT256 / y) revert();\n', '        return x * y;\n', '    }\n', '}\n', '\n', 'contract StandardToken is Token, SafeMath {\n', '    function transfer(address _to, uint256 _value) public returns(bool success) {\n', '        //默认totalSupply 不会超过最大值 (2^256 - 1).\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);//从消息发送者账户中减去token数量_value\n', '        balances[_to] = safeAdd(balances[_to], _value);//往接收账户增加token数量_value\n', '        emit Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns\n', '        (bool success) {\n', '       \n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);//接收账户增加token数量_value\n', '        balances[_from] = safeSub(balances[_from], _value); //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);//消息发送者可以从账户_from中转出的数量减少_value\n', '        emit Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns(bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '}\n', '\n', 'contract Erc20Token is StandardToken { \n', '\n', '    /* Public variables of the token */\n', '    string public name;                   //名称\n', '    uint8 public decimals;               //最多的小数位数\n', '    string public symbol;               //token\n', "    string public version = '1.0.0';    //版本\n", '\n', '    function Erc20Token(string _tokenName, string _tokenSymbol, uint256 _initialAmount, uint8 _decimalUnits) public {\n', '        balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '        totalSupply = _initialAmount;         // 设置初始总量\n', '        name = _tokenName;                   // token名称\n', '        symbol = _tokenSymbol;             // token简称\n', '        decimals = _decimalUnits;           // 小数位数\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '    \n', '    /* transfer from one address to muilt address */\n', '    function transferFromArray(address _from, address[] _to, uint256[] _value) public returns(bool success) {\n', '        for(uint256 i = 0; i < _to.length; i++){\n', '            transferFrom(_from, _to[i], _value[i]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /* transfer from muilt address to one address */\n', '    function transferFromArrayToOne(address[] _from, address _to, uint256[] _value) public returns(bool success) {\n', '        for(uint256 i = 0; i < _from.length; i++){\n', '            transferFrom(_from[i], _to, _value[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '}']