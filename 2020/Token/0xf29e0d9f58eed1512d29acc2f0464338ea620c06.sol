['pragma solidity 0.5.17;\n', '\n', 'contract MysticsMakeMagick { // based on GAMMA nft - 0xeF0ff94B152C00ED4620b149eE934f2F4A526387\n', '    address public mystic;\n', '    uint256 public totalSupply;\n', '    uint256 public constant totalSupplyCap = 100000000000000000000;\n', '    string public name = "Mystics Make Magick";\n', '    string public symbol = "MMM";\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(uint256 => address) public getApproved;\n', '    mapping(uint256 => address) public ownerOf;\n', '    mapping(uint256 => uint256) public tokenByIndex;\n', '    mapping(uint256 => string) public tokenURI;\n', '    mapping(bytes4 => bool) public supportsInterface; // eip-165 \n', '    mapping(address => mapping(address => bool)) public isApprovedForAll;\n', '    mapping(address => mapping(uint256 => uint256)) public tokenOfOwnerByIndex;\n', '    \n', '    event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed holder, address indexed operator, bool approved);\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    constructor () public {\n', '        mystic = msg.sender;\n', '        supportsInterface[0x80ac58cd] = true; // ERC721 \n', '        supportsInterface[0x5b5e139f] = true; // METADATA\n', '        supportsInterface[0x780e9d63] = true; // ENUMERABLE\n', '    }\n', '    \n', '    function approve(address spender, uint256 tokenId) external {\n', '        require(msg.sender == ownerOf[tokenId] || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/operator");\n', '        getApproved[tokenId] = spender;\n', '        emit Approval(msg.sender, spender, tokenId); \n', '    }\n', '    \n', '    function mint(address to) external { \n', '        require(msg.sender == mystic, "!mystic");\n', '        totalSupply++;\n', '        require(totalSupply <= totalSupplyCap, "capped");\n', '        uint256 tokenId = totalSupply;\n', '        balanceOf[to]++;\n', '        ownerOf[tokenId] = to;\n', '        tokenByIndex[tokenId - 1] = tokenId;\n', '        tokenURI[tokenId] = "https://ipfs.globalupload.io/QmVhscFUL3MiRqpPNwLBVoiSYrVAqcMGvGLEeFysKGAsbu";\n', '        tokenOfOwnerByIndex[to][tokenId - 1] = tokenId;\n', '        emit Transfer(address(0), to, tokenId); \n', '    }\n', '    \n', '    function setApprovalForAll(address operator, bool approved) external {\n', '        isApprovedForAll[msg.sender][operator] = approved;\n', '        emit ApprovalForAll(msg.sender, operator, approved);\n', '    }\n', '    \n', '    function _transfer(address from, address to, uint256 tokenId) internal {\n', '        balanceOf[from]--; \n', '        balanceOf[to]++; \n', '        getApproved[tokenId] = address(0);\n', '        ownerOf[tokenId] = to;\n', '        tokenOfOwnerByIndex[from][tokenId - 1] = 0;\n', '        tokenOfOwnerByIndex[to][tokenId - 1] = tokenId;\n', '        emit Transfer(from, to, tokenId); \n', '    }\n', '    \n', '    function transfer(address to, uint256 tokenId) external {\n', '        require(msg.sender == ownerOf[tokenId], "!owner");\n', '        _transfer(msg.sender, to, tokenId);\n', '    }\n', '    \n', '    function transferBatch(address[] calldata to, uint256[] calldata tokenId) external {\n', '        require(to.length == tokenId.length, "!to/tokenId");\n', '        for (uint256 i = 0; i < to.length; i++) {\n', '            require(msg.sender == ownerOf[tokenId[i]], "!owner");\n', '            _transfer(msg.sender, to[i], tokenId[i]);\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 tokenId) external {\n', '        require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");\n', '        _transfer(from, to, tokenId);\n', '    }\n', '    \n', '    function updateMystic(address _mystic) external {\n', '        require(msg.sender == mystic, "!mystic");\n', '        mystic = _mystic;\n', '    }\n', '}']