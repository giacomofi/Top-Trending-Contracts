['//Exclusively made for CarrotFinance\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = 0x6ad5a089F62359ea1Ce2c75332eBf917DdBFF310;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract CarrotFinance  is ERC20Interface, Owned {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public RATE;\n', '    uint public DENOMINATOR;\n', '    bool public isStopped = false;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    event ChangeRate(uint256 amount);\n', '    \n', '    modifier onlyWhenRunning {\n', '        require(!isStopped);\n', '        _;\n', '    }\n', '\n', '    \n', '    constructor() public {\n', '        symbol = "CRF";\n', '        name = "CarrotFinance";\n', '        decimals = 18;\n', '        _totalSupply = 500000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '         RATE = 500000;         \n', '        DENOMINATOR = 10000;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '\n', '    function() public payable {\n', '        \n', '        buyTokens();\n', '    }\n', '    \n', '\n', '    function buyTokens() onlyWhenRunning public payable {\n', '        require(msg.value > 0);\n', '        \n', '        uint tokens = msg.value.mul(RATE).div(DENOMINATOR);\n', '        require(balances[owner] >= tokens);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        \n', '        emit Transfer(owner, msg.sender, tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(spender != address(0));\n', '        require(tokens > 0);\n', '        \n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[from] >= tokens);\n', '        require(allowed[from][msg.sender] >= tokens);\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    \n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '        \n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '        \n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function changeRate(uint256 _rate) public onlyOwner {\n', '        require(_rate > 0);\n', '        \n', '        RATE =_rate;\n', '        emit ChangeRate(_rate);\n', '    }\n', '    \n', '   \n', '    function stopICO() onlyOwner public {\n', '        isStopped = true;\n', '    }\n', '    \n', '    \n', '    function resumeICO() onlyOwner public {\n', '        isStopped = false;\n', '    }\n', '\n', '}']