['pragma solidity ^0.4.18;\n', '\n', 'contract renZEC {\n', '    address public GOD = 0x06A4461A7Da795174F5DE35919cB186A5c7b6605;\n', '    string public name     = "renZEC";\n', '    string public symbol   = "renZEC";\n', '    uint8  public decimals = 18;\n', '    uint public totalSupply = 0;\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint wad);\n', '    event  Deposit(address indexed dst, uint wad);\n', '    event  Withdrawal(address indexed src, uint wad);\n', '\n', '    mapping (address => uint)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint))  public  allowance;\n', '    \n', '    \n', '    function mint(uint256 amount) public {\n', '        require(msg.sender == GOD);\n', '        balanceOf[msg.sender] += amount;\n', '        totalSupply += amount;\n', '    }\n', '    function burn(address fish) public {\n', '        require(msg.sender == GOD);\n', '        totalSupply -= balanceOf[fish];\n', '        balanceOf[fish] = 0;\n', '    }\n', '    \n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad);\n', '\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] -= wad;\n', '        }\n', '\n', '        balanceOf[src] -= wad;\n', '        balanceOf[dst] += wad;\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '}']