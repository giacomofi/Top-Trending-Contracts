['pragma solidity 0.5.17;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 value, address token, bytes calldata data) external;\n', '}\n', '\n', 'contract YFIPORK is Ownable {\n', '    // --- ERC20 Data ---\n', '    string  public constant name     = "yfipork.finance";\n', '    string  public constant symbol   = "YFP";\n', '    string  public constant version  = "1";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256)                      public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => uint256)                      public nonces;\n', '\n', '    event Approval(address indexed holder, address indexed spender, uint256 amount);\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    // --- Math ---\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    // --- EIP712 niceties ---\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    // bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n', '\n', '    constructor(uint256 chainId_) public {\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(\n', '            keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '            keccak256(bytes(name)),\n', '            keccak256(bytes(version)),\n', '            chainId_,\n', '            address(this)\n', '        ));\n', '    }\n', '\n', '    // --- Token ---\n', '    \n', '    function supply(address to, uint256 amount) external onlyOwner {\n', '        balanceOf[to] = add(balanceOf[to], amount);\n', '        totalSupply = add(totalSupply, amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '    \n', '    function transfer(address to, uint256 amount) external returns (bool) {\n', '        return transferFrom(msg.sender, to, amount);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n', '        if (from != msg.sender && allowance[from][msg.sender] != uint256(-1))\n', '            allowance[from][msg.sender] = sub(allowance[from][msg.sender], amount);\n', '        require(balanceOf[from] >= amount, "insufficient-balance");\n', '        balanceOf[from] = sub(balanceOf[from], amount);\n', '        balanceOf[to] = add(balanceOf[to], amount);\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function burn(address from, uint256 amount) external {\n', '        if (from != msg.sender && allowance[from][msg.sender] != uint256(-1))\n', '            allowance[from][msg.sender] = sub(allowance[from][msg.sender], amount);\n', '        require(balanceOf[from] >= amount, "insufficient-balance");\n', '        balanceOf[from] = sub(balanceOf[from], amount);\n', '        totalSupply = sub(totalSupply, amount);\n', '        emit Transfer(from, address(0), amount);\n', '    }\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    // --- Approve and call contract ---\n', '    function approveAndCall(address spender, uint256 amount, bytes calldata data) external returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), data);\n', '        return true;\n', '    }\n', '\n', '    // --- Approve by signature ---\n', '    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n', '                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\n', '    {\n', '        bytes32 digest =\n', '            keccak256(abi.encodePacked(\n', '                "\\x19\\x01",\n', '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH,\n', '                                     holder,\n', '                                     spender,\n', '                                     nonce,\n', '                                     expiry,\n', '                                     allowed))\n', '        ));\n', '\n', '        require(holder != address(0), "invalid-address-0");\n', '        require(holder == ecrecover(digest, v, r, s), "invalid-permit");\n', '        require(expiry == 0 || now <= expiry, "permit-expired");\n', '        require(nonce == nonces[holder]++, "invalid-nonce");\n', '        uint256 amount = allowed ? uint256(-1) : 0;\n', '        allowance[holder][spender] = amount;\n', '        emit Approval(holder, spender, amount);\n', '    }\n', '}']