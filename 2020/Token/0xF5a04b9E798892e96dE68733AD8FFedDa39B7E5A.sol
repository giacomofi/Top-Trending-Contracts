['pragma solidity >=0.4.22 <0.7.0;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function renounceOwnership() public onlyOwner {\n', '        owner = address(0);\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  \n', '   function times(uint256 a, uint256 b) \n', '     internal\n', '     pure\n', '     returns (uint256 c) \n', '  {\n', '    c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint256 a, uint256 b) \n', '    internal \n', '    pure \n', '  returns (uint256 c) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint256 a, uint256 b) \n', '    internal \n', '    pure \n', '  returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() external view returns (uint256);    \n', '    function allowance (address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Topswap is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 internal totalSupply_;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(uint256 amount);\n', '    \n', '    constructor(uint256 initialSupply, string memory _name, string memory _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply_ = initialSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '  \n', '    function mint(address _to, uint256 _amount)\n', '      onlyOwner\n', '      public\n', '    {\n', '      totalSupply_ = totalSupply_.plus(_amount);\n', '      balances[_to] = balances[_to].plus(_amount);\n', '      emit Mint(_to, _amount);\n', '      emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount)\n', '      onlyOwner\n', '      public\n', '    {\n', '      totalSupply_ = totalSupply_.minus(_amount);\n', '      balances[msg.sender] = balances[msg.sender].minus(_amount);\n', '      emit Burn(_amount);\n', '      emit Transfer(msg.sender, address(0), _amount);\n', '    }\n', '    \n', '    \n', '    function totalSupply() external view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].minus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '      public\n', '      returns(bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].minus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value)\n', '      public \n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) \n', '      public \n', '      view \n', '      returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint256 _addedValue) \n', '      public \n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) \n', '      public \n', '      returns(bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue){\n', '            allowed[msg.sender][_spender] = 0;\n', '        }else {\n', '            allowed[msg.sender][_spender] = oldValue.minus(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function isToken() \n', '        public \n', '        view \n', '        returns (bool)\n', '    {\n', '        return true;\n', '    }\n', '    \n', '}']