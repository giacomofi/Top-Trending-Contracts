['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'interface IPowerUser {\n', '    function usePower(uint256 power) external returns (uint256);\n', '    event PowerUsed(address indexed master, uint256 power, string purpose);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Fractal illusion of the ideal stable for the best of cows.\n', ' *\n', ' * Calmness, deep relaxation, concentration and absolute harmony. Cows just love this place.\n', ' * There are rumours, that the place where the stable was built is in fact a source of the power.\n', ' * I personally believe that this stable would be perfect for cows to give a lot of amazing milk!\n', ' *\n', ' * Even mathematics works here differently - cows are not counted like in habitual\n', ' * world (like: 1 cow, 2 cows, 3 cows...), but instead they are somehow measured in strange\n', ' * unusual large numbers called here "units". Maybe this is just another strange but a sweet dream?..\n', ' */\n', 'contract Stable is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Stakeshot contains snapshot aggregated staking history.\n', '    struct Stakeshot {\n', '        uint256 _block;  // number of block stakeshooted\n', '        uint256 _cows;   // amount of cows in the stable just after the "shoot" moment [units]\n', '        uint256 _power;  // amount of currently accumulated power available in this block\n', '    }\n', '\n', '    // Precalculate TOTAL_UNITS used for conversion between tokens and units.\n', '    uint256 private constant MAX_UINT256 = ~uint256(0);\n', '    uint256 private constant INITIAL_TOKENS = 21 * 10**6;\n', '    uint256 private constant INITIAL_SUPPLY = INITIAL_TOKENS * 10**9;\n', '    uint256 private constant TOTAL_UNITS = MAX_UINT256 - (MAX_UINT256 % INITIAL_SUPPLY);\n', '    uint256 private constant COWS_TO_POWER_DELIMETER = 10**27;\n', '\n', '    // COW token is hardcoded into the stable.\n', '    IERC20 private _tokenCOW = IERC20(0xf0be50ED0620E0Ba60CA7FC968eD14762e0A5Dd3);\n', '\n', '    // Amount of cows by masters and total amount of cows in the stable.\n', '    mapping(address => uint256) private _cows;  // [units]\n', '    uint256 private _totalCows;                 // [units]\n', '\n', '    // Most actual stakeshots by masters.\n', '    mapping(address => Stakeshot) private _stakeshots;\n', '    uint256 private _totalPower;\n', '\n', '\n', '    event CowsArrived(address indexed master, uint256 cows);\n', '    event CowsLeaved(address indexed master, uint256 cows);\n', '\n', '\n', '    function driveCowsInto(uint256 cows) external {\n', '        address master = msg.sender;\n', '\n', '        // Transport provided cows to the stable\n', '        bool ok = _tokenCOW.transferFrom(master, address(this), cows);\n', '        require(ok, "Stable: unable to transport cows to the stable");\n', '\n', '        // Register each arrived cow\n', '        uint256 unitsPerCow = TOTAL_UNITS.div(_tokenCOW.totalSupply());\n', '        uint256 units = cows.mul(unitsPerCow);\n', '        _cows[master] = _cows[master].add(units);\n', '        _totalCows = _totalCows.add(units);\n', '\n', '        // Recalculate power collected by the master\n', '        _updateStakeshot(master);\n', '\n', '        // Emit event to the logs so can be effectively used later\n', '        emit CowsArrived(master, cows);\n', '    }\n', '\n', '    function driveCowsOut(address master, uint256 cows) external {\n', '\n', '        // Transport requested cows from the stable\n', '        bool ok = _tokenCOW.transfer(master, cows);\n', '        require(ok, "Stable: unable to transport cows from the stable");\n', '\n', '        // Unregister each leaving cow\n', '        uint256 unitsPerCow = TOTAL_UNITS.div(_tokenCOW.totalSupply());\n', '        uint256 units = cows.mul(unitsPerCow);\n', '        _cows[master] = _cows[master].sub(units);\n', '        _totalCows = _totalCows.sub(units);\n', '\n', '        // Recalculate power collected by the master\n', '        _updateStakeshot(master);\n', '\n', '        // Emit event to the logs so can be effectively used later\n', '        emit CowsLeaved(master, cows);\n', '    }\n', '\n', '    function token() public view returns (IERC20) {\n', '        return _tokenCOW;\n', '    }\n', '\n', '    function cows(address master) public view returns (uint256) {\n', '        uint256 unitsPerCow = TOTAL_UNITS.div(_tokenCOW.totalSupply());\n', '        return _cows[master].div(unitsPerCow);\n', '    }\n', '\n', '    function totalCows() public view returns (uint256) {\n', '        uint256 unitsPerCow = TOTAL_UNITS.div(_tokenCOW.totalSupply());\n', '        return _totalCows.div(unitsPerCow);\n', '    }\n', '\n', '    function power(address master) public view returns (uint256, uint256) {\n', '        return (_stakeshots[master]._block, _stakeshots[master]._power);\n', '    }\n', '\n', '    function totalPower() public view returns (uint256) {\n', '        return _totalPower;\n', '    }\n', '\n', '    function stakeshot(address master) public view returns (uint256, uint256, uint256) {\n', '        uint256 unitsPerCow = TOTAL_UNITS.div(_tokenCOW.totalSupply());\n', '        Stakeshot storage s = _stakeshots[master];\n', '        return (s._block, s._cows.div(unitsPerCow), s._power);\n', '    }\n', '\n', '    function _updateStakeshot(address master) private {\n', '        Stakeshot storage s = _stakeshots[master];\n', '        uint256 duration = block.number.sub(s._block);\n', '        if (s._block > 0 && duration > 0) {\n', '            // Recalculate collected power\n', '            uint256 productivity = s._cows.div(COWS_TO_POWER_DELIMETER);\n', '            uint256 powerGained = productivity.mul(duration);\n', '            s._power = s._power.add(powerGained);\n', '            _totalPower = _totalPower.add(powerGained);\n', '        }\n', '        s._block = block.number;\n', '        s._cows = _cows[master];\n', '    }\n', '}']