['pragma solidity ^0.5.17;\n', '\n', '/*\n', '  _______                   ____  _____  \n', ' |__   __|                 |___ \\|  __ \\ \n', '    | | ___  __ _ _ __ ___   __) | |  | |\n', "    | |/ _ \\/ _` | '_ ` _ \\ |__ <| |  | |\n", '    | |  __/ (_| | | | | | |___) | |__| |\n', '    |_|\\___|\\__,_|_| |_| |_|____/|_____/ \n', '    \n', '*/\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint tokens, address token, bytes calldata data) external;\n', '}\n', '\n', '\n', 'contract Presale {\n', '    mapping (address => uint256) public balances;\n', '    address[] public keys;\n', '    uint public initialTokens;\n', '}\n', '\n', '\n', 'contract Team3D is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    string public constant name  = "Vidya";\n', '    string public constant symbol = "VIDYA";\n', '    uint8 public constant decimals = 18;\n', '\n', '    address owner;\n', '    bool initialized;\n', '    uint256 startBlock;\n', '    uint256 _totalSupply = 50000000 * (10 ** 18);\n', '    Presale presale;\n', '\n', '    modifier fairStart() {\n', '        require(block.number > startBlock + 5);\n', '        if (block.number < startBlock + 10) {\n', '            require(tx.gasprice <= 2000000000000);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function initialize(address _presaleAddr) public {\n', '        require(!initialized);\n', '        owner = tx.origin;\n', '        presale = Presale(_presaleAddr);\n', '        balances[tx.origin] = presale.initialTokens();\n', '        balances[msg.sender] =  _totalSupply - presale.initialTokens();\n', '        \n', '        startBlock = block.number;\n', '        initialized = true;\n', '\n', '        emit Transfer(address(0), tx.origin, presale.initialTokens());\n', '        emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());\n', '    }\n', '\n', '    function distributePresale(uint _min, uint _max) public {\n', '        require(msg.sender==owner);\n', '        for (uint i=_min; i < _max; i++) {\n', '            address _addr = presale.keys(i);\n', '            transfer(_addr, presale.balances(_addr));\n', '            }\n', '        }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address addr) public view returns (uint256) {\n', '        return balances[addr];\n', '    }\n', '\n', '    function allowance(address addr, address spender) public view returns (uint256) {\n', '        return allowed[addr][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public fairStart returns (bool) {\n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 tokens, bytes calldata data) external returns (bool) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '}']