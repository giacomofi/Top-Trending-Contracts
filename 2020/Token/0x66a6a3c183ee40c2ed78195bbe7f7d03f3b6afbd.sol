['# Contract created by Oswald Castro y Riverberg\n', '# https://www.oswaldriverberg.com/ or https://www.oswaldriverberg.art/\n', '# 34% contract ownership is representative of artwork onwership on a FIFO basis.\n', '# Artwork details: La Vanille Bourbon - Plantation Paralels\n', '# An introspection on the impact of climate change on one of the most expensive spices in the world.\n', '# In 2017, vanilla crops of Madagascar were damaged by tropical cyclones which skyrocketed the prices\n', '# of the commodity and led to the emergence of a crime wave targeting vanilla farmers.\n', '# Oswald Castro y Riverberg,\n', '# Madagascar, 2019\n', '# Acrylic on canvas\n', '# 75cm by 40cm,  29.13in. by 15.74 in.\n', '#\n', '# Ownership threshold:\n', '# 34% of $LVB maximum supply (102,000 LVB) is required for the smart contract to authenticate an automatic transfer of ownership.\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'implements: ERC20\n', '\n', 'event Transfer:\n', '    sender: indexed(address)\n', '    receiver: indexed(address)\n', '    value: uint256\n', '\n', 'event Approval:\n', '    owner: indexed(address)\n', '    spender: indexed(address)\n', '    value: uint256\n', '\n', 'owner: public(address)\n', 'newOwner: address\n', '\n', 'name: public(String[64])\n', 'symbol: public(String[32])\n', 'decimals: public(uint256)\n', 'max_supply: public(uint256)\n', 'ownership_threshold: public(uint256)\n', 'balanceOf: public(HashMap[address, uint256])\n', 'allowances: HashMap[address, HashMap[address, uint256]]\n', 'total_supply: uint256\n', 'minter: address\n', '\n', '\n', '@external\n', 'def __init__(_name: String[64], _symbol: String[32], _decimals: uint256, _supply: uint256, _max_supply: uint256, _ownership_threshold: uint256):\n', '    init_supply: uint256 = _supply * 10 ** _decimals\n', '    self.owner = msg.sender\n', '    self.name = _name\n', '    self.symbol = _symbol\n', '    self.decimals = _decimals\n', '    self.balanceOf[msg.sender] = init_supply\n', '    self.total_supply = init_supply\n', '    self.max_supply = _max_supply * 10 ** _decimals\n', '    self.ownership_threshold = (_max_supply * _ownership_threshold / 100) * 10 ** _decimals\n', '    self.minter = msg.sender\n', '    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\n', '\n', '\n', '@view\n', '@external\n', 'def totalSupply() -> uint256:\n', '    """\n', '    @dev Total number of tokens in existence.\n', '    """\n', '    return self.total_supply\n', '\n', '@external\n', 'def ownershipTransfer(_newOwner: address):\n', '    """\n', '    @def Function to transfer ownership to a new address after crossing a defined threshold\n', '    """\n', '    assert msg.sender != self.owner, "You are already the owner."\n', '    assert _newOwner != ZERO_ADDRESS, "Invalid address."\n', '    if self.balanceOf[_newOwner] >= self.ownership_threshold:\n', '        self.minter = _newOwner\n', '        self.owner = _newOwner\n', '    else:\n', '        raise "Insufficient Balance for Ownership transfer."\n', '\n', '@view\n', '@external\n', 'def allowance(_owner : address, _spender : address) -> uint256:\n', '    """\n', '    @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    @param _owner The address which owns the funds.\n', '    @param _spender The address which will spend the funds.\n', '    @return An uint256 specifying the amount of tokens still available for the spender.\n', '    """\n', '    return self.allowances[_owner][_spender]\n', '\n', '@external\n', 'def transfer(_to : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Transfer token for a specified address\n', '    @param _to The address to transfer to.\n', '    @param _value The amount to be transferred.\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    self.balanceOf[msg.sender] -= _value\n', '    self.balanceOf[_to] += _value\n', '    log Transfer(msg.sender, _to, _value)\n', '    return True\n', '\n', '@external\n', 'def transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n', '    """\n', '     @dev Transfer tokens from one address to another.\n', '     @param _from address The address which you want to send tokens from\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amount of tokens to be transferred\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    self.balanceOf[_from] -= _value\n', '    self.balanceOf[_to] += _value\n', '    # NOTE: vyper does not allow underflows\n', '    #      so the following subtraction would revert on insufficient allowance\n', '    self.allowances[_from][msg.sender] -= _value\n', '    log Transfer(_from, _to, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def approve(_spender : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '         Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    """\n', '    self.allowances[msg.sender][_spender] = _value\n', '    log Approval(msg.sender, _spender, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def mint(_to: address, _value: uint256):\n', '    """\n', '    @dev Mint an amount of the token and assigns it to an account.\n', '         This encapsulates the modification of balances such that the\n', '         proper events are emitted.\n', '    @param _to The account that will receive the created tokens.\n', '    @param _value The amount that will be created.\n', '    """\n', '    if (self.total_supply + _value) <= self.max_supply:\n', '        assert msg.sender == self.minter\n', '        assert _to != ZERO_ADDRESS, "Invalid Address."\n', '        self.total_supply += _value\n', '        self.balanceOf[_to] += _value\n', '        log Transfer(ZERO_ADDRESS, _to, _value)\n', '    else:\n', '        raise "Unable to mint over the stipulated max supply."\n', '\n', '\n', '@internal\n', 'def _burn(_to: address, _value: uint256):\n', '    """\n', '    @dev Internal function that burns an amount of the token of a given\n', '         account.\n', '    @param _to The account whose tokens will be burned.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    assert _to != ZERO_ADDRESS\n', '    self.total_supply -= _value\n', '    self.balanceOf[_to] -= _value\n', '    log Transfer(_to, ZERO_ADDRESS, _value)\n', '\n', '\n', '@external\n', 'def burn(_value: uint256):\n', '    """\n', '    @dev Burn an amount of the token of msg.sender.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    self._burn(msg.sender, _value)']