['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IPowerKeeper {\n', '    function usePower(address master) external returns (uint256);\n', '    function power(address master) external view returns (uint256);\n', '    function totalPower() external view returns (uint256);\n', '    event PowerGained(address indexed master, uint256 amount);\n', '    event PowerUsed(address indexed master, uint256 amount);\n', '}\n', '\n', 'interface IMilker {\n', '    function bandits(uint256 percent) external returns (uint256, uint256, uint256);\n', '    function sheriffsVaultCommission() external returns (uint256);\n', '    function sheriffsPotDistribution() external returns (uint256);\n', '    function isWhitelisted(address holder) external view returns (bool);\n', '    function getPeriod() external view returns (uint256);\n', '}\n', '\n', '\n', 'contract Milk is Ownable, IMilker {\n', '    using SafeMath for uint256;\n', '\n', '    // Token details.\n', '    string public constant name = "Cowboy.Finance";\n', '    string public constant symbol = "MILK";\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Token supply limitations.\n', '    uint256 private constant MAX_UINT256 = ~uint256(0);\n', '    uint256 private constant MAX_TOKENS = 15 * 10**6;\n', '    uint256 private constant MAX_SUPPLY = MAX_TOKENS * 10**decimals;\n', '    uint256 private constant TOTAL_UNITS = MAX_UINT256 - (MAX_UINT256 % MAX_SUPPLY);\n', '\n', '    // Tokenomics parameters.\n', '    uint256 private constant INITIAL_PRODUCTION = 25_000 * 10**decimals;\n', '    uint256 private constant PERIOD_LENGTH = 6 hours;\n', '    uint256 private constant REDUCING_PERIODS = 28;\n', '    uint256 private constant REDUCING_FACTOR = 10;\n', '\n', '    // Hardcoded address to collect 5% dev team share.\n', '    address private constant DEV_TEAM_ADDRESS = 0xFFCF83437a1Eb718933f39ebE75aD96335BC1BE4;\n', '\n', '    // Address of StableV2 contracts staking COW, COW:WETH and MILK:WETH tokens.\n', '    IPowerKeeper private _stableCow;    // COW\n', '    IPowerKeeper private _stableCowLP;  // UniswapV2 Pair COW:WETH\n', '    IPowerKeeper private _stableMilkLP; // UniswapV2 Pair MILK:WETH\n', '\n', '    // Address of controller contract from which base refase functions can be called.\n', '    address private _controller;\n', '\n', '    // Token holders balances "in hand", balances in vaults, and spending allowances.\n', '    mapping(address => uint256) private _balances; // in units\n', '    mapping(address => uint256) private _vaults;   // in units\n', '    mapping(address => mapping (address => uint256)) private _allowances;\n', '\n', '    // Whitelisted balances are stored separately.\n', '    mapping(address => uint256) private _whitelistedBalances; // in units\n', '    mapping(address => bool) private _whitelist;\n', '\n', '    // Token current state.\n', '    uint256 private _startTime = MAX_UINT256;\n', '    uint256 private _distributed;\n', '    uint256 private _totalSupply;\n', '\n', '    // Token supply (divided to several parts).\n', '    uint256 private _supplyInBalances;\n', '    uint256 private _supplyWhitelisted;\n', '    uint256 private _supplyInSheriffsPot;\n', '    uint256 private _supplyInSheriffsVault;\n', '\n', '    // Values needed to convert between units and tokens (divided to several parts).\n', '    uint256 private _maxBalancesSupply = MAX_SUPPLY;\n', '    uint256 private _maxWhitelistedSupply = MAX_SUPPLY;\n', '    uint256 private _maxSheriffsVaultSupply = MAX_SUPPLY;\n', '    uint256 private _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\n', '    uint256 private _unitsPerTokenWhitelisted = TOTAL_UNITS.div(_maxWhitelistedSupply);\n', '    uint256 private _unitsPerTokenInSheriffsVault = TOTAL_UNITS.div(_maxSheriffsVaultSupply);\n', '\n', '    // Contract configuration events\n', '    event StartTimeSetUp(uint256 indexed startTime);\n', '    event StableCowSetUp(address indexed stableCow);\n', '    event StableCowLPSetUp(address indexed stableCowLP);\n', '    event StableMilkLPSetUp(address indexed stableMilkLP);\n', '    event ControllerSetUp(address indexed controller);\n', '    event AddedToWhitelist(address indexed holder);\n', '    event RemovedFromWhitelist(address indexed holder);\n', '\n', '    // ERC20 token related events\n', '    event Mint(address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    // Tokenomics mechanics events\n', '    event Bandits(uint256 percent, uint256 totalAmount, uint256 arrestedAmount, uint256 burntAmount);\n', '    event SheriffsVaultCommission(uint256 amount);\n', '    event SheriffsPotDistribution(uint256 amount);\n', '    event SheriffsVaultDeposit(address indexed holder, uint256 amount);\n', '    event SheriffsVaultWithdraw(address indexed holder, uint256 amount);\n', '\n', '\n', '    modifier validRecipient(address account) {\n', '        require(account != address(0x0), "Milk: unable to send tokens to zero address");\n', '        require(account != address(this), "Milk: unable to send tokens to the token contract");\n', '        _;\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(_controller == _msgSender(), "Milk: caller is not the controller");\n', '        _;\n', '    }\n', '\n', '\n', '    constructor() public {\n', '        _whitelist[DEV_TEAM_ADDRESS] = true;\n', '        emit AddedToWhitelist(DEV_TEAM_ADDRESS);\n', '    }\n', '\n', '    function setStartTime(uint256 startTime) external onlyOwner {\n', '        _startTime = startTime;\n', '        emit StartTimeSetUp(startTime);\n', '    }\n', '\n', '    function setStableCow(address stableCow) external onlyOwner {\n', '        _stableCow = IPowerKeeper(stableCow);\n', '        emit StableCowSetUp(stableCow);\n', '    }\n', '\n', '    function setStableCowLP(address stableCowLP) external onlyOwner {\n', '        _stableCowLP = IPowerKeeper(stableCowLP);\n', '        emit StableCowLPSetUp(stableCowLP);\n', '    }\n', '\n', '    function setStableMilkLP(address stableMilkLP) external onlyOwner {\n', '        _stableMilkLP = IPowerKeeper(stableMilkLP);\n', '        emit StableMilkLPSetUp(stableMilkLP);\n', '    }\n', '\n', '    function setController(address controller) external onlyOwner {\n', '        _controller = controller;\n', '        emit ControllerSetUp(controller);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Whitelist management\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function addToWhitelist(address holder) external onlyOwner {\n', '        require(address(_stableCow) != address(0), "Milk: StableV2 contract staking COW tokens is not set up");\n', '        require(!_whitelist[holder], "Milk: already whitelisted");\n', '        require(_stableCow.power(holder) == 0, "Milk: unable to whitelist COW tokens staker");\n', '        _whitelist[holder] = true;\n', '        uint256 tokens = _balances[holder].div(_unitsPerTokenInBalances);\n', '        if (tokens > 0) {\n', '            _whitelistedBalances[holder] = tokens.mul(_unitsPerTokenWhitelisted);\n', '            _balances[holder] = 0;\n', '            _supplyInBalances = _supplyInBalances.sub(tokens);\n', '            _supplyWhitelisted = _supplyWhitelisted.add(tokens);\n', '        }\n', '        emit AddedToWhitelist(holder);\n', '    }\n', '\n', '    function removeFromWhitelist(address holder) external onlyOwner {\n', '        require(address(_stableCow) != address(0), "Milk: StableV2 contract staking COW tokens is not set up");\n', '        require(_whitelist[holder], "Milk: not whitelisted");\n', '        _whitelist[holder] = false;\n', '        uint256 tokens = _whitelistedBalances[holder].div(_unitsPerTokenWhitelisted);\n', '        if (tokens > 0) {\n', '            _balances[holder] = tokens.mul(_unitsPerTokenInBalances);\n', '            _whitelistedBalances[holder] = 0;\n', '            _supplyInBalances = _supplyInBalances.add(tokens);\n', '            _supplyWhitelisted = _supplyWhitelisted.sub(tokens);\n', '        }\n', '        emit RemovedFromWhitelist(holder);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // [Event] Bandits are coming!\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function bandits(uint256 percent) external override onlyController returns (\n', '        uint256 banditsAmount,\n', '        uint256 arrestedAmount,\n', '        uint256 burntAmount\n', '    ) {\n', '        uint256 undistributedAmount = getProductedAmount().sub(_distributed);\n', '        // how many MILK has to be redistributed?\n', '        uint256 banditsTotalAmount = _supplyInBalances.mul(percent).div(100);\n', '        uint256 undistributedBanditsTotalAmount = undistributedAmount.mul(percent).div(100);\n', '        // share for sheriffs pot - 90%\n', '        uint256 banditsToPotAmount = banditsTotalAmount.mul(90).div(100);\n', '        uint256 undistributedBanditsToPotAmount = undistributedBanditsTotalAmount.mul(90).div(100);\n', '        // share to burn - 10%\n', '        uint256 banditsBurnAmount = banditsTotalAmount.sub(banditsToPotAmount);\n', '        uint256 undistributedBanditsBurnAmount = undistributedBanditsTotalAmount.sub(undistributedBanditsToPotAmount);\n', '\n', '        // calc new total supply based on burn\n', '        _totalSupply = _totalSupply.sub(banditsBurnAmount);\n', '        // calc new supply in pot\n', '        _supplyInSheriffsPot = _supplyInSheriffsPot.add(banditsToPotAmount).add(undistributedBanditsToPotAmount);\n', '        // calc new total supply in balances - ignoring burn here\n', '        _supplyInBalances = _supplyInBalances.sub(banditsTotalAmount);\n', '\n', '        // calc new max supply\n', '        _maxBalancesSupply = _maxBalancesSupply.sub(_maxBalancesSupply.mul(percent).div(100));\n', '        // recalc units per milk for regular balances\n', '        _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\n', '\n', '        _distributed = _distributed.add(undistributedBanditsBurnAmount).add(undistributedBanditsToPotAmount);\n', '\n', '        banditsAmount = banditsTotalAmount.add(undistributedBanditsTotalAmount);\n', '        arrestedAmount = banditsToPotAmount.add(undistributedBanditsToPotAmount);\n', '        burntAmount = banditsBurnAmount.add(undistributedBanditsBurnAmount);\n', '\n', '        emit Bandits(percent, banditsAmount, arrestedAmount, burntAmount);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', "    // [Event] Sheriff's Vault commission\n", '    ////////////////////////////////////////////////////////////////\n', '\n', '    function sheriffsVaultCommission() external override onlyController returns (uint256 commission) {\n', '        commission = _supplyInSheriffsVault.div(100);\n', '        _supplyInSheriffsVault = _supplyInSheriffsVault.sub(commission);\n', '        _supplyInSheriffsPot = _supplyInSheriffsPot.add(commission);\n', '        _maxSheriffsVaultSupply = _maxSheriffsVaultSupply.sub(_maxSheriffsVaultSupply.div(100));\n', '        _unitsPerTokenInSheriffsVault = TOTAL_UNITS.div(_maxSheriffsVaultSupply);\n', '        emit SheriffsVaultCommission(commission);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', "    // [Event] Sheriff's Pot distribution\n", '    ////////////////////////////////////////////////////////////////\n', '\n', '    function sheriffsPotDistribution() external override onlyController returns (uint256 amount) {\n', '        amount = _supplyInSheriffsPot;\n', '        if (amount > 0 && _supplyInBalances > 0) {\n', '            uint256 maxBalancesSupplyDelta = _maxBalancesSupply.mul(amount).div(_supplyInBalances);\n', '            _supplyInBalances = _supplyInBalances.add(amount);\n', '            _supplyInSheriffsPot = 0;\n', '            _maxBalancesSupply = _maxBalancesSupply.add(maxBalancesSupplyDelta);\n', '            _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\n', '        }\n', '        emit SheriffsPotDistribution(amount);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', "    // Sheriff's Vault\n", '    ////////////////////////////////////////////////////////////////\n', '\n', '    function putToSheriffsVault(uint256 amount) external {\n', '        address holder = msg.sender;\n', '        require(!_whitelist[holder], "Milk: whitelisted holders cannot use Sheriff\'s Vault");\n', '        _updateBalance(holder);\n', '        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\n', '        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\n', '        _balances[holder] = _balances[holder].sub(unitsInBalances);\n', '        _vaults[holder] = _vaults[holder].add(unitsInSheriffsVault);\n', '        _supplyInBalances = _supplyInBalances.sub(amount);\n', '        _supplyInSheriffsVault = _supplyInSheriffsVault.add(amount);\n', '        emit SheriffsVaultDeposit(holder, amount);\n', '    }\n', '\n', '    function takeFromSheriffsVault(uint256 amount) external {\n', '        address holder = msg.sender;\n', '        require(!_whitelist[holder], "Milk: whitelisted holders cannot use Sheriff\'s Vault");\n', '        _updateBalance(holder);\n', '        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\n', '        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\n', '        _balances[holder] = _balances[holder].add(unitsInBalances);\n', '        _vaults[holder] = _vaults[holder].sub(unitsInSheriffsVault);\n', '        _supplyInBalances = _supplyInBalances.add(amount);\n', '        _supplyInSheriffsVault = _supplyInSheriffsVault.sub(amount);\n', '        emit SheriffsVaultWithdraw(holder, amount);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // [Token] Minting token\n', '    // NOTE: Function mint() will be blocked when rewards\n', '    // for stacking COWs to StableV1 are distributed.\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function mint(address recipient, uint256 value) public validRecipient(recipient) onlyOwner returns (bool) {\n', '        if (isWhitelisted(recipient)) {\n', '            uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\n', '            _whitelistedBalances[recipient] = _whitelistedBalances[recipient].add(wunits);\n', '            _supplyWhitelisted = _supplyWhitelisted.add(value);\n', '        } else {\n', '            uint256 units = value.mul(_unitsPerTokenInBalances);\n', '            _balances[recipient] = _balances[recipient].add(units);\n', '            _supplyInBalances = _supplyInBalances.add(value);\n', '        }\n', '        _totalSupply = _totalSupply.add(value);\n', '        emit Mint(recipient, value);\n', '        emit Transfer(0x0000000000000000000000000000000000000000, recipient, value);\n', '        return true;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // [Token] Transferring token\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function transfer(address to, uint256 value) public validRecipient(to) returns (bool) {\n', '        address from = msg.sender;\n', '        _updateBalance(from);\n', '        uint256 units = value.mul(_unitsPerTokenInBalances);\n', '        uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\n', '        if (isWhitelisted(from) && isWhitelisted(to)) {\n', '            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\n', '            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\n', '        } else if (isWhitelisted(from)) {\n', '            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\n', '            _balances[to] = _balances[to].add(units);\n', '            _supplyInBalances = _supplyInBalances.add(value);\n', '            _supplyWhitelisted = _supplyWhitelisted.sub(value);\n', '        } else if (isWhitelisted(to)) {\n', '            _balances[from] = _balances[from].sub(units);\n', '            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\n', '            _supplyInBalances = _supplyInBalances.sub(value);\n', '            _supplyWhitelisted = _supplyWhitelisted.add(value);\n', '        } else {\n', '            _balances[from] = _balances[from].sub(units);\n', '            _balances[to] = _balances[to].add(units);\n', '        }\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public validRecipient(to) returns (bool) {\n', '        _updateBalance(from);\n', '        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\n', '        uint256 units = value.mul(_unitsPerTokenInBalances);\n', '        uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\n', '        if (isWhitelisted(from) && isWhitelisted(to)) {\n', '            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\n', '            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\n', '        } else if (isWhitelisted(from)) {\n', '            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\n', '            _balances[to] = _balances[to].add(units);\n', '            _supplyInBalances = _supplyInBalances.add(value);\n', '            _supplyWhitelisted = _supplyWhitelisted.sub(value);\n', '        } else if (isWhitelisted(to)) {\n', '            _balances[from] = _balances[from].sub(units);\n', '            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\n', '            _supplyInBalances = _supplyInBalances.sub(value);\n', '            _supplyWhitelisted = _supplyWhitelisted.add(value);\n', '        } else {\n', '            _balances[from] = _balances[from].sub(units);\n', '            _balances[to] = _balances[to].add(units);\n', '        }\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        uint256 oldValue = _allowances[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowances[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowances[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Contract getters\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function isWhitelisted(address holder) public view override returns (bool) {\n', '        return _whitelist[holder];\n', '    }\n', '\n', '    function getPeriod() public view override returns (uint256) {\n', '        if (block.timestamp <= _startTime) {\n', '            return 0;\n', '        }\n', '        return block.timestamp.sub(_startTime).div(PERIOD_LENGTH);\n', '    }\n', '\n', '    function getPeriodPart() public view returns (uint256) {\n', '        if (block.timestamp <= _startTime) {\n', '            return 0;\n', '        }\n', '        uint256 durationFromPeriodStart = block.timestamp\n', '            .sub(_startTime.add(getPeriod().mul(PERIOD_LENGTH)));\n', '        return durationFromPeriodStart.mul(10**18).div(PERIOD_LENGTH);\n', '    }\n', '\n', '    function getProductionAmount() public view returns(uint256) {\n', '        uint256 reducings = getPeriod().div(REDUCING_PERIODS);\n', '        uint256 production = INITIAL_PRODUCTION;\n', '        for (uint256 i = 0; i < reducings; i++) {\n', '            production = production.sub(production.div(REDUCING_FACTOR));\n', '        }\n', '        return production;\n', '    }\n', '\n', '    function getProductedAmount() public view returns(uint256) {\n', '        uint256 period = getPeriod();\n', '        uint256 reducings = period.div(REDUCING_PERIODS);\n', '        uint256 productionAmount = INITIAL_PRODUCTION;\n', '        uint256 productedAmount = 0;\n', '        for (uint256 i = 0; i < reducings; i++) {\n', '            productedAmount = productedAmount.add(productionAmount.mul(REDUCING_PERIODS));\n', '            productionAmount = productionAmount.sub(productionAmount.div(REDUCING_FACTOR));\n', '        }\n', '        productedAmount = productedAmount.add(productionAmount.mul(period.sub(reducings.mul(REDUCING_PERIODS))));\n', '        productedAmount = productedAmount.add(productionAmount.mul(getPeriodPart()).div(10**18));\n', '        return productedAmount;\n', '    }\n', '\n', '    function getDistributedAmount() public view returns(uint256) {\n', '        return _distributed;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply.add(getProductedAmount()).sub(_distributed);\n', '    }\n', '\n', '    function holdersSupply() public view returns (uint256) {\n', '        return _supplyInBalances;\n', '    }\n', '\n', '    function whitelistedSupply() public view returns (uint256) {\n', '        return _supplyWhitelisted;\n', '    }\n', '\n', '    function sheriffsPotSupply() public view returns (uint256) {\n', '        return _supplyInSheriffsPot;\n', '    }\n', '\n', '    function sheriffsVaultSupply() public view returns (uint256) {\n', '        return _supplyInSheriffsVault;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '\n', '        // Calculate total amount of undistributed MILK tokens and divide it to shares\n', '        uint256 undistributed = getProductedAmount().sub(_distributed);\n', '        uint256 undistributedCow = undistributed.div(5); // 20%\n', '        uint256 undistributedCowLP = (undistributed.sub(undistributedCow)).div(2); // 40%\n', '        uint256 undistributedMilkLP = (undistributed.sub(undistributedCow)).sub(undistributedCowLP); // 40%\n', '\n', "        // Calculate holder's amounts of undistributed MILK tokens\n", '        if (address(_stableCow) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableCow.power(account), _stableCow.totalPower());\n', '            undistributedCow = totalPower > 0 ? undistributedCow.mul(power).div(totalPower) : 0;\n', '        } else {\n', '            undistributedCow = 0;\n', '        }\n', '        if (address(_stableCowLP) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableCowLP.power(account), _stableCowLP.totalPower());\n', '            undistributedCowLP = totalPower > 0 ? undistributedCowLP.mul(power).div(totalPower) : 0;\n', '        } else {\n', '            undistributedCowLP = 0;\n', '        }\n', '        if (address(_stableMilkLP) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableMilkLP.power(account), _stableMilkLP.totalPower());\n', '            undistributedMilkLP = totalPower > 0 ? undistributedMilkLP.mul(power).div(totalPower) : 0;\n', '        } else {\n', '            undistributedMilkLP = 0;\n', '        }\n', '\n', '        // Substruct 5% from each amount to transfer to the developers team\n', '        uint256 devTeamFee = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).div(20);\n', '\n', '        // Calculate final MILK tokens amount to transfer to the holder\n', '        undistributed = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).sub(devTeamFee);\n', '\n', '        // Calculate whitelisted MILK tokens if any\n', '        uint256 whitelisted = _whitelistedBalances[account].div(_unitsPerTokenWhitelisted);\n', '\n', '        return (_balances[account].div(_unitsPerTokenInBalances)).add(undistributed).add(whitelisted);\n', '    }\n', '\n', '    function vaultOf(address account) public view returns (uint256) {\n', '        return _vaults[account].div(_unitsPerTokenInSheriffsVault);\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////\n', '    // Internal functions\n', '    ////////////////////////////////////////////////////////////////\n', '\n', '    function _updateBalance(address holder) private {\n', '\n', '        // Calculate total amount of undistributed MILK tokens and divide it to shares\n', '        uint256 undistributed = getProductedAmount().sub(_distributed);\n', '        uint256 undistributedCow = undistributed.div(5); // 20%\n', '        uint256 undistributedCowLP = (undistributed.sub(undistributedCow)).div(2); // 40%\n', '        uint256 undistributedMilkLP = (undistributed.sub(undistributedCow)).sub(undistributedCowLP); // 40%\n', '\n', "        // Calculate holder's amounts of undistributed MILK tokens\n", '        if (address(_stableCow) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableCow.power(holder), _stableCow.totalPower());\n', '            if (power > 0) {\n', '                power = _stableCow.usePower(holder);\n', '                undistributedCow = totalPower > 0 ? undistributedCow.mul(power).div(totalPower) : 0;\n', '            }\n', '        } else {\n', '            undistributedCow = 0;\n', '        }\n', '        if (address(_stableCowLP) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableCowLP.power(holder), _stableCowLP.totalPower());\n', '            if (power > 0) {\n', '                power = _stableCowLP.usePower(holder);\n', '                undistributedCowLP = totalPower > 0 ? undistributedCowLP.mul(power).div(totalPower) : 0;\n', '            }\n', '        } else {\n', '            undistributedCowLP = 0;\n', '        }\n', '        if (address(_stableMilkLP) != address(0)) {\n', '            (uint256 power, uint256 totalPower) = (_stableMilkLP.power(holder), _stableMilkLP.totalPower());\n', '            if (power > 0) {\n', '                power = _stableMilkLP.usePower(holder);\n', '                undistributedMilkLP = totalPower > 0 ? undistributedMilkLP.mul(power).div(totalPower) : 0;\n', '            }\n', '        } else {\n', '            undistributedMilkLP = 0;\n', '        }\n', '\n', '        // Substruct 5% from each amount to transfer to the developers team\n', '        uint256 devTeamFee = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).div(20);\n', '\n', '        // Calculate final MILK tokens amount to transfer to the holder\n', '        uint256 tokens = undistributedCow.add(undistributedCowLP).add(undistributedMilkLP).sub(devTeamFee);\n', '\n', '        // Transfer all MILK tokens farmed by the holder and not yet distributed\n', '        _balances[holder] = _balances[holder].add(tokens.mul(_unitsPerTokenInBalances));\n', '        _balances[DEV_TEAM_ADDRESS] = _balances[DEV_TEAM_ADDRESS].add(devTeamFee.mul(_unitsPerTokenWhitelisted));\n', '        _distributed = _distributed.add(tokens).add(devTeamFee);\n', '        _totalSupply = _totalSupply.add(tokens).add(devTeamFee);\n', '        if (isWhitelisted(holder)) {\n', '            _supplyWhitelisted = _supplyWhitelisted.add(tokens);\n', '        } else {\n', '            _supplyInBalances = _supplyInBalances.add(tokens);\n', '        }\n', '        if (isWhitelisted(DEV_TEAM_ADDRESS)) {\n', '            _supplyWhitelisted = _supplyWhitelisted.add(devTeamFee);\n', '        } else {\n', '            _supplyInBalances = _supplyInBalances.add(devTeamFee);\n', '        }\n', '    }\n', '}']