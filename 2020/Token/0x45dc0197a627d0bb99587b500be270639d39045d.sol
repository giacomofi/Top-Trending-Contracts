['pragma solidity >=0.6.0;\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', 'contract SEEN is DSMath {\n', '    uint256                                           public  totalSupply;\n', '    mapping (address => uint256)                      public  balanceOf;\n', '    mapping (address => mapping (address => uint256)) public  allowance;\n', '    string                                            public  symbol = "SEEN";\n', '    string                                            public  name = "seen.haus";\n', '    uint256                                           public  decimals = 18;\n', '\n', '    constructor(address seen) public {\n', '        mint(seen, 1000000000000000000000000);\n', '    }\n', '\n', '    event Approval(address indexed src, address indexed guy, uint wad);\n', '    event Transfer(address indexed src, address indexed dst, uint wad);\n', '    event Mint(address indexed guy, uint wad);\n', '\n', '    function approve(address guy) external returns (bool) {\n', '        return approve(guy, uint(-1));\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '\n', '        emit Approval(msg.sender, guy, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) external returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad, "ds-token-insufficient-approval");\n', '            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n', '        }\n', '\n', '        require(balanceOf[src] >= wad, "ds-token-insufficient-balance");\n', '        balanceOf[src] = sub(balanceOf[src], wad);\n', '        balanceOf[dst] = add(balanceOf[dst], wad);\n', '\n', '        emit Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mint(address guy, uint wad) internal {\n', '        balanceOf[guy] = add(balanceOf[guy], wad);\n', '        totalSupply = add(totalSupply, wad);\n', '        emit Mint(guy, wad);\n', '    }\n', '}']