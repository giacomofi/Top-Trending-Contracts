['interface ITokensTypeStorage {\n', '  function isRegistred(address _address) external view returns(bool);\n', '\n', '  function getType(address _address) external view returns(bytes32);\n', '\n', '  function isPermittedAddress(address _address) external view returns(bool);\n', '\n', '  function owner() external view returns(address);\n', '\n', '  function addNewTokenType(address _token, string calldata _type) external;\n', '\n', '  function setTokenTypeAsOwner(address _token, string calldata _type) external;\n', '}\n', 'interface IYearnToken {\n', '  function token() external view returns(address);\n', '  function deposit(uint _amount) external;\n', '  function withdraw(uint _shares) external;\n', '  function getPricePerFullShare() external view returns (uint);\n', '}\n', '// For support new Defi protocols\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract DefiPortal {\n', '  using SafeMath for uint256;\n', '\n', '  uint public version = 4;\n', '  address constant private ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '  // Contract for handle tokens types\n', '  ITokensTypeStorage public tokensTypes;\n', '\n', '  // Enum\n', '  // NOTE: You can add a new type at the end, but DO NOT CHANGE this order\n', '  enum DefiActions { YearnDeposit, YearnWithdraw }\n', '\n', '  constructor(address _tokensTypes) public {\n', '    tokensTypes = ITokensTypeStorage(_tokensTypes);\n', '  }\n', '\n', '  /**\n', '  *\n', '  * if need paybale protocol, in new version of this portal can be added such function\n', '  *\n', '  function callNonPayableProtocol(\n', '    address[] memory tokensToSend,\n', '    uint256[] memory amountsToSend,\n', '    bytes memory _additionalData,\n', '    bytes32[] memory _additionalArgs\n', '  )\n', '   external\n', '   returns(\n', '     string memory eventType,\n', '     address[] memory tokensToReceive,\n', '     uint256[] memory amountsToReceive\n', '  );\n', '  */\n', '\n', '\n', '  // param _additionalArgs[0] require DefiActions type\n', '  function callNonPayableProtocol(\n', '    address[] memory tokensToSend,\n', '    uint256[] memory amountsToSend,\n', '    bytes memory _additionalData,\n', '    bytes32[] memory _additionalArgs\n', '  )\n', '    external\n', '    returns(\n', '      string memory eventType,\n', '      address[] memory tokensToReceive,\n', '      uint256[] memory amountsToReceive\n', '    )\n', '  {\n', '    if(uint(_additionalArgs[0]) == uint(DefiActions.YearnDeposit)){\n', '      (tokensToReceive, amountsToReceive) = _YearnDeposit(\n', '        tokensToSend[0],\n', '        amountsToSend[0],\n', '        _additionalData\n', '      );\n', '      eventType = "YEARN_DEPOSIT";\n', '    }\n', '    else if(uint(_additionalArgs[0]) == uint(DefiActions.YearnWithdraw)){\n', '       (tokensToReceive, amountsToReceive) = _YearnWithdraw(\n', '         tokensToSend[0],\n', '         amountsToSend[0],\n', '         _additionalData\n', '        );\n', '       eventType = "YEARN_WITHDRAW";\n', '    }\n', '    else{\n', '      revert("Unknown DEFI action");\n', '    }\n', '  }\n', '\n', '  // for new DEFI protocols Exchange portal get value here\n', '  function getValue(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '   public\n', '   view\n', '   returns(uint256)\n', '  {\n', '    return 0;\n', '  }\n', '\n', '\n', '  // param _additionalData require address yTokenAddress, uint256 minReturn\n', '  function _YearnDeposit(\n', '    address tokenAddress,\n', '    uint256 tokenAmount,\n', '    bytes memory _additionalData\n', '  )\n', '    private\n', '    returns(\n', '    address[] memory tokensToReceive,\n', '    uint256[] memory amountsToReceive\n', '  )\n', '  {\n', '    // get yToken instance\n', '    (address yTokenAddress, uint256 minReturn) = abi.decode(_additionalData, (address, uint256));\n', '    IYearnToken yToken = IYearnToken(yTokenAddress);\n', '    // transfer underlying from sender\n', '    _transferFromSenderAndApproveTo(IERC20(tokenAddress), tokenAmount, yTokenAddress);\n', '    // mint yToken\n', '    yToken.deposit(tokenAmount);\n', '    // get received tokens\n', '    uint256 receivedYToken = IERC20(yTokenAddress).balanceOf(address(this));\n', '    // min return check\n', '    require(receivedYToken >= minReturn, "MIN_RETURN_FAIL");\n', '    // send yToken to sender\n', '    IERC20(yTokenAddress).transfer(msg.sender, receivedYToken);\n', '    // send remains if there is some remains\n', '    _sendRemains(IERC20(tokenAddress), msg.sender);\n', '    // Update type\n', "    // DEV NOTE don't need mark this tokens as YEARN assets, we can use 1inch ratio\n", '    // for this token as for CRYPTOCURRENCY\n', '    tokensTypes.addNewTokenType(yTokenAddress, "CRYPTOCURRENCY");\n', '    // return data\n', '    tokensToReceive = new address[](1);\n', '    tokensToReceive[0] = yTokenAddress;\n', '    amountsToReceive = new uint256[](1);\n', '    amountsToReceive[0] = receivedYToken;\n', '  }\n', '\n', '\n', '  // param _additionalData require  uint256 minReturn\n', '  function _YearnWithdraw(\n', '    address yTokenAddress,\n', '    uint256 sharesAmount,\n', '    bytes memory _additionalData\n', '  )\n', '    private\n', '    returns(\n', '    address[] memory tokensToReceive,\n', '    uint256[] memory amountsToReceive\n', '    )\n', '  {\n', '    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\n', '    IYearnToken yToken = IYearnToken(yTokenAddress);\n', '    // transfer underlying from sender\n', '    _transferFromSenderAndApproveTo(IERC20(yTokenAddress), sharesAmount, yTokenAddress);\n', '    // mint yToken\n', '    yToken.withdraw(sharesAmount);\n', '    // get underlying address\n', '    address underlyingToken = yToken.token();\n', '    // get received tokens\n', '    uint256 received = IERC20(underlyingToken).balanceOf(address(this));\n', '    // min return check\n', '    require(received >= minReturn, "MIN_RETURN_FAIL");\n', '    // send underlying to sender\n', '    IERC20(underlyingToken).transfer(msg.sender, received);\n', '    // send remains if there is some remains\n', '    _sendRemains(IERC20(yTokenAddress), msg.sender);\n', '    // return data\n', '    tokensToReceive = new address[](1);\n', '    tokensToReceive[0] = underlyingToken;\n', '    amountsToReceive = new uint256[](1);\n', '    amountsToReceive[0] = received;\n', '  }\n', '\n', '\n', '  // Facilitates for send source remains\n', '  function _sendRemains(IERC20 _source, address _receiver) private {\n', '    // After the trade, any _source that exchangePortal holds will be sent back to msg.sender\n', '    uint256 endAmount = (_source == IERC20(ETH_TOKEN_ADDRESS))\n', '    ? address(this).balance\n', '    : _source.balanceOf(address(this));\n', '\n', '    // Check if we hold a positive amount of _source\n', '    if (endAmount > 0) {\n', '      if (_source == IERC20(ETH_TOKEN_ADDRESS)) {\n', '        payable(_receiver).transfer(endAmount);\n', '      } else {\n', '        _source.transfer(_receiver, endAmount);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Transfers tokens to this contract and approves them to another address\n', '  *\n', '  * @param _source          Token to transfer and approve\n', '  * @param _sourceAmount    The amount to transfer and approve (in _source token)\n', '  * @param _to              Address to approve to\n', '  */\n', '  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\n', '    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\n', '    // reset previos approve because some tokens require allowance 0\n', '    _source.approve(_to, 0);\n', '    // approve\n', '    _source.approve(_to, _sourceAmount);\n', '  }\n', '}']