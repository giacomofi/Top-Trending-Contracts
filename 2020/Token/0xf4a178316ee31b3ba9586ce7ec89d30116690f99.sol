['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Burn(address indexed from, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a); \n', '    return a - b; \n', '  } \n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n', '    uint256 c = a + b; assert(c >= a);\n', '    return c;\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', ' \n', '  mapping(address => uint256) balances;\n', ' \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]); \n', '    // SafeMath.sub will throw if there is not enough balance. \n', '    balances[msg.sender] = balances[msg.sender].sub(_value); \n', '    balances[_to] = balances[_to].add(_value); \n', '    emit Transfer(msg.sender, _to, _value); \n', '    return true; \n', '  } \n', ' \n', '  /** \n', '   * @dev Gets the balance of the specified address. \n', '   * @param _owner The address to query the the balance of. \n', '   * @return An uint256 representing the amount owned by the passed address. \n', '   */ \n', '  function balanceOf(address _owner) public constant returns (uint256 balance) { \n', '    return balances[_owner]; \n', '  } \n', '} \n', ' \n', '/** \n', ' * @title Standard ERC20 token \n', ' * \n', ' * @dev Implementation of the basic standard token. \n', ' * @dev https://github.com/ethereum/EIPs/issues/20 \n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \n', ' */ \n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', ' \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]); \n', '    balances[_from] = balances[_from].sub(_value); \n', '    balances[_to] = balances[_to].add(_value); \n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '    emit Transfer(_from, _to, _value); \n', '    return true; \n', '  } \n', ' \n', ' /** \n', '  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \n', '  * \n', '  * Beware that changing an allowance with this method brings the risk that someone may use both the old \n', '  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \n', "  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \n", '  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n', '  * @param _spender The address which will spend the funds. \n', '  * @param _value The amount of tokens to be spent. \n', '  */ \n', '  function approve(address _spender, uint256 _value) public returns (bool) { \n', '    allowed[msg.sender][_spender] = _value; \n', '    emit Approval(msg.sender, _spender, _value); \n', '    return true; \n', '  }\n', ' \n', ' /** \n', '  * @dev Function to check the amount of tokens that an owner allowed to a spender. \n', '  * @param _owner address The address which owns the funds. \n', '  * @param _spender address The address which will spend the funds. \n', '  * @return A uint256 specifying the amount of tokens still available for the spender. \n', '  */ \n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { \n', '    return allowed[_owner][_spender]; \n', '  } \n', ' \n', ' /** \n', '  * approve should be called when allowed[_spender] == 0. To increment \n', '  * allowed value is better to use this function to avoid 2 calls (and wait until \n', '  * the first transaction is mined) * From MonolithDAO Token.sol \n', '  */ \n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n', '    return true; \n', '  }\n', ' \n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender]; \n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', ' \n', '  function () public payable {\n', '    revert();\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', ' \n', 'contract MintableToken is StandardToken {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', ' \n', '  function mint(address _to, uint256 _amount) internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    return true;\n', '  }\n', '  \n', '  function burn(uint256 _value) public returns (bool) {\n', '\n', '    require(_value <= balances[msg.sender]);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    totalSupply = totalSupply.sub(_value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value); \n', '    balances[address(0)] = balances[address(0)].add(_value); \n', '    emit Burn(msg.sender, _value); \n', '    return true; \n', '  }\n', ' \n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', ' \n', '  \n', '}\n', ' \n', 'contract HondaCivic is MintableToken{\n', '    \n', '    string public constant name = "Honda Civic";\n', '    \n', '    string public constant symbol = "HCV";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    IERC20 token = IERC20(address(0x6b175474e89094c44da98b954eedeac495271d0f));\n', '    \n', '    \n', '    function create(uint256 daiAmount) public returns (bool) {\n', '        \n', '        mint(msg.sender, daiAmount/21000);\n', '        \n', '        require(token.transferFrom(msg.sender, address(this), daiAmount));\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function sell(uint256 civics) public returns (bool) {\n', '        \n', '        token.transfer(msg.sender, civics*21000);\n', '        \n', '        require(burn(civics));\n', '        \n', '        return true;\n', '        \n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']