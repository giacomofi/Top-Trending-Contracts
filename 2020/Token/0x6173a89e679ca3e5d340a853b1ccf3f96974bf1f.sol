['pragma solidity=0.5.16;\n', '\n', "import 'SafeMath.sol';\n", "import 'IERCMint20.sol';\n", '\n', 'contract YOUToken is IERCMint20 {\n', '    using SafeMath for uint;\n', '\n', "    string public constant name = 'YOU';\n", "    string public constant symbol = 'YOU';\n", '    uint8 public constant decimals = 18;\n', '    uint public constant max_mint_number = 200000 * (10 ** uint(decimals));\n', '    uint  public totalSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '    mapping(address => mapping(address=>uint)) public user_swap_payblock;\n', '    address public owner;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    function changeOwner(address new_owner) external{\n', '        require(msg.sender == owner);\n', '        owner = new_owner;\n', '    }\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value); // is initial value 0?\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _approve(address origen_owner, address spender, uint value) private {\n', '        allowance[origen_owner][spender] = value;\n', '        emit Approval(origen_owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    function mint(address to, uint value) external{\n', '        require(msg.sender == owner);\n', '        uint realMint = value;\n', '        if(totalSupply.add(value) > max_mint_number){\n', '            realMint = max_mint_number.sub(totalSupply);\n', '        }\n', '        if(realMint == 0){\n', '            return;\n', '        }\n', '        _mint(to,realMint);\n', '    }\n', '\n', '    function getStartblock(address user,address swap_addr) external view returns (uint256 lastblocknum){\n', '        return user_swap_payblock[user][swap_addr];\n', '    }\n', '\tfunction setAddressBlock(address user,address swap_addr,uint256 lastblocknum) external returns (bool success){\n', '\t    require(msg.sender == owner);\n', '\t    user_swap_payblock[user][swap_addr] = lastblocknum;\n', '\t    return true;\n', '\t}\n', '    function approve(address spender, uint value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '}']